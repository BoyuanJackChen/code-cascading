[
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared = []\n    for elem in test_tup1:\n        if elem in test_tup2:\n            shared.append(elem)\n    return shared"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Loop through the first list\n    for element in test_tup1:\n        # Check if the element is also in the second list\n        if element in test_tup2:\n            # If it is, add it to the shared elements list\n            shared_elements.append(element)\n\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for i in test_tup1:\n        if i in test_tup2:\n            shared_elements.append(i)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for i in test_tup1:\n        if i in test_tup2:\n            shared_elements.append(i)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # convert tuples to lists for easier manipulation\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n\n    # create a dictionary to store the count of each element in list1\n    count_dict = {}\n    for elem in list1:\n        if elem in count_dict:\n            count_dict[elem] += 1\n        else:\n            count_dict[elem] = 1\n\n    # loop through list2 and decrement the count of each element in count_dict\n    for elem in list2:\n        if elem in count_dict:\n            count_dict[elem] -= 1\n            if count_dict[elem] == 0:\n                del count_dict[elem]\n\n    # create a new list containing only the shared elements\n    shared_list = [elem for elem in list1 if elem in count_dict]\n\n    # return the shared_list\n    return shared_list"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Initialize an empty set to store the common elements\n    common_set = set()\n\n    # Iterate through each element of the first list\n    for element in test_tup1:\n        # Check if the element is present in the second list\n        if element in test_tup2:\n            # If it is, add it to the common set\n            common_set.add(element)\n\n    # Return the common set as a list\n    return list(common_set)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    common_elements = []\n    for elem1 in test_tup1:\n        if elem1 in test_tup2:\n            common_elements.append(elem1)\n    return common_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Create sets from the given lists\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    \n    # Find the intersection of the two sets\n    shared_elements = set1.intersection(set2)\n    \n    # Return the shared elements as a list\n    return list(shared_elements)"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    \n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    \n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n\n    if n <= 1:\n        return False\n\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    # Check if the given number is less than 2\n    if n < 2:\n        return True\n    # Check if the given number is equal to 2\n    elif n == 2:\n        return False\n    # Check if the given number is divisible by 2\n    elif n % 2 == 0:\n        return True\n    # Check if the given number is greater than 2 and odd\n    else:\n        # Calculate the square root of the given number\n        sqrt = math.sqrt(n)\n        # Check if the square root is an integer\n        if sqrt.is_integer():\n            # If it is, then the given number is prime\n            return True\n        else:\n            # If not, then the given number is not prime\n            return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    Check if a given number is prime or not.\n\n    Args:\n        n: An integer.\n\n    Returns:\n        True if n is not prime, False otherwise.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    hq.heapify(nums)\n    largest = [0] * n\n    for i in range(n):\n        largest[i] = hq.heappop(nums)\n    return largest"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums[:n]:\n        hq.heappush(heap, num)\n    for num in nums[n:]:\n        if num > heap[0]:\n            hq.heappop(heap)\n            hq.heappush(heap, num)\n    return heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    largest_nums = []\n    for num in nums:\n        hq.heappush(largest_nums, num)\n        if len(largest_nums) > n:\n            hq.heappop(largest_nums)\n    return largest_nums"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # create an empty max heap\n    max_heap = []\n    # push the first n elements of the list onto the max heap\n    for num in nums[:n]:\n        hq.heappush(max_heap, -num)\n    # pop the largest n elements of the max heap and store them in a new list\n    result = []\n    for _ in range(n):\n        result.append(-hq.heappop(max_heap))\n    return result"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Build a max heap from the input list\n    max_heap = [(-num, i) for i, num in enumerate(nums)]\n    heapq.heapify(max_heap)\n    \n    # Extract the n largest integers from the heap\n    largest = []\n    for i in range(n):\n        largest.append(hq.heappop(max_heap)[1])\n    \n    return largest[::-1]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # convert the list of numbers to a min-heap\n    min_heap = [-num for num in nums]\n    hq.heapify(min_heap)\n    \n    # extract the n largest integers from the heap\n    largest = []\n    for i in range(n):\n        largest.append(min_heap[0])\n        hq.heappop(min_heap)\n    \n    return largest"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    \"\"\"\n    # Convert the list of numbers to a min heap\n    min_heap = [None] * n\n    for i in range(n):\n        min_heap[i] = nums[i]\n        hq.heapify(min_heap)\n\n    # Extract the largest n integers from the min heap\n    result = []\n    for i in range(n):\n        result.append(min_heap.pop())\n\n    return result"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    largest_nums = []\n    heap = []\n    for num in nums:\n        heapq.heappush(heap,num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n        if len(largest_nums) < n:\n            largest_nums.append(heap[0])\n    return largest_nums[::-1]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n\n    # Create a max heap of size n to store the largest n numbers\n    max_heap = []\n    for i in range(n):\n        heapq.heappush(max_heap, -nums[i])\n\n    # Iterate through the remaining numbers and update the max heap\n    for i in range(n, len(nums)):\n        if nums[i] > max_heap[0]:\n            heapq.heappop(max_heap)\n            heapq.heappush(max_heap, -nums[i])\n\n    # Return the largest n numbers in descending order\n    return max_heap\n"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Create a max-heap of size n\n    max_heap = hq.nlargest(n, nums)\n    # Pop the elements from the max-heap and store them in a new list\n    result = []\n    for i in range(n):\n        result.append(max_heap.pop())\n    return result"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n\n    # Convert the given number to binary string\n    binary_str = bin(x)[2:]\n\n    # Count the number of ones in the binary string\n    count = sum(1 for bit in binary_str if bit == '1')\n\n    # If there is only one difference, the number is a power of two\n    return count == 1"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n\n    # If x is a power of 2, the bit position of the first different bit will be the \n    # position of the power of 2.\n    for i in range(32):\n        if (x & (1<<i))!= (x & (1<<(i+1))):\n            return i\n\n    # If the loop completes without returning, x is a power of 2.\n    return True"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x & (x - 1) == 0: # Check if x is a power of two\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # check if the binary representation of x and 1 are different \n    if bin(x ^ 1)[2:]!= bin(1)[2:]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n    if x == 0:\n        return True\n    if x == 1:\n        return False\n\n    if x % 2 == 0:\n        return is_Power_Of_Two(x // 2)\n    else:\n        return not is_Power_Of_Two((x - 1) // 2)"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n\n    # Find the difference between the two numbers \n    diff = x ^ (x-1) \n\n    # Check if the difference is 0 (i.e. x and x-1 have the same binary representation)\n    if diff == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # Convert x to binary format\n    binary_x = bin(x)[2:]\n    # Count the number of zeroes in the binary representation of x\n    count = sum(1 for bit in binary_x if bit == '0')\n    # Check if count is a power of 2\n    return (count & (count-1)) == 0"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n\n    # Convert the input number to binary\n    binary = bin(x)[2:]\n\n    # Check if the number of bits set to 1 is odd or even\n    if len(binary) % 2 == 1:\n        return False\n    else:\n        return True"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Power_Of_Two (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0 or x == 1:\n        return False\n    \n    # check if the binary representation of x has only one bit that differs between x and 0\n    bits_diff = bin(x ^ 0).count('1')\n    if bits_diff == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    x &= ~(x >> 1)  # Clears all the bits that are equal to 1.\n    x |= x >> 31      # Sets all the bits that are equal to 1.\n    return x == 0    # Returns True if all the bits are 0, otherwise False."
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_char_long(text):\n    \"\"\"\n    Write a function to find all words which are at least 4 characters long in a string.\n    \"\"\"\n    # Split the text into a list of words\n    words = text.split()\n    \n    # Create an empty list to store the matching words\n    matches = []\n    \n    # Loop through the words and check if each word has at least 4 characters\n    for word in words:\n        if len(word) >= 4:\n            matches.append(word)\n    \n    # Return the list of matching words\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w{4,}\\b'\n    words = re.findall(pattern, text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Split the text into words\n    words = re.findall(r'\\b\\w+\\b', text)\n    \n    # Filter out words which are less than 4 characters long\n    filtered_words = [word for word in words if len(word) >= 4]\n    \n    return filtered_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text)\n    result = [word for word in words if len(word) >= 4]\n    return result"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = re.compile(r'\\b\\w{4,}\\b')\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Define a regular expression pattern to match words with at least 4 characters\n    pattern = re.compile(r'\\b\\w{4,}\\b')\n    \n    # Find all matches of the pattern in the text and return them\n    return pattern.findall(text)"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Use regular expressions to find all words that are at least 4 characters long\n    pattern = r'\\b\\w{4,}\\b'\n    words = re.findall(pattern, text)\n    \n    # Return a list of words that are at least 4 characters long\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text)\n    result = []\n    for word in words:\n        if len(word) >= 4:\n            result.append(word)\n    return result"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Split the text into words using regular expressions\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b[a-zA-Z]{4,}\\b'\n    words = re.findall(pattern, text)\n    return words"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    # loop through each element in the list\n    for num in nums:\n        # find the square of the element and add it to a new list\n        square_list.append(num**2)\n    \n    return square_list"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num**2)\n    return squared_nums"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num**2)\n    return squared_nums"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num ** 2)\n    return squared_nums"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for num in nums:\n        print(num**2)"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Rotations(str): \n    n = len(str)\n    count = 0\n    \n    # Traverse all possible rotations and count the number of equal strings in each rotation\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if str[i:j] == str[j:i]:\n                count += 1\n    \n    # Return the minimum number of rotations required to get the same string\n    return count"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    \n    # Initialize two pointers i and j to the beginning of the string\n    i = 0\n    j = 0\n    \n    # Initialize a counter to keep track of the number of rotations we need to perform\n    count = 0\n    \n    # While the i and j pointers are not equal, we can perform a rotation\n    while i < len(str) and j < len(str):\n        \n        # If the characters at i and j are different, we can perform a rotation\n        if str[i]!= str[j]:\n            \n            # Increment the counter and update the pointers\n            count += 1\n            i, j = j, i\n            \n            # If the pointers cross each other, we can't perform any more rotations\n            if i >= len(str):\n                return count\n        \n        # Increment the pointers\n        i += 1\n        j += 1\n    \n    # Return the number of rotations needed\n    return count"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    # create a list to store the character frequency pairs sorted by frequency in descending order\n    freq_list = sorted(freq.items(), key=lambda x: x[1], reverse=True)\n    \n    # initialize a variable to store the minimum number of rotations required\n    min_rotations = 0\n    \n    # iterate through the sorted list of character frequency pairs\n    for i in range(len(freq_list)):\n        # if the character frequency is greater than 1, increment the minimum number of rotations\n        if freq_list[i][1] > 1:\n            min_rotations += 1\n    \n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    count = 0\n\n    for i in range(n):\n        # check for palindromes\n        if str[i] == str[n-1-i]:\n            count += 1\n\n    return count"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    # create a hash table to store the frequency of characters in the string\n    freq = {}\n    for i in range(n):\n        if str[i] in freq:\n            freq[str[i]] += 1\n        else:\n            freq[str[i]] = 1\n    \n    # initialize variables to keep track of the minimum rotations and the maximum frequency\n    min_rotations = n\n    max_freq = 1\n    \n    # iterate over all possible rotations of the string\n    for i in range(n):\n        for j in range(n-i-1):\n            # rotate the string by i positions\n            rotated_str = str[j:j+i+1]\n            \n            # update the frequency of characters in the rotated string\n            for k in range(i):\n                if rotated_str[k] in freq:\n                    freq[rotated_str[k]] -= 1\n                else:\n                    break\n            \n            # update the minimum rotations and maximum frequency\n            if max_freq < len(freq):\n                min_rotations = i\n                max_freq = len(freq)\n    \n    # return the minimum rotations required to get the same string\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n\n    # Check if the input string is empty or not\n    if len(str) == 0:\n        return 0\n\n    # Create a dictionary to store the count of each character in the string\n    char_count = {}\n    for char in str:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    # Convert the dictionary to a list of tuples to sort the counts based on the frequency of the characters\n    sorted_chars = sorted(char_count.items(), key=lambda x: (-x[1], x[0]))\n\n    # Calculate the minimum number of rotations required to get the same string\n    min_rotations = 0\n    for i in range(len(sorted_chars)-1):\n        if sorted_chars[i][1]!= sorted_chars[i+1][1]:\n            min_rotations += 1\n            sorted_chars[i] = sorted_chars[i][0], sorted_chars[i+1][1]\n\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    min_rotations = n\n    \n    # Loop through each character in the string and check if the character is the last character.\n    for i in range(n):\n        if i!= n - 1 and str[i]!= str[n - 1]:\n            # If the characters are different, then a rotation is required.\n            min_rotations = min(min_rotations, n - i)\n    \n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Rotations(str): \n    \"\"\"\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    \"\"\"\n    n = len(str)\n    for i in range(n):\n        for j in range(i+1, n):\n            if str[j:i+1] == str[i:j+1][::-1]:\n                return j - i + 1\n    return 0"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Rotations(str): \n    n = len(str)\n    # Initialize two pointers (i,j) such that str[i] < str[j]\n    i, j = 0, n-1\n    while i < j:\n        # Find the smallest element in the range str[i] to str[j]\n        while i < j and str[i] == str[j]:\n            i += 1\n            j -= 1\n        # If the smallest element is not a pivot, move i to its right\n        if i < j and str[i] > str[j]:\n            i += 1\n        # If the smallest element is a pivot, move j to its left\n        else:\n            j -= 1\n    # If str[i] < str[j], then the minimum number of rotations required is i+1, since we need to rotate the right substring str[i+1] to str[j] to get the same string as str[i].\n    # If str[i] > str[j], then the minimum number of rotations required is j+1, since we need to rotate the left substring str[i] to str[j-1] to get the same string as str[i].\n    return min(i+1, j+1)"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Rotations(str):\n    \"\"\"\n    This function takes a string as input and returns the minimum number of rotations required to get the same string.\n    \"\"\"\n    n = len(str)\n    count = 0\n    # Check for strings of length 1 or 2\n    if n == 1 or n == 2:\n        return count\n    # Iterate through all possible rotations of the given string\n    for i in range(n):\n        for j in range(i+1, n+1):\n            # Check if the rotated string is equal to the original string\n            if str[j:] == str[:j]:\n                # If yes, increment the count of rotations\n                count += 1\n    return count"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_Occ(s,ch):\n    \"\"\"\n    Write a python function to remove first and last occurrence of a given character from the string.\n    \"\"\"\n    # remove first occurrence\n    s = s.replace(ch,'',1)\n    # remove last occurrence\n    s = s.replace(ch,'',-1)\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_Occ(s,ch):\n    \"\"\"\n    This function removes the first and last occurrence of a given character from the string.\n    \"\"\"\n    if ch in s:\n        s = s.replace(ch,'')\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if not s:\n        return \"\"\n    else:\n        return s[:s.find(ch)] + s[s.rfind(ch)+1:]"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # check if the character is at the beginning or end of the string\n    if s.startswith(ch):\n        return s[1:]\n    elif s.endswith(ch):\n        return s[:-1]\n    else:\n        return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = list(s)\n    index_first = s.index(ch)\n    s[index_first] = None\n    index_last = s.index(ch, index_first+1)\n    s[index_last] = None\n    return ''.join(s)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_Occ(s, ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if s[0] == ch:\n        s = s[1:]\n    if s[-1] == ch:\n        s = s[:-1]\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if s[0] == ch:\n        s = s[1:]\n    if s[-1] == ch:\n        s = s[:-1]\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = s.replace(ch,'')\n    s = s.lstrip(ch)\n    s = s.rstrip(ch)\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_Occ(s, ch):\n    # Removing first occurrence of given character\n    if s.find(ch) == 0:\n        s = s[1:]\n    # Removing last occurrence of given character\n    if s.rfind(ch) == len(s) - 1:\n        s = s[:len(s)-1]\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_Occ(s,ch):\n    if s.find(ch) == 0:\n        s = s[1:]\n    elif s.find(ch) == len(s)-1:\n        s = s[:len(s)-1]\n    else:\n        s = s.replace(ch,'')\n    return s"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    # Get the number of rows and columns in the matrix\n    rows = len(M)\n    cols = len(M[0])\n\n    # Initialize a list to store the sorted matrix\n    sorted_matrix = []\n\n    # Loop through the rows of the matrix\n    for i in range(rows):\n        # Initialize a variable to keep track of the sum of the current row\n        current_row_sum = 0\n\n        # Loop through the columns of the matrix\n        for j in range(cols):\n            # Add the value of the current element to the sum of the row so far\n            current_row_sum += M[i][j]\n\n        # Add the current row to the sorted matrix list\n        sorted_matrix.append(M[i])\n\n    # Sort the sorted matrix in ascending order according to the sum of its rows\n    sorted_matrix.sort(key=lambda x: sum(x))\n\n    # Return the sorted matrix\n    return sorted_matrix"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    rows = len(M)\n    cols = len(M[0])\n    for j in range(cols):\n        for i in range(rows - 1):\n            if sum(M[i]) > sum(M[i+1]):\n                M[i], M[i+1] = M[i+1], M[i]"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    # Traverse each row and calculate the sum of its elements\n    sums = [sum(row) for row in M]\n    # Traverse the rows again and store the indices of the rows with the minimum sum\n    min_index = [sums.index(min(sums))]\n    # Traverse the remaining rows\n    for i in range(n-1):\n        # Calculate the sum of the current row and the sum of the previous row\n        current_sum = sums[i] + sums[i+1]\n        # If the sum is greater than the minimum sum, update the minimum sum and the index of the minimum row\n        if current_sum > sums[min_index[0]]:\n            min_index = [i+1]\n        # Otherwise, check if the row with the current sum is smaller than the row with the current index\n        elif current_sum < sums[min_index[0]]:\n            min_index = [i+1]\n    # Sort the matrix based on the minimum row indices\n    sorted_matrix = []\n    for i in range(n):\n        sorted_matrix.append(M[min_index[0]-1])\n        min_index[0] = min_index[0]-1\n    return sorted_matrix"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    n = len(M)\n    # create a list of tuples representing the sum of each row in M\n    sums = [(sum(row), row) for row in M]\n    # sort the list of tuples by the sum of the rows\n    sums.sort()\n    # create a new list of lists representing the sorted matrix\n    sorted_matrix = [row for sum_, row in sums]\n    # transpose the sorted matrix to obtain the original matrix\n    sorted_matrix = list(zip(*sorted_matrix))\n    return sorted_matrix"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # transpose the matrix\n    M = list(map(list, zip(*M)))\n    \n    # sort the matrix by the sum of its rows\n    sorted_M = sorted(M, key=lambda x: sum(x))\n    \n    # transpose the sorted matrix back\n    sorted_M = list(map(list, zip(*sorted_M)))\n    \n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    This function sorts a given matrix in ascending order according to the sum of its rows.\n    '''\n    \n    # Sort the matrix in ascending order according to the sum of its rows\n    for i in range(len(M)):\n        for j in range(len(M[i])):\n            for k in range(j+1,len(M[i])):\n                if M[i][j]+M[i][k] < M[i][j]:\n                    M[i][j], M[i][k] = M[i][k], M[i][j]\n                    \n    # Print the sorted matrix\n    for row in M:\n        for item in row:\n            print(item, end=' ')\n        print()"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    # iterate through the rows of the matrix\n    for i in range(n):\n        # get the sum of the i-th row\n        row_sum = sum(M[i])\n        # sort the remaining rows in ascending order\n        M[i], M[row_sum] = M[row_sum], M[i]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    rows = len(M)\n    cols = len(M[0])\n    # create a copy of the matrix to avoid modifying the original\n    matrix = [[row[:] for row in row_list] for row_list in M]\n    # sort each row in descending order of its sum\n    for i in range(rows):\n        matrix[i] = sorted(matrix[i], key=lambda x: sum(x), reverse=True)\n    # create a new matrix with the sorted rows\n    sorted_matrix = []\n    for i in range(rows):\n        row = [matrix[i][j] for j in range(cols)]\n        sorted_matrix.append(row)\n    return sorted_matrix"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if M[i][j] > M[i][i] + M[j][j]:\n                M[i], M[j] = M[j], M[i]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    n = len(M)\n    # transpose matrix\n    for i in range(n):\n        for j in range(i, n):\n            M[i][j], M[j][i] = M[j][i], M[i][j]\n\n    # bubble sort\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if M[j][i] + M[j+1][i] > M[j+1][i] + M[j][i]:\n                M[j], M[j+1] = M[j+1], M[j]\n\n    return M"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    #Calculate the volume of the prism\n    Volume = l * b * h\n\n    return Volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (l * b * h) / 6\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Volume(l,b,h):\n    '''\n    This function takes the length, breadth and height of a triangle as input and returns the volume of the triangle.\n    '''\n\n    # Calculate the volume of the triangle\n    volume = (1/3) * l * b * h\n\n    # Return the volume of the triangle\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l*b*h/3\n    print(\"The volume of the triangular prism is:\",volume)"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Volume(l,b,h): \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = (1/3)*b*h\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    # Calculating the volume of the triangular prism\n    V = (l*b*h)/3\n    \n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes in the dimensions of a triangular prism and returns the volume of the prism.\n    '''\n    V = 0.5 * l * b * h\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Volume(l,b,h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = l*b*h/3\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Volume(l,b,h): \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = (1/3) * l * b * h\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = (1/3)*l*b*h\n    return V"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r\"(?<![a-z])([a-z])(?=[a-z])|(?<=\\w)([A-Z])\"\n    matches = re.findall(pattern, text)\n    return len(matches) > 0"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'([a-z]+)'\n    matches = re.findall(pattern, text)\n    if len(matches) > 0:\n        for match in matches:\n            if match.lower()!= match:\n                return False\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'([a-z]+_?[a-z]+)'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search(r'^[a-z]*_?[a-z]*$', text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'([a-z])([a-z])'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def text_lowercase_underscore(text):\n    # Define a regular expression pattern to match lowercase letters followed by an underscore\n    pattern = r'\\b[a-z]+_[a-z]+\\b'\n    # Search for occurrences of the pattern in the input text\n    matches = re.findall(pattern, text)\n    # Return true if there are matches and false otherwise\n    return len(matches) > 0"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile(r'(?<![a-z])[a-z]+(?![a-z])_')\n    matches = pattern.findall(text)\n    if len(matches) > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = re.compile(r'([a-z]+)_([a-z]+)')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r\"^[a-z]+_[a-z]+$\"\n    if re.match(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    underscore_pattern = r'([a-z])_([a-z])'\n    underscore_pattern = re.compile(underscore_pattern)\n    underscore_matches = underscore_pattern.findall(text)\n\n    return True if underscore_matches else False"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    \"\"\"\n    Write a function that returns the perimeter of a square given its side length as input.\n    \"\"\"\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a\n    return perimeter"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = a * 4\n    return perimeter"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4*a\n    return perimeter"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def str_to_list(string):\n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n    NO_OF_CHARS = 256\n    char_list = []\n    for char in range(NO_OF_CHARS):\n        if char not in string:\n            char_list.append(chr(char))\n    return \"\".join(char_list)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    for i in range(256):\n        if string.count(chr(i)) > 0:\n            string = string.replace(chr(i), '')\n    return string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def str_to_list(string):\n    NO_OF_CHARS = 256\n    char_list = list(string)\n    for char in char_list:\n        if char in string:\n            char_list.remove(char)\n    return ''.join(char_list)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def str_to_list(string):\n    # Split the string into a list of characters\n    char_list = list(string)\n\n    # Create an empty string to store the filtered characters\n    filtered_string = ''\n\n    # Iterate through each character in the character list\n    for char in char_list:\n        # Check if the character is not present in the second string\n        if char not in string:\n            # Add the character to the filtered string\n            filtered_string += char\n\n    return filtered_string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    for i in range(NO_OF_CHARS):\n        if string.count(chr(i)) > 0:\n            string = string.replace(chr(i), \"\")\n    return string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Initialize an empty list to store the result\n    result = []\n    \n    # Loop through each character in the first string\n    for char in string:\n        # Check if the character is not in the second string\n        if char not in string:\n            # Add the character to the result list\n            result.append(char)\n    \n    # Join the characters in the result list into a string and return it\n    return ''.join(result)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def str_to_list(string): \n    NO_OF_CHARS = 256 \n    string_list = [] \n    for i in range(NO_OF_CHARS): \n        if i not in string: \n            string_list.append(chr(i)) \n    return string_list"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    return [chr(i) for i in range(NO_OF_CHARS) if i not in string]"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def str_to_list(string1, string2): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    new_string = \"\" \n    for char in string1: \n        if char not in string2: \n            new_string += char \n    return new_string "
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    NO_OF_CHARS = 256\n    first_string = list(string)\n    second_string = list(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+-=[]{}|;:,.<>/?`~\")\n\n    for char in first_string:\n        if char in second_string:\n            first_string.remove(char)\n\n    return ''.join(first_string)"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    unique_nums = []\n\n    for num in arraynums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n\n    return len(unique_nums)!= len(arraynums)"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Check whether the given array contains any duplicate elements.\n    \"\"\"\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    # Convert the array into a set to remove duplicates\n    unique_nums = set(arraynums)\n    # Check if the length of the set is equal to the length of the array\n    if len(unique_nums) == len(arraynums):\n        return False\n    else:\n        return True"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n\n    # Create a dictionary to store the index of the element as the key and the value as the index\n    index_dict = {}\n\n    # Loop through the array and check if the current element already exists in the dictionary\n    for i, num in enumerate(arraynums):\n        if num in index_dict:\n            return True  # The element already exists in the array, so return True\n        else:\n            index_dict[num] = i  # Add the element to the dictionary with its index\n\n    return False  # The element does not exist in the array, so return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    for i in range(len(arraynums)):\n        for j in range(i+1, len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create a dictionary to store the frequency of each element in the array\n    freq_dict = {}\n    for num in arraynums:\n        # Check if the element is already in the dictionary\n        if num in freq_dict:\n            return True\n        # If the element is not in the dictionary, add it with a frequency of 1\n        else:\n            freq_dict[num] = 1\n    # If all elements are unique, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    # Create a set to store unique elements\n    unique_set = set()\n\n    # Iterate over the array and add unique elements to the set\n    for num in arraynums:\n        if num not in unique_set:\n            unique_set.add(num)\n\n    # Check if the set is empty or not, if it's empty, there's no duplicate element\n    if len(unique_set) == len(arraynums):\n        return False\n    else:\n        return True"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    This function takes an array of integers as input and returns True if there is at least one duplicate element in the array, and False otherwise.\n    \"\"\"\n    # Initialize an empty set to store the unique elements in the array\n    unique_set = set()\n    # Iterate through the array\n    for num in arraynums:\n        # If the current element is already in the set, it means there is a duplicate element\n        if num in unique_set:\n            return True\n        # Otherwise, add the current element to the set\n        unique_set.add(num)\n    # If no duplicate element was found in the array, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # create a dictionary to store the unique elements\n    unique_dict = {}\n    # iterate through the array and add each element to the dictionary\n    for num in arraynums:\n        if num not in unique_dict:\n            unique_dict[num] = True\n        else:\n            return True\n    # if no duplicates are found, the function returns False\n    return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n\n    # check if the given number is a perfect square\n    if x**0.5 % 1 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 1 or x == 2 or x == 4 or x == 7:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 3 == 0 and x % 2!= 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    # Define the list of numbers that are woodall numbers\n    woodall_numbers = [5, 10, 20, 50, 100]\n\n    # Check if the given number is in the list of woodall numbers\n    for num in woodall_numbers:\n        if x == num:\n            return True\n    return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    if x == 1 or x == 2:\n        return True\n    elif x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x >= 2000:\n        return True\n    elif x < 1000:\n        return False\n    else:\n        return is_woodall(x-1000)"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 123:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n\n    # define the range of possible numbers\n    lower = 0\n    upper = 100\n\n    # loop through all possible numbers within the range\n    for i in range(lower, upper+1): \n        # check if the number is a woodball\n        if i == 0:\n            continue\n        elif i == 1:\n            continue\n        elif i == 2:\n            continue\n        elif i == 3:\n            continue\n        elif i == 4:\n            continue\n        elif i == 5:\n            continue\n        elif i == 6:\n            continue\n        elif i == 7:\n            continue\n        elif i == 8:\n            continue\n        elif i == 9:\n            continue\n        elif i == 10:\n            continue\n        elif i == 11:\n            continue\n        elif i == 12:\n            continue\n        elif i == 13:\n            continue\n        elif i == 14:\n            continue\n        elif i == 15:\n            continue\n        elif i == 16:\n            continue\n        elif i == 17:\n            continue\n        elif i == 18:\n            continue\n        elif i == 19:\n            continue\n        elif i == 20:\n            continue\n        elif i == 21:\n            continue\n        elif i == 22:\n            continue\n        elif i == 23:\n            continue\n        elif i == 24:\n            continue\n        elif i == 25:\n            continue\n        elif i == 26:\n            continue\n        elif i == 27:\n            continue\n        elif i == 28:\n            continue\n        elif i == 29:\n            continue\n        elif i == 30:\n            continue\n        elif i == 31:\n            continue\n        elif i == 32:\n            continue\n        elif i == 33:\n            continue\n        elif i == 34:\n            continue\n        elif i == 35:\n            continue\n        elif i == 36:\n            continue\n        elif i == 37:\n            continue\n        elif i == 38:\n            continue\n        elif i == 39:\n            continue\n        elif i == 40:\n            continue\n        elif i == 41:\n            continue\n        elif i == 42:\n            continue\n        elif i == 43:\n            continue\n        elif i == 44:\n            continue\n        elif i == 45:\n            continue\n        elif i == 46:\n            continue\n        elif i == 47:\n            continue\n        elif i == 48:\n            continue\n        elif i == 49:\n            continue\n        elif i == 50:\n            continue\n        elif i == 51:\n            continue\n        elif i == 52:\n            continue\n        elif i == 53:\n            continue\n        elif i == 54:\n            continue\n        elif i == 55:\n            continue\n        elif i == 56:\n            continue\n        elif i == 57:\n            continue\n        elif i == 58:\n            continue\n        elif i == 59:\n            continue\n        elif i == 60:\n            continue\n        elif i == 61:\n            continue\n        elif i == 62:\n            continue\n        elif i == 63:\n            continue\n        elif i == 64:\n            continue\n        elif i == 65:\n            continue\n        elif i == 66:\n            continue\n        elif i == 67:\n            continue\n        elif i == 68:\n            continue\n        elif i == 69:\n            continue\n        elif i == 70:\n            continue\n        elif i == 71:\n            continue\n        elif i == 72:\n            continue\n        elif i == 73:\n            continue\n        elif i == 74:\n            continue\n        elif i == 75:\n            continue\n        elif i == 76:\n            continue\n        elif i == "
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 10 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rev(num):\n    # Convert the number to a string\n    num = str(num)\n    # Reverse the string\n    rev_str = num[::-1]\n    # Convert the reversed string back to an integer\n    rev_num = int(rev_str)\n    # Check if the reversed number is one less than twice the original number\n    if rev_num < 2 * num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while num > 0:\n        rev_num = rev_num * 10 + num % 10\n        num //= 10\n    return rev_num < 2 * rev_num"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    num_str = str(num)\n    rev_str = num_str[::-1]\n    reverse_num = int(rev_str)\n    return reverse_num == num - 1"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    # Convert the number to a string\n    num_str = str(num)\n    # Reverse the string\n    reversed_str = num_str[::-1]\n    # Convert the reversed string back to an integer\n    reversed_num = int(reversed_str)\n    # Check if the original number is one less than twice its reverse\n    if num - reversed_num == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    temp = num\n    while temp!= 0:\n        digit = temp % 10\n        reverse = reverse * 10 + digit\n        temp //= 10\n    if num - reverse == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    reverse = 0\n    while num > 0:\n        reverse = reverse * 10 + num % 10\n        num //= 10\n    if reverse * 2 == num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rev(num):\n    # find the reverse of num\n    rev_num = 0\n    while num > 0:\n        rem = num % 10\n        rev_num = rev_num * 10 + rem\n        num //= 10\n    # check if the reversed number is one less than twice the original number\n    return rev_num == 2 * num - 1"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # Convert the number to a string\n    num = str(num)\n    # Reverse the number\n    num = num[::-1]\n    # Convert the reversed number back to an integer\n    num = int(num)\n    # Check if the original number is one less than twice the reversed number\n    if num < 2 * num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n\n    # Calculate the reverse of the given number\n    reverse = 0\n    while num > 0:\n        reverse = reverse * 10 + num % 10\n        num = num // 10\n\n    # Check if the reverse is one less than twice the given number\n    return reverse == 2 * num - 1"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rev(num):\n    # Convert the number to string and then to a list of digits\n    num_str = str(num)\n    num_list = list(num_str)\n    \n    # Reverse the list of digits\n    reversed_num_list = num_list[::-1]\n    \n    # Convert the reversed list back to a string\n    reversed_num_str = ''.join(reversed_num_list)\n    \n    # Convert the reversed string back to an integer and check if it is one less than twice the original number\n    result = int(reversed_num_str) < 2 * num\n    \n    # Return the result\n    return result"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for digit in arr:\n        max_num += digit\n    \n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # Initialize variables\n    n = len(arr)\n    max_num = 0\n\n    # Sort the list in descending order\n    arr.sort(reverse=True)\n\n    # Loop through the list and add the digits to the current max number\n    for i in range(n):\n        max_num += arr[i]\n\n        # Check if the max number has exceeded the required limit\n        if max_num > 9:\n            # Reset the max number to 0 and start a new digit sequence\n            max_num = arr[i]\n\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    \"\"\"\n    # Sort the given list of digits in decreasing order\n    arr.sort(reverse=True)\n\n    # Initialize a variable to store the largest number that can be formed\n    max_num = 0\n\n    # Initialize a variable to store the current number being formed\n    curr_num = 0\n\n    # Iterate through the sorted list of digits\n    for digit in arr:\n        # Add the current digit to the current number and check if it can be formed with the remaining digits\n        curr_num = curr_num * 10 + digit\n        if curr_num <= max_num:\n            break\n\n        # If the current number cannot be formed, update the largest number\n        max_num = curr_num\n\n    # Return the largest number that can be formed\n    return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for digit in arr:\n        max_num = max(max_num, int(digit))\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    n = len(arr)\n    arr.sort(reverse=True) # Sort the digits in descending order\n    max_num = 0\n    for i in range(n) : \n        max_num += arr[i] * (10**(n-i-1)) # Multiply the digit and the power of 10 to the current position\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Max_Num(arr):\n    # Sorting the array in ascending order\n    arr.sort()\n    # Initialize a variable to store the largest number formed with the given digits\n    max_num = 0\n    # Traverse through the sorted array and multiply each digit with a variable to get the corresponding number\n    for i in range(len(arr)):\n        max_num += arr[i] * (i+1)\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Max_Num(arr) : \n    max_num = 0\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if i!= j:\n                if (arr[i] + arr[j]) > max_num:\n                    max_num = arr[i] + arr[j]\n    return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    temp_num = 0\n    for i in range(len(arr)):\n        temp_num = temp_num * 10 + arr[i]\n        if temp_num > max_num:\n            max_num = temp_num\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n\n    # Sort the given list in non-decreasing order\n    arr.sort(reverse=True)\n\n    # Initialize the maximum number that can be formed\n    max_num = 0\n\n    # Iterate through the digits in the list\n    for digit in arr:\n        # Calculate the maximum number that can be formed with the current digit\n        max_num += 10**(len(arr)-1-arr.index(digit))\n\n    return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Max_Num(arr): \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n\n    # Sorting the list in ascending order \n    arr.sort() \n\n    # Initializing the maximum number to 0 \n    max_num = 0 \n\n    # Loop through the list and check if the current number is greater than the maximum number \n    for i in range(len(arr)): \n        if arr[i] > max_num: \n            max_num = arr[i] \n\n    # Return the maximum number \n    return max_num \n"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y > 0 or x < 0 and y < 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y < 0 or x > 0 and y > 0:\n        return \"Both numbers have the same sign.\"\n    elif x < 0 and y > 0 or x > 0 and y < 0:\n        return \"Both numbers have opposite signs.\"\n    else:\n        return \"Both numbers have the same sign.\""
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y < 0 or x < 0 and y > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x<0 and y<0: \n        return True\n    elif x>0 and y>0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    This function takes two integers as input and returns True if they have opposite signs, False otherwise.\n    \"\"\"\n    if (x * y) < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y > 0:\n        print(\"Both numbers have opposite signs.\")\n    elif x < 0 and y < 0:\n        print(\"Both numbers have opposite signs.\")\n    elif x < 0 and y > 0:\n        print(\"x has opposite sign to y.\")\n    elif x > 0 and y < 0:\n        print(\"y has opposite sign to x.\")\n    else:\n        print(\"The numbers are equal.\")"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def opposite_Signs(x,y):\n    \"\"\"\n    This function takes two integers as input and checks whether they have opposite signs or not.\n    \"\"\"\n    if x > 0 and y < 0 or x < 0 and y > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n    \"\"\"\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        return \"The two integers have opposite signs.\"\n    else:\n        return \"The two integers have the same sign.\""
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def opposite_Signs(x,y):\n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n    \"\"\"\n    if x < 0 and y < 0:\n        return True\n    elif x > 0 and y > 0:\n        return True\n    elif x == 0 and y == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n    \"\"\"\n\n    # Check if both numbers have the same sign\n    if (x >= 0 and y >= 0) or (x < 0 and y < 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n*(n+1)*(2*n+1)**0.5"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # initialize the sum of squares of integers\n    sum_of_squares = 0\n    # loop from 1 to n\n    for i in range(1, n+1):\n        # calculate the square of the current integer\n        square = i**2\n        # add the square to the sum of squares\n        sum_of_squares += square\n    # check if the sum of squares is divisible by 8\n    if sum_of_squares % 8 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    i = 1\n    for j in range(1, n+1):\n        for k in range(1, j+1):\n            if i == n:\n                return True\n            i += 1\n    return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return 10*n**2 + 11*n + 7"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # The formula for nth octagonal number is: (2n)^2 - (n+1)^2\n    return ((2*n)**2) - ((n+1)**2)"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n <= 0:\n        return False\n    elif n == 1:\n        return True\n    else:\n        num = 2\n        while num * num <= n:\n            if n % num == 0:\n                return False\n            num += 1\n        return True"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    a = 1\n    while a * a + 2 * a * a * a < 2 * n:\n        a += 1\n    return a * a - a"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    a = 1\n    b = 8\n    c = 27\n    d = 64\n    e = 125\n\n    if n > 0:\n        while a <= n:\n            if a == n:\n                return a\n            elif a**2 + b**2 == c**2:\n                return a\n            elif a**2 + b**2 == d**2:\n                return a\n            elif a**2 + b**2 == e**2:\n                return a\n            a += 1\n            b += 2\n            c += 3\n            d += 4\n            e += 5\n    else:\n        return \"Please enter a positive integer.\"\n"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n * (3**0.5) + 1"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 1:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        return 4*n**2 - 3*n + 1"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    digit_count = defaultdict(int)\n    for i in range(len(s)):\n        digit_count[s[i]] += 1\n\n    count = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)+1):\n            substring = s[i:j]\n            if sum(int(digit) for digit in substring) == len(substring):\n                count += 1\n\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Initialize a dictionary to store the count of each substring\n    count_dict = defaultdict(int)\n\n    # Iterate through all possible substrings of the input string\n    for i in range(len(s)):\n        # Calculate the substring using the formula: substring = s[i:i+k]\n        substring = s[i:i+len(str(len(s)-i))]\n        # Add the substring to the count dictionary\n        count_dict[substring] += 1\n\n    # Return the count of all substrings with the sum of digits equal to their length\n    return sum(count_dict.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    digit_count = defaultdict(int)\n    for char in s:\n        digit_count[int(char)] += 1\n    count = 0\n    for length in range(2, len(s)+1):\n        for i in range(len(s)-length+1):\n            j = i + length - 1\n            if sum(digit_count[int(s[k])] for k in range(i, j+1)) == length:\n                count += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    digit_count = defaultdict(int)\n    substrings = []\n    for i in range(len(s)):\n        digit_sum = sum(int(digit) for digit in s[i:])\n        digit_count[digit_sum] += 1\n        substrings.extend(s[i:i+len(str(digit_sum))])\n\n    return len(substrings)"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    digit_sum_dict = defaultdict(int) # creating a defaultdict to store the sum of digits for each substring\n    \n    for i in range(len(s)):\n        substring = s[i:]\n        digit_sum = sum([int(digit) for digit in substring])\n        digit_sum_dict[digit_sum] += 1\n        \n    count = 0\n    for digit_sum in digit_sum_dict:\n        if digit_sum == len(s):\n            count += digit_sum_dict[digit_sum]\n    \n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    This function takes a string as input and returns the count of all substrings with the sum of digits equal to their length.\n    '''\n    # Initialize a dictionary to store the counts of substrings with the sum of digits equal to their length\n    substrings_count = defaultdict(int)\n    # Iterate through the input string\n    for i in range(len(s)):\n        # Iterate through all possible substrings of length i+1 from index i to the end of the string\n        for j in range(i, len(s)):\n            # Check if the sum of digits in the substring equals to i+1\n            if sum(int(d) for d in s[i:j+1]) == i+1:\n                # Increment the count of substrings with the sum of digits equal to their length in the dictionary\n                substrings_count[i+j] += 1\n    # Return the count of substrings with the sum of digits equal to their length\n    return sum(substrings_count.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    count = 0\n    for i in range(n):\n        for j in range(i, n):\n            if sum(int(digit) for digit in s[i:j+1]) == j-i+1:\n                count += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = defaultdict(int)\n\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            substring = s[i:j+1]\n            if sum(map(int, substring)) == len(substring):\n                count[substring] += 1\n\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    digit_count = defaultdict(int) # To keep track of the count of digits in each substring\n    \n    # Iterate over the string\n    for i in range(len(s)):\n        digit_count[i] += sum(map(int, str(s[i:i+len(s)//2]))) # Calculate the sum of digits for the first half of the substring\n        digit_count[i+len(s)//2] += sum(map(int, str(s[i:i+len(s)//2]))) # Calculate the sum of digits for the second half of the substring\n    \n    count = 0\n    for digit_sum in digit_count.values():\n        count += digit_sum\n    \n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    \"\"\"\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    \"\"\"\n    count = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)+1):\n            substring = s[i:j]\n            digits = [int(digit) for digit in substring]\n            digits.sort()\n            total_digits = sum(digits)\n            if total_digits == len(substring):\n                count += 1\n    return count"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # find the smallest number in the list\n    min_num = xs[0]\n    for num in xs:\n        if num < min_num:\n            min_num = num\n    return min_num"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    smallest = float('inf')\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    else:\n        smallest = xs[0]\n        for x in xs:\n            if x < smallest:\n                smallest = x\n        return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs[1:]:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    Returns the smallest number in a list.\n    \"\"\"\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # initialize smallest variable with first element of list\n    smallest = xs[0]\n\n    # loop through list and compare each element to smallest\n    for i in range(1, len(xs)):\n        if xs[i] < smallest:\n            smallest = xs[i]\n\n    # return smallest variable\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    Write a python function to find the smallest number in a list.\n    \"\"\"\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Initialize variables for storing minimum and maximum values\n    min_value = float('inf')\n    max_value = float('-inf')\n    \n    # Iterate over each pair in the list\n    for pair in test_list:\n        # Update minimum and maximum values if necessary\n        if pair[0] < min_value:\n            min_value = pair[0]\n        if pair[0] > max_value:\n            max_value = pair[0]\n        if pair[1] < min_value:\n            min_value = pair[1]\n        if pair[1] > max_value:\n            max_value = pair[1]\n    \n    # Return the maximum difference between any two pairs\n    return max_value - min_value"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1,len(test_list)):\n            if abs(test_list[i][1]-test_list[j][1]) > max_diff:\n                max_diff = abs(test_list[i][1]-test_list[j][1])\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if j-i > max_diff:\n                max_diff = j-i\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) < 2:\n        return 'Please provide at least two tuples.'\n    \n    max_diff = float('-inf')\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = test_list[i][1] - test_list[j][1]\n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    \n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0]) + abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Sort the list of tuples in ascending order based on the first element of each tuple\n    test_list.sort()\n\n    # Initialize the maximum difference to be the difference between the last element of the first tuple and the first element of the second tuple\n    max_diff = abs(test_list[-1][0] - test_list[0][0])\n\n    # Iterate through the list of tuples and update the maximum difference as needed\n    for i in range(1, len(test_list)):\n        diff = abs(test_list[i][0] - test_list[i - 1][0])\n        if diff > max_diff:\n            max_diff = diff\n\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Find the maximum difference between available pairs in the given tuple list.\n\n    Args:\n    test_list (list): List of tuples, where each tuple contains a value and the index of the value in the list.\n\n    Returns:\n    int: Maximum difference between available pairs.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    This function takes a list of tuples as input and sorts them based on the \n    second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    # Sort the list of tuples using the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sort the list of tuples based on the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    # Return the sorted list of tuples\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subject_marks_sorted = sorted(subjectmarks, key=lambda x: x[1])\n    return subject_marks_sorted"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sort the list of tuples based on the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten_list(data_list):\n        '''\n        Helper function to flatten a list.\n        '''\n        flat_list = []\n        for item in data_list:\n            if isinstance(item, list):\n                flat_list.extend(flatten_list(item))\n            else:\n                flat_list.append(item)\n        return flat_list\n\n    def flattened_list_sum(flat_list):\n        '''\n        Helper function to sum all elements in a flattened list.\n        '''\n        if not flat_list:\n            return 0\n        else:\n            return flat_list[0] + flattened_list_sum(flat_list[1:])\n\n    flattened_list = flatten_list(data_list)\n    return flattened_list_sum(flattened_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    \"\"\"\n    Write a function to flatten a list and sum all of its elements.\n    \"\"\"\n    if isinstance(data_list, list):\n        return [recursive_list_sum(item) for item in data_list]\n    else:\n        return data_list\n\ndef flatten_and_sum(data_list):\n    \"\"\"\n    Write a function to flatten a list and sum all of its elements recursively.\n    \"\"\"\n    return recursive_list_sum(data_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Check if the input is a list\n    if type(data_list) == list:\n        # Flatten the list\n        flat_list = [item for sublist in data_list for item in sublist]\n        # Recursively sum the flattened list\n        return recursive_list_sum(flat_list)\n    else:\n        # Return the sum of the input list\n        return sum(data_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Base case: if the list is empty, return 0\n    if len(data_list) == 0:\n        return 0\n    # Recursive case: add the first element of the list to the sum of the rest of the list\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Helper function to flatten a list recursively\n    def flatten_list(lst):\n        result = []\n        for item in lst:\n            if isinstance(item, list):\n                result += flatten_list(item)\n            else:\n                result.append(item)\n        return result\n\n    # Flatten the list and sum its elements\n    flat_list = flatten_list(data_list)\n    return sum(flat_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n\n    # Base case: if the input list is empty, return 0\n    if not data_list:\n        return 0\n\n    # Recursive case: sum the first element and call the function on the remaining list\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    if not isinstance(data_list, list):\n        return data_list\n    \n    if len(data_list) == 1:\n        return data_list[0]\n    \n    return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten(data_list):\n        flat_list = []\n        for item in data_list:\n            if isinstance(item, list):\n                flat_list.extend(flatten(item))\n            else:\n                flat_list.append(item)\n        return flat_list\n\n    flat_list = flatten(data_list)\n    return sum(flat_list)\n"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    if isinstance(data_list, list):\n        return sum(data_list) + recursive_list_sum(sum(data_list))\n    else:\n        return data_list"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as input and returns the number of positive numbers in the list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pos_count(lst):\n    \"\"\"\n    Counts the number of positive numbers in a list.\n\n    Parameters:\n        lst (list): the list of numbers to count the positive ones from.\n\n    Returns:\n        int: the number of positive numbers in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pos_count(lst):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as input and returns the count of positive numbers in the list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Check if n is a non-negative integer\n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"n must be a non-negative integer\")\n\n    # Initialize variables\n    count = 0\n    for i in range(1, n+1):\n        # Calculate the number of ways to partition Bell(i)\n        ways = 0\n        for j in range(i+1):\n            ways += binomial(i, j) * binomial(j, i-j)\n\n        # Add the count of ways to the final count\n        count += ways\n\n    return count\n\ndef binomial(n, k):\n    '''\n    Calculate the binomial coefficient using recursion.\n    '''\n    if k > n:\n        k = n\n    if k == 0 or k == n:\n        return 1\n    else:\n        return n * binomial(n-1, k-1) // k"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    return sum(1 for i in range(n+1) if sum(i) == n)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_number(n):\n    def helper(k):\n        if k == 0:\n            return 1\n        elif k == 1:\n            return 1\n        elif k == 2:\n            return 2\n        else:\n            return helper(k - 1) + helper(k - 2)\n\n    return helper(n)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Function to calculate the factorial of a number\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n\n    # Helper function to calculate the sum of the first n natural numbers\n    def sum_natural(n):\n        return (n * (n+1)) // 2\n\n    # Helper function to calculate the number of Bell numbers up to n\n    def num_bell(n):\n        return sum_natural(n) - factorial(n)\n\n    # Helper function to calculate the number of partitions of a set of Bell numbers\n    def num_partitions(n):\n        return factorial(n) // num_bell(n)\n\n    return num_partitions(n)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n\n    Args:\n        n: int, the number of elements to partition\n\n    Returns:\n        int, the number of ways to partition the set of Bell numbers\n    \"\"\"\n\n    # Define the set of Bell numbers\n    bell = {0, 1, 1, 2, 5, 14, 42, 132, 429, 1430, 4862, 16796, 58786, 211211, 752970, 2772587, 9871648, 37598235, 130767436, 524326891, 1944918407, 7234017283, 28147497671, 106727898845}\n\n    # Calculate the number of ways to partition the set of Bell numbers\n    count = 0\n    for i in range(n+1):\n        if i in bell:\n            count += 1\n\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # initialize the count variable\n    count = 0\n\n    # iterate through all numbers from 0 to n\n    for i in range(n + 1):\n        # initialize a list to store the number of ways to partition the set of Bell numbers\n        ways = [0] * (i + 1)\n\n        # set the first way to partition the set of Bell numbers to 1\n        ways[0] = 1\n\n        # iterate through all numbers from 1 to i\n        for j in range(1, i + 1):\n            # for each number, count the number of ways to partition the set of Bell numbers using the previous number and the current number\n            ways[j] = ways[j - 1] + ways[j - 2]\n\n        # add the number of ways to partition the set of Bell numbers for the current number to the count variable\n        count += ways[i]\n\n    # return the count variable\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    count = 0\n    for i in range(n+1):\n        for j in range(1,i+1):\n            count += 1\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    # Initialize the first row of the matrix\n    row = [1] * (n+1)\n    \n    # Fill in the rest of the matrix using dynamic programming\n    for i in range(1, n+1):\n        row[i] = sum(row[j] for j in range(1, i+1))\n    \n    return row[n]"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    # Initialize the number of ways to partition as 0\n    ways = 0\n    # Iterate over all possible values of a\n    for a in range(n+1):\n        # Iterate over all possible values of b\n        for b in range(a, n+1):\n            # Check if a and b are equal and add 1 to the number of ways if so\n            if a == b:\n                ways += 1\n    # Return the number of ways to partition\n    return ways"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2:\n        return False\n\n    if A[0] < A[1]:\n        for i in range(1, len(A)):\n            if A[i] > A[i-1]:\n                return False\n    elif A[0] > A[1]:\n        for i in range(1, len(A)):\n            if A[i] < A[i-1]:\n                return False\n    else:\n        return True\n\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    for i in range(n-1): \n        if A[i] > A[i+1]: \n            return False \n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    if n < 2:\n        return True\n    \n    if A[0] < A[1]:\n        for i in range(1, n):\n            if A[i] <= A[i-1]:\n                return False\n        return True\n    \n    if A[0] > A[1]:\n        for i in range(1, n):\n            if A[i] >= A[i-1]:\n                return False\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2:\n        return True\n    for i in range(1, len(A)):\n        if A[i] < A[i-1]:\n            return False\n        elif A[i] > A[i-1]:\n            return True\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2: \n        return True\n    \n    for i in range(1, len(A)):\n        if A[i-1] > A[i]:\n            return False\n        elif A[i-1] < A[i]:\n            return True\n    \n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Monotonic(A):\n    \"\"\"\n    This function takes a list A and returns True if it is a monotonic array, and False otherwise.\n    A monotonic array is an array where each element is either increasing or decreasing.\n    \"\"\"\n    if len(A) < 2:\n        return True\n    if A[0] <= A[1]:\n        for i in range(1, len(A)):\n            if A[i] <= A[i-1]:\n                return False\n    else:\n        for i in range(1, len(A)):\n            if A[i] >= A[i-1]:\n                return False\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Monotonic(A): \n    if len(A) <= 1: \n        return True\n\n    if A[0] == A[-1]: \n        return is_Monotonic(A[1:-1])\n\n    for i in range(len(A)-1): \n        if A[i] > A[i+1]: \n            return False\n        elif A[i] < A[i+1]: \n            return True\n        else: \n            return is_Monotonic(A[i+1:])\n"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Monotonic(A):\n    if len(A) < 2:\n        return True\n    \n    if A[0] <= A[1]:\n        for i in range(1, len(A)):\n            if A[i] <= A[i-1]:\n                return False\n    else:\n        for i in range(1, len(A)):\n            if A[i] >= A[i-1]:\n                return False\n    \n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    # check if array is ascending\n    if A[0] < A[-1]:\n        for i in range(1, n-1):\n            if A[i] < A[i-1] or A[i] > A[i+1]:\n                return False\n    # check if array is descending\n    elif A[0] > A[-1]:\n        for i in range(1, n-1):\n            if A[i] > A[i-1] or A[i] < A[i+1]:\n                return False\n    # array is neither ascending nor descending\n    else:\n        return False\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2: \n        return True \n    elif A[0] == A[-1]: \n        return is_Monotonic(A[1:]) \n    elif A[0] < A[-1]: \n        return is_Monotonic([A[1]] + A[:-1]) \n    else: \n        return is_Monotonic(A[:-1] + [A[-1]]) "
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) >= len(s):\n        for i in range(len(l) - len(s) + 1):\n            if l[i:i+len(s)] == s:\n                return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    # Check if the sublist is a sublist of the list\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in l:\n        if i in s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    return s in l"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    # Convert the sublist to a set so that duplicates are not counted\n    s = set(s)\n    # Iterate over the list and check if the current sublist is a subset of the sublist in the list\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    # If the loop completes without returning True, then the sublist is not in the list\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    This function takes a list 'l' and a sublist's' as inputs and returns True if's' is a sublist of 'l', else False.\n    \"\"\"\n    if not l:  # if list is empty\n        return False\n    if s in l:  # if sublist is present in the list\n        return True\n    else:  # if sublist is not present in the list\n        return is_sublist(l[1:], s)  # recursively check for sublists of l[1:]\n"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    # Check if the sublist is empty\n    if not s:\n        return True\n    # Find the index of the first element of the sublist in the list\n    idx = l.index(s[0])\n    # If the sublist is found, check if the list contains the remaining elements of the sublist recursively\n    return is_sublist(l[idx+1:], s[1:])"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n\n    return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # Taking input from user\n    num_of_tuples = int(input(\"Enter the number of tuples: \"))\n    \n    # Taking input for each tuple\n    for i in range(num_of_tuples):\n        # Taking input for each element in tuple\n        tuple_input = tuple(map(int, input(\"Enter elements for tuple {}: \".format(i+1)).split()))\n        if len(tuple_input)!= num_of_tuples:\n            return False\n    \n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    This function takes a list of tuples as input and returns a boolean value indicating whether all the tuples in the list have equal length or not.\n    \"\"\"\n    for i in Input:\n        if len(i)!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for tup in Input:\n        if len(tup)!= len(set(tup)):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in Input:\n        if len(i)!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # Create an empty list to store the lengths of all tuples in the input list\n    lengths = []\n    # Loop over all the tuples in the input list\n    for tup in Input:\n        # Append the length of each tuple to the lengths list\n        lengths.append(len(tup))\n    # Check if all the tuples in the input list have equal lengths\n    if all(x == lengths[0] for x in lengths):\n        return True\n    else:\n        return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # initialize an empty list to store the lengths of the tuples\n    lengths = []\n    \n    # iterate over each tuple in the input list\n    for t in Input:\n        # append the length of the tuple to the lengths list\n        lengths.append(len(t))\n    \n    # return True if all the tuples have the same length, and False otherwise\n    return all(length == lengths[0] for length in lengths)"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    length = len(Input[0])\n    for i in range(len(Input)):\n        if len(Input[i])!= length:\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # create a set to store the lengths of the tuples\n    lengths = set()\n    # loop through the tuples in the input list\n    for tup in Input:\n        # add the length of the tuple to the set\n        lengths.add(len(tup))\n    # check if all the lengths are equal\n    if len(lengths) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    gap = len(nums)\n    swapped = True\n    while gap > 1 or swapped:\n        swapped = False\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n        gap = int(gap / 1.3)"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the comb sort algorithm.\n    '''\n    # Initialize variables for the loop counters\n    gap = len(nums) // 2\n    swapped = True\n\n    # Loop until no more swaps are made\n    while swapped:\n        swapped = False\n        # Perform one comb sort pass over the list\n        for i in range(gap):\n            # Check if any elements are out of order\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n        # Reduce the gap size and repeat if no swaps were made\n        gap = max(1, int(gap / 1.3))\n\n    # Return the sorted list\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    # initialize gap and swapped to True\n    gap = n\n    swapped = True\n    while swapped:\n        # set swapped to False\n        swapped = False\n        # calculate the new gap size based on the current gap size\n        gap = int(gap / 1.3)\n        if gap == 0:\n            gap = 1\n        # iterate over the list and swap adjacent elements if they are in the wrong order\n        for i in range(0, n-gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    swapped = True\n    gap = n // 2\n\n    while swapped:\n        swapped = False\n        for i in range(gap, n):\n            if nums[i] < nums[i - gap]:\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n                swapped = True\n        gap = (gap + n // gap) // 2\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the comb sort algorithm.\n    '''\n\n    n = len(nums)\n    k = 1\n\n    while k < n:\n        swapped = False\n\n        for i in range(n-k):\n            if nums[i] > nums[i+k]:\n                nums[i], nums[i+k] = nums[i+k], nums[i]\n                swapped = True\n\n        if not swapped:\n            break\n\n        k = k * 3 // 2\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    This function sorts a list of elements using the Comb Sort algorithm.\n    '''\n    \n    # Initialize variables\n    n = len(nums)\n    swapped = True\n    gap = n // 2\n    \n    while swapped:\n        swapped = False\n        gap = int(gap / 1.3)\n        \n        for i in range(gap, n):\n            if nums[i] < nums[i - gap]:\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n                swapped = True\n    \n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # initialize parameters\n    gap = len(nums)\n    swapped = True\n    i = 0\n\n    while swapped:\n        swapped = False\n        i += 1\n\n        # compare adjacent elements and swap if they are not in order\n        for j in range(gap):\n            if nums[j] > nums[j+gap]:\n                nums[j], nums[j+gap] = nums[j+gap], nums[j]\n                swapped = True\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    # initialize variables\n    n = len(nums)\n    gap = n // 2\n    swapped = True\n    i = 0\n\n    # loop until gap is zero\n    while swapped:\n        swapped = False\n        # loop through the array\n        for j in range(gap):\n            # if the current element is greater than the next one, swap them\n            if nums[j] > nums[j+gap]:\n                nums[j], nums[j+gap] = nums[j+gap], nums[j]\n                swapped = True\n        # decrease the gap size\n        gap = int(gap / 1.3)\n        i += 1\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb sort algorithm.\n\n    The Comb sort algorithm works by repeatedly swapping adjacent elements if they are in the wrong order.\n    This process is repeated until no more swaps are needed, indicating that the list is already sorted.\n    '''\n\n    # initialize the gap and the swapped flag\n    gap = 1\n    swapped = True\n\n    # while the gap is greater than 1 and the list is not sorted\n    while gap > 1 and swapped:\n        # set the swapped flag to false\n        swapped = False\n\n        # iterate over the list, comparing adjacent elements\n        for i in range(len(nums) - gap):\n            # if the adjacent elements are in the wrong order, swap them\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                # set the swapped flag to true\n                swapped = True\n\n        # reduce the gap size\n        gap = int(gap / 1.3)\n\n    # return the sorted list\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Sort a list of elements using the Comb sort algorithm.\n\n    Returns:\n    A sorted list of the same elements as the input list.\n    '''\n\n    # initialize parameters\n    n = len(nums)\n    gap = n // 2\n    swapped = True\n    start = 0\n\n    # main loop\n    while swapped:\n        swapped = False\n        for i in range(start, n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n        start += gap\n        gap = // 2\n\n    return nums"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # First we find the square root of the given number\n    sqrt_n = int(n ** 0.5)\n\n    # Then we check whether the square of the square root is equal to the original number\n    if (sqrt_n ** 2) == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # calculate the square of the difference of two numbers\n    dif_sq = (n * (n + 1)) / 2\n    \n    # check if the difference is a square\n    if dif_sq == int(dif_sq) ** 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Convert the given number to a string\n    num_str = str(n)\n    # Initialize the difference variable\n    dif = 0\n    # Loop through the digits of the number\n    for i in range(len(num_str)):\n        # Get the digit at index i\n        digit = int(num_str[i])\n        # Calculate the square of the digit\n        digit_sq = digit*digit\n        # Add the square of the digit to the difference\n        dif += digit_sq\n    # Check if the difference is equal to the given number\n    if n == dif:\n        return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n\n    # check if the given number is less than or equal to 1\n    if n <= 1:\n        return False\n\n    # check if the given number is divisible by 4\n    if n % 4 == 0:\n        return False\n\n    # check if the given number is divisible by 9\n    if n % 9 == 0:\n        return False\n\n    # check if the given number is divisible by 25\n    if n % 25 == 0:\n        return False\n\n    # check if the given number is divisible by 36\n    if n % 36 == 0:\n        return False\n\n    # check if the given number is divisible by 49\n    if n % 49 == 0:\n        return False\n\n    # check if the given number is divisible by 64\n    if n % 64 == 0:\n        return False\n\n    # check if the given number is divisible by 81\n    if n % 81 == 0:\n        return False\n\n    # check if the given number is divisible by 100\n    if n % 100 == 0:\n        return False\n\n    # check if the given number is divisible by 121\n    if n % 121 == 0:\n        return False\n\n    # check if the given number is divisible by 144\n    if n % 144 == 0:\n        return False\n\n    # check if the given number is divisible by 169\n    if n % 169 == 0:\n        return False\n\n    # check if the given number is divisible by 196\n    if n % 196 == 0:\n        return False\n\n    # check if the given number is divisible by 225\n    if n % 225 == 0:\n        return False\n\n    # check if the given number is divisible by 256\n    if n % 256 == 0:\n        return False\n\n    # check if the given number is divisible by 289\n    if n % 289 == 0:\n        return False\n\n    # check if the given number is divisible by 324\n    if n % 324 == 0:\n        return False\n\n    # check if the given number is divisible by 361\n    if n % 361 == 0:\n        return False\n\n    # check if the given number is divisible by 400\n    if n % 400 == 0:\n        return False\n\n    # check if the given number is divisible by 441\n    if n % 441 == 0:\n        return False\n\n    # check if the given number is divisible by 484\n    if n % 484 == 0:\n        return False\n\n    # check if the given number is divisible by 529\n    if n % 529 == 0:\n        return False\n\n    # check if the given number is divisible by 576\n    if n % 576 == 0:\n        return False\n\n    # check if the given number is divisible by 625\n    if n % 625 == 0:\n        return False\n\n    # check if the given number is divisible by 676\n    if n % 676 == 0:\n        return False\n\n    # check if the given number is divisible by 729\n    if n % 729 == 0:\n        return False\n\n    # check if the given number is divisible by 784\n    if n % 784 == 0:\n        return False\n\n    # check if the given number is divisible by 841\n    if n % 841 == 0:\n        return False\n\n    # check if the given number is divisible by 900\n    if n % 900 == 0:\n        return False\n\n    # check if the given number is divisible by 961\n    if n % 961 == 0:\n        return False\n\n    # check if the given number is divisible by 1024\n    if n % 1024 == 0:\n        return False\n\n    # check if the given number is divisible by 1089\n    if n % 1089 == 0:\n        return False\n\n    # check if the given number is divisible by 1156\n    if n % 1156 == 0:\n        return False\n\n    "
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n\n    The function takes an integer n as input and returns a boolean value indicating whether the given number can be represented as the difference of two squares or not.\n\n    For example, if n = 12, then the function should return True, as 12 can be represented as the difference of two squares 2^2 + 2^2 = 4 + 4 = 8.\n\n    If n = 4, then the function should return False, as 4 is not representable as the difference of two squares.\n\n    The input integer n will always be a positive integer.\n    '''\n\n    # Check if n is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        return False\n\n    # Initialize the variable to store the sum of squares\n    square_sum = 0\n\n    # Iterate from 1 to n and add the square of each number to the sum\n    for i in range(1, n+1):\n        square_sum += i**2\n\n    # Check if the difference of squares is equal to n\n    return square_sum == n**2"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_diff_square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Check if the number is even\n    if n % 2 == 0:\n        return False\n    # Initialize the square\n    square = int(n**0.5)\n    # Check if the square is even\n    if square % 2 == 0:\n        return False\n    # Check if the difference is between squares\n    return (square * square) - n == n"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dif_Square(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    \"\"\"\n    def is_prime(num):\n        \"\"\"\n        A helper function to check whether a number is prime or not.\n        \"\"\"\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def is_square(num):\n        \"\"\"\n        A helper function to check whether a number is a perfect square or not.\n        \"\"\"\n        return num == int(num**0.5)**2\n\n    def get_square(n):\n        \"\"\"\n        A helper function to calculate the square of a given number.\n        \"\"\"\n        return n**2\n\n    # check if the number is a prime\n    if not is_prime(n):\n        return False\n\n    # calculate the square of the number\n    square = get_square(n)\n\n    # calculate the sum of squares\n    square_sum = square\n\n    # check if the number can be represented as the difference of two squares\n    while square_sum < n:\n        square_sum += square\n        if square_sum == n:\n            return True\n\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n == 0 or n == 1:\n        return True\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0 and n // i == i:\n            return True\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # check if the number is odd\n    if n % 2 == 1:\n        # check if the number is divisible by 4\n        if n % 4 == 0:\n            return True\n        # check if the number is divisible by 6\n        elif n % 6 == 0:\n            return True\n    # check if the number is even\n    else:\n        # check if the number is divisible by 8\n        if n % 8 == 0:\n            return True\n        # check if the number is divisible by 10\n        elif n % 10 == 0:\n            return True\n    # if none of the above conditions are satisfied, then the number is not divisible by any of the given factors\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Convert the given number to a list of digits\n    num_digits = [int(digit) for digit in str(n)]\n\n    # Check whether the number can be represented as the difference of two squares\n    for i in range(len(num_digits)):\n        for j in range(i+1, len(num_digits)):\n            # Calculate the sum of squares of digits on both sides of the i-th digit and the j-th digit\n            square_sum = (num_digits[i] ** 2 + num_digits[j] ** 2)\n\n            # Check if the difference of the sum of squares is equal to the original number\n            if square_sum == n:\n                return True\n\n    # If the number cannot be represented as the difference of two squares, return False\n    return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # Initialize a list to store the colors visited\n    visited = []\n    \n    # Loop through the colors in the patterns array\n    for pattern in patterns:\n        # If the current pattern is empty, it means the color sequence is complete and all the colors have been visited\n        if not pattern:\n            return True\n        # Check if the current color is in the visited list\n        if pattern[0] in visited:\n            # If it is, the pattern is not a valid sequence and we return False\n            return False\n        # Add the current color to the visited list\n        visited.append(pattern[0])\n\n    # If the loop completes without finding an invalid pattern, it means the sequence is valid\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):\n    # Initialize variables to keep track of the index of the current color in the pattern\n    current_index = 0\n    # Initialize a counter to keep track of the number of times each pattern is repeated\n    pattern_count = {}\n    # Loop through each color in the colors array\n    for color in colors:\n        # Check if the color is the same as the current pattern's color\n        if color == patterns[current_index]:\n            # If it is, increment the pattern count for that pattern\n            if patterns[current_index] in pattern_count:\n                pattern_count[patterns[current_index]] += 1\n            else:\n                pattern_count[patterns[current_index]] = 1\n            # Increment the index of the current pattern\n            current_index += 1\n        # If the color is not the same as the current pattern's color, reset the pattern count and increment the index\n        else:\n            pattern_count = {}\n            current_index = 0\n        # If we have looped through all the colors in the colors array and there are still patterns to repeat, we have found a pattern that does not follow the sequence\n        if current_index == len(patterns) and len(pattern_count) > 0:\n            return False\n    # If we have looped through all the colors in the colors array and there are no more patterns to repeat, we have found a pattern that follows the sequence\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n\n    # Set the initial count of each color in the sequence to 0\n    color_counts = {color: 0 for color in colors}\n\n    # Loop through each color in the sequence\n    for color in colors:\n        # Increment the count for this color in the sequence by 1\n        color_counts[color] += 1\n\n        # Check if the count for this color in the sequence matches the corresponding pattern in the patterns array\n        if color_counts[color] == patterns[colors.index(color)]:\n            # If it does, increment the count for this color in the sequence by 1 and continue to the next color in the sequence\n            color_counts[color] += 1\n\n    # Check if all colors have been used in the sequence\n    if all(count == len(colors) for count in color_counts.values()):\n        # If they have, return True\n        return True\n    else:\n        # If not, return False\n        return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # Initialize the same_pattern variable to True\n    same_pattern = True\n    \n    # Loop through the colors and patterns arrays\n    for color in colors:\n        # Check if the color matches any pattern in the patterns array\n        for pattern in patterns:\n            # Check if the color matches the pattern in the patterns array\n            if color in pattern:\n                # If the color matches a pattern, set same_pattern to False and break out of the inner loop\n                same_pattern = False\n                break\n    \n    # Return the same_pattern variable\n    return same_pattern"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Write a function to check whether it follows the sequence given in the patterns array.\n    \"\"\"\n    if len(colors)!= len(patterns):\n        return False\n\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n\n    # Check if all colors in the colors array are present in the patterns array\n    if len(colors)!= len(patterns):\n        return False\n\n    # Loop through the colors array and check if they match the corresponding pattern in the patterns array\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n\n    # If no errors were found, the function returns True\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    n = len(colors)\n    count = [0] * n\n    for i in range(n):\n        for pattern in patterns:\n            if colors[i] == pattern:\n                count[i] += 1\n                if count[i] == len(pattern):\n                    return True\n    return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):\n    # check if the length of colors and patterns is equal\n    if len(colors)!= len(patterns):\n        return False\n\n    # iterate over the colors and patterns\n    for color, pattern in zip(colors, patterns):\n        # check if the color is not in the pattern\n        if color not in pattern:\n            return False\n\n    # if all the colors are in the pattern, return True\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    n = len(colors)\n    if n!= len(patterns):\n        return False\n\n    if len(colors) == 1 and patterns[0] == colors[0]:\n        return True\n\n    for i in range(n):\n        if colors[i]!= patterns[i]:\n            return False\n\n    return True"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(i % K == 0 for i in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    for tup in test_list:\n        if len(tup) == K:\n            for i in range(K):\n                if tup[i] % K!= 0:\n                    break\n            else:\n                yield tup"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    This function takes a list of tuples and a number k as inputs, and returns a list of tuples that are all divisible by k.\n    \"\"\"\n\n    # Create a set to store all tuples that are divisible by k\n    divisible_tuples = set()\n\n    # Iterate through the input list of tuples\n    for tup in test_list:\n        # Check if all elements are divisible by k\n        if all(elem % K == 0 for elem in tup):\n            # If all elements are divisible by k, add the tuple to the set of divisible tuples\n            divisible_tuples.add(tup)\n\n    # Return a list of all divisible tuples\n    return list(divisible_tuples)"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n\n    # Initialize an empty list to store the tuples\n    result = []\n\n    # Iterate through the list of tuples\n    for tup in test_list:\n        # Check if all the elements in the tuple are divisible by K\n        if all(x % K == 0 for x in tup):\n            # Add the tuple to the result list\n            result.append(tup)\n\n    # Return the result list\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # Initialize an empty list to store the tuples\n    result = []\n\n    # Loop through each tuple in the input list\n    for tup in test_list:\n        # Check if all elements in the tuple are divisible by k\n        if all(x % K == 0 for x in tup):\n            # If the tuple is divisible by all elements, add it to the result list\n            result.append(tup)\n\n    # Return the result list\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    filtered_tuples = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            filtered_tuples.append(tup)\n    return filtered_tuples"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        count = 0\n        for num in tup:\n            if num % K == 0:\n                count += 1\n        if count == len(tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    This function takes a list of tuples and a number K and returns a list of tuples that have all elements divisible by K.\n    \"\"\"\n    result = []\n    for t in test_list:\n        if all(x % K == 0 for x in t):\n            result.append(t)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    tuples_with_divisible_k = []\n    for tup in test_list:\n        divisible_k = True\n        for elem in tup:\n            if elem % K!= 0:\n                divisible_k = False\n                break\n        if divisible_k:\n            tuples_with_divisible_k.append(tup)\n    return tuples_with_divisible_k"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        count = 0\n        for num in tup:\n            if num % K!= 0:\n                count += 1\n                if count == len(tup):\n                    result.append(tup)\n                    break\n    return result"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True \n    else: \n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True \n    else: \n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Diff(n):\n    \"\"\"\n    Write a python function to find whether a number is divisible by 11.\n    \"\"\"\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    count = 0\n    for word in words:\n        count += 1\n    if count % 2 == 0:\n        print(f'{count} words in the sentence are even length.')\n    else:\n        print(f'{count} words in the sentence are odd length.')"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def word_len(s):\n    for word in s.split():\n        if len(word) % 2 == 1:\n            return True\n    return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def word_len(s):\n    \"\"\"\n    Write a python function to check whether the length of the word is odd or not.\n    \"\"\"\n    word = s.split()\n    odd_word = False\n    for w in word:\n        if len(w) % 2 == 1:\n            odd_word = True\n            break\n    return odd_word"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split() # split the string into words\n    for word in words:\n        if len(word) % 2!= 0: # check whether the length of the word is odd or not\n            return \"The length of the word is odd.\"\n    return \"All the words have even length.\" # if all the words have even length"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def word_len(s): \n    words = s.split()  # split the string into words \n    for word in words: \n        if len(word) % 2 == 0:  # check if length of the word is even or odd \n            print(f\"{word}: Length is even\") \n        else: \n            print(f\"{word}: Length is odd\") "
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def word_len(s):\n    words = s.split()\n    for word in words:\n        if len(word) % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    word_list = s.split()\n    for word in word_list:\n        if len(word) % 2 == 0:\n            print(f\"{word} is even length\")\n        else:\n            print(f\"{word} is odd length\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2!= 0:\n            print(word + \" is odd length\")\n        else:\n            print(word + \" is even length\")"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tetrahedral_number(n): \n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    # Initialize the first and second tetrahedral numbers\n    tn1 = 1\n    tn2 = 6\n    \n    # Loop until n is reached\n    for i in range(2, n+1):\n        # Calculate the third tetrahedral number\n        tn3 = (4*tn2**2 - 3*tn1**2)/2\n        \n        # Update the first and second tetrahedral numbers\n        tn1 = tn2\n        tn2 = tn3\n    \n    # Return the nth tetrahedral number\n    return tn2"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 4\n    else:\n        return 4 * (3 * n - 1) / 2"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 4\n    elif n == 2:\n        return 10\n    elif n == 3:\n        return 20\n    elif n == 4:\n        return 40\n    elif n == 5:\n        return 80\n    elif n == 6:\n        return 160\n    elif n == 7:\n        return 320\n    elif n == 8:\n        return 640\n    elif n == 9:\n        return 1280\n    elif n == 10:\n        return 2560"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    def factorial(n):\n        \"\"\"\n        Compute the factorial of n recursively.\n        \"\"\"\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n\n    def phi(n):\n        \"\"\"\n        Compute the nth prime number using the Sieve of Eratosthenes.\n        \"\"\"\n        primes = [True] * (n+1)\n        primes[0], primes[1] = False, False\n        for i in range(2, int(n**0.5)+1):\n            if primes[i]:\n                for j in range(i*i, n+1, i):\n                    primes[j] = False\n        return primes\n    \n    tetrahedra = []\n    for i in range(1, n+1):\n        tetrahedra.append(factorial(4) / (factorial(3) * factorial(i)) - 1)\n    \n    for i in range(len(tetrahedra)):\n        if tetrahedra[i] > 0:\n            print(tetrahedra[i], end=' ')\n        elif tetrahedra[i] == 0:\n            break\n    \n    print()\n    print(n, 'th Tetrahedral Number:', phi(4)[n])"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n\n    # First, find the nth triangular number using the formula:\n    # Tn = 4 * (n^2 + n) / 3\n    triangular_number = 4 * (n**2 + n) / 3\n\n    # Next, find the number of primes below the triangular number\n    # using the Sieve of Eratosthenes algorithm\n    primes = [True] * (triangular_number + 1)\n    primes[0] = primes[1] = False\n    for i in range(2, int(triangular_number**0.5) + 1):\n        if primes[i]:\n            for j in range(i*i, triangular_number + 1, i):\n                primes[j] = False\n\n    # The number of primes below the triangular number is the number of\n    # tetrahedral numbers\n    number_of_tetrahedral_numbers = 0\n    for i in range(2, triangular_number + 1):\n        if primes[i]:\n            number_of_tetrahedral_numbers += 1\n\n    # The nth tetrahedral number is the sum of the numbers of tetrahedra\n    # that have at most n faces and at most n-1 edges\n    nth_tetrahedral_number = sum([i for i in range(1, triangular_number + 1) if primes[i]])\n\n    # Return the nth tetrahedral number\n    return nth_tetrahedral_number"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Initialize a counter variable to keep track of the number of tetrahedral numbers found\n    count = 0\n    # Initialize an array to keep track of the previous tetrahedral numbers found\n    prev_tetrahedral_numbers = []\n    # Iterate through all integers between 1 and n\n    for i in range(1, n+1):\n        # If the integer is a prime number, add it to the list of previous tetrahedral numbers\n        if is_prime(i):\n            prev_tetrahedral_numbers.append(i)\n            # If the list of previous tetrahedral numbers is of length 4, add the current integer to the sum\n            if len(prev_tetrahedral_numbers) == 4:\n                count += i\n    # Return the sum of the previous tetrahedral numbers\n    return count\n\ndef is_prime(num):\n    '''\n    Check if a number is prime.\n    '''\n    # If the number is less than 2, it's not a prime number\n    if num < 2:\n        return False\n    # Check if the number is divisible by any integer between 2 and the square root of the number\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    # If none of the integers between 2 and the square root of the number divide the number, it's a prime number\n    return True"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Find the nth tetrahedral number.\n    \"\"\"\n    def helper(i):\n        if i == 1:\n            return 1\n        elif i == 2:\n            return 4\n        else:\n            return 6 * helper(i - 1)\n\n    return helper(n)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 6\n    else:\n        return (24 * tetrahedral_number(n-1)) + (4 * tetrahedral_number(n-2))"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n < 0:\n        return \"Invalid input. Please enter a non-negative integer.\"\n    elif n == 0:\n        return 0\n    else:\n        return n * (1 + n - 1) // 2"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Initialize the counter variable\n    counter = 0\n    # Initialize the current number to 0\n    current_number = 0\n    # Loop until the counter reaches n\n    while counter < n:\n        # Add the number of faces to the counter\n        counter += 3 * (current_number // 4)\n        # Increment the current number\n        current_number += 1\n    # Return the final counter value\n    return counter"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3)*math.pi*r**3\n    return V"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = math.pi\n    volume = (4/3) * pi * (r**3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    vol = (4/3) * math.pi * (r ** 3)\n    return vol"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    This function calculates the volume of a sphere with radius r.\n    '''\n    v = (4/3)*math.pi*r**3\n    return v"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    This function takes a radius r and returns the volume of the sphere.\n    '''\n    V = (4/3) * math.pi * r ** 3\n    return V\n"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*r**3\n"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3)*math.pi*(r**3)\n    return V"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3)*math.pi*(r**3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    This function takes a radius r of a sphere and returns its volume.\n    '''\n    return (4/3)*math.pi*(r**3)"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_sphere(r):\n    \"\"\"\n    Write a function to find the volume of a sphere.\n    \"\"\"\n    # Using the formula for the volume of a sphere\n    volume = (4/3) * math.pi * r ** 3\n    return volume"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # Initialize the variable to store the sum of ASCII values of characters of the given string\n    sum_of_ascii = 0\n\n    # Iterate through each character of the given string\n    for char in strr:\n        # Convert the character to its ASCII value and add it to the sum_of_ascii variable\n        sum_of_ascii += ord(char)\n\n    # Return the character made by adding the ASCII value of all the characters of the given string modulo 26\n    return chr((sum_of_ascii % 26) + ord('a'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    ascii_value = 0\n    for char in strr:\n        ascii_value += ord(char)\n    char_ascii = (ascii_value % 26) + ord('a')\n    char = chr(char_ascii)\n    return char"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n\n    # initialize variables\n    char = ''\n    ascii_value = 0\n\n    # loop through the string and add the ASCII value of each character modulo 26\n    for char in strr:\n        ascii_value = ord(char)\n        ascii_value = (ascii_value + 26) % 26\n        char = chr(ascii_value) + char\n        print(char)\n\n    return char"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    ascii_sum = 0\n    for char in strr:\n        ascii_sum += ord(char)\n    return chr(ascii_sum % 26 + ord('A'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n\n    # Initialize variables\n    sum_ASCII = 0\n\n    # Convert string to list\n    str_list = list(strr)\n\n    # Loop through each character in the list\n    for i in str_list:\n\n        # Convert each character to its ASCII value and add to the sum of ASCII values\n        sum_ASCII += ord(i)\n\n    # Find the character by taking the remainder of the sum of ASCII values modulo 26\n    char = chr((sum_ASCII % 26) + 65)\n\n    return char"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum_ascii = 0\n    for char in strr:\n        sum_ascii += ord(char)\n    return chr(((sum_ascii % 26) + 65) % 26 + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_value = 0\n    for char in strr:\n        ascii_value += ord(char)\n    return chr(ascii_value % 26 + ord('a'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char = 0\n    for i in range(len(strr)):\n        char += ord(strr[i])\n    char %= 26\n    return chr(char + ord('A'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_value = 0\n    for char in strr:\n        ascii_value += ord(char)\n    return chr((ascii_value % 26) + ord('a'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    sum_ASCII = 0\n    for char in strr:\n        sum_ASCII += ord(char)\n    return chr(sum_ASCII % 26 + 65)"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1]\n    i = 1\n    while i < n:\n        sequence.append(sequence[i-1]*2)\n        i += 1\n    return sequence[n-1]\n"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    a, b = 0, 1\n    while n > 0:\n        print(a, end=' ')\n        a, b = b, a + b\n        n -= 1\n\nn = int(input(\"Enter the value of n: \"))\nsequence(n)"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n\n    sequence = [1]\n    next_num = 1\n\n    for i in range(1, n):\n        if next_num % 2 == 0:\n            next_num += 2\n        else:\n            next_num += 1\n\n        sequence.append(next_num)\n\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1]\n    i = 1\n    \n    while i < n:\n        sequence.append(sequence[-1]*2)\n        i += 1\n    \n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    # Initialize the sequence with the first two numbers in the sequence\n    sequence = [1, 1]\n\n    # Iterate through the rest of the sequence\n    for i in range(2, n+1):\n        # Calculate the next number in the sequence\n        next_num = (sequence[-1]**2 + sequence[-2]**2) ** 0.5\n        \n        # Add the next number to the sequence\n        sequence.append(next_num)\n    \n    # Return the nth number in the sequence\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequence(n):\n    sequence = [1, 1, 1, 1, 1]\n    for i in range(n-4):\n        sequence.append(sequence[i] + sequence[i+1])\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequence(n): \n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [1]\n    for i in range(2, n+1):\n        sequence.append(4 * sequence[-1] - sequence[-2])\n    return sequence[-1]\n"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the Newman Conway sequence.\n    \"\"\"\n    # Initialize the sequence\n    sequence = [1]\n    for i in range(1, n):\n        # Calculate the next number in the sequence\n        next_num = (sequence[i - 1] + sequence[-i]) % 2\n        sequence.append(next_num)\n    return sequence"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [1]\n    for i in range(1, n):\n        sequence.append(sequence[i-1] + sequence[i-2])\n    return sequence[n-1]"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r ** 2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = (4/3) * math.pi * r**3\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    This function finds the surface area of a sphere.\n    '''\n\n    # Calculate the surface area of the sphere using the formula:\n    # surface area = 4 * pi * r^2\n    surface_area = 4 * math.pi * r**2\n\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = (4/3) * math.pi * (r ** 3)\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = (4/3)*math.pi*r**2\n    \n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2\n    \n"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pi = math.pi\n    return 4 * pi * r ** 2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    \"\"\"\n    Write a function to find the surface area of a sphere.\n    \"\"\"\n    surface_area = (4/3) * math.pi * r ** 2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r**2\n    return surface_area\n"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r * r\n    return surface_area"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # initialize the first centered hexagonal number\n    chexag = 1\n    # loop through the range of n\n    for i in range(1, n+1):\n        # calculate the number of squares required to get to the next hexagon\n        num_squares = (2*i*i + 1) // 2\n        # calculate the number of centimeters required to get to the next hexagon\n        num_centimeters = (3*i*i - 1) // 2\n        # calculate the number of squares and centimeters required to get to the next centered hexagon\n        num_squares_next = (2*i*i + 1) // 2\n        num_centimeters_next = (3*i*i - 1) // 2\n        # calculate the number of squares and centimeters required to get to the current centered hexagon\n        num_squares_current = (2*chexag*chexag + 1) // 2\n        num_centimeters_current = (3*chexag*chexag - 1) // 2\n        # add up the squares and centimeters required to get to the current centered hexagon\n        total_squares = num_squares_current + num_squares_next\n        total_centimeters = num_centimeters_current + num_centimeters_next\n        # add the total to the total of centered hexagons found so far\n        chexag += total_squares + total_centimeters\n    # return the nth centered hexagonal number\n    return chexag"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (5 * n * (n - 1) ** 2) // 2"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    # Initialize the first two centered hexagonal numbers\n    hexagonal = 1\n    centered = 1\n\n    # Calculate the centered hexagonal numbers until n is reached\n    for i in range(2, n+1):\n        # Calculate the next centered hexagonal number\n        centered = hexagonal + centered\n\n        # Calculate the next hexagonal number\n        hexagonal += centered\n\n    # Return the n-th centered hexagonal number\n    return centered"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    n = abs(n)\n    if n <= 0:\n        return -1\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 12\n    else:\n        return centered_hexagonal_number(n-1) + centered_hexagonal_number(n-2)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    a = 0.5 * (3**0.5 - 1)\n    return int((2 * a ** n) / (2 * n + 1))"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 7\n    else:\n        return centered_hexagonal_number(n-1) + centered_hexagonal_number(n-2) + centered_hexagonal_number(n-3)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    centered_hex_num = 0\n    \n    if n % 2 == 0:\n        centered_hex_num = 2 * n * (n + 1) // 3\n    else:\n        centered_hex_num = 2 * n * (n + 1) // 3 + 1\n    \n    return centered_hex_num"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        num1 = centered_hexagonal_number(n-1)\n        num2 = centered_hexagonal_number(n-2)\n        return (num1 + num2) / 2"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    This function returns the nth centered hexagonal number.\n    \"\"\"\n    # The formula for centered hexagonal numbers is:\n    # 2(n^2 - 2n + 1) / 3\n    return (2*(n**2 - 2*n + 1))//3"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n < 1:\n        return \"Invalid input\"\n\n    # Initialize variables\n    a = 1\n    b = 1\n    c = 1\n\n    # Calculate the centered hexagonal number\n    while b <= n:\n        c = a + b\n        b += 2\n\n        if b == n:\n            return c"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    \"\"\"\n    Merge three dictionaries into a single dictionary.\n    \"\"\"\n    # Create a new dictionary to hold the merged data\n    merged_dict = {}\n\n    # Loop through the three dictionaries\n    for key, value in dict1.items():\n        merged_dict[key] = value\n\n    for key, value in dict2.items():\n        merged_dict[key] = value\n\n    for key, value in dict3.items():\n        merged_dict[key] = value\n\n    # Return the merged dictionary\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = dict1.copy()\n    for key, value in dict2.items():\n        if key not in merged_dict:\n            merged_dict[key] = value\n        else:\n            merged_dict[key] += value\n    for key, value in dict3.items():\n        if key not in merged_dict:\n            merged_dict[key] = value\n        else:\n            merged_dict[key] += value\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    for key in dict1:\n        merged_dict[key] = dict1[key]\n    for key in dict2:\n        merged_dict[key] = dict2[key]\n    for key in dict3:\n        merged_dict[key] = dict3[key]\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merge three dictionaries into a single dictionary.\n    \"\"\"\n    merged_dict = dict1.copy()\n    for key, value in dict2.items():\n        if key not in merged_dict:\n            merged_dict[key] = value\n        else:\n            if isinstance(merged_dict[key], list):\n                merged_dict[key].extend(value)\n            elif isinstance(merged_dict[key], dict):\n                merged_dict[key] = merge_dictionaries_three(merged_dict[key], value)\n    for key, value in dict3.items():\n        if key not in merged_dict:\n            merged_dict[key] = value\n        else:\n            if isinstance(merged_dict[key], list):\n                merged_dict[key].extend(value)\n            elif isinstance(merged_dict[key], dict):\n                merged_dict[key] = merge_dictionaries_three(merged_dict[key], value)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    for key in dict1:\n        merged_dict[key] = dict1[key]\n    for key in dict2:\n        if key not in merged_dict:\n            merged_dict[key] = dict2[key]\n    for key in dict3:\n        if key not in merged_dict:\n            merged_dict[key] = dict3[key]\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n\n    # combine the dictionaries using the update() method\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = ct.defaultdict(list)\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    for key in dict1.keys():\n        if key in dict2 and key in dict3:\n            merged_dict[key] = (dict1[key], dict2[key], dict3[key])\n        elif key in dict2:\n            merged_dict[key] = dict2[key]\n        elif key in dict3:\n            merged_dict[key] = dict3[key]\n        else:\n            merged_dict[key] = dict1[key]\n    return merged_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    This function takes a list as input and returns a dictionary where the keys are elements in the list and the values are their frequency.\n    '''\n    freq_dict = collections.Counter(lst)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return dict(freq)"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for item in lst:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def freq_count(list1):\n    \"\"\"\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    \"\"\"\n    # use a dictionary to store the frequency count\n    freq_dict = collections.defaultdict(int)\n    \n    # iterate over the list and update the frequency count in the dictionary\n    for item in list1:\n        freq_dict[item] += 1\n        \n    # return the dictionary of frequency count\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return dict(freq_dict)"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(lst)\n    return dict(freq_dict)"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    This function takes a list of elements as input and returns a dictionary containing the frequency of each element in the list.\n    '''\n    freq = collections.Counter(lst)\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # Convert list to dictionary and sort by value\n    freq_dict = collections.Counter(lst)\n    freq_dict = dict(sorted(freq_dict.items(), key=lambda x: x[1], reverse=True))\n\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    This function takes a list as input and returns the frequency of all the elements in the list,\n    returned as a dictionary.\n    '''\n    freq = collections.Counter(lst)\n    return dict(freq)"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 0:\n        return 0\n    elif N < 0:\n        n = -N\n    else:\n        n = N\n\n    smallest_num = n\n    largest_num = n\n\n    for i in range(1, N+1):\n        if n % i == 0:\n            smallest_num = min(smallest_num, i)\n            largest_num = max(largest_num, n/i)\n\n    return min(smallest_num, largest_num)"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    min_num = min(N)\n    max_num = max(N)\n    diff = abs(min_num - N)\n    if diff <= abs(max_num - N):\n        return min_num\n    else:\n        return max_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def closest_num(N):\n    min_num = N - 1\n    max_num = N + 1\n    closest = min_num\n\n    while closest!= N:\n        if closest < N:\n            max_num = closest\n        else:\n            min_num = closest\n        closest = (max_num + min_num) // 2\n\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n    nums = [2, 4, 5, 7, 8, 9]\n    num_set = set(nums)\n    for num in num_set:\n        if num > N:\n            return num\n        elif num < N:\n            break"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    n_list = [i for i in range(1, N+1)]\n    closest_num = min(n_list)\n    closest_list = [n for n in n_list if n < closest_num]\n    closest = min(closest_list)\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # Initialize variables\n    smallest = N\n    smallest_diff = abs(N - smallest)\n    largest = N\n    largest_diff = abs(N - largest)\n    \n    # Loop through numbers from 1 to N-1\n    for i in range(1, N):\n        # Calculate the difference between the current number and N\n        diff = abs(i - N)\n        \n        # If the current difference is smaller than the smallest, update the smallest and smallest_diff\n        if diff < smallest_diff:\n            smallest = i\n            smallest_diff = diff\n        \n        # If the current difference is larger than the largest, update the largest and largest_diff\n        elif diff > largest_diff:\n            largest = i\n            largest_diff = diff\n    \n    # Return the smallest number\n    return smallest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n    num_list = []\n    for i in range(N, 0, -1):\n        num_list.append(i)\n    smallest_num = min(num_list)\n    closest_num = min(smallest_num, N)\n    return closest_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n    # Initialize variables\n    smaller = float('inf')\n    closest = float('inf')\n\n    # Loop through each number in the list\n    for num in range(1, N+1):\n        # Calculate the difference between the current number and n\n        diff = abs(num - N)\n\n        # If the current number is smaller than n and closer to n than the current smallest number\n        if num < N and diff < smaller:\n            # Update the variables\n            smaller = diff\n            closest = num\n\n    # Return the closest smaller number\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n\n    # initialize variables\n    smallest = float('inf')\n    closest = float('inf')\n\n    # loop through all numbers from 1 to N\n    for i in range(1, N+1):\n        # calculate the absolute difference between the number and N\n        diff = abs(N - i)\n\n        # update the smallest and closest numbers if the current number is smaller\n        if diff < smallest:\n            smallest = diff\n            closest = i\n\n    # return the closest smaller number\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n\n    smallest = float('inf')\n\n    for i in range(N, 0, -1):\n        if abs(i-N) < abs(smallest):\n            smallest = i\n\n    return smallest"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def len_log(list1):\n    \"\"\"\n    Write a python function to find the length of the longest word in a given list of strings.\n    \"\"\"\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n\n    # initialize the length of the longest word to zero\n    longest = 0\n\n    # iterate through each word in the list\n    for word in list1:\n        # get the length of the current word\n        length = len(word)\n\n        # if the length of the word is greater than the current longest word, update the longest word\n        if length > longest:\n            longest = length\n\n    # return the length of the longest word\n    return longest"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = ''\n    for word in list1:\n        if len(word) > len(longest):\n            longest = word\n    return len(longest)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = 0\n    for word in list1:\n        if len(word) > longest:\n            longest = len(word)\n    return longest"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = 0\n    for word in list1:\n        if len(word) > longest:\n            longest = len(word)\n    return longest"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n\n    if type(str1)!= str or type(sub_str)!= str:\n        return \"Both inputs must be strings.\"\n\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for word in str1:\n        if sub_str in word:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n    \"\"\"\n    # Convert the sub_str to a set to remove duplicates\n    sub_str = set(sub_str)\n\n    # Check if any substring of str1 is present in sub_str\n    for i in range(len(str1) - len(sub_str) + 1):\n        if set(str1[i:i+len(sub_str)]) == sub_str:\n            return True\n\n    # If no substring is found, return False\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for value in str1:\n        if sub_str in value:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # Check if the sub_str is present in the given list of strings\n    if str1 in sub_str:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for string in str1:\n        if string in sub_str:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # Split the list of strings into individual strings\n    str_list = str1.split()\n\n    # Check if the substring is present in the string list\n    if sub_str in str_list:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # Check if the substring is present in the list\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n <= 0:\n        return False\n    if n == 1 or n == 2:\n        return True\n    if n % 2 == 0:\n        return is_undulating(n/2)\n    else:\n        return is_undulating((3*n) + 1)"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    if n < 0:\n        return \"Number should be positive.\"\n    elif n == 0:\n        return \"Number is zero.\"\n    else:\n        for i in range(1, n):\n            if n % i == 0:\n                return \"Number is not undulating.\"\n        return \"Number is undulating.\""
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_undulating(n):\n    '''\n    This function checks whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_undulating(n): \n    '''\n    Function to check whether a given number is undulating or not.\n    '''\n    if n%2 == 0: \n        return False\n    elif n%4 == 0: \n        return True\n    else: \n        return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    \n    # Check for negative numbers\n    if n < 0:\n        return \"Not undulating\"\n    \n    # Check if n is equal to the sum of its digits\n    num_digits = 0\n    while n > 0:\n        num_digits += 1\n        n //= 10\n        \n    if n == sum(map(int, str(n))):\n        return \"Undulating\"\n    else:\n        return \"Not undulating\""
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_undulating(n): \n    '''\n    This function takes an integer n as input and returns True if it is undulating,\n    and False otherwise.\n\n    An undulating number is a positive integer that is divisible by both 2 and 3.\n\n    Examples:\n    is_undulating(12)   # returns False\n    is_undulating(15)   # returns True\n    is_undulating(21)   # returns False\n    '''\n\n    # Check if the number is divisible by both 2 and 3\n    if n % 2 == 0 and n % 3 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return \"The given number is odd.\"\n    else:\n        return \"The given number is even.\""
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    if n % 2 == 0:\n        return False\n    elif n % 3 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power(a, b):\n    \"\"\"\n    Write a function to calculate the value of 'a' to the power 'b'.\n    \"\"\"\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power(a, b):\n    \"\"\"\n    Write a function to calculate the value of 'a' to the power 'b'.\n    \"\"\"\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    index_list = [i[0] for i in test_list]\n    min_index = index_list.index(min(index_list))\n    return min_index"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    index = 0\n    min_value = min(itemgetter(1)(test_list))\n    for i, value in enumerate(test_list):\n        if itemgetter(1)(value) < min_value:\n            index = i\n            min_value = itemgetter(1)(value)\n    return index"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # First, sort the list of tuples in ascending order based on the second element\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    # Then, return the first value of the first tuple in the sorted list\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Sort the list in ascending order based on the second value\n    sorted_list = sorted(test_list, key=itemgetter(1))\n\n    # Return the first value of the smallest tuple\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the tuple with the smallest second value.\n    '''\n    # Use the itemgetter function from the operator module to extract the second value from each tuple\n    second_values = list(map(itemgetter(1), test_list))\n    # Find the index of the tuple with the smallest second value\n    min_index = second_values.index(min(second_values))\n    # Return the index of the tuple with the smallest second value\n    return min_index"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n\n    # Sort the list of tuples based on the second value in ascending order\n    sorted_list = sorted(test_list, key=itemgetter(1))\n\n    # Return the first value of the first tuple in the sorted list\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first tuple with the smallest second value.\n    '''\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    # sort the list by the second value of each tuple\n    test_list.sort(key=itemgetter(1))\n    # return the index of the first tuple with the smallest second value\n    return test_list[0][0]"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = len(lst[0])\n    for i in range(len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    shortest = []\n    for i in lst:\n        if len(i) < len(shortest) or len(shortest) == 0:\n            shortest = i\n    return len(shortest)"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the smallest list in a list of lists.\n    \"\"\"\n    min_len = len(lst[0])\n    for i in range(1, len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = lst[0][0]\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if len(lst[i][j]) < min_length:\n                min_length = len(lst[i][j])\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = 999999999\n    for i in range(len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = len(lst[0])\n    for i in range(len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n\n    smallest_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < smallest_length:\n            smallest_length = len(sublist)\n\n    return smallest_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    # Initialize the variable to store the smallest length found\n    min_length = 1000000\n\n    # Loop through each sublist in the list of lists\n    for sublist in lst:\n        # Find the length of the sublist\n        sublist_length = len(sublist)\n        # Update the smallest length found so far\n        min_length = min(min_length, sublist_length)\n\n    # Return the smallest length found\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):  \n    \"\"\"\n    Write a python function to find the length of the smallest list in a list of lists.\n    \"\"\"\n    min_length = None  \n    for sublist in lst:  \n        if min_length is None:  \n            min_length = len(sublist)  \n        elif len(sublist) < min_length:  \n            min_length = len(sublist)  \n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 1\n    for i in range(2, n):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisor(n):\n    \"\"\"\n    This function takes an integer as input and returns the number of divisors of the given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    # initialize variables\n    count = 0\n    i = 1\n    # check if the number is less than 2\n    if n < 2:\n        return 0\n    # loop through all numbers from 1 to the square root of the number\n    while i <= n**0.5:\n        # check if the number is divisible by i\n        if n % i == 0:\n            # if it is, increment the count\n            count += 1\n            # check if i is also divisible by i+1\n            if i + 1 <= n**0.5:\n                count += 1\n        # increment i\n        i += 1\n    # return the count of divisors\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n\n    # Initialize a variable to store the number of divisors\n    count = 0\n\n    # Loop through all numbers from 1 to the square root of the given number\n    for i in range(1, int(n ** 0.5) + 1):\n        # Check if the given number is divisible by the current number\n        if n % i == 0:\n            # If it is, increment the count\n            count += 1\n            # Check if the given number is divisible by the next number\n            if i!= n // i:\n                count += 1\n\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n + divisor(n-1)"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n\n    # create an empty dictionary\n    freq = {}\n\n    # loop through each element in the flattened list\n    for item in list1:\n\n        # check if the item is already in the dictionary\n        if item in freq:\n\n            # increment the frequency count by 1\n            freq[item] += 1\n\n        # if the item is not in the dictionary, add it with a frequency count of 1\n        else:\n            freq[item] = 1\n\n    # return the dictionary of frequency counts\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # create a dictionary to store the frequency of each element\n    frequency = {}\n    # loop through each element in the flattened list\n    for element in list1:\n        # check if the element is already in the dictionary\n        if element in frequency:\n            # increment its frequency by 1\n            frequency[element] += 1\n        else:\n            # add the element with its frequency of 1\n            frequency[element] = 1\n    # return the dictionary of frequency\n    return frequency"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Create an empty dictionary to store the frequency of each element in the list\n    freq_dict = {}\n    \n    # Loop through each element in the list\n    for element in list1:\n        # If the element is not in the dictionary, add it with a frequency of 1\n        if element not in freq_dict:\n            freq_dict[element] = 1\n        # If the element is already in the dictionary, increment its frequency by 1\n        else:\n            freq_dict[element] += 1\n    \n    # Return the dictionary of frequency of each element in the list\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Create an empty dictionary to store the frequency of each element\n    freq_dict = {}\n    \n    # Loop through each element in the flattened list\n    for item in list1:\n        # Check if the item is already in the dictionary\n        if item in freq_dict:\n            # Increment the frequency count by 1\n            freq_dict[item] += 1\n        else:\n            # Otherwise, add the item to the dictionary with a frequency of 1\n            freq_dict[item] = 1\n    \n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n\n    # flatten the list of lists\n    flat_list = []\n    for item in list1:\n        for subitem in item:\n            flat_list.append(subitem)\n\n    # create a dictionary to store frequency\n    freq_dict = {}\n\n    # iterate through the flattened list and count frequency of each element\n    for item in flat_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n\n    # Create an empty dictionary to store the frequency of each element\n    freq_dict = {}\n\n    # Loop through the flattened list of lists\n    for sublist in list1:\n        # Loop through the sublist and increment the frequency of each element in the dictionary\n        for item in sublist:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    # Initialize an empty dictionary to store the frequency of each element\n    freq_dict = {}\n    # Iterate over each element of the list\n    for element in list1:\n        # If the element is a list, recursively call the function on the list\n        if isinstance(element, list):\n            # Recursively call the function on the nested list\n            nested_freq = frequency_lists(element)\n            # Merge the frequency dictionary from the nested list with the frequency dictionary from the original list\n            for key in nested_freq:\n                freq_dict[key] = freq_dict.get(key, 0) + nested_freq[key]\n        # If the element is not a list, update the frequency dictionary\n        else:\n            freq_dict[element] = freq_dict.get(element, 0) + 1\n    # Return the final frequency dictionary\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # create an empty dictionary to store the frequency of each element\n    frequency_dict = {}\n\n    # loop through each element in the list\n    for item in list1:\n        # if the item is not a list, add it to the dictionary\n        if type(item)!= list:\n            if item in frequency_dict:\n                frequency_dict[item] += 1\n            else:\n                frequency_dict[item] = 1\n        # if the item is a list, flatten it and recurse on it\n        else:\n            flattened_item = flatten(item)\n            frequency_dict.update(frequency_lists(flattened_item))\n\n    return frequency_dict\n\n\ndef flatten(lst):\n    '''\n    Flatten a list of lists.\n    '''\n    result = []\n    for item in lst:\n        if type(item) == list:\n            result.extend(flatten(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    freq_dict = {}\n    for item in list1:\n        if isinstance(item, list):\n            for subitem in item:\n                if subitem not in freq_dict:\n                    freq_dict[subitem] = 1\n                else:\n                    freq_dict[subitem] += 1\n        else:\n            if item not in freq_dict:\n                freq_dict[item] = 1\n            else:\n                freq_dict[item] += 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # initialize an empty dictionary\n    freq_dict = {}\n\n    # loop through each element in the flattened list of lists\n    for item in list1:\n        # check if the element is in the dictionary\n        if item in freq_dict:\n            # if it is, increment its frequency by 1\n            freq_dict[item] += 1\n        else:\n            # if it's not, add it to the dictionary with a frequency of 1\n            freq_dict[item] = 1\n\n    # return the dictionary\n    return freq_dict"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1  \n    for num in numbers:  \n        result *= num  \n    result /= len(numbers)  \n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_num(numbers):\n    \"\"\"\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    \"\"\"\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    # Multiply all the numbers in the list\n    total = 1\n    for num in numbers:\n        total *= num\n    # Divide with the length of the list\n    result = total / len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_num(numbers):\n    total = 1\n    for num in numbers:\n        total *= num\n    return total / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    result = product / len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0: \n        return '0'\n    else: \n        binary_digits = [] \n        while n > 0: \n            remainder = n % 2 \n            n = n // 2 \n            binary_digits.append(remainder) \n        return ''.join(str(digit) for digit in binary_digits[::-1]) "
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    # Check if the input is a positive integer\n    if type(n)!= int or n < 0:\n        return \"Invalid input. Please provide a positive integer.\"\n    \n    # Convert the decimal number to binary\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    \n    # Remove leading zeros from the binary string\n    while binary[0] == '0' and len(binary) > 1:\n        binary = binary[1:]\n    \n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def decimal_to_binary(n): \n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    binary = ''\n    while n > 0: \n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    if n == 0:\n        return \"0\"\n    else:\n        binary_n = \"\"\n        while n > 0:\n            remainder = n % 2\n            binary_n = str(remainder) + binary_n\n            n //= 2\n        return binary_n"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    # Initialize the binary string to an empty string\n    binary_str = \"\"\n    # Initialize the remainder of the division by 2\n    remainder = n\n    # Loop until the remainder is 0\n    while remainder > 0:\n        # Convert the remainder to binary and add it to the binary string\n        binary_str = str(remainder % 2) + binary_str\n        # Divide the remainder by 2 and store the result in the remainder variable\n        remainder = remainder // 2\n    # Return the binary string without any leading zeros\n    return binary_str.lstrip('0')"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    # Convert the decimal number to a string\n    decimal_str = str(n)\n    # Initialize an empty list to hold the binary equivalent\n    binary_list = []\n    # Loop through each digit in the decimal number\n    for digit in decimal_str:\n        # Convert each digit to its binary equivalent and add it to the list\n        binary_digit = bin(int(digit))[2:].zfill(4)\n        binary_list.append(binary_digit)\n    # Join the binary digits together into a single string\n    binary_str = ''.join(binary_list)\n    # Return the binary string\n    return binary_str"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = ''\n    while n > 0:\n        remainder = n % 2\n        n = n // 2\n        binary = str(remainder) + binary\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def decimal_to_binary(n): \n    binary_str = ''\n    while n > 0: \n        binary_str = str(n % 2) + binary_str \n        n //= 2 \n    return binary_str"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Find the largest palindrome less than or equal to the specified number\n    largest_palindrome = num * (num // 10 + 1) * 10\n\n    # Find the smallest palindrome greater than the largest palindrome\n    smallest_palindrome = largest_palindrome + 1\n\n    while True:\n        # Check if the current palindrome is a palindrome\n        if str(smallest_palindrome) == str(smallest_palindrome)[::-1]:\n            return smallest_palindrome\n\n        # Find the next palindrome by multiplying the smallest palindrome by 10 and adding 1\n        smallest_palindrome = smallest_palindrome * 10 + 1"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num = abs(num)\n    digits = [int(digit) for digit in str(num)]\n\n    # Remove all even digits\n    for i in range(len(digits)):\n        if digits[i] % 2 == 0:\n            digits[i] = 0\n\n    # Move to the next number without even digits\n    i = len(digits) - 1\n    while digits[i] == 0 and i >= 0:\n        i -= 1\n\n    # Increment the digits to form the next smallest palindrome\n    digits[i] += 1\n    for j in range(i+1, len(digits)):\n        digits[j] = 9\n\n    # Remove all even digits\n    for i in range(len(digits)):\n        if digits[i] % 2 == 0:\n            digits[i] = 0\n\n    # Add the digits to form the next smallest palindrome\n    for j in range(len(digits)-1, -1, -1):\n        digits[j+1] += digits[j] // 10\n        digits[j] %= 10\n\n    # Check if the digits are valid palindromes\n    if digits[0] == 0:\n        return 0\n    else:\n        return int(''.join(str(digit) for digit in digits))"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    def is_palindrome(n):\n        \"\"\"\n        Check if a given number is a palindrome.\n        \"\"\"\n        return str(n) == str(n)[::-1]\n\n    def next_palindrome(n):\n        \"\"\"\n        Find the next smallest palindrome of a given number.\n        \"\"\"\n        i = n\n        while not is_palindrome(i):\n            i += 1\n        return i\n\n    def is_next_palindrome(n):\n        \"\"\"\n        Check if a given number is a palindrome and is the next smallest palindrome.\n        \"\"\"\n        i = n\n        while not is_palindrome(i):\n            i -= 1\n        return i == n\n\n    while not is_next_palindrome(num):\n        num = next_palindrome(num)\n\n    return num\n\nif __name__ == \"__main__\":\n    if len(sys.argv)!= 2:\n        print(\"Usage: python next_smallest_palindrome.py <integer>\")\n    else:\n        num = int(sys.argv[1])\n        print(\"Next smallest palindrome of\", num, \"is\", next_smallest_palindrome(num))"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Convert the input integer to a string\n    num_str = str(num)\n\n    # Iterate over the digits of the number\n    for i in range(len(num_str)-1, -1, -1):\n        # If the digit is a 0, remove it from the string and continue iterating\n        if num_str[i] == '0':\n            num_str = num_str[:i] + num_str[i+1:]\n            continue\n        \n        # If the digit is a 1, add it to the string and continue iterating\n        if num_str[i] == '1':\n            num_str = num_str[:i] + '1' + num_str[i+1:]\n            break\n    \n    # Convert the string back to an integer\n    next_palindrome = int(num_str)\n    \n    # Return the next smallest palindrome\n    return next_palindrome"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    def smallest_palindrome(n):\n        if n < 10:\n            return n\n        else:\n            return smallest_palindrome(n//10) * 10 + 9\n\n    def is_next_smallest_palindrome(n):\n        return is_palindrome(n) and is_palindrome(smallest_palindrome(n))\n\n    def find_next_smallest_palindrome(num):\n        for i in range(num + 1, 10**10):\n            if is_next_smallest_palindrome(i):\n                return i\n        return None\n\n    return find_next_smallest_palindrome(num)\n"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    max_num = 10**(num-1)\n    min_num = -max_num - 1\n    for i in range(max_num+1):\n        temp = i\n        while temp > 0:\n            temp //= 10\n        if temp == i:\n            continue\n        temp = i\n        while temp > 0:\n            temp *= 10\n        temp += i\n        if temp < max_num:\n            return temp\n    return None\n\nif __name__ == '__main__':\n    if len(sys.argv)!= 2:\n        print(\"Usage: python next_smallest_palindrome.py <integer>\")\n        sys.exit(1)\n    try:\n        num = int(sys.argv[1])\n        print(next_smallest_palindrome(num))\n    except ValueError:\n        print(\"Invalid integer\")"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    This function takes an integer as input and returns the next smallest palindrome.\n    '''\n    n = len(str(num))\n    for i in range(n):\n        for j in range(i, n):\n            s = str(num)[i:j+1]\n            if s == s[::-1] and int(s) < num:\n                return int(s)\n    return None"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sieve_of_eratosthenes(n):\n    primes = [True] * (n + 1)\n    primes[0], primes[1] = False, False\n    for i in range(2, int(n**0.5) + 1):\n        if primes[i]:\n            for j in range(i**2, n + 1, i):\n                primes[j] = False\n    return [i for i in range(n+1) if primes[i]]\n\ndef next_smallest_palindrome(num):\n    primes = sieve_of_eratosthenes(num)\n    for i in range(len(primes) - 1, -1, -1):\n        if primes[i] + num >= num:\n            return primes[i] + num\n    return None"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    def is_palindrome(n):\n        '''\n        Function to check if a number is a palindrome.\n        '''\n        if n < 0:\n            n = -n\n        rev_num = 0\n        while n > 0:\n            digit = n % 10\n            rev_num = rev_num * 10 + digit\n            n = n // 10\n        return n == rev_num\n\n    def reverse(n):\n        '''\n        Function to reverse a number.\n        '''\n        rev_num = 0\n        while n > 0:\n            digit = n % 10\n            rev_num = rev_num * 10 + digit\n            n = n // 10\n        return rev_num\n\n    def get_next_palindrome(start_num):\n        '''\n        Function to get the next smallest palindrome.\n        '''\n        for i in range(start_num, sys.maxsize):\n            if is_palindrome(i) and i > reverse(i):\n                return i\n        return None\n\n    next_palindrome = get_next_palindrome(num)\n    if next_palindrome is not None:\n        return next_palindrome\n    else:\n        return None"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    i = num + 1\n    while True:\n        if is_palindrome(i):\n            return i\n        i += 1\n\ndef is_palindrome(num):\n    '''\n    Helper function to check if a number is a palindrome.\n    '''\n    return str(num) == str(num)[::-1]\n\nif __name__ == \"__main__\":\n    if len(sys.argv) == 2:\n        num = int(sys.argv[1])\n        next_palindrome = next_smallest_palindrome(num)\n        print(f\"The next smallest palindrome of {num} is: {next_palindrome}\")\n    else:\n        print(\"Usage: python next_smallest_palindrome.py <integer>\")"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr):\n        raise ValueError('k is greater than the length of the array')\n    if k < 1:\n        raise ValueError('k must be at least 1')\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr):\n        return None\n    \n    # initialize left and right pointers to the first and last element of the array, respectively\n    left = 1\n    right = len(arr)\n    \n    # while the left pointer is less than or equal to the right pointer\n    while left <= right:\n        # calculate the middle index\n        middle = left + (right - left) // 2\n        \n        # if the middle element is the kth element, return it\n        if middle == k:\n            return arr[middle - 1]\n        \n        # if the middle element is less than the kth element, move the left pointer to the right\n        elif middle < k:\n            left = middle + 1\n        \n        # if the middle element is greater than the kth element, move the right pointer to the left\n        else:\n            right = middle - 1\n    \n    return None"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        return None\n    \n    left = 1\n    right = len(arr)\n    \n    while left < right:\n        mid = (left + right) // 2\n        \n        if mid == k - 1:\n            return arr[mid]\n        elif mid > k - 1:\n            right = mid\n        else:\n            left = mid + 1\n    \n    return None"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k > n or k < 1:\n        return \"Invalid input\"\n    else:\n        return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    # If k is greater than the length of the array\n    if k > n:\n        print(\"Error: k is greater than the length of the array\")\n        return None\n    # If k is 1\n    elif k == 1:\n        return arr[0]\n    # If k is greater than 1\n    else:\n        left = 0\n        right = n - 1\n        while left <= right:\n            pivot = arr[(left + right) // 2]\n            if k == pivot:\n                return pivot\n            elif k < pivot:\n                right = (left + right) // 2 - 1\n            else:\n                left = (left + right) // 2 + 1\n        return None"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr):\n        raise ValueError(\"Invalid index\")\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr):\n        return None\n    else:\n        left = 1\n        right = len(arr)\n        while left <= right:\n            mid = (left + right) // 2\n            if mid == k:\n                return arr[mid - 1]\n            elif mid < k:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return None"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        raise ValueError(\"Invalid index\")\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if len(arr) < k:\n        return None\n\n    left = 1\n    right = len(arr)\n\n    while left <= right:\n        mid = left + (right - left) // 2\n\n        if mid == k:\n            return arr[mid - 1]\n        elif mid < k:\n            left = mid + 1\n        else:\n            right = mid - 1"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if len(arr) < k:\n        return \"Array is not long enough to find the kth element.\"\n    elif k < 1:\n        return \"K must be a positive integer.\"\n    else:\n        return arr[k-1]"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    result = ''\n    for i, char in enumerate(word):\n        if i == 0:\n            result += char.lower()\n        else:\n            result += char.upper()\n    return result"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    # Split the word into words using the '_' separator\n    words = word.split('_')\n    \n    # Convert each word to uppercase and capitalize the first letter\n    camel_case_words = [word.capitalize() for word in words]\n    \n    # Join the camel case words together with no separator\n    camel_case_word = ''.join(camel_case_words)\n    \n    return camel_case_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n\n    Args:\n    word (str): A snake case string.\n\n    Returns:\n    str: A camel case string.\n    \"\"\"\n    # Split the word into words\n    words = word.split(\"_\")\n    # Convert the first word to uppercase and join the words with an uppercase letter\n    camel_word = words[0].upper() + \"\".join([word.capitalize() for word in words[1:]])\n    # Return the camel case word\n    return camel_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel = ''\n    for i in range(len(word)):\n        if i == 0:\n            camel += word[i].lower()\n        else:\n            camel += word[i].upper()\n    return camel"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join([word[0].upper(), word[1:].lower()])"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    # Convert snake case to camel case\n    camel_case = \"\"\n    for i in range(len(word)):\n        if word[i].isupper():\n            camel_case += word[i]\n        else:\n            camel_case += word[i].capitalize()\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case = ''\n    word = word.split('_')\n    for i in range(len(word)):\n        if i == 0:\n            camel_case += word[i].lower()\n        else:\n            camel_case += word[i].capitalize()\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    camel_case = ''\n    for word in words:\n        camel_case += word.capitalize()\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    camel_case = \"\"\n    for i, letter in enumerate(word):\n        if i == 0:\n            camel_case += letter.lower()\n        elif letter.isupper():\n            camel_case += \"_\" + letter.lower()\n        else:\n            camel_case += letter\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # convert the snake case to camel case\n    camel_case = \"\"\n    for i in range(len(word)):\n        if i == 0:\n            camel_case += word[i].upper()\n        elif word[i].isupper():\n            camel_case += \"_\" + word[i].lower()\n        else:\n            camel_case += word[i].upper()\n    return camel_case"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if m > n:\n        n, m = m, n\n    if n % 2 == 0:\n        if m % 2 == 0:\n            return 0\n        else:\n            return 1\n    else:\n        if m % 2 == 0:\n            return 1\n        else:\n            return 0"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Initialize the array a\n    a = [[0 for j in range(m+1)] for i in range(n+1)]\n    # Fill the array a\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if i == 1 and j == 1:\n                a[i][j] = 1\n            else:\n                a[i][j] = a[i-1][j] + a[i-1][j-1]\n    # Return the last element of the array a\n    return a[n][m]"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 1:\n        return (2 * m - 1) * m // 2\n    elif n == 2:\n        return (2 * m - 1) * m ** 2 // 4\n    else:\n        return eulerian_num(n - 1, m) + eulerian_num(n - 2, m - 1)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n % 2 == 0 or m % 2 == 0: \n        return 0\n    else:\n        return (n + m) * 2 - 1"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Initialize the Eulerian number a(n, m) to 0\n    a = 0\n\n    # Iterate from 1 to n\n    for i in range(1, n+1): \n        # Check if i is a perfect square\n        if i * i == n: \n            # If yes, add m to the Eulerian number a(n, m)\n            a += m\n\n    # Return the Eulerian number a(n, m)\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Initialize variables\n    A = [[0]*(m+1) for _ in range(n+1)]\n    B = [[0]*(m+1) for _ in range(n+1)]\n\n    # Set A[i][j] = 1 if the path from vertex i to j has the same\n    # number of edges as path from vertex i to vertex 1\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if A[i-1][j-1] == 1 and B[i-1][j] == 0:\n                A[i][j] = 1\n            elif A[i-1][j] == 1 and B[i][j-1] == 0:\n                A[i][j] = 1\n\n    # Set B[i][j] = 1 if the path from vertex i to j has the same\n    # number of edges as path from vertex i to vertex m\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if A[i-1][j] == 1 and B[i-1][j-1] == 0:\n                B[i][j] = 1\n            elif A[i][j-1] == 1 and B[i-1][j] == 0:\n                B[i][j] = 1\n\n    # Calculate a(n, m) by summing up the values in the matrix A\n    a = 0\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if A[i][j] == 1:\n                a += 1\n\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 0 or m == 0:\n        return 0\n    elif n == 1 or m == 1:\n        return 1\n    else:\n        a = eulerian_num(n-1, m)\n        b = eulerian_num(n, m-1)\n        return a + b"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    Write a function to find the Eulerian number a(n, m).\n    \"\"\"\n    a = 1\n    for i in range(1, m+1):\n        a = (a*n) // i\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n\n    # check if n is odd or not\n    if n % 2 == 0: \n        return -1\n\n    # check if m is odd or not\n    if m % 2 == 0: \n        return -1\n\n    # initialize the matrix\n    matrix = [[0 for j in range(m+1)] for i in range(n+1)]\n\n    # fill the matrix with values\n    for i in range(1, n+1): \n        for j in range(1, m+1): \n            if i == 1 and j == 1: \n                matrix[i][j] = 1\n            elif i == 1 and j > 1: \n                matrix[i][j] = matrix[i][j-2]\n            elif j == 1 and i > 1: \n                matrix[i][j] = matrix[i-2][j]\n            else: \n                matrix[i][j] = matrix[i-1][j-1] + matrix[i-1][j]\n\n    # return the Eulerian number\n    return matrix[n][m]"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 1:\n        return m * m\n    elif n == 2:\n        return m * (m + 1)\n    else:\n        return 2 * eulerian_num(n-1, m) + eulerian_num(n-1, m+1)"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Loop through each sublist in the input_list\n    for sublist in input_list:\n        # Sort the sublist in ascending order using the sorted() function\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if isinstance(item, bool) and item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count(lst):\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for element in lst:\n        if element is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if isinstance(i, bool) and i:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count(lst):\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count(lst):\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for item in lst:\n        if type(item) == bool and item is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count(lst):\n    count = 0\n    for item in lst:\n        if isinstance(item, bool):\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Convert the list to a tuple and append it to the tuple\n    test_tup = (test_tup + tuple(test_list))\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup += test_list\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for item in test_list:\n        test_tup += (item,)"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup = tuple(test_tup)\n    test_tup = test_tup + tuple(test_list)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list = list(test_list)  # convert list to list\n    test_tup = list(test_tup)  # convert tuple to list\n    for i in range(len(test_list)):\n        test_tup.append(test_list[i])  # append each element to tuple\n    return tuple(test_tup)  # convert tuple back to tuple"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    # convert the lists to tuples\n    test_list = tuple(test_list)\n    test_tup = tuple(test_tup)\n    # concatenate the two tuples\n    combined_list = test_list + test_tup\n    return combined_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    # Merge the two first lists\n    sorted_list = sorted(num1 + num2)\n    # Merge the three last lists\n    for i in range(num3):\n        if i < len(num1):\n            sorted_list.append(num1[i])\n        if i < len(num1) + len(num2):\n            sorted_list.append(num2[i - len(num1)])\n        if i < len(num1) + len(num2) + len(num3):\n            sorted_list.append(num3[i - len(num1) - len(num2)])\n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Combine all three lists into one\n    all_lists = [num1, num2, num3]\n    # Flatten the list\n    flat_list = [x for sublist in all_lists for x in sublist]\n    # Use a min heap to sort the list\n    min_heap = []\n    for num in flat_list:\n        heapq.heappush(min_heap, num)\n    # Extract the sorted list\n    sorted_list = []\n    while min_heap:\n        sorted_list.append(heapq.heappop(min_heap))\n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    \n    # Combine all the lists into a single list\n    combined_list = num1 + num2 + num3\n    \n    # Create a min-heap to store the merged list\n    min_heap = []\n    \n    # Iterate through the combined list and add each element to the min-heap\n    for num in combined_list:\n        heapq.heappush(min_heap, num)\n    \n    # Iterate through the min-heap until all elements are added to the final sorted list\n    sorted_list = []\n    while min_heap:\n        sorted_list.append(heapq.heappop(min_heap))\n    \n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # initialize an empty list to store the merged sorted list\n    merged_list = []\n    \n    # create a min-heap to store the smallest element of each list\n    min_heap1 = []\n    min_heap2 = []\n    min_heap3 = []\n    \n    # push the first element of each list to the min-heap\n    heapq.heappush(min_heap1, num1[0])\n    heapq.heappush(min_heap2, num2[0])\n    heapq.heappush(min_heap3, num3[0])\n    \n    # compare the first element of each list with the smallest element of the min-heap\n    # and pop the smallest element from the min-heap and append it to the merged list\n    while min_heap1[0] <= min_heap2[0] and min_heap1[0] <= min_heap3[0]:\n        merged_list.append(min_heap1[0])\n        heapq.heappop(min_heap1)\n    while min_heap2[0] <= min_heap3[0]:\n        merged_list.append(min_heap2[0])\n        heapq.heappop(min_heap2)\n    while min_heap3[0] <= min_heap1[0]:\n        merged_list.append(min_heap3[0])\n        heapq.heappop(min_heap3)\n        \n    # return the merged sorted list\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Merge three sorted lists into a single sorted list.\n    \"\"\"\n    # create a list of all three lists\n    all_lists = [num1, num2, num3]\n    \n    # sort each list using heapify\n    for i in range(len(all_lists)):\n        heapq.heapify(all_lists[i])\n    \n    # merge the lists using heapq.merge\n    merged_list = []\n    while all_lists:\n        merged_list.append(heapq.heappop(all_lists[0]))\n        all_lists.pop(0)\n        if all_lists:\n            for i in range(len(all_lists)):\n                heapq.heappush(all_lists[i], heapq.heappop(all_lists[0]))\n                all_lists.pop(0)\n    \n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Create a list of all the numbers to be sorted\n    numbers = [num1, num2, num3]\n    \n    # Use heapq to merge the numbers in ascending order\n    heapq.heapify(numbers)\n    \n    # Create a new empty list to store the merged numbers\n    merged_numbers = []\n    \n    # While the heap is not empty, pop the smallest number and add it to the merged_numbers\n    while numbers:\n        merged_numbers.append(heapq.heappop(numbers))\n    \n    # Return the merged_numbers as a list\n    return merged_numbers"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n\n    # Merge the three lists into one sorted list\n    merged_list = sorted(num1 + num2 + num3)\n\n    # Return the merged list\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    # Use heapq module to merge three sorted lists into a single sorted list\n    merged_list = []\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n    while heapq.heappop(num1) is not None and heapq.heappop(num2) is not None and heapq.heappop(num3) is not None:\n        merged_list.append(heapq.heappop(num1))\n        merged_list.append(heapq.heappop(num2))\n        merged_list.append(heapq.heappop(num3))\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Combine all three lists into a single list\n    all_numbers = num1 + num2 + num3\n    \n    # Convert the combined list to a min heap\n    heap = []\n    for number in all_numbers:\n        heapq.heappush(heap, number)\n    \n    # Convert the heap back to a sorted list\n    merged_numbers = []\n    while heap:\n        merged_numbers.append(heapq.heappop(heap))\n    \n    return merged_numbers"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Concatenate the three lists into one\n    merged_list = num1 + num2 + num3\n    # Use heapify to sort the merged list\n    heapq.heapify(merged_list)\n    # Return the sorted list\n    return merged_list"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    s = s.replace('0', '')\n    s = s.replace('1', '')\n    odd_count = 0\n    for i in range(n):\n        s = s + s[0]\n    for i in s:\n        if int(i) % 2!= 0:\n            odd_count += 1\n    return odd_count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_Equivalent(s, n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    \n    # convert the binary string to a list\n    binary_list = [int(i) for i in s]\n\n    # iterate the given number of times\n    for i in range(n):\n        # create a new list with the same length as the original list\n        temp_list = [0] * len(binary_list)\n\n        # copy the first half of the list to the temp list\n        for j in range(len(binary_list)//2):\n            temp_list[j] = binary_list[j]\n\n        # copy the second half of the list to the temp list\n        for j in range(len(binary_list)//2, len(binary_list)):\n            temp_list[j] = binary_list[j-len(binary_list)//2]\n\n        # update the binary_list with the temp list\n        binary_list = temp_list\n\n    # count the number of odd values in the final binary list\n    count = 0\n    for i in binary_list:\n        if i % 2!= 0:\n            count += 1\n\n    # return the count of odd values\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    # Initialize variables for count and sum\n    count = 0\n    total = 0\n\n    # Loop through each character in the input string\n    for i in range(len(s)):\n        # Convert the character to a binary number\n        bin_num = int(s[i], 2)\n\n        # Rotate the binary number by n places\n        bin_num = (bin_num >> n) | (bin_num << (8 - n))\n\n        # Convert the rotated binary number back to a decimal number\n        dec_num = bin_num.to_bytes(1, byteorder=\"big\").hex()\n\n        # Check if the binary number has an odd value\n        if int(dec_num, 16) % 2 == 1:\n            count += 1\n\n        total += int(dec_num, 16)\n\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_Equivalent(s,n): \n    # convert the binary string to a list of digits\n    binary_list = [int(x) for x in s]\n    # create a new list of digits by rotating the binary list n times\n    rotated_list = binary_list[n:] + binary_list[:n]\n    # count the number of odd values in the rotated list\n    count = 0\n    for num in rotated_list:\n        if num % 2 == 1:\n            count += 1\n    # return the number of odd values\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_Equivalent(s, n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count = 0\n    for i in range(n):\n        s = s[::-1] # Reverse the binary string\n        odd_count = 0\n        for j in s:\n            if int(j) % 2 == 1:\n                odd_count += 1\n        if odd_count > 0:\n            count += 1\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    # Initialize the count variable to 0\n    count = 0\n    # Initialize the index variable to 0\n    index = 0\n    \n    # Loop through the binary string s n times\n    for i in range(n):\n        # Rotate the binary string s by 1 bit to the left\n        s = s[-1] + s[:-1]\n        # If the rotated binary string has an odd number of 1s, increment the count variable\n        if s.count('1') % 2 == 1:\n            count += 1\n            \n    # Return the count variable\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \n    Parameters:\n    s (str): The binary string to be rotated.\n    n (int): The number of times to rotate the string.\n    \n    Returns:\n    int: The number of odd numbers after rotating the binary string.\n    \n    \"\"\"\n    # convert string to binary\n    binary = bin(int(s, 2))[2:]\n    \n    # loop through each rotation and count odd numbers\n    odd_count = 0\n    for i in range(n):\n        odd_count += sum(int(digit) for digit in binary)\n        # convert binary back to string and continue to next rotation\n        binary = bin(int(binary, 2))[2:]\n    \n    return odd_count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_Equivalent(s, n):\n    # Initialize the number of odd numbers found to zero\n    count = 0\n\n    # Create a list of the binary representation of the number n\n    binary_n = bin(n)[2:]\n\n    # Create a list of the binary representation of the string s\n    binary_s = [str(int(bit)) for bit in s]\n\n    # Rotate the binary representation of s n times\n    for _ in range(n):\n        rotated_binary_s = binary_s.copy()\n        rotated_binary_s.append(rotated_binary_s.pop(0))\n\n    # Count the number of odd numbers in the rotated binary representation\n    for bit in rotated_binary_s:\n        if bit == '1':\n            count += 1\n\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_Equivalent(s,n): \n    count = 0\n    for i in range(n):\n        if s[i] == '0':\n            s = '1' + s[1:]\n        else:\n            s = '0' + s[1:]\n        count += s.count('1')\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_Equivalent(s, n):\n    # Initialize the count variable to 0\n    count = 0\n\n    # Loop n number of times\n    for i in range(n):\n        # Convert the binary string to a list of digits\n        binary = [int(d) for d in s]\n\n        # Reverse the list of digits\n        binary = binary[::-1]\n\n        # Convert the reversed list of digits back to a binary string\n        binary = ''.join(str(d) for d in binary)\n\n        # Check if the binary string has an odd number of 1's\n        if len(binary) % 2 == 1:\n            # Increment the count variable\n            count += 1\n\n    # Return the count variable\n    return count"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    This function takes in a nested list as input and returns a new list containing the common elements between all the sublists in the input list.\n    \"\"\"\n    common = []\n    for sublist in nestedlist:\n        for elem in sublist:\n            if elem not in common and elem not in sublist:\n                common.append(elem)\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(i+1, len(nestedlist)):\n            if nestedlist[i] in nestedlist[j]:\n                common_elements.append(nestedlist[i])\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for sublist in nestedlist:\n        for elem in sublist:\n            if elem not in common_elements:\n                common_elements.append(elem)\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    common = []\n    for i in nestedlist:\n        for j in i:\n            if j not in common:\n                common.append(j)\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = set()\n    for sublist in nestedlist:\n        for element in sublist:\n            common_elements.add(element)\n    return list(common_elements)\n"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Create an empty set to store common elements\n    common_set = set()\n    \n    # Loop through each list in the nested list\n    for list_item in nestedlist:\n        # Loop through each element in the list\n        for element in list_item:\n            # Check if the element is already in the set\n            if element in common_set:\n                # If it is, add it to the list of common elements\n                common_list.append(element)\n            else:\n                # If it's not, add it to the set\n                common_set.add(element)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n\n    def common_elements(list1, list2):\n        '''\n        Find the common elements in two lists.\n        '''\n        intersection = set(list1) & set(list2)\n        return list(intersection)\n\n    common_elements_set = set()\n    for sublist in nestedlist:\n        common_elements_set |= set(sublist)\n\n    return common_elements_set"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    common = []\n    for i in range(len(nestedlist)):\n        for j in range(i+1, len(nestedlist)):\n            if nestedlist[i] == nestedlist[j]:\n                common.append(nestedlist[i])\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if nestedlist[i][j] in common:\n                continue\n            elif nestedlist[i][j] not in nestedlist[i][:j] and nestedlist[i][j] not in nestedlist[i][j+1:]:\n                common.append(nestedlist[i][j])\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    common_list = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if nestedlist[i][j] in common_list:\n                continue\n            elif nestedlist[i][j] not in common_list and nestedlist[i][j] in nestedlist[j]:\n                common_list.append(nestedlist[i][j])\n    return common_list\n"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_integer(text):\n    # Check if the string starts with a digit\n    if not text.startswith('0') and not text.isdigit():\n        return False\n    \n    # Check if the string contains any non-digit characters after the first digit\n    for i in range(1, len(text)):\n        if not text[i].isdigit():\n            return False\n    \n    return True"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_integer(text):\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_integer(text):\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if not i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dic in list1:\n        if dic:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for item in list1:\n        if item:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if not i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if len(i) > 0:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dictionary in list1:\n        if dictionary:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    empty = True\n    for d in list1:\n        if len(d)!= 0:\n            empty = False\n            break\n    return empty"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if not i:\n            return True\n    return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if d:\n            return False\n    return True"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result += num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    total = 0\n    for num in nums:\n        total += num\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    # Initialize the sum to zero\n    total = 0\n    \n    # Loop through the tuple of integers\n    for num in nums:\n        # Add each integer to the total\n        total += num\n    \n    # Return the total\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    total = 0\n    for num in nums:\n        total += num\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    # Loop through each list in the test_list\n    for list_item in test_list:\n        # Loop through each item in the list\n        for item in list_item:\n            # Try converting the item to a float\n            try:\n                float(item)\n                # If the conversion is successful, replace the original item with the float value\n                list_item[list_item.index(item)] = float(item)\n            except ValueError:\n                # If the conversion is unsuccessful, keep the original item in the list\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], (int, float)):\n                test_list[i][j] = float(test_list[i][j])\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], str) and '.' in test_list[i][j]:\n                test_list[i][j] = float(test_list[i][j])\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    new_list = []\n    for item in test_list:\n        try:\n            new_list.append(float(item))\n        except ValueError:\n            new_list.append(item)\n    return new_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    result_list = []\n    for sublist in test_list:\n        for item in sublist:\n            if isinstance(item, str):\n                try:\n                    result_list.append(float(item))\n                except ValueError:\n                    pass\n            else:\n                result_list.append(item)\n    return result_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for item in test_list:\n        if isinstance(item, (int, float, complex, str)):\n            try:\n                float(item)\n            except ValueError:\n                return False\n        elif isinstance(item, (list, tuple)):\n            if not list_to_float(item):\n                return False\n    return True"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    new_list = []\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                new_list.append(float(test_list[i][j]))\n            except ValueError:\n                pass\n    return new_list"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_list(string):\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    # split the string on the space character and store in a list\n    list_of_strings = string.split()\n    # return the list of strings\n    return list_of_strings"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_list(string):\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    # Split the string on the space character and return the list\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_list(string): \n    \"\"\"\n    This function takes a string as input and returns a list of strings where each string is separated by the space character.\n    \"\"\"\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    unique_element = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] == arr[i - 1]:\n            continue\n        else:\n            unique_element = arr[i]\n            break\n    return unique_element"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr)!= len(set(arr)):\n        return \"There is no element that appears only once in the given array.\"\n    else:\n        return \"The element that appears only once in the given array is:\", arr[arr.index(max(arr, key=arr.count))], \".\""
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def search(arr):\n    \"\"\"\n    This function takes a sorted array and returns the element that appears only once.\n    \"\"\"\n    # Initialize a dictionary to store the frequency of each element in the array\n    freq = {}\n\n    # Iterate through the array and update the frequency of each element in the dictionary\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # Iterate through the dictionary and find the element that appears only once\n    for num, freq_num in freq.items():\n        if freq_num == 1:\n            return num\n\n    # If no element appears only once, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    for i in range(len(arr)):\n        if arr[i]!= arr[i+1]:\n            return arr[i]\n    return -1"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n\n    # Create a dictionary to store the elements and their counts\n    freq_dict = {}\n\n    # Iterate through the array and update the count for each element\n    for num in arr:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n\n    # Iterate through the dictionary and return the element that appears only once\n    for num in freq_dict:\n        if freq_dict[num] == 1:\n            return num"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n\n    # Using two pointers to find the first and last occurrences of the element\n    first = 0\n    last = len(arr) - 1\n\n    # Traverse the array until the first and last pointers cross each other\n    while first < last:\n\n        # If the element at the first pointer is equal to the element at the last pointer,\n        # it means that the element appears only once\n        if arr[first] == arr[last]:\n            return arr[first]\n\n        # If the element at the first pointer is less than the element at the last pointer,\n        # the element appears in the first half of the array\n        else:\n            first += 1\n\n        # If the element at the last pointer is less than the element at the first pointer,\n        # the element appears in the second half of the array\n        else:\n            last -= 1\n\n    # If the element was not found in the array, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        if i == 0 or arr[i]!= arr[i-1]:\n            count += 1\n            if count == 2:\n                return arr[i]\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    # Initialize a dictionary to keep track of the frequency of each element in the array\n    freq = {}\n    \n    # Loop through each element in the array\n    for num in arr:\n        # Check if the element is already in the dictionary\n        if num in freq:\n            # If it is, increment the frequency by 1\n            freq[num] += 1\n        else:\n            # If it's not, add the element to the dictionary with a frequency of 1\n            freq[num] = 1\n    \n    # Loop through the dictionary and find the element with a frequency of 1\n    for num in freq:\n        if freq[num] == 1:\n            return num\n    \n    # If no element with a frequency of 1 is found, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        if i == 0 or arr[i]!= arr[i-1]:\n            count = 1\n        else:\n            count += 1\n    for i in range(n-1, -1, -1):\n        if arr[i] == count:\n            return arr[i]\n    return -1"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    first = 0\n    last = len(arr) - 1\n    count = 0\n\n    while first <= last:\n        mid = (first + last) // 2\n\n        if arr[mid] == arr[mid + 1]:\n            count += 1\n            first = mid + 1\n        elif arr[mid] < arr[mid + 1]:\n            first = mid + 1\n        else:\n            last = mid - 1\n\n    if count == 1:\n        return arr[first]\n    else:\n        return -1"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n            max_product = max(max_product, product)\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    # Sort the list of tuples\n    list1.sort(key=lambda x: x[1]*abs(x[0]))\n    # Initialize variables for the maximum absolute product and the current absolute product\n    max_product = float('-inf')\n    current_product = 1\n    # Loop through the sorted list of tuples\n    for i in range(len(list1)-1):\n        # Calculate the absolute product of the current tuple and the next tuple\n        current_product = abs(list1[i][0]) * abs(list1[i+1][0])\n        # Update the maximum absolute product if the current absolute product is larger\n        max_product = max(max_product, current_product)\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0]*list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    \n    # initialize max_product to a very small number\n    max_product = -1\n    \n    # iterate through each tuple in the list\n    for i in range(len(list1)):\n        # iterate through each tuple in the list after i\n        for j in range(i+1, len(list1)):\n            # calculate the product of the two tuples\n            product = list1[i] * list1[j]\n            \n            # check if the product is greater than max_product\n            if product > max_product:\n                max_product = product\n    \n    # return the maximum absolute product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = -float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i] * list1[j])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    This function takes a list of tuples as input and returns the maximum absolute product between numbers in pairs\n    of tuples within the list. The maximum absolute product is calculated using the formula:\n\n    max(abs(a * b), abs(a * c), abs(b * c))\n\n    where a, b, and c are the numbers in the tuple.\n\n    For example, if the input list is [(1, 2), (-3, 4), (5, -6)], the function will return 24, which is the maximum\n    absolute product between numbers in the pairs (1, 2), (-3, 4), and (5, -6).\n    '''\n\n    max_product = float('-inf')\n    for tup in list1:\n        a, b = tup\n        c = 1\n        if a < 0:\n            a = -a\n        if b < 0:\n            b = -b\n        if a * b > max_product:\n            max_product = a * b\n        if a * c > max_product:\n            max_product = a * c\n        if b * c > max_product:\n            max_product = b * c\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product_tuple(lst):\n    '''\n    Finds the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(lst)-1):\n        for j in range(i+1, len(lst)):\n            product = lst[i][0] * lst[j][1]\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product_tuple(lst):\n    \"\"\"\n    This function takes a list of tuples as input and returns the maximum absolute product of the elements in pairs within the tuples.\n    \"\"\"\n    max_product = float('-inf')\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            product = lst[i][0] * lst[j][1]\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = -float('inf')\n    max_tuple = None\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][1] * list1[j][1])\n            if product > max_product:\n                max_product = product\n                max_tuple = (list1[i], list1[j])\n    return max_tuple"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0]*list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for i in range(1, limit+1):\n        if i == sum_of_proper_divisors(i):\n            amicable_numbers.append(i)\n    return sum(amicable_numbers)\n\ndef sum_of_proper_divisors(num):\n    '''\n    Write a function to sum all proper divisors of a number.\n    '''\n    proper_divisors = []\n    for i in range(1, num):\n        if num % i == 0:\n            proper_divisors.append(i)\n    return sum(proper_divisors)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    # Initialize variables\n    amicable_sum = 0\n    sum_of_squares = 0\n    a = 1\n    b = 2\n    # Iterate over the numbers up to the limit\n    while b <= limit:\n        # Check if b is amicable to a and a to 1\n        if b == a:\n            continue\n        if a % b == 0 and b % a == 0:\n            # Compute the sum of squares of a and b\n            sum_of_squares = a**2 + b**2\n            # Add the sum of squares to the amicable sum\n            amicable_sum += sum_of_squares\n        a += 1\n        b += 1\n    # Return the amicable sum\n    return amicable_sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_amicable_numbers(limit):\n    \"\"\"\n    This function calculates the sum of all Amicable numbers from 1 to a specified limit.\n    \"\"\"\n\n    # Initialize variables to store the sum and amicable numbers\n    sum_amicable = 0\n    amicable_numbers = []\n\n    # Loop through the numbers from 1 to the specified limit\n    for i in range(1, limit+1):\n\n        # Check if the number is amicable\n        if is_amicable(i):\n\n            # Add the number to the sum and list\n            sum_amicable += i\n            amicable_numbers.append(i)\n\n    return sum_amicable, amicable_numbers\n\n\ndef is_amicable(n):\n    \"\"\"\n    This function checks if a number is amicable or not.\n    \"\"\"\n\n    # Check if the number is divisible by any of the prime numbers\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n\n    # If no divisors were found, the number is amicable\n    return True"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for i in range(1, limit+1):\n        if i == 1:\n            continue\n        elif i == 2:\n            amicable_numbers.append(i)\n        else:\n            for j in range(2, i):\n                if i % j == 0:\n                    break\n            else:\n                amicable_numbers.append(i)\n    return sum(amicable_numbers)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_amicable(num):\n    \"\"\"\n    Returns True if num is an amicable number, False otherwise.\n    \"\"\"\n    if num < 12:\n        return False\n\n    def sum_of_divisors(n):\n        return sum(range(1, int(n**0.5)+1)) if n > 1 else 0\n\n    return sum_of_divisors(num) == num\n\ndef amicable_numbers_sum(limit):\n    \"\"\"\n    Returns the sum of all amicable numbers from 1 to a specified number.\n    \"\"\"\n    total = 0\n    for i in range(1, limit+1):\n        if is_amicable(i):\n            total += i\n\n    return total"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # Initialize a dictionary to store the sum of a number and its proper divisors\n    amicable_sums = {}\n    # Loop through all numbers from 1 to limit\n    for i in range(1, limit+1):\n        # Calculate the sum of the current number and its proper divisors\n        sum_of_divisors = 1\n        for j in range(1, i):\n            # Check if i is a divisor of j\n            if i % j == 0:\n                # If it is, add j to the sum of the divisors\n                sum_of_divisors += j\n        # If i is amicable, it has only 2 proper divisors (1 and itself)\n        if sum_of_divisors == 2:\n            # Add the sum of the divisors to the amicable_sums dictionary\n            amicable_sums[i] = sum_of_divisors\n    # Return the sum of all amicable numbers found in the dictionary\n    return sum(amicable_sums.values())"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for i in range(1, limit+1):\n        if i!= 1 and i!= 2:\n            for j in range(1, limit+1):\n                if i + j == limit:\n                    amicable_numbers.append(i)\n                    break\n    return sum(amicable_numbers)\n"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # Initialize variables to keep track of the sum of all amicable numbers and the count of amicable numbers\n    amicable_sum = 0\n    count = 0\n    \n    # Loop through numbers from 1 to the limit\n    for i in range(1, limit+1):\n        # Check if the number is amicable by checking if it is a divisor of the sum of its proper divisors\n        for j in range(1, i):\n            if i % j == 0:\n                break\n        else:\n            # If the number is not a divisor of the sum of its proper divisors, it's amicable\n            amicable_sum += i\n            count += 1\n    \n    # Return the sum of all amicable numbers\n    return amicable_sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # create a list of all numbers from 1 to limit\n    numbers = [i for i in range(1, limit+1)]\n    # create a dictionary to store amicable numbers and their factors\n    amicable_dict = {}\n    # loop through the numbers and check if each number is an amicable number\n    for num in numbers:\n        # check if the number is equal to its factor (if it has a factor)\n        if num in amicable_dict and amicable_dict[num] == num:\n            # check if the sum of the number and its factor is equal to the original number\n            if num+amicable_dict[num] == num:\n                # if the sum is equal to the original number, add the number to the list of amicable numbers\n                amicable_dict[num] = num\n        # check if the number is divisible by any of the factors in the list\n        for factor in amicable_dict:\n            if num % factor == 0:\n                # if the number is divisible by the factor, check if the factor is equal to the original number\n                if factor == amicable_dict[factor]:\n                    # if the factor is equal to the original number, add the number to the list of amicable numbers\n                    amicable_dict[factor] = num\n                # if the factor is not equal to the original number, break out of the loop\n                else:\n                    break\n    # sum the amicable numbers in the dictionary\n    amicable_sum = sum(amicable_dict.values())\n    return amicable_sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum_amicable = 0\n    for num in range(1, limit + 1):\n        if num!= 1 and num!= limit:\n            for i in range(2, num):\n                if (num % i) == 0:\n                    break\n            else:\n                if num == limit:\n                    sum_amicable += num\n                else:\n                    sum_amicable += num - i\n    return sum_amicable"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n\n    # Calculate the modulus of the complex number\n    modulus = cmath.sqrt(a**2 + b**2)\n\n    # Calculate the angle of the complex number in degrees\n    angle_degrees = modulus * 180 / cmath.pi\n\n    return angle_degrees"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a + b * 1j)\n    return angle\n"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a + b * 1j)\n    angle = cmath.phase(a - b * 1j)\n    return angle\n"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # Create a complex number from the given values\n    z = a + b * 1j\n    \n    # Calculate the angle of the complex number\n    angle = cmath.phase(z)\n    \n    # Convert the angle from radians to degrees\n    angle = angle * 180 / cmath.pi\n    \n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle_rad = cmath.phase(a+b*1j)\n    angle_deg = cmath.phase(a+b*1j)*180/cmath.pi\n    return angle_deg"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    # find the modulus of the complex number\n    modulus = cmath.sqrt(a ** 2 + b ** 2)\n\n    # find the angle in radians\n    angle_rad = cmath.phase(modulus)\n\n    # convert the angle to degrees\n    angle_deg = angle_rad * (180 / cmath.pi)\n\n    # round the result to two decimal places\n    angle_deg = round(angle_deg, 2)\n\n    return angle_deg"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    angle = cmath.phase(angle)\n    return cmath.angle(angle)\n"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    This function takes two complex numbers as input and returns their angle in degrees.\n    '''\n    angle = cmath.phase(a + b)\n    angle_degrees = angle*180/cmath.pi\n    return angle_degrees"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # Using the arctangent function from cmath module\n    angle = cmath.phase(a+b*1j)\n    return angle\n"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # Create a dictionary to store the count of 0s and 1s in each substring\n    count_dict = {}\n    # Initialize the count of 0s and 1s to 0 for the first substring\n    count_dict[0] = 0\n    count_dict[1] = 0\n    # Initialize the maximum difference to 0\n    max_diff = 0\n    # Loop through each substring of the binary string\n    for i in range(len(string)):\n        # Check if the current substring has already been counted in the dictionary\n        if string[i] in count_dict:\n            # If it has, check the difference between the current count and the previous count\n            diff = count_dict[string[i]] - count_dict[string[i-1]]\n            # Update the maximum difference if necessary\n            if diff > max_diff:\n                max_diff = diff\n        # Increment the count of 0s and 1s in the dictionary for the current substring\n        else:\n            count_dict[0] += 1\n            count_dict[1] += 1\n    # Return the maximum difference found\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    n = len(string)\n    max_diff = 0\n    for i in range(n-1):\n        count_0 = 0\n        count_1 = 0\n        for j in range(i,n):\n            if string[j] == '0':\n                count_0 += 1\n            elif string[j] == '1':\n                count_1 += 1\n        diff = abs(count_0 - count_1)\n        max_diff = max(max_diff, diff)\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    for i in range(len(string)):\n        for j in range(i, len(string)):\n            count_zeros = string[:j].count('0')\n            count_ones = string[:j].count('1')\n            diff = abs(count_zeros - count_ones)\n            max_diff = max(max_diff, diff)\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    if not string:\n        return 0\n    n = len(string)\n    dp = [0] * n\n    dp[0] = 0\n    for i in range(1, n):\n        if string[i] == '0':\n            dp[i] = dp[i-1] + 1\n            if i > 1 and string[i-2] == '1':\n                dp[i] = max(dp[i], dp[i-2] + 1)\n        else:\n            dp[i] = dp[i-1]\n    max_diff = 0\n    for i in range(n-1):\n        if dp[i] == dp[i+1]:\n            max_diff = max(max_diff, dp[i])\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_length(string):\n    n = len(string)\n    dp = [[0] * n for _ in range(n)]\n    max_diff = 0\n    \n    for i in range(n):\n        dp[i][i] = 0\n        if string[i] == '0':\n            max_diff = max(max_diff, 1)\n        else:\n            max_diff = max(max_diff, 0)\n    \n    for length in range(2, n+1):\n        for i in range(n-length+1):\n            j = i + length - 1\n            if string[i] == '0':\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1]) + 1\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n            max_diff = max(max_diff, dp[i][j] - dp[i][i])\n    \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    for i in range(len(string)):\n        for j in range(i, len(string)):\n            diff = 0\n            for k in range(j):\n                if string[k] == '0':\n                    diff += 1\n                else:\n                    diff -= 1\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    # Initialize variables for 0s and 1s count\n    count_0s = 0\n    count_1s = 0\n    \n    # Initialize variables for maximum difference\n    max_diff = 0\n    \n    # Loop through each character in the string\n    for char in string:\n        # If the character is a 0, increment the count of 0s\n        if char == '0':\n            count_0s += 1\n        # If the character is a 1, increment the count of 1s\n        elif char == '1':\n            count_1s += 1\n        # If the character is neither a 0 nor a 1, reset the count of 0s and 1s\n        else:\n            count_0s = 0\n            count_1s = 0\n        \n        # Calculate the difference between the count of 0s and count of 1s\n        diff = abs(count_0s - count_1s)\n        \n        # Update the maximum difference if the calculated difference is greater than the current maximum difference\n        if diff > max_diff:\n            max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_length(string):\n    count_zeros = 0\n    count_ones = 0\n    length = len(string)\n    max_diff = 0\n    \n    for i in range(length):\n        if string[i] == '0':\n            count_zeros += 1\n        else:\n            count_ones += 1\n            \n        if count_ones - count_zeros > max_diff:\n            max_diff = count_ones - count_zeros\n    \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    n = len(string)\n    max_diff = 0\n    for i in range(n):\n        count_0 = 0\n        count_1 = 0\n        for j in range(i, n):\n            if string[j] == '0':\n                count_0 += 1\n            else:\n                count_1 += 1\n            diff = abs(count_0 - count_1)\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_length(string):\n    if not string:\n        return 0\n\n    n = len(string)\n    max_length = 0\n    max_diff = 0\n\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            diff = count_0s(string[i:j]) - count_1s(string[i:j])\n            if diff > max_diff:\n                max_diff = diff\n                max_length = j - i\n\n    return max_length\n\n\ndef count_0s(string):\n    return string.count('0')\n\n\ndef count_1s(string):\n    return string.count('1')"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_divisors(a,b):\n    '''\n    This function takes two numbers as input and returns a list of their common divisors.\n    '''\n    # finding the list of common divisors\n    divisors = []\n    for i in range(1, min(a,b)+1):\n        if a % i == 0 and b % i == 0:\n            divisors.append(i)\n\n    return divisors\n\ndef sum_common_divisors(a,b):\n    '''\n    This function takes two numbers as input and returns their sum of common divisors.\n    '''\n    # finding the list of common divisors\n    common_div = common_divisors(a,b)\n\n    # calculating the sum of common divisors\n    sum_div = sum(common_div)\n\n    return sum_div"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n\n    # Check if both numbers are positive integers\n    if not (isinstance(a, int) and isinstance(b, int)):\n        raise TypeError(\"Both numbers must be positive integers\")\n\n    # Check if both numbers are greater than 1\n    if a <= 1 or b <= 1:\n        raise ValueError(\"Both numbers must be greater than 1\")\n\n    # Initialize variables for storing common divisors and sum\n    common_divisors = []\n    total_sum = 0\n\n    # Find common divisors of a and b\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            common_divisors.append(i)\n\n    # Calculate the sum of common divisors\n    for num in common_divisors:\n        total_sum += num\n\n    return total_sum"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    #function to find common divisors of two numbers\n    def common_divisors(a,b): \n        '''\n        This function finds the common divisors of two numbers using the Euclidean algorithm.\n        '''\n        if b==0: \n            return a\n        else: \n            return common_divisors(b,a%b)\n\n    #finding the sum of common divisors\n    sum_cd = 0\n    for i in range(1,a+1): \n        if a%i==0 and b%i==0: \n            sum_cd += i\n\n    return sum_cd"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # find common divisors of a and b\n    divisors = []\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            divisors.append(i)\n    \n    # calculate the sum of common divisors\n    return sum(divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum(a, b):\n    \"\"\"\n    Calculate the sum of common divisors of two given numbers.\n\n    Parameters:\n    a (int): The first number.\n    b (int): The second number.\n\n    Returns:\n    int: The sum of common divisors.\n    \"\"\"\n\n    # Calculate the sum of divisors of a and b\n    a_divs = sum_of_divisors(a)\n    b_divs = sum_of_divisors(b)\n\n    # Calculate the sum of common divisors\n    common_divs = a_divs & b_divs\n\n    # Return the sum of common divisors\n    return common_divs\n\n\ndef sum_of_divisors(n):\n    \"\"\"\n    Calculate the sum of divisors of a given number.\n\n    Parameters:\n    n (int): The number whose divisors should be summed up.\n\n    Returns:\n    int: The sum of divisors.\n    \"\"\"\n\n    # Calculate the sum of divisors\n    divs = 0\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            divs += i + n // i\n    return divs"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    for i in range(1, a + 1):\n        if a % i == 0 and b % i == 0:\n            print(i)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    i = 1\n    divisors_sum = 0\n    while i <= a:\n        if i % a == 0 and i % b == 0:\n            divisors_sum += i\n        i += 1\n    return divisors_sum\n"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # Find the common divisors of a and b\n    common = set(a).intersection(set(b))\n\n    # Find the sum of the common divisors\n    return sum(common)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_common_divisors(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # Find the set of common divisors of a and b\n    common_divisors = set(find_common_divisors(a, b))\n    # Calculate the sum of common divisors\n    total_sum = sum(common_divisors)\n    # Return the sum of common divisors\n    return total_sum\n\ndef find_common_divisors(a, b):\n    '''\n    Write a python function to find the common divisors of two given numbers.\n    '''\n    # Find the smallest common multiple of a and b\n    gcd = find_smallest_common_multiple(a, b)\n    # Find the list of divisors of gcd\n    divisors = find_divisors(gcd)\n    # Return the list of divisors of gcd\n    return divisors\n\ndef find_smallest_common_multiple(a, b):\n    '''\n    Write a python function to find the smallest common multiple of two given numbers.\n    '''\n    # Initialize the smallest multiple to be the largest number\n    smallest_multiple = max(a, b)\n    # Loop until we find a number smaller than the smallest multiple\n    while True:\n        # Check if the smallest multiple divides both a and b\n        if smallest_multiple % a == 0 and smallest_multiple % b == 0:\n            # Found a number smaller than the smallest multiple that divides both a and b\n            break\n        # Otherwise, increase the smallest multiple by 1\n        smallest_multiple += 1\n    # Return the smallest multiple\n    return smallest_multiple\n\ndef find_divisors(n):\n    '''\n    Write a python function to find the list of divisors of a given number.\n    '''\n    # Initialize an empty list to store the divisors\n    divisors = []\n    # Loop until we find all divisors of n\n    while n > 1:\n        # Check if the current number is a divisor of n\n        if n % 2 == 0:\n            # Add 2 to the list of divisors\n            divisors.append(2)\n            # Divide n by 2\n            n //= 2\n        else:\n            # Add the current number to the list of divisors\n            divisors.append(n)\n            # Divide n by 2\n            n //= 2\n    # Reverse the list of divisors to get the largest divisor first\n    divisors.reverse()\n    # Return the list of divisors\n    return divisors"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum(a, b):\n    \"\"\"\n    This function finds the sum of common divisors of two given numbers.\n    \"\"\"\n    # Set the divisor variable to the smaller of the two numbers\n    divisor = min(a, b)\n    # Initialize the sum variable to 0\n    sum = 0\n    # Loop through all possible divisors between 1 and the smaller number\n    for i in range(1, divisor+1):\n        # If the smaller number is divisible by i, add i to the sum\n        if a % i == 0 and b % i == 0:\n            sum += i\n    # Return the sum of common divisors\n    return sum"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    product = 0\n    while y > 0:\n        if y & 1 == 1:\n            product += x\n        x <<= 1\n        y >>= 1\n    return product"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers.\n    \"\"\"\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    while y > 0:\n        if y % 2 == 1:\n            result += x\n        x <<= 1\n        y >>= 1\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    product = x * y\n    print(f\"The product of {x} and {y} is {product}\")"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    while y > 0:\n        if y % 2 == 1:\n            result += x\n        x <<= 1\n        y >>= 1\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    product = 0\n    while y!= 0:\n        # If y is odd, add x to the product\n        if y % 2!= 0:\n            product += x\n        # Shift y one bit to the right\n        y >>= 1\n        # If x is odd, add it to the product\n        if x % 2!= 0:\n            product += x\n        # Shift x one bit to the right\n        x >>= 1\n    return product"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    while y > 0:\n        if y % 2 == 1:\n            result += x\n        x <<= 1\n        y >>= 1\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    # Split the string into words\n    words = str.split()\n    # Create an empty list to store the long words\n    long_words_list = []\n    # Loop through each word in the list\n    for word in words:\n        # Check if the length of the word is greater than n\n        if len(word) > n:\n            # Append the word to the long_words_list\n            long_words_list.append(word)\n    # Return the list of long words\n    return long_words_list"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def long_words(n, str):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n\n    Parameters:\n    n (int): the maximum length of a word that should be considered\n    str (list of str): a list of words\n\n    Returns:\n    list of str: a list of words that are longer than n characters\n    \"\"\"\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words_list = []\n    for word in words:\n        if len(word) > n:\n            long_words_list.append(word)\n    return long_words_list"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def long_words(n, words):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words_list = []\n    for word in words:\n        if len(word) > n:\n            long_words_list.append(word)\n    return long_words_list"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def long_words(n, words):\n    '''\n    This function takes a list of words and an integer n as input and returns a list of words that are longer than n characters.\n    '''\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Find words that are longer than n characters from a given list of words.\n    \"\"\"\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n\n    words = str.split()\n    long_words = []\n\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n\n    return long_words\n"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def long_words(n, words):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    # Check if all the elements in the matrix are unique\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix)):\n            if my_matrix[i][j] in my_matrix[i][:j]+my_matrix[i][j+1:]+my_matrix[:i][j]+my_matrix[j+1:][i]:\n                return False\n    \n    # Check if the main diagonal is a magic square\n    main_diagonal = [sum(row[:i+1]) for i in range(len(my_matrix))]\n    if main_diagonal == list(range(1,len(my_matrix)+1)) or main_diagonal == list(range(len(my_matrix)-1,0,-1)):\n        return True\n    \n    # Check if the secondary diagonal is a magic square\n    secondary_diagonal = [sum(row[i:][j]) for i in range(len(my_matrix)) for j in range(len(my_matrix))]\n    if secondary_diagonal == list(range(1,len(my_matrix)+1)) or secondary_diagonal == list(range(len(my_matrix)-1,0,-1)):\n        return True\n    \n    # If all conditions fail, the matrix is not a magic square\n    return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n\n    # Check if the matrix has 3 rows and 3 columns\n    if len(my_matrix)!= 3 or len(my_matrix[0])!= 3:\n        return False\n\n    # Check if the matrix is a magic square\n    for i in range(3):\n        row = my_matrix[i]\n        for j in range(3):\n            if row[j] == 0 or row.count(row[j])!= 1:\n                return False\n\n    # Check if the matrix is a magic square\n    for j in range(3):\n        col = [my_matrix[i][j] for i in range(3)]\n        if col.count(0)!= 1 or col.count(col.count(0))!= 1:\n            return False\n\n    # Check if the matrix is a magic square\n    for i in range(3) for j in range(3):\n        box = [my_matrix[i][j], my_matrix[i][j+1], my_matrix[i][j+2],\n               my_matrix[i+1][j], my_matrix[i+1][j+1], my_matrix[i+1][j+2],\n               my_matrix[i+2][j], my_matrix[i+2][j+1], my_matrix[i+2][j+2]]\n        if box.count(0)!= 1 or box.count(box.count(0))!= 1:\n            return False\n\n    # If all checks pass, the matrix is a magic square\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    row_sums = [0] * n\n    col_sums = [0] * n\n    \n    for i in range(n):\n        row_sums[i] = sum(my_matrix[i])\n        col_sums[i] = sum(my_matrix[j][i] for j in range(n))\n        \n    for i in range(n):\n        if row_sums[i]!= col_sums[i]:\n            return False\n        \n    for i in range(n):\n        if row_sums[i]!= sum(my_matrix[j][i] for j in range(n)):\n            return False\n        \n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    \n    # Get the dimensions of the matrix\n    n = len(my_matrix)\n    \n    # Check that the matrix is a square matrix\n    if n**2!= sum(sum(row) for row in my_matrix):\n        return False\n    \n    # Check that each row and each column contains the same distinct values\n    for i in range(n):\n        for j in range(n):\n            if len(set(my_matrix[i][j]))!= n:\n                return False\n    \n    # Check that each diagonal contains the same distinct values\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                if len(set(my_matrix[i][j]))!= n:\n                    return False\n    \n    # All checks passed\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    for i in range(n):\n        row_sum = 0\n        col_sum = 0\n        for j in range(n):\n            row_sum += my_matrix[i][j]\n            col_sum += my_matrix[j][i]\n        if row_sum!= n*n or col_sum!= n*n:\n            return False\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    rows = len(my_matrix)\n    cols = len(my_matrix[0])\n    magic_sum = sum(sum(row) for row in my_matrix)\n    \n    # Check rows\n    for i in range(rows):\n        row_sum = sum(my_matrix[i])\n        if row_sum!= magic_sum:\n            return False\n    \n    # Check columns\n    for j in range(cols):\n        col_sum = sum(my_matrix[i][j] for i in range(rows))\n        if col_sum!= magic_sum:\n            return False\n    \n    # Check diagonals\n    diag_sum = sum(my_matrix[i][i] for i in range(rows))\n    if diag_sum!= magic_sum:\n        return False\n    \n    diag_sum = sum(my_matrix[i][rows-1-i] for i in range(rows))\n    if diag_sum!= magic_sum:\n        return False\n    \n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n\n    # Define the size of the matrix\n    rows = len(my_matrix)\n    cols = len(my_matrix[0])\n\n    # Check if the matrix is of square size\n    if rows!= cols:\n        return False\n\n    # Check if the matrix contains non-integer values\n    for row in my_matrix:\n        for elem in row:\n            if not isinstance(elem, int):\n                return False\n\n    # Check for repeated elements in the matrix\n    unique_elements = set()\n    for row in my_matrix:\n        for elem in row:\n            if elem in unique_elements:\n                return False\n            unique_elements.add(elem)\n\n    # Check if the matrix is a magic square\n    magic_sum = rows * cols\n    magic_sum_squares = [x**2 for x in range(1, magic_sum+1)]\n    for row in my_matrix:\n        for elem in row:\n            if elem not in magic_sum_squares:\n                return False\n    for col in range(cols):\n        col_sum = sum(row[col] for row in my_matrix)\n        if col_sum not in magic_sum_squares:\n            return False\n    for i in range(rows):\n        row_sum = sum(row[i] for row in my_matrix)\n        if row_sum not in magic_sum_squares:\n            return False\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    rows = len(my_matrix)\n    cols = len(my_matrix[0])\n\n    # check if all elements are distinct\n    if len(set(sum(my_matrix, [])))!= rows * cols:\n        return False\n\n    # check if the sum of each row is equal\n    for row in my_matrix:\n        if sum(row)!= cols * (rows - 1):\n            return False\n\n    # check if the sum of each column is equal\n    for i in range(rows):\n        col_sum = sum(row[i] for row in my_matrix)\n        if col_sum!= rows * (i + 1):\n            return False\n\n    # check if the main diagonal is equal to the diagonal sum\n    diag_sum = sum(row[i] for i in range(cols))\n    if diag_sum!= sum(my_matrix[i][i] for i in range(rows)):\n        return False\n\n    # check if the anti-diagonal is equal to the diagonal sum\n    anti_sum = sum(row[i] for i in range(cols) if i % 2 == 1)\n    if anti_sum!= sum(my_matrix[i][-i - 1] for i in range(rows) if i % 2 == 1):\n        return False\n\n    # if all checks pass, the matrix is a magic square\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n\n    # Initialize variables\n    rows = len(my_matrix)\n    cols = len(my_matrix[0])\n    sum_of_rows = sum(sum(row) for row in my_matrix)\n    sum_of_cols = sum(sum(col) for col in zip(*my_matrix))\n    difference = abs(sum_of_rows - sum_of_cols)\n\n    # Check if the sum of rows and sum of columns are the same\n    if sum_of_rows == sum_of_cols:\n        # Check if the difference between the sum of rows and sum of columns is 1\n        if difference == 1:\n            # Check if the difference between adjacent elements of the matrix is 1\n            for i in range(rows - 1):\n                for j in range(cols - 1):\n                    if my_matrix[i][j] + my_matrix[i + 1][j + 1]!= my_matrix[i + 2][j] or \\\n                       my_matrix[i][j] + my_matrix[i + 1][j]!= my_matrix[i + 2][j + 1]:\n                        return False\n            return True\n        else:\n            return False\n\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n\n    # Check if the length of the matrix is 3\n    if len(my_matrix)!= 3:\n        return \"Matrix must be a 3x3 square.\"\n\n    # Check if all rows have the same length\n    row_lengths = [len(row) for row in my_matrix]\n    if row_lengths!= row_lengths[0]:\n        return \"Matrix must have all rows of equal length.\"\n\n    # Check if the sum of each row is equal to the sum of the matrix\n    row_sums = [sum(row) for row in my_matrix]\n    if row_sums!= [sum(row) for row in my_matrix]:\n        return \"Matrix must have the sum of each row equal to the sum of the matrix.\"\n\n    # Check if the sum of each column is equal to the sum of the matrix\n    col_sums = [sum(my_matrix[j]) for j in range(len(my_matrix))]\n    if col_sums!= [sum(my_matrix[j]) for j in range(len(my_matrix))]:\n        return \"Matrix must have the sum of each column equal to the sum of the matrix.\"\n\n    # Check if the sum of each diagonal is equal to the sum of the matrix\n    diag_sum_1 = sum([my_matrix[i][i] for i in range(len(my_matrix))])\n    if diag_sum_1!= sum([my_matrix[i][i] for i in range(len(my_matrix))]):\n        return \"Matrix must have the sum of the diagonal elements equal to the sum of the matrix.\"\n\n    diag_sum_2 = sum([my_matrix[i][2-i] for i in range(len(my_matrix))])\n    if diag_sum_2!= sum([my_matrix[i][2-i] for i in range(len(my_matrix))]):\n        return \"Matrix must have the sum of the diagonal elements equal to the sum of the matrix.\"\n\n    return \"The matrix is a magic square.\""
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Create a dictionary to store the count of each item in the list\n    count_dict = defaultdict(int)\n    for num in nums:\n        count_dict[num] += 1\n\n    # Find the item with the maximum frequency\n    max_count = 0\n    max_item = None\n    for item, count in count_dict.items():\n        if count > max_count:\n            max_count = count\n            max_item = item\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    max_freq = 0\n    max_item = None\n\n    for num in nums:\n        freq[num] += 1\n\n        if freq[num] > max_freq:\n            max_freq = freq[num]\n            max_item = num\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    max_item = None\n    max_count = 0\n    \n    for num in nums:\n        freq[num] += 1\n        \n        if freq[num] > max_count:\n            max_count = freq[num]\n            max_item = num\n            \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    max_freq = 0\n    max_item = None\n\n    for num in nums:\n        freq_dict[num] += 1\n\n        if freq_dict[num] > max_freq:\n            max_freq = freq_dict[num]\n            max_item = num\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n\n    # Count the occurrences of each item in the list\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n\n    # Find the item with the maximum frequency\n    max_freq = max(freq.values())\n    max_item = None\n    for item, count in freq.items():\n        if count == max_freq:\n            max_item = item\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n\n    for num in nums:\n        freq[num] += 1\n\n    max_count = max(freq.values())\n    max_item = None\n\n    for item, count in freq.items():\n        if count == max_count:\n            max_item = item\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    max_item = None\n    max_freq = 0\n    \n    for num in nums:\n        freq[num] += 1\n        \n        if freq[num] > max_freq:\n            max_freq = freq[num]\n            max_item = num\n    \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n\n    max_freq = max(freq.values())\n    max_num = None\n    for num, count in freq.items():\n        if count == max_freq:\n            max_num = num\n\n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_num = max(freq, key=freq.get)\n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    This function takes a list of integers as input and returns the item with the maximum frequency.\n    '''\n    freq = defaultdict(int) # create a defaultdict to store the frequency count\n    \n    # loop through the list and count the frequency of each number\n    for num in nums:\n        freq[num] += 1\n        \n    # find the item with the maximum frequency\n    max_item = None\n    max_freq = 0\n    \n    for item, count in freq.items():\n        if count > max_freq:\n            max_freq = count\n            max_item = item\n            \n    return max_item"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    str1 = str1.lower()\n    str1 = \"\".join([char for char in str1 if char not in vowels])\n    str1 = str1[::-1]\n    return str1"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    result = \"\"\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] not in vowels:\n            result += str1[i]\n    return result"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowels_reversed = []\n    for char in str1:\n        if char in vowels:\n            vowels_reversed.append(char)\n    return ''.join(vowels_reversed[::-1])"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    rev_vowels = []\n\n    for char in str1:\n        if char.lower() not in vowels:\n            rev_vowels.append(char)\n\n    return ''.join(rev_vowels[::-1])"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    vowel_index = 0\n    result = ''\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] in vowels:\n            vowel_index += 1\n        else:\n            if vowel_index % 2 == 0:\n                result = result + str1[i]\n            else:\n                result = result + str1[i][::-1]\n                vowel_index -= 1\n    return result"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    reverse_str = \"\"\n    for i in range(len(str1)):\n        if str1[i] not in vowels:\n            reverse_str += str1[i]\n    reverse_str = reverse_str[::-1]\n    return reverse_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    result = \"\"\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] not in vowels:\n            result += str1[i]\n    return result"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    vowels = [v for v in vowels]  # create a list of all vowels\n    str1 = str1.lower()  # convert all letters to lowercase\n    result = []\n    for i in range(len(str1)):\n        if str1[i] in vowels:\n            if i == 0:  # special case for the first character\n                result.append(str1[i])\n            elif str1[i - 1] in vowels:  # skip vowels that come before\n                result.append(str1[i])\n        else:\n            result.append(str1[i])\n    return \"\".join(result[::-1])  # reverse the list of characters and join them together"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowels_set = set(vowels)\n    result = []\n\n    for char in str1:\n        if char in vowels_set:\n            result.append(char)\n        else:\n            result.append(char[::-1])\n\n    return ''.join(result)"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    str2 = \"\"\n    for i in str1:\n        if i in vowels:\n            str2 += i\n    str3 = str2[::-1]\n    return str3"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # join the elements of the tuple with a comma and space separator\n    string = \", \".join(map(str, tup1))\n    # return the string\n    return string"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tup_string(tup):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tup_string(tup):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str1 = \"\"\n    for i in tup1:\n        str1 = str1 + str(i)\n    return str1"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return''.join(str(elem) for elem in tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total = 0\n    for num in nums:\n        if num < 0:\n            total += num\n    return total"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(num for num in nums if num < 0)"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    # Initialize the sum variable to zero\n    total = 0\n    # Loop through each number in the list\n    for num in nums:\n        # Check if the number is negative\n        if num < 0:\n            # Add the negative number to the total\n            total += num\n    # Return the total sum of negative numbers\n    return total"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n\n    # Initialize a variable to store the sum of negative numbers\n    negativesum = 0\n\n    # Iterate over each number in the list\n    for num in nums:\n\n        # Check if the number is negative\n        if num < 0:\n\n            # Add the number to the sum of negative numbers\n            negativesum += num\n\n    # Return the sum of negative numbers\n    return negativesum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum([num for num in nums if num < 0])"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def hexagonal_num(n): \n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    return n * (n + 1) // 2"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    hexagonal_list = []\n    i = 1\n    while i <= n:\n        hexagonal_list.append(i * (2*i - 1))\n        i += 1\n    return hexagonal_list"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    hexagonal_num = (n-1) * (2*n-1)\n    return hexagonal_num"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    hexagonal_num = (2*n-1)**2\n    return hexagonal_num"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n * (2 * n - 1)) // 2"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n <= 0:\n        return None\n    else:\n        return (n*(2*n-1))//2"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    return (n * (2 * n - 1)) // 2\n"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 2 * n + 1"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    a = 1\n    b = 1\n    for i in range(1, n+1):\n        print(a, end=' ')\n        a, b = b, 3*a + b"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return hexagonal_num(n//2) * 2 + 1\n    else:\n        return hexagonal_num(n//2) * 2 + 1 + hexagonal_num(n//2 - 1)"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = zeros_count(nums)\n    non_zeros = len(nums) - zeros\n    return zeros/non_zeros\n\ndef zeros_count(nums):\n    '''\n    Write a function to count the number of zeroes in an array of integers.\n    '''\n    zeros = array('i', [0] * len(nums))\n    for num in nums:\n        if num == 0:\n            for i in range(len(zeros)):\n                if zeros[i] == 1:\n                    break\n                if i == len(zeros) - 1:\n                    zeros.append(0)\n                    break\n                if num == zeros[i+1]:\n                    zeros[i] = 0\n    return zeros.count(0)"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = 0\n    nonzeros = 0\n    \n    for num in nums:\n        if num == 0:\n            zeros += 1\n        else:\n            nonzeros += 1\n            \n    return zeros / nonzeros"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = array('i', [0]*len(nums)) # create an array of zeros of the same length as the input array\n    \n    for num in nums:\n        if num == 0:\n            zero_count[nums.index(num)] += 1\n    \n    non_zero_count = len(nums) - sum(zero_count) # calculate the total number of non-zeroes in the array\n    ratio = non_zero_count / len(nums)\n    \n    return round(ratio, 2) # round the ratio to two decimal places and return it"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # Initialize two arrays to store the numbers of zeroes and non-zeroes\n    zeros = array('i', [0] * len(nums))\n    non_zeros = array('i', [0] * len(nums))\n\n    # Iterate through the array and count the number of zeroes and non-zeroes\n    for num in nums:\n        if num == 0:\n            zeros[non_zeros.index(0)] += 1\n        else:\n            non_zeros[non_zeros.index(0)] += 1\n\n    # Calculate the ratio of zeroes to non-zeroes\n    zeros_to_non_zeros = sum(zeros) / len(nums)\n\n    return zeros_to_non_zeros"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    non_zero_count = 0\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    ratio = zero_count / non_zero_count\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = 0\n    non_zeros = 0\n\n    for num in nums:\n        if num == 0:\n            zeros += 1\n        else:\n            non_zeros += 1\n\n    if non_zeros == 0:\n        return 0\n    else:\n        return zeros / non_zeros"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = array('i', [0]*len(nums))\n    for num in nums:\n        count[num] += 1\n    count = [num for num in count if num!= 0]\n    zero_count = sum(count) / len(count)\n    non_zero_count = len(nums) - zero_count\n    ratio = zero_count / non_zero_count\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    arr = array('i', nums)\n    non_zeroes = 0\n    zeroes = 0\n    for i in arr:\n        if i!= 0:\n            non_zeroes += 1\n        else:\n            zeroes += 1\n    zero_ratio = non_zeroes/zeroes if non_zeroes!= 0 else 0\n    return zero_ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # Initialize two empty arrays for non-zero and zero values, respectively\n    non_zero_arr = array('i')\n    zero_arr = array('i')\n\n    # Loop through the array and count the number of non-zero and zero values\n    for num in nums:\n        if num!= 0:\n            non_zero_arr.append(num)\n        else:\n            zero_arr.append(num)\n\n    # Find the total number of values in the array\n    total_values = len(nums)\n\n    # Calculate the ratio of non-zero to zero values\n    non_zero_ratio = non_zero_arr.count(0) / total_values\n\n    return non_zero_ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    num_zeros = sum(nums) - sum(1 for x in nums if x!= 0)\n    num_ones = sum(1 for x in nums if x!= 0)\n    return num_zeros/num_ones"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Check if the number is zero\n    if n == 0:\n        return True\n\n    # Check if the number is one\n    if n == 1:\n        return True\n\n    # Check if the number is already represented as sum of powers of 2\n    if n % 2 == 0 and n % 4 == 0:\n        return True\n\n    # Check if the number can be represented as sum of powers of 2 using any other method\n    power_of_two = 1\n    while power_of_two <= n:\n        if n % power_of_two == 0:\n            return True\n        power_of_two *= 2\n\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    # base case\n    if n == 1:\n        return True\n\n    # check if the number is a power of 2\n    if n & (n-1) == 0:\n        return False\n\n    # check if the number can be represented as sum of powers of 2\n    two = 1\n    while two <= n:\n        if two == n:\n            return True\n        elif two*2 <= n:\n            n -= two*2\n        else:\n            return False\n        two *= 2"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0: # base case for recursion\n        return True\n    if n % 2 == 0: # if n is even, then its sum of powers of 2 is 2^k (where k is odd)\n        return is_Sum_Of_Powers_Of_Two(n//2) + 1\n    else: # if n is odd, then its sum of powers of 2 is 2^k + 1 (where k is even)\n        return is_Sum_Of_Powers_Of_Two(n//2) + 2"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    # Check if n is divisible by 4\n    if n % 4!= 0: \n        return False\n    # Check if n is divisible by 2^i for i = 1, 2, 3, 4\n    for i in range(1, 5):\n        if n % (2**i)!= 0: \n            return False\n    return True"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n    # Check if the given number is a power of 2\n    if n & (n - 1) == 0:\n        # n is a power of 2\n        # Check if n can be represented as sum of non-zero powers of 2\n        return (n - 1) * (2 ** log2(n)) == n\n    else:\n        # n is not a power of 2\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    # Initializing variables for the function\n    flag = True\n    count = 0\n    max_count = 0\n\n    # Checking if the number is 0 or 1\n    if n == 0 or n == 1:\n        return True\n\n    # Looping through the number of bits in the number\n    for i in range(1, 32):\n\n        # Calculating the power of 2 that can be represented by the current number of bits\n        power_of_2 = 2**(31 - i)\n\n        # Checking if the power of 2 can be represented in the given number\n        if power_of_2 > n:\n            break\n\n        # Updating the count of the power of 2\n        count += 1\n\n        # Updating the max count if the current count is greater\n        if count > max_count:\n            max_count = count\n\n        # Checking if the power of 2 can be represented in the given number\n        if n % power_of_2 == 0:\n\n            # Updating the flag to False as the number cannot be represented as sum of powers of 2\n            flag = False\n\n            # Breaking out of the loop\n            break\n\n    # Returning the result of the function\n    return flag"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    # check if n is a power of 2\n    if n & (n-1) == 0:\n        return True\n    \n    # check if n is a sum of non-zero powers of 2\n    i = 1\n    while i <= n:\n        if n % i == 0:\n            temp = n // i\n            if temp > 1 and (temp & (temp-1)) == 0:\n                return True\n        i <<= 1\n    \n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    This function checks whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n    # Initialize variables to store count of odd and even bits\n    count_odd = 0\n    count_even = 0\n    \n    # Iterate through each bit in the binary representation of n\n    for i in range(32):\n        # Get the current bit value\n        bit = n & 1\n        \n        # Increment the count of the corresponding bit\n        if bit == 1:\n            if i % 2 == 0:\n                count_even += 1\n            else:\n                count_odd += 1\n        \n        # Remove the current bit from n\n        n = n >> 1\n    \n    # Check if the number can be represented as sum of non-zero powers of 2\n    if count_odd > 0 and count_even > 0:\n        return False\n    \n    if count_even == 0 and count_odd == 0:\n        return True\n    \n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # check if n is already a power of 2\n    if n == 1:\n        return True\n    if n & (n-1) == 0:\n        return False\n    \n    # check if n can be represented as sum of powers of 2\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            if is_Sum_Of_Powers_Of_Two(n//i):\n                return True\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    def is_power_of_two(n):\n        '''\n        A helper function to check if a given number is a power of 2 or not.\n        '''\n        return n & (n-1) == 0\n    \n    def count_set_bits(n):\n        '''\n        A helper function to count the number of set bits in a given number.\n        '''\n        count = 0\n        while n:\n            n &= n-1\n            count += 1\n        return count\n    \n    def get_power_of_two(n):\n        '''\n        A helper function to find the nearest power of 2 that is greater than or equal to a given number.\n        '''\n        if n <= 1:\n            return 1\n        elif n == 2:\n            return 2\n        else:\n            return 1 << count_set_bits(n-1)\n    \n    def check_sum_of_powers_of_two(n):\n        '''\n        The main function to check if the given number can be represented as sum of non-zero powers of 2 or not.\n        '''\n        if n == 0:\n            return True\n        \n        power_of_two = get_power_of_two(n)\n        if power_of_two == 1:\n            return True\n        \n        return check_sum_of_powers_of_two(n-power_of_two)\n    \n    return check_sum_of_powers_of_two(n)"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2*math.pi*r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    \"\"\"\n    Write a function to find the circumference of a circle.\n    \"\"\"\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14159 * r"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    print(\"The circumference of a circle of radius\", r, \"is:\", circumference)"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2*math.pi*r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * r\n\nprint(circle_circumference(5))"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14159 * r\n"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * r"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = set()\n    for sublist in test_list:\n        for num in sublist:\n            result.add(num)\n    return list(result)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    # Helper function to flatten a list of lists\n    def flatten(lst):\n        result = []\n        for item in lst:\n            if isinstance(item, list):\n                result.extend(flatten(item))\n            else:\n                result.append(item)\n        return result\n\n    # Flatten the list of lists\n    flattened_list = flatten(test_list)\n\n    # Remove duplicates and sort the list\n    unique_list = sorted(set(flattened_list))\n\n    return unique_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = [item for sublist in test_list for item in sublist]\n    return set(flattened_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for sub_list in test_list:\n        for num in sub_list:\n            flat_list.append(num)\n    return set(flat_list)\n"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for sublist in test_list:\n        for item in sublist:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return [num for sublist in test_list for num in sublist]"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for sublist in test_list:\n        flattened_list.extend(sublist)\n    return set(flattened_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for sublist in test_list:\n        flat_list.extend(sublist)\n    return set(flat_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = []\n    for item in test_list:\n        for i in item:\n            result.append(i)\n    return set(result)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    # Base case: if the input is an empty list, return an empty set\n    if not test_list:\n        return set()\n    \n    # Recursively flatten the sublists\n    flattened_sublists = set()\n    for sublist in test_list:\n        flattened_sublists = flattened_sublists.union(extract_singly(sublist))\n    \n    # Return the flattened set\n    return flattened_sublists"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements using pancake sort algorithm.\n    \"\"\"\n    # Helper function to swap two elements of the list\n    def swap(nums, i, j):\n        nums[i], nums[j] = nums[j], nums[i]\n\n    # Helper function to reverse the elements of a list\n    def reverse(nums, start, end):\n        while start < end:\n            swap(nums, start, end)\n            start += 1\n            end -= 1\n\n    # Perform pancake sort algorithm\n    n = len(nums)\n    for i in range(n - 1, 0, -1):\n        # Find the maximum element in the unsorted part of the list\n        max_index = i\n        for j in range(i):\n            if nums[j] < nums[max_index]:\n                max_index = j\n        # Swap the maximum element with the first element of the unsorted part of the list\n        swap(nums, i, max_index)\n        # Reverse the elements of the unsorted part of the list after the swap\n        reverse(nums, i + 1, n - 1)\n\n    # Return the sorted list\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements.\n    \"\"\"\n    def sort_and_swap(start, end):\n        \"\"\"\n        Sort the elements from start to end using pancake sort.\n        \"\"\"\n        temp = nums[start]\n        for i in range(start, end):\n            if nums[i] < temp:\n                temp = nums[i]\n                nums[i] = nums[start]\n                nums[start] = temp\n\n    def sort(start, end):\n        \"\"\"\n        Recursively sort the elements from start to end using pancake sort.\n        \"\"\"\n        if start < end:\n            # Find the maximum element in the subarray from start to end\n            max_index = start\n            for i in range(start, end):\n                if nums[i] > nums[max_index]:\n                    max_index = i\n            # Swap the maximum element with the first element\n            nums[start], nums[max_index] = nums[max_index], nums[start]\n            # Recursively sort the subarray excluding the maximum element\n            sort(start + 1, end - 1)\n            # Recursively sort the subarray including the maximum element\n            sort(start, end - 1)\n\n    # Recursively sort the entire array\n    sort(0, len(nums) - 1)\n\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    def helper(nums, k, start):\n        if k == 1:\n            return\n\n        # find the index of the minimum element in the remaining sublist\n        min_idx = start\n        for i in range(start, len(nums)):\n            if nums[i] < nums[min_idx]:\n                min_idx = i\n\n        # swap the minimum element with the first element of the sublist\n        nums[start], nums[min_idx] = nums[min_idx], nums[start]\n\n        # sort the remaining sublist\n        helper(nums, k - 1, start + 1)\n\n    # sort the entire list using a recursive approach\n    n = len(nums)\n    helper(nums, n, 0)\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    def merge(left, right):\n        result = []\n        i = j = 0\n\n        while i < len(left) and j < len(right):\n            if left[i] <= right[j]:\n                result.append(left[i])\n                i += 1\n            else:\n                result.append(right[j])\n                j += 1\n\n        result += left[i:]\n        result += right[j:]\n\n        return result\n\n    def merge_sort(arr):\n        if len(arr) <= 1:\n            return arr\n\n        mid = len(arr) // 2\n        left = arr[:mid]\n        right = arr[mid:]\n\n        left = merge_sort(left)\n        right = merge_sort(right)\n\n        return merge(left, right)\n\n    nums = merge_sort(nums)\n\n    for i in range(len(nums) - 1, 0, -1):\n        for j in range(0, i):\n            if nums[j] > nums[j + 1]:\n                nums[j], nums[j + 1] = nums[j + 1], nums[j]\n\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Pancake Sort algorithm.\n    '''\n    \n    # Find the length of the list\n    n = len(nums)\n    \n    # Check if the length of the list is less than 2\n    if n < 2:\n        return nums\n    \n    # Initialize variables to keep track of the max and min indices\n    max_index = 0\n    min_index = 0\n    \n    # Loop through each element in the list\n    for i in range(n-1):\n        # Check if the current element is greater than the previous element\n        if nums[i] < nums[i+1]:\n            # If it is, update the max and min indices\n            max_index = i\n            min_index = i+1\n        \n        # Loop through the rest of the list to find the next maximum element\n        for j in range(i+1, n):\n            if nums[j] > nums[max_index]:\n                max_index = j\n            \n            # Check if the next maximum element is smaller than the current element\n            if nums[j] < nums[min_index] and j!= max_index:\n                min_index = j\n        \n        # Swap the elements at the current and minimum indices\n        nums[i], nums[min_index] = nums[min_index], nums[i]\n        \n        # Loop through the list again to find the next maximum element\n        for j in range(i+1, n):\n            if nums[j] > nums[max_index]:\n                max_index = j\n    \n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n\n    # For each element, find the length of the pancake it would take to sort it in descending order.\n    for i in range(n-1, 0, -1):\n        max_index = 0\n        for j in range(1, i+1):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        # If the current element is already the maximum, it is already sorted.\n        if nums[i] == nums[max_index]:\n            continue\n        # Swap the current element with the element at its new position.\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n        # Reverse the pancake from the new position to the end.\n        for j in range(i, 0, -1):\n            nums[j], nums[j-1] = nums[j-1], nums[j]\n\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Sorts a list of elements using the Pancake Sort algorithm.\n    '''\n    n = len(nums)\n    for i in range(n):\n        # Find the largest element in the unsorted part of the list\n        max_index = i\n        for j in range(i, n):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        # Swap the largest element with the first element of the unsorted part of the list\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n        # Reverse the unsorted part of the list to put the largest element at the end\n        for j in range(i+1, n):\n            nums[i], nums[j] = nums[j], nums[i]"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    This function takes a list of numbers as input and sorts it in descending order using the Pancake Sort algorithm.\n    '''\n\n    # Iterate through the list of numbers and perform a selection sort on each sub-list.\n    for i in range(len(nums)):\n        # Find the maximum element in the current sub-list.\n        max_index = i\n        for j in range(i+1, len(nums)):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        \n        # Swap the maximum element with the first element in the current sub-list.\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Sorts a list of elements using the pancake sort algorithm.\n\n    The pancake sort algorithm is based on the idea of sorting by \"pancakes\"\n    that are arranged in a circle. The algorithm works by first sorting the\n    list by the smallest element, then the second smallest element, and so on,\n    until the list is sorted.\n\n    The algorithm works by first partitioning the list into two parts: one\n    containing the smallest element, and another containing the remaining\n    elements. Then, the algorithm recursively sorts the two parts, and then\n    combines them to produce the final sorted list.\n\n    The pancake sort algorithm has a time complexity of O(n^2), which is not\n    optimal for large lists, but is sufficient for small lists.\n    '''\n\n    n = len(nums)\n    for i in range(n):\n        # find the smallest element\n        min_index = i\n        for j in range(i+1, n):\n            if nums[j] < nums[min_index]:\n                min_index = j\n        # swap the smallest element with the i-th element\n        nums[i], nums[min_index] = nums[min_index], nums[i]\n        # reverse the first i elements of the list\n        nums[:i+1] = nums[:i+1][::-1]\n        # if the list is already sorted, stop the algorithm\n        if nums[:i+1] == nums:\n            break\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    # we will use the pancake sorting algorithm to sort the list\n    for i in range(n):\n        # find the largest element in the unsorted part of the list\n        largest = i\n        for j in range(i+1, n):\n            if nums[j] > nums[largest]:\n                largest = j\n        # swap the largest element with the first element of the unsorted part of the list\n        nums[i], nums[largest] = nums[largest], nums[i]\n        # reverse the remaining part of the list\n        for j in range(i, n-1, -1):\n            nums[j], nums[j+1] = nums[j+1], nums[j]\n"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_samepair(list1, list2, list3):\n    # initialize the count variable to 0\n    count = 0\n    # loop through each pair of elements in list1 and list2\n    for i in range(len(list1)):\n        # if the elements are equal at the same position in list1 and list2, increment the count\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    # return the count\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_samepair(list1, list2, list3):\n    # Initialize a counter variable\n    count = 0\n\n    # Loop through the lists and compare each item to the second and third item\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            # Increment the counter if the item is the same as the third item in its position\n            count += 1\n\n    # Return the final count\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            if list1[i] == list3[i]:\n                count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lists(Input):\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lists(Input):\n    count = 0\n    for i in range(len(Input)):\n        if isinstance(Input[i], list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n\n    count = 0 \n    for element in Input: \n        if type(element) == list: \n            count += 1 \n    return count "
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    \n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    This function takes an array as input and returns the maximum absolute difference between any two elements in the array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr):\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr):\n    \"\"\"\n    Write a python function to find the maximum difference between any two elements in a given array.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    if len(arr) < 2:\n        return 0\n    \n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = arr[1] - arr[0]\n    for i in range(1, len(arr)):\n        if abs(arr[i] - arr[i-1]) > max_diff:\n            max_diff = abs(arr[i] - arr[i-1])\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    This function takes an array as input and returns the maximum absolute difference between any two elements in the array.\n    '''\n    max_diff = arr[0]\n    for i in range(1, len(arr)):\n        if abs(arr[i]) > max_diff:\n            max_diff = abs(arr[i])\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    diff = float('-inf')\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = max(diff, abs(arr[i] - arr[j]))\n    return diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    This function takes an array as input and returns the maximum absolute difference between any two elements in the array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if i!= j:\n                diff = abs(arr[i]-arr[j])\n                if diff > max_diff:\n                    max_diff = diff\n    return max_diff"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n\n    # Find the discriminant of the quadratic equation\n    D = b**2 - 4*a*n\n\n    # Check if the discriminant is zero, in which case there is one and only one solution\n    if D == 0:\n        x = -b / (2*a)\n        y = -b / (2*a)\n        return (x, y)\n\n    # Check if the discriminant is positive, in which case there are no solutions\n    elif D > 0:\n        return None\n\n    # Check if the discriminant is negative, in which case there may be two solutions\n    else:\n        x1 = (-b + D**0.5) / (2*a)\n        x2 = (-b - D**0.5) / (2*a)\n        return (x1, x2)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Initialize the variables for the solution\n    x = y = 0\n\n    # Iterate through the number of iterations\n    for i in range(n):\n        # Update the value of x\n        x = a * x + b\n\n        # If the value of x is greater than or equal to n, then we have a solution\n        if x >= n:\n            # Calculate the value of y\n            y = n // x\n\n            # Check if the value of y satisfies the additional condition of ax + by = n\n            if a * y * y + b * y + y * y == n:\n                # Return the solution as a tuple\n                return (x, y)\n\n    # If no solution is found, return None\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n\n    for i in range(1, n+1):\n        if a * i + b * (n-i) == n:\n            return (i, n-i)\n\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x1 = (-b + n//a) // a\n    x2 = (-b - n//a) // a\n    if x1 * a + b * x1 == n and x2 * a + b * x2 == n:\n        return (x1, x2)\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for i in range(n):\n        x = (b * i) // a\n        y = (a * n) // b\n        if a * x + b * y == n:\n            return (x, y)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # initializing two variables x and y\n    x = 0\n    y = 0\n    \n    # checking if any of the values of x and y satisfy the given equation\n    while x < b and y < a:\n        if a * x + b * y == n:\n            return (x, y)\n        elif a * x + b * y < n:\n            x += 1\n        else:\n            y += 1\n    \n    # if no solution is found, return None\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n\n    # Create a list of all possible combinations of x and y\n    x_range = range(1, n + 1)\n    y_range = range(1, n + 1)\n    combinations = list(product(x_range, y_range))\n\n    # Filter out combinations that don't satisfy the given conditions\n    solutions = [combination for combination in combinations if a * combination[0] + b * combination[1] == n]\n\n    # Return the first solution if there is only one, otherwise return the solutions list\n    if len(solutions) == 1:\n        return (solutions[0][0], solutions[0][1])\n    elif len(solutions) > 1:\n        return solutions\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Find the discriminant and its square root\n    d = b**2 - 4*a*n\n    sqrt_d = d**0.5\n    \n    # Check if the discriminant is real\n    if d < 0:\n        return None\n    \n    # If the discriminant is real, return two solutions x1 and x2\n    x1 = (-b + sqrt_d)/(2*a)\n    x2 = (-b - sqrt_d)/(2*a)\n    return (int(x1), int(x2))"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    Returns a tuple (x, y) that satisfies ax + by = n or None if no solution exists.\n    \"\"\"\n    if a == 0 and b == 0:\n        return (0, n // b)\n    elif a == 0:\n        return None\n    elif b == 0:\n        return None\n    \n    x = n / a\n    y = (b * x) - n\n    \n    if x == int(x) and y == int(y):\n        return (int(x), int(y))\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    # Check if the given quadratic equation has a real solution\n    delta = b**2 - 4*a*n\n    if delta < 0:\n        return None\n\n    # Compute the two solutions\n    x1 = (-b + delta**0.5)/2/a\n    x2 = (-b - delta**0.5)/2/a\n    return (int(x1), int(x2))"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    for element in list1:\n        if element in list2:\n            list1.remove(element)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    new_list = []\n    for i in list1:\n        if i not in list2:\n            new_list.append(i)\n    return new_list"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    # create a new list to store the unique elements from list1\n    new_list = []\n    for element in list1:\n        if element not in list2:\n            new_list.append(element)\n    return new_list"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [x for x in list1 if x not in list2]"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    new_list = []\n    for item in list1:\n        if item not in list2:\n            new_list.append(item)\n    return new_list"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    # create a new list to store the elements of the original list that are not present in the second list\n    result = [x for x in list1 if x not in list2]\n    return result"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    for i in list1:\n        if i in list2:\n            list1.remove(i)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list2:\n        while element in list1:\n            list1.remove(element)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list1:\n        if element in list2:\n            list1.remove(element)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n\n    Parameters:\n    list1 (list): The first list.\n    list2 (list): The second list.\n\n    Returns:\n    list: The first list with all elements from the second list removed.\n    \"\"\"\n    return [x for x in list1 if x not in list2]"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    i = 0\n    sum_series = 0\n    while i < n // 2:\n        sum_series += n - 2 * i\n        i += 1\n    return sum_series"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n < 4:\n        return 0\n    else:\n        sum = 0\n        for i in range(n//2):\n            sum += n - 2*i\n        return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return (n * (n + 1)) // 2"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n <= 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 5\n    \n    sum_series = 0\n    for i in range(1, n//2):\n        sum_series += n - 2*i\n    \n    return sum_series"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    i = 0\n    while i <= n//2:\n        total += (n - 2*i)\n        i += 1\n    return total"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n // 2):\n        sum += (n - 2*i)\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    series = 0\n    for i in range(n//2):\n        series += n - 2*i\n    return series"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    s = 0\n    for i in range(n//2):\n        s += n - 2*i\n    return s"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n <= 1:\n        return 0\n    else:\n        return n + sum_series(n-2) + sum_series(n-4) +... + sum_series(n-n+2)"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    s = 0\n    for i in range(n//2):\n        s += (n - 2*i)\n    return s"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Formula to calculate the area of a regular polygon using Heron's formula\n    area = (s * l) / 2\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s * l) / 2\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0.5 * s * (l + tan(pi/l))\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # calculate the semi-perimeter\n    area = 0.5 * s * l\n    \n    # calculate the area using Heron's formula\n    area = 0.5 * s * (l * tan(pi/l) + tan(pi/l) * l)\n    \n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n\n    area = 0.5 * s * l\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += (s * (tan((pi / l) * (i + 1)) ** 2))\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Calculate the area of a regular polygon by using the formula: A = (s * (s - tan^2(180/n))) / 2\n    area = (s * (s - tan(pi/l)**2)) / 2\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n\n    # Calculate the circumference of the polygon\n    circumference = 2 * pi * s\n    \n    # Calculate the area of the polygon\n    area = circumference * l / 2\n    \n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # calculate the side of the polygon using Heron's formula\n    side = (s ** 2 + l ** 2) ** 0.5\n    # calculate the area of the polygon using the formula for the area of a regular polygon\n    area = (l / (4 * tan(pi / l))) * side ** 2\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s * (s - l) * (s - 2 * l + 1)) / 6\n    return area\n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    sum_div = 0 \n    for i in range(1, int(math.sqrt(n))+1): \n        if n % i == 0: \n            sum_div += i + n//i \n    if sum_div == n: \n        return True \n    else: \n        return False "
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef div_sum(n):\n    \"\"\"\n    Determine if the sum of the divisors of two integers are the same.\n    \"\"\"\n    # Find the sum of the divisors of n\n    divisors = set()\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors.add(i)\n    div_sum = sum(divisors)\n\n    # Check if the sum is the same as n\n    if div_sum == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n\n    # Find all the divisors of the number\n    divisors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n            if i!= n // i:\n                divisors.append(n // i)\n\n    # Calculate the sum of the divisors\n    divisor_sum = sum(divisors)\n\n    # Check if the sum is the same as the original number\n    if divisor_sum == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    for i in range(2, int(math.sqrt(n))+1): \n        if n % i == 0: \n            return False\n    return True "
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    i = 2\n    while i*i <= n: \n        if n % i: \n            i += 1 \n        else: \n            j = i \n            while n % j == 0: \n                n //= j \n            sum_divisors = sum(range(i, j)) \n            if sum_divisors == 0: \n                return \"No sum of divisors\"\n            elif n == 1: \n                return \"Yes, the sum of divisors is {}\".format(sum_divisors)\n            else: \n                return \"No, the sum of divisors is not {}\".format(sum_divisors)\n            break\n    return \"No sum of divisors\""
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = math.factorial(n)\n    divisors_sum = sum(divisors)\n    divisors_sum_sqrt = int(math.sqrt(divisors_sum))\n\n    if divisors_sum_sqrt**2 == divisors_sum:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n\n    # loop through all numbers from 1 to n\n    for i in range(1, n+1):\n        # loop through all numbers from 1 to i\n        for j in range(1, i+1):\n            # check if i and j are divisible by each other\n            if i % j == 0 and j % i == 0:\n                # add i and j to the sum and check if the sum is equal to n\n                if i+j == n:\n                    # return True\n                    return True\n\n    # if we get to this point, the sum of the divisors is not equal to n\n    return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n\n    # Find the sum of the divisors of n\n    div_sum = sum(set(divisors(n)))\n\n    # Find the sum of the divisors of n+1\n    div_sum_plus1 = sum(set(divisors(n+1)))\n\n    # Check if the sum of the divisors of n and n+1 are the same\n    if div_sum == div_sum_plus1:\n        print(\"The sum of the divisors of\", n, \"and\", n+1, \"is the same.\")\n    else:\n        print(\"The sum of the divisors of\", n, \"and\", n+1, \"is different.\")\n\n    # Find the largest prime number smaller than n+1\n    largest_prime = max(x for x in range(2, n+1) if all(x%i!=0 for i in range(2, int(math.sqrt(x))+1)))\n\n    # Check if the largest prime divisor of n+1 is a divisor of n+1\n    if any(largest_prime%x==0 for x in range(2, n+1)):\n        print(\"The largest prime divisor of\", n+1, \"is a divisor of\", n+1)\n    else:\n        print(\"The largest prime divisor of\", n+1, \"is not a divisor of\", n+1)\n\ndef divisors(n):\n    '''\n    Return a list of all divisors of n.\n    '''\n    divisors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n            if n//i!= i:\n                divisors.append(n//i)\n    if n > 1:\n        divisors.append(n)\n    return divisors"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef div_sum(n):\n    '''\n    This function takes an integer n as input and returns True if the sum of the divisors of n is the same as n and False otherwise.\n    '''\n    divisors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n            if i!= n//i:\n                divisors.append(n//i)\n    div_sum = sum(divisors)\n    if div_sum == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n\n    # Calculate the sum of the divisors of n\n    div_sum = sum([i for i in range(1, int(math.sqrt(n))+1) if n % i == 0])\n\n    # Check if the sum of the divisors of n and n+1 are the same\n    if div_sum == n*(n+1) // 2:\n        print(f\"The sum of the divisors of {n} and {n+1} is the same.\")\n    else:\n        print(f\"The sum of the divisors of {n} and {n+1} are different.\")\n"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    char_count = 0\n    english_alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    for i in range(26):\n        if str1.lower() == english_alphabet[i].lower():\n            char_count += 1\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    count = 0\n    for char in str1:\n        if char.lower() in alphabet.lower():\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Convert the string to lowercase\n    str1 = str1.lower()\n    \n    # Create a dictionary to store the count of characters at each position in the English alphabet\n    count = {}\n    \n    # Loop through each character in the string\n    for i in range(len(str1)):\n        # Convert the current character to lowercase to match the case insensitive nature of the dictionary\n        char = str1[i].lower()\n        \n        # If the current character has not been seen before, add it to the dictionary with a count of 1\n        if char not in count:\n            count[char] = 1\n        # If the current character has been seen before, increment its count in the dictionary\n        else:\n            count[char] += 1\n    \n    # Loop through each character in the string again and count the number of occurrences of each character at the same position in the English alphabet\n    for i in range(len(str1)):\n        # Convert the current character to lowercase to match the case insensitive nature of the dictionary\n        char = str1[i].lower()\n        \n        # If the current character occurs at the same position in the English alphabet as the previous character, increment its count in the dictionary\n        if i > 0 and str1[i-1] == char:\n            count[char] += 1\n    \n    # Return the dictionary of character counts\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    count = 0\n    for char in str1:\n        if char.lower() == alphabet[alphabet.index(char.lower())].lower():\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    for char in str1:\n        if char.lower() in alphabet:\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_char_position(str1): \n    # Initialize an empty dictionary to store the count of each character\n    char_count = {}\n    for i in range(ord('a'), ord('z') + 1):\n        char_count[chr(i)] = 0\n\n    # Iterate over each character in the string\n    for char in str1:\n        # Convert the character to lowercase to ignore case\n        char = char.lower()\n        # Check if the character is in the dictionary\n        if char in char_count:\n            # Increment the count for the character\n            char_count[char] += 1\n\n    # Return the dictionary with the count of each character\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_char_position(str1):\n    count = 0\n    for i in range(26):\n        char = chr(i+65)\n        if str1.lower().count(char.lower()) == len(str1):\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_char_position(str1):\n    count = 0\n    str1 = str1.lower()\n    for i in range(26):\n        if str1.count(chr(i+97)) > 0:\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    \n    # Convert the string to lowercase\n    str1 = str1.lower()\n    \n    # Initialize a dictionary to store the count of each character\n    char_count = {}\n    \n    # Iterate through the string\n    for i in range(26):\n        char_count[chr(ord('a') + i)] = 0\n        \n    for char in str1:\n        char_count[char] += 1\n        \n    return char_count\n"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # convert the string to lowercase\n    str1 = str1.lower()\n\n    # initialize a dictionary to store the count of each character\n    char_count = {}\n\n    # iterate through each character in the string\n    for char in str1:\n        # if the character is a letter, add it to the dictionary with a count of 1\n        if char.isalpha():\n            if char in char_count:\n                char_count[char] += 1\n            else:\n                char_count[char] = 1\n\n    # initialize a variable to store the count of repeated characters\n    repeated_char_count = 0\n\n    # iterate through each character in the string\n    for char in str1:\n        # if the character is a letter, check if it is also at the same position in the English alphabet\n        if char.isalpha():\n            # if it is, check if it is the same as the character before it\n            if char.upper() == str1[str1.index(char)-1].upper():\n                # if it is, increment the count of repeated characters\n                repeated_char_count += 1\n\n    # return the total count of characters and the count of repeated characters\n    return len(str1), repeated_char_count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n\n    count = 0\n\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0 and A[i] ^ A[j] == A[i] ^ A[j-1]:\n                count += 1\n\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_even_pair(A):\n    # Initialize the count of even pairs to zero\n    even_pairs = 0\n\n    # Iterate through the list A and for each element x, check if x+1 is also in the list A and if so, xor the two numbers to check if the result is even\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] + A[j] % 2 == 0:\n                even_pairs += 1\n\n    return even_pairs"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n\n    count = 0\n\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_pair_count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] % 2 == 0:\n                even_pair_count += 1\n    return even_pair_count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0 and A[i] % 2 == 0 and A[j] % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n\n    # Convert n to binary representation\n    binary_n = bin(n)[2:]\n\n    # Initialize power of 2 and binary representation for comparison\n    power_of_2 = 1\n    binary_power_of_2 = '1'\n\n    # Compare binary representation of n and power of 2\n    while binary_n > binary_power_of_2:\n        binary_power_of_2 = str(power_of_2) + binary_power_of_2\n        power_of_2 *= 2\n\n    # Return power of 2\n    return power_of_2"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Find the smallest power of 2 greater than or equal to n\n    power = 1\n    while power < n:\n        power <<= 1\n\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # check if n is already a power of 2\n    if n & (n - 1) == 0:\n        return n\n    \n    # find the next power of 2\n    power = 1\n    while power < n:\n        power <<= 1\n    \n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Use binary search to find the smallest power of 2 greater than or equal to n\n    left, right = 0, n\n    while left < right: \n        mid = (left + right) // 2\n        if mid * mid >= n: \n            right = mid \n        else: \n            left = mid + 1\n    return 2 * left"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def next_power_of_2(n): \n    '''\n    This function takes an integer as input and returns the smallest power of 2 greater than or equal to n.\n    '''\n    return 2**(ceil(log2(n)))"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n\n    # Initialize the power of 2 to 1\n    power = 1\n\n    # Loop until the power of 2 is greater than or equal to n\n    while power < n:\n        # Increase the power of 2 by 1\n        power <<= 1\n\n    # Return the power of 2\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    power = 1\n    while power < n:\n        power <<= 1\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 0: \n        return 1\n    elif n == 1: \n        return 2\n    else: \n        # Find the largest power of 2 less than or equal to n\n        largest_power = 1\n        while largest_power < n: \n            largest_power *= 2\n        \n        # Find the next power of 2 greater than or equal to n\n        next_power = largest_power << 1\n        \n        return next_power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    power = 1\n    while power < n:\n        power <<= 1\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Calculate the next power of 2 greater than or equal to n\n    power = 1\n    while power < n:\n        power *= 2\n\n    # Return the result\n    return power"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency(a,x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n\n    count = 0\n    for i in a: \n        if i == x: \n            count += 1\n    \n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency(a, x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n\n    count = 0\n    for i in a: \n        if i == x: \n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i-1]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        if i in list1:\n            sum += i\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum_val = 0\n    for i in range(m, n+1):\n        sum_val += list1[i-1]\n    return sum_val"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total_sum = 0\n    for i in range(m, n+1):\n        total_sum += list1[i-1]\n    return total_sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    sum_range = 0\n    for i in range(m, n+1):\n        sum_range += list1[i]\n    return sum_range"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n\n    # Check if the indices are valid\n    if m > n:\n        return \"Error: m should be less than or equal to n.\"\n    if m < 0 or n >= len(list1):\n        return \"Error: m and n should be within the valid range of the list.\"\n\n    # Calculate the sum of the range\n    range_sum = sum(list1[m:n+1])\n\n    return range_sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum_value = 0\n    for i in range(m, n+1):\n        if i in list1:\n            sum_value += i\n    return sum_value"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])\n"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    total = 0\n    for i in range(m, n+1):\n        total += list1[i-m]\n    return total"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    circumference = 2*math.sqrt(5)*a\n    perimeter = circumference*5\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    s = (5*a)/4\n    return math.sqrt(s*(3*s - 1))"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # Calculate the hypotenuse of the right triangle that has the length of a side and the square root of 5\n    hypotenuse = math.sqrt(5) * a\n    # Calculate the perimeter of the pentagon using the formula: 5a + 5h = 12\n    perimeter = 5 * a + 5 * hypotenuse\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    \"\"\"\n    Write a function to count the number of occurance of the string'std' in a given string.\n    \"\"\"\n    count = 0\n    index = s.find('std')\n    while index!= -1:\n        count += 1\n        index = s.find('std', index+1)\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurance of the string'std' in a given string.\n    '''\n    count = 0\n    index = 0\n    while True:\n        index = s.find('std', index)\n        if index == -1:\n            break\n        count += 1\n        index += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurance of the string'std' in a given string.\n    '''\n    count = 0\n    index = s.find('std')\n    while index!= -1:\n        count += 1\n        index = s.find('std', index+3)\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    \"\"\"\n    Write a function to count the number of occurances of the string'std' in a given string.\n    \"\"\"\n    count = 0\n    index = s.find('std')\n    while index!= -1:\n        count += 1\n        index = s.find('std', index+1)\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurance of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] =='std':\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] =='std':\n            count += 1\n            i += 3\n        else:\n            i += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] =='std':\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    return s.count('std')"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurances of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    first_element = test_tuple[0]\n    data_type = type(first_element)\n    for element in test_tuple:\n        if data_type!= type(element):\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    # Check if the tuple is empty\n    if not test_tuple:\n        return \"Empty tuple\"\n\n    # Define a function to check the data type of an element\n    def check_type_of_element(element):\n        if isinstance(element, int) or isinstance(element, float) or isinstance(element, str):\n            return True\n        else:\n            return False\n\n    # Get the first element in the tuple\n    first_element = test_tuple[0]\n\n    # Check if all elements in the tuple have the same data type\n    if all(check_type_of_element(element) for element in test_tuple):\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    # get the data type of the first element\n    data_type = type(test_tuple[0])\n\n    # check if all elements in the tuple have the same data type\n    for item in test_tuple:\n        if type(item)!= data_type:\n            return False\n\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(set([type(i) for i in test_tuple])) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # initialize a variable to store the data type of the first element in the tuple\n    data_type = type(test_tuple[0])\n    # loop through all the elements in the tuple\n    for element in test_tuple:\n        # if the data type of any element is different from the initial data type, return False\n        if type(element)!= data_type:\n            return False\n    # if all elements have the same data type, return True\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    first_element = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element)!= first_element:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    # Initialize a variable to store the data type of the first element\n    data_type = type(test_tuple[0])\n\n    # Iterate through the tuple and check if all elements have the same data type as the first element\n    for item in test_tuple:\n        if type(item)!= data_type:\n            # If any element does not have the same data type, return False\n            return False\n\n    # If all elements have the same data type as the first element, return True\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(set(map(type, test_tuple))) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n    \n    # Initialize a counter for each element in the array\n    counter = [0]*n\n    \n    # Initialize a variable to keep track of the current majority element\n    majority = None\n    \n    # Loop through the array and update the counter for each element\n    for i in range(n):\n        counter[arr[i]] += 1\n        \n    # Check if the majority element has been found\n    for i in range(n):\n        if counter[i] > n//2:\n            majority = i\n            break\n        \n    # If the majority element has been found, compare it with the input element\n    if majority!= None and arr[majority] == x:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n    return count > n//2"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n            if count > n // 2:\n                return True\n        else:\n            count = 0\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n    \n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n    \n    return count > n // 2"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n\n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n\n    # Initialize variables\n    count = 0\n    current_count = 0\n    prev_element = None\n\n    # Iterate through the array\n    for element in arr:\n        # Check if the current element is equal to the target element\n        if element == x:\n            current_count += 1\n        # Check if the current element is less than the target element\n        elif element < x:\n            current_count -= 1\n            # If the current element is less than the previous element and the count is less than n/2, update the count\n            if element < prev_element and current_count < n/2:\n                current_count += 1\n        # If the current element is greater than the target element, update the count\n        else:\n            current_count += 1\n        prev_element = element\n\n    # Check if the count is greater than n/2\n    if current_count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        if n & 1:\n            count += 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0: \n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n!= 0:\n        if n & 1:\n            count += 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n!= 0:\n        if n % 2 == 1:\n            count += 1\n        n = n >> 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Set_Bits(n): \n    count = 0\n    while n > 0: \n        count += n & 1 # check the least significant bit of n\n        n = n >> 1 # move the number to the right by one bit\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    This function takes a string as input and returns a new string with all the odd index values of the input string removed.\n    \"\"\"\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 1:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    # convert string to list to iterate over each character\n    lst = list(str)\n    # loop over each character in the string\n    for i in range(len(lst)):\n        # check if the index is odd\n        if i % 2!= 0:\n            # if odd, remove the character from the list\n            lst.pop(i)\n    # convert the list back to a string and return it\n    return ''.join(lst)"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = ''\n    for char in str:\n        if char.isalnum():  # check if character is alphanumeric\n            index = ord(char) - 65  # convert character to ASCII code and subtract 65 (A = 65) to get index\n            if index % 2 == 1:  # check if index is odd\n                result += char  # add character to result if it's odd\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = ''\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    odd_values = []\n    for i in range(len(str)):\n        if i % 2 == 1:\n            odd_values.append(str[i])\n    return ''.join(odd_values)"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = ''\n    for i, char in enumerate(str):\n        if i % 2!= 0:\n            result += char\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    # creating a list of characters from the string\n    chars = list(str)\n    # creating an empty string to store the final string\n    final_str = \"\"\n    # iterating over the list of characters\n    for i in range(len(chars)):\n        # if the index value of the character is odd, appending the character to the final string\n        if i % 2!= 0:\n            final_str += chars[i]\n    # returning the final string\n    return final_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    # convert string to list of characters\n    lst = list(str)\n    # initialize new string variable to store the new string\n    new_str = \"\"\n    # loop through the list of characters\n    for char in lst:\n        # check if the index of the character is odd\n        if lst.index(char) % 2!= 0:\n            # add the character to the new string\n            new_str += char\n    # return the new string\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    new_str = ''\n    for i in range(len(str)):\n        if i % 2 == 1:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_values_string(string):\n    \"\"\"\n    This function takes a string as input and removes the characters which have odd index values.\n    \"\"\"\n    # Split the string into a list of characters\n    chars = list(string)\n    # Initialize an empty list to store the result\n    result = []\n    # Iterate over the characters and append only the even-indexed characters to the result list\n    for i in range(0, len(chars), 2):\n        result.append(chars[i])\n    # Return the result string\n    return ''.join(result)"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_of_three(a, b, c): \n    '''\n    This function will find the minimum of three numbers.\n    '''\n    if a < b: \n        if a < c: \n            return a \n        else: \n            return c \n    else: \n        if b < c: \n            return b \n        else: \n            return c "
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_of_three(a, b, c):\n    '''\n    This function finds the minimum of three numbers.\n    '''\n    return min(a, b, c)"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    else:\n        if b < c:\n            return b\n        else:\n            return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_of_three(a,b,c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    else:\n        if b < c:\n            return b\n        else:\n            return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_of_three(a, b, c):\n    '''\n    This function takes three numbers as input and returns their minimum.\n    '''\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    else:\n        if b < c:\n            return b\n        else:\n            return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c: \n        return a \n    elif b < a and b < c: \n        return b \n    else: \n        return c "
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Initialize a variable to store the count of unset bits\n    unset_bits = 0\n\n    # Iterate over the range of bits from l to r\n    for i in range(l, r+1):\n        # Check if the i-th bit is set or not\n        if n & (1 << i):\n            unset_bits += 1\n\n    # Check if all the bits are unset or not\n    if unset_bits == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    # Initialize all the bits to 0\n    bits = [0] * (r - l + 1)\n    # Iterate through the range and set the corresponding bits to 1\n    for i in range(l, r + 1):\n        bits[i - l] = 1\n    # Check whether all the bits are 1 or not\n    all_ones = True\n    for bit in bits:\n        if bit == 0:\n            all_ones = False\n            break\n    # Return the result\n    return all_ones"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Write a python function to check whether all the bits are unset in the given range or not.\n    \"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return True\n    if l == 0 and r == 1:\n        return True\n    if r == 0:\n        return all_Bits_Set_In_The_Given_Range(n >> 1, l + (n >> 1), r)\n    return all_Bits_Set_In_The_Given_Range(n >> 1, l, r - 1)"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    This function takes three parameters - n which is the integer which is to be checked, l and r which are the lower and upper limits of the range. \n    It returns True if all the bits are unset in the given range else False.\n    \"\"\"\n\n    # initialize a boolean variable to True\n    is_set = True\n\n    # loop through all the bits of n from l to r\n    for i in range(l, r + 1):\n        # if the bit is not set then set is_set to False\n        if not (n & (1 << i)):\n            is_set = False\n\n    # return the value of is_set\n    return is_set"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Write a python function to check whether all the bits are unset in the given range or not.\n    \"\"\"\n    # Convert the input range into a list of bits\n    bits = [int(x) for x in bin(l)[2:]] + [int(x) for x in bin(r)[2:]]\n\n    # Reverse the bits list\n    bits = bits[::-1]\n\n    # Count the number of unset bits\n    unset_bits = sum([bin(x).count('0') for x in bits])\n\n    # Check whether all the bits are unset in the given range\n    if unset_bits == 32:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    count = 0\n    for i in range(l, r + 1):\n        count += bin(i).count('1')\n    if count == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Write a python function to check whether all the bits are unset in the given range or not.\n    \"\"\"\n    # initialize variables\n    is_all_bits_set = True\n\n    # iterate through the bits from l to r\n    for i in range(l, r + 1):\n        # check if the i-th bit is set\n        if n & (1 << i) == 0:\n            # if not, set is_all_bits_set to False and break the loop\n            is_all_bits_set = False\n            break\n\n    # return the value of is_all_bits_set\n    return is_all_bits_set"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    This function takes three integers n, l and r as input and returns True if all the bits are set in the given range, and False otherwise.\n\n    Example:\n    n = 7\n    l = 3\n    r = 6\n    Output: True\n\n    n = 7\n    l = 1\n    r = 3\n    Output: False\n    \"\"\"\n\n    # Convert the given range l to binary string\n    l = bin(l)[2:]\n\n    # Convert the given range r to binary string\n    r = bin(r)[2:]\n\n    # Check if the length of l and r is equal or greater than n\n    if len(l) > n or len(r) > n:\n        return False\n\n    # Convert the given range n to binary string\n    n = bin(n)[2:]\n\n    # Concatenate l and r with zeros until their length is equal to n\n    if len(l) < n:\n        l = l.zfill(n)\n    if len(r) < n:\n        r = r.zfill(n)\n\n    # Check if all the bits are set in the given range\n    if l == r:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    count = 0\n    for i in range(l, r+1):\n        count += bin(n & i).count('1')\n    if count == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    This function will return True if all the bits are unset in the given range, else False.\n    '''\n    if n == 0:\n        # If n is 0, then all the bits are set in that range.\n        return True\n    elif l & (1 << n) - 1 == 0 and r & (1 << n) - 1 == 0:\n        # If l and r have only 0s in the nth bit and if n is greater than 0, then all the bits are set in that range.\n        return all_Bits_Set_In_The_Given_Range(n - 1, l, r)\n    else:\n        # If there is at least one bit set in the nth bit, then we can't determine whether all the bits are set in that range or not.\n        return False"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Initialize two pointers, one at the beginning and one at the end of the array\n    start = 0\n    end = n - 1\n\n    # Iterate through the array until the pointers meet in the middle\n    while start < end:\n        # Move the start pointer to the right until it finds a positive element\n        while arr[start] < 0:\n            start += 1\n\n        # Move the end pointer to the left until it finds a negative element\n        while arr[end] > 0:\n            end -= 1\n\n        # If the start and end pointers have not met in the middle of the array, swap them\n        if start < end:\n            arr[start], arr[end] = arr[end], arr[start]\n\n    # Print the re-arranged array\n    print(\"Re-arranged array:\", arr)"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n\n    neg = []\n    pos = []\n    zero = []\n\n    for i in range(len(arr)):\n        if arr[i] < 0:\n            neg.append(arr[i])\n        elif arr[i] > 0:\n            pos.append(arr[i])\n        else:\n            zero.append(arr[i])\n\n    neg.sort(reverse=True)\n    pos.sort()\n\n    result = neg + pos + zero\n\n    return result"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    # Initialize three variables to keep track of the positions of negative, positive, and zero elements\n    negative_index = 0\n    positive_index = n\n    zero_index = n + n\n    \n    # Iterate through the array\n    for i in range(n):\n        # If the current element is negative, swap it with the element at the negative index and increment the negative index\n        if arr[i] < 0:\n            arr[i], arr[negative_index] = arr[negative_index], arr[i]\n            negative_index += 1\n        # If the current element is positive, swap it with the element at the positive index and increment the positive index\n        elif arr[i] > 0:\n            arr[i], arr[positive_index] = arr[positive_index], arr[i]\n            positive_index += 1\n        # If the current element is zero, swap it with the element at the zero index and increment the zero index\n        else:\n            arr[i], arr[zero_index] = arr[zero_index], arr[i]\n            zero_index += 1\n    \n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    neg = []\n    pos = []\n    for num in arr:\n        if num < 0:\n            neg.append(num)\n        else:\n            pos.append(num)\n    neg.sort()\n    pos.sort()\n    arr = neg + pos\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # initialize two pointers, one for positive and one for negative elements\n    i, j = 0, 0\n    # traverse the array from the second element (index 1)\n    while j < n:\n        # if the element at index j is negative, move it to the first position of the array\n        if arr[j] < 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n        # move the pointer for negative elements to the next position\n        j += 1\n    # return the modified array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n\n    # First, sort the array in ascending order\n    arr.sort()\n\n    # Then, separate the positive and negative elements\n    pos = []\n    neg = []\n    for i in arr:\n        if i >= 0:\n            pos.append(i)\n        else:\n            neg.append(i)\n\n    # Finally, re-arrange the array\n    arr = neg + pos\n\n    # Return the re-arranged array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    count = [0] * 10  # initialize count array to store count of each digit\n    neg_count = 0  # initialize count of negative digits\n\n    for num in arr[:n]:\n        # count the number of digits in the number\n        if num < 0:\n            count[abs(num) % 10] -= 1\n        else:\n            count[num % 10] += 1\n\n            # if the number has more negative digits than positive digits, swap the numbers\n            if neg_count > 0 and neg_count < count[num % 10]:\n                arr[n-1], arr[count[num % 10]] = arr[count[num % 10]], arr[n-1]\n                n -= 1\n                neg_count -= 1\n                count[num % 10] = neg_count\n\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    # sort the array in ascending order\n    arr.sort()\n    \n    # initialize three pointers for positive, negative and zero elements\n    pos_ptr, neg_ptr, zero_ptr = 0, n, n+1\n    \n    # iterate over the sorted array\n    for i in range(n):\n        # if the current element is positive, move the pointer to the next position\n        if arr[i] > 0:\n            pos_ptr += 1\n            arr[i], arr[pos_ptr] = arr[pos_ptr], arr[i]\n        # if the current element is negative, move the pointer to the next position\n        elif arr[i] < 0:\n            neg_ptr += 1\n            arr[i], arr[neg_ptr] = arr[neg_ptr], arr[i]\n        # if the current element is zero, move the pointer to the next position\n        else:\n            zero_ptr += 1\n            arr[i], arr[zero_ptr] = arr[zero_ptr], arr[i]\n    \n    # return the modified array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    negative = [x for x in arr[:n] if x < 0]\n    positive = [x for x in arr[:n] if x >= 0]\n    sorted_negative = sorted(negative)\n    sorted_positive = sorted(positive)\n    result = sorted_negative + sorted_positive\n    return result"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    neg_count = 0\n    pos_count = 0\n    for num in arr[:n]:\n        if num < 0:\n            neg_count += 1\n        else:\n            pos_count += 1\n    if neg_count < pos_count:\n        for num in arr[:n]:\n            if num < 0:\n                arr.append(num)\n            else:\n                arr.insert(0, num)\n    else:\n        for num in arr[:n]:\n            if num < 0:\n                arr.insert(0, num)\n            else:\n                arr.append(num)\n    return arr"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_blank(str1,char):\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ', char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Use a max-heap to find the n largest items in the list\n    heap = []\n    for num in list1:\n        heapq.heappush(heap,num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    # Convert the heap back to a list and return it\n    return [heapq.heappop(heap) for _ in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # convert the list to a max heap and return the top n elements\n    max_heap = []\n    for i in list1:\n        heapq.heappush(max_heap, i)\n    return [heapq.heappop(max_heap) for i in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # sort the list in descending order\n    sorted_list = sorted(list1, reverse=True)\n    # return the first n items of the sorted list\n    return sorted_list[:n]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    # Use a heap to keep track of the n largest items\n    max_heap = []\n    for i in range(n):\n        # Add the i-th largest item to the heap\n        heapq.heappush(max_heap, list1[i])\n    # Extract the n largest items from the heap and append them to a new list\n    result = []\n    for i in range(n):\n        # Extract the i-th largest item from the heap\n        item = heapq.heappop(max_heap)\n        # Add it to the result list\n        result.append(item)\n    return result"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Sort the list in descending order\n    list1.sort(reverse=True)\n    # Return the top n elements of the list\n    return list1[:n]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef larg_nnum(lst, n):\n    # Use a min heap to keep track of the n largest items\n    heap = []\n    for item in lst:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            # Remove the smallest item from the heap if we have exceeded n\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if n>len(list1):\n        return list1\n    else:\n        return heapq.nlargest(n, list1)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Create a min heap of size n\n    min_heap = []\n    for _ in range(n):\n        # Add the first element of the list to the min heap\n        heapq.heappush(min_heap, list1[0])\n        # Remove the first element of the list from the list\n        list1.remove(list1[0])\n    # Add the remaining elements of the list to the min heap\n    heapq.heappush(min_heap, *list1)\n    # Return the contents of the min heap\n    return [heapq.heappop(min_heap) for _ in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # create a min heap of size n and fill it with the first n elements of the list\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, list1[i])\n    # maintain the heap until the last element of the list is processed\n    for i in range(n, len(list1)):\n        # if the current element is greater than the smallest element in the heap, pop it and push the current element\n        if list1[i] > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, list1[i])\n    # return the heap as the result\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    \"\"\"\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    if n > len(list1):\n        return []\n    \n    heap = []\n    for num in list1:\n        heapq.heappush(heap, num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    \n    return heap"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    \n    lateral_surface_area = math.pi*r**2*(h/2)**2\n    \n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # finding the lateral surface area\n    lateral_area = 2*math.pi*r*h\n    return lateral_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r, h):\n    \"\"\"\n    Write a function to find the lateral surface area of a cylinder.\n    \"\"\"\n    # Calculate the lateral surface area of the cylinder\n    lateral_surface_area = 2 * (r * h)\n    \n    # Return the lateral surface area\n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    \n    return 2*3.14159*r*r + 2*3.14159*r*h + 2*3.14159*h*h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef lateralsuface_cylinder(r, h):\n    \"\"\"\n    This function calculates the lateral surface area of a cylinder.\n\n    Parameters:\n        r (float): radius of the cylinder.\n        h (float): height of the cylinder.\n\n    Returns:\n        float: lateral surface area of the cylinder.\n    \"\"\"\n    return math.pi * r**2 * h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # calculate the base area using the formula A = pi*r^2\n    A = math.pi*r**2\n    \n    # calculate the lateral surface area by multiplying the base area with the height\n    lateral_area = A*h\n    \n    # return the lateral surface area\n    return lateral_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n\n    # Calculate the lateral surface area of the cylinder\n    lateral_surface_area = 2 * (r * h)\n\n    # Return the lateral surface area\n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Calculate the lateral surface area of the cylinder\n    lateral_surface_area = 2 * r * h\n    \n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lateralsurface_cylinder(r, h):\n    \"\"\"\n    Find the lateral surface area of a cylinder.\n    \"\"\"\n    area = 2 * r * h\n    return area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Calculate the lateral surface area of a cylinder.\n\n    Parameters:\n    r (float): The radius of the cylinder.\n    h (float): The height of the cylinder.\n\n    Returns:\n    float: The lateral surface area of the cylinder.\n    '''\n\n    # Calculate the surface area of the cylinder\n    surface_area = 2 * 3.14 * r * r + 2 * 3.14 * r * h + 2 * 3.14 * h * h\n\n    # Return the surface area\n    return surface_area"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l ** 3  # find the volume of the cube\n    return volume  # return the volume of the cube\n"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l ** 3\n    return volume"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3 # The cube volume is equal to the square of the side length"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize an empty list to store the even bits\n    even_bits = []\n\n    # Iterate through each bit of the input number\n    for i in range(32):\n        # Check if the current bit is even\n        if (n & (1 << i))!= 0:\n            # If it is, add it to the list of even bits\n            even_bits.append(i)\n\n    # Convert the list of even bits to a binary string\n    binary_str = ''.join(str(b) for b in even_bits)\n\n    # Convert the binary string to a decimal number\n    decimal_num = int(binary_str, 2)\n\n    # Return the even bit set number\n    return decimal_num"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize an empty list to store the even bits of the given number\n    even_bits = []\n    \n    # Loop through each bit of the number and check if it's even\n    for i in range(len(bin(n)) - 2, -1, -1):\n        # Check if the current bit is even\n        if bin(n)[i] == '0':\n            # If the current bit is even, add it to the even_bits list\n            even_bits.append(bin(n)[i])\n    \n    # Convert the list of even bits to an integer and return it\n    return int(''.join(even_bits), 2)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # initialize a variable to store the modified number\n    modified_number = 0\n    \n    # loop through each bit of the given number\n    for i in range(32):\n        # check if the current bit is even\n        if n & 1 == 0:\n            # if even, set the corresponding bit in the modified number to 1\n            modified_number |= 1 << i\n        # shift the number to the right by 1 bit\n        n = n >> 1\n    \n    # return the modified number\n    return modified_number"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_bit_set_number(n):\n    '''\n    This function sets all even bits of a given number.\n    '''\n    # Initialize a variable to store the result\n    result = 0\n    # Loop through each bit in the number and set the corresponding even bit\n    for i in range(32):\n        if (n >> i) & 1 == 0:\n            result |= 1 << i\n    # Return the result\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    # Initialize an empty list to store the even bits\n    even_bits = []\n    # Loop through each bit in the binary representation of n\n    for bit in bin(n)[2:]:\n        # If the bit is even, append it to the list\n        if int(bit) % 2 == 0:\n            even_bits.append(int(bit))\n    # Convert the list of even bits back to an integer and return it\n    return int(''.join(map(str, even_bits)), 2)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    # Initialize a variable to store the result\n    result = 0\n    # Loop through each bit of the number\n    for i in range(32):\n        # If the current bit is even, set it to 1 in the result\n        if n & (1 << i):\n            result |= (1 << i)\n    # Return the result\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    count = 0\n    while n > 0:\n        if n & 1 == 0:\n            n = n - 1\n        else:\n            n = n ^ 1 << count\n        count += 1\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    # Initialize a variable to store the even bits of n\n    even_bits = 0\n    \n    # Iterate over the bits of n and set the corresponding even bit to 1\n    while n:\n        # Get the last bit of n\n        bit = n & 1\n        \n        # Shift n to the left by 1 bit and set the last bit to 0\n        n = n >> 1\n        \n        # Set the corresponding even bit to 1\n        even_bits |= bit << 1\n    \n    # Return the even bits of n\n    return even_bits"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n\n    # Initialize a variable to store the result\n    result = 0\n    \n    # Iterate through the bits of the number\n    for i in range(32):\n        \n        # If the i-th bit is even, set the corresponding bit in the result variable\n        if (n & (1 << i))!= 0:\n            result |= (1 << i)\n            \n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Convert the number to binary string\n    binary_number = bin(n)[2:]\n    \n    # Iterate through each bit of the binary string\n    for i in range(len(binary_number)):\n        if binary_number[i] == '0':\n            binary_number = binary_number[:i] + '1' + binary_number[i+1:]\n    \n    # Convert the binary string back to an integer\n    result = int(binary_number, 2)\n    \n    return result"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = {}\n    for item in test_list:\n        count_dict[item] = count_dict.get(item, 0) + 1\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # convert the list of tuples into a set to remove duplicates\n    unique_set = set(test_list)\n    # use Counter function from the collections module to count the occurrences of each unique tuple\n    occurrences = Counter(unique_set)\n    # convert the Counter object into a dictionary with the unique tuples as keys and their corresponding occurrences as values\n    result_dict = dict(occurrences.items())\n    return result_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counts = Counter(test_list)\n    return counts"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    \n    # Create a dictionary to store the counts of each tuple\n    count_dict = {}\n    \n    # Loop through the list of tuples\n    for tup in test_list:\n        \n        # If the tuple is not already in the dictionary, add it and set its count to 1\n        if tup not in count_dict:\n            count_dict[tup] = 1\n        \n        # If the tuple is already in the dictionary, increment its count\n        else:\n            count_dict[tup] += 1\n    \n    # Return the dictionary with the counts of each unique tuple\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create a dictionary to store the counts of each tuple\n    count_dict = {}\n\n    # Loop through the list of tuples\n    for tup in test_list:\n        # Check if the current tuple is already in the dictionary\n        if tup in count_dict:\n            # Increment the count of the tuple by 1\n            count_dict[tup] += 1\n        else:\n            # Add the tuple to the dictionary with a count of 1\n            count_dict[tup] = 1\n\n    # Return the dictionary of counts\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = Counter(test_list)\n    return dict(count_dict)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    unique_tuples = set(test_list)\n    freq_dict = {}\n    for tup in unique_tuples:\n        freq_dict[tup] = test_list.count(tup)\n    return freq_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create a Counter object to count the occurrences of each tuple in the list\n    counter = Counter(test_list)\n    \n    # Return the dictionary of counts\n    return counter.most_common()"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create a Counter object to count the occurrences of each tuple\n    count_dict = Counter(test_list)\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Use a Counter object to count the occurrences of each tuple in the list\n    counter = Counter(test_list)\n    # Return the dictionary of counts\n    return dict(counter)"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    # create a set to store the non-empty substrings\n    substrings = set() \n    # iterate over all possible substrings of the string\n    for i in range(len(str) + 1): \n        for j in range(i, len(str) + 1): \n            # if the substring is not empty, add it to the set\n            if j - i > 0: \n                substrings.add(str[i:j]) \n    return len(substrings)"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            substr = str[i:j]\n            if substr!= '':\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n\n    # Initialize a counter variable\n    count = 0\n\n    # Initialize a list to store the lengths of the substrings\n    substrings = []\n\n    # Loop through the string\n    for i in range(len(str)):\n\n        # Initialize a variable to store the current substring\n        current_substring = \"\"\n\n        # Add the current character to the substring\n        current_substring += str[i]\n\n        # Check if the substring is non-empty\n        if current_substring:\n\n            # Append the length of the substring to the list\n            substrings.append(len(current_substring))\n\n            # Initialize a variable to store the starting index of the next substring\n            start_index = i + 1\n\n            # Loop through the remaining characters in the string\n            while start_index < len(str):\n\n                # Add the next character to the substring\n                current_substring += str[start_index]\n\n                # Check if the substring is non-empty\n                if current_substring:\n\n                    # Append the length of the substring to the list\n                    substrings.append(len(current_substring))\n\n                # Move the starting index to the next character\n                start_index += 1\n\n    # Initialize a counter variable to keep track of the length of the longest substring\n    longest_substring_length = 0\n\n    # Loop through the list of substrings and find the length of the longest one\n    for substring in substrings:\n        if substring > longest_substring_length:\n            longest_substring_length = substring\n\n    # Return the number of substrings divided by the length of the longest substring\n    return len(substrings) / longest_substring_length"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_of_substrings(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_of_substrings(str):\n    \"\"\"\n    This function takes a string as input and returns the number of non-empty substrings in it.\n    \"\"\"\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if str[i:j]!= \"\":\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if str[i:j]!= \"\":\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_of_substrings(str): \n    count = 0\n    for i in range(len(str) + 1):\n        for j in range(len(str) + 1):\n            if i == j:\n                continue\n            if str[i] == str[j]:\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n\n    # Helper function to check if a number is valid for the given constraints\n    def is_valid(num):\n        if num < 2 * m or num > m:\n            return False\n        for i in range(1, n):\n            if num - i >= 2 * m and num - i < m:\n                return False\n        return True\n\n    # Helper function to count the number of sequences of length n in the range [start, end)\n    def count_sequences(start, end):\n        count = 0\n        for i in range(start, end):\n            if is_valid(i):\n                count += 1\n        return count\n\n    # Count the number of valid sequences\n    valid_sequences = count_sequences(2 * m, m)\n    invalid_sequences = count_sequences(2 * m + 1, n + 1)\n    return valid_sequences - invalid_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    if n == 1:\n        return m\n    if m == 1:\n        return 0\n\n    count = 0\n    prev_element = 1\n    current_element = 2\n\n    while current_element <= n:\n        if current_element <= m:\n            count += 1\n        prev_element = current_element\n        current_element = prev_element + current_element\n\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    count = 0\n    for i in range(2, m):\n        if i >= 2*i-2 and i <= m:\n            count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    count = 0\n    for i in range(1, m + 1):\n        if i >= 2 * i:\n            count += 1\n    count *= n\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m, n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n\n    total_sequences = 0\n\n    for i in range(n):\n        prev_two = 1\n\n        for j in range(i + 1, n + 1):\n            if j >= m and (j - prev_two) % 2 == 0:\n                total_sequences += 1\n            prev_two = j\n\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    # Initialize variables\n    count = 0\n    current_sequence = [0]\n\n    # Generate all possible sequences of length n\n    for i in range(n):\n        current_sequence.append(current_sequence[i] + 1)\n        while current_sequence[i] >= 2 * current_sequence[i - 1] and current_sequence[i] <= m:\n            current_sequence.append(current_sequence[i] + 1)\n        count += len(current_sequence)\n        current_sequence.pop()\n\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n\n    # Initialize the count variable to 0\n    count = 0\n\n    # Initialize the previous element variable to None\n    previous_element = None\n\n    # Initialize the list to store all possible sequences\n    sequences = []\n\n    # Iterate through all possible combinations of integers\n    for i in range(m + 1):\n\n        # Calculate the number of elements in the sequence\n        num_elements = n // 2 + 1\n\n        # Check if the current element is greater than or equal to twice the previous element but less than or equal to m\n        if i >= previous_element * 2 and i <= m:\n\n            # Calculate the sequence\n            sequence = [i] * num_elements\n\n            # Add the sequence to the list of possible sequences\n            sequences.append(sequence)\n\n            # Update the previous element variable\n            previous_element = i\n\n    # Return the count of possible sequences\n    return len(sequences)"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m, n):\n    # Calculate the total number of sequences by using dynamic programming\n    dp = [[0 for _ in range(m + 1)] for _ in range(n + 1)]\n\n    # Initialize the first row and column\n    for i in range(1, m + 1):\n        dp[1][i] = 1\n\n    for i in range(1, n + 1):\n        dp[i][1] = 1\n\n    for i in range(2, n + 1):\n        for j in range(2, m + 1):\n            if j % 2 == 0:\n                dp[i][j] = dp[i - 1][j - 1] + dp[i][j - 2]\n            else:\n                dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j]\n\n    return dp[n][m]"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    count = 0\n    for i in range(n):\n        count += m//(2*i+1)\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    count = 0\n    for i in range(m,2,-1):\n        if i >= 2*m:\n            count += 1\n        else:\n            break\n    for i in range(n):\n        count *= 2\n    return count"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    if len(list1)!= len(list2):\n        print(\"The two lists must have the same length.\")\n        return\n    else:\n        for i in range(len(list1)-1,-1,-1):\n            list1[i] = list2[i]\n        return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    last_index = len(list1)-1\n    list1[last_index] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.pop()\n    list1.extend(list2)\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # Get the length of the first list\n    n = len(list1)\n    # Replace the last element of the first list with the elements of the second list\n    list1[n-1:n] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    list1[-1:] = list2\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.pop()\n    for i in range(len(list2)):\n        list1.append(list2[i])"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1) < len(list2):\n        raise ValueError(\"The first list should have more elements than the second list.\")\n    if len(list2) > len(list1):\n        raise ValueError(\"The second list should have more elements than the first list.\")\n    for i in range(len(list2)-1, -1, -1):\n        list1.append(list2[i])\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    This function takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    list1.pop()\n    list1.extend(list2)\n    return list1"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    This function takes a string as input and returns the total number of characters in the string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_characters(string):\n    count = 0\n    for char in string:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math  \n\ndef next_Perfect_Square(N): \n    '''\n    This function takes a number N as input and returns the next perfect square greater than N. \n    If N is already a perfect square, it returns the next perfect square greater than twice the square root of N. \n    '''\n    # Calculating the square root of N\n    sqrtN = math.sqrt(N)\n    \n    # Checking if N is already a perfect square\n    if sqrtN == int(sqrtN) ** 2:\n        # Finding the next perfect square greater than twice the square root of N\n        next_square = int(N ** 0.5) + 1\n        if (next_square ** 2) > N:\n            next_square += 1\n        return next_square\n    \n    # If N is not a perfect square, the function returns the next perfect square greater than twice the square root of N\n    else:\n        next_square = int(sqrtN) + 1\n        if (next_square ** 2) > N:\n            next_square += 1\n        return next_square"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    low = N\n    high = N\n    while low <= high:\n        mid = (low + high) // 2\n        if mid * mid < N:\n            high = mid - 1\n        elif mid * mid > N:\n            low = mid + 1\n        else:\n            return mid + 1\n    return None"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    count = 0\n    num = N\n\n    while True:\n        if num**2 > N:\n            count += 1\n            num += 1\n        else:\n            return (int(math.sqrt(num)) + 1) * (int(math.sqrt(num)) + 1) ** 2, count"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n\n    # Check if the given number is a perfect square\n    if math.isqrt(N) * math.isqrt(N) == N:\n        return N * 2\n\n    # Find the largest perfect square less than N\n    i = 1\n    while True:\n        if math.isqrt(i) * math.isqrt(i) > N:\n            break\n        i += 1\n\n    # Find the smallest perfect square greater than N\n    j = i - 1\n    while True:\n        if math.isqrt(j) * math.isqrt(j) < N:\n            break\n        j -= 1\n\n    # Find the next perfect square between i and j\n    next_square = (j + i) // 2\n\n    # Check if the next perfect square is greater than N\n    if next_square > N:\n        return next_square\n\n    # Check if the next perfect square is equal to N\n    else:\n        return N + (next_square - N)\n"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Calculate the square root of the given number\n    root = math.sqrt(N)\n    \n    # Convert the root to an integer and take the next integer\n    next_root = int(root + 1)\n    \n    # Check if the next root is even or not\n    if next_root % 2 == 0:\n        # If it is even, then we need to find the next odd number greater than the square root\n        next_root += 1\n    \n    # Calculate the next perfect square by multiplying the root with itself\n    next_sqrt = root * root\n    \n    # Return the next perfect square\n    return next_sqrt"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Function to check if a number is a perfect square\n    def is_perfect_square(num):\n        return int(math.sqrt(num)) ** 2 == num\n\n    # Find the square root of the given number\n    sqrt_N = int(math.sqrt(N))\n    \n    # If the square root is already a perfect square, return the next one\n    if is_perfect_square(sqrt_N ** 2):\n        return sqrt_N ** 2\n\n    # If the square root is not a perfect square, find the next smallest perfect square\n    next_sqrt_N = sqrt_N - 1\n    while not is_perfect_square(next_sqrt_N ** 2):\n        next_sqrt_N -= 1\n    \n    # Return the next perfect square\n    return next_sqrt_N ** 2 + 1"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    sqrt_N = math.sqrt(N)\n    num_bits = math.ceil(math.log2(sqrt_N))\n    num_bits += 1\n    perfect_square = 2**(2*num_bits)\n    while perfect_square < N:\n        perfect_square *= 2\n    return perfect_square"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    num = N + 1\n    while True:\n        num = math.ceil(num/2)\n        if num*num == N:\n            return num\n        if num*num > N:\n            return num-1"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n\n    def is_perfect_square(num):\n        \"\"\"\n        Helper function to check if a number is a perfect square.\n        \"\"\"\n        return int(math.sqrt(num))**2 == num\n\n    # find the square root of N\n    sqrt_N = int(math.sqrt(N))\n\n    # iterate until we find a perfect square greater than sqrt_N\n    while not is_perfect_square(sqrt_N + 1):\n        sqrt_N += 1\n\n    # calculate the next perfect square\n    next_sqrt_N = sqrt_N + 1\n\n    # check if the next perfect square is greater than sqrt_N\n    if next_sqrt_N > sqrt_N:\n        return next_sqrt_N - 1\n    else:\n        return next_sqrt_N"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    sqrtN = math.sqrt(N)\n    result = sqrtN * 2 + 1\n    integer_part = math.floor(result)\n    \n    if integer_part % 2 == 0:\n        result += 1\n    else:\n        result += 0\n    \n    next_result = sqrtN * integer_part + 1\n    return next_result"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    \n    # If the array has only one element, it is a bitonic sequence\n    if len(arr) == 1:\n        return arr[0]\n    \n    # Initialize the maximum sum as the first element of the array\n    max_sum_1 = arr[0]\n    \n    # Initialize the maximum sum as the second element of the array\n    max_sum_2 = arr[1]\n    \n    # Initialize the first element of the maximum sum array\n    max_sum_array = [max_sum_1, max_sum_2]\n    \n    # Loop through the rest of the array\n    for i in range(2, len(arr)):\n        \n        # If the current element is greater than the previous element, update the maximum sum\n        if arr[i] > max_sum_1:\n            max_sum_array.append(max_sum_1)\n            max_sum_1 = arr[i]\n        else:\n            max_sum_array.append(max_sum_2)\n            max_sum_2 = arr[i]\n            \n    # Return the maximum sum in the maximum sum array\n    return max(max_sum_array)"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    max_ending_here = arr[0]\n    max_so_far = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i-1]:\n            # If the next element is greater than the previous element, then the current element is a peak and we need to update the maximum sum ending here\n            max_ending_here = max(max_ending_here + arr[i], arr[i])\n        else:\n            # If the next element is less than or equal to the previous element, then the current element is a trough and we need to update the maximum sum ending here\n            max_ending_here = max(max_ending_here, arr[i])\n        # Update the maximum sum so far\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, \n    where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    n = len(arr)\n    if n < 3:\n        return sum(arr)\n\n    left = [0] * n\n    right = [0] * n\n    max_left = max_right = float('-inf')\n\n    for i in range(n):\n        left[i] = float('-inf')\n        right[i] = float('-inf')\n        if i < n - 1:\n            left[i] = arr[i + 1] - arr[i]\n        if i > 0:\n            right[i] = arr[i] - arr[i - 1]\n\n        if left[i] > max_left:\n            max_left = left[i]\n        if right[i] > max_right:\n            max_right = right[i]\n\n    return max(max_left + max_right, sum(arr))"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # Initialize variables\n    n = len(arr)\n    max_sum_decreasing = float('-inf')\n    max_sum_increasing = float('-inf')\n\n    # Loop through the array\n    for i in range(n):\n        if i % 2 == 0:\n            max_sum_increasing = max(max_sum_increasing + arr[i], arr[i])\n        else:\n            max_sum_decreasing = max(max_sum_decreasing + arr[i], arr[i])\n\n    return max(max_sum_decreasing, max_sum_increasing)"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    if n < 3:\n        return 0\n    \n    # Check if all elements are increasing or decreasing\n    if arr[1] < arr[0]:\n        # If increasing, find the largest increasing subsequence\n        largest_sum = max(arr[0], arr[1])\n        for i in range(2, n):\n            largest_sum = max(largest_sum + arr[i], arr[i])\n        return largest_sum\n    \n    # If decreasing, find the largest decreasing subsequence\n    largest_sum = max(arr[0], arr[1])\n    for i in range(2, n):\n        largest_sum = max(largest_sum - arr[i], arr[i])\n    return largest_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n\n    # Traverse the array and check for increasing and decreasing subsequences\n    increasing = True\n    decreasing = False\n    prev_val = arr[0]\n    curr_sum = 0\n    max_sum = float('-inf')\n    for i in range(1, n):\n        if arr[i] < prev_val:\n            increasing = True\n        else:\n            if increasing:\n                curr_sum += arr[i]\n                if curr_sum > max_sum:\n                    max_sum = curr_sum\n            else:\n                decreasing = True\n            curr_sum = 0\n\n        prev_val = arr[i]\n\n    # Traverse the array again and add the remaining values to the current sum\n    curr_sum += arr[n-1]\n    if curr_sum > max_sum:\n        max_sum = curr_sum\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    elif arr[0] < arr[1]:\n        return max(arr[0] + max_sum(arr[1:]), max_sum(arr[1:]))\n    else:\n        return max(arr[1] + max_sum(arr[:-1]), max_sum(arr[:-1]))"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    dp = [[0] * n for _ in range(n)]\n\n    # Traverse the array and calculate the sum of the subsequence ending at each index\n    for i in range(n):\n        for j in range(i, n):\n            dp[i][j] = arr[i] + arr[j]\n\n    # Traverse the array again and calculate the maximum sum for each subsequence\n    max_sum = -float('inf')\n    for i in range(n):\n        for j in range(i, n):\n            if (j - i) % 2 == 1:\n                continue\n            if dp[i][j] > dp[i][j + 1] + dp[j][j + 1]:\n                max_sum = max(max_sum, dp[i][j])\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    if len(arr) < 3:\n        return 0\n\n    # Determine if the array is increasing or decreasing\n    increasing = True\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            increasing = False\n            break\n\n    # If the array is increasing, return the maximum sum\n    if increasing:\n        max_sum = sum(arr)\n        max_bitonic_sum = max_sum\n        return max_sum\n\n    # If the array is decreasing, reverse the array and calculate the maximum sum\n    arr = arr[::-1]\n    max_sum = sum(arr)\n    max_bitonic_sum = max_sum\n    return max_bitonic_sum\n"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) <= 2:\n        return max(arr)\n\n    inc_sum = max_sum(arr[1:])\n    dec_sum = max_sum(arr[1:])\n\n    return max(inc_sum, dec_sum)"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number == 0:\n        return 0\n    else:\n        x = 1\n        while abs(x*x - number) > 0.00001:\n            x = x - (number/x)\n        return x"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2.0\n    while True:\n        next_guess = (guess + number / guess) / 2.0\n        if abs(next_guess - guess) < 0.00001:\n            return next_guess\n        guess = next_guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # Convert the input number to a floating-point value\n    number = float(number)\n    \n    # Initialize the current approximation\n    guess = number / 2\n    \n    # Initialize the number of iterations\n    count = 0\n    \n    # Initialize a variable to keep track of the difference between the previous and current guesses\n    diff = 0\n    \n    # Loop until the difference between the previous and current guesses is less than or equal to a small tolerance\n    while diff > 0.000001:\n        # Compute the current guess using the formula x_n = (x_(n-1) + a / x_(n-1)) / 2\n        guess = (guess + (number / guess)) / 2\n        \n        # Update the number of iterations\n        count += 1\n        \n        # Compute the difference between the previous and current guesses\n        diff = abs(guess - guess_prev)\n        \n        # Update the previous guess\n        guess_prev = guess\n    \n    # Return the final approximation\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n\n    # Initialize variables\n    guess = number / 2\n    i = 0\n    epsilon = 1e-6\n\n    # Loop until the guess is within epsilon of the square root of the number\n    while abs(guess*guess - number) >= epsilon:\n        i += 1\n        guess = (guess + number/guess) / 2\n\n    # Return the guess as the square root of the number\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = number\n    y = (x + number/x) / 2\n    while abs(y - x) > 0.0001:\n        x = y\n        y = (x + number/x) / 2\n    return y"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number < 0:\n        raise ValueError(\"Input number must be non-negative.\")\n    x = 1\n    y = 1\n    while abs(x**2 - number) > 0.000001:\n        x = (x + number/x) / 2\n        y = x**2 - number\n    return x"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2  # Start with a guess of half the number\n    while True:\n        if guess * guess == number:  # If the guess is close enough, stop\n            return guess\n        elif guess * guess > number:  # If the guess is too big, decrease it\n            guess = (guess + number / guess) / 2\n        else:  # If the guess is too small, increase it\n            guess = (guess + number / guess) / 2"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Compute the square root of a number using the babylonian method.\n    \"\"\"\n    guess = number / 2\n    while guess**2 > number:\n        guess = (guess + number / guess) / 2\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number < 0:\n        print(\"Error: number must be a non-negative integer.\")\n        return None\n    \n    guess = number / 2\n    i = 0\n    while abs(guess**2 - number) > 0.001:\n        if guess**2 < number:\n            guess += number / guess\n        else:\n            guess -= number / guess\n        i += 1\n    \n    if i > 100:\n        print(\"Error: Maximum iterations reached.\")\n        return None\n    \n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Compute the square root of a given number using the babylonian method.\n\n    Args:\n        number (float): The number whose square root is to be computed.\n\n    Returns:\n        float: The square root of the given number using the babylonian method.\n    \"\"\"\n\n    # Initialize the guess to 1.0 and the precision to 0.0001\n    guess = 1.0\n    precision = 0.0001\n\n    # Keep iterating until the difference between the guess and the square\n    # of the guess is less than the precision\n    while abs(guess * guess - number) > precision:\n        # Compute the new guess using the babylonian method\n        guess = (number / guess + guess) / 2\n\n    # Return the final guess\n    return guess"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lps(s): \n    n = len(s)\n    if n == 0:\n        return 0\n\n    # create a table to store lengths of longest palindromic subsequences ending at each index \n    t = [[0] * n for _ in range(n)]\n\n    # base case: if the first and last characters are the same, \n    # the length of longest palindromic subsequence is 2\n    if s[0] == s[n-1]:\n        t[0][n-1] = 2\n\n    # fill the table in bottom-up manner\n    for i in range(1, n):\n        for j in range(n-1, i-1, -1):\n            if s[j] == s[i]:\n                t[j][i] = t[j+1][i-1] + 2\n            else:\n                t[j][i] = max(t[j+1][i], t[j][i-1])\n\n    return t[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lps(s):\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n    max_len = 1\n    for i in range(n):\n        if i == 0 or s[i] == s[i - 1]:\n            dp[i][i] = 1\n            max_len = 1\n        else:\n            dp[i][i] = 0\n            max_len = 1\n        for j in range(i + 1, n):\n            if s[i] == s[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n                max_len = max(max_len, dp[i][j])\n            else:\n                dp[i][j] = 0\n    return max_len\n"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    # create a 2D table to store the lengths of longest palindromic subsequences\n    table = [[0] * n for _ in range(n)]\n    # initialize the table for the first row and column\n    for i in range(n):\n        table[i][i] = 1\n    # fill the table using dynamic programming\n    for length in range(3, n+1):\n        for start in range(n-length+1):\n            end = start + length - 1\n            if str[start] == str[end]:\n                table[start][end] = table[start+1][end-1] + 2\n            else:\n                table[start][end] = max(table[start+1][end], table[start][end-1])\n    # return the maximum length of a palindromic subsequence\n    return table[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lps(s):\n    \"\"\"\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n\n    # Create a 2D array to store the lengths of all subsequences\n    dp = [[0 for j in range(len(s) + 1)] for i in range(len(s) + 1)]\n\n    # Initialize the first row and first column with 1\n    for i in range(1, len(s) + 1):\n        dp[i][0] = 1\n\n    # Initialize the first row and last column with 0\n    for i in range(1, len(s) + 1):\n        dp[0][i] = 0\n\n    # Fill the rest of the matrix using dynamic programming\n    for i in range(1, len(s) + 1):\n        for j in range(1, len(s) + 1):\n            if s[i - 1] == s[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n    # Return the length of the longest palindromic subsequence\n    return dp[len(s)][len(s)]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lps(str):\n    n = len(str)\n    max_length = 1\n    start = 0\n    for i in range(n):\n        l = i\n        r = i\n        while l >= 0 and r < n and str[l] == str[r]:\n            l -= 1\n            r += 1\n        l += 1\n        max_length = max(max_length, r-l+1)\n        if r == n-1:\n            start = l\n    return max_length"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lps(s):\n    '''\n    This function finds the length of the longest palindromic subsequence in a given string.\n    '''\n    n = len(s)\n    dp = [1] * n\n    maxLength = 1\n    start = 0\n\n    # Calculate lengths of palindromic subsequences for odd length strings\n    for i in range(1, n-1):\n        if s[i] == s[i+1]:\n            dp[i] = 2\n            maxLength = max(maxLength, dp[i])\n            if i > start and s[i] == s[start]:\n                dp[i] += dp[start]\n                maxLength = max(maxLength, dp[i])\n        start = i\n\n    # Calculate lengths of palindromic subsequences for even length strings\n    for i in range(n-2, -1, -1):\n        if s[i] == s[i+1]:\n            dp[i] = 2\n            maxLength = max(maxLength, dp[i])\n            if i > start and s[i] == s[start]:\n                dp[i] += dp[start]\n                maxLength = max(maxLength, dp[i])\n        start = i\n\n    return maxLength"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lps(str):\n    \"\"\"\n    This function finds the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    # Initialize a 2D matrix to store the lengths of longest palindromic subsequences\n    dp = [[0] * len(str) for _ in range(len(str))]\n    # Initialize variables to store the start index and end index of the longest palindromic subsequence\n    start, end = 0, 0\n\n    # Iterate through each character in the string\n    for i in range(len(str)):\n        # If the current character is a palindrome, update the lengths of the longest palindromic subsequences\n        if i > 0 and str[i] == str[i-1]:\n            dp[i][i] = dp[i-2][i-2] + 2\n        else:\n            # If the current character is not a palindrome, check the longest palindromic subsequences to the left and right of it\n            dp[i][i] = max(dp[i-1][j] + 1 for j in range(i))\n        # Update the start and end indices of the longest palindromic subsequence\n        if dp[i][i] + i > end:\n            start, end = i - dp[i][i], i\n\n    # Return the length of the longest palindromic subsequence\n    return end - start + 1"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lps(s):\n    if len(s) < 2:\n        return len(s)\n    max_len = 1\n    for i in range(1, len(s)):\n        temp_len = 1\n        if s[i] == s[i-1]:\n            temp_len += 1\n        if max_len < temp_len:\n            max_len = temp_len\n        if i > 1 and s[i] == s[i-2] and s[i] == s[i-3]:\n            temp_len = 3\n            if max_len < temp_len:\n                max_len = temp_len\n    return max_len"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lps(s):\n    n = len(s)\n    # Create a 2D table to store the length of longest palindromic subsequences ending at each index\n    # Initialize the first row and column with 0, 1, 2... for all indices\n    t = [[0] * (n + 1) for _ in range(n + 1)]\n\n    # Fill the table in bottom-up manner\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if s[i - 1] == s[j - 1]:\n                t[i][j] = t[i - 1][j - 1] + 1\n            else:\n                t[i][j] = max(t[i - 1][j], t[i][j - 1])\n\n    return t[n][n]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lps(str):\n    n = len(str)\n    if n <= 1:\n        return n\n\n    # Create a 2D table to store the lengths of LPS for all prefixes\n    # of the given string\n    table = [[0] * n for _ in range(n)]\n\n    # Initialize the first row and first column of the table\n    for i in range(n):\n        table[i][i] = 1\n\n    # Fill the rest of the table in bottom-up manner\n    for length in range(2, n+1):\n        for i in range(n-length+1):\n            j = i + length - 1\n            if str[i] == str[j]:\n                table[i][j] = table[i+1][j-1] + 2\n            else:\n                table[i][j] = max(table[i+1][j], table[i][j-1])\n\n    # Return the length of the longest palindromic subsequence\n    return table[0][n-1]"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum_of_harmonic_numbers = 0\n    for i in range(1, n+1):\n        sum_of_harmonic_numbers += 1 / i\n    return sum_of_harmonic_numbers"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (1/n) + harmonic_sum(n-1)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # Calculate the harmonic sum of n-1\n    harmonic_sum = 2*n - 1\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    return (1/n + 1/n**2 +... + 1/n**(n-1))**(1/n)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n\n    # Use the formula to calculate the harmonic sum\n    sum = 0\n    for i in range(1, n+1):\n        sum += 1/i\n\n    return sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(1, n):\n        harmonic_sum += 1/i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return n*(n-1)/2"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0.0\n    for i in range(1, n):\n        harmonic_sum += 1.0 / i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    harmonic = 0\n    for i in range(n):\n        harmonic += 1/i\n    return harmonic"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 1\n    for i in range(n-1):\n        harmonic_sum += 1/i\n    return harmonic_sum"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    This function takes two arrays as input and returns the intersection of the two arrays.\n    '''\n    # creating a dictionary to store the frequency of each element in array_nums1\n    freq_dict = {}\n    for num in array_nums1:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    \n    # creating a new list to store the intersection of the two arrays\n    intersection_list = []\n    \n    # checking if each element in array_nums2 is present in freq_dict\n    for num in array_nums2:\n        if num in freq_dict and freq_dict[num] > 0:\n            intersection_list.append(num)\n            freq_dict[num] -= 1\n    \n    # returning the intersection of the two arrays\n    return intersection_list"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Sort both arrays\n    array_nums1.sort()\n    array_nums2.sort()\n\n    # Initialize variables\n    i = j = 0\n    intersection = []\n\n    # Loop through both arrays simultaneously\n    while i < len(array_nums1) and j < len(array_nums2):\n        if array_nums1[i] == array_nums2[j]:\n            intersection.append(array_nums1[i])\n            i += 1\n            j += 1\n        elif array_nums1[i] < array_nums2[j]:\n            i += 1\n        else:\n            j += 1\n\n    # Return the intersection\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    intersection = []\n    # loop through array 1 and check if each element is in array 2\n    for num in array_nums1:\n        if num in array_nums2:\n            # if it is, add it to the intersection list\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    This function finds the intersection of two arrays.\n    \"\"\"\n    # Check if both arrays are empty\n    if len(array_nums1) == 0 and len(array_nums2) == 0:\n        return []\n    # Check if one of the arrays is empty\n    elif len(array_nums1) == 0 or len(array_nums2) == 0:\n        return []\n    # Sort the arrays\n    array_nums1.sort()\n    array_nums2.sort()\n    # Initialize the intersection list\n    intersection_list = []\n    # Iterate through the sorted arrays\n    i = j = 0\n    while i < len(array_nums1) and j < len(array_nums2):\n        if array_nums1[i] == array_nums2[j]:\n            # Check if the element is not already in the intersection list\n            if array_nums1[i] not in intersection_list:\n                intersection_list.append(array_nums1[i])\n            i += 1\n            j += 1\n        elif array_nums1[i] < array_nums2[j]:\n            i += 1\n        else:\n            j += 1\n    return intersection_list"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    if not array_nums1 or not array_nums2:\n        return []\n    nums1 = set(array_nums1)\n    nums2 = set(array_nums2)\n    return list(nums1.intersection(nums2))"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Find the intersection of two arrays.\n    \"\"\"\n    # Initialize an empty dictionary to store the indices of the common elements\n    common = {}\n\n    # Loop through the first array and check if each element is present in the second array\n    for i in range(len(array_nums1)):\n        if array_nums1[i] in array_nums2 and array_nums1[i] not in common:\n            # If the element is present in both arrays, add its index to the dictionary\n            common[array_nums1[i]] = i\n\n    # Create a new array to store the common elements\n    result = []\n\n    # Loop through the second array and check if each element is present in the dictionary\n    for i in range(len(array_nums2)):\n        if array_nums2[i] in common and array_nums2[i] not in result:\n            # If the element is present in both arrays and not in the result array, add it to the result array\n            result.append(array_nums2[i])\n\n    return result"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # creating sets of unique elements in both arrays\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n\n    # finding the intersection of the two sets\n    intersection = set1.intersection(set2)\n\n    # converting the intersection set back to a list\n    intersection_list = list(intersection)\n\n    return intersection_list"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # creating two sets for fast comparison\n    set_nums1 = set(array_nums1)\n    set_nums2 = set(array_nums2)\n    # finding the intersection of two sets\n    intersection = set_nums1.intersection(set_nums2)\n    # creating a list of the intersection\n    intersection_list = list(intersection)\n    return intersection_list"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    This function finds the intersection of two arrays.\n\n    Parameters:\n    array_nums1 (list): List of integers.\n    array_nums2 (list): List of integers.\n\n    Returns:\n    list: List of integers that are common to both input arrays.\n    \"\"\"\n    # Create a set to store unique elements of array_nums1\n    unique_nums1 = set(array_nums1)\n\n    # Create an empty list to store the intersection of array_nums1 and array_nums2\n    common_nums = []\n\n    # Loop through each element in array_nums2\n    for num in array_nums2:\n        # If the element is in the set, add it to the common_nums list\n        if num in unique_nums1:\n            common_nums.append(num)\n\n    # Return the common_nums list\n    return common_nums"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Create a set from the first array to remove duplicates\n    set_nums1 = set(array_nums1)\n    \n    # Create a set from the second array to remove duplicates\n    set_nums2 = set(array_nums2)\n    \n    # Find the intersection of the two sets\n    intersection_set = set_nums1.intersection(set_nums2)\n    \n    # Convert the set to a list and return it\n    return list(intersection_set)"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_X(tup, x):\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_X(tup, x):\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return [element] + list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    for i in range(len(list)):\n        list.insert(i, element)\n    return list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n\n    result = []\n\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.append(list[i])\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        result.insert(0, element)\n        result.insert(0, list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    # Loop through the list\n    for i in range(len(list)):\n        # Insert the element before the current element\n        list.insert(i, element)\n    return list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        if i == 0:\n            result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list,\n    and returns the resulting list.\n    \"\"\"\n    result = []\n    for item in list:\n        result.append(element)\n        result.append(item)\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_coordinates = []\n    for number in numbers:\n        # Convert the complex number to polar coordinates\n        r = cmath.sqrt(number.real**2 + number.imag**2)\n        theta = cmath.phase(number)\n\n        # Add the polar coordinates to the list\n        polar_coordinates.append((r, theta))\n\n    return polar_coordinates"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    Write a python function to convert complex numbers to polar coordinates.\n    \"\"\"\n    for num in numbers:\n        real, imag = cmath.polar(num)\n        print(real, imag)"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    This function takes a list of complex numbers as input and returns a list of tuples, each representing a complex number in polar coordinates.\n    '''\n    result = []\n    for num in numbers:\n        real, imag = num.real, num.imag\n        magnitude = cmath.sqrt(real**2 + imag**2)\n        angle = cmath.phase(num)\n        result.append((magnitude, angle))\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    Write a python function to convert complex numbers to polar coordinates.\n    \"\"\"\n    for num in numbers:\n        # convert complex number to polar coordinates\n        angle = cmath.phase(num)\n        magnitude = cmath.abs(num)\n        \n        # print the angle and magnitude of the complex number\n        print(\"Angle: {:.2f} deg\".format(angle*180/cmath.pi))\n        print(\"Magnitude: {:.2f}\".format(magnitude))"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath  \n  \ndef convert(numbers):\n    \"\"\"\n    Write a python function to convert complex numbers to polar coordinates.\n    \"\"\"\n    for num in numbers:\n        if isinstance(num, complex):\n            # Convert complex number to polar coordinates\n            r, theta = cmath.polar(num)\n            print(f\"{num} is in polar form with radius {r:.2f} and angle {theta:.2f} radians.\")\n        else:\n            # If the input is not a complex number, print an error message\n            print(f\"{num} is not a complex number.\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        real, imag = cmath.rect(num)\n        print(real, imag)"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n\n    for num in numbers:\n        x, y = cmath.polar(num)\n        print(f\"({x:.2f}, {y:.2f})\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for number in numbers:\n        # get the real and imaginary parts of the complex number\n        real = number.real\n        imag = number.imag\n        \n        # calculate the magnitude of the complex number\n        magnitude = cmath.sqrt(real**2 + imag**2)\n        \n        # calculate the angle of the complex number in degrees\n        angle = cmath.phase(number) * 180 / cmath.pi\n        \n        # print the polar coordinates of the complex number\n        print(f\"({real:.2f}, {imag:.2f}) | {magnitude:.2f} | {angle:.2f} degrees\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        real, imag = cmath.polar(num)\n        print('The complex number {} in polar coordinates is ({}, {})'.format(num, real, imag))"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    # iterate through the list of complex numbers\n    for num in numbers:\n        # get the real and imaginary parts of the complex number\n        real = num.real\n        imag = num.imag\n        # calculate the polar coordinate\n        r = cmath.sqrt(real**2 + imag**2)\n        theta = cmath.phase(num)\n        # append the polar coordinates to the list of polar coordinates\n        polar_coords.append((r, theta))\n    # return the list of polar coordinates\n    return polar_coords"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    This function counts the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_integer(lst):\n    \"\"\"\n    Returns the number of integer elements in a given list\n    \"\"\"\n    count = 0\n    for i in lst:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_integer(list1):\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_integer(list1):\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_integer(lst):\n    count = 0\n    for i in lst:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_integer(list1):\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_integer(lst):\n    count = 0\n    for num in lst:\n        if type(num) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_integer(lst):\n    count = 0\n    for item in lst:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(lst, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    comb = []\n    for i in range(len(lst)):\n        for j in combinations_with_replacement(lst[i], n):\n            comb.append((lst[i], j))\n    return comb"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))\n"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    result = []\n    for i in range(len(l)-n+1):\n        combo = tuple(l[i:i+n])\n        result.append(combo)\n    return result"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n\n    comb = combinations_with_replacement(l, n)\n\n    # create a list to store the tuples for each combination\n    result = []\n\n    # iterate through each combination\n    for com in comb:\n        # create a tuple for each combination\n        tup = tuple(com)\n        # add the tuple to the result list\n        result.append(tup)\n\n    return result"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n\n    # Generate all combinations of length n\n    combos = combinations_with_replacement(l, n)\n\n    # Create a list with tuples for each combination\n    result = []\n    for combo in combos:\n        result.append(tuple(combo))\n\n    return result"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    comb = []\n    for i in range(1, len(l) - n + 1):\n        comb.append(tuple(l[j:j+n]))\n    return comb"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_prime(n):\n    \"\"\"\n    Helper function to check if a number is prime or not\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    \"\"\"\n    Function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_prime(num):\n    \"\"\"\n    Helper function to check if a number is prime or not.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    \"\"\"\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    \n    # Create a list of prime numbers less than n\n    primes = []\n    p = 2\n    while len(primes) < n:\n        is_prime = True\n        for i in range(2, int(p**0.5)+1):\n            if p % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(p)\n        p += 1\n    \n    # Return the number of prime numbers in the list\n    return len(primes)"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n+1):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        isPrime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                isPrime = False\n                break\n        if isPrime:\n            count += 1\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        if all(i % j!= 0 for j in range(2, int(i**0.5)+1)):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n+1):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    count = 0\n    for i in range(2, n+1):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_numbers(a, b):\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_numbers(a, b):\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_numbers(a, b):\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_numbers(a,b):\n    \"\"\"\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return b,a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_numbers(a,b):\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Check if both tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        return None\n    # If not, compare the corresponding elements and return the larger one\n    else:\n        return max(test_tup1, key=lambda x: x[0])"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Initialize variables\n    max1 = test_tup1[0]\n    max2 = test_tup2[0]\n\n    # Compare each element of the tuples\n    for i in range(1, len(test_tup1)):\n        if test_tup1[i] > max1:\n            max1 = test_tup1[i]\n        if test_tup2[i] > max2:\n            max2 = test_tup2[i]\n\n    # Return the maximum tuple\n    return max1, max2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tuple = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            max_tuple = test_tup1\n        else:\n            max_tuple = test_tup2\n    return max_tuple"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n    \"\"\"\n    # Sort the two tuples\n    sorted_tup1 = sorted(test_tup1)\n    sorted_tup2 = sorted(test_tup2)\n\n    # Compare the two sorted tuples\n    max_element1 = sorted_tup1[-1]\n    max_element2 = sorted_tup2[-1]\n\n    # Check if the two maximum elements are equal\n    if max_element1 == max_element2:\n        print(\"The two tuples are equal.\")\n    else:\n        # Return the tuple with the greater maximum element\n        if max_element1 > max_element2:\n            return sorted_tup1\n        else:\n            return sorted_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns the maximum values of each element.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The two tuples are of different lengths. Please make sure both tuples have the same length.\")\n        return None\n    \n    max_tup1 = ()\n    max_tup2 = ()\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            max_tup1 = max_tup1 + (test_tup1[i],)\n            max_tup2 = max_tup2 + (test_tup2[i],)\n        else:\n            max_tup1 = max_tup1 + (test_tup2[i],)\n            max_tup2 = max_tup2 + (test_tup1[i],)\n            \n    return (max_tup1, max_tup2)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max1 = test_tup1[0]\n    max2 = test_tup2[0]\n    max3 = 0\n    for i in range(1, len(test_tup1)):\n        if test_tup1[i] > max1:\n            max3 = max2\n            max2 = max1\n            max1 = test_tup1[i]\n        elif test_tup1[i] > max2:\n            max3 = max2\n            max2 = test_tup1[i]\n        elif test_tup1[i] > max3:\n            max3 = test_tup1[i]\n    for i in range(1, len(test_tup2)):\n        if test_tup2[i] > max1:\n            max3 = max2\n            max2 = max1\n            max1 = test_tup2[i]\n        elif test_tup2[i] > max2:\n            max3 = max2\n            max2 = test_tup2[i]\n        elif test_tup2[i] > max3:\n            max3 = test_tup2[i]\n    return (max1, max2, max3)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1[0] > test_tup2[0]:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n\n    # If the first tuple is greater than the second, return the first tuple\n    if test_tup1 > test_tup2:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Initialize variables to store the maximum values of the two tuples\n    max1 = max2 = None\n    \n    # Iterate through the two tuples and compare the values\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > max1:\n            max2 = max1\n            max1 = test_tup1[i]\n        elif test_tup2[i] > max2:\n            max2 = test_tup2[i]\n    \n    # If the two tuples are equal, return the first tuple as it contains the highest values\n    if max1 == max2:\n        return test_tup1\n    else:\n        return (max1, max2)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1 > test_tup2:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    i = 2\n    while True:\n        if i % 2 == 0:\n            i += 1\n        else:\n            for j in range(3, int(i**0.5)+1, 2):\n                if i % j == 0:\n                    break\n            else:\n                print(i)\n                n -= 1\n                if n == 0:\n                    break\n        i += 1"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n\n    # Initialize variables\n    count = 0\n    num = 2\n\n    # Loop until count reaches n\n    while count < n:\n        # Check if num is a newman-shanks-williams prime\n        if is_prime(num) and is_prime(num + 2) and is_prime(num + 4):\n            count += 1\n\n        # Increment num\n        num += 6\n\n    # Return the nth newman-shanks-williams prime number\n    return num\n\ndef is_prime(n):\n    '''\n    Write a function to check if a given number is a prime number.\n    '''\n\n    # Check if n is less than 2\n    if n < 2:\n        return False\n\n    # Check if n is equal to 2\n    elif n == 2:\n        return True\n\n    # Check odd numbers for divisibility\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n\n    # If no even factors found, then n is prime\n    return True"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    i = 2\n    count = 0\n    while count < n:\n        if is_prime(i):\n            count += 1\n        i += 1\n    return i - 1\n\n\ndef is_prime(n):\n    \"\"\"\n    Check if a given number is prime.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Initialize the list of prime numbers\n    primes = []\n    \n    # Initialize the current number\n    num = 2\n    \n    # Loop until we have n prime numbers\n    while len(primes) < n:\n        # Check if num is a prime number\n        is_prime = True\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n        \n        # Increment the current number\n        num += 1\n    \n    # Return the nth prime number\n    return primes[n - 1]"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def newman_prime(n): \n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    # Create a list of numbers from 2 to n\n    nums = list(range(2, n + 1))\n    \n    # Initialize a list of prime numbers\n    primes = []\n    \n    # Use the Sieve of Eratosthenes algorithm to find prime numbers\n    for num in nums:\n        # If the number is prime, add it to the list of primes\n        if all(num % i!= 0 for i in range(2, int(num ** 0.5) + 1)):\n            primes.append(num)\n    \n    # Return the nth prime number in the list of primes\n    return primes[n - 1]"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Initialize a list of primes up to the square root of n\n    primes = []\n    i = 2\n    while i*i <= n:\n        if is_prime(i):\n            primes.append(i)\n        i += 1\n    # Initialize a variable to keep track of the next prime number to test\n    next_prime = primes[0]\n    # Iterate through the list of primes up to n\n    for i in range(len(primes)):\n        # If the current prime number is greater than the square root of n, break out of the loop\n        if primes[i] > n**0.5:\n            break\n        # Iterate through the list of primes up to the square root of the current prime number\n        for j in range(len(primes)):\n            # If the current prime number is greater than the square root of the square root of the current prime number, break out of the loop\n            if primes[j] > n**(0.5/primes[i]):\n                break\n            # If the next prime number to test is greater than the square root of the square root of the current prime number, break out of the inner loop\n            if next_prime > n**(0.5/primes[i]):\n                break\n            # Test the next prime number to see if it is a newman\u2013shanks\u2013williams prime\n            if is_prime(next_prime):\n                # If the next prime number is a newman\u2013shanks\u2013williams prime, add it to the list of primes up to n\n                primes.append(next_prime)\n                # If we have found the nth newman\u2013shanks\u2013williams prime, break out of the outer loop\n                if len(primes) == n:\n                    break\n        # Set the next prime number to test to be the next prime number in the list of primes up to the square root of the current prime number\n        next_prime = primes[j+1]\n    return primes"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def newman_prime(n): \n    \"\"\"\n    This function finds the nth newman-shanks-williams prime number.\n    \"\"\"\n    # Initialize variables\n    count = 0\n    prime = 2\n    \n    # Loop through primes until the nth prime is found\n    while count < n:\n        # Check if the current prime is prime\n        is_prime = True\n        for i in range(2, int(prime**0.5)+1):\n            if prime % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            # Update count and prime\n            count += 1\n            prime += 1\n    \n    return prime - 1"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def newman_prime(n): \n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    # Define a list of prime numbers\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    \n    # Find the nth prime number\n    for i in range(1, n):\n        # Check if the nth number is in the list of primes\n        if (n - i) % primes[i-2]!= 0:\n            # If not, find the next prime number greater than the previous one\n            prime = primes[i-1] + 1\n            while prime not in primes:\n                prime += 1\n            # Add the next prime number to the list of primes\n            primes.append(prime)\n            \n    # Return the nth prime number\n    return primes[-1]"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Initialize the variables to store the prime numbers\n    prime_list = []\n    count = 0\n    \n    # Check if n is a positive integer\n    if type(n)!= int or n < 1:\n        print(\"Error: n must be a positive integer.\")\n        return\n    \n    # Check if n is less than 10\n    elif n < 10:\n        print(\"The nth newman-shanks-williams prime number is 2.\")\n        return\n    \n    # Check if n is divisible by 2 (except for 2)\n    elif n % 2 == 0 and n!= 2:\n        print(\"The nth newman-shanks-williams prime number is 2.\")\n        return\n    \n    # Check if n is divisible by 3 (except for 3)\n    elif n % 3 == 0 and n!= 3:\n        print(\"The nth newman-shanks-williams prime number is 3.\")\n        return\n    \n    # Check if n is divisible by 5 (except for 5)\n    elif n % 5 == 0 and n!= 5:\n        print(\"The nth newman-shanks-williams prime number is 5.\")\n        return\n    \n    # Check if n is divisible by 7 (except for 7)\n    elif n % 7 == 0 and n!= 7:\n        print(\"The nth newman-shanks-williams prime number is 7.\")\n        return\n    \n    # Check if n is divisible by 11 (except for 11)\n    elif n % 11 == 0 and n!= 11:\n        print(\"The nth newman-shanks-williams prime number is 11.\")\n        return\n    \n    # Check if n is divisible by 13 (except for 13)\n    elif n % 13 == 0 and n!= 13:\n        print(\"The nth newman-shanks-williams prime number is 13.\")\n        return\n    \n    # Check if n is divisible by 17 (except for 17)\n    elif n % 17 == 0 and n!= 17:\n        print(\"The nth newman-shanks-williams prime number is 17.\")\n        return\n    \n    # Check if n is divisible by 19 (except for 19)\n    elif n % 19 == 0 and n!= 19:\n        print(\"The nth newman-shanks-williams prime number is 19.\")\n        return\n    \n    # Check if n is divisible by 23 (except for 23)\n    elif n % 23 == 0 and n!= 23:\n        print(\"The nth newman-shanks-williams prime number is 23.\")\n        return\n    \n    # Check if n is divisible by 29 (except for 29)\n    elif n % 29 == 0 and n!= 29:\n        print(\"The nth newman-shanks-williams prime number is 29.\")\n        return\n    \n    # Check if n is divisible by 31 (except for 31)\n    elif n % 31 == 0 and n!= 31:\n        print(\"The nth newman-shanks-williams prime number is 31.\")\n        return\n    \n    # Check if n is divisible by 37 (except for 37)\n    elif n % 37 == 0 and n!= 37:\n        print(\"The nth newman-shanks-williams prime number is 37.\")\n        return\n    \n    # Check if n is divisible by 41 (except for 41)\n    elif n % 41 == 0 and n!= 41:\n        print(\"The nth newman-shanks-williams prime number is 41.\")\n        return\n    \n    # Check if n is divisible by 43 (except for 43)\n    elif n % 43 == 0 and n!= 43:\n        print(\"The nth newman-shanks-williams prime number is 43.\")\n        return\n    \n    # Check if n is divisible by 47 (except for 47)\n    elif n % 47 == 0 and n!= 47:\n        print(\"The nth newman-shanks-williams prime number is 47.\")\n        return\n    \n    # Check if n is divisible by"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    i = 0\n    current_prime = 2\n    while i < n:\n        # check if current_prime is prime\n        is_prime = True\n        for j in range(2, int(current_prime ** 0.5) + 1):\n            if current_prime % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            i += 1\n            current_prime += 1\n    return current_prime"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The length of the two input tuples should be same.\")\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] == 0 or test_tup2[i] == 0:\n            test_tup1[i] = 0\n            test_tup2[i] = 0\n        else:\n            test_tup1[i] /= test_tup2[i]\n    \n    return test_tup1"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n\n    # Initialize an empty list to store the result of the division\n    result_list = []\n\n    # Check if both tuples have the same length\n    if len(test_tup1) == len(test_tup2):\n        # Perform element-wise division operation on the tuples\n        for i in range(len(test_tup1)):\n            result_list.append(test_tup1[i] / test_tup2[i])\n    else:\n        print(\"Both tuples should have the same length!\")\n\n    # Return the result list\n    return result_list"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for num1, num2 in zip(test_tup1, test_tup2):\n        result_tup += (num1/num2,)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n\n    # check if the input tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples have different lengths\")\n        return\n\n    # perform element-wise division\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] % 0 == 0 or test_tup2[i] % 0 == 0:\n            print(\"Error: Tuples contain zero\")\n            return\n        try:\n            result_tup += (test_tup1[i] / test_tup2[i],)\n        except:\n            print(\"Error: Tuples contain non-numeric values\")\n            return\n\n    # return the result tuple\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples must have same length.\")\n        return None\n    result_tup = []\n    for i in range(len(test_tup1)):\n        try:\n            result_tup.append(test_tup1[i] / test_tup2[i])\n        except ZeroDivisionError:\n            print(\"Error: Division by zero encountered.\")\n            return None\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple(a/b for a, b in zip(test_tup1, test_tup2))"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    \"\"\"\n    # check if the input tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The input tuples must have the same length.\")\n\n    # perform element-wise division operation\n    result_tup = tuple(elem1 / elem2 for elem1, elem2 in zip(test_tup1, test_tup2))\n\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The number of elements in the two tuples must be the same.\")\n        return\n    \n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # check if the length of the two tuples are the same\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples should have the same length\")\n    \n    # perform element-wise division of the two tuples\n    result_tup = tuple(a/b for a, b in zip(test_tup1, test_tup2))\n    \n    return result_tup"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) < L:\n        raise ValueError('List length must be greater than or equal to L')\n    half_L = L // 2\n    part1 = list1[:half_L]\n    part2 = list1[half_L:]\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Use a list comprehension to create a new list with the first L elements of the original list\n    part1 = [list1[i] for i in range(L)]\n    # Use slicing to create the second part of the list, starting from the first element after L\n    part2 = list1[L:]\n    # Return a tuple containing the two parts\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    \"\"\"\n    Split a list into two parts with the given length L.\n\n    :param list1: the list to be split\n    :param L: the desired length of the first part of the split\n    :return: a tuple containing the first part of the list and the second part of the list\n    \"\"\"\n    if L > len(list1):\n        raise ValueError(\"L must be smaller than or equal to the length of list1\")\n    return (list1[:L], list1[L:])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # If L is greater than the length of the list, return a tuple containing the original list and an empty list.\n    if L > len(list1):\n        return (list1, [])\n    \n    # Otherwise, split the list into two parts using slicing.\n    first_part = list1[:L]\n    second_part = list1[L:]\n    \n    # Return a tuple containing the first part and second part.\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    part1 = list1[:L]\n    part2 = list1[L:]\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) < 2 * L:\n        return None\n    else:\n        first_part = list1[:L]\n        second_part = list1[L:]\n        return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_two_parts(lst, L):\n    '''\n    This function takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L.\n    The function returns the resulting lists in a tuple.\n    '''\n    # Calculate the number of elements in the first part\n    n = L // 2\n    \n    # Split the list into two parts and return the results as a tuple\n    return (lst[:n], lst[n:])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[:L], list1[L:])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    \"\"\"\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    \"\"\"\n    # Split the list into two parts with the length of L\n    part1 = list1[:L]\n    part2 = list1[L:]\n    \n    # Return the resulting lists in a tuple\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Get the length of the list\n    length = len(list1)\n    \n    # Check if the length of L is greater than the length of the list\n    if L > length:\n        print(\"Error: The length of L must be less than or equal to the length of the list\")\n        return\n    \n    # Split the list into two parts\n    part1 = list1[:L]\n    part2 = list1[L:]\n    \n    # Return the resulting lists in a tuple\n    return (part1, part2)"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7 * int(h_age)\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # Convert human age to dog years\n    dog_age = h_age * 7\n    \n    return dog_age"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    years = 7 * h_age + 4\n    return years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    # convert human age to dog years\n    dog_years = h_age * 7\n    # round the dog years to the nearest integer\n    dog_years = round(dog_years)\n    # return the dog's age in dog years\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n    \"\"\"\n    years = h_age / 7\n    return years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    years = h_age / 7\n    return years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n\n    Parameters:\n    h_age (int): Human's age in years.\n\n    Returns:\n    int: Dog's age in dog's years.\n    \"\"\"\n    dog_years = h_age * 7\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dogs_age = h_age * 7\n    return dogs_age"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7\n    years_old = dog_years - h_age\n    return years_old"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n\n    :param h_age: Height of the dog in inches (float)\n    :return: Age of the dog in dog years (float)\n    \"\"\"\n    return h_age / 39.37"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    n = len(S)\n    if step > n:\n        step = n\n    return [S[i:i + step] for i in range(0, n, step)]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # Convert the input to a list, if necessary\n    if not isinstance(S, list):\n        S = list(S)\n    \n    # Initialize the output list and the current index\n    output = []\n    index = 0\n    \n    # Loop over the input list, splitting it for every nth element\n    while index < len(S):\n        # If the current index is a multiple of the step size, add a new sublist\n        if index % step == 0:\n            output.append(S[index:index+step])\n        # Increment the index by the step size\n        index += step\n    \n    # Return the output list\n    return output"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if len(S) < step:\n        raise ValueError(\"The step value is larger than the length of the input list\")\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    \"\"\"\n    This function takes in a list S and an integer n and splits the list S for every nth element, \n    returning a list of the resulting lists.\n    \"\"\"\n    # Create an empty list to store the resulting lists\n    result = []\n    # Initialize a counter variable\n    count = 0\n    \n    # Loop through the list and split it for every nth element\n    for element in S:\n        # Increment the counter variable\n        count += 1\n        # Check if the counter variable is a multiple of n\n        if count % step == 0:\n            # Append the current element to the result list\n            result.append(element)\n    \n    # Return the resulting list\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    n = step\n    for i in range(0, len(S), step):\n        result.append(S[i:i+n])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    n = len(S) // step\n    S_split = []\n    for i in range(0, n, step):\n        S_split.append(S[i:i+step])\n    return S_split"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    S = S.copy() # make a copy of the input list to avoid modifying it\n    n = step\n    result = []\n    while S:\n        result.append(S[:n])\n        S = S[n:]\n    return result"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return (6 * l ** 2) + (l * 12)"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return (6 * l**2)"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    surface_area = 6 * (l**2)\n    return surface_area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return (6 * l * l)"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    area = l * l * 6  # area = side length^2 * 6 (to get the square of the lateral surface area)\n    return area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    # initialize variables\n    sum_of_squares = 0\n    current_number = 1\n    \n    # loop through odd natural numbers up to n\n    for i in range(1, n+1, 2):\n        # calculate square of current number\n        square = current_number ** 2\n        \n        # add square to sum of squares\n        sum_of_squares += square\n        \n        # update current number for next iteration\n        current_number += 1\n    \n    # return sum of squares\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n\n    # initialize the sum variable to 0\n    sum_of_squares = 0\n\n    # loop through the first n odd natural numbers\n    for i in range(1, n+1, 2):\n        # add the square of each odd number to the sum\n        sum_of_squares += i**2\n\n    # return the sum of the squares\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):\n    # Initialize sum variable to 0\n    sum_of_squares = 0\n    \n    # Loop through first n odd natural numbers\n    for i in range(1, n+1, 2):\n        # Add the square of the current odd natural number to the sum variable\n        sum_of_squares += i*i\n    \n    # Return the sum of squares\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    # initialize sum and count to zero\n    sum_of_squares = 0\n    count = 0\n    \n    # iterate over odd natural numbers from 1 to n\n    for i in range(1, n+1, 2):\n        # add the square of the current odd number to the sum_of_squares\n        sum_of_squares += i**2\n        # increment count\n        count += 1\n    \n    # return the sum_of_squares\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n\n    #initialize sum variable to 0\n    sum = 0\n\n    #iterate from 1 to n\n    for i in range(1, n+1):\n\n        #if i is odd, add its square to sum\n        if i % 2!= 0:\n            sum += i**2\n\n    #return sum\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum_squares = 0\n    i = 1\n    while i <= n:\n        sum_squares += i ** 2\n        i += 2\n    return sum_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    for i in range(1, n+1, 2):\n        sum_of_squares += i*i\n    return sum_of_squares"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return 1 + (4 * find_star_num(n-1))"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_star_num(n): \n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    # Initialize the first star number as 1\n    star_num = 1\n    # Loop n-1 times and add each number to the previous number\n    for i in range(n-1):\n        star_num += i\n    # Return then'th star number\n    return star_num"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    # initializing the list of stars\n    stars = [ \"*\" for i in range(n+1) ]\n\n    # printing the list of stars\n    print(\"\\n\".join(stars))"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n % 2 == 0:\n        return n * (3 * n - 1) // 2\n    else:\n        return n * (3 * n - 1) // 2 + 1"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    if n == 1:\n        return \"*\"\n    else:\n        return \"*\" + find_star_num(n-1)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    # define the stars string\n    stars = \"*\" * n\n\n    # return the star string\n    return stars"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    # initialize a variable to store the result\n    result = 0\n    # loop through each digit in the number\n    for digit in str(n):\n        # multiply the result by 10 and add the digit's value\n        result += int(digit)\n    # return the result\n    return result"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    # initialize variables\n    result = \"\"\n    count = 1\n    \n    # loop until the desired number of stars is reached\n    while count <= n:\n        # add a star to the result string\n        result += \"*\"\n        \n        # increment the count variable\n        count += 1\n    \n    # return the result string\n    return result"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    # Initialize the number of stars\n    stars = 0\n    # Loop through each digit in the integer n\n    while n > 0:\n        # If the remainder of n divided by 10 is 0, increment the number of stars\n        if n % 10 == 0:\n            stars += 1\n        # Divide n by 10 and discard the remainder\n        n = n // 10\n    # Return the number of stars\n    return stars"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    if n < 1:\n        return \"Invalid input. Please enter a positive integer.\"\n    elif n == 1:\n        return \"*\"\n    else:\n        for i in range(1, n+1):\n            print(\"*\", end=\"\")\n        print()"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    ascii_dict = {'a': 97, 'b': 98, 'c': 99, 'd': 100, 'e': 101, 'f': 102, 'g': 103, 'h': 104, 'i': 105, 'j': 106, 'k': 107, 'l': 108,'m': 109, 'n': 110, 'o': 111, 'p': 112, 'q': 113, 'r': 114,'s': 115, 't': 116, 'u': 117, 'v': 118, 'w': 119, 'x': 120, 'y': 121, 'z': 122, 'A': 65, 'B': 66, 'C': 67, 'D': 68, 'E': 69, 'F': 70, 'G': 71, 'H': 72, 'I': 73, 'J': 74, 'K': 75, 'L': 76, 'M': 77, 'N': 78, 'O': 79, 'P': 80, 'Q': 81, 'R': 82, 'S': 83, 'T': 84, 'U': 85, 'V': 86, 'W': 87, 'X': 88, 'Y': 89, 'Z': 90, '0': 48, '1': 49, '2': 50, '3': 51, '4': 52, '5': 53, '6': 54, '7': 55, '8': 56, '9': 57}\n    return ascii_dict[k]"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    This function takes a single character as input and returns its ASCII value.\n    '''\n    ascii_value = ord(k)\n    return ascii_value"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n\n    ascii_dict = {\n        'a': 97, 'b': 98, 'c': 99, 'd': 100, 'e': 101, 'f': 102, 'g': 103, 'h': 104, 'i': 105, 'j': 106,\n        'k': 107, 'l': 108,'m': 109, 'n': 110, 'o': 111, 'p': 112, 'q': 113, 'r': 114,'s': 115, 't': 116,\n        'u': 117, 'v': 118, 'w': 119, 'x': 120, 'y': 121, 'z': 122,\n        'A': 65, 'B': 66, 'C': 67, 'D': 68, 'E': 69, 'F': 70, 'G': 71, 'H': 72, 'I': 73, 'J': 74,\n        'K': 75, 'L': 76, 'M': 77, 'N': 78, 'O': 79, 'P': 80, 'Q': 81, 'R': 82, 'S': 83, 'T': 84,\n        'U': 85, 'V': 86, 'W': 87, 'X': 88, 'Y': 89, 'Z': 90,\n        '0': 48, '1': 49, '2': 50, '3': 51, '4': 52, '5': 53, '6': 54, '7': 55, '8': 56, '9': 57\n    }\n\n    if k in ascii_dict:\n        return ascii_dict[k]\n    else:\n        return None"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    ascii_value = ord(k)\n    return ascii_value"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    ascii_value = ord(k)\n    return ascii_value"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            sum += arr[i]\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    This function takes a list as input and returns the sum of all even numbers at even positions.\n    \"\"\"\n    even_sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            if arr[i] % 2 == 0:\n                sum_even += arr[i]\n    return sum_even"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):\n    return sum(arr[i] for i in range(len(arr)) if arr[i] % 2 == 0 and i % 2 == 0)"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Find the sum of even numbers at even positions of a list.\n\n    Args:\n        arr: list, the input list to search\n\n    Returns:\n        int, the sum of even numbers at even positions of the input list\n    \"\"\"\n    even_sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n        if i % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    even_index = -1\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            if even_index == -1 or i % 2 == 0:\n                even_sum += arr[i]\n                even_index = i\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even_index = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            sum_even_index += arr[i]\n    return sum_even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    even_sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    even_indices = []\n\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n            even_indices.append(i)\n\n    return even_sum, even_indices"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n\n    Args:\n        arr: list - The list of numbers to find even sums.\n\n    Returns:\n        int - The sum of even numbers at even positions.\n    \"\"\"\n    even_sum = 0\n    even_index = 0\n\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n            if i % 2 == 0:\n                even_index += 1\n\n    return even_sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum_even_power = 0\n    for i in range(1, n+1, 2):\n        sum_even_power += i ** 5\n    return sum_even_power\n\nn = int(input(\"Enter a number: \"))\nprint(\"The sum of the first\", n, \"even natural numbers that are raised to the fifth power is:\", even_Power_Sum(n))"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    This function takes in an integer n and returns the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    # initialize the sum variable to zero\n    even_sum = 0\n    # loop through the first n even natural numbers\n    for i in range(2, n+1, 2):\n        # calculate the power of the even number and add it to the sum variable\n        even_sum += i ** 5\n    # return the sum variable\n    return even_sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0 \n    for i in range(n): \n        if i % 2 == 0: \n            sum += i**5 \n    return sum "
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i%2 == 0:\n            sum += i ** 5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum_of_evens = 0\n    for i in range(2, n+1, 2):\n        sum_of_evens += i ** 5\n    return sum_of_evens"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_Power_Sum(n): \n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_Power_Sum(n):\n    '''\n    This function takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum_of_powers = 0\n    for i in range(2, n+1, 2):\n        sum_of_powers += i ** 5\n    return sum_of_powers"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i ** 5\n    return sum"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [t[-1] for t in test_list]"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tuple_element in test_list:\n        rear_list.append(tuple_element[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_elements = []\n    for tup in test_list:\n        rear_elements.append(tup[1])\n    return rear_elements"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for tup in test_list:\n        result.append(tup[-1])\n    return result"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tuple_element in test_list:\n        rear_list.append(tuple_element[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_elements = []\n    for tuple_ in test_list:\n        rear_elements.append(tuple_[-1])\n    return rear_elements"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    \"\"\"\n    sub_tup = []\n    for i in range(len(test_tup1)):\n        sub_tup.append(test_tup1[i] - test_tup2[i])\n    return sub_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] -= test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # initialize the result tuple\n    result_tup = ()\n    # loop through the first tuple\n    for i in range(len(test_tup1)):\n        # subtract the elements of the second tuple with the same index\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    # return the result tuple\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return result"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] -= test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n\n    # Check if the lengths of the two tuples are equal\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples must have the same length.\")\n        return\n\n    # Initialize the result tuple\n    result_tup = ()\n\n    # Loop through each element of the first tuple\n    for i in range(len(test_tup1)):\n        # Check if the element exists in the second tuple with the same index\n        if i in test_tup2:\n            # Subtract the elements of the two tuples with the same index\n            result_tup += (test_tup1[i] - test_tup2[i],)\n\n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # check if the two tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples must have the same length.\")\n        return\n\n    # subtract the elements of the first tuple from the second tuple with the same index\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            test_tup1[i] -= test_tup2[i]\n\n    # return the modified tuple\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] -= test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    \"\"\"\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must have the same length.\")\n\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n\n    # Initialize sum to 0\n    sum = 0\n\n    # Loop through even indices\n    for i in range(0, n+1, 2):\n        # Calculate binomial coefficient\n        bin_coeff = math.comb(n, i)\n\n        # Check if binomial coefficient is even\n        if bin_coeff % 2 == 0:\n            # Add even binomial coefficient to sum\n            sum += bin_coeff\n\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math  \n\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n\n    # Initialize the sum to zero\n    even_sum = 0\n\n    # Loop through the values of n from 1 to n\n    for i in range(1, n+1):\n\n        # Calculate the even index binomial coefficient for i\n        even_coeff = math.comb(i, 2)\n\n        # Add the even index binomial coefficient to the sum if it's even\n        if i % 2 == 0:\n            even_sum += even_coeff\n\n    # Return the sum of even index binomial coefficients\n    return even_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n\n    # Initialize variables\n    sum_even_coeffs = 0\n    index = 0\n\n    # Calculate the even index binomial coefficients using math.comb() function\n    for i in range(2, n + 1):\n        if index % 2 == 0:\n            sum_even_coeffs += math.comb(n, i)\n        index += 1\n\n    # Return the sum of even index binomial coefficients\n    return sum_even_coeffs"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n\n    # Initialize the sum of even index binomial coefficients to zero\n    sum_even_binomial_coeffs = 0\n\n    # Iterate through the even indices of n from 0 to half of n\n    for i in range(0, int(n/2)+1):\n        # Calculate the binomial coefficient of i and n-i\n        binomial_coeff = math.comb(n, i)\n\n        # Check if the coefficient is even\n        if binomial_coeff % 2 == 0:\n            # If it is, add it to the sum of even index binomial coefficients\n            sum_even_binomial_coeffs += binomial_coeff\n\n    # Return the sum of even index binomial coefficients\n    return sum_even_binomial_coeffs"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_binomial_Coeff_Sum( n):\n    \"\"\"\n    This function takes a positive integer n as input and returns the sum of even index binomial coefficients.\n    \"\"\"\n    sum = 0\n    for i in range(1, n + 1):\n        sum += math.comb(n, i) * 2 * (i - 1) / i\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n == 1:\n        return 1\n    \n    # Initialize sum\n    sum = 0\n    \n    # Loop through even indices\n    for i in range(2, int(math.log2(n))+1, 2):\n        sum += math.comb(n, i)\n    \n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_binomial_Coeff_Sum(n):\n    # Calculate even index binomial coefficients\n    even_bin_coeff = []\n    for i in range(2, n+1, 2):\n        bin_coeff = math.comb(n, i-1)\n        even_bin_coeff.append(bin_coeff)\n\n    # Calculate the sum of even index binomial coefficients\n    even_bin_coeff_sum = sum(even_bin_coeff)\n\n    return even_bin_coeff_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n < 1:\n        print(\"Input must be a positive integer.\")\n        return None\n\n    sum_even = 0\n    for i in range(2, n+1, 2):\n        sum_even += math.comb(n, i)\n\n    return sum_even"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # initializing sum variable\n    even_sum = 0\n\n    # finding even index binomial coefficients\n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            coeff = math.comb(n, i) * math.comb(n, j)\n            if i % 2 == 0:\n                even_sum += coeff\n\n    # returning sum of even index binomial coefficients\n    return even_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n\n    # Initialize variables\n    even_sum = 0\n    i = 0\n\n    # Loop through all indices\n    while i <= n:\n        # Calculate the binomial coefficient\n        coeff = math.comb(n, i)\n\n        # Check if the index is even\n        if i % 2 == 0:\n            # Add the even index binomial coefficient to the sum\n            even_sum += coeff\n\n        # Increment the index\n        i += 1\n\n    # Return the sum of even index binomial coefficients\n    return even_sum"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = 3.14 * r * r * h\n    return vol"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 1/3 * pi * r**2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14159 * r**2 * h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    \"\"\"\n    volume = (1/3)*3.14*r**2*h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    area = 2 * 3.14 * r * r  # formula for calculating area of cylinder\n    volume = area * h / 3.14  # formula for calculating volume of cylinder\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14159*(r**2)*h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14*(r**2)*h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14159 * r**2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    area = 2 * 3.14159 * r * r\n    volume = area * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    \"\"\"\n    V = 3.14 * (r**2) * h\n    return V"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    new_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    result = {}\n    for key, value in dict.items():\n        if value >= n:\n            result[key] = value\n    return result"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_filter(dict,n):\n    return {k:v for k,v in dict.items() if v>=n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_filter(d, n):\n    return {k: v for k, v in d.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    result = {}\n    for key, value in dict.items():\n        if value >= n:\n            result[key] = value\n    return result"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {key: value for key, value in dict.items() if value >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {key: value for key, value in dict.items() if value >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0 or test_tup[i]!= test_tup[i-1]:\n            count += 1\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        if test_tup[i]!= test_tup[0]:\n            break\n        count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == len(test_tup) - 1:\n            break\n        if test_tup[i] == test_tup[i+1]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] < test_tup[i+1]:\n            break\n        count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i]!= test_tup[i-1]:\n            count += 1\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == len(test_tup) - 1:\n            break\n        if test_tup[i] == test_tup[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i]!= test_tup[0]:\n            break\n        count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i]!= test_tup[i+1]:\n            count += 1\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    num_elements = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            num_elements += 1\n        elif test_tup[i]!= test_tup[i-1]:\n            break\n    return num_elements"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n < 1: \n        return False\n    elif n == 1: \n        return 1\n    else: \n        return 4*n*(n-1) + 1"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Calculate the number of rows and columns in the decagonal matrix\n    rows = n // 2\n    cols = n - rows\n\n    # Initialize the matrix\n    matrix = [[0] * (cols + 1) for _ in range(rows + 1)]\n\n    # Fill the matrix\n    for i in range(rows + 1):\n        for j in range(cols + 1):\n            if i == 0 and j == 0:\n                matrix[i][j] = 1\n            elif i > 0 and j == 0:\n                matrix[i][j] = 2 * (rows - i + 1)\n            elif i == 0 and j > 0:\n                matrix[i][j] = 2 * (cols - j + 1)\n            elif i == 0:\n                matrix[i][j] = 1 + (2 * (cols - j + 1))\n            elif i > 0:\n                matrix[i][j] = 1 + (2 * (rows - i + 1)) + (2 * (cols - j + 1))\n            else:\n                matrix[i][j] = 1 + (2 * (rows - i + 1)) + (2 * (cols - j + 1))\n\n    # Return the nth decagonal number\n    return matrix[n][n]"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return 10**(2*n)\n"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_num_decagonal(n):\n    '''\n    This function takes an integer n and returns True if n is a decagonal number, otherwise False.\n    A decagonal number is a number in the form a(n/2)^2 + b(n/2)^2, where a and b are constants.\n    '''\n    a = 1.0\n    b = 0.5\n    return a * (n/2)**2 + b * (n/2)**2 == n"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Calculate the sum of the first n terms of the decagonal sequence\n    dec_seq = [1]\n    for i in range(2, n+1):\n        dec_seq.append(sum(dec_seq[-2:]))\n    # Return the nth term in the sequence\n    return dec_seq[n]"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return int(sum([2 ** i for i in range(n + 1)]) / 4)\n"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Initialize variables\n    num_decagonal = 1\n    num = 1\n    while num < n:\n        num_decagonal += num\n        num += 1\n    return num_decagonal"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n < 1:\n        return False\n    decagonal_numbers = [1]\n    for i in range(1, n):\n        decagonal_numbers.append(sum(map(int, str(i*i))))\n    return decagonal_numbers[n-1]"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_num_decagonal(n):\n    # Define the base number and the number of rows\n    base_num = 1\n    rows = 1\n\n    # Calculate the nth decagonal number\n    while rows <= n:\n        base_num += rows\n        rows += 2\n\n    return base_num"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Base cases\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 5\n    elif n == 2:\n        return 12\n    else:\n        # Recursive case\n        return is_num_decagonal(n-1) + is_num_decagonal(n-2)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    This function takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    found = False\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    return (found, index)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i, value in enumerate(dlist):\n        if value == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    for i, value in enumerate(dlist):\n        if value == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(set(test_list)) == len(test_list)"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) == len(set(test_list)):\n        print(\"The given list is unique.\")\n    else:\n        print(\"The given list is not unique.\")"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Write a python function to check if the elements of a given list are unique or not.\n    \"\"\"\n    unique_elements = set(test_list)\n    if len(unique_elements) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique = True\n    for i in range(len(test_list) - 1):\n        if test_list[i] == test_list[i + 1]:\n            unique = False\n            break\n    return unique"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Write a python function to check if the elements of a given list are unique or not.\n    \"\"\"\n    unique = True\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                unique = False\n                break\n        if not unique:\n            break\n    return unique"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    This function takes a list as input and returns True if all its elements are unique, and False otherwise.\n    '''\n    # Convert the list to a set to remove duplicates and check if the length is still 1\n    if len(set(test_list)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Write a python function to check if the elements of a given list are unique or not.\n    \"\"\"\n    # Create a set to store the unique elements of the list\n    unique_set = set(test_list)\n\n    # Check if the length of the set is equal to the length of the list\n    if len(unique_set) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) == len(set(test_list)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length\")\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # check if the lists have the same length\n    if len(nums1)!= len(nums2):\n        print(\"Error: lists have different lengths.\")\n        return\n\n    # subtract each element of the lists element-wise\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two lists must have the same length.\")\n    return [num1 - num2 for num1, num2 in zip(nums1, nums2)]"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n\n    if len(nums1)!= len(nums2):\n        print(\"Error: Lists have different lengths.\")\n        return\n\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The lists must have the same length\")\n\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Error: Lists must have the same length.\")\n    else:\n        for i in range(len(nums1)):\n            nums1[i] -= nums2[i]\n    return nums1"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Write a function to subtract two lists element-wise.\n    \"\"\"\n    # check if the lists have the same length\n    if len(nums1)!= len(nums2):\n        print(\"Error: The two lists must have the same length.\")\n        return\n    \n    # create a new list to store the result\n    result = []\n    \n    # loop through each element of the lists\n    for i in range(len(nums1)):\n        # subtract the elements element-wise and append the result to the new list\n        result.append(nums1[i] - nums2[i])\n    \n    # return the new list of results\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    This function takes in two lists as parameters and subtracts the element-wise values of the two lists.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # Check if the lengths of the two lists are equal\n    if len(nums1)!= len(nums2):\n        print(\"Error: The two lists must have the same length.\")\n        return\n    \n    # Initialize the result list with zeros\n    result = [0] * len(nums1)\n    \n    # Subtract each element of the two lists element-wise\n    for i in range(len(nums1)):\n        result[i] = nums1[i] - nums2[i]\n    \n    # Return the result list\n    return result"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digits = [int(digit) for digit in str(n)]\n    freq = [0] * 10\n    \n    for digit in digits:\n        freq[digit] += 1\n    \n    for digit in freq:\n        if digit > 1:\n            return False\n    \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digits = []\n    for i in range(10):\n        count = 0\n        for j in str(n):\n            if int(j) == i:\n                count += 1\n        if count <= i:\n            digits.append(i)\n    return digits"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n\n    # Check if the number is less than 10\n    if n < 10:\n        return True\n\n    # Convert the number to a string\n    num_str = str(n)\n\n    # Initialize the frequency dictionary\n    freq_dict = {}\n\n    # Iterate over each character in the string\n    for char in num_str:\n        # Check if the character is already in the dictionary\n        if char in freq_dict:\n            # Increment the frequency count\n            freq_dict[char] += 1\n        else:\n            # Add the character to the dictionary with frequency count 1\n            freq_dict[char] = 1\n\n    # Iterate over each digit in the number\n    for digit in range(10):\n        # Check if the frequency count of the digit is less than or equal to the digit itself\n        if freq_dict[str(digit)] > digit:\n            # Return False since the frequency count of the digit is greater than the digit itself\n            return False\n\n    # Return True since all digits have valid frequency count\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def validate(n):\n    '''\n    This function takes in an integer and checks whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digit_freq = {}\n    for digit in str(n):\n        if digit in digit_freq:\n            digit_freq[digit] += 1\n        else:\n            digit_freq[digit] = 1\n\n    for digit, freq in digit_freq.items():\n        if freq > digit:\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n\n    # Initialize an empty dictionary to store the frequency of each digit\n    freq = {}\n\n    # Loop through each digit in the integer\n    for digit in str(n):\n        # If the digit is already in the dictionary, increment its value by 1\n        if digit in freq:\n            freq[digit] += 1\n        # If the digit is not in the dictionary, add it with a value of 1\n        else:\n            freq[digit] = 1\n\n    # Loop through the dictionary and check if the frequency of each digit is less than or equal to the digit itself\n    for digit, count in freq.items():\n        if count > digit:\n            return False\n\n    # If all the digits have valid frequencies, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def validate(n): \n    # loop through each digit in the integer\n    for digit in str(n):\n        # get the frequency of that digit in the integer\n        freq = n.count(digit)\n        # check if the frequency is less than or equal to the digit itself\n        if freq > digit:\n            return False\n    # if no digit has a frequency greater than the digit itself, the integer is valid\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    freq = {}\n    for digit in str(n):\n        freq[digit] = freq.get(digit, 0) + 1\n\n    for digit in freq:\n        if freq[digit] > n // len(freq):\n            return False\n\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = [0] * 10  # Initialize a list of length 10 to store frequency of each digit\n\n    # Count frequency of each digit in the integer\n    for digit in str(n):\n        freq[int(digit)] += 1\n\n    # Check whether the frequency of each digit in the integer is less than or equal to the digit itself\n    for digit in freq:\n        if digit > n // 10:\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # convert the integer into a string\n    num_str = str(n)\n    \n    # create a dictionary to store the frequency of each digit\n    freq = {}\n    \n    # loop through each digit in the string\n    for digit in num_str:\n        # check if the digit is already in the dictionary\n        if digit in freq:\n            # if it is, increment its frequency by 1\n            freq[digit] += 1\n        else:\n            # if it isn't, add it to the dictionary with a frequency of 1\n            freq[digit] = 1\n    \n    # loop through each digit in the string again\n    for digit in num_str:\n        # if the frequency of the digit is greater than the digit itself, return False\n        if freq[digit] > digit:\n            return False\n    \n    # if the loop completes without returning False, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    count = [0] * 10\n\n    for digit in str(n):\n        count[int(digit)] += 1\n\n    for i in range(10):\n        if count[i] > 0 and count[i] > i:\n            return False\n\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if all(x == element for x in list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    elif list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if all(x == element for x in list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    \n    if list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    \n    for item in list:\n        if item!= element:\n            return False\n    \n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    elif list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return False\n    \n    if list[0] == element:\n        for i in range(1, len(list)):\n            if list[i]!= element:\n                return False\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = re.compile(r'a(b{2,3})')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r\"a([b]{2,3})\"\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a[^a]*b(b{2,3})'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'a(b{2,3})')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a.*b.{2,3}'\n    return re.search(pattern, text)"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile('a.*b{2,3}')\n    match = pattern.search(text)\n\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def text_match_two_three(text):\n    pattern = re.compile(r'a(?=b{2,3})')\n    return bool(pattern.search(text))"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a(b){2,3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a(?:b){2,3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'a.*?b{2,3}')\n    result = pattern.search(text)\n    return bool(result)"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Initialize a new array with repeated array a repeated k times\n    modified_array = [a for _ in range(k)]\n    modified_array.extend(a)\n    \n    # Initialize variables to keep track of the maximum sum and the current sum\n    max_sum = float('-inf')\n    curr_sum = 0\n    \n    # Loop through the modified array and calculate the current sum\n    for num in modified_array:\n        curr_sum += num\n        \n        # If the current sum becomes negative, reset it to 0\n        if curr_sum < 0:\n            curr_sum = 0\n        \n        # Update the maximum sum if the current sum becomes larger than the maximum sum\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n    \n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    This function finds the maximum subarray sum that can be formed by repeating the given array k times.\n    The array can have repeated elements.\n    '''\n    \n    # create a list to store the maximum subarray sums for different values of k\n    max_sum = [0] * k\n    \n    # loop through all possible values of k\n    for i in range(k):\n        # initialize the maximum subarray sum for this value of k\n        max_sum[i] = sum(a[:n])\n        \n        # loop through all possible starting indices for the repeated array\n        for j in range(n):\n            # calculate the maximum subarray sum for this value of k and starting index j\n            max_sum[i] = max(max_sum[i], sum(a[j:j+n]))\n    \n    # return the maximum subarray sum for the largest value of k\n    return max(max_sum)"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    max_sum = float('-inf')\n    temp_sum = 0\n    for i in range(n):\n        temp_sum += a[i]\n        if i >= k - 1:\n            temp_sum -= a[i - k + 1]\n        max_sum = max(max_sum, temp_sum)\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    # Initialize variables for the maximum subarray sum and the sum of the repeated array\n    max_sum = float('-inf')\n    repeated_sum = sum(a[0:k])\n    \n    # Iterate through the array and calculate the sum of the modified array for each element\n    for i in range(n):\n        # Calculate the sum of the modified array for the current element\n        modified_sum = repeated_sum - a[i] + a[i]\n        \n        # Update the maximum sum and repeated sum if the modified sum is greater\n        if modified_sum > max_sum:\n            max_sum = modified_sum\n            repeated_sum = modified_sum\n    \n    # Return the maximum sum of the modified array\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Initialize a variable to store the maximum sum of a contiguous subarray.\n    max_sum = float('-inf')\n    # Initialize a variable to store the current subarray sum.\n    current_sum = 0\n    # Iterate through the array.\n    for i in range(n):\n        # Add the element to the current sum.\n        current_sum += a[i]\n        # If the current sum is greater than the maximum sum, update the maximum sum.\n        if current_sum > max_sum:\n            max_sum = current_sum\n        # If the current sum becomes greater than the sum of k*n elements in the array, update the current sum to be the sum of the previous k elements in the array.\n        if current_sum > k*n:\n            current_sum -= a[i-k]\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Calculate the sum of the original array\n    original_sum = sum(a)\n    \n    # Initialize the maximum sum as the sum of the first element\n    max_sum = a[0]\n    \n    # Iterate through the modified array\n    for i in range(n):\n        # Calculate the sum of the repeated array\n        repeated_sum = k * original_sum\n        \n        # Update the maximum sum if the current sum is greater\n        if repeated_sum > max_sum:\n            max_sum = repeated_sum\n    \n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    mod_array = a * k\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(n):\n        current_sum += a[i]\n        if i >= k - 1:\n            current_sum -= a[i - k + 1]\n        if current_sum > max_sum:\n            max_sum = current_sum\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n\n    # Initialize a new array which will store the repeated array\n    repeated_array = [0] * n * k\n\n    # Create a pointer to the first element of the original array\n    curr_ptr = 0\n\n    # Loop through the original array k times\n    for i in range(k):\n\n        # Copy the original array to the repeated array\n        for j in range(n):\n            repeated_array[i*n + j] = a[j]\n\n        # Calculate the maximum subarray sum in the repeated array\n        max_sum = max_subarray_sum(repeated_array, n)\n\n        # Update the current pointer to the next element of the original array\n        curr_ptr = (curr_ptr + 1) % n\n\n    # Return the maximum subarray sum in the repeated array\n    return max_sum\n\n\ndef max_subarray_sum(arr, n): \n    '''\n    Write a function to calculate the maximum subarray sum in the given array.\n    '''\n\n    # Initialize the maximum sum and the current sum\n    max_sum = arr[0]\n    curr_sum = arr[0]\n\n    # Loop through the array\n    for i in range(1, n):\n\n        # Update the current sum\n        curr_sum = max(arr[i], curr_sum + arr[i])\n\n        # Update the maximum sum\n        max_sum = max(max_sum, curr_sum)\n\n    # Return the maximum sum\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = float('-inf')\n    for i in range(n):\n        temp_sum = 0\n        for j in range(i, n, k):\n            temp_sum += a[j]\n        if temp_sum > max_sum:\n            max_sum = temp_sum\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = float('-inf')\n    max_sum_index = -1\n    current_sum = 0\n\n    for i in range(n):\n        current_sum += a[i]\n        if current_sum >= max_sum:\n            max_sum = current_sum\n            max_sum_index = i\n\n        if i >= k-1:\n            current_sum -= a[i-k+1]\n\n    return max_sum_index"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    count = 0\n    \n    for i in range(2, n+1, 2):\n        sum_of_squares += i*i\n        count += 1\n        \n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):\n    # initialize the sum of squares to 0\n    total = 0\n    \n    # loop through the first n even natural numbers\n    for i in range(2, n+1, 2):\n        # add the square of the number to the sum of squares\n        total += i*i\n        \n    # return the sum of squares\n    return total"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(2, n+1, 2):\n        sum_of_squares += i**2\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    # initialize a variable to store the sum of squares\n    total = 0\n    # iterate from 0 to n-1\n    for i in range(n):\n        # if i is even, square it and add to the total\n        if i % 2 == 0:\n            total += i ** 2\n    # return the total\n    return total"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    count = 0\n    while count < n:\n        if count % 2 == 0:\n            sum_of_squares += count ** 2\n        count += 1\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    i = 0\n    while i < n:\n        i += 1\n        sum_of_squares += i**2\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_squares = 0\n    for i in range(n+1, 2*n+1, 2):  \n        sum_squares += i**2  \n\n    return sum_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    # initialize variables\n    sum_squares = 0\n    current_num = 2\n    \n    # loop through even natural numbers from 2 to n\n    while current_num <= n:\n        # check if current_num is even\n        if current_num % 2 == 0:\n            # add the square of current_num to sum_squares\n            sum_squares += current_num**2\n        # increment current_num\n        current_num += 1\n        \n    # return the sum_squares\n    return sum_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    total_sum = 0\n    for i in range(1, n+1):\n        if i%2==0:\n            total_sum += i*i\n    return total_sum"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    # Initialize a variable to store the maximum length of any list in the list\n    max_length = 0\n    \n    # Loop through each list in the list\n    for item in list1:\n        # Check if the length of the current list is greater than the maximum length\n        if len(item) > max_length:\n            max_length = len(item)\n            \n    # Return the list of maximum length\n    return list1[max_length]"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    This function takes a list of lists as input and returns a list containing the maximum length of each sublist.\n    '''\n    max_lengths = []\n    for sublist in list1:\n        max_length = max([len(sublist[i]) for i in range(len(sublist))])\n        max_lengths.append(max_length)\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for lst in list1:\n        if len(lst) > len(max_length_list):\n            max_length_list = lst\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for sublist in list1:\n        if len(sublist) > len(max_lengths):\n            max_lengths = sublist\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    # initialize variables\n    max_lengths = []\n    \n    # loop through each list in the input list\n    for lst in list1:\n        # loop through each element in the current list\n        for elem in lst:\n            # if the length of the current element is greater than the length of the maximum length in the `max_lengths` list, update the maximum length\n            if len(elem) > max(max_lengths):\n                max_lengths = [len(elem)]\n            elif len(elem) == max(max_lengths):\n                max_lengths.append(len(elem))\n    \n    # return the maximum length\n    return max(max_lengths)"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for i in list1:\n        if len(i) > len(max_length_list):\n            max_length_list = i\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for sublist in list1:\n        if len(sublist) > len(max_lengths) or len(sublist) == len(max_lengths):\n            max_lengths = sublist\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    # initialize an empty list to store the maximum length lists\n    max_lengths = []\n    # loop through each list in the list of lists\n    for lst in list1:\n        # loop through each element in the current list\n        for elem in lst:\n            # check if the current element is longer than any previous element in the max_lengths list\n            if len(elem) > max(max_lengths, default=0):\n                max_lengths = [len(elem)]\n            # if the current element is not longer than any previous element, append it to the max_lengths list\n            elif len(elem) == max(max_lengths, default=0):\n                max_lengths.append(len(elem))\n    # return the list of maximum length lists\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    max_list = []\n    for i in list1:\n        if len(i) > len(max_list):\n            max_list = i\n    return max_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for item in list1:\n        if len(item) > max(max_lengths) or not max_lengths:\n            max_lengths.append(len(item))\n    return max_lengths"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k):\n    # if n is less than or equal to 2, the fence cannot be painted\n    if n <= 2:\n        return 0\n    \n    # if n is greater than or equal to 3, the fence can be painted with 1 post\n    if n >= 3:\n        return 1\n    \n    # number of ways of painting the fence with n posts and k colors\n    dp = [1 for i in range(k+1)]\n    for i in range(2, n+1):\n        for j in range(1, k+1):\n            if j >= i:\n                dp[j] += dp[j-i]\n    \n    return dp[k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Initialize an array of size n+1 to store the count of ways of painting the fence for each number of colors\n    ways = [0] * (n+1)\n    ways[0] = 1 # One way of painting the fence with zero colors\n    ways[1] = 1 # One way of painting the fence with one color\n    \n    # Iterate over the remaining numbers of colors\n    for colors in range(2, k+1):\n        # Iterate over the remaining ways of painting the fence with (colors-1) colors\n        for ways_without_colors in range(n):\n            # Update the count of ways of painting the fence with (colors) colors\n            ways[colors] += ways[colors-1] * ways_without_colors\n    \n    return ways[k] # Return the count of ways of painting the fence with k colors"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k): \n    # Initialize a boolean array to keep track of whether each post has the same color as the previous post\n    post_colors = [False] * n\n    # Initialize an integer to keep track of the number of ways to paint the fence\n    ways = 1\n    \n    # Iterate through all possible permutations of the post colors\n    for i in range(1, 2**k):\n        # Convert the current permutation to a binary string\n        current_binary = bin(i)[2:]\n        # Convert the binary string to a list of booleans\n        current_colors = [current_binary[i] == '1' for i in range(k)]\n        # Check if the current colors are the same as the previous colors\n        if current_colors!= post_colors:\n            # If not, increment the number of ways to paint the fence\n            ways += 1\n            # Update the post colors to the current colors\n            post_colors = current_colors\n    \n    return ways"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    ways = [[0]*(k+1) for _ in range(n+1)]\n    ways[0][0] = 1\n    for i in range(1,n+1):\n        for j in range(k+1):\n            ways[i][j] = ways[i-1][j]\n            if i-2>=0 and ways[i-2][j-1] == 1:\n                ways[i][j] += ways[i-2][j]\n    return ways[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k):\n    # Check if n and k are valid inputs\n    if n < 2 or k < 2:\n        return 0\n    elif n == 2:\n        return k\n    elif n == 3:\n        return k * (k - 1) // 2\n    else:\n        # Calculate number of ways using recursive formula\n        # If n is odd, then there are only k ways to paint the fence if the last post has the same color as the first post\n        # If n is even, then there are k ways to paint the fence if the last two posts have the same color as the first two posts\n        return count_no_of_ways(n - 1, k) + count_no_of_ways(n - 2, k)"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k):\n    if n < 2 or k < 2:\n        return 0\n    \n    # Count the number of ways to fill the fence with exactly 2 colors\n    two_color_ways = count_no_of_ways(n - 1, k - 1)\n    \n    # Count the number of ways to fill the fence with exactly 1 color\n    one_color_ways = count_no_of_ways(n - 1, k)\n    \n    # Count the number of ways to fill the fence with 0 color\n    zero_color_ways = count_no_of_ways(n - 1, k + 1)\n    \n    # Count the number of ways to fill the fence with more than 2 colors\n    extra_color_ways = count_no_of_ways(n, k - 1) + count_no_of_ways(n, k)\n    \n    # Total number of ways to fill the fence\n    total_ways = 0\n    for way in [two_color_ways, one_color_ways, zero_color_ways, extra_color_ways]:\n        total_ways += way\n    \n    return total_ways"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k): \n    # Base case: if n is less than or equal to 2, there is only one way to paint the fence\n    if n <= 2:\n        return 1\n    \n    # Base case: if k is less than or equal to 2, there is no way to paint the fence with two adjacent posts of the same color\n    if k <= 2:\n        return 0\n    \n    # Recursive case: count the number of ways to paint the fence with n-1 posts and k colors\n    no_of_ways_for_n_minus_1 = count_no_of_ways(n-1, k)\n    \n    # Recursive case: count the number of ways to paint the fence with n-2 posts and k colors\n    no_of_ways_for_n_minus_2 = count_no_of_ways(n-2, k)\n    \n    # Combine the two results to get the total number of ways to paint the fence with n posts and k colors\n    return no_of_ways_for_n_minus_1 + no_of_ways_for_n_minus_2"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    count = 0\n    for i in range(2*n-1):\n        count += k\n    \n    for i in range(1, n+1):\n        count -= k\n        \n    return count"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 1:\n        return 1\n    \n    if k == 1:\n        return 2\n    \n    # Initialize a 2D array to store the number of ways of painting the fence\n    # with at most 2 adjacent posts having the same color\n    ways = [[0]*(k+1) for i in range(n+1)]\n    \n    # Initialize the first row and first column of the 2D array\n    ways[0][1] = 1\n    ways[1][0] = 1\n    \n    # Fill the rest of the 2D array using the recurrence relation\n    for i in range(2, n+1):\n        for j in range(1, k+1):\n            ways[i][j] = ways[i-1][j] + ways[i][j-1]\n    \n    # Return the value in the bottom-right corner of the 2D array\n    return ways[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n\n    # create a 2D array to store the number of ways to paint the fence\n    # with i rows and j colors\n    num_ways = [[0] * (k+1) for i in range(n+1)]\n\n    # initialize the first row and column of the 2D array\n    num_ways[0][0] = 1\n    num_ways[0][1] = 0\n\n    # fill the remaining 2D array using dynamic programming approach\n    for i in range(1, n+1):\n        for j in range(2, k+1):\n            if num_ways[i-1][j-1] == 1:\n                num_ways[i][j] = num_ways[i-1][j-1]\n            else:\n                num_ways[i][j] = num_ways[i-1][j] + num_ways[i][j-1]\n\n    return num_ways[n][k]"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    if m == 0:\n        return \"Error: Division by Zero\"\n    else:\n        return int(n / m)"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    result = n // m\n    if result * m == n:  # if the result is exact\n        result -= 1  # decrease the result by one\n    return result"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m   # integer division (//) rounds down to the nearest integer\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    return int(n / m)"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n//m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n\n    # checking for negative values\n    if n<0:\n        n=-n\n    if m<0:\n        m=-m\n\n    # finding the quotient using integer division\n    quotient = n//m\n\n    # rounding the quotient down to the nearest integer\n    quotient = round(quotient)\n\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # find the perimeter of the triangle\n    p = 2 * (w + h)\n    # find the semi-perimeter of the triangle\n    sp = p / 2\n    # find the area of the triangle\n    A = math.sqrt(sp * (sp - w) * (sp - h))\n    # find the length of the third side of the triangle\n    s = math.sqrt(sp * sp - A * A)\n    # calculate the third side of the triangle\n    c = A / s\n    return c"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    third_side = math.sqrt(w*w + h*h)\n    print(third_side)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    c = math.sqrt(w**2 + h**2)\n    return c"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Using pythagorean theorem to find the square root of the product of the lengths of the other two sides\n    c = math.sqrt(w**2 + h**2)\n    \n    # Return the third side\n    return c"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if w == h:\n        # if the two sides are equal, then the third side is half the sum of the two sides\n        third_side = (w + h) / 2\n    else:\n        # if the two sides are not equal, then the third side is the square root of the sum of the squares of the two sides\n        third_side = math.sqrt(w*w + h*h)\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = math.sqrt(w**2 + h**2)\n    return s"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    c = math.sqrt(w**2 + h**2)\n    return c\n"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    third_side = (w ** 2 + h ** 2) ** 0.5\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n\n    # Calculate the area of the triangle using Heron's formula\n    s = (w + h) / 2\n    area = math.sqrt(s * (s - w) * (s - h))\n\n    # Calculate the semi-perimeter of the triangle using Heron's formula\n    s = math.sqrt(w * h)\n\n    # Calculate the angle of the right triangle using the law of cosines\n    cos_theta = (area / (2 * s))\n\n    # Calculate the sine of the angle using the law of sines\n    sin_theta = math.sqrt(1 - cos_theta ** 2)\n\n    # Calculate the length of the third side of the right triangle\n    third_side = s * cos_theta\n\n    return third_side"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = float('-inf') # initialize max value to negative infinity\n    for val in listval:\n        if val > max_val: # check if val is greater than max_val\n            max_val = val # update max_val if val is greater than max_val\n    return max_val # return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = None\n    for value in listval:\n        if max_val is None or value > max_val:\n            max_val = value\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    \n    max_val = listval[0]\n    for i in range(1, len(listval)):\n        if type(listval[i]) == type(max_val):\n            max_val = max(listval[i], max_val)\n        elif type(listval[i]) > type(max_val):\n            max_val = listval[i]\n    \n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n\n    # initialize max_val to the first element of the list\n    max_val = listval[0]\n\n    # iterate over the rest of the list\n    for item in listval[1:]:\n        # if the item is greater than max_val, update max_val\n        if item > max_val:\n            max_val = item\n\n    # return the max_val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    This function takes a list as an input and returns the maximum value present in it.\n    '''\n    max_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n    max_val = listval[0]  # initialize max_val to the first value in the list\n    for val in listval:\n        if val > max_val:  # check if the current value is greater than max_val\n            max_val = val  # update max_val if it's greater\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not listval:\n        print(\"Empty list!\")\n        return None\n    \n    max_num = float('-inf')\n    for i in listval:\n        if type(i) == int:\n            if i > max_num:\n                max_num = i\n        elif type(i) == float:\n            if i > max_num:\n                max_num = i\n        elif type(i) == str:\n            if len(i) > len(max_num):\n                max_num = i\n        else:\n            print(\"Invalid data type!\")\n            return None\n    \n    return max_num"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in listval:\n        if i > max_val:\n            max_val = i\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    \n    max_val = listval[0]\n    for val in listval:\n        if val > max_val:\n            max_val = val\n    \n    return max_val"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    i = 1\n    while i * i <= number:\n        if number % i:\n            i += 1\n        else:\n            divisor_sum += i\n            i += 1\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    sum_div = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum_div += i\n    return sum_div"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = [1]\n    divisor = 2\n    while divisor <= number:\n        if number % divisor == 0:\n            divisors.append(divisor)\n        divisor += 1\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    # Initialize a variable to store the sum of divisors\n    sum_div = 0\n    \n    # Iterate through all numbers between 1 and the given number\n    for i in range(1, number+1):\n        # Check if the current number is divisible by the i-th number\n        if number % i == 0:\n            # If it is, add it to the sum of divisors\n            sum_div += i\n    \n    # Return the sum of divisors\n    return sum_div"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr): \n    # Calculate the length of the array\n    n = len(arr) \n  \n    # Initialize variables for counting inversions and count of swaps\n    inv_count = 0\n    swaps = 0 \n  \n    # Iterate through the array from the first element to the second to last \n    for i in range(1, n-1): \n  \n        # Initialize two pointers to the left and right of the current element\n        left = 0\n        right = n-1\n  \n        # Sort the sub-array on the right half of the array using the current element as pivot \n        while left < right: \n            if arr[left] > arr[right]: \n                # If the left element is greater than the right element, increment the swaps and move left pointer\n                swaps += 1\n                left += 1\n            else: \n                # If the left element is smaller than the right element, move right pointer\n                right -= 1\n  \n        # If the number of swaps is odd, increment the inversion count \n        if swaps % 2!= 0: \n            inv_count += n - left \n  \n    # Return the final inversion count \n    return inv_count "
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    count = 0\n\n    # Sort the array\n    arr.sort()\n\n    # Traverse the sorted array and count inversions\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                count += n - i - 1\n\n    return count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def merge(arr, low, mid, high):\n    left_arr = arr[low:mid+1]\n    right_arr = arr[mid+1:high+1]\n    i = j = 0\n    inv_count = 0\n    \n    while i < len(left_arr) and j < len(right_arr):\n        if left_arr[i] < right_arr[j]:\n            arr[low+i] = left_arr[i]\n            i += 1\n        else:\n            arr[low+j] = right_arr[j]\n            j += 1\n            inv_count += len(left_arr) - i\n            \n    while i < len(left_arr):\n        arr[low+i] = left_arr[i]\n        i += 1\n        \n    while j < len(right_arr):\n        arr[low+j] = right_arr[j]\n        j += 1\n        \n    return inv_count\n\n\ndef get_Inv_Count(arr):\n    n = len(arr)\n    inv_count = 0\n    for i in range(n):\n        inv_count += merge(arr, 0, i, n-1)\n    return inv_count\n"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr) \n    inv_count = 0 \n  \n    # Sort the array in ascending order \n    arr.sort() \n  \n    # Traverse through the sorted array and count inversions \n    for i in range(n): \n        for j in range(i+1, n): \n            if arr[i] > arr[j]: \n                inv_count += n-j \n    return inv_count "
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    # Helper function to merge two sorted arrays\n    def merge_sort(arr):\n        if len(arr) > 1:\n            mid = len(arr) // 2\n            left_half = arr[:mid]\n            right_half = arr[mid:]\n\n            merge_sort(left_half)\n            merge_sort(right_half)\n\n            i = j = k = 0\n\n            while i < len(left_half) and j < len(right_half):\n                if left_half[i] <= right_half[j]:\n                    arr[k] = left_half[i]\n                    i += 1\n                else:\n                    arr[k] = right_half[j]\n                    j += 1\n                k += 1\n\n            while i < len(left_half):\n                arr[k] = left_half[i]\n                i += 1\n                k += 1\n\n            while j < len(right_half):\n                arr[k] = right_half[j]\n                j += 1\n                k += 1\n\n    # Counting inversions using merge sort\n    merge_sort(arr)\n    inv_count = 0\n    i = 1\n    j = len(arr) - 1\n    while i < j:\n        if arr[i] > arr[j]:\n            inv_count += j - i\n            i += 1\n        else:\n            j -= 1\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n\n    # Sort the array in ascending order\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                arr[i], arr[j] = arr[j], arr[i]\n\n    # Count the number of inversions\n    inv_count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            inv_count += (j - i) * (arr[i] < arr[j])\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    inv_count = 0\n    for i in range(n):\n        inv_count += merge_sort(arr, i, n-1)\n    return inv_count\n\ndef merge_sort(arr, low, high):\n    if low < high:\n        mid = (low + high) // 2\n        merge_sort(arr, low, mid)\n        merge_sort(arr, mid+1, high)\n        merge_sort(arr, low, high)\n        inv_count = merge(arr, low, mid, high)\n    return inv_count\n\ndef merge(arr, low, mid, high):\n    i = low\n    j = mid+1\n    k = low\n    inv_count = 0\n    temp = [0] * len(arr)\n\n    while i <= mid and j <= high:\n        if arr[i] < arr[j]:\n            temp[k] = arr[i]\n            i += 1\n        else:\n            temp[k] = arr[j]\n            j += 1\n            inv_count += (mid - i + 1)\n        k += 1\n\n    while i <= mid:\n        temp[k] = arr[i]\n        i += 1\n        k += 1\n\n    while j <= high:\n        temp[k] = arr[j]\n        j += 1\n        k += 1\n\n    for i in range(low, high+1):\n        arr[i] = temp[i]\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    inv_count = 0\n\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += (j - i)\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr): \n    '''\n    This function takes an array as input and returns the count of inversions in it.\n    '''\n    n = len(arr) \n    # Sort the array in O(n log n) time complexity \n    arr.sort() \n    # Count inversions by keeping track of left and right pointers \n    inv_count = 0 \n    for i in range(1, n): \n        j = i \n        while j > 0 and arr[j] >= arr[j-1]: \n            # If the element at j is greater than the element at j-1, increment inv_count \n            inv_count += j-i \n            # Move left pointer to the left \n            j -= 1 \n        # Move right pointer to the right \n        while i < n-1 and arr[i] <= arr[i+1]: \n            # If the element at i is smaller than the element at i+1, increment inv_count \n            inv_count += n-i-1 \n            # Move right pointer to the right \n            i += 1 \n    # Return the count of inversions found \n    return inv_count "
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr):\n    \"\"\"\n    Write a python function to count inversions in an array.\n    \"\"\"\n    n = len(arr)\n    if n < 2:\n        return 0\n\n    # Divide the array into two halves\n    mid = n // 2\n    left = get_Inv_Count(arr[:mid])\n    right = get_Inv_Count(arr[mid:])\n\n    # Count inversions in each half\n    inv_left = count_Inversions(arr[:mid])\n    inv_right = count_Inversions(arr[mid:])\n\n    # Combine the inversions and return the total\n    return inv_left + inv_right\n\n\ndef count_Inversions(arr):\n    \"\"\"\n    Write a python function to count inversions in an array.\n    \"\"\"\n    n = len(arr)\n    if n < 2:\n        return 0\n\n    # Count inversions in the array using a divide and conquer approach\n    inv_count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n\n    return inv_count"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if type(item) == list:\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n\n    def flatten(lst):\n        result = []\n        for item in lst:\n            if type(item) == list:\n                result.extend(flatten(item))\n            else:\n                result.append(item)\n        return result\n\n    return flatten(list1)"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list += flatten_list(item)\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    This function takes a nested list as input and returns a flattened list.\n    \"\"\"\n    flattened_list = []\n    for item in lst:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if type(item) is list:\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    This function takes in a nested list and returns a flattened version of the list.\n    \"\"\"\n    result = []\n    for item in lst:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_aggregate(stdata):\n    '''\n    This function takes a list of tuples as input and returns the maximum aggregate.\n    '''\n    st = defaultdict(int)\n    max_sum = 0\n    for i, j in stdata:\n        st[i] += j\n        st[j] -= i\n    for i in st:\n        max_sum = max(max_sum, st[i])\n    return max_sum"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a defaultdict to store the maximum aggregate for each transaction\n    agg_max = defaultdict(lambda: 0)\n\n    # Iterate through the list of tuples\n    for trans in stdata:\n        # Extract the transaction amount and transaction ID\n        amt = trans[0]\n        tid = trans[1]\n\n        # Update the aggregate maximum for the transaction ID\n        agg_max[tid] = max(agg_max[tid], amt)\n\n    # Find the maximum aggregate from the defaultdict\n    max_agg = max(agg_max.values())\n\n    # Return the maximum aggregate\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Initialize a dictionary to store the maximum aggregate of each transaction\n    max_aggr = defaultdict(int)\n    # Iterate over the list of tuples\n    for trans, amount in stdata:\n        # Update the maximum aggregate of the transaction in the dictionary\n        max_aggr[trans] = max(max_aggr[trans], amount)\n    # Return the maximum aggregate across all transactions\n    return max(max_aggr.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_agg = defaultdict(int)\n    for year, value in stdata:\n        for month, amount in value:\n            max_agg[year] += amount\n    max_aggs = max(max_agg.values())\n    return max_aggs"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_dict = defaultdict(int)\n    for name, salary in stdata:\n        max_dict[name] = max(max_dict[name], salary)\n\n    return max(max_dict.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n\n    # initialize a dictionary to store the maximum aggregate for each category\n    category_max = defaultdict(int)\n\n    # loop through each tuple in the list\n    for item in stdata:\n        # add the value to the maximum aggregate for the corresponding category\n        category_max[item[0]] += item[1]\n\n    # loop through each category and find the maximum aggregate\n    max_agg = 0\n    for max_val in category_max.values():\n        if max_val > max_agg:\n            max_agg = max_val\n\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a defaultdict to store the maximum aggregate for each product\n    max_agg_dict = defaultdict(int)\n    \n    # Iterate through the list of tuples and update the max_agg_dict\n    for product, price in stdata:\n        max_agg_dict[product] = max(max_agg_dict[product], price)\n    \n    # Calculate the maximum aggregate for each product\n    max_agg_list = [max(max_agg_dict[product], key=lambda x: max_agg_dict[product].count(x)) for product in max_agg_dict]\n    \n    # Return the maximum aggregate list\n    return max_agg_list"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # create a dictionary to store the maximum aggregate per state\n    max_aggs = defaultdict(int)\n    \n    # loop through the list of tuples\n    for state, amount in stdata:\n        # check if the state is already in the dictionary\n        if state in max_aggs:\n            # update the maximum aggregate if the current amount is greater\n            if amount > max_aggs[state]:\n                max_aggs[state] = amount\n        else:\n            # add the state and amount to the dictionary\n            max_aggs[state] = amount\n    \n    # loop through the dictionary and find the maximum aggregate\n    max_agg = max(max_aggs.values())\n    \n    # return the maximum aggregate\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    This function takes a list of tuples as input and returns the maximum aggregate from the list.\n    '''\n\n    # Initialize a defaultdict to store the maximum aggregate for each employee\n    max_aggs = defaultdict(int)\n\n    # Loop through each tuple in the list\n    for tup in stdata:\n        # Extract the employee ID and the employee's maximum aggregate\n        emp_id, max_agg = tup\n\n        # Update the maximum aggregate for the employee in the defaultdict\n        max_aggs[emp_id] = max(max_aggs[emp_id], max_agg)\n\n    # Extract the maximum aggregate from the defaultdict\n    max_agg = max(max_aggs.values())\n\n    # Return the maximum aggregate\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    This function takes a list of tuples representing student information and returns the maximum aggregate.\n    '''\n    # Define a dictionary to store the aggregate of each student\n    agg_dict = defaultdict(int)\n\n    # Iterate through the list of tuples and update the aggregate of each student\n    for student, score in stdata:\n        agg_dict[student] += score\n\n    # Find the maximum aggregate and return it\n    max_agg = max(agg_dict.values())\n\n    return max_agg"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**(2*n-1), 2**(2*n)):\n        binary = bin(i)[2:]\n        if sum(binary[:n]) == sum(binary[-n:]):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_binary_seq(n):\n    \"\"\"\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    \"\"\"\n    # Initialize variables\n    count = 0\n    binary_seq = []\n    total_sum = 0\n    \n    # Generate all possible binary sequences of length 2n\n    for i in range(2**n):\n        binary_seq.append(bin(i)[2:])\n    \n    # Iterate over all binary sequences and check if their sum is the same for first n bits and last n bits\n    for i in range(len(binary_seq)):\n        if i <= n:\n            total_sum += int(binary_seq[i], 2)\n        if i >= n:\n            total_sum -= int(binary_seq[i], 2)\n        if total_sum == 0:\n            count += 1\n    \n    # Return the count of all binary sequences\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        first_bits = bin(i)[2:].zfill(n)\n        last_bits = bin(i)[-n:].zfill(n)\n        if sum(int(bit) for bit in first_bits) == sum(int(bit) for bit in last_bits):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n): \n        seq = bin(i)[2:].zfill(n*2)\n        if sum(int(i) for i in seq[:n]) == sum(int(i) for i in seq[-n:]): \n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        first = bin(i)[2:].zfill(n)\n        last = bin(2**n - i)[2:].zfill(n)\n        if first == last:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n, 2**2*n):\n        if i == 0:\n            continue\n        if sum(bin(i).lstrip('0b').zfill(n)) == sum(bin(i).lstrip('0b').zfill(2*n)):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    def is_valid_seq(seq):\n        '''\n        Helper function to check if a binary sequence is valid.\n        '''\n        if len(seq)!= 2*n:\n            return False\n        return True\n\n    def sum_of_bits(seq):\n        '''\n        Helper function to calculate the sum of the first n bits of a binary sequence.\n        '''\n        if n <= 0:\n            return 0\n        return int(seq[:n], 2) + sum_of_bits(seq[n:])\n\n    def sum_of_bits_reverse(seq):\n        '''\n        Helper function to calculate the sum of the last n bits of a binary sequence.\n        '''\n        if n <= 0:\n            return 0\n        return sum_of_bits_reverse(seq[n:]) + int(seq[-n:], 2)\n\n    count = 0\n    for i in range(1, 2**n):\n        seq = bin(i)[2:]\n        if is_valid_seq(seq) and sum_of_bits(seq) == sum_of_bits_reverse(seq):\n            count += 1\n\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # Initialize a dictionary to store the count of binary sequences\n    seq_count = {}\n\n    # Iterate from 0 to 2^(2n-1) - 1\n    for num in range(2**2*n-1):\n        # Convert binary number to a list of 0's and 1's\n        binary_num = [int(digit) for digit in bin(num)[2:]]\n\n        # Calculate the sum of the first n bits\n        first_n_sum = sum(binary_num[:n])\n\n        # Calculate the sum of the last n bits\n        last_n_sum = sum(binary_num[-n:])\n\n        # If the sums are equal, increment the count of the sequence\n        if first_n_sum == last_n_sum:\n            seq_count[binary_num] = seq_count.get(binary_num, 0) + 1\n\n    # Return the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits\n    return sum(seq_count.values())"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n): \n        first_sum = 0\n        last_sum = 0\n        for j in range(n): \n            if i & (1<<j): \n                first_sum += 2**(n-j-1) \n            else: \n                last_sum += 2**(n-j-1) \n        if first_sum == last_sum: \n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**n):\n        binary_seq = bin(i)[2:].zfill(2*n)\n        if sum(int(binary_seq[i:i+n]) for i in range(n)) == sum(int(binary_seq[n:]) for i in range(n)):\n            count += 1\n    return count\n\nprint(count_binary_seq(3)) # Output: 10"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            current_depth = 1 + dict_depth(d[key])\n            max_depth = max(max_depth, current_depth)\n        else:\n            max_depth = max(max_depth, 1)\n    return max_depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + max(dict_depth(v) for v in d.values())\n    elif isinstance(d, list):\n        return 1 + max(dict_depth(v) for v in d)\n    else:\n        return 0"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth += 1 + dict_depth(value)\n        else:\n            depth += 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            new_depth = dict_depth(d[key]) + 1\n            if new_depth > max_depth:\n                max_depth = new_depth\n    return max_depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    \"\"\"\n    Write a function to find the depth of a dictionary.\n    \"\"\"\n    if isinstance(d, dict):\n        return 1 + max(dict_depth(v) for k, v in d.items())\n    elif isinstance(d, list):\n        return max(dict_depth(v) for v in d)\n    else:\n        return 0"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n\n    # Base case\n    if not isinstance(d, dict):\n        return 0\n\n    # Recursive case\n    else:\n        # Initialize depth to zero\n        depth = 0\n\n        # Iterate through each key-value pair in the dictionary\n        for key, value in d.items():\n\n            # Recursively calculate depth of nested dictionaries\n            nested_depth = dict_depth(value)\n\n            # Update depth if nested dictionary is deeper\n            if nested_depth > depth:\n                depth = nested_depth\n\n        # Return final depth\n        return depth + 1"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth = 1 + dict_depth(value)\n            if depth > max_depth:\n                max_depth = depth\n        elif isinstance(value, list):\n            for item in value:\n                if isinstance(item, dict):\n                    depth = 1 + dict_depth(item)\n                    if depth > max_depth:\n                        max_depth = depth\n    return max_depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth += 1\n            depth += dict_depth(d[key])\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for k, v in d.items():\n        if isinstance(v, dict):\n            depth = max(depth, dict_depth(v))\n        else:\n            depth += 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for value in d.values():\n        if isinstance(value, dict):\n            depth += 1\n    return depth"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    This function takes an array of integers and three integer parameters - ranges, rotations and index.\n    The function then finds the element at the given index after rotating the array by the number of rotations.\n    '''\n\n    # Check if the array is sorted in increasing order\n    if arr[0] >= arr[1]:\n        return -1\n\n    # Perform the rotations\n    for i in range(rotations):\n        start = 0\n        end = len(arr) - 1\n        while start < end:\n            arr[start], arr[end] = arr[end], arr[start]\n            start += 1\n            end -= 1\n\n    # Calculate the new index after rotations\n    new_index = (index + rotations) % len(arr)\n\n    # Check if the new index is within the range of the array\n    if new_index < 0:\n        new_index = len(arr) + new_index\n\n    # Find the element at the new index\n    element = arr[new_index]\n\n    return element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Element(arr,ranges,rotations,index):\n    # Calculate the number of elements in the rotated array\n    n = len(arr) * rotations\n\n    # Initialize an empty list to store the rotated array\n    rotated_arr = []\n\n    # For each element in the original array, rotate it by the specified number of rotations\n    for i in range(n):\n        # Calculate the current index after rotating the array\n        j = i % n\n\n        # Calculate the index of the element in the original array\n        k = (j + index) % n\n\n        # Add the rotated element to the list of rotated elements\n        rotated_arr.append(arr[k])\n\n    # Return the element at the specified index after rotating the array\n    return rotated_arr[index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes an array, a list of ranges, a list of rotations, and an index as inputs, and returns the element at the given index after applying the given number of rotations.\n\n    Args:\n        arr (list): The list of integers to be rotated.\n        ranges (list): A list of tuples representing the ranges of the integers. Each tuple contains two integers, representing the start and end indices of a range.\n        rotations (list): A list of integers representing the number of rotations to apply to the integers.\n        index (int): The index at which the element needs to be found.\n\n    Returns:\n        The element at the given index after applying the given number of rotations.\n    \"\"\"\n\n    # Initialize the result variable to None\n    result = None\n\n    # Loop through the rotations and ranges to find the element\n    for i in range(len(rotations)):\n        start, end = ranges[i]\n        if index >= start and index < end:\n            # Check if the element is a repeated element\n            if arr[index] == arr[start:end+1]:\n                result = arr[index]\n                break\n            # Check if the element is present in the range\n            elif arr[start:end+1].count(arr[index]) > 0:\n                result = arr[index]\n                break\n\n    # Return the result if found, else return None\n    return result"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n\n    Args:\n        arr: list of integers\n        ranges: list of tuples representing the rotation ranges\n        rotations: list of integers representing the number of rotations to perform\n        index: integer representing the index to find\n\n    Returns:\n        integer representing the element at the given index after performing the required rotations.\n\n    '''\n    # initialize the result variable\n    result = arr[index]\n\n    # iterate through the rotation ranges and perform the required rotations\n    for r in ranges:\n        # get the start and end indices of the current range\n        start, end = r\n\n        # perform the required rotations\n        for i in range(start, end):\n            temp = arr[start]\n            arr[start] = arr[i]\n            arr[i] = temp\n\n        # update the result variable\n        result = arr[index]\n\n        # increment the index and start index\n        index += 1\n        start += 1\n\n    return result"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n\n    Parameters:\n    arr: List of integers\n    ranges: List of integers\n    rotations: Integer\n    index: Integer\n\n    Returns:\n    Integer: Element at the given index after rotating the array by the specified number of times.\n    '''\n\n    # Get the number of elements in the array\n    n = len(arr)\n\n    # Initialize variables to store the result\n    result = None\n\n    # Get the range of rotations\n    range_of_rotations = ranges[index]\n\n    # If there are no rotations for this index\n    if range_of_rotations == 0:\n        return arr[index]\n\n    # If rotations is greater than range of rotations\n    if rotations > range_of_rotations:\n        return None\n\n    # Calculate the rotation factor\n    rotation_factor = rotations // range_of_rotations\n\n    # If the rotation factor is 1, no need to rotate\n    if rotation_factor == 1:\n        return arr[index]\n\n    # Initialize a variable to store the new array\n    new_arr = []\n\n    # Iterate through the original array and add the elements after rotating it\n    for i in range(n):\n        if i % rotation_factor == 0:\n            # Get the element at the current index\n            current_element = arr[(i + range_of_rotations) % n]\n            # Add the element to the new array\n            new_arr.append(current_element)\n\n    # Sort the new array\n    new_arr.sort()\n\n    # Return the element at the index\n    return new_arr[index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    This function takes in an array, list of ranges, number of rotations and an index.\n    The function returns the element at the given index after rotating the array by the given number of rotations.\n    '''\n    # Get the length of the array\n    n = len(arr)\n\n    # Loop through the rotations and apply them to the array\n    for i in range(rotations):\n        if i % 2 == 0:\n            # Apply even rotations\n            for j in range(n // 2):\n                arr[j], arr[n - j - 1] = arr[n - j - 1], arr[j]\n        else:\n            # Apply odd rotations\n            for j in range(n // 2):\n                arr[j], arr[n - j - 1] = arr[n - j - 1], arr[j]\n\n    # Find the element at the given index\n    element = arr[index]\n\n    # Return the element\n    return element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # calculate the number of elements in the first range\n    n1 = ranges[0]\n\n    # calculate the number of elements in the second range\n    n2 = ranges[1]\n\n    # calculate the index of the first range\n    i1 = 0\n\n    # calculate the index of the second range\n    i2 = n1\n\n    # calculate the sum of the elements in the first range\n    sum1 = arr[0:n1].sum()\n\n    # calculate the sum of the elements in the second range\n    sum2 = arr[n1:].sum()\n\n    # calculate the remaining elements in the first range\n    remaining1 = arr[n1:]\n\n    # calculate the remaining elements in the second range\n    remaining2 = arr[0:n1]\n\n    # initialize the position of the first range\n    p1 = index - i1\n\n    # initialize the position of the second range\n    p2 = index - n1 - i2\n\n    # initialize the element that is to be found\n    target = arr[index]\n\n    # perform the rotations\n    if rotations % 2 == 0:\n        # even number of rotations\n        temp = arr[i1:p1]\n        arr[i1:p1] = arr[i2:p2]\n        arr[i2:p2] = temp\n    else:\n        # odd number of rotations\n        temp = arr[i1:p1]\n        arr[i1:p1] = arr[i2:p2]\n        arr[i2:p2] = arr[i1:p1]\n\n    # calculate the sum of the elements in the first range after rotations\n    sum1_after_rotations = arr[0:n1].sum()\n\n    # calculate the sum of the elements in the second range after rotations\n    sum2_after_rotations = arr[n1:].sum()\n\n    # calculate the remaining elements in the first range after rotations\n    remaining1_after_rotations = arr[n1:]\n\n    # calculate the remaining elements in the second range after rotations\n    remaining2_after_rotations = arr[0:n1]\n\n    # calculate the position of the target element in the first range\n    position_target_1 = target - sum1_after_rotations\n\n    # calculate the position of the target element in the second range\n    position_target_2 = target - sum2_after_rotations\n\n    # check if the target element is present in the first range\n    if position_target_1 >= 0 and position_target_1 < n1:\n        # return the element at the given position in the first range\n        return remaining1_after_rotations[position_target_1]\n    elif position_target_2 >= 0 and position_target_2 < n2:\n        # return the element at the given position in the second range\n        return remaining2_after_rotations[position_target_2]\n    else:\n        # return -1 if the target element is not present in either range\n        return -1"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes an array, range of rotations, and the index of the element that we want to find.\n    It then finds the element after the number of rotations in the given range.\n    \"\"\"\n    # Initialize the element to be searched as None\n    element = None\n\n    # Iterate through the rotations range\n    for i in range(rotations):\n        # Get the current rotation range\n        current_range = ranges[i]\n\n        # If the current index is in the current rotation range, then set the element to be searched as the current element\n        if index in current_range:\n            element = arr[current_range.index(index)]\n            break\n\n        # If the current index is not in the current rotation range, then increment the index by 1\n        else:\n            index += 1\n\n    # If the element is still None, it means that the element at the given index cannot be found.\n    if element is None:\n        print(\"Element not found\")\n\n    # Return the element\n    else:\n        return element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes an array, a list of ranges, a list of rotations, and an index as input.\n    It returns the element at the given index after the number of rotations is applied.\n    \"\"\"\n\n    # Find the original element at the given index\n    original_element = arr[index]\n\n    # Loop through each range and apply the corresponding rotation to the original element\n    for i in range(len(ranges)):\n        rotation = rotations[i]\n        if rotation == 0:\n            continue\n        elif rotation == 1:\n            original_element = find_reverse_rotate(original_element, ranges[i])\n        elif rotation == 2:\n            original_element = find_reverse_and_reverse_rotate(original_element, ranges[i])\n        elif rotation == 3:\n            original_element = find_reverse_and_reverse_and_reverse_rotate(original_element, ranges[i])\n\n    return original_element\n\n\ndef find_reverse_rotate(element, range_size):\n    \"\"\"\n    This function takes an element and a range size and returns the rotated element.\n    The rotated element is obtained by reversing the range of the element and then rotating it.\n    \"\"\"\n    return element[range_size - 1::-1]\n\n\ndef find_reverse_and_reverse_rotate(element, range_size):\n    \"\"\"\n    This function takes an element and a range size and returns the rotated element.\n    The rotated element is obtained by reversing the range of the element and then reversing it.\n    \"\"\"\n    return element[range_size - 1:0:-1]\n\n\ndef find_reverse_and_reverse_and_reverse_rotate(element, range_size):\n    \"\"\"\n    This function takes an element and a range size and returns the rotated element.\n    The rotated element is obtained by reversing the range of the element and then reversing it,\n    and then rotating it.\n    \"\"\"\n    reversed_element = element[range_size - 1:0:-1]\n    return reversed_element[range_size - 1::-1]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # Calculate the rotation count\n    rotation_count = 0\n    while rotations > 0:\n        rotations = rotations // arr[0]\n        rotation_count += 1\n\n    # Calculate the final index\n    final_index = (index + rotation_count) % len(arr)\n\n    # Find the element at the final index\n    return arr[final_index]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # Use regular expression to match words starting with letter 'p'\n    pattern = re.compile(\"^p\")\n    \n    # Use findall() method to return all matches of the pattern\n    matches = pattern.findall(words)\n    \n    # Check if the list has at least two matches\n    if len(matches) >= 2:\n        # Select two random words from the matches list\n        word1 = matches[0]\n        word2 = matches[1]\n    else:\n        # If there are less than two matches, return None\n        return None\n    \n    # Return the two selected words as a tuple\n    return (word1, word2)"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p[a-zA-Z]*'\n    for word in words:\n        if re.match(pattern, word):\n            return word, words[words.index(word) + 1]\n    return 'No words starting with p found', None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for i in range(len(words)):\n        if words[i][0] == 'p':\n            return (words[i], words[i+1])\n    return None\n"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if re.match(r'^p', word):\n            p_words.append(word)\n            if len(p_words) == 2:\n                break\n    return p_words"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p\\w+')\n    result = re.findall(pattern, words)\n    return result"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p\\w+'\n    for i in range(len(words)):\n        if re.match(pattern, words[i]):\n            return words[i], words[i+1]\n    return None, None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p'\n    p_words = [word for word in words if re.match(pattern, word)]\n    return p_words[0:2]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if word.startswith('p'):\n            p_words.append(word)\n            if len(p_words) == 2:\n                return p_words\n    return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^\\w+p\\w+$'\n    for word in words:\n        if re.match(pattern, word):\n            return word, re.sub(pattern, '', word)\n    return None, None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for word in words:\n        if re.match(\"^p[a-zA-Z]*\", word):\n            return word\n    return None"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # Initialize variables\n    max_sum = float('-inf')\n    max_seq = []\n    curr_sum = 0\n\n    # Iterate through the array from 0 to n-1\n    for i in range(n):\n        # If the current element is greater than the kth element, we need to include it in the subsequence\n        if i == k:\n            curr_sum += a[i]\n        # If the current element is greater than or equal to the (k-1)-th element, we need to include it in the subsequence\n        elif a[i] >= a[k-1]:\n            curr_sum += a[i]\n        # If the current element is less than the (k-1)-th element, we don't need to include it in the subsequence\n        else:\n            curr_sum = 0\n\n        # If the current sum is greater than the maximum sum seen so far, update the maximum sum and corresponding subsequence\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            max_seq = [i]\n        elif curr_sum == max_sum:\n            max_seq.append(i)\n\n    # Return the maximum sum of increasing subsequence and its index\n    return max_sum, max_seq[::-1]"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    \n    # initialize variables\n    max_sum = float('-inf')\n    prefix_sum = 0\n    current_sum = 0\n    subseq = []\n    \n    # iterate through the array\n    for i in range(index, n):\n        \n        # check if k is present in the current subsequence\n        if i >= k:\n            if a[i] > a[k-1]:\n                current_sum += a[i] - a[k-1]\n            else:\n                current_sum += a[k-1]\n        \n        # update the maximum sum\n        max_sum = max(max_sum, current_sum)\n        \n        # add the current value to the prefix sum\n        prefix_sum += a[i]\n        \n        # add the current value to the subsequence\n        subseq.append(a[i])\n        \n        # check if the maximum sum of the current subsequence is greater than the current maximum sum\n        if i == n-1:\n            max_sum = max(max_sum, prefix_sum)\n        \n        # check if the maximum sum of the current subsequence is greater than the sum of all previous subsequences\n        if i >= k:\n            max_sum = max(max_sum, prefix_sum + max_sum_increasing_subseq(a, n, index, k))\n    \n    # return the maximum sum and the subsequence\n    return max_sum, subseq"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n\n    # Initialize the maximum sum and the current sum\n    max_sum = float('-inf')\n    cur_sum = 0\n\n    # Initialize the prefix array with -1\n    prefix = [-1] * n\n\n    # Traverse through the array from the index to the end\n    for i in range(index, n):\n\n        # If the current element is greater than the kth element\n        if a[i] > a[k]:\n\n            # If the current element is greater than the next element in the subsequence\n            if a[i] > a[prefix[i]]:\n\n                # Update the prefix array\n                prefix[i] = prefix[prefix[i]]\n\n            # If the current element is less than or equal to the next element in the subsequence, then update the prefix array\n            else:\n\n                # Update the prefix array until the current element is greater than the next element in the subsequence\n                while a[prefix[i]] < a[i]:\n                    prefix[i] += 1\n\n            # Compute the current sum\n            cur_sum = i - prefix[i] + 1\n\n            # Update the maximum sum if the current sum is greater than the previous maximum sum\n            if cur_sum > max_sum:\n                max_sum = cur_sum\n\n    # Return the maximum sum of increasing subsequence\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    if index == n:\n        return 0\n    if index > k:\n        return max(max_sum_increasing_subseq(a, n, index+1, k),\n                   max_sum_increasing_subseq(a, n, index+1, k-1) + a[index])\n    else:\n        return max_sum_increasing_subseq(a, n, index+1, k)"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # Initialize variables\n    max_sum = float('-inf')\n    sum_curr = 0\n    start = index\n    end = index\n\n    # Iterate through the array from index to n-1\n    for i in range(index, n):\n        # If current element is greater than kth element, update the sum\n        if a[i] > a[k]:\n            sum_curr += a[i] - a[k]\n            end = i\n        # If the sum becomes greater than the maximum sum, update the maximum sum and the start and end indices\n        elif sum_curr > max_sum:\n            max_sum = sum_curr\n            start = index\n            end = i\n            # Update the sum for the current increasing subsequence\n            sum_curr = a[i] - a[k]\n            # Move the start index to the current index\n            start = i\n\n    # Return the maximum sum of increasing subsequence from prefix until index and including kth element\n    return max_sum, start, end"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # Create a table to store the maximum sum of increasing subsequence starting from each index\n    table = [[0] * n for _ in range(n)]\n\n    # Initialize the maximum sum of increasing subsequence starting from each index\n    for i in range(n):\n        table[i][i] = a[i]\n\n    # Fill the table using dynamic programming approach\n    for gap in range(2, n):\n        for i in range(n - gap):\n            j = i + gap\n            # The maximum sum of increasing subsequence ending at index j is the maximum of the current value and the maximum sum of increasing subsequence ending at index i and k\n            table[i][j] = max(a[i] + table[i + 1][j - 1], a[j] + table[i][j - 1], a[k] + table[i][j - 1], a[i] + table[i + 1][j])\n\n    # Return the maximum sum of increasing subsequence starting from index k\n    return table[0][k]"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    This function takes a list of integers a, the length of the list n, the index of the current element i, and the kth element j as input, and returns the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i.\n    \"\"\"\n    \n    if i == n-1:  # base case: the last element\n        return a[i]\n    \n    # compute the maximum sum of increasing subsequence ending at i-1\n    max_sum = max_sum_increasing_subseq(a, n, i-1, k)\n    \n    # if the current element a[i] is smaller than or equal to the kth element j, the maximum sum of increasing subsequence ending at i-1 is extended\n    if a[i] <= j:\n        max_sum = max(max_sum, a[i] + max_sum_increasing_subseq(a, n, i-1, k))\n    \n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n\n    # Initialize variables\n    max_sum = float('-inf')\n    max_sum_seq = []\n\n    # Find the maximum sum of increasing subsequence from prefix until the ith index\n    for i in range(index, n):\n        # If the current element is less than or equal to k, then add it to the current subsequence\n        if a[i] <= k:\n            curr_sum = a[i] + max_sum_seq[-1] if max_sum_seq else a[i]\n            max_sum_seq.append(curr_sum)\n            max_sum = max(max_sum, curr_sum)\n\n    # Find the maximum sum of increasing subsequence from prefix until the kth index\n    for i in range(k, n):\n        # If the current element is greater than or equal to k, then add it to the current subsequence\n        if a[i] >= k:\n            curr_sum = a[i] + max_sum_seq[-1] if max_sum_seq else a[i]\n            max_sum_seq.append(curr_sum)\n            max_sum = max(max_sum, curr_sum)\n\n    # Return the maximum sum of increasing subsequence from prefix until the kth index\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    This function takes an array a, its length n, and an index i, and returns the maximum sum of increasing subsequence from prefix\n    until ith index and also including a given kth element which is after i, i.e., k > i.\n    \"\"\"\n\n    # Initialize an array dp of length n+1 to store the maximum sum of increasing subsequence ending at each index\n    dp = [0] * (n+1)\n\n    # Initialize a variable max_sum to store the maximum sum\n    max_sum = 0\n\n    # Traverse through all possible prefixes from 0 to i\n    for j in range(n+1):\n\n        # If j is equal to 0, then there is no increasing subsequence ending at 0, hence dp[j] = 0\n        if j == 0:\n            dp[j] = 0\n\n        # If j is greater than 0, then there is an increasing subsequence ending at j-1, which can either include the current element a[j] or not\n        else:\n\n            # If a[j] is greater than a[j-1], then the maximum sum of increasing subsequence ending at j can be obtained by including the current element a[j]\n            if a[j] > a[j-1]:\n                dp[j] = dp[j-1] + a[j]\n\n            # If a[j] is less than or equal to a[j-1], then the maximum sum of increasing subsequence ending at j can be obtained by not including the current element a[j]\n            else:\n                dp[j] = dp[j-1]\n\n    # Traverse through all possible prefixes from i to n\n    for j in range(index, n+1):\n\n        # If j is equal to k, then the maximum sum of increasing subsequence from prefix until ith index and including the kth element is dp[j]\n        if j == k:\n            max_sum = dp[j]\n\n        # If j is greater than k, then the maximum sum of increasing subsequence from prefix until ith index and including the kth element is dp[j] + max_sum_of_increasing_subseq_from_prefix_until_j-1\n        else:\n            max_sum = max(max_sum, dp[j] + max_sum_increasing_subseq(a, n, j-1, k))\n\n    # Return the maximum sum of increasing subsequence from prefix until ith index and including the kth element\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n\n    for i in range(1, n + 1):\n        for j in range(1, index + 1):\n            if a[i - 1] <= a[j - 1]:\n                dp[i][j] = max(dp[i][j - 1], dp[i - 1][j]) + a[i - 1]\n            else:\n                dp[i][j] = dp[i - 1][j]\n\n    max_sum = 0\n    for i in range(index, n + 1):\n        if i > k:\n            max_sum = max(max_sum, dp[n][i])\n\n    return max_sum"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    #create a copy of the input tuple\n    tuplex_copy = deepcopy(tuplex)\n    #initialize a list to store the result\n    colon = []\n    #iterate through the columns in the tuple\n    for i in range(m):\n        #create a list to store the row of the colon\n        row = []\n        #iterate through the rows in the column\n        for j in range(n):\n            #add the value of the current row to the list of the colon\n            row.append(tuplex_copy[i][j])\n        #add the row to the list of colon\n        colon.append(row)\n    #return the colon as a list of lists\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if n == 1:\n        return [tuplex[i] for i in range(m)]\n    elif n % 2 == 0:\n        colons = [tuplex[i:i+n//2] for i in range(0, m, n//2)]\n        return [deepcopy(tuplex[m:m+n//2])] + colons\n    else:\n        colons = [tuplex[i:i+n//2+1] for i in range(0, m, n//2+1)]\n        return [deepcopy(tuplex[m:m+n//2])] + colons"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    new_tuplex = deepcopy(tuplex) # Make a copy of the input tuple\n    i,j = m-1,n-1 # Initialize indices\n    while i>=0 and j>=0:\n        new_tuplex[i][j] = ':'\n        i -= 1\n        j -= 1\n    return new_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Initialize a new tuple to store the colon\n    colon = ()\n    # Loop through each element of the tuple\n    for i in range(m):\n        # Loop through each column of the tuple\n        for j in range(n):\n            # Add an element to the colon tuple\n            colon = colon + (tuplex[i][j],)\n    # Return the colon tuple\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon_tup = deepcopy(tuplex)\n    for i in range(m):\n        colon_tup = (colon_tup[i],)\n    for i in range(n-m):\n        colon_tup = (colon_tup[0],)\n    return colon_tup"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    new_tuplex = deepcopy(tuplex)\n    for i in range(m):\n        new_tuplex = new_tuplex[:i] + (new_tuplex[i],) + new_tuplex[i+1:]\n    for i in range(n):\n        new_tuplex = new_tuplex[:i] + (new_tuplex[i],) + new_tuplex[i+1:]\n    return tuple(new_tuplex)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    col = []\n    for i in range(m):\n        col.append(deepcopy(tuplex[i*n:(i+1)*n]))\n    return col"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Write a function to get a colon of a tuple.\n    \"\"\"\n    if m == 0:\n        return (tuplex[n-1], )\n    else:\n        return (tuplex[n-1], ) + colon_tuplex(tuplex, m-1, n)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    col = []\n    for i in range(m):\n        row = []\n        for j in range(n):\n            row.append(deepcopy(tuplex[i][j]))\n        col.append(tuple(row))\n    return tuple(col)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    col = []\n    for i in range(m):\n        col.append(deepcopy(tuplex[i]))\n    for i in range(m,n):\n        col.append(deepcopy(tuplex[i]))\n    return col"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Calculate the maximum product from each list\n    max_product1 = max(nums1)\n    max_product2 = max(nums2)\n    \n    # Check if the number of products to be selected is valid\n    if N > max(len(nums1), len(nums2)):\n        raise ValueError(\"The number of products to be selected is greater than the maximum possible.\")\n    \n    # Initialize the list to store the selected products\n    selected_products = []\n    \n    # Iterate over the products to be selected and append the largest product from each list to the list\n    for i in range(N):\n        selected_product = max(max_product1, max_product2)\n        selected_products.append(selected_product)\n        \n        # Update the maximum product from each list\n        if nums1[0] * max_product1 > max_product1:\n            max_product1 = nums1[0] * max_product1\n        if nums2[0] * max_product2 > max_product2:\n            max_product2 = nums2[0] * max_product2\n    \n    # Return the list of selected products\n    return selected_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Initialize variables to store the largest products\n    largest_products = []\n    \n    # For each number in the first list\n    for num1 in nums1:\n        # Initialize variables to store the largest products for this number\n        num1_largest_products = []\n        \n        # For each number in the second list\n        for num2 in nums2:\n            # Calculate the product of the two numbers\n            product = num1 * num2\n            \n            # Check if this product is larger than the current largest product for this number\n            if product > num1_largest_products[0]:\n                # If so, update the largest product for this number\n                num1_largest_products = [product]\n            elif product == num1_largest_products[0]:\n                # If the product is the same as the current largest product, add it to the list\n                num1_largest_products.append(product)\n        \n        # Check if this list of largest products has N elements, and if so, add it to the list of largest products\n        if len(num1_largest_products) == N:\n            largest_products.append(max(num1_largest_products))\n    \n    # Return the list of largest products\n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the two lists in decreasing order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    # Calculate the largest products\n    max_product1 = nums1[N-1] * nums2[N-1]\n    max_product2 = nums1[N-2] * nums2[N-2]\n    max_product = max(max_product1, max_product2)\n    # Calculate the remaining products\n    remaining_products = []\n    for i in range(N-2, -1, -1):\n        remaining_products.append(nums1[i] * nums2[N-i-1])\n    # Return the list of remaining products\n    return remaining_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n\n    # Initialize two empty lists to store the products of the factors\n    products1 = []\n    products2 = []\n\n    # Loop through the two lists and calculate the products of the factors\n    for i in range(N):\n        # Calculate the product of the i-th factor in nums1 and nums2\n        product1 = nums1[i] * nums2[i]\n\n        # Calculate the product of the i-th factor in nums2 and nums1\n        product2 = nums2[i] * nums1[i]\n\n        # Add the products to their respective lists\n        products1.append(product1)\n        products2.append(product2)\n\n    # Sort the products in descending order\n    sorted_products1 = sorted(products1, reverse=True)\n    sorted_products2 = sorted(products2, reverse=True)\n\n    # Return the first N products\n    return sorted_products1[:N], sorted_products2[:N]"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Find the maximum value in each list\n    max1, max2 = max(nums1), max(nums2)\n\n    # Initialize the result list\n    result = []\n\n    # Loop through the specified number of times\n    for i in range(N):\n        # Find the product of the maximum value from both lists\n        product = max1 * max2\n\n        # Update the result list\n        result.append(product)\n\n        # If the product is greater than the maximum value in either list, update the maximum value\n        if product > max(nums1, nums2):\n            max1 = max(nums1)\n            max2 = max(nums2)\n        else:\n            max1 = max(nums2)\n            max2 = max(nums1)\n\n    return result"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    Find the specified number of largest products from two given lists, selecting one factor from each list.\n\n    Parameters:\n    nums1 (list[int]): A list of integers.\n    nums2 (list[int]): A list of integers.\n    N (int): The number of largest products to find.\n\n    Returns:\n    list[int]: A list of the specified number of largest products.\n    \"\"\"\n    # Convert both lists to sets to remove duplicates, then convert back to lists\n    nums1 = list(set(nums1))\n    nums2 = list(set(nums2))\n\n    # Sort the lists in ascending order\n    nums1.sort()\n    nums2.sort()\n\n    # Initialize the result list and a variable to keep track of the number of products found\n    result = []\n    i, j = 0, 0\n    num_products = 0\n\n    # Loop through the sorted lists and select pairs of factors\n    while num_products < N:\n        # Check if there are at least two more elements in each list\n        if i == len(nums1) - 1 or j == len(nums2) - 1:\n            break\n\n        # Compute the product of the current pair of factors\n        product = nums1[i] * nums2[j]\n\n        # If the product is greater than the last product found or equal to the specified number, add it to the result\n        if not result or product > result[-1] or num_products == N:\n            result.append(product)\n            i += 1\n            j += 1\n            num_products += 1\n\n    return result"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the two input lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    # Find the largest product of two smallest elements in each list\n    result = nums1[0] * nums2[0]\n    # Loop over all the remaining elements in both lists\n    for i in range(1, N):\n        # Multiply the previous result by the next smallest element of nums1 and the next largest element of nums2\n        result = max(result, nums1[i] * nums2[N-i-1])\n    return result"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Find the maximum value in each list\n    max1 = max(nums1)\n    max2 = max(nums2)\n\n    # Initialize a dictionary to store the products of the factors\n    factor_product = {}\n\n    # Calculate the product of each factor of nums1 and nums2\n    for i in range(1, max1 + 1):\n        for j in range(1, max2 + 1):\n            product = i * j\n            if product in factor_product:\n                factor_product[product] += 1\n            else:\n                factor_product[product] = 1\n\n    # Sort the products in descending order\n    sorted_products = sorted(factor_product.items(), key=lambda x: x[0], reverse=True)\n\n    # Select the N largest products from the sorted products\n    largest_products = sorted_products[:N]\n\n    # Find the product of the largest N products\n    product = 1\n    for i in range(N):\n        product *= largest_products[i][0]\n\n    return product"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Initialize variables for the largest products and their indices\n    max1 = max2 = max3 = 0\n    ind1 = ind2 = ind3 = 0\n    \n    # Loop through each element of the lists\n    for i in range(N):\n        # Calculate the product of the current element and the first element of the second list\n        prod1 = nums1[i] * nums2[0]\n        \n        # If the product is greater than the largest product found so far, update the largest products and their indices\n        if prod1 > max1:\n            max3 = max2\n            max2 = max1\n            max1 = prod1\n            ind3 = ind2\n            ind2 = ind1\n            ind1 = i\n        \n        # Calculate the product of the current element and the second element of the second list\n        prod2 = nums1[i] * nums2[1]\n        \n        # If the product is greater than the largest product found so far, update the largest products and their indices\n        if prod2 > max2:\n            max3 = max2\n            max2 = prod2\n            ind3 = ind2\n            ind2 = i\n        \n        # Calculate the product of the current element and the third element of the second list\n        prod3 = nums1[i] * nums2[2]\n        \n        # If the product is greater than the largest product found so far, update the largest products and their indices\n        if prod3 > max3:\n            max3 = prod3\n            ind3 = i\n            \n    # Return the indices of the largest products found\n    return ind1, ind2, ind3"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    Find the specified number of largest products from two given lists, selecting one factor from each list.\n\n    Args:\n    nums1 (list): List of integers.\n    nums2 (list): List of integers.\n    N (int): The number of products to find.\n\n    Returns:\n    list: A list of N integers, representing the largest products from nums1 and nums2.\n    \"\"\"\n\n    # Initialize variables\n    max_product1 = float('-inf')\n    max_product2 = float('-inf')\n    largest_product_set = set()\n\n    # Find the largest products in nums1 and nums2\n    for num1 in nums1:\n        for num2 in nums2:\n            product = num1 * num2\n            if product > max_product1:\n                max_product1 = product\n            if product > max_product2:\n                max_product2 = product\n\n            # Check if this product has already been selected\n            if (num1, num2) in largest_product_set or (num2, num1) in largest_product_set:\n                break\n\n            # Add the product to the set of largest products\n            largest_product_set.add((num1, num2))\n\n            # Check if we have found the desired number of largest products\n            if len(largest_product_set) == N:\n                break\n\n    # Return the largest products\n    return list(largest_product_set)"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximum(a, b):\n    '''\n    This function takes two numbers as input and returns the maximum of them.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n\nprint(maximum(4,8))"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximum(a, b):\n    \"\"\"\n    This function finds the maximum of two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximum(a,b):   \n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns their maximum value.\n    \"\"\"\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Write a function to convert a given string to a tuple of characters.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Write a function to convert a given string to a tuple of characters.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Write a function to convert a given string to a tuple of characters.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    while n & 1 == 0: \n        n >>= 1 \n    return n "
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Convert the integer to binary format\n    binary_n = bin(n)[2:]\n    # Initialize the leftmost unset bit to 0\n    unset_bit = 0\n    # Iterate through the binary string from right to left\n    for i in range(len(binary_n)-1, -1, -1):\n        # If the bit is 0, increment the unset bit count\n        if binary_n[i] == '0':\n            unset_bit += 1\n        # If the bit is 1, set the unset bit count to 0 and break out of the loop\n        else:\n            break\n    # Return the binary number with the unset bit set to 1\n    return int(binary_n[:unset_bit] + '1' + binary_n[unset_bit:], 2)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    while n & (n - 1)!= 0:\n        n = n & (n - 1)\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize the leftmost unset bit to 0\n    unset_bit = 0\n    \n    # Iterate over the bits of n starting from the right\n    for i in range(31, -1, -1): \n        if n & (1 << i): \n            # If the i-th bit is set, unset_bit becomes the i-th unset bit\n            unset_bit = i\n            break\n    \n    # Set the i-th bit of the binary number n to 1\n    n |= 1 << unset_bit\n    \n    # Return the modified binary number n\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Write a python function to set the left most unset bit.\n    \"\"\"\n    while n & 1 == 0:\n        n >>= 1\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n\n    # Initialize the count of unset bits\n    count = 0\n\n    # Iterate through the binary representation of n\n    for bit in bin(n)[2:]:\n        if bit == '0':\n            count += 1\n        else:\n            break\n\n    # Return the bitwise OR of n and (1 << count)\n    return n | (1 << count)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n\n    # Iterate through each bit of the number\n    for bit in range(32):\n\n        # Check if the bit is set to 1\n        if n & (1 << bit):\n\n            # If the bit is set to 1, set it to 0 and exit the loop\n            n &= ~(1 << bit)\n            break\n\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize a variable to keep track of the rightmost set bit\n    rightmost_set_bit = 31\n\n    # Loop through the binary representation of n starting from the rightmost set bit\n    while n & (1 << rightmost_set_bit) == 0:\n        rightmost_set_bit -= 1\n\n    # Set the leftmost unset bit by shifting the binary representation of n to the left by the number of bits to the left of the unset bit\n    n |= (1 << rightmost_set_bit)\n\n    # Return the modified binary representation of n\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n\n    # Initialize the leftmost unset bit as -1\n    left_most_unset_bit = -1 \n\n    # Iterate through the bits of the binary representation of n\n    for i in range(len(bin(n)[2:])): \n        # If the bit is 0, set the leftmost unset bit to i\n        if bin(n)[2:][i] == '0': \n            left_most_unset_bit = i \n            break \n\n    # Set the leftmost unset bit to 0 if n is even and 1 if n is odd\n    if (n & 1) == 0: \n        left_most_unset_bit = 0\n    else: \n        left_most_unset_bit = 1\n\n    # Set the unset bits to 1\n    for i in range(left_most_unset_bit + 1): \n        n = n | (1 << i)\n\n    return n "
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    while n & (1 << 31):\n        n &= ~(1 << 31)\n    return n"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_cone(r, h):\n    \"\"\"\n    This function finds the volume of a cone.\n\n    :param r: radius of the cone (float)\n    :param h: height of the cone (float)\n    :return: volume of the cone (float)\n    \"\"\"\n    return math.pi * r ** 2 * h / 3"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    # calculate the volume using formula V = (1/3)\u03c0r^2h\n    V = (1/3) * math.pi * r ** 2 * h\n    return V"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function takes two arguments, radius and height of the cone, and calculates the volume of the cone.\n    '''\n    volume = math.pi * (r**2) * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    # calculate the volume of the cone\n    volume = math.pi * r * r * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V = (1/3) * math.pi * r**2 * h\n    return V"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    area = math.pi * r * r\n    volume = area * h / 3\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V = math.pi * r**2 * h\n    return V"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi * r ** 2 * h / 3\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3)*math.pi*r**2*h\n    return volume"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # Calculate the binary representation of n \n    bin_rep = bin(n)[2:]\n\n    # Check if binary representation ends with 0's \n    for i in range(len(bin_rep)-1, -1, -1): \n        if bin_rep[i] == '0': \n            return 2**i "
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n): \n    '''\n    This function takes an integer n as input and returns the highest power of 2 that is less than or equal to n.\n    '''\n    # Initialize a variable to store the highest power of 2\n    highest_power = 1\n    \n    # Iterate through the bits of n and check if each bit is set to 1\n    while n > 1:\n        # Check if the last bit of n is set to 1\n        if n % 2 == 1:\n            # If it is, update the highest power of 2\n            highest_power *= 2\n        \n        # Divide n by 2 to reduce its size by one power of 2\n        n //= 2\n        \n    # Return the highest power of 2 found\n    return highest_power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    highest = 1\n    while highest <= n:\n        highest <<= 1\n    return highest"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n):\n    while n & (n-1)!= 0:\n        n &= n-1\n    return n"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # loop through all powers of 2 from 1 to n\n    for power in range(1, n+1):\n        # check if the current power is greater than or equal to n\n        if power >= n:\n            # if it is, return the current power\n            return power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    # if n is already a power of 2, return n\n    if n & (n - 1) == 0:\n        return n\n\n    # find the next power of 2 greater than n\n    p = 1\n    while p < n:\n        p <<= 1\n\n    return p"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    # Initialize variables\n    highest = 1\n    power = 0\n\n    # Loop through powers of 2 until we find the highest power of 2 that is less than or equal to n\n    while power * 2 <= n:\n        highest = power * 2\n        power += 1\n\n    return highest"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    highest = 0\n    while n > highest:\n        highest = highest * 2\n    return highest"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # Initialize the variable to store the highest power of 2\n    highest_power = 1\n    \n    # Loop through the numbers from 2 to n\n    for i in range(2, n+1):\n        # If i is a power of 2, update the highest power\n        if i == 2**highest_power:\n            highest_power += 1\n    \n    # Return the highest power of 2 that is less than or equal to n\n    return highest_power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return 2 ** (int(n.bit_length()/2))"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0: \n        return 2 \n    elif n == 1: \n        return 1\n    else: \n        return find_lucas(n-1) + find_lucas(n-2)\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The\", n, \"th lucas number is:\", find_lucas(n))"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 1\n    else:\n        lucas_num = 2\n        for i in range(3, n+1):\n            lucas_num = (lucas_num**2) + 1\n        return lucas_num"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0: \n        return 2\n    elif n == 1: \n        return 1\n    else: \n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 2\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 2\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    # Loop through each element in the list\n    for i in range(len(list_)):\n        # Format the element using the given format string\n        formatted_element = string.format(list_[i])\n        # Replace the element in the list with the formatted element\n        list_[i] = formatted_element\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i, item in enumerate(list_):\n        list_[i] = string.format(item)"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    formatted_list = []\n    for element in list_:\n        formatted_list.append(string.format(element))\n    return formatted_list"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    \"\"\"\n    Write a function to apply a given format string to all of the elements in a list.\n    \"\"\"\n    formatted_list = []\n    for item in list_:\n        formatted_list.append(string.format(item))\n    return formatted_list"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    \"\"\"\n    Write a function to apply a given format string to all of the elements in a list.\n    \"\"\"\n    # Loop through each element in the list\n    for i in range(len(list_)):\n        # Apply the format string to the element\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {l2[i]: l3[i]}\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n    # Initialize an empty dictionary to store the nested dictionary\n    nested_dict = {}\n    # Loop through the three lists and add the values to the nested dictionary\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            for k in range(len(l3)):\n                # Add the values to the nested dictionary\n                nested_dict[(l1[i], l2[j], l3[k])] = i * 100 + j * 10 + k * 1\n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # combine the three lists into one dictionary\n    data = dict(zip(l1, l2), **zip(l1, l3))\n    # return the nested dictionary\n    return data"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # initializing empty dictionary\n    data = {}\n    # iterating over each list and adding keys and values to the nested dictionary\n    for i in range(len(l1)):\n        data[l1[i]] = {'name': l2[i], 'age': l3[i]}\n    return data"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # initialize an empty dictionary\n    data = {}\n    # loop through each list\n    for i in range(len(l1)):\n        # create a new key for each list\n        key = 'list' + str(i+1)\n        # add the list to the dictionary with the new key\n        data[key] = l1[i]\n    # loop through each list\n    for i in range(len(l2)):\n        # create a new key for each list\n        key = 'list' + str(i+1)\n        # add the list to the dictionary with the new key\n        data[key] = l2[i]\n    # loop through each list\n    for i in range(len(l3)):\n        # create a new key for each list\n        key = 'list' + str(i+1)\n        # add the list to the dictionary with the new key\n        data[key] = l3[i]\n    # return the final dictionary\n    return data"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def convert_list_dictionary(*args):\n    '''\n    This function takes multiple lists as input and returns a nested dictionary.\n    '''\n    # Create an empty dictionary\n    d = {}\n    # Iterate over the input lists\n    for i in range(len(args)):\n        # If the input list is not a dictionary, convert it to a dictionary\n        if not isinstance(args[i], dict):\n            args[i] = {i: args[i]}\n        # Add the dictionary to the main dictionary\n        d.update(args[i])\n    # Return the main dictionary\n    return d"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n    data = {}\n    for i in range(len(l1)):\n        data[l1[i]] = {'name': l2[i], 'age': l3[i]}\n    return data"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def convert_list_dictionary(*args):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    data = {}\n    for lst in args:\n        for i in range(len(lst)):\n            if lst[i] in data:\n                data[lst[i]].append(lst[i+1])\n            else:\n                data[lst[i]] = [lst[i+1]]\n    return data"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Create an empty dictionary to hold the nested dictionary\n    nested_dict = {}\n    \n    # Loop through each list and add each element as a key with an empty list as its value\n    for i in range(len(l1)):\n        nested_dict[l1[i]] = []\n    \n    # Loop through each list and add each element as a value in the corresponding key's list\n    for i in range(len(l2)):\n        nested_dict[l2[i]].append(l3[i])\n    \n    # Return the nested dictionary\n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # create a dictionary with the lists as values\n    dictionary = {\n        'list1': l1,\n        'list2': l2,\n        'list3': l3\n    }\n    # convert the dictionary to a nested dictionary\n    nested_dictionary = dict(zip(dictionary.keys(), zip(*dictionary.values())))\n    return nested_dictionary"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 4\n    elif n == 4:\n        return 9\n    elif n == 5:\n        return 16\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5) + n, get_max_sum(n-1))"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 5\n    elif n == 4:\n        return 14\n    elif n == 5:\n        return 42\n    else:\n        return max((get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5)), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n    else:\n        return max((get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5)), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n    \n    if n % 2 == 0:\n        return max(get_max_sum(n/2), n)\n    else:\n        return max(get_max_sum(n/2) + get_max_sum(n/3), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n\n    # Base case\n    if n == 1:\n        return 1\n    \n    # Recursive case\n    else:\n        return max((get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5)), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 6\n    elif n == 4:\n        return 15\n    elif n == 5:\n        return 30\n    else:\n        return get_max_sum(n-1) + get_max_sum(n-2) + get_max_sum(n-3) + get_max_sum(n-4) + get_max_sum(n-5)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 10\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n    elif n == 2:\n        return n * (1/2)\n    elif n == 3:\n        return n * (1/3)\n    elif n == 4:\n        return n * (1/4)\n    elif n == 5:\n        return n * (1/5)\n    else:\n        return get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5) + n"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # base case\n    if n == 1:\n        return 1\n    \n    # recursive case\n    else:\n        return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for element in input_list:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_list = [element]\n        elif len(element) == max_length:\n            max_list.append(element)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    \"\"\"\n    Returns the list with the maximum length, or an empty list if there is no list with a maximum length.\n    \"\"\"\n    if not input_list:  # If the input list is empty, return an empty list\n        return []\n    max_length = len(input_list[0])\n    max_list = input_list[0]\n    for lst in input_list[1:]:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            max_list = lst\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n    return input_list[max_length]"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = len(max(input_list, key=len))\n    result = []\n    for item in input_list:\n        if len(item) == max_length:\n            result.append(item)\n    return result"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = None\n    for item in input_list:\n        if len(str(item)) > max_length:\n            max_length = len(str(item))\n            max_list = item\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for element in input_list:\n        if len(element) > max_length:\n            max_length = len(element)\n    return max_length"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    This function takes in a list and returns the list with the maximum length.\n    '''\n    max_length = 0\n    max_list = []\n\n    # Loop through the list and compare each element's length to the current maximum length\n    for element in input_list:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_list = [element]\n        elif len(element) == max_length:\n            max_list.append(element)\n\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    \"\"\"\n    This function takes a list as an input and returns the list with the maximum length.\n    \"\"\"\n    max_len = 0\n    max_list = []\n    \n    for item in input_list:\n        if len(item) > max_len:\n            max_len = len(item)\n            max_list = item\n            \n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    lengths = [len(sublist) for sublist in input_list]\n    max_length = max(lengths)\n    return input_list[lengths.index(max_length)]"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    test_set = set(test_tup)\n    return len(test_tup) == len(test_set)"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # Convert the tuple to a set to check for duplicates\n    test_set = set(test_tup)\n    # Check if the set is empty, which means there are no duplicates\n    if len(test_set) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(set(test_tup)) == len(test_tup)"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # Create a set to store the elements of the tuple\n    my_set = set(test_tup)\n    # Check if the length of the set is equal to the length of the original tuple\n    if len(my_set) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    \"\"\"\n    Write a function to check if given tuple contains no duplicates.\n    \"\"\"\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_freq = {}\n    for char in str1:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n    \n    for char in str1:\n        if char_freq[char] == 1:\n            return char\n"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # initialize an empty dictionary to store character frequency\n    freq_dict = {}\n\n    # iterate through the string\n    for char in str1:\n        # if the character is already in the dictionary, increment its frequency\n        if char in freq_dict:\n            freq_dict[char] += 1\n        # if the character is not in the dictionary, add it with frequency 1\n        else:\n            freq_dict[char] = 1\n\n    # iterate through the dictionary and find the first non-repeated character\n    for char in freq_dict:\n        if freq_dict[char] == 1:\n            return char"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n\n    # Create a dictionary to store the count of each character\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    # Traverse the string and find the first non-repeated character\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n\n    # If no non-repeated character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # Create a dictionary to store the characters and their count\n    char_count = {}\n\n    # Iterate through the string and count the characters\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    # Iterate through the string again and find the first non-repeating character\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n\n    # If no non-repeating character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in str1:\n        if char_count[char] == 1:\n            return char"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Write a python function to find the first non-repeated character in a given string.\n    \"\"\"\n    # Initialize a dictionary to keep track of the frequency of each character\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n\n    # Find the first non-repeated character\n    for char in str1:\n        if freq[char] == 1:\n            return char\n\n    # If no non-repeated character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Write a python function to find the first non-repeated character in a given string.\n    \"\"\"\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    for char in str1:\n        if freq[char] == 1:\n            return char\n    \n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in char_count:\n        if char_count[char] == 1:\n            return char\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    This function takes a string as an input and returns the first non-repeated character in the string.\n    '''\n    # Create a dictionary to store the count of each character in the string\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            # Increment the count of the character in the dictionary\n            char_count[char] += 1\n        else:\n            # Add the character to the dictionary with a count of 1\n            char_count[char] = 1\n    \n    # Initialize variables for the first non-repeating character and its count\n    first_non_repeating_char = None\n    count = 0\n    \n    # Loop through the dictionary and update the first non-repeating character and its count\n    for char, count in char_count.items():\n        if count == 1:\n            first_non_repeating_char = char\n            break\n    \n    # Return the first non-repeating character\n    return first_non_repeating_char"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # create a dictionary to store the frequency of each character in the string\n    freq_dict = {}\n    for char in str1:\n        if char in freq_dict:\n            freq_dict[char] += 1\n        else:\n            freq_dict[char] = 1\n\n    # find the first non-repeated character\n    for char in str1:\n        if freq_dict[char] == 1:\n            return char\n\n    # if no non-repeated character is found, return None\n    return None"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    match = re.match(regex, string)\n\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if not re.match(regex, string):\n        return False\n    else:\n        return True"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.search(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.search(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef check_char(string):\n    '''\n    This function takes a string as input and returns True if the string starts and ends with the same character or False otherwise.\n    '''\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    # Use regular expressions to match the pattern in the string\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n\n    # Check if there is a match and if the start and end characters are the same\n    if match:\n        return match.group(1) == string[0]\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    return bool(re.match(regex, string))\n\nstring = input(\"Enter a string: \")\nif check_char(string):\n    print(\"The string starts and ends with the same character.\")\nelse:\n    print(\"The string does not start and end with the same character.\")"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # create a list of numbers and sort them\n    numbers = [a, b, c]\n    numbers.sort()\n\n    # check if there are an even or odd number of numbers\n    if len(numbers) % 2 == 0:\n        # find the average of the two middle numbers\n        median = (numbers[1] + numbers[2]) / 2\n    else:\n        # find the middle number\n        median = numbers[1]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numbers = [a, b, c]\n    numbers.sort()\n    middle = len(numbers) // 2\n    if len(numbers) % 2 == 0:\n        return (numbers[middle - 1] + numbers[middle]) / 2\n    else:\n        return numbers[middle]"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n\n    # Sort the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # Find the middle index\n    mid_index = len(sorted_numbers) // 2\n\n    # If the length of the sorted array is odd, the middle number is the median\n    if len(sorted_numbers) % 2 == 1:\n        return sorted_numbers[mid_index]\n\n    # If the length of the sorted array is even, the median is the average of the two middle numbers\n    else:\n        return (sorted_numbers[mid_index - 1] + sorted_numbers[mid_index]) / 2"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_numbers(a, b, c):\n    # find the median of a, b, and c\n    sorted_numbers = sorted([a, b, c])\n    n = len(sorted_numbers)\n    if n % 2 == 0:\n        # if there are two elements, take the average\n        median = (sorted_numbers[n // 2 - 1] + sorted_numbers[n // 2]) / 2\n    else:\n        # if there is only one element, return it\n        median = sorted_numbers[n // 2]\n    # return the median\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_numbers(a, b, c):\n    sorted_numbers = sorted([a, b, c])\n    midpoint = len(sorted_numbers) // 2\n    return sorted_numbers[midpoint]"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # Find the middle index of the sorted array\n    middle_index = len(sorted_numbers) // 2\n\n    # Calculate the median based on the middle index\n    if len(sorted_numbers) % 2 == 0:\n        median = (sorted_numbers[middle_index - 1] + sorted_numbers[middle_index]) / 2\n    else:\n        median = sorted_numbers[middle_index]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    sorted_list = sorted([a, b, c])\n    if len(sorted_list) % 2 == 0:\n        median = (sorted_list[len(sorted_list) // 2 - 1] + sorted_list[len(sorted_list) // 2]) / 2\n    else:\n        median = sorted_list[len(sorted_list) // 2]\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    # Sort the numbers in ascending order\n    nums = sorted([a, b, c])\n    \n    # If the numbers are an odd number of elements, the median is the middle element\n    if len(nums) % 2 == 1:\n        return nums[1]\n    # If the numbers are an even number of elements, the median is the average of the two middle elements\n    else:\n        return (nums[1] + nums[2]) / 2"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    This function takes three numbers as input and returns their median.\n    \"\"\"\n    numbers = [a, b, c]\n    numbers.sort()\n    if len(numbers) % 2 == 0:\n        median = (numbers[len(numbers)//2] + numbers[len(numbers)//2 - 1]) / 2\n    else:\n        median = numbers[len(numbers)//2]\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    # sort the three numbers\n    numbers = sorted([a, b, c])\n\n    # find the index of the middle number\n    mid = len(numbers) // 2\n\n    # if the length of the array is odd, the median is the middle number\n    if len(numbers) % 2 == 1:\n        return numbers[mid]\n\n    # if the length of the array is even, the median is the average of the two middle numbers\n    else:\n        return (numbers[mid - 1] + numbers[mid]) / 2"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    Write a function to compute the sum of digits of each number of a given list.\n    \"\"\"\n    total_sum = 0\n    for num in nums:\n        total_sum += sum(int(digit) for digit in str(num))\n    return total_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total_sum = 0\n    for num in nums:\n        digits = []\n        while num > 0:\n            digits.append(num % 10)\n            num //= 10\n        total_sum += sum(digits)\n    return total_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total += sum(int(digit) for digit in str(num))\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        sum_num = 0\n        for digit in str(num):\n            sum_num += int(digit)\n        result.append(sum_num)\n    return result"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # Initialize a variable to store the sum of digits\n    total = 0\n    # Loop through each number in the list\n    for num in nums:\n        # Convert the number to a string and then split it into a list of digits\n        digits = list(str(num))\n        # Loop through each digit and add it to the total\n        for digit in digits:\n            total += int(digit)\n    # Return the total sum of digits\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total += sum([int(digit) for digit in str(num)])\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return [sum(int(d) for d in str(n)) for n in nums]"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # initialize a variable to store the sum of digits\n    total_sum = 0\n\n    # iterate through each number in the list\n    for num in nums:\n        # convert the number to a string to extract its digits\n        digit_sum = sum(int(digit) for digit in str(num))\n        # add the digit sum to the total sum\n        total_sum += digit_sum\n\n    # return the total sum of digits\n    return total_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # initialize a variable to store the sum of digits of all numbers in the list\n    total = 0\n    \n    # loop through each number in the list\n    for num in nums:\n        # convert the number to a string and split it into its individual digits\n        digits = list(str(num))\n        \n        # loop through each digit in the number\n        for digit in digits:\n            # convert the digit to an integer and add it to the total sum\n            total += int(digit)\n    \n    # return the total sum of digits\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum(int(digit) for num in nums for digit in str(num))"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = []\n    for i in range(min(len(test_tup1), len(test_tup2))):\n        result.append(test_tup1[i] ^ test_tup2[i])\n    while len(test_tup1) > len(result):\n        result.append(test_tup1.pop(0))\n    while len(test_tup2) > len(result):\n        result.append(test_tup2.pop(0))\n    return tuple(result)"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_sum = 0\n    for i in range(len(test_tup1)):\n        xor_sum += test_tup1[i] ^ test_tup2[i]\n    return xor_sum"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] ^ test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = 0\n    for i in range(len(test_tup1)):\n        xor_result ^= test_tup1[i] ^ test_tup2[i]\n    return xor_result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] ^ test_tup2[i])\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Using bitwise xor operation to perform bitwise operation across the tuples\n    result = tuple(x ^ y for x, y in zip(test_tup1, test_tup2))\n    \n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] ^ test_tup2[i],)\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    \"\"\"\n\n    # Initialize variables\n    xor_sum = 0\n\n    # Loop through the tuples and perform bitwise xor operation\n    for i in range(len(test_tup1)):\n        xor_sum |= test_tup1[i] ^ test_tup2[i]\n\n    return xor_sum"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] ^ test_tup2[i])\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    \"\"\"\n    # initialize an empty list to store the result\n    result_list = []\n    \n    # loop through each element in the two tuples\n    for i in range(len(test_tup1)):\n        # perform bitwise xor operation between the two elements\n        xor_result = test_tup1[i] ^ test_tup2[i]\n        \n        # add the result to the result_list\n        result_list.append(xor_result)\n        \n    # return the result_list as the output\n    return result_list"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n\n    Args:\n    test_list (list): List of tuples to extract frequency of unique tuples from.\n\n    Returns:\n    int: Number of unique tuples in the given list.\n    \"\"\"\n    # Create a dictionary to store unique tuples and their frequency\n    unique_tuples = {}\n    for tup in test_list:\n        # Convert tuple to a string so that tuples with the same values can be counted as the same\n        key = str(tup)\n        if key in unique_tuples:\n            unique_tuples[key] += 1\n        else:\n            unique_tuples[key] = 1\n\n    # Return the number of unique tuples in the list\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n\n    # Create an empty dictionary to store the frequency of each tuple\n    freq = {}\n\n    # Loop through each element in the list and add its frequency to the dictionary\n    for item in test_list:\n        if item not in freq:\n            freq[item] = 1\n        else:\n            freq[item] += 1\n\n    # Create an empty list to store the unique tuples\n    unique = []\n\n    # Loop through each element in the dictionary and add the tuple to the list if it's unique\n    for key, value in freq.items():\n        if value == 1:\n            unique.append(key)\n\n    # Return the length of the unique list\n    return len(unique)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # convert list to set to remove duplicates\n    unique_tuples = set(test_list)\n    # count the number of unique tuples\n    freq = len(unique_tuples)\n    return freq"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    This function extracts the number of unique tuples in the given list.\n\n    Args:\n        test_list (list): A list of tuples\n\n    Returns:\n        int: The number of unique tuples in the given list\n    \"\"\"\n    freq_dict = {}\n    for item in test_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    freq_dict = {}\n    for item in test_list:\n        if tuple(item) in freq_dict:\n            freq_dict[tuple(item)] += 1\n        else:\n            freq_dict[tuple(item)] = 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    This function takes a list as input and returns the number of unique tuples in the list.\n    \"\"\"\n    freq_dict = {}\n    for elem in test_list:\n        if tuple(elem) not in freq_dict:\n            freq_dict[tuple(elem)] = 1\n        else:\n            freq_dict[tuple(elem)] += 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for item in test_list:\n        if (tuple(sorted(item)),) in freq_dict:\n            freq_dict[(tuple(sorted(item)),)] += 1\n        else:\n            freq_dict[(tuple(sorted(item)),)] = 1\n    return sum(freq_dict.values())"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n\n    # convert the list to a set to remove duplicates\n    unique_set = set(test_list)\n\n    # convert the set to a list and sort it to get the frequency of tuples\n    freq_list = sorted(list(unique_set), key=lambda x: (len(x), x))\n\n    # return the length of the frequency list\n    return len(freq_list)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for i in test_list:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return freq"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    freq = {}\n    for item in test_list:\n        freq[item] = freq.get(item, 0) + 1\n    return len(freq)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(sum(test_tup1[i]))\n        result.append(sum(test_tup2[i]))\n    return tuple(result)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Initialize a variable to store the result\n    result_tup = ()\n    # Loop through the first tuple\n    for i in range(len(test_tup1)):\n        # Initialize a variable to store the sum of corresponding elements in the two tuples\n        sum_val = test_tup1[i] + test_tup2[i]\n        # Append the sum to the result tuple\n        result_tup += (sum_val,)\n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] + test_tup2[i],)\n    return result_tup\n"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Initialize a new empty tuple\n    result = ()\n    \n    # Loop through each element in the first tuple\n    for i in range(len(test_tup1)):\n        # Append the result of adding the corresponding element from the two tuples\n        result = result + (test_tup1[i] + test_tup2[i],)\n    \n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n\n    # Initializing an empty list to store the sum of tuple elements\n    sum_tup = []\n\n    # Looping through the first nested tuple\n    for i in range(len(test_tup1)):\n\n        # Looping through the second nested tuple\n        for j in range(len(test_tup2[i])):\n\n            # Adding the elements of each tuple at their respective index\n            sum_tup.append(test_tup1[i][j] + test_tup2[i][j])\n\n    # Returning the sum of the tuple elements at each index\n    return sum_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    final_result = []\n    for i in range(len(test_tup1)):\n        final_result.append(sum(test_tup1[i], test_tup2[i]))\n    return final_result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Initialize the result tuple\n    result_tup = ()\n    # Loop through the indices of the first tuple\n    for i in range(len(test_tup1)):\n        # Append the sum of the corresponding elements of the two tuples to the result tuple\n        result_tup += (test_tup1[i] + test_tup2[i],)\n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] + test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup2[i])):\n            test_tup1[i][j] += test_tup2[i][j]\n    return test_tup1"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Initialize a new empty list to store the result\n    result = []\n\n    # Iterate through each element of the first tuple\n    for i in range(len(test_tup1)):\n        # Initialize a variable to store the sum of corresponding elements in both tuples\n        temp_sum = 0\n\n        # Iterate through each element of the second tuple\n        for j in range(len(test_tup2[i])):\n            # Add the corresponding elements and add them to the temp_sum variable\n            temp_sum += test_tup1[i][j] + test_tup2[i][j]\n\n        # Add the final temp_sum to the result list\n        result.append(temp_sum)\n\n    # Return the final result list\n    return result"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n\nprint(minimum(5, 10))  # Output: 5\nprint(minimum(-10, 0))  # Output: -10"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return min(a, b)"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def minimum(a,b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def minimum(a, b):\n    '''\n    This function takes in two numbers and returns the minimum of the two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def minimum(a, b):\n    '''\n    This function takes two numbers as input and returns the minimum of the two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return a if a < b else b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def minimum(a, b):\n    '''\n    This function takes two numbers as input and returns the minimum of them.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    for element in tuple1:\n        if element in tuplex:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        print(f\"{tuplex} is found in the tuple\")\n    else:\n        print(f\"{tuplex} is not found in the tuple\")"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex, tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuple1:\n        if i in tuplex:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex,tuple1): \n    \"\"\"\n    This function takes two tuples as input and returns True if the first element of the first tuple exists in the second tuple, and False otherwise.\n    \"\"\"\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    This function takes in two tuples as inputs and returns True if the element exists in the second tuple,\n    otherwise, it returns False.\n    \"\"\"\n    for element in tuplex:\n        if element in tuple1:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex,tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    for i in tuplex:\n        if i in tuple1:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex, tuple1):\n    if tuplex in tuple1:\n        print(\"Element exists in the tuple\")\n    else:\n        print(\"Element does not exist in the tuple\")"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0: \n        return \"The number is even.\"\n    else: \n        return \"The number is odd.\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd or even.\n    '''\n    if x % 2 == 0:\n        return \"The parity of the number {} is even.\".format(x)\n    else:\n        return \"The parity of the number {} is odd.\".format(x)"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd or even.\n    '''\n    if x % 2 == 0:\n        print(x, \"is even\")\n    else:\n        print(x, \"is odd\")\n"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd or even.\n    '''\n\n    if x % 2 == 0: # if the number is even, it's odd\n        return \"Even\"\n    else: # if the number is odd, it's even\n        return \"Odd\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    \n    if x % 2 == 0: # if x is even\n        return True # return True because even numbers have odd parity\n    else:\n        return False # return False because odd numbers have even parity"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n\n    # Check if the input is an integer\n    if not isinstance(x, int):\n        print(\"Error: input must be an integer\")\n        return\n\n    # Calculate the parity using the formula for odd parity numbers\n    parity = (x & 1) ^ 1\n\n    # Print the result\n    print(\"The parity of {} is {}\".format(x, parity))"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2!= 0: # If the remainder of the division by 2 is not 0\n        print(\"The parity of\", x, \"is odd\")\n    else:\n        print(\"The parity of\", x, \"is even\")"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n\n    # Function to calculate the parity of a number\n    def parity(n):\n        count = 0\n        for i in str(n):\n            if int(i) % 2 == 0:\n                count += 1\n        if count % 2 == 0:\n            return True\n        else:\n            return False\n\n    # If the input is a positive integer, return the parity of the number\n    if type(x) == int and x > 0:\n        return parity(x)\n    # If the input is not a positive integer, raise an exception\n    else:\n        raise ValueError(\"The input should be a positive integer.\")"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0: \n        return False \n    else: \n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Parity(x):\n    \"\"\"\n    Write a python function to find whether the parity of a given number is odd or even.\n    \"\"\"\n    if x % 2 == 0:\n        return \"The number is even.\"\n    else:\n        return \"The number is odd.\""
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n\n    Args:\n        n (int): A positive integer.\n\n    Returns:\n        int: The next bigger number.\n    \"\"\"\n    # Convert the given number to a string\n    num_str = str(n)\n\n    # Find the length of the number\n    length = len(num_str)\n\n    # Create an empty list to store the rearranged digits\n    rearranged_digits = []\n\n    # Iterate through the digits from right to left\n    for i in range(length - 1, -1, -1):\n        # If the digit is 9, increment the next digit and set it to 0\n        if int(num_str[i]) == 9:\n            rearranged_digits.append(0)\n            num_str[i] = '0'\n        else:\n            # Increment the current digit\n            num_str[i] = str(int(num_str[i]) + 1)\n            break\n\n    # Convert the rearranged digits list back to a number\n    next_bigger = int(num_str)\n\n    return next_bigger"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n\n    Example:\n    >>> rearrange_bigger(234)\n    4321\n    >>> rearrange_bigger(123456789)\n    9876543210\n    >>> rearrange_bigger(12345678)\n    87654321\n    \"\"\"\n\n    def reverse(num):\n        \"\"\"\n        Helper function to reverse the digits of a number.\n        \"\"\"\n        return int(\"\".join(reversed(str(num))))\n\n    def next_bigger(num):\n        \"\"\"\n        Helper function to find the next bigger number by rearranging the digits.\n        \"\"\"\n        digits = str(num)\n        max_digit = max(int(digit) for digit in digits)\n        min_digit = min(int(digit) for digit in digits)\n        for digit in digits:\n            if int(digit) > max_digit:\n                digits[digits.index(digit)] = str(min_digit + 1)\n                break\n        return int(\"\".join(digits))\n\n    return next_bigger(reverse(n))"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n\n    # Initialize a list to store the digits of the given number\n    digits = [int(digit) for digit in str(n)]\n\n    # Find the index of the first digit that is greater than 9\n    index = next((i for i, digit in enumerate(digits) if digit > 9), None)\n\n    # If no digit is greater than 9, return -1 as there is no next bigger number\n    if index is None:\n        return -1\n\n    # Find the index of the digit that is the next one greater than 9 after the digit at index\n    next_index = next((i for i in range(index+1, len(digits)) if digits[i] > digits[index]), None)\n\n    # If no digit is found, return -1 as there is no next bigger number\n    if next_index is None:\n        return -1\n\n    # Swap the digits at index and next_index\n    digits[index], digits[next_index] = digits[next_index], digits[index]\n\n    # Reverse the list of digits\n    digits.reverse()\n\n    # Convert the list of digits back to a number and return it\n    return int(''.join(str(digit) for digit in digits))"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    # Find the largest digit in the number\n    max_digit = max(int(digit) for digit in str(n))\n    \n    # Rearrange the digits of the number\n    new_number = ''.join(str(int(digit) + max_digit) for digit in str(n))\n    \n    # Return the rearranged number\n    return int(new_number)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    digits = list(str(n))\n    digits.sort(reverse=True)\n    return int(''.join(digits))"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    # Helper function to check if a number is a palindrome\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    # Helper function to check if a number has a certain number of digits\n    def has_n_digits(num, n):\n        return len(str(num)) == n\n\n    # Helper function to count the number of digits in a number\n    def count_digits(num):\n        return len(str(num))\n\n    # Helper function to check if a number is a power of 2\n    def is_power_of_two(num):\n        return (num & (num - 1)) == 0\n\n    # Helper function to find the binary representation of a number\n    def bin_representation(num):\n        return format(num, 'b')\n\n    # Helper function to swap the positions of two digits in a binary number\n    def swap_digits(bin_num, i, j):\n        return bin_num[:i] + bin_num[i+1:j] + bin_num[j+1:i+1] + bin_num[i] + bin_num[j]\n\n    # Helper function to reverse the binary representation of a number\n    def reverse_bin_representation(bin_num):\n        return bin_num[::-1]\n\n    # Helper function to rearrange the digits of a number\n    def rearrange_digits(num, n):\n        # Find the power of 2 that is greater than or equal to the number of digits of the input number\n        power_of_two = 1\n        while power_of_two < n:\n            power_of_two *= 2\n\n        # Convert the input number to a binary number\n        bin_num = bin_representation(num)\n\n        # Reverse the binary representation of the input number\n        bin_num = reverse_bin_representation(bin_num)\n\n        # Find the minimum number of swaps required to rearrange the digits of the number\n        min_swaps = 0\n        for i in range(len(bin_num) - 1):\n            if bin_num[i] == bin_num[i+1]:\n                min_swaps += 1\n\n        # Perform the swaps required to rearrange the digits of the number\n        if min_swaps % 2 == 1:\n            for i in range(len(bin_num) - 1):\n                if bin_num[i]!= bin_num[i+1]:\n                    j = i + 1\n                    while bin_num[j] == bin_num[i]:\n                        j += 1\n                    bin_num = swap_digits(bin_num, i, j)\n\n        # Convert the binary representation of the number back to an integer\n        rearranged_num = int(bin_representation(int(bin_num, 2)), 2)\n\n        # Check if the rearranged number is a power of 2\n        if is_power_of_two(rearranged_num):\n            rearranged_num -= 1\n\n        # Check if the rearranged number is greater than or equal to the original number\n        if num < rearranged_num:\n            return rearranged_num\n        else:\n            return None\n\n    # Perform the rearrangement of the digits of the input number\n    rearranged_num = rearrange_digits(n, count_digits(n))\n\n    # If the rearranged number is not None, it means that the input number is not a palindrome and we can check if it has the same digits as the original number\n    if rearranged_num is not None:\n        if has_n_digits(n, count_digits(n)):\n            return rearranged_num\n        else:\n            return None\n\n    # Check if the input number is a palindrome\n    if is_palindrome(n):\n        return n\n\n    # Check if the input number has the same digits as the original number\n    if has_n_digits(n, count_digits(n)):\n        return n\n\n    # If the rearranged number is still None, it means that the input number cannot be rearranged to form a bigger number\n    return None"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Convert the given number to a string\n    num_str = str(n)\n    # Create a list of characters to shuffle\n    shuffle_list = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0']\n    # Initialize a new number with the same length as the original number\n    new_num = [0] * len(num_str)\n    # Loop through the original number and create a new number with the same digits as the original number\n    for i in range(len(num_str)):\n        new_num[i] = shuffle_list.pop(shuffle_list.index(num_str[i]) + 1)\n    # Convert the new number to an integer and return it\n    return int(''.join(new_num))"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    num_str = str(n)\n    num_list = [int(x) for x in num_str]\n    if num_list[-1] == 9:\n        num_list[-1] = 0\n        num_list.append(9)\n    else:\n        num_list[-1] += 1\n    new_num = 0\n    for digit in num_list:\n        new_num += digit * 10**(len(num_list)-1-num_list.index(digit))\n    return new_num"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n\n    # Check if the number is already the largest number\n    if n == 999999999:\n        return 1000000000\n\n    # Find the length of the number\n    length = len(str(n))\n\n    # If the length of the number is odd, add a 1 to the beginning of the number\n    if length % 2 == 1:\n        n = str(10) + n\n\n    # Rearrange the digits of the number\n    n = str(int(n[1:]) + 1) + n[0]\n\n    # If the new number is shorter than 9, add 9 to the beginning\n    if len(n) < 9:\n        n = '9' + n\n\n    # Convert the new number to an integer and return it\n    return int(n)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Remove leading zeros from the input number\n    n = str(n)\n    while n[0] == '0':\n        n = n[1:]\n    # Initialize the list of digits\n    digits = []\n    for i in n:\n        digits.append(int(i))\n    # Find the index of the largest digit\n    max_index = 0\n    for i in range(1, len(digits)):\n        if digits[i] > digits[max_index]:\n            max_index = i\n    # Swap the digits at the end of the list and the index of the largest digit\n    digits[-1], digits[max_index] = digits[max_index], digits[-1]\n    # Convert the list of digits back to a string and return it\n    return ''.join(str(digit) for digit in digits)"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a min heap for the first array\n    min_heap = []\n    for num in nums1:\n        heapq.heappush(min_heap, -num)\n    \n    # Initialize the result list and the count\n    result = []\n    count = 0\n    \n    # Traverse through the second array and pop the minimum elements to create pairs\n    for num in nums2:\n        # If the heap is empty or the minimum element in the heap is greater than the current number, add the pair to the result list and decrease the count\n        if not min_heap or -heapq.heappop(min_heap) > num:\n            heapq.heappush(min_heap, -num)\n            result.append([heapq.heappop(min_heap), num])\n            count += 1\n        \n        # If the count is equal to k, return the result list\n        if count == k:\n            return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if not nums1 or not nums2:\n        return []\n\n    heap1 = []\n    heap2 = []\n\n    # Add all elements from nums1 and nums2 to the heaps\n    heapq.heapify(heap1)\n    heapq.heapify(heap2)\n\n    for num in nums1 + nums2:\n        # Check if the size of the heaps is less than k\n        if len(heap1) < k and len(heap2) < k:\n            heapq.heappush(heap1, num)\n            heapq.heappush(heap2, -num)\n        elif len(heap1) < k:\n            # If the size of heap1 is less than k, add the smallest element from heap1 to heap2\n            heapq.heappush(heap2, heapq.heappop(heap1) + num)\n        else:\n            # If the size of heap2 is less than k, add the smallest element from heap2 to heap1\n            heapq.heappush(heap1, heapq.heappop(heap2) - num)\n\n    # Extract the k smallest pairs\n    result = []\n    while len(heap1) > 0 and len(heap2) > 0:\n        result.append([heapq.heappop(heap1), heapq.heappop(heap2)])\n\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a min heap to store the pairs\n    min_heap = []\n\n    # Iterate through the first array\n    for num1 in nums1:\n        # Iterate through the second array\n        for num2 in nums2:\n            # Check if the sum of the current elements is smaller than k and not already in the heap\n            if num1 + num2 < k and (num1 + num2, (num1, num2)) not in min_heap:\n                # Add the pair to the heap\n                heapq.heappush(min_heap, (num1 + num2, (num1, num2)))\n\n                # If the heap size exceeds k, remove the smallest element from the heap\n                if len(min_heap) > k:\n                    heapq.heappop(min_heap)\n\n    # Extract the k smallest pairs from the heap and return them\n    return [pair[1] for pair in heapq.nsmallest(k, min_heap)]"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    min_heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if i == 0 or j == 0 or (i > 0 and nums1[i] > nums1[i-1]) or (j > 0 and nums2[j] > nums2[j-1]):\n                heapq.heappush(min_heap, (nums1[i] + nums2[j], (i, j)))\n                if len(min_heap) > k:\n                    heapq.heappop(min_heap)\n    return min_heap"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # create a list of tuples with the elements of nums1 and nums2 and their indices\n    pairs = [(num1, num2, i) for i, num1 in enumerate(nums1) for num2 in nums2]\n    \n    # sort the list of tuples in descending order based on the first element of each tuple\n    heapq.heapify(pairs)\n    \n    # initialize the result list\n    result = []\n    \n    # find the k smallest pairs and add them to the result list\n    while len(result) < k:\n        smallest = heapq.heappop(pairs)\n        if len(result) == 0 or smallest[0] <= result[-1][0]:\n            result.append(smallest)\n    \n    # return the result list\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a min heap to store the smallest pairs\n    min_heap = []\n\n    # Iterate through both the arrays and add the smaller elements to the heap\n    for num1 in nums1:\n        for num2 in nums2:\n            # Add the smaller element to the heap\n            heapq.heappush(min_heap, (min(num1, num2), (num1, num2)))\n            # If the size of the heap exceeds k, remove the largest element from the heap\n            if len(min_heap) > k:\n                heapq.heappop(min_heap)\n\n    # Extract the smallest k pairs and return them as a list of tuples\n    result = []\n    while min_heap:\n        pair = heapq.heappop(min_heap)\n        result.append(pair[1])\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a min-heap to store the smallest k numbers\n    min_heap = []\n    for num in nums1:\n        heapq.heappush(min_heap, num)\n        if len(min_heap) > k:\n            heapq.heappop(min_heap)\n    \n    # Iterate through the second array and find the k smallest pairs\n    result = []\n    for num in nums2:\n        if len(result) == k:\n            break\n        if num > min_heap[0]:\n            result.append((min_heap[0], num))\n            heapq.heappop(min_heap)\n    \n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Use a min heap to store the pairs of elements in descending order\n    min_heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            pair = (nums1[i] + nums2[j], (i, j))\n            if len(min_heap) < k or pair[0] > min_heap[0][0]:\n                heapq.heappush(min_heap, pair)\n            elif pair[0] == min_heap[0][0]:\n                heapq.heappushpop(min_heap, pair)\n    return min_heap"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    \n    # sort the two arrays\n    nums1.sort()\n    nums2.sort()\n    \n    # create a min heap of size k\n    min_heap = []\n    \n    # initialize two pointers to the start of the arrays\n    i = 0\n    j = 0\n    \n    # while we have k pairs and both pointers still exist\n    while len(min_heap) < k and i < len(nums1) and j < len(nums2):\n        # calculate the sum of the elements at the current pointers\n        current_sum = nums1[i] + nums2[j]\n        \n        # if the current sum is smaller than the smallest element in the heap, add it to the heap and increment the pointers\n        if not min_heap or current_sum < min_heap[0][1]:\n            heapq.heappush(min_heap, (current_sum, (nums1[i], nums2[j])))\n            i += 1\n            j += 1\n        # if the current sum is larger than the smallest element in the heap, remove the smallest element from the heap and increment the pointer\n        else:\n            heapq.heappop(min_heap)\n            j += 1\n    \n    # create a list to store the pairs\n    result = []\n    \n    # while we still have elements in the min heap, add the pairs to the result list\n    while min_heap:\n        result.append(heapq.heappop(min_heap)[1])\n    \n    # return the result list\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    min_heap = []\n    for num in nums1:\n        heapq.heappush(min_heap, (-num, -heapq.heappush(min_heap, 0)))\n    for num in nums2:\n        if not min_heap or num > -min_heap[0][1]:\n            heapq.heappush(min_heap, (-num, -heapq.heappush(min_heap, 0)))\n        else:\n            heapq.heappop(min_heap)\n    result = []\n    while min_heap and k > 0:\n        diff, _ = min_heap[0]\n        result.append((-diff, -heapq.heappop(min_heap)))\n        k -= 1\n    result.reverse()\n    return result"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            pair = list1[i], list1[j]\n            product = pair[0] * pair[1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    \n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n                \n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    \"\"\"\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    \"\"\"\n    min_product = float('inf')\n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    This function takes a list of tuples as input, and returns the minimum product\n    found between any two pairs of tuples in the list.\n\n    For example, if the input list is [(1, 2), (3, 4), (5, 6)], the output should\n    be 24 (since (1, 2) and (3, 4) have a minimum product of 12).\n    '''\n\n    # Initialize the minimum product to be positive infinity\n    min_product = float('inf')\n\n    # Iterate over all pairs of tuples in the list\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # Calculate the product of the elements in the pair and compare it to min_product\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n\n    # Return the minimum product found between any two pairs of tuples in the list\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    \"\"\"\n    This function takes a list of tuples as an input and returns the minimum product of the pairs of tuples.\n    \"\"\"\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    This function takes a list of tuples as input and returns the minimum product of the pairs of tuples within that list.\n\n    Args:\n    list1 (list of tuples): A list of tuples containing pairs of numbers.\n\n    Returns:\n    int: The minimum product of the pairs of tuples within the input list.\n\n    '''\n\n    # Initialize a variable to store the minimum product\n    min_product = float('inf')\n\n    # Loop through each pair of tuples in the list\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # Calculate the product of the two tuples\n            product = list1[i][0] * list1[j][1]\n            # Check if the product is less than the current minimum\n            if product < min_product:\n                min_product = product\n\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][0]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n\n    # Sort the list of tuples\n    list1.sort(key=lambda x: x[0] * x[1])\n\n    # Initialize the minimum product and the minimum tuple\n    min_product = 1\n    min_tuple = None\n\n    # Iterate through the sorted list of tuples\n    for i in range(len(list1)):\n        # Calculate the product of the current tuple and the minimum tuple\n        product = list1[i][0] * list1[i][1]\n\n        # Check if the product is less than the minimum product\n        if product < min_product:\n            # Update the minimum product and minimum tuple\n            min_product = product\n            min_tuple = list1[i]\n\n    # Return the minimum tuple\n    return min_tuple"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n\n    min_val = listval[0]\n    for val in listval:\n        if val < min_val:\n            min_val = val\n\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_val(listval):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n    \"\"\"\n    # create a dictionary to store the type of each element in the list\n    types = {}\n    for element in listval:\n        if isinstance(element, int):\n            types[int] = True\n        elif isinstance(element, str):\n            types[str] = True\n        elif isinstance(element, float):\n            types[float] = True\n        elif isinstance(element, bool):\n            types[bool] = True\n        elif isinstance(element, list):\n            types[list] = True\n        elif isinstance(element, tuple):\n            types[tuple] = True\n        elif isinstance(element, dict):\n            types[dict] = True\n        else:\n            types[type(element)] = True\n    \n    # find the type with the smallest number of elements\n    min_type = min(types, key=len)\n    \n    # initialize the minimum value to the first element of the list\n    min_val = listval[0]\n    \n    # iterate through the rest of the elements of the list and compare them to the current minimum value\n    for element in listval[1:]:\n        if isinstance(element, int):\n            if element < min_val:\n                min_val = element\n        elif isinstance(element, str):\n            if element < min_val:\n                min_val = element\n        elif isinstance(element, float):\n            if element < min_val:\n                min_val = element\n        elif isinstance(element, bool):\n            if element < min_val:\n                min_val = element\n        elif isinstance(element, list):\n            if element < min_val:\n                min_val = element\n        elif isinstance(element, tuple):\n            if element < min_val:\n                min_val = element\n        elif isinstance(element, dict):\n            if element < min_val:\n                min_val = element\n        else:\n            if element < min_val:\n                min_val = element\n    \n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for item in listval:\n        if item < min_val:\n            min_val = item\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    This function takes in a list of heterogeneous elements and returns the minimum value.\n    '''\n    if not isinstance(listval, list):\n        raise TypeError('Input must be a list.')\n    elif not all(isinstance(x, (int, float, str)) for x in listval):\n        raise TypeError('All elements in the list must be numeric.')\n    \n    min_val = listval[0]\n    for x in listval:\n        if x < min_val:\n            min_val = x\n    \n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    else:\n        min_val = listval[0]\n        for i in range(1, len(listval)):\n            if listval[i] < min_val:\n                min_val = listval[i]\n        return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    \n    min_val = listval[0]\n    for i in listval:\n        if i < min_val:\n            min_val = i\n    \n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    minval = float('inf')\n    for val in listval:\n        if val < minval:\n            minval = val\n    return minval"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if not isinstance(listval, list):\n        raise TypeError(\"Input should be a list\")\n    if not all(isinstance(x, (int, float, str)) for x in listval):\n        raise TypeError(\"All elements in the list should be numeric\")\n    return min(listval)"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef snake_to_camel(word):\n    \"\"\"\n    Write a function to convert the given snake case string to camel case string.\n    \"\"\"\n\n    # Split the word into individual words\n    words = re.findall(r'\\b\\w+\\b', word)\n\n    # Convert each word to camel case\n    camel_case_words = [word.capitalize() for word in words]\n\n    # Join the camel case words back together\n    camel_case_word = ''.join(camel_case_words)\n\n    return camel_case_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # split the word into lowercase and uppercase parts\n    parts = word.lower().split('_')\n    # join the parts together with uppercase first letter\n    return parts[0] + ''.join(x.title() for x in parts[1:])"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # convert all the words to lowercase\n    word = word.lower()\n    # split the word into words based on underscores\n    words = re.findall(r'\\b\\w+\\b', word)\n    # join the words to form the camel case string\n    camel_case_str = ''.join(words)\n    return camel_case_str"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the word into words\n    words = word.split('_')\n    # Capitalize the first letter of each word\n    camel_case_word = [words[0]] + [word.capitalize() for word in words[1:]]\n    # Join the capitalized words back into a string\n    camel_case_string = ''.join(camel_case_word)\n    # Convert to camel case\n    camel_case_string = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', camel_case_string)\n    return camel_case_string.lower()"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    pattern = re.compile(r'_(.)')\n    return pattern.sub(lambda match: match.group(1).upper(), word)"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Replace underscores with spaces\n    word = re.sub(r'(_\\w)', lambda x: x.group(1).upper(), word)\n    # Remove leading and trailing spaces\n    word = word.strip()\n    # Convert the first character to lowercase\n    word = word[0].lower() + word[1:]\n    return word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef snake_to_camel(word):\n    # Convert the given word from snake case to camel case\n    camel_case = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', word)\n    # Capitalize the first letter of the camel case word\n    return camel_case[0].upper() + camel_case[1:]"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef snake_to_camel(word):\n    # Convert the given snake case string to pascal case\n    pascal_case = re.sub(r'(?<!^)(?=[A-Z])', '', word).title()\n    \n    # Convert the pascal case string to camel case\n    camel_case = re.sub(r'(?<!^)(?=[A-Z])', '', pascal_case).title()\n    \n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    camel = \"\"\n    for char in word:\n        if char.isupper():\n            camel += char\n        else:\n            camel += char.lower()\n    return camel"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return ''.join(word.title() for word in re.findall(r'_\\w', word))"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    result = []\n    for num in l:\n        if num % 2 == 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    odd_numbers = []\n    for num in l:\n        if num % 2 == 1:\n            odd_numbers.append(num)\n    return odd_numbers"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2!= 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n][1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if len(list1) > n:\n        return list1[n][0]\n    else:\n        return \"List has less than n elements\""
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    \"\"\"\n    Write a function to extract the nth element from a given list of tuples.\n    \"\"\"\n    return list1[n]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    \"\"\"\n    Write a function to extract the nth element from a given list of tuples.\n    \"\"\"\n    if isinstance(list1, list) and isinstance(list1[0], tuple) and isinstance(n, int) and n > 0:\n        return list1[n-1]\n    else:\n        raise TypeError(\"Invalid input. Please provide a list of tuples and an integer greater than 0.\")"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    \"\"\"\n    Write a function to extract the nth element from a given list of tuples.\n    \"\"\"\n    try:\n        if isinstance(list1, list) and isinstance(n, int) and 0 < n <= len(list1):\n            return list1[n-1]\n        else:\n            raise ValueError(\"Invalid input\")\n    except IndexError:\n        raise IndexError(\"Invalid index\")"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if not isinstance(list1, list) or not isinstance(list1[0], tuple):\n        raise TypeError('Input must be a list of tuples.')\n    if n < 1 or n > len(list1):\n        raise ValueError('n must be between 1 and the length of the list.')\n\n    result = []\n    for item in list1:\n        if n == 1:\n            result.append(item[0])\n            break\n        elif n > 1:\n            n -= 1\n            result.append(item)\n\n    return result"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    try:\n        return list1[n][0]\n    except:\n        return None"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    # Convert the given lists to sets to remove duplicates and improve efficiency\n    set1 = set(list1)\n    set2 = set(list2)\n\n    # Check whether any value in the second list exists in the first list or not\n    for value in set2:\n        if value in set1:\n            return True\n\n    # If no overlapping values are found, return False\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Check if any value in list1 exists in list2 and vice versa.\n    \"\"\"\n    if len(list1) < len(list2):\n        list1, list2 = list2, list1\n    for value in list1:\n        if value in list2:\n            return True\n    for value in list2:\n        if value in list1:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    \n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def overlapping(list1, list2):\n    '''\n    This function takes two lists as input and returns a boolean value indicating whether any value in the first list exists in the second list.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def overlapping(list1,list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    # convert the lists into sets to remove duplicates\n    set1 = set(list1)\n    set2 = set(list2)\n    # check if any value in the first set is also in the second set\n    if any(elem in set2 for elem in set1):\n        return True\n    else:\n        return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Check if any value in a sequence exists in another sequence.\n\n    Parameters:\n    -----------\n    list1 : list\n        Sequence of values.\n    list2 : list\n        Sequence of values.\n\n    Returns:\n    --------\n    bool\n        True if any value in list1 exists in list2, False otherwise.\n    \"\"\"\n    return any(value in list2 for value in list1)"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in another sequence or not.\n    \"\"\"\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Check whether any value in a sequence exists in a sequence or not.\n\n    Args:\n    list1 (iterable): Sequence of elements to check for overlap.\n    list2 (iterable): Sequence of elements to check for overlap.\n\n    Returns:\n    bool: True if there is at least one value in list1 that exists in list2, False otherwise.\n    \"\"\"\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def overlapping(list1, list2):\n    '''\n    This function takes two lists as input and returns True if there is any value in list1 that is present in list2 and vice versa.\n    '''\n    # Set of unique values in list1\n    set1 = set(list1)\n    # Set of unique values in list2\n    set2 = set(list2)\n\n    # Check if any value in set1 is present in set2\n    if any(value in set2 for value in set1):\n        return True\n    else:\n        return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Check whether any value in a sequence exists in a sequence or not.\n\n    Parameters:\n        list1 (sequence): a sequence of values\n        list2 (sequence): a sequence of values\n\n    Returns:\n        bool: True if any value in `list1` exists in `list2`, False otherwise\n    \"\"\"\n    return any(x in list2 for x in list1)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1 = max2 = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n\n    return max1 * max2"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Product(arr): \n    # find the minimum and maximum value in the array\n    min_val = arr[0]\n    max_val = arr[0]\n\n    # loop through the array and update the minimum and maximum values\n    for num in arr:\n        if num < min_val:\n            min_val = num\n        elif num > max_val:\n            max_val = num\n\n    # find the sum of the minimum and maximum values\n    sum_min_max = min_val + max_val\n\n    # loop through the array again to find the pair with highest product\n    max_product = float('-inf')\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product and product!= sum_min_max:\n                max_product = product\n\n    # return the pair with highest product\n    return max_product"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n\n    max1 = arr[0]\n    max2 = arr[0]\n    min1 = arr[0]\n    min2 = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n\n        if arr[i] < min1:\n            min2 = min1\n            min1 = arr[i]\n        elif arr[i] < min2:\n            min2 = arr[i]\n\n    return (max1 * max2, min1 * min2)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Product(arr):\n    \"\"\"\n    Write a python function to find a pair with highest product from a given array of integers.\n    \"\"\"\n    max1 = max2 = float('-inf')\n    for num in arr:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n    return max1 * max2"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Product(arr):\n    \"\"\"\n    Write a python function to find a pair with highest product from a given array of integers.\n    \"\"\"\n    max1 = arr[0]\n    max2 = arr[0]\n    min1 = arr[0]\n    min2 = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n        elif arr[i] < min1:\n            min2 = min1\n            min1 = arr[i]\n        elif arr[i] < min2:\n            min2 = arr[i]\n    return max(max1 * max2, min1 * min2)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_pair = (-1, -1)\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if i!= j:\n                product = arr[i] * arr[j]\n                if product > max_pair[0]:\n                    max_pair = (product, arr[i], arr[j])\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = float('-inf')\n    max_pair = (float('-inf'), float('-inf'))\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i]*arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = (arr[i], arr[j])\n    \n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    # Initialize variables\n    max_product = float('-inf')\n    max_pair = (0, 0)\n    min_product = float('inf')\n    min_pair = (0, 0)\n\n    # Loop through the array and update max and min products\n    for i in range(len(arr)):\n        if arr[i] > max_product:\n            max_product = arr[i]\n            max_pair = (i, arr[i])\n        if arr[i] < min_product:\n            min_product = arr[i]\n            min_pair = (i, arr[i])\n\n    # Return the maximum product and its indices\n    return max_product, max_pair[0], max_pair[1], min_product, min_pair[0], min_pair[1]"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = -1\n    max_pair = [-1,-1]\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            prod = arr[i]*arr[j]\n            if prod > max_product:\n                max_product = prod\n                max_pair = [arr[i],arr[j]]\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Product(arr):\n    # Initialize variables to keep track of the maximum product and the current max product\n    max_product = arr[0]\n    current_max_product = arr[0]\n\n    # Loop through the array and update max_product and current_max_product accordingly\n    for i in range(1, len(arr)):\n        if arr[i] > 0:\n            current_max_product = arr[i]\n        elif arr[i] < 0:\n            current_max_product *= arr[i]\n        else:\n            current_max_product = max(arr[i], current_max_product)\n        max_product = max(max_product, current_max_product)\n\n    # Return the maximum product pair\n    return max_product, current_max_product\n"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    Write a function to find common first element in given list of tuple.\n    \"\"\"\n\n    # Initialize an empty dictionary to store the count of each element in the input list\n    count_dict = {}\n\n    # Iterate through each element in the input list\n    for item in Input:\n\n        # Get the first element of the current tuple\n        first_element = item[0]\n\n        # If the first element is already in the count_dict, increment its count by 1\n        if first_element in count_dict:\n            count_dict[first_element] += 1\n        # If the first element is not in the count_dict, add it with a count of 1\n        else:\n            count_dict[first_element] = 1\n\n    # Find the element with the highest count in the count_dict\n    max_count = max(count_dict.values())\n    result = [key for key, value in count_dict.items() if value == max_count]\n\n    # Return the element(s) with the highest count in the input list\n    return result"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n\n    # sort the list of tuples by the first element\n    Input.sort(key=lambda x: x[0])\n\n    # initialize an empty dictionary\n    common = {}\n\n    # loop through the sorted list of tuples\n    for tup in Input:\n\n        # if the first element is already in the dictionary, add the second element to the list\n        if tup[0] in common:\n            common[tup[0]].append(tup[1])\n        # if the first element is not in the dictionary, add the tuple to the dictionary with a list containing the second element\n        else:\n            common[tup[0]] = [tup[1]]\n\n    # return the dictionary\n    return common"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def group_tuples(Input): \n    \"\"\"\n    Write a function to find common first element in given list of tuple.\n    \"\"\"\n    common_elements = []\n    for tup in Input:\n        if len(set(tup[0])) == len(tup):\n            common_elements.append(tup[0])\n    return common_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_element = None\n    for item in Input:\n        if common_element is None:\n            common_element = item[0]\n        else:\n            if item[0] == common_element:\n                continue\n            else:\n                return common_element\n    return common_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    Write a function to find common first element in given list of tuple.\n    \"\"\"\n    common_elements = []\n    for tup in Input:\n        if tup[0] in common_elements:\n            common_elements.remove(tup[0])\n        else:\n            common_elements.append(tup[0])\n    return common_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Create an empty dictionary to store the count of each first element\n    count = {}\n\n    # Iterate through the input list of tuples\n    for t in Input:\n        # If the first element is not in the count dictionary, add it with a count of 1\n        if t[0] not in count:\n            count[t[0]] = 1\n        # If the first element is already in the count dictionary, increment its count by 1\n        else:\n            count[t[0]] += 1\n\n    # Create an empty list to store the common first elements\n    common_first = []\n\n    # Iterate through the count dictionary and add the first elements with a count of 2 or more to the common_first list\n    for key, value in count.items():\n        if value >= 2:\n            common_first.append(key)\n\n    # Return the list of common first elements\n    return common_first"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def group_tuples(Input): \n    '''\n    This function takes a list of tuples as input and returns a new list of tuples where each tuple contains only the common first element from the input list.\n    '''\n    result = []\n    for item in Input:\n        if not result or result[-1][0]!= item[0]:\n            result.append(item)\n    return result"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Initialize a dictionary to store count of each element in the list\n    count = {}\n    # Loop through the list of tuples\n    for i in Input:\n        # Extract the first element of each tuple\n        first = i[0]\n        # If the first element is in the dictionary, increment its count\n        if first in count:\n            count[first] += 1\n        # If the first element is not in the dictionary, add it with a count of 1\n        else:\n            count[first] = 1\n    # Loop through the dictionary again and find the common elements\n    common = []\n    for i in count:\n        if count[i] == max(count.values()):\n            common.append(i)\n    # Return the list of common elements\n    return common"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    groups = []\n    for t in Input:\n        if len(groups) == 0 or t[0] == groups[-1][0]:\n            groups.append(t)\n        else:\n            common = None\n            for g in groups:\n                if g[0] == t[0]:\n                    common = g\n                    break\n            if common:\n                common.extend(t[1:])\n            else:\n                groups.append(t)\n    return groups"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Common_Elements = []\n    for i in Input:\n        Common_Elements.append(i[0])\n    return set(Common_Elements)"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0 \n    max_ele = None \n    for i in lst: \n        if len(i) > max_len: \n            max_len = len(i) \n            max_ele = i \n    return max_ele"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max(lst): \n    '''\n    This function takes a list as input and returns the element with the maximum length.\n    '''\n\n    # Initialize max_len and max_elem to 0\n    max_len = 0\n    max_elem = None\n\n    # Loop through the list and keep track of the maximum length and element\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n\n    # Return the maximum length and element\n    return max_len, max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    \n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n            \n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max(lst): \n    '''\n    This function takes a list as input and returns the element with maximum length in the list.\n    '''\n    max_elem = lst[0]\n    max_len = len(lst[0])\n    \n    for elem in lst:\n        if len(elem) > max_len:\n            max_elem = elem\n            max_len = len(elem)\n    \n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0 \n    max_elem = None \n    for elem in lst: \n        if len(elem) > max_len: \n            max_len = len(elem) \n            max_elem = elem \n    return max_elem "
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(str(elem)) > max_len:\n            max_len = len(str(elem))\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n\n    # initialize max_len with 0\n    max_len = 0\n    \n    # loop through each element of the list\n    for i in range(len(lst)):\n        # if the length of the current element is greater than max_len, update max_len\n        if len(str(lst[i])) > max_len:\n            max_len = len(str(lst[i]))\n\n    # loop through each element of the list again and print the element whose length is equal to max_len\n    for i in range(len(lst)):\n        if len(str(lst[i])) == max_len:\n            print(lst[i])"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    \n    for i in range(len(lst)):\n        if len(lst[i]) > max_length:\n            max_length = len(lst[i])\n            max_element = lst[i]\n            \n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(str(elem)) > max_len:\n            max_len = len(str(elem))\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max(lst):\n    max_length = 0\n    max_element = None\n    \n    for element in lst:\n        if len(str(element)) > max_length:\n            max_length = len(str(element))\n            max_element = element\n    \n    return max_element"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for i in list1:\n        if isinstance(i, (int, float)):\n            total += round(i)\n    print(total * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        rounded_num = round(num)\n        total += rounded_num\n        print(rounded_num, end=' ')\n    print('\\nTotal sum:', total * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = sum([round(num) for num in list1])\n    print(total * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum_of_rounded_numbers = 0\n    for i in list1:\n        rounded_number = round(i)\n        sum_of_rounded_numbers += rounded_number\n    print(sum_of_rounded_numbers * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        rounded_num = round(num)\n        total_sum += rounded_num\n        print(rounded_num)\n    total_sum_multiplied_by_length = total_sum * len(list1)\n    print(\"The total sum multiplied by the length of the list is:\", total_sum_multiplied_by_length)"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    print(total * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    print(total * len(list1))"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum_cubes = 0\n    for i in range(2, n+1, 2):\n        sum_cubes += i**3\n    return sum_cubes"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum_cubes = 0\n    for i in range(2, n+1):\n        sum_cubes += i**3\n    return sum_cubes"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    This function takes an integer `n` as input and returns the sum of the cubes of the first `n` even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n\n    cube_sum = 0\n    count = 0\n\n    while count < n:\n        num = 2*count + 1\n        cube_sum += num*num*num\n        count += 1\n\n    return cube_sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_Sum(n):\n    '''\n    This function calculates the cube sum of the first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(2, n+1, 2):\n        sum_of_cubes += i*i*i\n    return sum_of_cubes"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    even_cubes = [x**3 for x in range(2, n, 2)]\n    cube_sum = sum(even_cubes)\n    return cube_sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n    for i in range(1, n+1, 2):\n        cube_sum += i**3\n    return cube_sum"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = ','\n    return delimiter.join(str(i) for i in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    \"\"\"\n    This function concatenates each element of a tuple by a delimiter.\n    \n    Parameters:\n    test_tup (tuple): a tuple of strings\n    delimiter (str): a delimiter to be used for concatenation\n    \n    Returns:\n    str: the concatenated string of elements of the tuple\n    \"\"\"\n    concatenated_string = \"\"\n    for element in test_tup:\n        concatenated_string += str(element) + delimiter\n    return concatenated_string[:-len(delimiter)]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return''.join(str(item) for item in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ', '.join(str(x) for x in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = \", \" # you can change this delimiter to anything you want\n    concatenated_string = delimiter.join(str(elem) for elem in test_tup)\n    return concatenated_string"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = ''\n    return delimiter.join(str(x) for x in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = \",\"\n    result = \"\"\n    for item in test_tup:\n        result += str(item) + delimiter\n    return result[:-1]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return tuple(str(i) +'' + str(j) for i, j in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup, delimiter=' '):\n    '''\n    Concatenate each element of the tuple by the specified delimiter.\n\n    Parameters:\n    test_tup (tuple): The tuple to be concatenated.\n    delimiter (str): The delimiter to be used in concatenating the elements of the tuple.\n\n    Returns:\n    str: The concatenated string.\n    '''\n\n    # Convert the tuple to a list to concatenate the elements\n    concatenated_list = [str(item) for item in test_tup]\n\n    # Concatenate the elements of the list using the specified delimiter\n    concatenated_str = delimiter.join(concatenated_list)\n\n    return concatenated_str"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter =''\n    concatenated_string = ''\n    for element in test_tup:\n        concatenated_string += str(element) + delimiter\n    return concatenated_string[:-len(delimiter)]"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_cube = 0\n    for i in range(1, n+1):\n        sum_cube += i**3\n    average = sum_cube/n\n    print(\"The average of cubes of the first {} natural numbers is: {}\".format(n, average))"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0  \n    for i in range(1, n+1):  \n        total += i**3  \n    return total/n  "
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum += i**3\n    return sum/n"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    average = sum/n\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i*i*i\n    return sum_of_cubes/n"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    count = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i*i*i\n        count += 1\n    average = sum_of_cubes / count\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    average_of_cubes = sum_of_cubes / n\n    return average_of_cubes\n"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    average_of_cubes = sum_of_cubes/n\n    return average_of_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n\n    sum = 0\n    count = 0\n\n    for i in range(1, n+1):\n        sum += i**3\n        count += 1\n\n    average = sum/count\n\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    count = 0\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n        count += 1\n    average = sum/count\n    return average"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_tuple)):\n        rear_list.append(test_tuple[i][-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    \"\"\"\n    Write a function to extract only the rear index element of each string in the given tuple.\n    \"\"\"\n    # Extract the rear index element of each string in the tuple\n    rear_elements = [test_tuple[i][-1] for i in range(len(test_tuple))]\n    # Return the list of rear elements\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_indices = []\n    for i, string in enumerate(test_tuple):\n        rear_indices.append(i)\n    rear_elements = []\n    for i, index in enumerate(rear_indices):\n        rear_elements.append(test_tuple[index])\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = []\n    for element in test_tuple:\n        rear_elements.append(element[-1])\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    result = []\n    for i, j in enumerate(test_tuple):\n        result.append(test_tuple[i][-1])\n    return result"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    result = []\n    for string in test_tuple:\n        result.append(string[-1])\n    return result"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = []\n    for i in range(len(test_tuple)):\n        rear_elements.append(test_tuple[i][-1])\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    extracted_rear = []\n    for string in test_tuple:\n        extracted_rear.append(string[len(string)-1])\n    return extracted_rear"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for item in test_tuple:\n        rear_list.append(item[-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple(test_tuple[i][-1] for i in range(len(test_tuple)))"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x): \n    count = 0\n    for sublist in list1: \n        if x in sublist: \n            count += 1 \n    return count "
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    This function takes a list and an element as input and returns the number of sublists \n    containing the element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x): \n    count = 0\n    for sublist in list1: \n        if x in sublist: \n            count += 1 \n    return count "
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]\n"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers from a list of numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    # create an empty list to store odd numbers\n    odd_nums = []\n    # iterate through the given list of numbers\n    for num in nums:\n        # check if the current number is odd\n        if num % 2!= 0:\n            # if the number is odd, append it to the odd_nums list\n            odd_nums.append(num)\n    # return the list of odd numbers\n    return odd_nums"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers from a list of numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define the regular expression pattern for yyyy-mm-dd format\n    pattern = r'\\d{4}-\\d{2}-\\d{2}'\n\n    # Find all matches of the pattern in the input string\n    matches = re.findall(pattern, dt)\n\n    # If there are matches, convert the matched date to dd-mm-yyyy format\n    if matches:\n        for match in matches:\n            # Convert the matched date to the desired format\n            new_date = '-'.join(match.split('-')[::-1])\n            # Replace the old date in the input string with the new date\n            dt = dt.replace(match, new_date)\n\n    return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.match(pattern, dt)\n    if match:\n        day = match.group(3)\n        month = match.group(2)\n        year = match.group(1)\n        return day + '-' + month + '-' + year\n    else:\n        return None"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # replace yyyy with \\d{4} to match four digit year\n    dt = re.sub('(\\d{4})-(\\d{2})-(\\d{2})', r'\\3-\\2-\\1', dt)\n    return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # regex to match yyyy-mm-dd format\n    regex = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    # find all matches in the string using regex\n    matches = re.findall(regex, dt)\n    # convert each match to yyyy-mm-dd format\n    for i in range(len(matches)):\n        matches[i] = '-'.join(matches[i])\n    # join the list of matches with a hyphen\n    new_dt = '-'.join(matches)\n    # return the new date in dd-mm-yyyy format\n    return new_dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define the date format pattern\n    pattern = r'\\d{4}-\\d{2}-\\d{2}'\n    \n    # Use re.search() to search for a match in the date string\n    match = re.search(pattern, dt)\n    \n    # If there is a match, split the date string into components and reverse the order\n    if match:\n        year, month, day = match.groups()\n        new_date = day + '-' + month + '-' + year\n        return new_date\n    # If there is no match, return the original date string unchanged\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define regular expression pattern to match date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n\n    # Use re.sub() method to replace the date format with the new format\n    new_date = re.sub(pattern, r'\\2-\\1-\\3', dt)\n\n    # Return the new formatted date\n    return new_date"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef change_date_format(dt):\n    # Define the regular expression pattern for date format conversion\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    # Match the pattern in the input date string\n    match = re.search(pattern, dt)\n    # If match is found, convert the date format to dd-mm-yyyy format\n    if match:\n        year, month, day = match.groups()\n        new_date = f'{day}-{month}-{year}'\n        return new_date\n    else:\n        return None"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # replace hyphens with slashes\n    dt = dt.replace('-', '/')\n    \n    # split date into year, month, and day\n    year, month, day = re.split('/|\\\\.', dt)\n    \n    # convert month and day to integers\n    month = int(month)\n    day = int(day)\n    \n    # convert year to integer\n    year = int(year)\n    \n    # add 1900 to year to convert to yyyy-mm-dd format\n    dt = f'{year}-{month:02d}-{day:02d}'\n    \n    return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    yyyy_format = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    dd_format = r'(\\d{2})-(\\d{2})-(\\d{4})'\n    regex = re.compile(yyyy_format)\n    match = regex.match(dt)\n    if match:\n        year, month, day = match.groups()\n        formatted_date = f'{day}-{month}-{year}'\n        return formatted_date\n    else:\n        regex = re.compile(dd_format)\n        match = regex.match(dt)\n        if match:\n            day, month, year = match.groups()\n            formatted_date = f'{day}-{month}-{year}'\n            return formatted_date\n        else:\n            return None"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n\n    # Replace dashes with slashes in the date string\n    dt = re.sub(r'(-)', '/', dt)\n\n    # Split the date string into year, month, and day components\n    year, month, day = dt.split('/')\n\n    # Reverse the order of the month and day components\n    day, month, year = month, day, year\n\n    # Concatenate the year, month, and day components in the desired format\n    return '-'.join([year, month, day])"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            key = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > key:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = key\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n\n    n = len(my_list)\n    # Define a gap sequence\n    gap = n // 2\n    while gap > 0:\n        # Move the gap to half of the previous gap\n        gap = gap // 2\n        # Iterate over all elements in the array with a gap of 'gap'\n        for i in range(gap, n):\n            # Compute the correct position for the current element\n            j = i\n            # While the j position is greater than or equal to the gap and the\n            # j position is within the array bounds, shift the element at j\n            # to the position j - gap\n            while j >= gap and my_list[j] < my_list[j - gap]:\n                # Move the element at j to the position j - gap\n                my_list[j], my_list[j - gap] = my_list[j - gap], my_list[j]\n                # Decrement the value of j to continue iterating\n                j -= gap\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and temp < my_list[j - gap]:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    Write a function to sort the given array by using shell sort.\n    \"\"\"\n    n = len(my_list)\n\n    # Calculate the largest gap\n    gap = n // 2\n\n    while gap > 0:\n        # Insertion sort for this gap size\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n\n        # Decrease the gap size\n        gap //= 2"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n // 2\n    \n    while gap > 0:\n        for i in range(gap, n):\n            key = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > key:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = key\n        gap //= 2"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    Write a function to sort the given array by using shell sort.\n    \"\"\"\n    gap = len(my_list) // 2\n\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and temp < my_list[j - gap]:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n\n    # Find an optimal gap for a subarray of length n\n    gap = n // 2\n\n    while gap > 0:\n        # Perform a gapped insertion sort for this gap size\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n\n        # Reduces gap to half of its previous value\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    Write a function to sort the given array by using shell sort.\n    \"\"\"\n    n = len(my_list)\n    # set gap value to n//2, where n is the length of the array\n    gap = n // 2\n\n    # Iterate until the gap is no longer than 1\n    while gap > 0:\n        # Insertion sort for gap-sized intervals\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            # Move elements of arr[0..i-1], that are greater than key, to one position ahead of their current position\n            while j >= gap and temp < my_list[j - gap]:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n\n        # Decrease the gap value\n        gap = gap // 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n\n            while j >= gap and temp < my_list[j - gap]:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n\n            my_list[j] = temp\n\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n\n    # Find the largest element in the array\n    max_element = my_list[0]\n    for i in range(1, len(my_list)):\n        if my_list[i] > max_element:\n            max_element = my_list[i]\n\n    # Insertion sort on sub-arrays of size max_element\n    gap = max_element\n    while gap > 0:\n        for i in range(len(my_list) - gap):\n            # Insert current element at its correct position in sorted sub-array\n            j = i\n            while j >= gap and my_list[j - gap] > my_list[j]:\n                # Swap adjacent elements if they are not in correct order\n                my_list[j], my_list[j - gap] = my_list[j - gap], my_list[j]\n                j -= gap\n            # Increment index for next element in sorted sub-array\n            j += gap\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Check if the two tuples are the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('Both tuples should have the same length.')\n    \n    # Initialize an empty list to store the elementwise and tuples\n    and_tuple_list = []\n    \n    # Iterate through the tuples\n    for i in range(len(test_tup1)):\n        # Extract the elements from each tuple\n        element1 = test_tup1[i]\n        element2 = test_tup2[i]\n        \n        # Calculate the elementwise and of the elements\n        and_element = element1 & element2\n        \n        # Add the and_element and the corresponding elements of the tuple to the list\n        and_tuple_list.append((and_element, element1, element2))\n        \n    return and_tuple_list"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = ()\n    for i in range(len(test_tup1)):\n        and_tup += (test_tup1[i] & test_tup2[i],)\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = ()\n    for i in range(len(test_tup1)):\n        and_tup += (test_tup1[i] & test_tup2[i],)\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (tuple(x1 & x2 for x1, x2 in zip(test_tup1, test_tup2)))"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += ((test_tup1[i] & test_tup2[i]),)\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"Both tuples must have the same length.\"\n    return tuple(x and y for x, y in zip(test_tup1, test_tup2))"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = ()\n    for i in range(len(test_tup1)):\n        and_tup += (test_tup1[i] & test_tup2[i],)\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # create an empty list to store the result\n    result_list = []\n    # loop through the elements of both tuples\n    for i in range(len(test_tup1)):\n        # extract the elements of the tuples at the current index\n        elem1 = test_tup1[i]\n        elem2 = test_tup2[i]\n        # perform elementwise and and append the result to the list\n        result_list.append(elem1 & elem2)\n    # convert the list to a tuple and return it\n    return tuple(result_list)"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns their elementwise AND tuple.\n    '''\n    return tuple(x and y for x, y in zip(test_tup1, test_tup2))"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] & test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    # Find the discriminant\n    discriminant = b**2 - 4*a*c\n    \n    # Check if the discriminant is positive or negative\n    if discriminant > 0:\n        # Find the directrix\n        x = (-b + math.sqrt(discriminant)) / (2*a)\n        \n        # Return the directrix\n        return x\n    elif discriminant == 0:\n        # Find the directrix\n        x = -b / (2*a)\n        \n        # Return the directrix\n        return x\n    else:\n        # Return None if the discriminant is negative\n        return None"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c):\n    \"\"\"\n    Write a function to find the directrix of a parabola.\n\n    :param a: The first coefficient of the parabola.\n    :param b: The second coefficient of the parabola.\n    :param c: The constant term of the parabola.\n    :return: The directrix of the parabola.\n    \"\"\"\n    discriminant = b**2 - 4*a*c\n    if discriminant < 0:\n        raise ValueError(\"The discriminant is negative, which means the parabola has no real solution.\")\n    elif discriminant == 0:\n        return (-b) / (2 * a)\n    else:\n        root1 = (-b + discriminant**0.5) / (2 * a)\n        root2 = (-b - discriminant**0.5) / (2 * a)\n        return (root1 + root2) / 2"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # Find the discriminant\n    disc = b**2 - 4*a*c\n    \n    # If the discriminant is negative, there is no directrix\n    if disc < 0:\n        return \"There is no directrix.\"\n    \n    # Find the two roots of the discriminant\n    root1 = (-b + disc**0.5)/(2*a)\n    root2 = (-b - disc**0.5)/(2*a)\n    \n    # Sort the roots in ascending order\n    roots = [root1, root2]\n    roots.sort()\n    \n    # Return the directrix\n    return roots"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    delta = b**2 - 4*a*c\n    if delta > 0:\n        x1 = (-b + delta**0.5) / (2*a)\n        x2 = (-b - delta**0.5) / (2*a)\n        print(\"The directrix is between the roots of the equation:\", x1, \"and\", x2)\n    elif delta == 0:\n        x = -b / (2*a)\n        print(\"The directrix is at the point:\", x)\n    else:\n        print(\"The equation has no real roots.\")"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c):\n    \"\"\"\n    Write a function to find the directrix of a parabola.\n\n    Parameters:\n    a (float): The slope of the parabola.\n    b (float): The y-intercept of the parabola.\n    c (float): The value of x where the parabola crosses the y-axis.\n\n    Returns:\n    float: The x-coordinate of the directrix of the parabola.\n    \"\"\"\n\n    # Find the determinant of the matrix\n    determinant = b**2 - 4*a*c\n\n    # Find the directrix\n    if determinant > 0:\n        directrix = (-b + determinant**0.5)/(2*a)\n    elif determinant == 0:\n        directrix = -b/(2*a)\n    else:\n        return \"The parabola does not have a real solution.\"\n\n    return directrix"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    \n    # Calculate discriminant\n    discriminant = b**2 - 4*a*c\n    \n    # Check if discriminant is greater than 0\n    if discriminant > 0:\n        \n        # Find the two real roots\n        root1 = (-b + discriminant**0.5)/(2*a)\n        root2 = (-b - discriminant**0.5)/(2*a)\n        \n        # Sort the roots in ascending order\n        roots = sorted([root1, root2])\n        \n        # Return the directrix\n        return roots[1]\n        \n    # If discriminant is 0\n    elif discriminant == 0:\n        \n        # Find the two real roots\n        root = -b/(2*a)\n        \n        # Sort the roots in ascending order\n        roots = sorted([root])\n        \n        # Return the directrix\n        return roots[0]\n        \n    # If discriminant is negative\n    else:\n        \n        # Return None\n        return None"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    diff_sq = (b**2 - 4*a*c)**2\n    d = (-b + math.sqrt(diff_sq))/(2*a)\n    return d"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant > 0:\n        x1 = (-b + discriminant**0.5)/(2*a)\n        x2 = (-b - discriminant**0.5)/(2*a)\n        print(\"The directrix is:\", x1)\n        print(\"The directrix is:\", x2)\n    elif discriminant == 0:\n        x = -b/(2*a)\n        print(\"The directrix is:\", x)\n    else:\n        print(\"The equation of the parabola does not have a real root.\")"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # Calculate the discriminant\n    discriminant = b**2 - 4*a*c\n    \n    # Check if the discriminant is positive or negative\n    if discriminant > 0:\n        # The directrix is the root of the discriminant\n        directrix = (-b + math.sqrt(discriminant)) / (2*a)\n    elif discriminant < 0:\n        # The directrix is the root of the discriminant\n        directrix = (-b - math.sqrt(discriminant)) / (2*a)\n    else:\n        # The directrix is the point where the line segment connecting the two inflection points crosses the y-axis\n        directrix = -b / (2*a)\n    \n    return directrix"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    delta = b**2 - 4*a*c\n    if delta >= 0: \n        x1 = (-b + delta**0.5) / (2*a)\n        x2 = (-b - delta**0.5) / (2*a)\n        return x1, x2\n    else: \n        return None"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # check if both lists have at least one element\n    if not list1 or not list2:\n        return False\n\n    # iterate over both lists and check if there is any common element\n    for element in list1:\n        if element in list2:\n            return True\n\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    This function takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # convert the lists to sets to remove duplicates\n    set1 = set(list1)\n    set2 = set(list2)\n    # check if there is at least one common element between the sets\n    return any(set1 & set2)"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # create a set of the elements in list1 and list2\n    set1 = set(list1)\n    set2 = set(list2)\n    # check if there is at least one common element in both sets\n    return len(set1.intersection(set2)) > 0"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # loop through each element in list1 and check if it exists in list2\n    for element in list1:\n        if element in list2:\n            return True\n    # if no common element is found, return false\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # Check if both lists are not empty\n    if not list1 or not list2:\n        return False\n    # Check if both lists have the same length\n    if len(list1)!= len(list2):\n        return False\n    # Iterate through both lists and check if there is a common element\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    for elem in list1:\n        if elem in list2 and elem not in set(list2):\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the area of the trapezium\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n\n    # Calculate the length of the semi-perimeter of the trapezium\n    semi_perimeter = 0.5 * (base1 + base2)\n\n    # Calculate the length of the trapezium\n    trapezium_length = math.sqrt(2 * area / semi_perimeter)\n\n    # Calculate the length of the shorter side of the trapezium\n    shorter_side = min(base1, base2)\n\n    # Calculate the length of the longer side of the trapezium\n    longer_side = max(base1, base2)\n\n    # Calculate the difference between the median length and the shorter side of the trapezium\n    median_difference = (longer_side - shorter_side) / 2\n\n    # Return the median length of the trapezium\n    return trapezium_length + median_difference"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    This function calculates the length of the median of a trapezium given the lengths of the two bases and the height of the trapezium.\n\n    :param base1: the length of the first base of the trapezium\n    :type base1: float\n    :param base2: the length of the second base of the trapezium\n    :type base2: float\n    :param height: the height of the trapezium\n    :type height: float\n    :return: the length of the median of the trapezium\n    :rtype: float\n    \"\"\"\n\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n    area_trapezium = 0.5 * (base1 + base2) * height\n\n    median_length = area / area_trapezium\n\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n\n    # Calculating the area of the trapezium\n    area = 0.5 * base1 * base2 * height\n\n    # Finding the semi-perimeter of the trapezium\n    semi_perimeter = 0.5 * (base1 + base2 + math.sqrt(base1**2 + 4*base2*height))\n\n    # Calculating the length of the trapezium using the area and semi-perimeter\n    trapezium_length = area / semi_perimeter\n\n    # Calculating the median of the trapezium using the area and semi-perimeter\n    median = trapezium_length / 2\n\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n    # Find the area of the trapezium\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n\n    # Use the formula for the median of two values\n    median = 0.5 * (base1 + base2 + area * height / 2.0)\n\n    return median\n"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the area of the trapezium\n    area = 0.5 * (base1 + base2) * height\n    \n    # Calculate the area under the trapezium\n    area_under_trapezium = 0.5 * ((base1**2) + (base2**2))\n    \n    # Calculate the difference between the areas\n    area_diff = area - area_under_trapezium\n    \n    # Calculate the length of the base of the trapezium that is less than or equal to the difference\n    base_less_than_diff = area_diff / 2 / height\n    \n    # Calculate the length of the base of the trapezium that is greater than the difference\n    base_greater_than_diff = (base1 + base2 - base_less_than_diff) / 2\n    \n    # Return the median of the trapezium\n    if height % 2 == 0:\n        return 0.5 * (base_less_than_diff + base_greater_than_diff)\n    else:\n        return 0.5 * (base_less_than_diff + base_greater_than_diff + height/2)"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_trapezium(base1,base2,height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n    area = 0.5 * base1 * height\n    area += 0.5 * base2 * height\n    area += height * height\n    area = round(area, 2)\n    \n    if area == 0:\n        return 0\n    \n    if area < 0:\n        area = -area\n        base1 *= -1\n        base2 *= -1\n        \n    mid1 = area / (2 * base1)\n    mid2 = area / (2 * base2)\n    \n    if mid1 > mid2:\n        return (base1 + mid1) / 2\n    else:\n        return (base2 + mid2) / 2"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n    area_trapezium = 0.5 * base1 * (height + height)\n    return area_trapezium / area"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the length of the first half of the trapezium\n    half_height = height / 2\n    half_base1 = base1 / 2\n    half_base2 = base2 / 2\n    first_half = half_height + half_base1 + half_base2\n    \n    # Calculate the length of the second half of the trapezium\n    second_half = first_half - height\n    \n    # Find the average of the two halves\n    average = (first_half + second_half) / 2\n    \n    # Calculate the median of the two halves\n    if first_half > second_half:\n        median = average - second_half\n    else:\n        median = second_half - average\n    \n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if height % 2 == 0:\n        area = base1 + base2 + height\n    else:\n        area = base1 + base2 + height + 1\n    median = area / 2\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n\n    # Calculate the area of the trapezium\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n\n    # Calculate the lengths of the trapezium base and height\n    base = 0.5 * (base1 + base2)\n    height_half = 0.5 * height\n\n    # Calculate the number of quarters\n    quarters = 2 * (area + height_half)\n\n    # Calculate the length of the median base\n    median_base = quarters / (2 * height_half)\n\n    # Calculate the length of the median height\n    median_height = height_half - median_base\n\n    # Return the median length of the trapezium\n    return median_base + median_height"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for num in arr:\n        if num > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for element in arr:\n        if element > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for num in arr:\n        if num > number:\n            print(\"The number is greater than\", num)\n            return\n    print(\"The number is not greater than any element in the array\")"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    This function takes in two arguments: arr which is the array of elements to be checked and number which is the number to be checked.\n    The function then iterates over each element in the array and checks if the element is greater than the entered number. If a greater element is found, the function returns True, otherwise it returns False.\n    \"\"\"\n    for element in arr:\n        if element > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater = False\n    for i in arr:\n        if i > number:\n            greater = True\n            break\n    return greater"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for num in arr:\n        if num > number:\n            print(num)"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if number > max(arr):\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a(b)*')\n    result = pattern.search(text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a[^b]*b')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'\\ba\\w+\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return 'No match found'"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        print(f\"Match found: {match.group()}\")\n    else:\n        print(\"Match not found\")"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return 'No match found'"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # convert the number to string\n    n = str(n)\n    # find the last character of the string\n    last_char = n[-1]\n    # convert the last character to integer\n    last_digit = int(last_char)\n    # return the last digit\n    return last_digit"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit(n):\n    '''\n    This function takes a number as input and returns its last digit.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    last_digit = n % 10\n    return last_digit"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    last = n % 10\n    return last"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit(n):\n    \"\"\"\n    This function takes a number as an argument and returns the last digit.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit(n):\n    '''\n    This function takes a number as input and returns the last digit of the number.\n    '''\n    # convert the number to a string\n    num = str(n)\n    # get the last character of the string\n    last_char = num[-1]\n    # convert the last character to a number and return it\n    return int(last_char)"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 0:\n        return 'Invalid input! Please enter a non-negative integer.'\n    else:\n        return str(n)[:-1]"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    Write a python function to return the negative numbers in a list.\n    \"\"\"\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    '''\n    This function takes a list of numbers as input and returns a list of negative numbers.\n    '''\n    # Initialize an empty list to store negative numbers\n    neg_list = []\n    # Iterate through the list of numbers\n    for num in list1:\n        # If the number is negative, append it to the neg_list\n        if num < 0:\n            neg_list.append(num)\n    # Return the neg_list\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def neg_nos(lst):\n    \"\"\"\n    This function takes a list as input and returns a new list containing only the negative numbers from the original list.\n    \"\"\"\n    return [num for num in lst if num < 0]"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    Returns a list of negative numbers from the given list.\n    \"\"\"\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def neg_nos(lst):\n    \"\"\"\n    This function takes a list as input and returns a new list containing the negative numbers from the input list.\n    \"\"\"\n    new_lst = []\n    for num in lst:\n        if num < 0:\n            new_lst.append(num)\n    return new_lst"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if ord(char) % 2!= 0:\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    new_str = \"\"\n    for char in str1:\n        if char % 2!= 0:\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Remove odd characters from a string.\n\n    :param str1: The input string.\n    :return: The modified string with odd characters removed.\n    \"\"\"\n    return ''.join(char for char in str1 if ord(char) % 2 == 0)"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if char.isdigit() and int(char) % 2!= 0:\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # initialize an empty string to hold the result\n    result = \"\"\n    # loop through each character in the input string\n    for char in str1:\n        # if the character is odd, add it to the result string\n        if char % 2!= 0:\n            result += char\n    # return the result string\n    return result"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    new_str = \"\"\n    for char in str1:\n        if char.isalpha():\n            if int(char) % 2!= 0:\n                new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join([char for char in str1 if char.isalnum()])"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # Initialize an empty string to store the new string\n    new_str = \"\"\n    # Loop through each character in the input string\n    for char in str1:\n        # If the character is odd, add it to the new string\n        if char % 2!= 0:\n            new_str += char\n    # Return the new string with all odd characters removed\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    return ''.join([char for char in str1 if char.isdigit()])"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if char.isdigit() and int(char) % 2 == 0:\n            new_str += char\n    return new_str"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    count = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i], test_list[j]) in test_list or (test_list[j], test_list[i]) in test_list:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    \n    # Create a set of tuples with only one element, as tuples with two elements cannot be bidirectional\n    one_element_set = set([tuple(i) for i in test_list if len(i) == 1])\n    \n    # Initialize a dictionary to store the count of bidirectional tuple pairs\n    bidirectional_count = {}\n    \n    # Iterate through the set of one-element tuples\n    for i in one_element_set:\n        # Check if the two-element tuple is also in the set, as there are two ways to count a pair\n        if (i[0], i[0]) in one_element_set:\n            # Add 1 to the count if the two-element tuple is in the set\n            bidirectional_count[(i[0], i[0])] = bidirectional_count.get((i[0], i[0]), 0) + 1\n    \n    # Return the final dictionary of bidirectional tuple pairs\n    return bidirectional_count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Write a function to count bidirectional tuple pairs.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if tuple(test_list[i]) == tuple(test_list[j]):\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if (test_list[i][0] == test_list[j][1]) and (test_list[j][0] == test_list[i][1]):\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    bidirectional_count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[j][0] == test_list[i][1]:\n                bidirectional_count += 1\n    return bidirectional_count"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for i in L:\n        result = result * 10 + i\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    single_num = 1\n    for num in L:\n        single_num *= num\n    return single_num"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 1\n    for num in L:\n        result *= num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # initialize the result variable to 0\n    result = 0\n    # loop through each integer in the list\n    for num in L:\n        # add the integer to the result variable\n        result += num\n    # return the result\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    num = 1\n    for i in L:\n        num *= i\n    return num"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    total = 0\n    for num in L:\n        total += num\n    return total"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Initialize the sum to 0\n    total = 0\n    \n    # Loop through each integer in the list\n    for num in L:\n        # Check if the integer is a multiple of 5\n        if num % 5 == 0:\n            # If so, add it to the total\n            total += num\n    \n    # Return the total\n    return total"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverb_position(text):\n    # Split the sentence into words\n    words = re.findall(r'\\b\\w+\\b', text)\n\n    # Initialize an empty list for adverbs and their positions\n    adverbs = []\n\n    # Loop through each word in the sentence\n    for i, word in enumerate(words):\n        # Check if the word is an adverb\n        if re.match(r'\\b(very|just|quite|well|wells|seemly|seem|surely|sure|rather|rarely|rare|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define regex pattern for finding adverb\n    pattern = re.compile(r'\\b(\\w+)(\\w*)\\b')\n    \n    # Find all matches of the pattern in the text\n    matches = pattern.finditer(text)\n    \n    # Initialize dictionary to store adverbs and their positions\n    adverbs = {}\n    \n    # Iterate over all matches\n    for match in matches:\n        # Extract the adverb and its position\n        adverb = match.group(1)\n        position = len(text) - len(match.group(0))\n        # Add the adverb and its position to the dictionary\n        adverbs[adverb] = position\n    \n    # Return the dictionary of adverbs and their positions\n    return adverbs"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Use regular expressions to find all the adverbs in the sentence\n    adverbs = re.findall(r'\\b\\w+ly\\b', text.lower())\n    # Sort the adverbs by their positions in the sentence\n    adverbs = sorted(adverbs, key=lambda x: text.lower().find(x))\n    # Find the first adverb and its position in the sentence\n    if adverbs:\n        first_adverb = adverbs[0]\n        first_adverb_position = text.lower().find(first_adverb)\n        # Return the first adverb and its position\n        return first_adverb, first_adverb_position\n    else:\n        # If no adverbs are found, return None\n        return None"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n\n    # Define a regular expression pattern to match adverbs\n    adverb_pattern = r'\\b\\w*[aeiou]\\w*s\\b'\n\n    # Use the re.findall() function to find all occurrences of the adverb pattern in the text\n    matches = re.findall(adverb_pattern, text)\n\n    # Create an empty list to store the adverbs and their positions\n    adverbs = []\n\n    # Loop through the matches and extract the adverb and its position\n    for match in matches:\n        # Split the match into its component parts (i.e. the adverb and the adverb's position)\n        parts = match.split(' ')\n        # Extract the adverb and its position\n        adverb = parts[0]\n        position = int(parts[1])\n        # Add the adverb and its position to the adverbs list\n        adverbs.append((adverb, position))\n\n    # Sort the adverbs by their position in ascending order\n    adverbs.sort(key=lambda x: x[1])\n\n    # Return the sorted list of adverbs\n    return adverbs"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverb_position(text):\n    pattern = r'\\b\\w+\\b'\n    matches = re.findall(pattern, text)\n    adverbs = []\n    for match in matches:\n        adverb = match.split()[0]\n        adverbs.append(adverb)\n    adverb_positions = []\n    for i, word in enumerate(text.split()):\n        if word in adverbs:\n            adverb_positions.append(i)\n    return adverb_positions"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverb_position(text):\n    # Define regular expression pattern for adverbs\n    pattern = r'\\b[a-zA-Z]+\\b\\s*(?:[A-Z][a-z]*\\b\\s*)*[A-Z]+[a-z]*\\b'\n    \n    # Use re.findall() to find all matches of the pattern in the given text\n    matches = re.findall(pattern, text)\n    \n    # If there are no matches, return None\n    if not matches:\n        return None\n    \n    # Parse the matches and return a list of tuples containing adverbs and their positions\n    adverbs = []\n    for match in matches:\n        # Extract the adverb\n        adverb = match[0]\n        \n        # Extract the positions of the adverb in the sentence\n        positions = match[1:]\n        \n        # Convert the positions to integers and sort them in ascending order\n        positions = [int(p) for p in positions]\n        positions.sort()\n        \n        # Add the adverb and its positions to the list of adverbs\n        adverbs.append((adverb, positions))\n    \n    return adverbs"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Create a regular expression pattern to match adverbs\n    pattern = r'\\b(\\w+\\b)(?:\\W+)(?:(after|before|behind|behind|below|above|beside|beneath|beside|below)\\b)?\\b'\n    # Use the re.findall() function to find all the matches in the given text\n    matches = re.findall(pattern, text)\n    # Initialize an empty dictionary to store the adverbs and their positions\n    adverb_dict = {}\n    # Loop through all the matches and add them to the dictionary\n    for match in matches:\n        adverb, position = match\n        if position not in adverb_dict:\n            adverb_dict[position] = []\n        adverb_dict[position].append(adverb)\n    # Return the dictionary containing the adverbs and their positions\n    return adverb_dict"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverb_position(text):\n    # define a regex pattern to match adverbs\n    adverb_pattern = r'\\b([a-zA-Z]+)\\s?[a-zA-Z]*\\b'\n    # find all adverbs in the sentence using the regex pattern\n    adverbs = re.findall(adverb_pattern, text)\n    # create a dictionary to store the positions of the adverbs\n    adverb_positions = {}\n    # iterate through the adverbs and store their positions in the dictionary\n    for i, adverb in enumerate(adverbs):\n        adverb_positions[adverb] = i + 1\n    # return the dictionary with the adverbs and their positions\n    return adverb_positions"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define a regular expression pattern to match adverbs\n    pattern = r'\\b([a-zA-Z]+)\\s*([a-z]{2,})\\b'\n\n    # Find all the matches in the given sentence\n    matches = re.findall(pattern, text, re.IGNORECASE)\n\n    # Initialize a list to store the results\n    result = []\n\n    # Loop through all the matches and extract the adverbs and their positions\n    for match in matches:\n        # Extract the adverb and its position\n        adverb = match[0]\n        position = match[1]\n\n        # Add the result to the list\n        result.append({'adverb': adverb, 'position': position})\n\n    return result"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define the pattern for finding the first adverb\n    pattern = r'\\b[A-Z][a-z]*\\b'\n    # Use the re module to search for the pattern in the text\n    match = re.search(pattern, text)\n    # If the pattern is found, return the adverb and its position\n    if match:\n        adverb = match.group()\n        position = text.find(adverb)\n        return adverb, position\n    # If the pattern is not found, return None\n    else:\n        return None"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    \"\"\"\n    Write a function to find the surface area of a cube of a given size.\n    \"\"\"\n    surface_area = 6 * (l ** 2)\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    s = 6 * l * l\n    return math.sqrt(s)"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    \"\"\"\n    Write a function to find the surface area of a cube of a given size.\n    \"\"\"\n    surface_area = 6 * l ** 2\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l * l\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6*l**2\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l * l\n    return surface_area"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    for num in nums:\n        if num > 0:\n            pos_count += 1\n    return pos_count / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    arr = array('i', nums)\n    count = 0\n    for num in arr:\n        if num > 0:\n            count += 1\n    return count / len(arr)\n"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = array('i', [0])\n    for num in nums:\n        if num > 0:\n            pos_count.itemset(0, pos_count[0] + 1)\n    return pos_count[0] / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    neg_count = 0\n    zero_count = 0\n\n    for num in nums:\n        if num > 0:\n            pos_count += 1\n        elif num < 0:\n            neg_count += 1\n        else:\n            zero_count += 1\n\n    pos_ratio = pos_count / (pos_count + neg_count + zero_count)\n    return pos_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos = array('i', [0] * len(nums))\n    neg = array('i', [0] * len(nums))\n    for num in nums:\n        if num > 0:\n            pos[pos.index(num)] += 1\n        else:\n            neg[neg.index(abs(num))] += 1\n    if len(nums) == 0:\n        return 0\n    else:\n        return pos[pos.index(max(pos))] / neg[neg.index(abs(max(neg)))]\n"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    count_negative = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n        elif num < 0:\n            count_negative += 1\n    if count == 0:\n        return 0\n    else:\n        return count / (count + count_negative)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    arr = array('i', nums)\n    count = 0\n    total = len(nums)\n    \n    for num in arr:\n        if num > 0:\n            count += 1\n    \n    return float(count) / total"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_count = 0\n    for num in nums:\n        if num > 0:\n            positive_count += 1\n    ratio = positive_count / len(nums)\n    return ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # Initialize variables to store positive count and total count\n    positive_count = 0\n    total_count = len(nums)\n\n    # Iterate through the array and count the number of positive numbers\n    for num in nums:\n        if num > 0:\n            positive_count += 1\n\n    # Return the ratio of positive count to total count\n    return positive_count / total_count"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_neg(list1): \n    largest_negative = list1[0]\n    for num in list1: \n        if num < 0 and num > largest_negative: \n            largest_negative = num\n    return largest_negative"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    largest = float('-inf')\n    for num in list1:\n        if num < 0:\n            largest = max(largest, num)\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = list1[0]\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    # initialize largest negative number to -inf\n    largest = -float('inf')\n    # loop through the list and compare each number to the largest negative number\n    for num in list1: \n        if num < 0: \n            largest = num \n    # return the largest negative number found\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = None\n    for num in list1:\n        if num < 0:\n            if largest is None or num > largest:\n                largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_num
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_neg(list1): \n    '''\n    This function takes a list as input and finds the largest negative number in the list.\n    '''\n\n    largest = float('-inf') # initialize the largest variable to negative infinity\n\n    # loop through the list and compare each element to the current largest value\n    for num in list1:\n        if num < 0: # if the element is negative, check if it's greater than the current largest value\n            if num > largest: # if it is, update the largest variable\n                largest = num\n\n    return largest # return the largest value"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    largest = list1[0]\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_neg(lst):\n    \"\"\"\n    This function takes a list as input and returns the largest negative number in the list.\n    \"\"\"\n    largest = lst[0]\n    for num in lst:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_neg(lst): \n    \"\"\"\n    This function takes a list as input and returns the largest negative number in the list.\n    \"\"\"\n    max_num = lst[0]\n    for i in lst: \n        if i < 0 and i > max_num: \n            max_num = i \n    return max_num "
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    \"\"\"\n    Write a function to trim each tuple by k in the given tuple list.\n    \"\"\"\n    trimmed_list = []\n    for tup in test_list:\n        if len(tup) > K:\n            tup = tup[:K]\n        trimmed_list.append(tup)\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    new_list = []\n    for tup in test_list:\n        tup = tup[K:]\n        new_list.append(tup)\n    return new_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # Iterate through each tuple in the list\n    for tup in test_list:\n        # Split the tuple by comma and space\n        split_tup = tup.split(',')\n        # Initialize a variable to store the trimmed tuple\n        trimmed_tup = []\n        # Iterate through each element in the tuple and check if it's within K of 0\n        for elem in split_tup:\n            if int(elem) >= 0:\n                trimmed_tup.append(int(elem) - K)\n            else:\n                trimmed_tup.append(int(elem) + K)\n        # Join the trimmed tuple back into a string\n        new_tup = ','.join(str(elem) for elem in trimmed_tup)\n        # Replace the original tuple with the new tuple\n        test_list[test_list.index(tup)] = new_tup"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # Iterate through each tuple in the list and trim it by k\n    for i in range(len(test_list)):\n        test_list[i] = tuple(test_list[i][:K] + (test_list[i][K:],))\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # Loop through the list of tuples\n    for i in range(len(test_list)):\n        # Trim each tuple by k\n        test_list[i] = test_list[i][:K]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            test_list[i][j] = (test_list[i][j][0], test_list[i][j][1])\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    \"\"\"\n    Write a function to trim each tuple by k in the given tuple list.\n    \"\"\"\n    new_list = []\n    for tup in test_list:\n        new_tup = tuple([elem for elem in tup if elem])[:K]\n        if new_tup:\n            new_list.append(new_tup)\n    return new_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for tup in test_list:\n        if len(tup) > K:\n            tup = tup[:K]\n        test_list.remove(tup)\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # loop through each tuple in the list\n    for i in range(len(test_list)):\n        # if the length of the tuple is greater than K, trim the last K elements\n        if len(test_list[i]) > K:\n            test_list[i] = tuple(test_list[i][:K])\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    \"\"\"\n    Write a function to trim each tuple by k in the given tuple list.\n    \"\"\"\n    for i in range(len(test_list)):\n        if len(test_list[i]) > K:\n            test_list[i] = test_list[i][:K]\n    return test_list"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # checking if the length of both tuples are equal\n    if len(test_tup1) == len(test_tup2):\n        # iterating over the tuples using zip() function\n        for i, j in zip(test_tup1, test_tup2):\n            # multiplying the elements of the tuples at index i and j\n            test_tup1[i] *= j\n        # printing the modified tuples\n        print(\"Modified Tuple 1: \", test_tup1)\n        print(\"Modified Tuple 2: \", test_tup2)\n    else:\n        print(\"Both tuples should have equal length.\")"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n\n    result = ()\n    for i in range(len(test_tup1)):\n        result = result + (test_tup1[i] * test_tup2[i],)\n\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i]*test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # initializing an empty list to store the result\n    result = []\n\n    # iterating over the elements of both tuples\n    for i in range(len(test_tup1)):\n        # performing the multiplication of the corresponding elements\n        result.append(test_tup1[i] * test_tup2[i])\n\n    return tuple(result)"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # checking the length of the input tuples\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Length of input tuples should be equal\")\n        return\n\n    # creating an empty list to store the multiplication result\n    result_lst = []\n\n    # iterating through the tuples and performing index wise multiplication\n    for i in range(len(test_tup1)):\n        result_lst.append(test_tup1[i] * test_tup2[i])\n\n    # returning the multiplication result as a tuple\n    return tuple(result_lst)"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    \n    count_dict = {}\n    for i in tup:\n        if i in lst:\n            count_dict[i] = count_dict.get(i, 0) + 1\n    \n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(tup)\n    for i in count:\n        if i in lst:\n            count[i] += lst.count(i)\n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n\n    # Creating a dictionary to store the count of each element in the list\n    count_dict = {}\n\n    # Looping through the tuple\n    for element in tup:\n        # If the element is already in the dictionary, increment its count\n        if element in count_dict:\n            count_dict[element] += 1\n        # If the element is not in the dictionary, add it with a count of 1\n        else:\n            count_dict[element] = 1\n\n    # Looping through the list\n    for element in lst:\n        # If the element is already in the count_dict, decrement its count\n        if element in count_dict:\n            count_dict[element] -= 1\n        # If the element is not in the dictionary, add it with a count of 1\n        else:\n            count_dict[element] = 1\n\n    # Creating a new list to store the elements and their counts\n    count_list = []\n\n    # Looping through the dictionary to get the elements and their counts\n    for element, count in count_dict.items():\n        count_list.append((element, count))\n\n    # Sorting the list based on the counts in descending order\n    count_list = sorted(count_list, key=lambda x: x[1], reverse=True)\n\n    # Printing the result\n    print(\"The elements in the tuple and their counts in descending order:\")\n    for element, count in count_list:\n        print(f\"{element}: {count}\")"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    \n    # Convert the tuple to a dictionary to count the occurence of each element\n    counts = Counter(tup)\n    \n    # Initialize a dictionary to store the count of each element in the list\n    result = {}\n    \n    # Iterate over the list and count the occurence of each element in the tuple\n    for elem in lst:\n        if elem in counts:\n            if elem in result:\n                result[elem] += 1\n            else:\n                result[elem] = 1\n    \n    return result"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst):\n    \"\"\"\n    Write a python function to count the occurence of all elements of list in a tuple.\n    \"\"\"\n    c = Counter(lst)\n    count = {}\n    for item in tup:\n        if item in c:\n            count[item] = c[item]\n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n\n    count_dict = {}\n    for item in tup: \n        if item in count_dict: \n            count_dict[item] += 1\n        else: \n            count_dict[item] = 1\n\n    for item in lst: \n        if item in count_dict: \n            count_dict[item] -= 1\n        else: \n            count_dict[item] = 1\n\n    result_list = []\n    for key, value in count_dict.items(): \n        if value > 0: \n            result_list.append(key)\n\n    return Counter(result_list)"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    #convert the tuple to a set to remove duplicates\n    unique_tup = set(tup)\n    count_dict = Counter(unique_tup)\n    #count the number of times each element of the list appears in the tuple\n    for item in lst:\n        count_dict[item] += 1\n    #convert the dictionary to a tuple\n    count_tup = tuple(count_dict.items())\n    return count_tup"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(lst)  # count the occurrence of all elements in the list\n    count_list = []  # create an empty list to store the count of each element in the tuple\n    \n    for i in tup:\n        count = count_dict[i]  # get the count of the current element\n        count_list.append(count)  # append the count of the current element to the count_list\n    \n    return count_list"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(lst)\n    count_dict_lst = []\n    \n    for i in tup:\n        count_dict_lst.append(count_dict[i])\n        \n    return count_dict_lst"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    This function takes a tuple and a list as input parameters, and returns a dictionary with the count of each element in the tuple.\n    '''\n\n    # Counting the occurrences of each element in the list in the tuple\n    count = Counter(tup)\n    count_dict = dict(count)\n\n    # Looping through the list and updating the count of each element in the dictionary\n    for element in lst:\n        count_dict[element] += 1\n\n    return count_dict"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num ** 3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**3)\n    return result"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cal_sum(n):\n    \"\"\"\n    This function takes an integer argument n and returns the sum of the perrin numbers up to n.\n    \"\"\"\n    perrin_numbers = [1, 1, 2, 3, 4, 5, 7, 10, 15, 21, 28, 36, 45, 55, 66, 78, 91, 105, 120, 136, 153, 171, 190, 210, 231, 253, 276, 300, 325, 351, 378, 406, 435, 465, 496, 528, 561, 595, 630, 666, 703, 741, 780, 820, 861, 903, 946, 990, 1035, 1081, 1128, 1176, 1225, 1275, 1326, 1378, 1431, 1485, 1540, 1595, 1652, 1709, 1767, 1826, 1886, 1947, 2010, 2073, 2137, 2203, 2269, 2336, 2404, 2473, 2543, 2614, 2685, 2757, 2830, 2904, 2979, 3055, 3131, 3208, 3286, 3366, 3446, 3527, 3609, 3692, 3775, 3860, 3945, 4032, 4120, 4208, 4298, 4388, 4479, 4571, 4664, 4758, 4853, 4949, 5045, 5142, 5240, 5338, 5437, 5537, 5638, 5740, 5842, 5945, 6050, 6155, 6262, 6369, 6477, 6586, 6696, 6806, 6918, 7030, 7143, 7257, 7372, 7488, 7605, 7722, 7841, 7960, 8080, 8201, 8323, 8445, 8569, 8693, 8819, 8945, 9072, 9200, 9329, 9459, 9590, 9722, 9854, 9988]\n    return sum(perrin_numbers[:n+1])"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    # Define the list of perrin numbers\n    perrin_numbers = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024]\n    \n    # Initialize the sum variable to 0\n    sum_perrin = 0\n    \n    # Loop through the list of perrin numbers and add each number to the sum variable\n    for num in perrin_numbers:\n        sum_perrin += num\n        \n    # Return the sum of the perrin numbers\n    return sum_perrin"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum_perrin = 0\n    for i in range(1, n+1):\n        sum_perrin += i\n    return sum_perrin"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    p = 1\n    sum_p = 0\n    while p <= n:\n        sum_p += p\n        p += 1\n    return sum_p"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    p = 1\n    total = 0\n    for i in range(1, n+1):\n        total += p\n        p = 3*p - 1\n    return total"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    # initialize the sum to zero\n    total = 0\n    # loop over the range of numbers from 1 to n\n    for i in range(1, n+1):\n        # compute the nth perrin number\n        p = 10**(i-1)\n        # add the perrin number to the total\n        total += p\n    # return the total\n    return total"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n\n    perrin_numbers = [10**(i + 1) for i in range(n)]\n    total = 0\n    \n    for num in perrin_numbers:\n        total += num\n        \n    return total"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cal_sum(n): \n    \"\"\"\n    This function calculates the sum of perrin numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**2\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of Perrin numbers.\n    '''\n    p = 1\n    sum = 0\n    for i in range(1, n+1):\n        sum += (2*i)**p\n    return sum\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The sum of Perrin numbers is:\", cal_sum(n))"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin = [3, 5, 7]\n    return sum(perrin[:n])"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_string(str, l):\n    \"\"\"\n    Write a function to extract specified size of strings from a given list of string values.\n    \"\"\"\n    result = []\n    for i in range(0, len(l), l):\n        temp = \"\"\n        for j in range(l):\n            if j < len(l) - 1:\n                temp += l[i+j]\n            else:\n                temp += l[i+j]\n                break\n        result.append(temp)\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_string(str_list, l):\n    '''\n    This function takes a list of string values and an integer 'l' representing the size of string to be extracted.\n    It returns a new list containing the extracted strings from the input list.\n    '''\n    extracted_str_list = []\n    for string in str_list:\n        extracted_str = string[:l]\n        extracted_str_list.append(extracted_str)\n    return extracted_str_list"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of strings and an integer value representing the size of the strings to extract.\n    It returns a new list containing the extracted strings.\n    '''\n    extracted_strings = []\n    for i in range(len(str_list)):\n        if len(str_list[i]) == size:\n            extracted_strings.append(str_list[i])\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of strings and a specified size as input and\n    returns a list of strings of specified size.\n    '''\n    # initialize an empty list to store the extracted strings\n    extracted_list = []\n    # loop through the input list of strings\n    for i in range(0, len(str_list), size):\n        # extract the specified size of strings and append it to the extracted list\n        extracted_list.append(' '.join(str_list[i:i+size]))\n    return extracted_list"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    extracted_list = []\n    for item in l:\n        if len(item) >= l:\n            extracted_list.append(item[:l])\n    return extracted_list"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes in a list of string values and a size as input.\n    It then extracts the specified size of strings from the list and returns it as a list.\n    '''\n    extracted_str = []\n    for s in str_list:\n        if len(s) == size:\n            extracted_str.append(s)\n    return extracted_str"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of strings and a size parameter and returns a list of\n    strings of the specified size extracted from the input list.\n    '''\n    result = []\n    for i in range(len(str_list)):\n        if len(str_list[i]) == size:\n            result.append(str_list[i])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    Extract a specified size of strings from a given list of string values.\n\n    Args:\n        str_list (list): A list of string values.\n        size (int): The size of strings to be extracted.\n\n    Returns:\n        list: A list of extracted strings.\n    \"\"\"\n    extracted_strings = []\n    for i in range(len(str_list)):\n        extracted_strings.append(str_list[i][:size])\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of strings and a size as input and returns a list of strings\n    containing the specified size of strings from the input list. If the size is greater than\n    the length of a string in the list, an empty string will be returned.\n    '''\n    return [str for str in str_list[:size] if len(str) == size]"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of string values and the size of the strings to extract and returns a list of extracted strings.\n    '''\n    extracted_list = []\n    for i in range(len(str_list)):\n        if len(str_list[i]) <= size:\n            extracted_list.append(str_list[i])\n    return extracted_list"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    \"\"\"\n    Write a function to remove all whitespaces from the given string.\n    \"\"\"\n    return re.sub('\\s+', '', text1)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = re.sub(r'\\s+','', text1)\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Use regular expression to remove all whitespaces from string\n    text1 = re.sub(r'\\s+','', text1)\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Removing all whitespaces using regular expression\n    text1 = re.sub('\\s+','', text1)\n    # Removing whitespaces at the beginning and the end of the string\n    text1 = text1.strip()\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Use regular expressions to remove all whitespaces from the text\n    text2 = re.sub(r'\\s+','', text1)\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    \"\"\"\n    Write a function to remove all whitespaces from the given string.\n    \"\"\"\n    # using regular expression to remove all whitespaces from the string\n    text1 = re.sub(r'\\s+','', text1).strip()\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Remove all occurrences of whitespaces from the string\n    text = re.sub(r'\\s+','', text)\n    return text"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # remove all whitespaces using regular expressions\n    text1 = re.sub(r'\\s+','', text1)\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Remove all whitespaces using regular expressions\n    text2 = re.sub('\\s+','', text1)\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = re.sub('\\s+','', text1) #replace all whitespaces with a single space\n    return text1"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    if actual_cost > sale_amount:\n        loss = actual_cost - sale_amount\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost - sale_amount > 0:\n        return actual_cost - sale_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost:\n        loss_amount = sale_amount - actual_cost\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost >= sale_amount: \n        return 0\n    else: \n        return actual_cost - sale_amount"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    if actual_cost > sale_amount:\n        loss_amount = actual_cost - sale_amount\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount >= actual_cost:\n        return 0\n    else:\n        return sale_amount - actual_cost"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost,sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    \"\"\"\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    \"\"\"\n    if actual_cost > sale_amount:\n        loss_amount = actual_cost - sale_amount\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost < sale_amount:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    total = 0\n    i = 2\n    while i <= n:\n        if n % i == 0 and i % 2 == 0:\n            total += i\n        i += 1\n    return total"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2,int(math.sqrt(n))+1) : \n        if n%i == 0 and i%2 == 0 : \n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    # initialize sum variable to 0\n    total = 0\n\n    # loop through all odd numbers from 1 to n-1\n    for i in range(1, n):\n        # check if i is even\n        if i % 2 == 0:\n            # add i to total\n            total += i\n\n    return total"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef sumofFactors(n): \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n\n    # Initialize variables \n    evenSum = 0 \n    # Use list comprehension to get all even factors of n \n    factors = [x for x in range(2, int(math.sqrt(n))+1, 2) if n % x == 0] \n    # Add up all even factors \n    for factor in factors: \n        evenSum += factor \n    # Return sum of even factors \n    return evenSum "
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    evenFactors = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n%i == 0 and i%2 == 0:\n            evenFactors += i\n    return evenFactors"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef sum_even_factors(n):\n    '''\n    This function calculates the sum of even factors of a number using a recursive function.\n    '''\n\n    # Base case: If n is 1, return 0 as there are no even factors.\n    if n == 1:\n        return 0\n\n    # Recursive case: If n is even, add it to the sum of even factors of n/2.\n    if n % 2 == 0:\n        return n + sum_even_factors(n//2)\n\n    # If n is odd, add 2 to the sum of even factors of (n+1)/2.\n    else:\n        return sum_even_factors((n+1)//2)"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum_of_factors = 0\n    for i in range(2, int(math.sqrt(n))+1) : \n        if n % i == 0 : \n            if i % 2 == 0 : \n                sum_of_factors += i\n    return sum_of_factors"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    evenFactorsSum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                evenFactorsSum += i\n    return evenFactorsSum\n"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    even_factors = [x for x in range(2, n+1) if n % x == 0 and x % 2 == 0]\n    return sum(even_factors)"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    This function takes a string as input and returns a list of all the words\n    that contain 'z'.\n    '''\n    words = re.findall(r'\\b\\w*[zZ]\\w*\\b', text, re.IGNORECASE)\n    return words"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    This function matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w+z\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    word_pattern = r'\\b\\w*[zZ]\\w*\\b'\n    matches = re.findall(word_pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\w*z\\w*'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b\\w+z\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+\\sz\\b'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+z\\b'\n    return re.findall(pattern, text)"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    word_pattern = r'\\b\\w+z\\b'\n    matches = re.findall(word_pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    \n    # Match any word that contains the letter 'z'\n    pattern = r'\\w+z\\w+'\n    \n    # Use the re.search() function to search for the pattern in the text\n    result = re.search(pattern, text)\n    \n    # Return the match if found, or None otherwise\n    return result"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b(z)\\w+\\b'\n    return re.findall(pattern, text)"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 2 and (year % 4 == 0 and (year % 100!= 0 or year % 400 == 0)):\n        return True\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    # check whether the month number is a number or not\n    if not isinstance(monthnum2, int):\n        return \"Please provide a valid integer for the month number.\"\n    \n    # check whether the month number is between 1 and 12\n    if monthnum2 < 1 or monthnum2 > 12:\n        return \"Please provide a valid month number between 1 and 12.\"\n    \n    # check whether the month number has 31 days or not\n    if monthnum2 == 2:\n        if (year % 4 == 0 and year % 100!= 0) or (year % 400 == 0):\n            return True\n        else:\n            return False\n    elif monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    monthnum = int(monthnum2)\n    days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if monthnum == 2 and (year % 4 == 0 and (year % 100!= 0 or year % 400 == 0)):\n        days_in_month[1] = 29\n    return days_in_month[monthnum - 1]"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum):\n    if len(str(monthnum)) == 2:\n        if monthnum % 2 == 0:\n            return True\n        elif monthnum % 2 == 1:\n            return False\n    elif len(str(monthnum)) == 3:\n        if monthnum % 2 == 0:\n            return True\n        elif monthnum % 2 == 1:\n            return False\n    else:\n        print(\"Invalid input!\")\n        return None"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    days_in_month = {1: 31, 3: 31, 5: 31, 7: 31, 8: 30, 10: 31, 12: 31}\n    if monthnum in days_in_month:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum):\n    if monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return False\n    elif monthnum in [4, 6, 9, 11]:\n        return True\n    else:\n        return None\n"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    monthnum2 = int(monthnum2)\n    if monthnum2 in [4, 6, 9, 11]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum2 in [4, 6, 9, 11]:\n        return False\n    else:\n        print(\"Invalid month number\")\n        return None"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 2:\n        return True\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return False\n    else:\n        return True"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # iterate through the list of strings\n    for i in range(len(stringlist)):\n        # split the string into a list of characters\n        charlist = list(stringlist[i])\n        # reverse the list of characters\n        charlist.reverse()\n        # join the characters back into a string\n        stringlist[i] = ''.join(charlist)\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # Loop through each string in the list and reverse it\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # Loop through each string in the list\n    for i in range(len(stringlist)):\n        # Reverse the string by slicing the string from the end to the beginning\n        reversed_string = stringlist[i][::-1]\n        # Replace the original string in the list with the reversed string\n        stringlist[i] = reversed_string\n    # Return the modified list\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_string = string[::-1]\n        reversed_list.append(reversed_string)\n    return reversed_list"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min(lst):\n    # initialize minimum length and the minimum sublist found\n    min_len = float('inf')\n    min_sublist = None\n    \n    # loop through each sublist in the list\n    for sublist in lst:\n        # find the length of the sublist\n        sublist_len = len(sublist)\n        \n        # if the length of the sublist is less than the minimum length found so far, update the minimum length and sublist\n        if sublist_len < min_len:\n            min_len = sublist_len\n            min_sublist = sublist\n    \n    # return the minimum sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    sublist = None\n    min_len = None\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            if len(lst[i:j+1]) < min_len or (len(lst[i:j+1]) == min_len and lst[i:j+1] < sublist):\n                sublist = lst[i:j+1]\n                min_len = len(lst[i:j+1])\n    return sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    # Initialize variables\n    min_len = len(lst)\n    min_sublist = lst\n    # Loop through the list and find the sublist with minimum length\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if len(lst[i:j+1]) < min_len:\n                min_len = len(lst[i:j+1])\n                min_sublist = lst[i:j+1]\n    return min_sublist\n"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min(lst):\n    '''\n    This function takes a list as input and returns the sublist with the minimum length.\n    '''\n    min_len = len(lst[0])\n    min_sublist = lst[0]\n    \n    for sublist in lst[1:]:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n    \n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf')\n    min_lst = []\n    for i in range(len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n            min_lst = [lst[i]]\n        elif len(lst[i]) == min_len:\n            min_lst.append(lst[i])\n    return min_lst"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    # Initialize the minimum length to be the length of the input list\n    min_len = len(lst)\n    # Initialize the minimum sublist to be the input list itself\n    min_sublist = lst\n    # Loop through the input list and check if the sublist length is less than the minimum length\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            # Check if the sublist has a length between i and j\n            if j-i+1 < min_len:\n                min_len = j-i+1\n                min_sublist = lst[i:j+1]\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf')\n    min_sublist = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublist = lst[i:j]\n            if len(sublist) < min_len:\n                min_len = len(sublist)\n                min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min(lst):\n    \"\"\"\n    Write a python function to find the sublist having minimum length.\n    \"\"\"\n    min_len = float('inf')\n    min_sublist = None\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    # initialize variables\n    min_length = float('inf')\n    min_sublist = []\n    \n    # loop through the list and find the sublist with minimum length\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    \n    # return the minimum sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n\n    min_length = float('inf')\n    min_sublist = []\n\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n\n    return min_sublist"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rectangle_area(l, b):\n    '''\n    This function calculates the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    area = l * b\n    return area"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_uppercase(string):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = re.compile(r'\\b[A-Z]+\\b', re.IGNORECASE)\n    return pattern.sub('', string)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    uppercase_pattern = re.compile(r'[A-Z]+')\n    return uppercase_pattern.sub('', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_uppercase(string):\n    \"\"\"\n    Write a function to remove uppercase substrings from a given string.\n    \"\"\"\n    uppercase_pattern = re.compile(r'\\b[A-Z][a-z]+\\b')\n    return uppercase_pattern.sub('', string)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    uppercase = re.findall(r'[A-Z]+', str1)\n    for item in uppercase:\n        str1 = str1.replace(item, '')\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub(r'\\b[A-Z]\\w*\\b', '', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    # Define a regular expression pattern for uppercase substrings\n    pattern = r'[A-Z]'\n    # Use the `re.sub()` function to remove all uppercase substrings from the string\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    \"\"\"\n    This function removes uppercase substrings from a given string.\n    \"\"\"\n    pattern = r'(?i)[A-Z]+'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Define a regular expression pattern for uppercase substrings\n    pattern = re.compile(r'(?i)[A-Z].*')\n\n    # Find all uppercase substrings in the string\n    matches = pattern.findall(str1)\n\n    # Loop through the matches and remove them from the string\n    for match in matches:\n        str1 = str1.replace(match, '')\n\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub(r'[A-Z]+', '', str1.upper())"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n\n    # define regular expression pattern to match uppercase substrings\n    pattern = r'\\b[A-Z]+\\b'\n\n    # find all uppercase substrings in the input string\n    uppercase_substrings = re.findall(pattern, str1)\n\n    # loop through all uppercase substrings and replace them with spaces\n    for substring in uppercase_substrings:\n        str1 = re.sub(substring,'', str1)\n\n    # return the modified string\n    return str1"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n\n    # Loop through each sublist in the list\n    for sublist in lst: \n        # Get the first element of the sublist\n        first_element = sublist[0] \n        # Print the first element\n        print(first_element)"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for i in lst:\n        if isinstance(i, list):\n            result.append(i[0])\n        else:\n            result.append(i)\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        if sublist:\n            result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    sublist_elements = []\n    for sublist in lst:\n        sublist_elements.append(sublist[0])\n    return sublist_elements"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            lst[i][j] = lst[i][j][0]\n    return lst"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [lst[0]]*len(lst)"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        if len(sublist) > 0:\n            result.append(sublist[0])\n    return result"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def upper_ctr(string):\n    \"\"\"\n    This function takes a string as input and returns the number of upper case characters in the string.\n    \"\"\"\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    \"\"\"\n    Write a python function to count the upper case characters in a given string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    '''\n    This function counts the number of upper case characters in a given string.\n    '''\n    upper_count = 0\n    for char in str:\n        if char.isupper():\n            upper_count += 1\n    return upper_count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def upper_ctr(string):\n    \"\"\"\n    Count the upper case characters in a given string.\n    \"\"\"\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # Get the length of the list\n    n = len(list1)\n    # Initialize a list to store all the combinations\n    combinations = []\n    # Iterate over all possible indices\n    for i in range(n):\n        # Initialize a list to store the current combination\n        current_combination = []\n        # Iterate over all possible indices from index i+1 to n-1\n        for j in range(i+1, n):\n            # Add the element at index i to the current combination and append it to the combinations list\n            current_combination.append(list1[i])\n            # Add the element at index j to the current combination and append it to the combinations list\n            current_combination.append(list1[j])\n            # Append the current combination to the combinations list\n            combinations.append(current_combination)\n    # Return the combinations list\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # Function to find all combinations of a given list\n    def find_combinations(lst, start):\n        if len(lst) == 0:\n            return []\n        if len(lst) == 1:\n            return [[start]]\n        else:\n            combinations = []\n            for i in range(start, len(lst)):\n                remaining = lst[:i] + lst[i+1:]\n                combinations += find_combinations(remaining, start+i+1)\n            return combinations\n    # Find all combinations of the given list\n    return find_combinations(list1, 0)"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n\n    # Initialize variables\n    combs = []\n    l = len(list1)\n\n    # Loop through each element in the list\n    for i in range(1, l+1):\n\n        # Initialize the current combination\n        curr_comb = []\n\n        # Loop through the remaining elements\n        for j in range(l):\n\n            # Add the current element to the combination\n            curr_comb.append(list1[j])\n\n            # Check if the combination is complete\n            if len(curr_comb) == i:\n\n                # Add the combination to the list of combinations\n                combs.append(curr_comb)\n\n                # Move to the next combination\n                break\n\n            # Move to the next element of the current combination\n            j += 1\n\n        # Move to the next element of the list\n        i += 1\n\n    # Return the list of combinations\n    return combs"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # Create an empty list to store the combinations\n    combinations = []\n    \n    # Loop through all possible pairs of elements\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            # Append the combination to the list\n            combinations.append(list1[i:j])\n    \n    # Return the list of combinations\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    n = len(list1)\n    result = []\n    for i in range(2**n):\n        combination = []\n        for j in range(n):\n            if i & (1<<j):\n                combination.append(list1[j])\n        result.append(combination)\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            combination = list1[i:j]\n            result.append(combination)\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # Convert the list into a set to remove duplicates\n    list1 = set(list1)\n\n    # Initialize an empty list to store the combinations\n    combinations = []\n\n    # Generate all possible combinations of the list using nested loops\n    for i in range(1, len(list1) + 1):\n        for j in range(len(list1) - i + 1):\n            combination = tuple(sorted(list1[j:j+i]))\n            combinations.append(combination)\n\n    # Return the list of combinations\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = arr[0]\n    max_ending_here = 1\n    min_ending_here = 1\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    current_product = 1\n    for num in arr:\n        current_product = max(num, current_product * num)\n        max_product = max(max_product, current_product)\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n\n    # Initialize variables for the maximum product and current product\n    max_product = arr[0]\n    current_product = arr[0]\n\n    # Loop through the array\n    for i in range(1, len(arr)):\n        # Update current product based on whether the current element is positive or negative\n        current_product = max(arr[i], current_product * arr[i])\n        # Update the maximum product if the current product is greater\n        max_product = max(max_product, current_product)\n\n    # Return the maximum product\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    max_product = float('-inf')\n    current_product = 1\n    for num in arr:\n        if current_product < 0:\n            current_product = 1\n        current_product *= num\n        if current_product > max_product:\n            max_product = current_product\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(max_ending_here * arr[i], arr[i], max_ending_here)\n        min_ending_here = min(min_ending_here * arr[i], arr[i], min_ending_here)\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(max_ending_here * arr[i], arr[i], max_ending_here)\n        min_ending_here = min(min_ending_here * arr[i], arr[i], min_ending_here)\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n\n    # Initialize variables to store the maximum subarray product and its starting index\n    max_product = arr[0]\n    start_index = 0\n\n    # Iterate through the array and calculate the maximum subarray product ending at each index\n    for i in range(1, len(arr)):\n        if arr[i] > 0:\n            arr[i] *= arr[i-1]\n        else:\n            arr[i] *= arr[i-1]\n\n        if arr[i] > max_product:\n            max_product = arr[i]\n            start_index = i\n\n    # Return the maximum subarray product and its starting index\n    return max_product, start_index"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(max_ending_here * arr[i], arr[i], max_ending_here)\n        min_ending_here = min(min_ending_here * arr[i], arr[i], min_ending_here)\n\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    max_product = arr[0]\n    \n    for i in range(1, len(arr)):\n        max_ending_here = max(max_ending_here * arr[i], arr[i])\n        min_ending_here = min(min_ending_here * arr[i], arr[i])\n        max_product = max(max_product, max_ending_here, min_ending_here)\n    \n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    max_product = float('-inf')\n    max_so_far = 1\n    min_so_far = 1\n\n    for num in arr:\n        if num < 0:\n            max_so_far, min_so_far = min_so_far, max_so_far\n\n        max_so_far = max(max_so_far * num, num)\n        min_so_far = min(min_so_far * num, num)\n\n        max_product = max(max_product, max_so_far)\n\n    return max_product"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) < 2:\n        return False\n    \n    first_value = list(dict.values())[0]\n    for value in list(dict.values()):\n        if value!= first_value:\n            return False\n    \n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    value = next(iter(dict.values()))\n    for v in dict.values():\n        if v!= value:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n\n    if len(dict)!= n:\n        return False\n\n    for value in dict.values():\n        if value!= dict.values()[0]:\n            return False\n\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    all_values = []\n    for value in dict.values():\n        all_values.append(value)\n    return all_values == all_values[:n]"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(set(dict.values())) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) == 0:\n        return True\n    \n    val = dict.values()[0]\n    for i in dict.values():\n        if i!= val:\n            return False\n    \n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n\n    # Check if the length of the dictionary is same as n\n    if len(dict) == n:\n\n        # Check if all the values are same\n        for i in range(n):\n            if dict.values()[i]!= dict.values()[0]:\n                return False\n\n        # If all the values are same, return True\n        return True\n\n    # If the length of the dictionary is not same as n, return False\n    return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    return all(dict.values())"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n\n    # Initialize a variable to store the result\n    result = True\n\n    # Iterate over the values in the dictionary\n    for i in range(len(dict[list(dict.keys())[0]])):\n        # Check if all the values are same in the current dictionary\n        for key, value in dict.items():\n            if value[i]!= value[0]:\n                result = False\n                break\n        if not result:\n            break\n\n    return result"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    \"\"\"\n    Write a function to check if all values are same in a dictionary.\n    \"\"\"\n    value = dict.values()[0]\n    for i in dict.values():\n        if i!= value:\n            return False\n    return True"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    # Loop through each key-value pair in the dictionary\n    for key, value in dict1.items():\n        # Check if the value is an empty string or a list or tuple\n        if not (value == '' or isinstance(value, (list, tuple)) and len(value) == 0):\n            # If the value is not empty, add it to a new dictionary\n            new_dict = {key: value}\n            # Replace the old key-value pair with the new one\n            dict1[key] = new_dict"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for key in dict1:\n        if not dict1[key]:\n            del dict1[key]\n    return dict1"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {key: value for key, value in dict1.items() if value}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v!= ''}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v is not None}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key: value for key, value in dict1.items() if value!= ''}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {k: v for k, v in dict1.items() if v is not None and v!= ''}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {key: value for key, value in dict1.items() if value!= \"\"}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key: value for key, value in dict1.items() if value}"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product(arr):\n    n = len(arr)\n    max_so_far = max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, n):\n        if arr[i] > max_ending_here:\n            max_ending_here = arr[i]\n            max_so_far = max(max_so_far, max_ending_here)\n        elif arr[i] < min_ending_here:\n            min_ending_here = arr[i]\n            max_so_far = max(max_so_far, min_ending_here)\n        else:\n            max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far\n"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    n = len(arr)\n    # Finding the length of the longest increasing subsequence\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j] and i - j > arr[i - j]:\n                max_length = i - j\n\n    # Finding the maximum product of the subsequences\n    max_product = 0\n    for i in range(n):\n        for j in range(max_length):\n            subseq = arr[i:i+j+1]\n            subseq_product = 1\n            for k in range(j):\n                subseq_product *= subseq[k]\n            if subseq_product > max_product:\n                max_product = subseq_product\n\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product(arr):\n    n = len(arr)\n    if n < 2:\n        return 0\n    \n    # Initialize variables\n    max_left = arr[0]\n    min_right = arr[n-1]\n    max_right = arr[n-1]\n    max_so_far = arr[0]\n    \n    # Traverse the array from both ends\n    for i in range(1, n-1):\n        left = max(arr[i-1], arr[i])\n        right = min(arr[i+1], arr[i])\n        \n        # Update the maximum product found so far\n        max_product_here = max(max_left * left, min_right * right)\n        max_left = left\n        min_right = right\n        max_right = max(max_right, arr[i])\n        max_so_far = max(max_so_far, max_product_here)\n    \n    # Return the maximum product found so far\n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product(arr):\n    \"\"\"\n    This function takes an array of integers and returns the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    n = len(arr)\n    max_product_so_far = max_product_ending_here = arr[0]\n    for i in range(1, n):\n        if arr[i] > max_product_ending_here:\n            max_product_ending_here = arr[i]\n        elif arr[i] < 0:\n            max_product_ending_here = max_product_so_far\n            max_product_so_far = max_product_ending_here\n        else:\n            max_product_ending_here = max_product_so_far * arr[i]\n            max_product_so_far = max(max_product_so_far, max_product_ending_here)\n    return max_product_ending_here"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product(arr):\n    if len(arr) == 0:\n        return 0\n    elif len(arr) == 1:\n        return arr[0]\n    else:\n        max1 = arr[0]\n        max2 = arr[0]\n        min1 = arr[0]\n        min2 = arr[0]\n\n        for i in range(1, len(arr)):\n            max1 = max(arr[i], max1 * arr[i])\n            min1 = min(arr[i], min1 * arr[i])\n            max2 = max(arr[i], max2 * arr[i])\n            min2 = min(arr[i], min2 * arr[i])\n\n        return max(max1, max2)"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    if len(arr) == 1:\n        return 0\n\n    min_price = max_price = arr[0]\n    min_profit = max_profit = 0\n\n    for i in range(1, len(arr)):\n        if arr[i] < min_price:\n            min_price = arr[i]\n            min_profit = i\n        elif arr[i] > max_price:\n            max_price = arr[i]\n            max_profit = i\n        else:\n            if arr[i] > max_price:\n                max_profit = i\n\n    return max(min_profit * (max_price - min_price), max_profit * (arr[len(arr)-1] - max_price))"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n\n    # Find the length of the array\n    n = len(arr)\n\n    # Initialize a variable to store the maximum product\n    max_product = float('-inf')\n\n    # Initialize a variable to store the maximum product of the first element\n    max_product_1 = float('-inf')\n\n    # Initialize a variable to store the maximum product of the last element\n    max_product_last = float('-inf')\n\n    # Initialize two variables to store the maximum product of the subsequence ending at each index\n    max_product_1_2 = float('-inf')\n    max_product_last_2 = float('-inf')\n\n    # Iterate through the array\n    for i in range(n):\n\n        # Check if the product of the current element and the previous element is greater than the maximum product of the subsequence ending at the previous index\n        if i > 0 and arr[i] * arr[i-1] > max_product_1_2:\n            max_product_1_2 = arr[i] * arr[i-1]\n\n        # Check if the product of the current element and the last element is greater than the maximum product of the subsequence ending at the last index\n        if i < n-1 and arr[i] * arr[i+1] > max_product_last_2:\n            max_product_last_2 = arr[i] * arr[i+1]\n\n        # Update the maximum product if the product of the current element and the previous element is greater than the current maximum product\n        if max_product_1_2 > max_product:\n            max_product = max_product_1_2\n\n        # Update the maximum product if the product of the current element and the last element is greater than the current maximum product\n        if max_product_last_2 > max_product:\n            max_product = max_product_last_2\n\n        # Update the maximum product of the first element if the product of the current element and the previous element is greater than the current maximum product of the first element\n        if max_product_1_2 > max_product_1:\n            max_product_1 = max_product_1_2\n\n        # Update the maximum product of the last element if the product of the current element and the last element is greater than the current maximum product of the last element\n        if max_product_last_2 > max_product_last:\n            max_product_last = max_product_last_2\n\n    # Return the maximum product\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    n = len(arr)\n    if n < 2:\n        return 0\n    \n    # Initialize the maximum product and the current product\n    max_product = float('-inf')\n    current_product = 1\n    \n    # For each element in the array\n    for i in range(n):\n        # If the element is smaller than the current product, update the current product\n        if arr[i] < current_product:\n            current_product = arr[i]\n            # If the current product is now negative, update the maximum product\n            if current_product < 0:\n                max_product = current_product\n        # If the element is greater than the current product, update the maximum product\n        else:\n            # Update the maximum product with the product of the current product and the current element\n            max_product = max(max_product, current_product * arr[i])\n    \n    # Return the maximum product found\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    \n    # Initialize variables\n    max_product_ending_here = arr[0]\n    max_product_so_far = arr[0]\n    \n    # Loop through the array\n    for i in range(1, len(arr)):\n        # Update max_product_ending_here\n        if arr[i] > max_product_ending_here:\n            max_product_ending_here = arr[i]\n        else:\n            max_product_ending_here = arr[i] * max_product_ending_here\n        \n        # Update max_product_so_far\n        if max_product_ending_here > max_product_so_far:\n            max_product_so_far = max_product_ending_here\n        else:\n            max_product_so_far = max_product_ending_here\n            \n    return max_product_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product(arr):\n    n = len(arr)\n    # create a list of tuples, where each tuple contains a number and its position in the array\n    num_positions = [(num, i) for i, num in enumerate(arr)]\n    # sort the list of tuples by the number\n    num_positions.sort(key=lambda x: x[0])\n\n    # initialize the maximum product and the current product\n    max_product = float('-inf')\n    current_product = 1\n\n    # iterate over the sorted list of tuples\n    for num, i in num_positions:\n        # if the current product is negative, reset it to 1\n        if current_product < 0:\n            current_product = 1\n\n        # update the maximum product if the new product is greater than it\n        if current_product * num > max_product:\n            max_product = current_product * num\n\n        # update the current product by multiplying it with the number\n        current_product *= num\n\n    return max_product"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    n = len(test_tup)\n    for i in range(n-1):\n        for j in range(i+1, n):\n            print(i, j, test_tup[i]+test_tup[j])"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    n = len(test_tup)\n    if n % 2 == 1:  # if the length of the tuple is odd\n        # add the last element and the second-to-last element\n        return (test_tup[0] + test_tup[n-2], test_tup[1] + test_tup[n-1])\n    else:  # if the length of the tuple is even\n        # add the second last and second last elements\n        return (test_tup[0] + test_tup[n-4], test_tup[1] + test_tup[n-3])"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n    result = 0\n    for i in range(1, len(test_tup)):\n        result += test_tup[i] - test_tup[i - 1]\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    n = len(test_tup)\n    pairwise_sum = 0\n    for i in range(n-1):\n        pairwise_sum += test_tup[i] + test_tup[i+1]\n    return pairwise_sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Use zip to iterate over the tuple and its elements.\n    for i, j in zip(test_tup, test_tup[1:]):\n        # Use a lambda function to add the neighboring elements.\n        add = lambda x, y: x + y\n        # Call the lambda function with the current i and j elements.\n        result = add(i, j)\n        # Return the sum.\n        return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Get the length of the tuple\n    n = len(test_tup)\n    \n    # Initialize the result\n    result = 0\n    \n    # Loop through the tuple and add the adjacent elements\n    for i in range(n-1):\n        result += test_tup[i] + test_tup[i+1]\n        \n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return None\n    else:\n        return sum(test_tup[1:]) - sum(test_tup[:-1])"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # get the length of the tuple\n    length = len(test_tup)\n    # loop through the tuple and calculate the pairwise addition\n    for i in range(length-1):\n        test_tup[i] += test_tup[i+1]\n    # return the final tuple\n    return test_tup"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    pairwise_sum = 0\n    for i in range(len(test_tup) - 1):\n        pairwise_sum += test_tup[i] + test_tup[i + 1]\n    return pairwise_sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        raise ValueError(\"The input tuple should have at least two elements.\")\n    else:\n        result = 0\n        for i in range(1, len(test_tup)):\n            result += test_tup[i-1] + test_tup[i]\n        return result"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # Multiply all elements of the array\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    \n    # Return the final product\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n\n    # initialize the result variable to 1\n    result = 1\n\n    # iterate through the array and multiply each element by the result modulo n\n    for num in arr:\n        result = (result*num) % n\n\n    # return the result\n    return result"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n        product %= n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in range(len(arr)):\n        product = (product * arr[i]) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # Find the product of the array\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n        \n    # Return the product modulo n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    else:\n        product = find_remainder(arr[:-1], n)\n        return (product * arr[-1]) % n"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_remainder(arr, n):\n    '''\n    This function takes in an array and a number n and returns the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in range(len(arr)):\n        product = (product * arr[i]) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    prod = 1\n    for i in arr:\n        prod = (prod * i) % n\n    return prod"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_remainder(arr, n):\n    \"\"\"\n    This function takes an array and a number 'n' as input and returns the product of the array multiplication modulo n.\n    \"\"\"\n\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n\n    return product"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) < 2: \n        return False \n    for i in range(len(l)-1): \n        if l[i] + 1 == l[i+1]: \n            return True \n    return False "
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    This function takes a list `l` as input and returns True if all the numbers in the list are consecutive, \n    and False otherwise.\n    \"\"\"\n    for i in range(len(l) - 1):\n        if l[i] + 1!= l[i + 1]:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] + 1!= l[i+1]:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1): \n        if l[i]+1 == l[i+1]: \n            return True \n    return False "
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] == l[i+1]-1:\n            print(\"Consecutive\")\n            return True\n    print(\"Not Consecutive\")\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    n = len(l)\n    for i in range(n-1): \n        if l[i] == l[i+1] + 1: \n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_Consecutive(l): \n    \"\"\"\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    \"\"\"\n    for i in range(len(l)-1): \n        if l[i] + 1 == l[i+1]: \n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if not l: \n        return False \n    for i in range(len(l)-1): \n        if l[i] + 1 == l[i+1]: \n            return True \n        else: \n            continue \n    return False "
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) < 2: \n        return True\n    for i in range(len(l)-1): \n        if l[i] == l[i+1] + 1: \n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_Consecutive(l):\n    if len(l) < 2:\n        return False\n    \n    for i in range(len(l)-1):\n        if l[i] + 1!= l[i+1]:\n            return False\n            \n    return True"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # Sort the lists to make sure they have the same elements in the same order\n    test_list1.sort()\n    test_list2.sort()\n    \n    # Create an empty set to store the common elements\n    common_set = set()\n    \n    # Iterate over the sorted lists\n    i = j = 0\n    while i < len(test_list1) and j < len(test_list2):\n        if test_list1[i] == test_list2[j]:\n            common_set.add(test_list1[i])\n            i += 1\n            j += 1\n        elif test_list1[i] < test_list2[j]:\n            i += 1\n        else:\n            j += 1\n    \n    # Convert the set to a list and return it\n    return list(common_set)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # create a set of elements in list1\n    set1 = set(test_list1)\n    # create an empty set to store the intersection of elements in list1 and list2\n    intersection = set()\n    # iterate through each element in list2\n    for element in test_list2:\n        # check if the element is present in list1 and add it to the intersection set if it is\n        if element in set1:\n            intersection.add(element)\n    # return the intersection set as a tuple\n    return tuple(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    This function finds the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # create a set of all elements in the first tuple list\n    set1 = set(test_list1)\n\n    # create an empty set to store the common elements in the second tuple list\n    common_elements = set()\n\n    # loop through the second tuple list and add the common elements to the common_elements set\n    for element in test_list2:\n        if element in set1:\n            common_elements.add(element)\n\n    # convert the common_elements set to a tuple and return it\n    return tuple(common_elements)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    This function takes two list of tuples as input and returns the tuple intersection of the two lists.\n    '''\n    # convert the input lists to sets to eliminate duplicates\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n\n    # find the intersection of the two sets\n    intersection = set1.intersection(set2)\n\n    # convert the intersection set back to a list and return it\n    return list(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Create a set of elements from both lists\n    combined_set = set(test_list1 + test_list2)\n\n    # Create a new list to store the common elements\n    common_list = []\n\n    # Iterate through the set and add common elements to the new list\n    for element in combined_set:\n        if element in test_list1 and element in test_list2:\n            common_list.append(element)\n\n    # Return the new list as the tuple intersection\n    return tuple(common_list)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # create a set of unique tuples from the two lists\n    unique_tuples = set(test_list1 + test_list2)\n    \n    # create an empty list to hold the unique elements\n    intersection_list = []\n    \n    # loop through the unique tuples and add them to the intersection_list if they are present in both lists\n    for tup in unique_tuples:\n        if tup in test_list1 and tup in test_list2:\n            intersection_list.append(tup)\n            \n    return tuple(intersection_list)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Create a set of the elements in the first list\n    set1 = set(test_list1)\n    # Create a set of the elements in the second list\n    set2 = set(test_list2)\n    # Find the intersection of the two sets\n    intersection = set1.intersection(set2)\n    # Convert the intersection set back to a list\n    intersection_list = list(intersection)\n    # Return the intersection list\n    return intersection_list"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    This function takes two tuple lists as input and returns a new tuple list that contains the elements that are present in both lists irrespective of their order.\n    \"\"\"\n    # Create a set from each list to remove duplicate elements\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n\n    # Find the intersection of the sets\n    intersection = set1.intersection(set2)\n\n    # Convert the intersection set back to a list and return it\n    return list(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Create an empty set to store unique elements\n    unique_set = set()\n    # Loop through the first list and add each unique element to the set\n    for element in test_list1:\n        if element not in unique_set:\n            unique_set.add(element)\n    # Create a new list to store the intersection of unique elements from both lists\n    intersection_list = []\n    # Loop through the second list and add each element to the intersection list if it is in the unique set\n    for element in test_list2:\n        if element in unique_set:\n            intersection_list.append(element)\n    # Return the intersection list\n    return intersection_list"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    result_set = set()\n    for item in test_list1:\n        if item in test_list2:\n            result_set.add(item)\n    return tuple(result_set)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str2 = \"\"\n    for i in range(len(str1)):\n        if str1[i] == ch:\n            str2 += newch\n        else:\n            str2 += str1[i]\n    return str2"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # convert the string to list of characters\n    lst = list(str1)\n    # loop through each character in the list\n    for i in range(len(lst)):\n        # check if the current character is equal to the given character to replace\n        if lst[i] == ch:\n            # replace the character with the new character\n            lst[i] = newch\n    # convert the list of characters back to a string\n    return ''.join(lst)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # initialize a new string to store the modified string\n    modified_str = \"\"\n    \n    # loop through each character in the original string\n    for char in str1:\n        # if the character is the target character, replace it with the new character\n        if char == ch:\n            modified_str += newch\n        # if the character is not the target character, add it to the modified string\n        else:\n            modified_str += char\n    \n    # return the modified string\n    return modified_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str2 = \"\"\n    for i in range(len(str1)):\n        if str1[i] == ch:\n            str2 += newch\n        else:\n            str2 += str1[i]\n    return str2"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # Convert both the string and the character to uppercase\n    str1 = str1.upper()\n    ch = ch.upper()\n    \n    # Initialize an empty string to store the modified string\n    modified_str = ''\n    \n    # Iterate through each character in the string\n    for char in str1:\n        # If the character matches the specified character, replace it with the new character\n        if char == ch:\n            modified_str += newch\n        else:\n            # Otherwise, append the character to the modified string\n            modified_str += char\n    \n    # Return the modified string\n    return modified_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    # create a new string by replacing the character ch with newch\n    new_str = str1.replace(ch, newch)\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n\n    Args:\n    str1 (str): Input string.\n    ch (str): Character to be replaced.\n    newch (str): New character to replace the old character with.\n\n    Returns:\n    str: The modified string with the old character replaced with the new character.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    # use replace() method to replace the character\n    str1 = str1.replace(ch, newch)\n    return str1"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    new_str = \"\"\n    for i in range(len(str1)):\n        if str1[i] == ch:\n            new_str += newch\n        else:\n            new_str += str1[i]\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    return str1.replace(ch, newch)"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # create a Counter object from the given dictionary\n    counter = Counter(dict1)\n    # sort the Counter object in descending order\n    sorted_counter = counter.most_common()\n    # create a new dictionary from the sorted Counter object\n    sorted_dict = dict(sorted_counter)\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    \"\"\"\n    Write a function to sort a dictionary by value.\n\n    Args:\n        dict1: A dictionary whose items will be sorted by value.\n\n    Returns:\n        A sorted dictionary based on the value of its items.\n    \"\"\"\n    sorted_dict = Counter(dict1)\n    sorted_dict = dict(sorted_dict.most_common())\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    counter = Counter(dict1)\n    sorted_dict = dict(counter.most_common())\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # Create a Counter object from the dictionary\n    counter = Counter(dict1)\n    # Sort the Counter object by values in descending order\n    sorted_counter = counter.most_common()\n    sorted_counter.sort(key=lambda x: x[1], reverse=True)\n    # Create a new dictionary with the sorted Counter object\n    sorted_dict = {k: v for k, v in sorted_counter}\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    counter = Counter(dict1)\n    sorted_dict = dict(sorted(counter.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = Counter(dict1)\n    sorted_dict = dict(sorted_dict.most_common())\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    sorted_dict = Counter(dict1).most_common()\n    sorted_dict.sort(key=lambda x: x[1])\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    \"\"\"\n    Write a function to sort a dictionary by value.\n    \"\"\"\n    sorted_dict = Counter(dict1)\n    sorted_dict = dict(sorted_dict.most_common())\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    \"\"\"\n    Write a function to sort a dictionary by value.\n    \"\"\"\n    # Create a Counter object to count the frequency of values in the dictionary\n    count = Counter(dict1.values())\n\n    # Sort the counter object by value in descending order\n    sorted_count = sorted(count.items(), key=lambda x: x[1], reverse=True)\n\n    # Create a dictionary with keys as the sorted values and values as the count of that value\n    sorted_dict = {}\n    for key, value in sorted_count:\n        sorted_dict[key] = value\n\n    return sorted_dict"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num + min_num"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = float('-inf')\n    smallest = float('inf')\n\n    for num in nums:\n        if num > largest:\n            largest = num\n        if num < smallest:\n            smallest = num\n\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    This function takes an array of numbers as input and returns the sum of the largest and smallest values in the array.\n    '''\n    # find the largest and smallest values in the array\n    max_val = max(nums)\n    min_val = min(nums)\n\n    # return the sum of the largest and smallest values\n    return max_val + min_val"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = nums[0]\n    smallest = nums[0]\n\n    for num in nums:\n        if num > largest:\n            largest = num\n        if num < smallest:\n            smallest = num\n\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) < 2:\n        return None\n    # Find the largest and smallest values in the array\n    max_val = min_val = nums[0]\n    for num in nums:\n        if num > max_val:\n            max_val = num\n        elif num < min_val:\n            min_val = num\n    # Calculate the sum of the largest and smallest values\n    return max_val + min_val"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    This function takes an array as input and returns the sum of the largest and smallest values in the array.\n    '''\n    max_num = nums[0]\n    min_num = nums[0]\n    for num in nums:\n        if num > max_num:\n            max_num = num\n        if num < min_num:\n            min_num = num\n    return max_num + min_num"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    \"\"\"\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    \"\"\"\n    if not nums:\n        return \"Array is empty\"\n    max_num = nums[0]\n    min_num = nums[0]\n    for num in nums:\n        if num > max_num:\n            max_num = num\n        elif num < min_num:\n            min_num = num\n    return max_num + min_num\n"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Sort the array in ascending order\n    nums.sort()\n    \n    # Find the largest and smallest values in the array\n    largest = nums[-1]\n    smallest = nums[0]\n    \n    # Find the sum of the largest and smallest values\n    sum = largest + smallest\n    \n    return sum"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Find the largest and smallest value in the array\n    max_num = max(nums)\n    min_num = min(nums)\n    # Find the sum of the largest and smallest value\n    total_sum = max_num + min_num\n    return total_sum"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # initializing variables to store the largest and smallest values in the array\n    largest = float('-inf')\n    smallest = float('inf')\n    # iterating over the array and updating the largest and smallest values\n    for num in nums:\n        if num > largest:\n            largest = num\n        if num < smallest:\n            smallest = num\n    # returning the sum of the largest and smallest values\n    return largest + smallest"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    This function converts the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    # convert the string to lower case using the built-in function\n    lower_string = string.lower()\n    # check if the lower case string and the original string are the same\n    if string == lower_string:\n        return True\n    else:\n        return False"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_lowercase(string):\n    # Use regular expression to match lowercase substrings\n    pattern = re.compile(r'[a-z]+')\n    # Use findall() method to find all the matches and return them\n    matches = pattern.findall(string)\n    # Loop through the matches and remove them from the string\n    for match in matches:\n        string = string.replace(match, '')\n    return string"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    pattern = r'[a-z]+'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    pattern = re.compile(r'[a-z]+', re.IGNORECASE)\n    return pattern.sub('', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # split the string into a list of words\n    words = str1.split()\n\n    # loop through each word in the list\n    for i in range(len(words)):\n        # remove any lowercase substrings from the current word\n        words[i] = re.sub(r'[a-z]', '', words[i])\n\n    # join the list of words into a single string\n    result =''.join(words)\n\n    return result"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    # define regex pattern to match lowercase substrings\n    pattern = r'[a-z]'\n\n    # find all lowercase substrings in the string\n    matches = re.findall(pattern, str1)\n\n    # loop over all matches and replace them with an empty string\n    for match in matches:\n        str1 = str1.replace(match, '')\n\n    # return the modified string\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_lowercase(string):\n    # Regular expression to match lowercase substrings\n    pattern = re.compile(r'[a-z]+')\n    # Find all substrings that match the pattern\n    matches = re.findall(pattern, string)\n    # Remove all lowercase substrings from the original string\n    result = ''.join([char for char in string if char.isupper()])\n    # Return the modified string\n    return result"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n\n    # Convert the given string to lowercase\n    str1 = str1.lower()\n\n    # Use regular expression to match lowercase substrings\n    pattern = re.compile(r'\\b[a-z]+\\b')\n\n    # Find all lowercase substrings in the given string\n    matches = pattern.findall(str1)\n\n    # Replace the lowercase substrings with empty string\n    for match in matches:\n        str1 = str1.replace(match, '')\n\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Define a regular expression pattern to match lowercase substrings\n    pattern = re.compile(r'\\b[a-z]+\\b')\n    # Use the pattern to find all lowercase substrings in the string\n    matches = pattern.findall(str1)\n    # Loop over each match and remove it from the string\n    for match in matches:\n        str1 = str1.replace(match, '')\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Use regular expressions to find all lowercase substrings and replace with empty string\n    pattern = re.compile(r'([a-z]+)')\n    return pattern.sub('', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_lowercase(string):\n    \"\"\"\n    Remove lowercase substrings from a given string.\n    \"\"\"\n    string = re.sub(r'[a-z]+', '', string)\n    return string"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes an integer as input and returns the first digit of the number.\n    \"\"\"\n    if n<10:\n        return n\n    else:\n        return first_Digit(n//10)"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_Digit(n):\n    '''\n    This function takes an integer n as input and returns the first digit of the number.\n    '''\n    return n // 10"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n%10"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_Digit(n):\n    '''\n    This function takes an integer as input and returns the first digit of that number.\n    '''\n    first_digit = n // 10 ** (len(str(n)) - 1)\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    first_digit = n % 10\n    return first_digit\n"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # Check if the input number is a string\n    if isinstance(n, str):\n        # If it is a string, convert it to integer\n        n = int(n)\n    # Check if the input number is an integer\n    if isinstance(n, int):\n        # If it is an integer, convert it to string\n        n = str(n)\n        # Return the first character of the string\n        return n[0]\n    else:\n        # If the input is not an integer or a string, raise an error\n        raise ValueError(\"The input should be an integer or a string.\")"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    #convert the given number to a string\n    num = str(n)\n    #return the first character of the string\n    return num[0]"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n // 10"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    # convert the number to a string and get its first character\n    first_char = str(n)[0]\n    # return the first character as an integer\n    return int(first_char)"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [num for num in list if num % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list: \n        if num % 2!= 0: \n            odd_list.append(num) \n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(list):\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function which takes a list of integers and only returns the odd ones.\n    \"\"\"\n    return [num for num in list if num % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(list):\n    '''\n    This function takes a list of integers and returns a list of odd integers.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    result = []\n    for num in list:\n        if num % 2 == 1:\n            result.append(num)\n    return result"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(lst):\n    \"\"\"\n    This function takes a list of integers and only returns the odd ones.\n    \"\"\"\n    return [num for num in lst if num % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(lst):\n    return [x for x in lst if x % 2!= 0]"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_cubes = sum(i**3 for i in range(1, n+1))\n    sum_natural = sum(range(1, n+1))\n    return sum_cubes - sum_natural"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = 0\n    sum_natural = 0\n    \n    for i in range(1, n+1):\n        sum_cubes += i**3\n        sum_natural += i\n        \n    difference = sum_cubes - sum_natural\n    \n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    sum_of_natural_numbers = 0\n    \n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n        sum_of_natural_numbers += i\n    \n    difference = sum_of_cubes - sum_of_natural_numbers\n    \n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Calculate the sum of cubes of the first n natural numbers\n    sum_cubes = 0\n    for i in range(1, n+1):\n        sum_cubes += i**3\n    \n    # Calculate the sum of the first n natural numbers\n    sum_natural = sum(range(1, n+1))\n    \n    # Find the difference between the two sums\n    difference = sum_cubes - sum_natural\n    \n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_of_cubes = sum([x**3 for x in range(1, n+1)])\n    sum_of_numbers = sum(range(1, n+1))\n    return sum_of_cubes - sum_of_numbers"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_cubes = 0\n    sum_numbers = 0\n    \n    # Calculate the sum of cubes of the first n natural numbers\n    for i in range(1, n+1):\n        sum_cubes += i ** 3\n    \n    # Calculate the sum of the first n natural numbers\n    for i in range(1, n+1):\n        sum_numbers += i\n    \n    # Calculate the difference between the sum of cubes and the sum of numbers\n    diff = sum_cubes - sum_numbers\n    \n    # Print the difference\n    print(\"The difference between the sum of cubes of the first {} natural numbers and the sum of the first {} natural numbers is {}\".format(n, n, diff))"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    \n    # Initialize variables\n    sum_of_cubes = 0\n    sum_of_natural_numbers = 0\n    \n    # Calculate sum of cubes of first n natural numbers\n    for i in range(1, n+1):\n        sum_of_cubes += i ** 3\n    \n    # Calculate sum of first n natural numbers\n    for j in range(1, n+1):\n        sum_of_natural_numbers += j\n    \n    # Calculate difference\n    difference = abs(sum_of_cubes - sum_of_natural_numbers)\n    \n    # Print difference\n    print(\"Difference between the sum of cubes of the first {} natural numbers and the sum of the first {} natural numbers is: {}\".format(n, n, difference))"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = sum(x**3 for x in range(1, n+1))\n    sum_of_natural_numbers = sum(range(1, n+1))\n    return sum_of_cubes - sum_of_natural_numbers"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    cubes = [i**3 for i in range(1,n+1)]\n    sums = [i for i in range(1,n+1)]\n    return abs(sum(cubes) - sum(sums))\n"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n\n    # function to find the sum of cubes of the first n natural numbers\n    def sum_cubes(n):\n        return n * (n + 1) * (2 * n + 1) // 6\n\n    # find the sum of the first n natural numbers\n    def sum_first_n(n):\n        return n * (n + 1) // 2\n\n    # find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers\n    def find_difference(n):\n        return sum_cubes(n) - sum_first_n(n)\n\n    return find_difference(n)"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A, N):\n    # Initialize variables to keep track of odd pairs\n    odd_count = 0\n    odd_pair = []\n\n    # Loop through the array\n    for i in range(N):\n        # Loop through the rest of the array\n        for j in range(i+1, N):\n            # If the XOR of the elements is odd, increment the count and append the pair to the list\n            if (A[i] ^ A[j]) % 2!= 0:\n                odd_count += 1\n                odd_pair.append((A[i], A[j]))\n\n    # Return the count and pair\n    return odd_count, odd_pair"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N):\n        for j in range(i+2,N):\n            xor_val = A[i] ^ A[j]\n            if xor_val % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    xor_sum = 0\n    count = 0\n    for i in range(N):\n        xor_sum += A[i]\n        count += (xor_sum & 1)\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A,N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    xor_values = [0]*N\n    for i in range(N):\n        xor_values[A[i]-1] ^= i+1 # XORing the index of the current element with the index of the next element\n    odd_pairs = 0\n    for i in range(N):\n        for j in range(i+2,N):\n            if xor_values[i] == xor_values[j]:\n                odd_pairs += 1\n    return odd_pairs"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    This function takes a list A of N integers and returns the count of odd pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+2,N):\n            xor_value = A[i] ^ A[j]\n            if xor_value % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    This function takes an array A and an integer N as input and returns the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor_value = A[i] ^ A[j]\n            if xor_value % 2!= 0:\n                count += 1\n            if count == N:\n                return count\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A,N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n\n    count = 0\n\n    for i in range(N):\n        for j in range(i+1,N):\n            xor = A[i] ^ A[j]\n            if xor % 2!= 0:\n                count += 1\n\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    xor_sum = 0\n    count = 0\n    for i in range(N):\n        xor_sum = xor_sum ^ A[i]\n\n    for i in range(N):\n        if xor_sum % 2 == 1:\n            count += 1\n            xor_sum = xor_sum - A[i] ^ A[i]\n\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    This function takes a list A and an integer N as input and returns the count of odd pairs\n    whose xor value is odd.\n    '''\n\n    count = 0\n\n    for i in range(N):\n        for j in range(i+1, N):\n            xor = A[i] ^ A[j]\n            if xor % 2!= 0:\n                count += 1\n\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A,N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            xor_value = A[i] ^ A[j]\n            if xor_value % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # Loop through each character in the string\n    for i in range(len(string)):\n        # Convert the character to lowercase\n        string[i] = string[i].lower()\n        # Convert the character back to uppercase\n        string[i] = string[i].upper()\n    # Return the modified string\n    return string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = \"\"\n    for char in string:\n        if char.islower():\n            new_string += char.upper()\n        else:\n            new_string += char.lower()\n    return new_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join([chr(ord(c) ^ 32) if c.islower() else c for c in string])"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # Iterate over each character in the string\n    for i in range(len(string)):\n        # If the character is uppercase, convert it to lowercase\n        if string[i].isupper():\n            string = string[:i] + string[i].lower() + string[i+1:]\n        # If the character is lowercase, convert it to uppercase\n        elif string[i].islower():\n            string = string[:i] + string[i].upper() + string[i+1:]\n    # Return the modified string\n    return string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = ''\n    for char in string:\n        if char.isupper():\n            new_string += char.lower()\n        elif char.islower():\n            new_string += char.upper()\n        else:\n            new_string += char\n    return new_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(map(lambda x: x.upper() if x.islower() else x.lower(), string))"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = \"\"\n    for char in string:\n        if char.isupper():\n            new_string += char.lower()\n        elif char.islower():\n            new_string += char.upper()\n        else:\n            new_string += char\n    return new_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    total_difference = 0\n    \n    # Split the integers into lists of digits\n    digits1 = [int(digit) for digit in str(n1)]\n    digits2 = [int(digit) for digit in str(n2)]\n    \n    # Loop through each digit and calculate the difference\n    for i in range(len(digits1)):\n        total_difference += abs(digits1[i] - digits2[i])\n        \n    return total_difference"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    sum_diff = 0\n    while n1!= 0 and n2!= 0:\n        diff = abs(n1 % 10 - n2 % 10)\n        sum_diff += diff\n        n1 //= 10\n        n2 //= 10\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # convert the numbers to strings and convert the digits to integers\n    n1_str = str(n1)\n    n2_str = str(n2)\n    n1_int = int(n1_str)\n    n2_int = int(n2_str)\n    # compute the sum of the per-digit differences\n    sum_diff = 0\n    for i in range(max(len(n1_str), len(n2_str))):\n        diff = abs(n1_int // 10**(i) - n2_int // 10**(i))\n        sum_diff += diff * (i + 1)\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n    sum_diff = 0\n    for i in range(10):\n        diff = abs(n1 - n2) // 10**i\n        sum_diff += diff\n    return sum_diff\n"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Calculate the difference between the two integers\n    diff = n1 - n2\n    \n    # Initialize the sum variable to 0\n    sum_diff = 0\n    \n    # Loop through each digit of the difference and add the product of the digit and its position to the sum\n    for digit in str(diff):\n        sum_diff += digit * int(digit)\n    \n    # Return the sum of the differences\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n\n    # Convert the integers to lists of digits\n    digit_sum = sum(map(int, str(n1))) - sum(map(int, str(n2)))\n\n    return digit_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n\n    # convert the integers to lists of digits\n    n1_digits = [int(digit) for digit in str(n1)]\n    n2_digits = [int(digit) for digit in str(n2)]\n\n    # calculate the per-digit differences\n    per_digit_diff = [abs(n1_digits[i] - n2_digits[i]) for i in range(len(n1_digits))]\n\n    # calculate the sum of the differences\n    sum_diff = sum(per_digit_diff)\n\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # convert the two integers to lists of digits\n    n1_list = [int(d) for d in str(n1)]\n    n2_list = [int(d) for d in str(n2)]\n\n    # calculate the absolute difference between the two lists of digits\n    difference = abs(n1_list[0] - n2_list[0]) + abs(n1_list[1] - n2_list[1]) + abs(n1_list[2] - n2_list[2])\n\n    # sum the per-digit differences\n    total_difference = 0\n    for i in range(len(n1_list)):\n        total_difference += abs(n1_list[i] - n2_list[i])\n\n    # return the total difference\n    return total_difference"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    distance = 0\n    n1_list = list(str(n1))\n    n2_list = list(str(n2))\n    for i in range(len(n1_list)):\n        distance += abs(int(n1_list[i]) - int(n2_list[i]))\n    return distance"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n    diff = abs(n1 - n2)\n    \n    # loop through each digit in the difference and add the difference to a running sum\n    running_sum = 0\n    for digit in str(diff):\n        running_sum += int(digit)\n        \n    return running_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size < 1:\n        return 0\n    elif size == 1:\n        return a[0]\n    else:\n        max_sum = max(a[0], max_sub_array_sum(a[1:], size-1))\n        subarray_sum = 0\n        for i in range(size):\n            subarray_sum += a[i]\n            if subarray_sum > max_sum:\n                max_sum = subarray_sum\n        return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    current_sum = 0\n    max_sum = float('-inf')\n    start = 0\n    for i in range(len(a)):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n            start = i - size + 1\n    return a[start:start+size]"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    start = 0\n    for end in range(size):\n        current_sum += a[end]\n        if current_sum > max_sum:\n            max_sum = current_sum\n            start = end - size + 1\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 1:\n        return a[0]\n    elif size == 2:\n        return max(a[0], a[1])\n    else:\n        max_sum = max_sub_array_sum(a, size-1)\n        curr_sum = a[size-1] + max_sub_array_sum(a[size-1:], size-1)\n        return max(max_sum, curr_sum)"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    \"\"\"\n    if size > len(a):\n        return \"Invalid input: size should not be greater than the length of the input list.\"\n    \n    max_sum = float('-inf')\n    current_sum = 0\n    \n    for i in range(size):\n        current_sum += a[i]\n        \n        if current_sum > max_sum:\n            max_sum = current_sum\n            \n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum(arr, size):\n    \"\"\"\n    This function takes a list of integers and a size of the sublist.\n    It finds the sum of the largest contiguous sublist in the list.\n\n    Parameters:\n    - arr (list): list of integers.\n    - size (int): size of the sublist.\n\n    Returns:\n    - max_sum (int): sum of the largest contiguous sublist in the list.\n\n    \"\"\"\n\n    max_sum = float('-inf')  # initialize max sum to negative infinity\n\n    for i in range(len(arr)):\n        # find the sum of the current sublist\n        sub_sum = sum(arr[i:i+size])\n\n        # update the max sum if the current sublist has a greater sum than the current max sum\n        if sub_sum > max_sum:\n            max_sum = sub_sum\n\n    return max_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if i >= size - 1:\n            current_sum = 0\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    curr_sum = 0\n    start = 0\n    end = 0\n    \n    while end < len(a):\n        if end == 0 or curr_sum > max_sum:\n            max_sum = curr_sum\n            start = end\n        curr_sum += a[end]\n        end += 1\n    \n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum(arr, size):\n    \"\"\"\n    Find the sum of the largest contiguous sublist in the given list.\n\n    Args:\n    arr (list): The list of integers to analyze.\n    size (int): The size of the sublist to consider.\n\n    Returns:\n    int: The sum of the largest contiguous sublist.\n    \"\"\"\n    max_sum = float('-inf')\n    curr_sum = 0\n    for i in range(size):\n        curr_sum += arr[i]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n        elif curr_sum < 0:\n            curr_sum = 0\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far = float('-inf')\n    max_ending_here = 0\n    current_sum = 0\n    \n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_ending_here:\n            max_ending_here = current_sum\n            max_so_far = max(max_so_far, max_ending_here)\n        elif current_sum < 0:\n            current_sum = 0\n    \n    return max_so_far"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Find the union of the two tuples\n    union_tup = tuple(set(test_tup1) | set(test_tup2))\n\n    # Sort the union elements in ascending order\n    union_tup = sorted(union_tup)\n\n    # Print the union elements\n    for element in union_tup:\n        print(element)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_set = test_tup1.union(test_tup2)\n    sorted_union = sorted(union_set)\n    return sorted_union"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union = test_tup1 + test_tup2\n    union = sorted(list(set(union)))\n    return union"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Find the union of the two tuples\n    union_set = set(test_tup1).union(set(test_tup2))\n\n    # Convert the union set to a list and sort it\n    union_list = sorted(list(union_set))\n\n    # Output the sorted list\n    print(\"Union of the elements of the two tuples:\", union_list)\n"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # Merge the two tuples into a single tuple\n    merged_tup = tuple(sorted(set(test_tup1 + test_tup2)))\n    # Split the merged tuple into two lists for printing\n    print(list(merged_tup)[::2])\n    print(list(merged_tup)[1::2])"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_set = set(test_tup1 + test_tup2)\n    sorted_union_set = sorted(union_set)\n    return sorted_union_set"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # get the union of the two tuples\n    union_set = set(test_tup1) | set(test_tup2)\n    # convert the union set to a list and sort it in ascending order\n    union_list = sorted(list(union_set))\n    # output the union list\n    print(\"The union of the elements of the two given tuples is:\", union_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Merge the two tuples into a single sorted list using list comprehension\n    merged_list = sorted(set(test_tup1 + test_tup2))\n    # Return the merged list\n    return merged_list"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Find the union of the two lists\n    union_list = list(set(test_tup1) | set(test_tup2))\n    # Sort the list in ascending order\n    union_list.sort()\n    # Output the sorted union list\n    print(union_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # convert tuples to lists for easier manipulation\n    tup1_list = list(test_tup1)\n    tup2_list = list(test_tup2)\n\n    # remove duplicates from each list\n    tup1_list = list(set(tup1_list))\n    tup2_list = list(set(tup2_list))\n\n    # find the union of the two lists\n    union_list = list(set(tup1_list + tup2_list))\n\n    # sort the union list and print it\n    union_list.sort()\n    print(union_list)"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            if lst[i:j]!= []:\n                if len(lst[i:j]) > max_length:\n                    max_length = len(lst[i:j])\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            sublist = lst[i:j+1]\n            if max_length < len(sublist):\n                max_length = len(sublist)\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n\n    longest = 0\n    curr_len = 0\n\n    for i in range(len(lst)):\n        if i == 0:\n            curr_len = 1\n            longest = 1\n        else:\n            curr_len = lst[i] - lst[i-1] + 1\n            if curr_len > longest:\n                longest = curr_len\n\n    return longest"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    current_length = 0\n    for i in range(len(lst)):\n        if lst[i] == lst[i+1]:\n            current_length += 1\n        else:\n            if current_length > max_length:\n                max_length = current_length\n            current_length = 0\n    if current_length > max_length:\n        max_length = current_length\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the longest sublists.\n    \"\"\"\n    max_len = 0\n    for lst in lst:\n        current_len = len(lst)\n        if current_len > max_len:\n            max_len = current_len\n    return max_len"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    # Initialize the length of the longest sublist as 0\n    max_length = 0\n    # Initialize a list to store the lengths of each sublist\n    sublist_lengths = []\n\n    # Loop through the list and calculate the length of each sublist\n    for i in range(len(lst)):\n        # Initialize the length of the current sublist as 1\n        current_length = 1\n        # Loop through the remaining elements in the list from the current index\n        for j in range(i+1, len(lst)):\n            # Check if the current sublist can be extended by the next element\n            if lst[j]!= lst[i]:\n                break\n            else:\n                # Increment the current length of the sublist\n                current_length += 1\n        # Update the max_length if the current sublist has a greater length\n        if current_length > max_length:\n            max_length = current_length\n        # Append the length of the current sublist to the sublist_lengths list\n        sublist_lengths.append(current_length)\n\n    # Return the max_length and the sublist_lengths list\n    return max_length, sublist_lengths"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    longest = 0\n    temp = 0\n    for i in range(len(lst)):\n        temp = 0\n        for j in range(i, len(lst)):\n            temp += 1\n            if temp > longest:\n                longest = temp\n    return longest"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    curr_len = 0\n    for i in range(len(lst)):\n        curr_len += 1\n        if i+1 < len(lst) and lst[i] == lst[i+1]:\n            continue\n        if curr_len > max_len:\n            max_len = curr_len\n        curr_len = 0\n    return max_len"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    # Initialize the maximum length of any sublist as 0\n    max_length = 0\n\n    # Initialize the current sublist as the first element of the list\n    current_sublist = [lst[0]]\n\n    # Loop through the remaining elements of the list\n    for i in range(1, len(lst)):\n\n        # Check if the current element is equal to the first element of the current sublist\n        if lst[i] == current_sublist[0]:\n\n            # If it is, add it to the current sublist\n            current_sublist.append(lst[i])\n\n            # If the length of the current sublist is greater than the maximum length so far, update the maximum length\n            if len(current_sublist) > max_length:\n                max_length = len(current_sublist)\n\n        # If the current element is not equal to the first element of the current sublist, add it to a new sublist and update the maximum length\n        else:\n            max_length = max(max_length, len(current_sublist))\n            current_sublist = [lst[i]]\n\n    # Return the maximum length of any sublist\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the longest sublists.\n    \"\"\"\n    # initialize a variable to store the longest sublist\n    longest = 0\n    \n    # loop through the list of sublists\n    for sublist in lst:\n        # get the length of the sublist\n        length = len(sublist)\n        \n        # update the longest sublist if the current sublist is longer\n        if length > longest:\n            longest = length\n    \n    return longest"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # Define regular expression pattern to find quotation marks\n    pattern = r'(?<!\\\\)\"([^\"]+)\"'\n    \n    # Use re.findall() to find all the matches in the text\n    matches = re.findall(pattern, text)\n    \n    # Return a list of all the extracted values\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'(?<=\")\\w+(?:,\\s*\\w+)*?(?=\")'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = re.compile(r'(?P<quote>[\\'\"])(?P<value>.*?)\\\\1')\n    matches = pattern.findall(text)\n    values = []\n    for match in matches:\n        value = match['value'].strip()\n        if value:\n            values.append(value)\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_values(text):\n    # Define a regular expression pattern to match values between quotation marks\n    pattern = r'(?:\"(.*?)\"|\\S+)'\n    # Use the re.findall() function to extract all matches in the text\n    matches = re.findall(pattern, text)\n    # Filter out empty matches and return a list of non-empty values\n    return list(filter(None, matches))"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'(?<=\\W|^)\"([^\"]*)\"'\n    matches = re.finditer(pattern, text)\n    values = [match.group(1) for match in matches]\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'(?<=\")[^\"]*(?=\")'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = re.compile(r'\\\"(.*?)\\\"')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # Regular expression pattern to match quotation marks and values inside them\n    pattern = r'\"([^\"]*)\"'\n    # Find all occurrences of the pattern in the string\n    matches = re.findall(pattern, text)\n    # Convert the list of matches to a list of values\n    values = [match.strip('\"') for match in matches]\n    return values"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    \"\"\"\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Pairs(arr, n):\n    '''\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Pairs(arr, n): \n    count = 0\n    for i in range(n): \n        for j in range(i+1, n): \n            if arr[i]!= arr[j]: \n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    seen = set()\n    for i in range(n):\n        for j in range(i+1, n):\n            pair = (arr[i], arr[j])\n            if pair not in seen:\n                seen.add(pair)\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n\n    count = 0\n\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n\n    return count"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    result = \"\"\n    for char in word:\n        result += char\n    return result"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split(word):\n    \"\"\"\n    Write a python function to split a string into characters.\n    \"\"\"\n    result = []\n    for char in word:\n        result.append(char)\n    return result"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    # Split the word into characters\n    characters = list(word)\n    return characters"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split(word):\n    \"\"\"\n    Write a python function to split a string into characters.\n    \"\"\"\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Initialize the sum to zero\n    total = 0\n    # Loop through each digit in the input number\n    while n > 0:\n        # Get the last digit of the number\n        digit = n % 10\n        # Add the digit to the total sum\n        total += digit\n        # Remove the last digit from the number\n        n //= 10\n    # Return the total sum\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # convert the integer to a string\n    num_str = str(n)\n    # initialize the sum variable to zero\n    sum_num = 0\n    # loop through each character in the string\n    for char in num_str:\n        # convert the character to an integer and add it to the sum variable\n        sum_num += int(char)\n    # return the sum of the digits\n    return sum_num"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Initialize a variable to store the sum of digits\n    total = 0\n    # Loop through each digit of the number\n    while n > 0:\n        # Get the last digit of the number\n        digit = n % 10\n        # Add it to the total\n        total += digit\n        # Remove the last digit from the number\n        n //= 10\n    # Return the total\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Initialize a variable to store the sum\n    total = 0\n    # Loop through each digit of the number and add it to the total\n    while n > 0:\n        digit = n % 10  # Get the last digit of the number\n        total += digit  # Add the last digit to the total\n        n //= 10  # Remove the last digit from the number\n    return total  # Return the total sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    return sum(int(digit) for digit in str(n))"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Convert the integer to a string to iterate over its digits\n    digits = str(n)\n    # Initialize the sum to 0\n    sum = 0\n    # Iterate over the digits and add them to the sum\n    for digit in digits:\n        sum += int(digit)\n    # Return the sum\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n //= 10\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # initialize the sum variable to zero\n    sum = 0\n\n    # loop through each digit in the integer\n    while n > 0:\n        # get the last digit of the integer\n        digit = n % 10\n\n        # add the digit to the sum variable\n        sum += digit\n\n        # remove the last digit from the integer\n        n //= 10\n\n    # return the sum of the digits\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Convert the integer to a string\n    str_n = str(n)\n    # Initialize the sum to zero\n    total = 0\n    # Loop through each character in the string\n    for digit in str_n:\n        # Convert the character to an integer\n        digit_int = int(digit)\n        # Add the integer to the total\n        total += digit_int\n    # Return the total sum\n    return total"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) < 2:\n        return True\n    else:\n        for i in range(1, len(list1)):\n            if list1[i] <= list1[i-1]:\n                return False\n        return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    # Check if the list is sorted or not\n    if len(list1) > 1 and all(list1[i] <= list1[i+1] for i in range(len(list1)-1)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n    \"\"\"\n    # loop through the list and check if each element is smaller than the next one\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            # if an element is found that is larger than its next one, return False\n            return False\n    # if no larger elements are found, return True\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n    \"\"\"\n    if len(list1) <= 1:\n        return True\n    else:\n        if list1[0] > list1[1]:\n            return False\n        else:\n            return issort_list(list1[1:])"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def issort_list(lst):\n    \"\"\"\n    A function to check whether a specified list is sorted or not.\n    \"\"\"\n    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def issort_list(list1):\n    '''\n    This function takes a list as input and returns True if the list is sorted, False otherwise.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def issort_list(lst):\n    '''\n    This function takes a list as input and returns True if the list is sorted in ascending order\n    and False otherwise.\n    '''\n    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1))"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def issort_list(list1):\n    \"\"\"\n    This function takes a list as input and returns True if the list is sorted in ascending order and False otherwise.\n    \"\"\"\n    if len(list1) < 2:\n        return True\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1) - 1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    for i in range(len(list1)):\n        list1[i].sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    num_set = set()\n    unique_nums = []\n\n    for num_list in nums:\n        for num in num_list:\n            if num not in num_set:\n                unique_nums.append(num)\n                num_set.add(num)\n\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = set()\n    for num in nums:\n        unique_nums.add(num)\n    return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num_list in nums:\n        for num in num_list:\n            if num not in unique_nums:\n                unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num_list in nums:\n        for num in num_list:\n            if num not in unique_nums:\n                unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    # Initialize an empty set to store the unique elements\n    unique_set = set()\n    # Loop through each list in the given number of lists\n    for num_list in nums:\n        # Loop through each element in the list\n        for num in num_list:\n            # If the element is not already in the unique set, add it\n            if num not in unique_set:\n                unique_set.add(num)\n    # Convert the unique set to a list and return it\n    return list(unique_set)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # create an empty list to store unique numbers\n    unique_nums = []\n    \n    # loop through each number in the input lists\n    for num in nums:\n        # check if the number is already in the unique list\n        if num not in unique_nums:\n            # if not, add it to the unique list\n            unique_nums.append(num)\n    \n    # return the unique list\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    unique_nums = []\n    for i in nums:\n        if i not in unique_nums:\n            unique_nums.append(i)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # Set to keep track of unique numbers\n    unique_nums = set()\n\n    # Iterate through each list in the input list\n    for num_list in nums:\n        # Iterate through each number in the list\n        for num in num_list:\n            # Add the number to the set if it's not already in the set\n            if num not in unique_nums:\n                unique_nums.add(num)\n\n    # Convert the set back to a list and return it\n    return list(unique_nums)"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    # creating a set to store unique numbers\n    unique_numbers = set(list_data)\n    # calculating the product of the unique numbers\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    unique_numbers = set(list_data)\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_nums = set(list_data)\n    product = 1\n    \n    for num in unique_nums:\n        product *= num\n        \n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    unique_numbers = list(set(list_data))\n    return 1 if len(unique_numbers) == 1 else unique_numbers[0] * unique_product(unique_numbers[1:])"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    unique_list = []\n    for num in list_data:\n        if num not in unique_list:\n            unique_list.append(num)\n    product = 1\n    for num in unique_list:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_nums = set(list_data)  # convert the list to a set to remove duplicates\n    unique_nums_list = list(unique_nums)  # convert the set back to a list\n    \n    product = 1  # initialize the product to 1\n    \n    for num in unique_nums_list:\n        product *= num\n        \n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n\n    # create a set of unique numbers from the given list\n    unique_numbers = set(list_data)\n\n    # calculate the product of the unique numbers\n    unique_product = 1\n    for num in unique_numbers:\n        unique_product *= num\n\n    return unique_product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    # Get the set of unique numbers in the list\n    unique_set = set(list_data)\n\n    # Calculate the product of the unique numbers\n    product = 1\n    for num in unique_set:\n        product *= num\n\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_nums = set(list_data) # create a set to store unique numbers\n    product = 1 # initialize the product to 1\n    \n    # iterate over each unique number in the set and multiply it by the current product\n    for num in unique_nums:\n        product *= num\n    \n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # Create a set to store unique numbers\n    unique_nums = set(list_data)\n    \n    # Calculate the product of the unique numbers\n    product = 1\n    for num in unique_nums:\n        product *= num\n    \n    return product"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*3.14159*(r**2 + h**2)"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r, h):\n    \"\"\"\n    Write a function to find the surface area of a cylinder.\n\n    Args:\n        r (float): The radius of the cylinder.\n        h (float): The height of the cylinder.\n\n    Returns:\n        float: The surface area of the cylinder.\n\n    \"\"\"\n    # Calculate the surface area of the cylinder using the formula:\n    # surface area = 2 * pi * r * h\n    surface_area = 2 * 3.14 * r * h\n    \n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * 3.14159 * r * r + 2 * 3.14159 * r * h + 2 * 3.14159 * h * h"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = 2 * 3.14 * r * r + 2 * 3.14 * r * h + 2 * 3.14 * h * h\n    return area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Calculate the surface area of a cylinder\n    surface_area = 2 * r * h + 2 * r * h\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Formula for the surface area of a cylinder\n    area = 2 * 3.14159 * r * h\n    return area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    import math\n    return 2*math.pi*r*h + 2*math.pi*r**2"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = 2 * r * h + 2 * r * h * r\n    return area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * 3.14 * r * h"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * pi * r * h + 2 * pi * r**2"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(B) > len(A): \n        return False\n    i=0\n    j=0\n    while i<len(A) and j<len(B):\n        if A[i] == B[j]:\n            i+=1\n        j+=1\n    if j==len(B):\n        return True\n    else:\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sub_Array(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(B) > len(A):\n        return False\n    for i in range(len(A)-len(B)+1):\n        if all(A[j] == B[k] for j in range(len(B)) for k in range(len(B))):\n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    Write a python function to check whether a list is sublist of another or not.\n\n    :param A: A list.\n    :param B: Another list.\n    :return: True if A is a sublist of B, else False.\n    \"\"\"\n    if len(A) > len(B):\n        return False\n    i = 0\n    j = 0\n    while i < len(A) and j < len(B):\n        if A[i] == B[j]:\n            i += 1\n        j += 1\n    return i == len(A)"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sub_Array(A, B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    \n    # Checking if both lists are empty or not\n    if len(A) == 0 or len(B) == 0: \n        return False \n    \n    # Converting both lists into sets to make it easier to compare\n    A = set(A) \n    B = set(B) \n    \n    # Iterating through both lists and checking if they are sublist of each other\n    for i in range(len(B)): \n        if B.issubset(A[i:]): \n            return True \n        \n    # If we reach here, then it means A is not a sublist of B \n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sub_Array(A, B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if not A: \n        return True \n    i = 0 \n    j = 0 \n    n = len(B) \n    m = len(A) \n\n    while j < n: \n        if B[j] == A[i]: \n            i += 1 \n            j += 1 \n        elif i > 0: \n            i = i - 1 \n            j += 1 \n        else: \n            return False \n\n    if i == m: \n        return True \n    else: \n        return False "
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) > len(B):\n        return False\n    for i in range(len(A)):\n        if A[i] in B:\n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n\n    if len(B) > len(A):\n        return False\n\n    i = 0\n    j = 0\n\n    while j < len(B):\n        if A[i] == B[j]:\n            i += 1\n            j += 1\n        else:\n            i = i - j + 1\n            j = i\n\n    return i == len(B)"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sub_Array(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    i=0\n    j=0\n    while j<len(B):\n        if A[i]==B[j]:\n            i+=1\n        j+=1\n    if i==len(A):\n        return True\n    else:\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    This function takes two lists A and B as input and returns True if B is a sublist of A, and False otherwise.\n    '''\n    if len(A) > len(B): \n        return False\n    \n    # Sort the lists A and B\n    A.sort()\n    B.sort()\n    \n    # Check whether the elements of A are present in B\n    i = j = 0\n    while j < len(B):\n        if A[i] == B[j]:\n            i += 1\n            j += 1\n        else:\n            if i > 0:\n                i = max(0, i-1)\n            else:\n                break\n    \n    # If all elements are present, then B is a sublist of A\n    if i == len(A):\n        return True\n    else:\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_sublist(lst1, lst2):\n    \"\"\"\n    Function to check whether a list is sublist of another or not.\n    \"\"\"\n    for i in lst2:\n        if i in lst1:\n            return True\n    return False"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    Write a python function to find the last digit in factorial of a given number.\n    \"\"\"\n    # initialize variable to store the last digit of the factorial\n    last_digit = 0\n\n    # find the factorial of the number\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n\n    # calculate the last digit of the factorial\n    last_digit = factorial % 10\n\n    # return the last digit of the factorial\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return last_Digit_Factorial(n//10) + (n % 10)\n\nn = int(input(\"Enter a number: \"))\nprint(\"The last digit in the factorial of\", n, \"is\", last_Digit_Factorial(n))"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # initializing the factorial variable\n    factorial = 1\n    # iterating from 1 to n\n    for i in range(1, n+1):\n        # updating the factorial variable\n        factorial *= i\n    # finding the last digit of the factorial\n    last_digit = factorial % 10\n    # returning the last digit of the factorial\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # initialize result variable\n    result = 0\n    # loop through each digit in the factorial\n    for i in str(n!):\n        # add the last digit to the result\n        result += int(i)\n    # return the last digit of the result\n    return result"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n\n    # Initialize the result to 0\n    result = 0\n\n    # Loop through the digits of the factorial\n    for i in str(n!):\n        # Add the current digit to the result\n        result += int(i)\n\n    # Return the result\n    return result"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    Write a python function to find the last digit in factorial of a given number.\n    \"\"\"\n    # initialize variable to store the last digit of the factorial\n    last_digit = 0\n\n    # loop through each digit of the factorial\n    while n > 0:\n        # find the last digit of the factorial using modulus operator\n        last_digit = n % 10\n\n        # break the loop if the last digit is not zero\n        if last_digit!= 0:\n            break\n\n        # remove the last digit from the factorial using integer division\n        n //= 10\n\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n < 0:\n        return \"Factorial is not defined for negative numbers.\"\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        temp = n\n        count = 0\n        while temp > 0:\n            count += 1\n            temp //= 10\n        return n // (10 ** count)"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n\n    # initialize variables\n    last_digit = 0\n    factorial = 1\n    temp = n\n\n    # calculate factorial of n\n    while temp > 0:\n        factorial *= temp\n        temp -= 1\n\n    # extract last digit from factorial\n    last_digit = factorial % 10\n\n    # return the last digit\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    This function takes an integer n as input and returns the last digit in the factorial of n.\n    '''\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    return factorial % 10"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n\n    # initializing variables\n    last_digit = 0\n    factorial = 1\n\n    # calculating factorial\n    for i in range(1, n+1):\n        factorial *= i\n\n    # finding last digit\n    while factorial > 0:\n        last_digit = factorial % 10\n        factorial //= 10\n\n    return last_digit"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    result = []\n    i, j, k = 0, 0, 0\n\n    while i < len(list1) and j < len(list2) and k < len(list3):\n        result.append(list1[i])\n        i += 1\n        result.append(list2[j])\n        j += 1\n        result.append(list3[k])\n        k += 1\n\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    interleaved_list = []\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    interleaved_list = []\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def interleave_lists(list1, list2, list3):\n    result = []\n    i, j, k = 0, 0, 0\n    while i < len(list1) and j < len(list2) and k < len(list3):\n        result.append(list1[i])\n        result.append(list2[j])\n        result.append(list3[k])\n        i += 1\n        j += 1\n        k += 1\n    while i < len(list1) and j < len(list2):\n        result.append(list1[i])\n        result.append(list2[j])\n        i += 1\n        j += 1\n    while i < len(list1) and k < len(list3):\n        result.append(list1[i])\n        result.append(list3[k])\n        i += 1\n        k += 1\n    while j < len(list2) and k < len(list3):\n        result.append(list2[j])\n        result.append(list3[k])\n        j += 1\n        k += 1\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    This function takes three lists of the same length and returns a single list that contains all the elements from all the input lists.\n    \"\"\"\n    # Combine all three input lists into a single list\n    combined_list = list1 + list2 + list3\n\n    # Return the combined list\n    return combined_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    result = []\n    i = 0\n    j = 0\n    k = 0\n\n    while i < len(list1) and j < len(list2) and k < len(list3):\n        if list1[i] < list2[j] and list1[i] < list3[k]:\n            result.append(list1[i])\n            i += 1\n        elif list2[j] < list1[i] and list2[j] < list3[k]:\n            result.append(list2[j])\n            j += 1\n        else:\n            result.append(list3[k])\n            k += 1\n\n    if i < len(list1):\n        result.extend(list1[i:])\n    if j < len(list2):\n        result.extend(list2[j:])\n    if k < len(list3):\n        result.extend(list3[k:])\n\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Initialize an empty list to store the interleaved list\n    interleaved_list = []\n\n    # Loop through each element in the 3 input lists\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    result = []\n    i = 0\n    j = 0\n    k = 0\n    while i < len(list1) and j < len(list2) and k < len(list3):\n        result.append(list1[i])\n        result.append(list2[j])\n        result.append(list3[k])\n        i += 1\n        j += 1\n        k += 1\n    if i < len(list1):\n        result += list1[i:]\n    if j < len(list2):\n        result += list2[j:]\n    if k < len(list3):\n        result += list3[k:]\n    return result"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Initialize an empty list to store the dissimilar elements\n    dissimilar_list = []\n    # Iterate over each element of the first tuple\n    for i in test_tup1:\n        # Check if the element is present in the second tuple\n        if i not in test_tup2:\n            # If it's not present, add it to the dissimilar list\n            dissimilar_list.append(i)\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # create a set of the elements in both tuples\n    common_set = set(test_tup1).intersection(set(test_tup2))\n    # create a set of the elements in the first tuple but not in the second\n    dissimilar_set = set(test_tup1).difference(set(test_tup2))\n    # create a set of the elements in the second tuple but not in the first\n    dissimilar_set.update(set(test_tup2).difference(set(test_tup1)))\n    # find the dissimilar elements in the common set\n    dissimilar_elements = list(dissimilar_set.difference(common_set))\n    # return the list of dissimilar elements\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n\n    # Create a set of the tuples to check for duplicates\n    unique_tuples = set(test_tup1 + test_tup2)\n\n    # Find the elements that are in both tuples but not in the set\n    dissimilar_elements = [element for element in test_tup1 + test_tup2 if element not in unique_tuples]\n\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    diff_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            diff_list.append(test_tup1[i])\n    return diff_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for elem in test_tup1:\n        if elem not in test_tup2:\n            dissimilar_elements.append(elem)\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_set = set()\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_set.add(test_tup1[i])\n    return dissimilar_set"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Given two tuples, find the dissimilar elements between them.\n    \"\"\"\n    dissimilar = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar.append(test_tup1[i])\n    return dissimilar"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Initialize an empty list to store the dissimilar elements\n    dissimilar = []\n\n    # Loop through the first tuple\n    for element1 in test_tup1:\n        # Check if the element is present in the second tuple\n        if element1 not in test_tup2:\n            # If it is not present, add it to the list of dissimilar elements\n            dissimilar.append(element1)\n\n    # Return the list of dissimilar elements\n    return dissimilar"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Define a list to hold the dissimilar elements\n    dissimilar_list = []\n    # Loop through each element in the first tuple\n    for element1 in test_tup1:\n        # Check if the element is present in the second tuple\n        if element1 not in test_tup2:\n            # If not, add it to the dissimilar list\n            dissimilar_list.append(element1)\n    # Return the dissimilar list\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Convert the tuples to lists\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n    # Sort the lists\n    list1.sort()\n    list2.sort()\n    # Find the dissimilar elements\n    dissimilar_list = []\n    for i in range(len(list1)):\n        if list1[i]!= list2[i]:\n            dissimilar_list.append(list1[i])\n    return dissimilar_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc):\n    \"\"\"\n    Write a function to remove uneven elements in the nested mixed tuple.\n\n    Parameters:\n        test_tuple (tuple): A tuple of tuples containing mixed data.\n        even_fnc (function): A function that takes an element from the nested tuple and returns True if it should be removed.\n\n    Returns:\n        tuple: The same tuple with uneven elements removed.\n    \"\"\"\n    return tuple(even_fnc(x) and x or None for x in test_tuple if isinstance(x, tuple) and all(isinstance(y, even_fnc) for y in x) and all(even_fnc(y) for y in x))"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    for i in range(len(test_tuple)):\n        if isinstance(test_tuple[i], tuple):\n            test_tuple[i] = even_ele(test_tuple[i], even_fnc)\n        elif isinstance(test_tuple[i], list):\n            test_tuple[i] = [even_fnc(j) for j in test_tuple[i]]\n        else:\n            if even_fnc(test_tuple[i]):\n                test_tuple[i] = None\n            else:\n                continue\n    return [j for i in test_tuple for j in i if j is not None]"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # Filter out even elements from the nested mixed tuple\n    even_list = list(filter(even_fnc, test_tuple))\n    # Flatten the list of even elements\n    flattened_list = [item for sublist in even_list for item in sublist]\n    # Return the flattened list\n    return flattened_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # check if the input tuple is not a tuple or list\n    if not isinstance(test_tuple, (tuple, list)):\n        raise TypeError('Input must be a tuple or list')\n    # loop through each element in the tuple\n    for item in test_tuple:\n        # check if the element is a tuple or a list\n        if not isinstance(item, (tuple, list)):\n            raise TypeError('All elements must be a tuple or list')\n        # loop through each element in the nested tuple\n        for sub_item in item:\n            # check if the element is even\n            if even_fnc(sub_item):\n                # if it is even, append it to the result list\n                result.append(sub_item)\n    # return the result list\n    return result"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return [even_fnc(elem) for elem in test_tuple if even_fnc(elem)]"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # Remove even elements using a list comprehension\n    even_list = [even_fnc(i) for i in test_tuple if even_fnc(i)]\n    # Return the new tuple with even elements removed\n    return tuple(even_list)"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    uneven_list = []\n    for i in test_tuple:\n        if even_fnc(i):\n            uneven_list.append(i)\n    return uneven_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for item in test_tuple:\n        if even_fnc(item):\n            result.append(item)\n    return result"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc):\n    \"\"\"\n    Write a function to remove uneven elements in the nested mixed tuple.\n    \"\"\"\n    uneven_elements = []\n    for element in test_tuple:\n        if not even_fnc(element):\n            uneven_elements.append(element)\n    return uneven_elements\n"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc):\n    \"\"\"\n    Remove uneven elements in the nested mixed tuple.\n    \"\"\"\n    # Get the length of the tuple and check if it's even\n    if len(test_tuple) % 2 == 0:\n        return test_tuple\n    \n    # Create an empty list to store the even elements\n    even_list = []\n    \n    # Loop through the tuple and check if the element is even\n    for item in test_tuple:\n        if even_fnc(item):\n            even_list.append(item)\n    \n    # Return the even list\n    return even_list"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surface_Area(b, s):\n    \"\"\"\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    \"\"\"\n    # Calculate the height of the pyramid\n    h = s / b\n\n    # Calculate the base area of the pyramid\n    area = (b**2) * h\n\n    # Calculate the surface area of the pyramid\n    surface_area = 6 * area\n\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    surface_area = b * s + 2 * b * (s * (s - 2)) + (s - 2) * b * (s - 2) + 2 * (s - 2) * (s - 2) * b * b\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    surface_area = (2*b*s + 2*b*b) + (2*s*s + 2*s*b) + (2*b*b + 2*s*s + 2*b*b + 2*s*b)\n    return surface_area\n"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 2*(b+s)"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n\n    # Calculate the surface area of the pyramid using the formula:\n    # S = 2(bh)\n\n    # Using the given values of base edge b and height s, calculate the surface area of the pyramid.\n    S = 2*(b*s)\n\n    # Return the calculated surface area.\n    return S"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surface_Area(b, s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # calculate the area of the base and height\n    base = b * b\n    height = s * s\n    # calculate the surface area of the pyramid\n    surface_area = (3 * base) + (2 * height)\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    \n    surface = 2 * b * s + 2 * s * b + 2 * b * b # calculate the surface area using Heron's formula\n    print(\"The surface area of the square pyramid is:\", surface) # output the surface area\n    "
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 6 * b * s"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (b*s)**2"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 6*b*s + 2*(s*s)+(2*b*b)\n"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        print(\"The dictionary is empty\")\n    else:\n        print(\"The dictionary is not empty\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1.keys() == dict1.values():\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns nth Catalan number using matrix exponentiation.\n\n    Parameters:\n    n (int): The value of n for which to compute the Catalan number.\n\n    Returns:\n    int: The nth Catalan number.\n    \"\"\"\n    # Define the matrix A = [[1, 1], [1, 0]]\n    A = [[1, 1], [1, 0]]\n\n    # Define the matrix C = [[1, 1], [1, 0]]^(2^n)\n    C = A\n    for i in range(2, n + 1):\n        C = [[C[i - 1][0] + C[i - 1][1], C[i - 1][0] + C[i - 1][1] * C[i - 2][0]],\n             [C[i - 1][1], C[i - 1][0] + C[i - 1][1] * C[i - 2][1]]]\n\n    # Compute and return the nth Catalan number by taking the determinant of C\n    return abs(C[0][0] - C[1][1]) * 2**(n + 1)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number.\n    \"\"\"\n    catalan_numbers = [0, 1]\n    for i in range(2, n+1):\n        catalan_numbers.append(2*i - catalan_numbers[-1])\n    return catalan_numbers[n]"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n\n    # Initialize the first two terms\n    c1, c2 = 1, 1\n\n    # Calculate the remaining terms\n    for i in range(2, num + 1):\n        c = (c1 + c2) * i // (i - 1)\n        c1, c2 = c2, c\n\n    return c"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0 or num == 1:\n        return 1\n    else:\n        return catalan_number(num-1) + catalan_number(num-2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def catalan_number(n):\n    \"\"\"\n    This function returns the nth Catalan number.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return catalan_number(n//2)*((2*n-1)//2)*((2*n-1)//2)*((2*n-1)//2)*catalan_number(n//2)\n    else:\n        return catalan_number(n//2)*(2*n-1)*catalan_number(n//2)*catalan_number(n//2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def catalan_number(num):\n    '''\n    This function returns the nth Catalan number.\n    '''\n\n    def binomial(n, k):\n        '''\n        Calculate the binomial coefficient.\n        '''\n        if k == 0 or k == n:\n            return 1\n        else:\n            return binomial(n-1, k-1) * n // (k+1)\n\n    def catalan_formula(n):\n        '''\n        Calculate the nth Catalan number using the formula.\n        '''\n        return (2*n-1) * binomial(2*n, n) / (factorial(2*n) * factorial(n))\n\n    return catalan_formula(num)\n"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Write a function which returns nth catalan number.\n    \"\"\"\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return (2*n - 1) * catalan_number(n-1) // (n+1)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    # Initialize the factorial of 2\n    fact_2 = 1\n    \n    # Loop through each integer from 1 to num-1\n    for i in range(1, num+1):\n        # Compute the factorial of i\n        fact_i = 1\n        for j in range(1, i+1):\n            fact_i *= j\n        \n        # Compute the factorial of num-i\n        fact_num_i = 1\n        for j in range(1, num-i+1):\n            fact_num_i *= j\n        \n        # Compute the Catalan number\n        catalan = (fact_i * fact_num_i) // (fact_2 * (num-i+1))\n        \n        # Update the factorial of 2\n        fact_2 *= i\n    \n    return catalan"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def catalan_number(num):\n    \"\"\"\n    Write a function which returns nth catalan number.\n    \"\"\"\n    # If num is less than or equal to 1, return 1\n    if num <= 1:\n        return 1\n\n    # Initialize variables\n    n = num\n    k = 0\n    catalan = 1\n\n    # Compute Catalan number for each k from 0 to n-1\n    for k in range(n):\n        catalan *= (2*k+1) // (k+1)\n\n    # Return the final Catalan number\n    return catalan"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0 or num == 1:\n        return 1\n    else:\n        return catalan_number(num-1) + catalan_number(num-2) + catalan_number(num-3)"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n\n    pattern = r'\\bly\\b'  # regex pattern for finding adverbs ending with \"ly\"\n    matches = re.finditer(pattern, text)\n\n    positions = []\n    for match in matches:\n        positions.append((match.start(), match.end()))\n\n    return positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = re.findall(r'\\b(ly)\\b', text)\n    if adverbs:\n        print(f\"{adverbs[0]} found at position(s): {', '.join(str(i) for i in adverbs[1])}\")\n    else:\n        print(\"No adverbs found.\")"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define regular expression pattern to find adverbs ending with ly\n    pattern = r'\\b(ly)\\b\\s*$'\n    # Use re.search() function to search for the pattern in the given text\n    match = re.search(pattern, text)\n    # Check if match object exists\n    if match:\n        # Get the start and end positions of the first adverb ending with ly\n        start = match.start()\n        end = match.end()\n        # Extract the first adverb ending with ly from the original string\n        adverb = text[start:end].strip()\n        # Return a list of tuples containing the start and end positions of the first adverb and the adverb itself\n        return [(start, end, adverb)]\n    # If no match is found, return an empty list\n    else:\n        return []"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = []\n    pattern = r'(?<![\\w])(?:ly|lys|l\\'ly|l\\'s|l\\'|l)(?=[^\\w\\s]|$)'\n    match = re.finditer(pattern, text, re.IGNORECASE)\n    for i, m in enumerate(match):\n        start = m.start()\n        end = m.end()\n        adverbs.append((start, end))\n    return adverbs"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverbs(text):\n    # Define the pattern to find adverbs ending with ly\n    pattern = r'\\b[a-zA-Z]+ly\\b'\n\n    # Use the re.findall() function to find all the occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n\n    # Iterate through the matches list and print the adverb and its position in the text\n    for match in matches:\n        print(match, text.find(match))"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = re.findall(r'\\b(ly)\\b', text)\n    return adverbs"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define the pattern to match adverbs ending with ly\n    pattern = r'(?<=\\w)(\\w+ly)(?=\\W|$)'\n    \n    # Find all occurrences of the pattern in the given string\n    matches = re.finditer(pattern, text)\n    \n    # Iterate over the matches and store the positions of the adverbs ending with ly\n    positions = []\n    for match in matches:\n        positions.append(match.start())\n        \n    return positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Use regular expression to find all the adverbs ending with \"ly\"\n    pattern = r'\\b\\w*[aeiou]\\w*ly\\b'\n    matches = re.findall(pattern, text)\n    # If no adverbs found, return None\n    if not matches:\n        return None\n    # If adverbs found, return a list of tuples containing the positions of the adverbs and their length\n    positions = [(match.start(), len(match)) for match in matches]\n    return positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\b[a-z]+ly\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\b\\w*[ly]\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # create a min heap of the n largest values\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, items[i])\n    # compare the largest values in the heap to the rest of the items in the dataset\n    for i in range(n, len(items)):\n        if items[i] > heap[0]:\n            # if the new item is more expensive than the smallest value in the heap,\n            # remove the smallest value from the heap and push the new item onto the heap\n            heapq.heappop(heap)\n            heapq.heappush(heap, items[i])\n    # return the n largest values in the heap\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # create a min heap with the first n elements of the dataset\n    min_heap = [heapq.nsmallest(n, items[:n])]\n    # sort the remaining elements of the dataset\n    items.sort()\n    # remove the smallest element from the min heap and add the next smallest element\n    heapq.heappop(min_heap)\n    heapq.heappush(min_heap, items[0])\n    # return the n most expensive elements\n    return min_heap[0][:n]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Use a heap to store the n most expensive items\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item)\n        # Remove the least expensive item if heap size exceeds n\n        while len(heap) > n:\n            heapq.heappop(heap)\n    # Return the n most expensive items in the heap\n    return heapq.nlargest(n, heap)"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Given a dataset of items, find the n most expensive items.\n\n    :param items: A list of items\n    :param n: The number of most expensive items to find\n    :return: A list of the n most expensive items\n    \"\"\"\n    # Sort the items by price in descending order\n    sorted_items = sorted(items, key=lambda item: item[1], reverse=True)\n    # Create a min heap of size n to store the n most expensive items\n    min_heap = []\n    for i in range(n):\n        # Add the first item in the sorted list to the heap\n        heapq.heappush(min_heap, sorted_items.pop(0))\n    # Return the n most expensive items in the heap\n    return [heapq.heappop(min_heap) for _ in range(n)]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Sort the items in ascending order of their price\n    sorted_items = sorted(items, key=lambda x: x[1])\n\n    # Return the first n items in the sorted dataset\n    return sorted_items[:n]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Find the n most expensive items in a given dataset.\n    \"\"\"\n    # Use a max-heap to keep track of the n most expensive items\n    heap = []\n    for item in items:\n        # If the heap is empty or the item is cheaper than the current item in the heap, add it\n        if not heap or item < heap[0][0]:\n            heapq.heappush(heap, (item, items.index(item)))\n        # If the heap is full and the item is cheaper than the item at the root, remove the root and add the item\n        elif item < heap[0][0] and len(heap) < n:\n            heapq.heappushpop(heap, (item, items.index(item)))\n    # Extract the n most expensive items from the heap and return them\n    return [heapq.heappop(heap)[0] for _ in range(n)]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Use a min heap to store the n most expensive items\n    heap = []\n    for item in items:\n        # If the heap is full, remove the minimum item\n        if len(heap) == n:\n            heapq.heappop(heap)\n        # Add the current item to the heap\n        heapq.heappush(heap, item)\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Write a function to find the n most expensive items in a given dataset.\n    \"\"\"\n    # Sort the items in decreasing order of their price\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item)\n    # Return the n most expensive items\n    return [heapq.heappop(heap) for _ in range(n)]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # Split the list at the nth element\n    mid = n // 2\n    left_list = l[:mid]\n    right_list = l[mid:]\n    # Add the first part to the end of the right list\n    right_list.extend(left_list)\n    # Return the final list\n    return right_list"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n > len(l):\n        return 'Error: n is greater than length of the list'\n    \n    if n == 0:\n        return [l[0], l[1:]]\n    \n    left_list = l[:n]\n    right_list = l[n:]\n    \n    return left_list + [l[0]] + right_list"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n >= len(l):\n        raise ValueError(\"Index out of range.\")\n    first_part = l[:n]\n    second_part = l[n:]\n    return first_part + second_part"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    split_at = n\n    new_list = l[:split_at] + l[split_at:]\n    return new_list"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # create a list to store the elements that were not split\n    rest = []\n    # iterate over the list\n    for i in range(n):\n        # add the element to the rest list\n        rest.append(l[i])\n    # add the first n elements to the end of the list\n    l[n:] = rest"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n > len(l):\n        print(\"Error: List length is less than the specified index.\")\n        return\n    else:\n        mid = len(l)//2\n        if mid == n:\n            return l\n        else:\n            part1 = l[:mid]\n            part2 = l[mid+1:]\n            part1.reverse()\n            return part1 + part2"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n < 0 or n > len(l):\n        print(\"Invalid index\")\n        return\n    left = l[:n]\n    right = l[n:]\n    return left + right"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    new_list = []\n    for i in range(len(l)):\n        if i == n-1:\n            new_list.extend(l[i:])\n            break\n        new_list.append(l[i])\n    return new_list"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n < 0 or n >= len(l):\n        return 'Invalid input!'\n    else:\n        return l[:n] + l[n:]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    l.insert(n, l.pop(0))\n    return l"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuplex = tuple(listx)\n    return tuplex"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    # Convert the list to a tuple using the tuple() function\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 0:\n        return \"The list is empty.\"\n    else:\n        max_num = max(nums)\n        min_num = min(nums)\n        return abs(max_num - min_num)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 0:\n        return \"The list is empty.\"\n    min_num = float('inf')\n    max_num = float('-inf')\n    for num in nums:\n        if num < min_num:\n            min_num = num\n        if num > max_num:\n            max_num = num\n    diff = max_num - min_num\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) < 2:\n        return None\n    \n    max_val = max(nums)\n    min_val = min(nums)\n    \n    diff = max_val - min_val\n    \n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # Sort the list in ascending order\n    nums.sort()\n    # Find the difference between the largest and smallest values\n    diff = nums[-1] - nums[0]\n    # Return the difference\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # initialize variables to store largest and smallest values in the list\n    largest = smallest = nums[0]\n\n    # iterate through the list and update the largest and smallest values\n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n\n    # return the difference between the largest and smallest values\n    return largest - smallest"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # Initialize variables to hold the largest and smallest values\n    max_val = float('-inf')\n    min_val = float('inf')\n    \n    # Loop through the list and update the max and min values\n    for num in nums:\n        if num > max_val:\n            max_val = num\n        if num < min_val:\n            min_val = num\n    \n    # Return the difference between the max and min values\n    return max_val - min_val"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # Sort the given list in ascending order\n    nums.sort()\n    \n    # Find the difference between the first and last element of the sorted list\n    diff = nums[-1] - nums[0]\n    \n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 0:\n        return None\n    \n    # find the smallest and largest values in the list\n    smallest = nums[0]\n    largest = nums[0]\n    for num in nums:\n        if num < smallest:\n            smallest = num\n        elif num > largest:\n            largest = num\n    \n    # calculate the difference between the smallest and largest values\n    diff = largest - smallest\n    \n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # sort the list in ascending order\n    nums.sort()\n    # find the difference between the largest and smallest value\n    return nums[-1] - nums[0]"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # Find the smallest and largest values in the list\n    min_val = float('inf')\n    max_val = float('-inf')\n    for num in nums:\n        if num < min_val:\n            min_val = num\n        if num > max_val:\n            max_val = num\n    # Calculate the difference between the largest and smallest values\n    diff = max_val - min_val\n    return diff"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    result = []\n    while a <= b:\n        square = a ** 2\n        result.append(square)\n        a += 1\n    return result"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        sqrt_i = int(i**0.5)\n        if sqrt_i**2 == i:\n            print(sqrt_i)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        square = i * i\n        if square == i:\n            print(i)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        square = i*i\n        if square == i*i and i*i > 0:\n            print(i*i)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # loop through all integers from a to b\n    for i in range(a, b+1):\n        # check if the square of the current integer is a perfect square\n        if i*i == b:\n            print(f\"The perfect square of {i} is {i*i}.\")"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a > b:\n        a, b = b, a  # swap a and b to find perfect squares in descending order\n\n    # iterate over a and b in descending order\n    for i in range(b, a-1, -1):\n        # check if i is a perfect square\n        root = int(i ** 0.5) + 1  # find square root\n        if root * root == i:\n            yield root"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    result = []\n    for i in range(a, b+1):\n        square = i*i\n        if square == i and i*i!= square:\n            result.append(i)\n    return result"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # initialize a variable to keep track of the number of perfect squares found\n    count = 0\n    \n    # loop through all integers between a and b\n    for i in range(a, b+1):\n        # check if the square of i is equal to a square of b\n        if i**2 == b**2:\n            # increment the count variable if the square of i is equal to b**2\n            count += 1\n    \n    # return the count of perfect squares found\n    return count"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Initialize the result list and set the starting value of a\n    result = []\n    start = a\n    # Loop until the starting value of b is greater than the starting value of a\n    while start <= b:\n        # Append the square of the starting value to the result list\n        result.append(start*start)\n        # Increment the starting value by 1\n        start += 1\n    # Return the result list\n    return result"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    Write a function to find perfect squares between two given numbers.\n    \"\"\"\n\n    # initialize a list to store perfect squares\n    squares = []\n\n    # loop through all integers between a and b\n    for i in range(a, b+1):\n        # check if i is a perfect square\n        j = 0\n        while j**2 <= i:\n            j += 1\n        if j**2 == i:\n            # add i to the list of perfect squares\n            squares.append(i)\n\n    # return the list of perfect squares\n    return squares"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    '''\n    This function takes in polar coordinates and converts them to rectangular coordinates.\n\n    Args:\n        r (float): The radius of the circle.\n        theta (float): The angle measured in radians from the x-axis.\n\n    Returns:\n        tuple: A tuple containing the x and y coordinates of the rectangular coordinates.\n    '''\n    x = r*cmath.cos(theta)\n    y = r*cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Write a function to convert polar coordinates to rectangular coordinates.\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return (x, y)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef polar_rect(r, phi):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(phi)\n    y = r * cmath.sin(phi)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def polar_rect(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return complex(r*cmath.cos(theta),r*cmath.sin(theta))"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Write a function to convert polar coordinates to rectangular coordinates.\n\n    :param r: The radius of the point.\n    :param theta: The angle of the point with respect to the positive x-axis, in radians.\n    :return: A tuple containing the x and y coordinates of the point in rectangular coordinates.\n    \"\"\"\n\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n\n    return (x, y)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.phase(x + y*1j)\n    x = r*cmath.cos(theta)\n    y = r*cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.phase(x + y*1j)\n    \n    x_rect = r*cmath.cos(theta)\n    y_rect = r*cmath.sin(theta)\n    \n    return (x_rect, y_rect)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Write a function to convert polar coordinates to rectangular coordinates.\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef polar_rect(r,phi):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r*cmath.cos(phi)\n    y = r*cmath.sin(phi)\n    return x,y\n"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last elements in a list.\n    \"\"\"\n    # Check if the input is a list or not\n    if type(newList)!= list:\n        print(\"Input must be a list.\")\n    else:\n        # Swap the first and last elements\n        newList[0], newList[-1] = newList[-1], newList[0]\n        # Print the modified list\n        print(\"Modified list:\", newList)"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Using Pythonic List Slicing\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) > 1:\n        first_element = newList[0]\n        last_element = newList[-1]\n        newList[0] = last_element\n        newList[-1] = first_element\n        return newList\n    else:\n        return \"List should have at least two elements to swap.\""
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # check if the length of the list is less than 2 (can't swap elements)\n    if len(newList) < 2:\n        return newList\n    \n    # swap the first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Check if the input list is empty or not\n    if len(newList) == 0: \n        return newList\n    \n    # Get the first and last elements of the list\n    firstElement = newList[0]\n    lastElement = newList[-1]\n    \n    # Remove the last element from the list\n    newList.pop()\n    \n    # Add the first element to the beginning of the list\n    newList.insert(0, firstElement)\n    \n    # Add the last element to the end of the list\n    newList.append(lastElement)\n    \n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Assigning the length of the list to a variable\n    length = len(newList)\n    \n    # Checking if the length of the list is less than 2\n    if length < 2:\n        return newList\n    \n    # Interchanging the first and last elements of the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last elements in a list.\n    \"\"\"\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Convert the list into a string\n    newListStr = str(newList)\n    # Split the string into a list\n    newListArr = newListStr.split(',')\n    # Swap the first and last elements\n    newListArr[0], newListArr[-1] = newListArr[-1], newListArr[0]\n    # Convert the list back into a string\n    newListStr = ','.join(newListArr)\n    # Convert the string back into a list\n    newList = eval(newListStr)\n    return newList"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # initialize sum and coefficient\n    sum_coeff = 0\n    coeff = 1\n\n    # loop through k\n    for i in range(k):\n        # calculate coefficient\n        coeff *= (n-i)\n        coeff //= i+1\n        \n        # add coefficient to sum\n        sum_coeff += coeff\n\n    return sum_coeff"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    sum = 0\n    for i in range(1,k+1):\n        sum += (n-i+1)*factorial(n-i)\n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # initialize the sum of the product of consecutive binomial co-efficients to 0\n    sum_product = 0\n\n    # loop through all the values of n starting from 1 to n\n    for i in range(1,n+1):\n        # calculate the binomial coefficient using the formula for nCr\n        binomial_coeff = math.factorial(n)/(math.factorial(i)*math.factorial(n-i))\n        # calculate the product of the current binomial coefficient and the sum of the product of all previous binomial coefficients\n        product_sum = binomial_coeff * sum_product\n        # update the sum of the product of consecutive binomial co-efficients\n        sum_product = product_sum\n\n    # return the final sum of the product of consecutive binomial co-efficients\n    return sum_product"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n\n    # initialize sum variable to 0\n    sum = 0\n\n    # calculate the binomial coefficient using the formula for binomial coefficients\n    for i in range(k):\n        sum += (n - i) * (k - i) * (n - k + i) // (i * (n - i))\n\n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    sum = 0\n    for i in range(n+1):\n        for j in range(i+1):\n            sum += i*(n-i+1)*j*(n-j+1)/(i+j-1)\n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n\n    # Calculate the binomial coefficient using math module \n    bin_coeff = math.comb(n,k) \n\n    # Calculate the product of consecutive binomial co-efficients \n    product = 1 \n    for i in range(1,k+1): \n        product *= (n-i+1)/(i) \n\n    # Return the sum of the product and the binomial coefficient \n    return product + bin_coeff"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    if k > n:\n        return 0\n    elif k == 0 or k == n:\n        return 1\n    else:\n        return binomial_Coeff(n - 1, k - 1) + binomial_Coeff(n - 1, k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    result = 1\n    for i in range(1,k+1): \n        result *= (n-i+1) // i\n    return result\n\nn = int(input(\"Enter the value of n: \"))\nk = int(input(\"Enter the value of k: \"))\nprint(\"Sum of the product of consecutive binomial co-efficients =\",binomial_Coeff(n,k))"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # To find the sum of the product of consecutive binomial co-efficients\n    # we need to calculate the product of the first k numbers\n    # and then calculate the product of the first (n-k) numbers \n    # and add the result with the product of the first k numbers\n    # This will give us the sum of the product of consecutive binomial co-efficients.\n\n    # To find the product of the first k numbers we can use the formula:\n    # (n choose k) x (n-k choose k-1)\n    # where n is the number of terms, k is the number of consecutive terms,\n    # and n choose k is the number of combinations of k items from a group of n items.\n    # To find the product of the first (n-k) numbers, we can use the formula:\n    # (n choose (n-k)) x (k choose (k-1))\n    # where n is the number of terms, k is the number of consecutive terms,\n    # and n choose k is the number of combinations of k items from a group of n items.\n    # We can then add these products to get the sum of the product of consecutive binomial co-efficients.\n\n    # To find the number of combinations of k items from a group of n items,\n    # we can use the formula:\n    # n choose k = n * (n-1) *... * (n-k+1) / (k * (k-1) *... * 1)\n    # where n is the number of terms, k is the number of consecutive terms.\n    # We can use this formula to calculate the product of the first k numbers.\n\n    # To calculate the product of the first k numbers, we can use recursion.\n    # We start by multiplying the first term by itself and then by the product of the first k-1 terms.\n    # If k is even, we can continue this process by multiplying each term by the product of the previous k/2 terms.\n    # If k is odd, we can continue this process by multiplying each term by the product of the previous k-1 terms.\n    # We can keep track of the current term being calculated and the previous terms as we multiply.\n    # Once we have calculated the product of the first k terms, we can add it to the sum.\n\n    # To calculate the product of the first (n-k) numbers, we can use the formula:\n    # (n choose (n-k)) x (k choose (k-1))\n    # We can use this formula to calculate the product of the first (n-k) numbers.\n\n    # To add the result with the product of the first k numbers, we can use recursion.\n    # We start by adding the first term to the sum and then adding the sum of the first (n-k) terms to the sum.\n    # Once we have calculated the sum of the product of consecutive binomial co-efficients, we can return it.\n\n    # Here's the Python code:\n    if k == 0:\n        return 1\n    elif k == 1:\n        return n\n    else:\n        if k % 2 == 0:\n            # Even case\n            product = (binomial_Coeff(n,k/2) * binomial_Coeff(n,k/2)) * binomial_Coeff(n,k-k/2)\n        else:\n            # Odd case\n            product = (binomial_Coeff(n,k-1) * binomial_Coeff(n,k-1)) * binomial_Coeff(n,k-2)\n        return (n * product) + binomial_Coeff(n,k-1)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k > n: \n        return 0\n    else: \n        return (n * (n-1) * (n-2) *... * 2 * k) // (k * (k-1) * (k-2) *... * 3 * (n-k+1))"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # define a regular expression to match zeroes and non-zeroes in ip address\n    pattern = r'(\\d*[.]\\d+)|(\\d+)'\n    # replace all zeroes with empty string using regex\n    ip = re.sub(pattern, '', ip)\n    # return the modified ip address\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Define a regular expression pattern for an IP address\n    pattern = r\"^((?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))$\"\n    # Use the regular expression pattern to match the input IP address\n    match = re.match(pattern, ip)\n    # Check if the match is not None\n    if match:\n        # Split the matched IP address into its octets\n        octets = match.group(1).split(\".\")\n        # Remove any leading zeroes from each octet\n        for i in range(len(octets)):\n            octets[i] = octets[i].lstrip(\"0\")\n        # Join the modified octets back together\n        ip = \".\".join(octets)\n        # Return the modified IP address\n        return ip\n    else:\n        # If the input IP address does not match the pattern, return None\n        return None"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Remove leading zeroes from an IP address.\n    '''\n    ip = ip.strip()\n    ip = re.sub('^0+(?!.*0+)', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef removezero_ip(ip):\n    # Define a regular expression pattern for matching ip addresses with zeroes\n    pattern = r'^(\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])(\\.(\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])){3}$'\n    \n    # Use the re.match() function to check if the input ip address matches the pattern\n    if re.match(pattern, ip):\n        # Use a loop to remove the leading zeroes from each octet of the ip address\n        for i in range(4):\n            ip = ip.replace('0' + ip[i], ip[i])\n        \n        # Return the modified ip address\n        return ip\n    else:\n        # Raise an exception if the ip address does not match the pattern\n        raise ValueError('Invalid IP address')"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^\\d*[0]$', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^0+', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Remove leading zeroes from each part of the ip address using regular expressions\n    ip_parts = re.split('\\.', ip)\n    for i in range(len(ip_parts)):\n        ip_parts[i] = re.sub('^0+', '', ip_parts[i])\n    # Join the parts of the ip address back together\n    ip_nozero = '.'.join(ip_parts)\n    return ip_nozero"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef removezero_ip(ip):\n    # define regular expression to match leading zeroes\n    pattern = r'^\\d+(\\.0+){2,}$'\n    # remove leading zeroes from IP address using regular expression\n    ip = re.sub(pattern, '', ip)\n    # return cleaned IP address\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef removezero_ip(ip):\n    \"\"\"\n    Remove leading zeroes from an ip address.\n    \"\"\"\n    ip = re.sub(r'^\\D', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub('^0+', '', ip)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # check if the list has at least two elements\n    if len(list1) < 2:\n        return \"List should have at least two elements\"\n    # initialize the even and odd variables to the first two elements of the list\n    even = list1[0]\n    odd = list1[1]\n    # check if the first element is even or odd\n    if even % 2 == 0:\n        # if it is even, check if the second element is even or odd\n        if odd % 2 == 0:\n            # if both elements are even, calculate the difference and return it\n            diff = even - odd\n            return diff\n        else:\n            # if the second element is odd, calculate the difference and return it\n            diff = even - odd + 2\n            return diff\n    else:\n        # if the first element is odd, check if the second element is even or odd\n        if odd % 2 == 0:\n            # if both elements are odd, calculate the difference and return it\n            diff = even - odd\n            return diff\n        else:\n            # if the second element is odd, calculate the difference and return it\n            diff = even - odd + 2\n            return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = 0\n    odd_num = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_num += 1\n        else:\n            odd_num += 1\n    diff = abs(even_num - odd_num)\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # Find the first even number in the list\n    for i in range(len(list1)):\n        if list1[i] % 2 == 0:\n            first_even = list1[i]\n            break\n    \n    # Find the first odd number in the list\n    for i in range(len(list1)):\n        if list1[i] % 2!= 0:\n            first_odd = list1[i]\n            break\n    \n    # Calculate the difference between the first even and first odd numbers\n    diff = first_even - first_odd\n    \n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def diff_even_odd(lst):\n    \"\"\"\n    This function takes a list as input and finds the difference of the first even and first odd number of the list.\n    \"\"\"\n    even_num = 0\n    odd_num = 0\n    for i in lst:\n        if i % 2 == 0:\n            even_num += i\n        else:\n            odd_num += i\n    return even_num - odd_num\n"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = -1\n    odd_num = -1\n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n        else:\n            odd_num = num\n        if even_num!= -1 and odd_num!= -1:\n            break\n    if even_num == -1 or odd_num == -1:\n        return 'The list does not have even and odd numbers'\n    else:\n        return even_num - odd_num"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    for i in range(len(list1)):\n        if list1[i] % 2 == 0:\n            first_even = list1[i]\n            break\n    for i in range(len(list1)):\n        if list1[i] % 2!= 0:\n            first_odd = list1[i]\n            break\n    return first_even - first_odd"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = None\n    odd = None\n    \n    for i in range(len(list1)):\n        if list1[i] % 2 == 0:\n            if even is None:\n                even = list1[i]\n            else:\n                even = even - list1[i]\n        elif list1[i] % 2 == 1:\n            if odd is None:\n                odd = list1[i]\n            else:\n                odd = odd - list1[i]\n    \n    if even is None:\n        return None\n    else:\n        return odd - even"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    \"\"\"\n    Write a function to find the difference of the first even and first odd number of a given list.\n    \"\"\"\n    even_first = [x for x in list1 if x % 2 == 0][0]\n    odd_first = [x for x in list1 if x % 2 == 1][0]\n    return even_first - odd_first"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    This function takes a list as input and returns the difference of the first even and first odd numbers in the list.\n    If there are no even or odd numbers in the list, it returns None.\n    '''\n\n    # Check if the list contains any even or odd numbers\n    if list1.count(2) > 0 or list1.count(3) > 0:\n        # Find the first even number in the list\n        for i in range(len(list1)):\n            if list1[i] == 2:\n                even_num = i\n                break\n        # Find the first odd number in the list\n        for i in range(len(list1)-1, -1, -1):\n            if list1[i] == 3:\n                odd_num = i\n                break\n        # Check if both even and odd numbers are present in the list\n        if even_num is not None and odd_num is not None:\n            # Calculate the difference between the even and odd numbers\n            diff = abs(list1[even_num] - list1[odd_num])\n            # Return the difference\n            return diff\n        else:\n            # If even or odd numbers are not present, return None\n            return None\n    else:\n        # If there are no even or odd numbers in the list, return None\n        return None"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = None\n    odd_num = None\n    for num in list1:\n        if num % 2 == 0:\n            if even_num is None:\n                even_num = num\n            else:\n                return num - even_num\n        else:\n            if odd_num is None:\n                odd_num = num\n            else:\n                return num - odd_num\n    return None"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Swaps(str1, str2):\n    # Convert the binary strings to integers\n    int1 = int(str1, 2)\n    int2 = int(str2, 2)\n\n    # Initialize variables to keep track of the number of swaps required\n    swaps = 0\n    carry = 0\n\n    # Iterate through the bits of each integer and swap bits as needed\n    for i in range(32):\n        # Get the bit values of the integers\n        bit1 = (int1 >> i) & 1\n        bit2 = (int2 >> i) & 1\n\n        # If both bits are 1, no swap is needed\n        if bit1 == 1 and bit2 == 1:\n            continue\n\n        # If one bit is 1 and the other is 0, swap the bits\n        if bit1 == 1 and bit2 == 0:\n            # Increment the number of swaps\n            swaps += 1\n\n            # Compute the carry value based on the bits being swapped\n            if bit1 > bit2:\n                carry = 1\n            else:\n                carry = 0\n\n            # Shift both bits one position to the right\n            int1 = (int1 << 1) | (int2 >> 1)\n            int2 = (int2 << 1) | carry\n\n        # If both bits are 0, no swap is needed\n        elif bit1 == 0 and bit2 == 0:\n            continue\n\n        # If one bit is 0 and the other is 1, swap the bits\n        elif bit1 == 0 and bit2 == 1:\n            # Increment the number of swaps\n            swaps += 1\n\n            # Compute the carry value based on the bits being swapped\n            if bit1 > bit2:\n                carry = 1\n            else:\n                carry = 0\n\n            # Shift both bits one position to the left\n            int1 = (int1 >> 1) | (int2 << 1)\n            int2 = (int2 >> 1) | carry\n\n    # If the carry is 1, there were more bits to swap than were required\n    if carry == 1:\n        swaps += 1\n\n    # Convert the final integers back to binary strings and return the result\n    return str(int1), str(int2), swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Swaps(str1, str2):\n    # Convert the binary numbers to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n    # Initialize the count of swaps\n    count = 0\n    # Initialize the index of the two numbers\n    i = 0\n    j = len(str1) - 1\n    # Loop while the index of the two numbers are not equal\n    while i < j:\n        # If the digits are not equal, swap the digits and increment the count\n        if num1 % 2!= num2 % 2:\n            num1 = num1 ^ num2\n            str1 = str1[:i] + str1[i+1] + str1[j] + str1[j+1]\n            num2 = num1 ^ num2\n            str2 = str2[:i] + str2[i+1] + str2[j] + str2[j+1]\n            count += 1\n            i += 1\n            j -= 1\n        # If the digits are equal, increment both indices\n        else:\n            i += 1\n            j -= 1\n    # Return the count of swaps\n    return count"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Swaps(str1, str2):\n    # check the lengths of the strings\n    if len(str1)!= len(str2):\n        return \"Error: Strings have different lengths\"\n    \n    # convert the strings to lists of integers\n    list1 = [int(i) for i in str1]\n    list2 = [int(i) for i in str2]\n    \n    # sort the lists\n    list1.sort()\n    list2.sort()\n    \n    # count the number of swaps required\n    n = 0\n    for i in range(len(list1)):\n        if list1[i]!= list2[i]:\n            n += 1\n    \n    return n"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Swaps(str1, str2):\n    n = len(str1)\n    swaps = 0\n    for i in range(n):\n        if str1[i]!= str2[i]:\n            # swap the characters\n            temp = str1[i]\n            str1[i] = str2[i]\n            str2[i] = temp\n            swaps += 1\n            # check if there are any adjacent characters which can be swapped\n            for j in range(i+1, n):\n                if str1[j]!= str2[j]:\n                    temp = str1[j]\n                    str1[j] = str2[j]\n                    str2[j] = temp\n                    swaps += 1\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Swaps(str1, str2):\n    # convert binary strings to integers\n    int1 = int(str1, 2)\n    int2 = int(str2, 2)\n\n    # calculate the number of swaps required\n    swaps = 0\n    while int1!= int2:\n        if int1 < int2:\n            int1 = (int1 << 1) + 1\n            swaps += 1\n        else:\n            int2 = (int2 << 1) + 1\n            swaps += 1\n\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Swaps(str1, str2):\n    # Convert both binary strings to integers\n    int1 = int(str1, 2)\n    int2 = int(str2, 2)\n    \n    # Initialize variables to keep track of swaps\n    count = 0\n    i = 0\n    j = len(str1) - 1\n    \n    # Iterate through the integers from right to left\n    while i < j:\n        # Compare the integers at the current positions\n        if int1 & (1 << i):\n            if int2 & (1 << j):\n                # If both bits are set, swap the bits\n                int1 ^= (1 << i)\n                int2 ^= (1 << j)\n                count += 1\n        i += 1\n        j -= 1\n    \n    # Check if any swaps were made\n    if int1 == int2:\n        return count\n    else:\n        # If no swaps were made, calculate minimum number of swaps to convert int2 to int1\n        while int1!= int2:\n            # If int1 is greater than int2, swap the bits at the rightmost position\n            if int1 > int2:\n                int1 ^= (1 << j)\n                int2 ^= (1 << j)\n                count += 1\n                j -= 1\n            else:\n                int2 ^= (1 << i)\n                int1 ^= (1 << i)\n                count += 1\n                i += 1\n        return count"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Swaps(str1, str2):\n    n = len(str1)\n    i = j = 0\n    swaps = 0\n    while i < n and j < n:\n        if str1[i] == '0' and str2[j] == '1':\n            i += 1\n            j += 1\n            swaps += 1\n        elif str1[i] == '1' and str2[j] == '0':\n            j += 1\n            swaps += 1\n        else:\n            i += 1\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Swaps(str1, str2):\n    # Step 1: create two binary numbers of equal length and opposite sign\n    len1 = len(str1)\n    len2 = len(str2)\n    if len1 > len2:\n        str1, str2 = str2, str1\n        len1, len2 = len2, len1\n    max_swaps = (len1 + len2) // 2\n    binary_number = str1 + str2\n    binary_number = ''.join(['1' if digit == '0' else '0' for digit in binary_number])\n    # Step 2: start with swaps count as 0\n    swaps = 0\n    # Step 3: swap the first digit of the two binary numbers\n    if binary_number[0] == '1':\n        swaps += 1\n        binary_number = binary_number[1:]\n    # Step 4: if the swaps count becomes 1, then there is no need to swap the second digit\n    if swaps == 1:\n        return swaps\n    # Step 5: swap the second digit of the two binary numbers\n    if binary_number[1] == '1':\n        swaps += 1\n        binary_number = binary_number[:1] + '0' + binary_number[2:]\n    # Step 6: continue this process until all digits of one binary number are greater than or equal to the corresponding digits of the other binary number\n    while binary_number[0] < binary_number[1]:\n        if binary_number[0] == '1':\n            swaps += 1\n            binary_number = binary_number[1:]\n        if binary_number[1] == '1':\n            swaps += 1\n            binary_number = binary_number[:1] + '0' + binary_number[2:]\n    # Step 7: return the minimum number of swaps required\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    This function takes two binary numbers represented as strings and returns the minimum number of swaps required to convert the first number to the second number.\n\n    The function works by converting the numbers to integers and then comparing them. If the integers are different, the function compares each digit of the first number and second number and swaps the positions of the digits that are different.\n\n    The function returns the minimum number of swaps required to convert the first number to the second number.\n    \"\"\"\n\n    # convert the binary strings to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # initialize variables to store the minimum number of swaps and the number of swaps\n    min_swaps = float('inf')\n    swaps = 0\n\n    # loop through each digit of the first number and second number\n    for i in range(len(str1)):\n        if num1 & (1 << i)!= num2 & (1 << i):\n            # if the digits are different, swap their positions\n            num1 = num1 ^ (1 << i)\n            num2 = num2 ^ (1 << i)\n            swaps += 1\n            # update the minimum number of swaps if necessary\n            if swaps < min_swaps:\n                min_swaps = swaps\n\n    # return the minimum number of swaps required to convert the first number to the second number\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Swaps(str1, str2):\n    # Convert the binary strings to lists of digits\n    num1 = list(map(int, str1))\n    num2 = list(map(int, str2))\n\n    # Find the length of the binary strings\n    n1 = len(num1)\n    n2 = len(num2)\n\n    # Initialize the variables for counting swaps\n    swap_count = 0\n    index1 = 0\n    index2 = 0\n\n    # Loop through the digits in both binary strings\n    while index1 < n1 and index2 < n2:\n        # If the digits are not equal, swap them\n        if num1[index1]!= num2[index2]:\n            # Increment the swap count and move the indices of the digits\n            swap_count += 1\n            num1[index1], num1[index2] = num1[index2], num1[index1]\n            num2[index1], num2[index2] = num2[index2], num1[index1]\n            index1 = 0\n            index2 = 0\n\n        # If the digits are equal, increment the indices\n        else:\n            index1 += 1\n            index2 += 1\n\n    # Check if there are any extra digits in the first binary string\n    if index1 < n1:\n        # If there are extra digits in the first binary string, swap them with the first digits in the second binary string\n        for i in range(index1, n1):\n            num1[i], num1[0] = num1[0], num1[i]\n            swap_count += 1\n\n    # Check if there are any extra digits in the second binary string\n    if index2 < n2:\n        # If there are extra digits in the second binary string, swap them with the first digits in the first binary string\n        for i in range(index2, n2):\n            num2[i], num2[0] = num2[0], num2[i]\n            swap_count += 1\n\n    return swap_count"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for i in range(len(tuple_list)):\n        total_size += sys.getsizeof(tuple_list[i])\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    This function calculates the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    This function takes a list of tuples as input and returns the total size in bytes of the tuples in the list.\n    '''\n    total_size = 0\n    for tup in tuple_list:\n        for item in tup:\n            total_size += sys.getsizeof(item)\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # find the size of each element in the tuple\n    sizes = [sys.getsizeof(x) for x in tuple_list]\n    # calculate the total size of the tuple\n    total_size = sum(sizes)\n    # convert the total size to bytes\n    total_size = total_size.to_bytes(8, byteorder='big')\n    # return the total size\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for i in tuple_list:\n        total_size += sys.getsizeof(i)\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # Convert the tuple to a byte array\n    byte_array = bytearray(tuple_list)\n\n    # Get the size of the byte array in bytes\n    size = sys.getsizeof(byte_array)\n\n    # Return the size of the byte array in bytes\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n\n    # Convert the tuple to a byte string\n    byte_string = bytes(tuple_list)\n\n    # Get the length of the byte string\n    length = len(byte_string)\n\n    # Multiply the length by the size of a single tuple element\n    size = length * sys.getsizeof(tuple_list[0])\n\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for i in range(len(tuple_list)):\n        size += sys.getsizeof(tuple_list[i])\n    return size"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    if len(arr1) > len(arr2):\n        arr1, arr2 = arr2, arr1\n    for i in range(len(arr1)):\n        if k == 1:\n            return arr1[i]\n        elif k < len(arr1) - i:\n            arr1 = arr1[i+1:]\n            return arr1[0]\n        else:\n            k -= len(arr1) - i\n            arr2 = arr2[i:]\n            return find_kth(arr2, arr1, 1)"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # Find the middle index of both arrays\n    mid1 = len(arr1) // 2\n    mid2 = len(arr2) // 2\n    \n    # Find the kth element in both arrays\n    if k <= mid1:\n        return find_kth(arr1, arr2, k)\n    elif k <= mid1 + mid2:\n        return arr1[k-1]\n    else:\n        return find_kth(arr1, arr2, k - (mid1+mid2+1))"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i, j = 0, 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n            break\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n\n    # Initialize variables for the current index\n    i = 0\n    j = 0\n\n    # Initialize variables to keep track of the kth smallest and its index\n    kth_smallest = float('inf')\n    index_kth_smallest = None\n\n    # Loop through both arrays and compare the elements\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            if arr1[i] < kth_smallest:\n                kth_smallest = arr1[i]\n                index_kth_smallest = i\n            i += 1\n        elif arr2[j] < arr1[i]:\n            if arr2[j] < kth_smallest:\n                kth_smallest = arr2[j]\n                index_kth_smallest = j\n            j += 1\n        else:\n            # If the elements are equal, keep track of the index of the first element in each array\n            if index_kth_smallest is None:\n                index_kth_smallest = i\n            i += 1\n            j += 1\n\n    # Return the kth smallest element from the first array\n    return arr1[index_kth_smallest]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n\n    if i == len(arr1):\n        return arr2[j]\n    else:\n        return arr1[i]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] == arr2[j]:\n            i += 1\n            j += 1\n        elif arr1[i] < arr2[j]:\n            i += 1\n        else:\n            j += 1\n        if i == k:\n            return arr1[i-1]\n        elif j == k:\n            return arr2[j-1]\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # calculate the total length of the two arrays\n    n1 = len(arr1)\n    n2 = len(arr2)\n\n    # initialize the index of the first array and the second array\n    i = 0\n    j = 0\n\n    # initialize the index of the kth element in the sorted array\n    count = 0\n\n    # loop through the arrays and compare the values\n    while i < n1 and j < n2:\n        if arr1[i] < arr2[j]:\n            count += n1 - i\n            i += 1\n        elif arr1[i] > arr2[j]:\n            count += n2 - j\n            j += 1\n        else:\n            count += 1\n            i += 1\n            j += 1\n\n    # check if the count is equal to k or less\n    if count >= k:\n        # if it is, return the kth element of the first array\n        return arr1[k-1]\n    else:\n        # if it is not, return the kth element of the second array\n        return arr2[k-1]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n\n    # find the length of the array\n    n = len(arr1)\n\n    # find the total number of elements in the two arrays\n    total_elements = n + len(arr2)\n\n    # check if k is within the range of the total number of elements\n    if k > total_elements or k < 1:\n        return None\n\n    # initialize variables for the current index and the last k elements\n    left_index = 0\n    right_index = n - 1\n    kth_element = None\n\n    # loop until the current index is less than or equal to the right index\n    while left_index <= right_index:\n\n        # find the middle index of the current subarray\n        middle_index = (left_index + right_index) // 2\n\n        # check if the current element in the first array is less than or equal to the middle element\n        if arr1[middle_index] <= arr1[right_index]:\n\n            # check if the current element in the second array is greater than or equal to the middle element\n            if arr2[middle_index] >= arr1[right_index]:\n\n                # if the current element in the second array is greater than the middle element,\n                # move the right index to the left\n                right_index = middle_index - 1\n\n            # if the current element in the second array is less than the middle element,\n            # move the left index to the right\n            else:\n\n                # calculate the total number of elements to the left of the current element\n                kth_elements_to_left = (right_index - middle_index) + 1\n\n                # check if k is within the range of the kth elements to the left\n                if kth_elements_to_left == k:\n\n                    # if k is within the range, return the middle element\n                    return arr1[middle_index]\n\n                # if k is outside the range of the kth elements to the left,\n                # move the left index to the right\n                else:\n\n                    # move the left index to the right\n                    left_index = middle_index + 1\n\n        # if the current element in the first array is greater than the middle element,\n        # move the left index to the right\n        else:\n\n            # calculate the total number of elements to the right of the current element\n            kth_elements_to_right = (middle_index - left_index) + 1\n\n            # check if k is within the range of the kth elements to the right\n            if kth_elements_to_right == k:\n\n                # if k is within the range, return the middle element\n                return arr1[middle_index]\n\n            # if k is outside the range of the kth elements to the right,\n            # move the right index to the left\n            else:\n\n                # move the right index to the left\n                right_index = middle_index - 1\n\n    # if the current index is greater than the right index, return None\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = k = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            arr1[i], arr1[j] = arr1[j], arr1[i]\n            i += 1\n        else:\n            arr2[j], arr2[i] = arr2[i], arr2[j]\n            j += 1\n        k += 1\n    return arr1[k - 1]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] <= arr2[j]:\n            i += 1\n        else:\n            j += 1\n    return arr1[i-1] if i == k else arr2[j-1]"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_armstrong_number(number):\n    \"\"\"\n    This function takes a number as input and returns True if it is an armstrong number, else False.\n    \"\"\"\n    num = int(str(number)[::-1])\n    power = len(str(number))\n    sum = 0\n    for i in range(power):\n        digit = int(str(num)[i])\n        sum += digit ** power\n    return sum == number\n"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_armstrong(number):\n    '''\n    This function takes an integer input and returns True if it is an Armstrong number and False otherwise.\n    '''\n    num = number\n    sum_of_cubes = 0\n    while num > 0:\n        digit = num % 10\n        sum_of_cubes += digit ** 3\n        num //= 10\n    return num == sum_of_cubes\n\n\ndef armstrong_number(number):\n    '''\n    This function takes an integer input and returns True if it is an Armstrong number and False otherwise.\n    '''\n    if is_armstrong(number):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # convert the number to a string to calculate its digits\n    digits = [int(d) for d in str(number)]\n    # calculate the sum of the cube of each digit\n    total = sum([d**3 for d in digits])\n    # check if the total is equal to the input number\n    return total == number"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Convert the number to a string and reverse it\n    reversed_number = str(number)[::-1]\n    \n    # Calculate the sum of the cubes of the digits of the number\n    sum_of_cubes = 0\n    for digit in reversed_number:\n        digit = int(digit)\n        sum_of_cubes += digit**3\n    \n    # Compare the original number and the sum of the cubes with each other\n    if number == sum_of_cubes:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    num = number\n    temp = 0\n    while num > 0:\n        digit = num % 10\n        temp += digit ** 3\n        num //= 10\n    if number == temp:\n        print(f\"{number} is an Armstrong number\")\n    else:\n        print(f\"{number} is not an Armstrong number\")"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    # Convert the number to a string\n    num_str = str(number)\n\n    # Initialize the sum to 0\n    sum = 0\n\n    # Loop through each digit in the string\n    for digit in num_str:\n        # Convert the digit to an integer and add it to the sum\n        sum += int(digit) ** len(num_str)\n\n    # If the sum is equal to the original number, it's an armstrong number\n    if sum == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    if len(str(number))!= len(set(str(number))):\n        return False\n    else:\n        num = number\n        length = len(str(number))\n        sum = 0\n        temp = num\n        while temp!= 0:\n            digit = temp % 10\n            sum += digit ** length\n            temp //= 10\n        if sum == number:\n            return True\n        else:\n            return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Convert the given number to a string\n    num_str = str(number)\n    # Convert the string to a list of digits\n    num_list = [int(digit) for digit in num_str]\n    # Calculate the sum of the digits raised to the power of the length of the list\n    sum_of_digits = sum([digit**len(num_list) for digit in num_list])\n    # Check if the sum is equal to the original number\n    if sum_of_digits == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Convert the number to a string\n    number_str = str(number)\n    # Initialize a variable to hold the sum of the squares of the digits of the number\n    sum_of_squares = 0\n    # Loop through each digit of the number and calculate the sum of the squares of the digits\n    for digit in number_str:\n        digit = int(digit)\n        sum_of_squares += digit**3\n    # Check if the sum of the squares of the digits of the number is equal to the original number\n    if sum_of_squares == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    This function takes a number as an input and checks if it is an Armstrong number or not.\n    \"\"\"\n    if number < 10:\n        return False\n    else:\n        sum = 0\n        temp = number\n        while temp > 0:\n            digit = temp % 10\n            sum += digit ** 3\n            temp //= 10\n        if number == sum:\n            return True\n        else:\n            return False"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(number):\n        sum += i + 1\n        count += 1\n    average = sum/count\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n\n    # initializing sum and count variables\n    sum = 0\n    count = 0\n\n    # calculating sum of first n natural numbers\n    for i in range(1, number+1):\n        sum += i\n\n    # calculating average of first n natural numbers\n    average = sum / number\n\n    # printing sum and average\n    print(\"Sum of first\", number, \"natural numbers:\", sum)\n    print(\"Average of first\", number, \"natural numbers:\", average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum_ = 0\n    for i in range(1, number+1):\n        sum_ += i\n    average = sum_/number\n    return sum_, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    count = 0\n    while count < number:\n        count += 1\n        total += count\n    avg = total / number\n    return total, avg"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_average(n):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    # Initialize variables\n    sum = 0\n    count = 0\n    # Take input n and find sum and average\n    for i in range(1, n+1):\n        sum += i\n        count += 1\n    avg = sum/count\n    return sum, avg"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    # initialize variables for sum and count\n    total = 0\n    count = 0\n    \n    # loop through the first n natural numbers\n    for i in range(1, number+1):\n        # add the current number to the sum and increment the count\n        total += i\n        count += 1\n    \n    # calculate the average and return a tuple with sum and average\n    average = total / count\n    return (total, average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n\n    # initialize variables\n    sum = 0\n    count = 0\n\n    # loop until count reaches n\n    while count < number:\n        # add 1 to count and sum\n        count += 1\n        sum += count\n\n    # find average and store in variable\n    average = sum / count\n\n    # return tuple with sum and average\n    return (sum, average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    average = sum / number\n    return sum, average\n"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum_of_numbers = 0\n    count = 0\n    while count < number:\n        count += 1\n        sum_of_numbers += count\n    average = sum_of_numbers / number\n    print(\"Sum of first\", number, \"natural numbers:\", sum_of_numbers)\n    print(\"Average of first\", number, \"natural numbers:\", average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    average = sum / number\n    return sum, average"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        print(n, \"is even\")\n    else:\n        print(n, \"is odd\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        print(\"The given number is even\")\n    else:\n        print(\"The given number is odd\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Even(n):\n    '''\n    This function takes an integer as input and returns True if it is even and False otherwise.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Even(n):\n    '''\n    This function takes a number as input and returns True if the number is even, else False.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Even(n):\n    \"\"\"\n    This function takes a number as an input and returns True if it is even and False otherwise.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        print(f'{n} is even.')\n    else:\n        print(f'{n} is odd.')"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n\n    if n % 2 == 0:\n        print(\"The number is even.\")\n    else:\n        print(\"The number is odd.\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Create a dictionary to store the frequency of characters in the string\n    freq_dict = {}\n    for char in str1:\n        if char in freq_dict:\n            freq_dict[char] += 1\n        else:\n            freq_dict[char] = 1\n    \n    # Find the first repeated character\n    for char in str1:\n        if freq_dict[char] > 1:\n            return char"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_freq = {}\n    for char in str1:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n    \n    for char in str1:\n        if char_freq[char] > 1:\n            return char\n    \n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    This function takes a string as input and returns the first repeated character in that string.\n    \"\"\"\n    for char in str1:\n        if str1.count(char) > 1:\n            return char"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    # Initialize variables\n    char_count = {}\n\n    # Loop through the string and count the occurrences of each character\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    # Loop through the string again and find the first repeated character\n    for char in str1:\n        if char_count[char] > 1:\n            return char\n\n    # If no repeated character is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    char_dict = {}\n    for char in str1:\n        if char in char_dict:\n            return char\n        else:\n            char_dict[char] = True\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {} # create an empty dictionary to store character counts\n    for char in str1:\n        if char in char_count: # if the character has been seen before\n            return char # return the character that has been repeated\n        else:\n            char_count[char] = 1 # otherwise, add the character to the dictionary with a count of 1\n    \n    # if no repeated characters have been found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    This function takes a string as input and returns the first repeated character in the string.\n    If there are no repeated characters, it will return None.\n    \"\"\"\n    # Create a dictionary to store the count of each character in the string\n    char_count = {}\n    \n    # Iterate through the string and update the count of each character in the dictionary\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # Find the first repeated character by iterating through the dictionary\n    for char in char_count:\n        if char_count[char] > 1:\n            return char\n    \n    # If no repeated characters are found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    This function takes a string as input and returns the first repeated character in the string.\n    \"\"\"\n    char_dict = {}\n    for char in str1:\n        if char in char_dict:\n            return char\n        char_dict[char] = True\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # initialize a dictionary to store the count of each character\n    count_dict = {}\n\n    # loop through each character in the string\n    for char in str1:\n        # if the character is already in the dictionary, increment its count\n        if char in count_dict:\n            count_dict[char] += 1\n        # otherwise, add the character to the dictionary with a count of 1\n        else:\n            count_dict[char] = 1\n\n    # loop through the dictionary and find the first repeated character\n    for char, count in count_dict.items():\n        if count > 1:\n            return char\n\n    # if no repeated characters are found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # initialize an empty dictionary to store the frequency of each character in the string\n    freq = {}\n    \n    # loop through each character in the string\n    for char in str1:\n        # if the character is already in the dictionary, increment its frequency by 1\n        if char in freq:\n            freq[char] += 1\n        # otherwise, add the character to the dictionary with a frequency of 1\n        else:\n            freq[char] = 1\n            \n    # loop through the dictionary to find the first repeated character\n    for char in freq:\n        if freq[char] > 1:\n            return char\n            \n    # if no repeated character is found, return None\n    return None"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(2, n+1):\n        if is_lucid(i):\n            ludic.append(i)\n    return ludic\n\ndef is_lucid(n):\n    '''\n    Check if a given integer is lucid.\n    '''\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(2, n+1):\n        if all(int(digit)!= 0 for digit in str(i)) and all(int(digit)!= 0 for digit in str(i+1)):\n            lucid_numbers.append(i)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_set = set()\n    for i in range(1, n+1):\n        is_lucid = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_lucid = False\n                break\n        if is_lucid:\n            lucid_set.add(i)\n    return lucid_set"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    lucid_numbers = []\n    for i in range(1, n+1):\n        if all(i%j!=0 for j in range(2, i)):\n            lucid_numbers.append(i)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(1, n+1):\n        if i == 1:\n            lucid_numbers.append(i)\n        elif i % 2 == 0:\n            lucid_numbers.append(i)\n        else:\n            j = 3\n            while j <= i/2:\n                if i % j == 0:\n                    break\n                j += 2\n            if j > i/2:\n                lucid_numbers.append(i)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucids = []\n    for i in range(2, n+1):\n        lucids.append(i)\n        while i**2 <= n:\n            i += 1\n            lucids.append(i)\n    return lucids"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    lucid_set = set()\n    i = 1\n    while True:\n        if i < n:\n            for j in range(i+1, n+1):\n                if i**j == j**(i-1):\n                    lucid_set.add(j)\n        else:\n            break\n        i += 1\n    return lucid_set"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_list = []\n    i = 1\n    while i <= n:\n        if i > 1:\n            if i % 2!= 0:\n                j = 3\n            else:\n                j = 2\n            while j <= i/2:\n                if i % j == 0:\n                    break\n                else:\n                    j += 2\n        else:\n            j = 2\n        if j <= n:\n            lucid_list.append(i)\n        i += 1\n    return lucid_list"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    current_number = 1\n    while current_number <= n:\n        if all(i % current_number == 0 for i in range(2, current_number + 1)):\n            lucid_numbers.append(current_number)\n        current_number += 1\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    ludics = []\n    for i in range(1, n + 1):\n        if all(i % j!= 0 for j in range(2, int(i ** 0.5) + 1)):\n            ludics.append(i)\n    return ludics"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    words = s.split()\n    reversed_words = words[::-1]\n    result =''.join(reversed_words)\n    return result"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    words = s.split()\n    words.reverse()\n    return \" \".join(words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = words[::-1]\n    reversed_sentence =''.join(reversed_words)\n    return reversed_sentence"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_word = word[::-1]\n        reversed_words.append(reversed_word)\n    return \" \".join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    words = s.split()  # split the string into a list of words\n    reversed_words = []  # initialize an empty list to store reversed words\n    for word in words:  # loop through each word in the list\n        reversed_word = word[::-1]  # reverse the word using slicing\n        reversed_words.append(reversed_word)  # append the reversed word to the list\n    reversed_s =''.join(reversed_words)  # join the list of reversed words into a string\n    return reversed_s"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_words.append(word[::-1])\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_word = word[::-1]\n        reversed_words.append(reversed_word)\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    words = s.split()\n    reversed_words = words[::-1]\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    words = s.split()\n    words.reverse()\n    return''.join(words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_word = word[::-1]\n        reversed_words.append(reversed_word)\n    reversed_string =''.join(reversed_words)\n    return reversed_string"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def prime_num(num):\n    \"\"\"\n    Write a function to check if the given integer is a prime number.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_prime(num):\n    \"\"\"\n    This function takes an integer as input and returns True if it is a prime number, False otherwise.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_num(num):\n    \"\"\"\n    This function takes an integer as input and returns True if it is a prime number, False otherwise.\n    \"\"\"\n    if is_prime(num):\n        return True\n    else:\n        return False"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_prime(num):\n    '''\n    Helper function to check if a number is prime or not.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    if is_prime(num):\n        return True\n    else:\n        return False"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_prime(num):\n    '''\n    This function checks if a given integer is a prime number or not.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_prime(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_prime(num):\n    \"\"\"\n    Returns True if num is prime, False otherwise.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_num(num):\n    \"\"\"\n    Returns True if num is prime, False otherwise.\n    \"\"\"\n    return is_prime(num)"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    # First, check if the number is less than 2\n    if num < 2:\n        return False\n\n    # Check if the number is 2 or 3\n    if num == 2 or num == 3:\n        return True\n\n    # Check if the number is divisible by any number between 2 and the square root of the number\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n\n    # If the number is not divisible by any number between 2 and the square root of the number, it's a prime number\n    return True"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)\n"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180.0"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi/180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radians = math.pi * degree / 180\n    return radians"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * (math.pi/180)\n    return radian"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180.0\n"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    This function converts degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # Compile regex pattern\n    regex_pattern = re.compile(pattern)\n    # Search for pattern in text\n    matches = regex_pattern.findall(text)\n    # If matches found, return first match and its start and end indices\n    if matches:\n        return matches[0], 0, len(matches[0])\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0], 0, len(matches[0])\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        start_index = match.start()\n        end_index = match.end()\n        literal = text[start_index:end_index]\n        print(f\"Found literal {literal} at index {start_index}-{end_index}\")\n    return None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if len(matches) == 0:\n        return None\n    else:\n        literal = matches[0]\n        start = text.find(literal)\n        end = start + len(literal)\n        return literal, start, end\n"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    This function takes in a string and a regex pattern as input. The function searches for the pattern in the string and returns a list of matches. Each match includes the matching substring, the start index of the match, and the end index of the match.\n    '''\n    matches = []\n    start_index = 0\n    while True:\n        match = re.search(pattern, text, start_index)\n        if match:\n            matches.append((match.group(), start_index, match.end()))\n            start_index = match.end()\n        else:\n            break\n    return matches"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        literal = match.group()\n        start_index = match.start()\n        end_index = match.end()\n        return literal, start_index, end_index\n    else:\n        return None, None, None\n\ntext = \"The quick brown fox jumps over the lazy dog. The dog is not lazy.\"\npattern = r\"lazy\"\nliteral, start_index, end_index = find_literals(text, pattern)\n\nif literal:\n    print(\"Found literal '{}' at index {}-{}\".format(literal, start_index, end_index))\nelse:\n    print(\"No literal found\")"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0], 0, len(matches[0])\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        start_index = matches[0].start()\n        end_index = matches[0].end()\n        return matches[0], start_index, end_index\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    \"\"\"\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    \"\"\"\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        match_str = match.group(0)\n        start_index = match.start()\n        end_index = match.end()\n        print(f\"Match found: {match_str}, start index: {start_index}, end index: {end_index}\")"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The\", n, \"th Bell number is:\", bell_Number(n))"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n < 0:\n        print(\"Invalid input. Please enter a positive integer.\")\n        return\n    \n    bell_sequence = [1]\n    for i in range(1, n):\n        bell_sequence.append(bell_sequence[i-1] + bell_sequence[i-2])\n    \n    print(\"The nth bell number is:\", bell_sequence[n-1])"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    a = 1\n    b = 1\n    c = 0\n    for i in range(2, n+1):\n        c = a + b\n        a = b\n        b = c\n    return c"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_Number(n):\n    \"\"\"\n    Write a python function to find nth bell number.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be positive\")\n    elif n == 1:\n        return 1\n    else:\n        return (2 * n) - 1"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell_numbers = [1]\n    for i in range(2, n+1):\n        bell_numbers.append(bell_numbers[-1] + bell_numbers[-2])\n    return bell_numbers[n]"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_Number(n):\n    \"\"\"\n    Write a Python function to find nth bell number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (2 * n + 1) * bell_Number(n - 1)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    # Initialize list of bell numbers\n    bell_numbers = [1]\n    \n    # Iterate until n bell numbers have been calculated\n    for i in range(2, n+1):\n        # Calculate nth bell number by summing of previous n bell numbers\n        bell_numbers.append(bell_numbers[-1] + bell_numbers[-2])\n    \n    # Return nth bell number\n    return bell_numbers[-1]"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell_numbers = [0] * (n + 1)\n    bell_numbers[0] = 0\n    bell_numbers[1] = 1\n    \n    for i in range(2, n + 1):\n        bell_numbers[i] = bell_numbers[i-1] + bell_numbers[i-2]\n    \n    return bell_numbers[n]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L] + list1[L+1:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L == 1:\n        return [list1[0]]\n    elif L == 2:\n        return [list1[0], list1[1]]\n    else:\n        k = len(list1) - L + 1\n        for i in range(k-1, len(list1)):\n            list1[i-1] = list1[i]\n        list1.pop()\n        return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if len(list1) < L:\n        return \"Error: List must have at least L elements.\"\n    else:\n        # creating a new list without the kth element\n        new_list = list1[:L-1]\n        # appending the remaining elements of the original list to the new list\n        new_list += list1[L:]\n        return new_list"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    for i in range(L):\n        list1.pop(i)\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list1.pop(L-1)\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list1.pop(L-1)\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # find the kth smallest element in the list\n    kth_smallest = sorted(list1)[L-1]\n    \n    # remove the kth smallest element from the list\n    list1.remove(kth_smallest)\n    \n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    new_list = []\n    for i in range(len(list1)):\n        if i!= L-1:\n            new_list.append(list1[i])\n    return new_list"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    # initialize the list to store the result\n    result = []\n    # iterate over the list\n    for i in range(len(list1)):\n        # check if the current index is equal to the k'th index\n        if i == L-1:\n            # if it is, skip to the next index\n            continue\n        # add the current element to the result list\n        result.append(list1[i])\n    # return the result list\n    return result"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    if L <= 0:\n        return []\n    elif L == 1:\n        return list1[:-1]\n    elif L == len(list1):\n        return []\n    else:\n        k = L\n        for i in range(len(list1)):\n            if k == 1:\n                list1.pop(i)\n                break\n            else:\n                k -= 1\n        return list1"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    \"\"\"\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    \"\"\"\n    # initialize the maximum value to be less than any value in the matrix\n    max_val = float('-inf')\n    # loop through each row in the matrix\n    for row in test_list:\n        # get then'th column value\n        col_val = row[N-1]\n        # compare it to the current maximum value and update it if necessary\n        max_val = max(max_val, col_val)\n    # return the maximum value\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # get the number of rows in the matrix\n    m = len(test_list)\n    \n    # check if the value of N is within the range of rows in the matrix\n    if N > m:\n        return \"Error: N is greater than the number of rows in the matrix.\"\n    \n    # initialize a variable to store the maximum value of then'th column\n    max_val = float('-inf')\n    \n    # iterate through each row of the matrix\n    for i in range(m):\n        # get the value of then'th column\n        nth_col = test_list[i][N-1]\n        \n        # check if the nth column value is greater than the current maximum value\n        if nth_col > max_val:\n            max_val = nth_col\n    \n    # return the maximum value of then'th column\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = float('-inf')\n    for row in test_list:\n        if row[N-1] > max_val:\n            max_val = row[N-1]\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n\n    # Get the length of the first row of the matrix\n    num_rows = len(test_list)\n\n    # Check if the matrix is empty\n    if num_rows == 0:\n        return None\n\n    # Get the length of the first column of the matrix\n    num_cols = len(test_list[0])\n\n    # Check if then'th column exists\n    if N >= num_cols:\n        return None\n\n    # Initialize a variable to store the max value\n    max_val = test_list[0][N-1]\n\n    # Loop through each row of the matrix and compare the value of then'th column with the current max value\n    for i in range(1, num_rows):\n        if test_list[i][N-1] > max_val:\n            max_val = test_list[i][N-1]\n\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Get the length of the first row of the matrix\n    row_len = len(test_list[0])\n    # Initialize a list to store the maximum values\n    max_list = []\n    # Loop through each row of the matrix\n    for i in range(row_len):\n        # Initialize a variable to store the maximum value for the current row\n        max_val = 0\n        # Loop through each element in the current row\n        for j in range(row_len):\n            # If the jth element is then'th column, compare it to the current max value and update the max value if necessary\n            if j == N-1:\n                max_val = max(max_val, test_list[i][j])\n        # Append the maximum value to the max_list\n        max_list.append(max_val)\n    # Return the max_list\n    return max_list"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_list = []\n    for i in range(len(test_list)):\n        max_val = max(test_list[i][N-1])\n        max_list.append(max_val)\n    return max_list"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    \"\"\"\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    \"\"\"\n    # Convert the matrix to a 2D array for easier manipulation\n    matrix = [row for sublist in test_list for row in sublist]\n\n    # Find then'th column and return its maximum value\n    return max(matrix[i][N-1] for i in range(len(matrix)))"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    \"\"\"\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    \"\"\"\n    max_val = 0\n    for row in test_list:\n        if row[N] > max_val:\n            max_val = row[N]\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Convert the list of lists to a matrix\n    matrix = []\n    for row in test_list:\n        matrix.append(row)\n\n    # Get the number of rows and columns in the matrix\n    num_rows = len(matrix)\n    num_cols = len(matrix[0])\n\n    # Calculate the max value of then'th column for each row in the matrix\n    max_vals = []\n    for i in range(num_rows):\n        col = []\n        for j in range(num_cols):\n            col.append(matrix[i][j])\n        col = sorted(col)\n        max_vals.append(col[N-1])\n\n    # Return the max value of then'th column for each row in the matrix\n    return max_vals"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    return max(test_list[i][N-1] for i in range(len(test_list)))"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_lst = []\n    for sublist in lst:\n        merged_lst.append([sublist[0], sublist[1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def merge(lst):\n    result = []\n    for i in range(len(lst)):\n        if i == 0 or lst[i][0] > lst[i-1][0]:\n            result.append(lst[i][:2])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    # Create an empty list to hold the merged lists\n    merged_lst = []\n\n    # Loop through each sublist in the input list\n    for sublist in lst:\n        # Append the first element of the sublist to the first list of the merged list\n        merged_lst.append([sublist[0], sublist[1]])\n\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def merge(lst):\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for i in range(len(lst)):\n        result.append([lst[i][0], lst[i][1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    # Initialize empty list to store merged lists\n    merged_lists = []\n    # Loop through each sublist of lst\n    for sublist in lst:\n        # Append the first element of sublist to first list and second element to second list\n        merged_lists.append([sublist[0], sublist[1]])\n    # Return the merged lists\n    return merged_lists"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for i in range(len(lst)):\n        result.append([lst[i][0], lst[i][1]])\n    return result"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for tup in test_list:\n        cum_sum += tup[1]\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    if not test_list:\n        return 0\n    cumulative_sum = 0\n    for num in test_list:\n        cumulative_sum += num\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total = 0\n    for i in test_list:\n        total += i\n    return total"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Initialize a variable to store the cumulative sum\n    cumulative_sum = 0\n    \n    # Loop through each tuple in the list\n    for tup in test_list:\n        # Loop through each element in the tuple\n        for elem in tup:\n            # Add the element to the cumulative sum\n            cumulative_sum += elem\n    \n    # Return the cumulative sum\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Initialize a variable to store the cumulative sum\n    cum_sum = 0\n    # Loop through each element in the list\n    for item in test_list:\n        # Add the value to the cumulative sum\n        cum_sum += item\n    # Return the cumulative sum\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    \"\"\"\n    # Initialize an empty list to store the cumulative sum\n    cum_sum = []\n\n    # Loop through each tuple in the test_list\n    for tup in test_list:\n        # Loop through each value in the tuple\n        for val in tup:\n            # Append the current value to the cumulative sum list\n            cum_sum.append(val)\n\n    # Return the cumulative sum list\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for i in range(len(test_list)):\n        cum_sum += test_list[i][0]\n        print(f\"Index: {i}, Cumulative Sum: {cum_sum}\")\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    if not isinstance(test_list, list):\n        raise ValueError(\"Input must be a list of tuples\")\n    cum_sum = 0\n    for i in range(len(test_list)):\n        cum_sum += test_list[i][1]\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Initialize the cumulative sum variable to 0\n    cumulative_sum = 0\n    \n    # Loop through each tuple in the list\n    for i in range(len(test_list)):\n        # Extract the value of the current tuple\n        value = test_list[i][0]\n        \n        # Add the value to the cumulative sum\n        cumulative_sum += value\n    \n    # Return the cumulative sum\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total_sum = 0\n    for i, (num1, num2) in enumerate(test_list):\n        total_sum += num1 + num2\n        print(f\"Cummulative sum for the values {num1} and {num2} is: {total_sum}\")"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    \"\"\"\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    \"\"\"\n    avg_list = []\n    for num_tuple in nums:\n        avg = sum(num_tuple) / len(num_tuple)\n        avg_list.append(avg)\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for i in range(len(nums)):\n        if isinstance(nums[i], tuple):\n            total = sum(nums[i])\n            avg = total / len(nums[i])\n            avg_list.append(avg)\n        else:\n            avg_list.append(nums[i])\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # Initialize an empty list to store the average values for each tuple\n    averages = []\n    \n    # Loop through each tuple in the input tuple of tuples\n    for i in nums:\n        # Initialize a variable to store the sum of all values in the current tuple\n        total = 0\n        \n        # Loop through each value in the current tuple\n        for j in i:\n            # Add the value to the total\n            total += j\n        \n        # Calculate the average value for the current tuple\n        average = total / len(i)\n        \n        # Append the average value to the averages list\n        averages.append(average)\n    \n    # Return the averages list\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    total = 0\n    count = 0\n    for tup in nums:\n        for num in tup:\n            total += num\n            count += 1\n    avg_list = []\n    for i in range(count):\n        avg_list.append(total/count)\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for num in nums:\n        # Calculate the average value for the tuple\n        avg = sum(num)/len(num)\n        # Append the average value to the result list\n        result.append(avg)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for tup in nums:\n        avg = sum(tup) / len(tup)\n        avg_list.append(avg)\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for tup in nums:\n        total = 0\n        for num in tup:\n            total += num\n        result.append(total/len(tup))\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n\n    avg_list = []\n    for tup in nums:\n        avg = sum(tup)/len(tup)\n        avg_list.append(avg)\n\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # Initialize an empty list to store the averages\n    averages = []\n\n    # Loop over all the tuples in the input tuple\n    for tup in nums:\n        # Calculate the average of all the elements in the tuple\n        avg = sum(tup) / len(tup)\n        # Add the average to the list of averages\n        averages.append(avg)\n\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # initialize an empty list to store the averages for each tuple\n    averages = []\n\n    # loop through each tuple in the input tuple of tuples\n    for tup in nums:\n        # loop through each value in the tuple\n        for val in tup:\n            # add the value to the running total\n            total += val\n        # divide the running total by the length of the tuple to get the average\n        average = total / len(tup)\n        # add the average to the averages list\n        averages.append(average)\n        # reset the running total for the next tuple\n        total = 0\n\n    # return the averages list\n    return averages"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # compare the length of the two tuples\n    if len(test_tup1)!= len(test_tup2):\n        return \"Error: Tuples must have the same length.\"\n    else:\n        # perform the element wise modulo\n        result_tup = tuple(x % y for x, y in zip(test_tup1, test_tup2))\n        return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # Check if the lengths of the tuples are equal\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples must have the same length.\")\n        return\n    \n    # Loop through the tuples and perform element-wise modulo\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] % test_tup2[i])\n        \n    # Return the resultant tuple\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # checking if the input tuples are of the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The input tuples are not of the same length!\")\n        return None\n\n    # iterating through the tuples and performing element-wise modulo\n    modulo_tup = ()\n    for i in range(len(test_tup1)):\n        modulo_tup += (test_tup1[i] % test_tup2[i],)\n\n    return modulo_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] % test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    \"\"\"\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    \"\"\"\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must have the same length.\")\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length\")\n\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n\n    # Initialize variables\n    i = 0\n    j = 0\n    count = 0\n\n    # Check if the point (d, 0) is reachable from origin\n    while i < steps and j >= -d:\n        i += 1\n        j -= 1\n        count += 1\n\n    # Return the count of jumps required to reach (d, 0) from origin\n    return count"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d):\n    \"\"\"\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    \"\"\"\n    # Calculate the maximum number of jumps required\n    max_jumps = (d * d) // steps\n    # Initialize the number of jumps\n    count = 1\n    # Initialize the current position\n    current_position = 0\n    \n    # Loop through the maximum number of jumps\n    while current_position <= max_jumps:\n        # Update the current position and count of jumps\n        current_position += steps\n        count += 1\n    \n    return count"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    \n    # Initialize variables to store the count of jumps and the current position\n    count = 0\n    x = 0\n    \n    # Loop through the steps and check if we can reach the point (d, 0)\n    for i in range(steps):\n        if x >= d:\n            # If we can reach the point, increment the count and move to the left by d\n            count += 1\n            x -= d\n        else:\n            # If we can't reach the point, move to the right by 1\n            x += 1\n    \n    # Return the count of jumps\n    return count"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 3,
        "answer": ""
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "Once we have filled the entire matrix `dp`, we can return the minimum number of jumps required to reach the `(d, 0)` point from the origin. This is the answer to the problem."
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    min_jumps = 0\n    current_position = 0\n    \n    while current_position < steps:\n        steps_left = steps - current_position\n        \n        # If we have reached (d, 0) point, then we can't reach it, so return -1\n        if current_position == steps - 1:\n            return -1\n        \n        # If we have reached (0, d) point, then we can jump one more step to reach it\n        elif current_position == 0:\n            current_position += 1\n            min_jumps += 1\n            \n        # If we are already at (0, 0) point, then we don't need to jump anything\n        elif current_position == 1:\n            current_position += 1\n            \n        # If we have reached (0, d) point and can't reach it, then we can't reach it, so return -1\n        elif current_position == steps - 2 and current_position!= 0:\n            return -1\n            \n        # If we have reached (d, 0) point and can't reach it, then we can't reach it, so return -1\n        elif current_position == steps - 2 and current_position == 0:\n            return -1\n            \n        # If we can't reach (0, 0) point and we can reach (0, d) point, then we need to jump one more step to reach (0, 0) point\n        elif current_position!= 0 and current_position == 1:\n            current_position += 1\n            min_jumps += 1\n            \n        # If we can't reach (0, 0) point and we can reach (d, 0) point, then we need to jump one more step to reach (0, 0) point\n        elif current_position!= 0 and current_position == steps - 2:\n            current_position += 1\n            min_jumps += 1\n            \n        # If we have reached (d, 0) point and can reach (0, 0) point, then we need to jump one more step to reach it\n        elif current_position == steps - 2 and current_position!= 0:\n            current_position += 1\n            min_jumps += 1\n            \n        # If we can reach (0, d) point and we can reach (0, 0) point, then we need to jump one more step to reach it\n        elif current_position!= 0 and current_position == steps - 1:\n            current_position += 1\n            min_jumps += 1\n            \n        # If we can reach (d, 0) point and we can reach (0, 0) point, then we need to jump one more step to reach it\n        elif current_position == steps - 1 and current_position!= 0:\n            current_position += 1\n            min_jumps += 1\n            \n        # If we can reach (0, 0) point and we can reach (d, 0) point, then we need to jump one more step to reach it\n        elif current_position == 1 and current_position!= steps - 2:\n            current_position += 1\n            min_jumps += 1\n            \n        # If we can reach (d, 0) point and we can reach (d, 0) point, then we need to jump one more step to reach it\n        elif current_position == steps - 2 and current_position!= steps - 1:\n            current_position += 1\n            min_jumps += 1\n            \n        # If we can reach (d, 0) point and we can reach (d, 0) point, then we need to jump one more step to reach it\n        elif current_position == steps - 1 and current_position!= steps - 1:\n            current_position += 1\n            min_jumps += 1\n            \n        # If we can reach (0, d) point and we can reach (d, 0) point, then we need to jump one more step to reach it\n        elif current_position == 1 and current_position!= steps - 1:\n            current_position += 1\n            min_jumps += 1\n            \n        # If we can reach (0, 0) point and we can reach (0, d) point, then we need to jump one more step to reach it\n        elif current_position == steps - 1 and current_position!= steps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d): \n    \"\"\"\n    This function takes the number of steps required to reach (d, 0) from origin and the value of d as input and returns the minimum number of jumps required.\n    \"\"\"\n    # Initialize variables\n    jumps = 0\n    i = 0\n    count = 0\n    \n    # Iterate through the steps\n    while i < steps:\n        # Move in the positive x-axis direction\n        if i < d:\n            i += 1\n        else:\n            # Move in the negative y-axis direction\n            i += 1\n            jumps += 1\n        count += 1\n        \n        # Check if we have reached the desired point\n        if (i, 0) == (d, 0):\n            break\n    \n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d):\n    # create a 2D array to store the number of jumps required to reach each point in a 2d plane\n    jumps = [[float('inf')] * (steps+1) for _ in range(steps+1)]\n\n    # initialize the jumps at origin as 0\n    jumps[0][0] = 0\n\n    # fill the remaining values in the 2D array\n    for i in range(1, steps+1):\n        for j in range(1, steps+1):\n            # if the distance from the origin to the current point is less than the given distance,\n            # then we can reach it from the origin in one step\n            if abs(j-d) <= steps:\n                # we can reach the current point from the origin in one step\n                jumps[i][j] = 1\n                # if the distance from the origin to the current point is less than the minimum distance\n                # we have seen so far, then we can reach the current point from the origin in 1 step or more\n                if abs(i-d) < abs(jumps[i-1][j-d]):\n                    jumps[i][j] = 1 + jumps[i-1][j-d]\n\n    # return the minimum number of jumps required to reach the point (d, 0) from origin in a 2d plane\n    return min(jumps[i][steps])"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d):\n    # Initialize the variables\n    i = 0\n    j = 0\n    jumps = 0\n\n    # Loop through the steps\n    while i < steps:\n        # Check if the point (j, 0) is reachable from (i, 0)\n        if j == d:\n            return jumps\n        # Move downward by one step\n        j += 1\n        # Increment the number of jumps\n        jumps += 1\n        # Move rightward by one step\n        i += 1\n\n    # If we reach this point, there's no reachable point of form (d, 0) from origin\n    return -1"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d):\n    # Initialize variables\n    count = 0\n    current_pos = 0\n\n    # Iterate over the number of steps\n    for i in range(steps):\n        # Move to the next position\n        current_pos += d\n\n        # Check if the current position is at (d, 0)\n        if current_pos == d:\n            # Increment the count\n            count += 1\n\n            # Reset the current position\n            current_pos = 0\n\n        # If we have reached the last position, break\n        if current_pos == 0:\n            break\n\n    # Return the count of jumps\n    return count"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Lists must have the same length\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Both lists should have the same length.\")\n        return\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]/nums2[i])\n    \n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two lists must have the same length.\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]/nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # Check if the length of the two lists is equal\n    if len(nums1)!= len(nums2):\n        print(\"Error: Lists should have the same length.\")\n        return\n    \n    # Loop through the lists and divide each element by the corresponding element in the other list\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]/nums2[i])\n        \n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # Check if both lists have the same length\n    if len(nums1)!= len(nums2):\n        print(\"Error: Lists must have the same length\")\n        return\n    \n    # Create an empty list to store the result\n    result = []\n    \n    # Loop through each element of the two lists\n    for i in range(len(nums1)):\n        # Perform element-wise division and append the result to the result list\n        result.append(nums1[i] / nums2[i])\n    \n    # Return the result list\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"The lists should have the same length\")\n        return\n    \n    for i in range(len(nums1)):\n        nums1[i] = nums1[i] / nums2[i]\n    \n    print(\"The divided list is:\", nums1)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # initialize an empty string to store the numbers\n    num_str = ''\n    # loop through each character in the input string\n    for char in test_str:\n        # check if the character is a digit\n        if char.isdigit():\n            # add the digit to the num_str\n            num_str += char\n        else:\n            # if the character is not a digit, add it to the beginning of the output string\n            test_str = char + test_str\n    # return the modified string\n    return test_str + num_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n    return ''.join(num_list) + test_str[::-1]"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Initialize empty string to store numbers\n    num_str = ''\n    # Loop through each character in the input string\n    for char in test_str:\n        # If the character is a number, append it to the num_str variable\n        if char.isdigit():\n            num_str += char\n        # Otherwise, append it to the original string\n        else:\n            test_str += char\n    # Return the modified string with all numbers moved to the end\n    return num_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # initialize an empty list to hold the numbers\n    nums = []\n    # loop through each character in the string\n    for char in test_str:\n        # check if the character is a number\n        if char.isdigit():\n            # add the number to the list\n            nums.append(char)\n        # if the character is not a number, add it back to the beginning of the string\n        else:\n            test_str = char + test_str\n    # concatenate the numbers to the beginning of the string\n    for num in nums[::-1]:\n        test_str = num + test_str\n    return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Initialize an empty string\n    result = ''\n    # Loop through each character in the input string\n    for char in test_str:\n        # If the character is a number, add it to the result string\n        if char.isdigit():\n            result += char\n        # If the character is not a number, just add it to the result string\n        else:\n            result += char\n    # Return the result string\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # initialize variables\n    num_found = False\n    num_list = []\n    result = \"\"\n    \n    # iterate through each character in the string\n    for char in test_str:\n        # if the character is a number, add it to the num_list\n        if char.isdigit():\n            num_list.append(char)\n        else:\n            # if a non-number is encountered, move all numbers to the end of the string\n            if num_found:\n                result += \"\".join(num_list)\n                num_list = []\n                num_found = False\n            result += char\n    \n    # if any numbers remain in the num_list, move them to the end of the string\n    if num_found:\n        result += \"\".join(num_list)\n    \n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    # Find all numbers in the string\n    nums = []\n    for char in test_str:\n        if char.isdigit():\n            nums.append(char)\n    \n    # Sort the numbers in reverse order\n    nums.sort(reverse=True)\n    \n    # Add the sorted numbers to the end of the string\n    new_str = ''.join(nums) + test_str\n    \n    return new_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    nums = \"\"\n    for char in test_str:\n        if char.isdigit():\n            nums += char\n    nums = nums.replace(\"0\", \"\").replace(\"1\", \"\").replace(\"2\", \"\").replace(\"3\", \"\").replace(\"4\", \"\").replace(\"5\", \"\").replace(\"6\", \"\").replace(\"7\", \"\").replace(\"8\", \"\").replace(\"9\", \"\")\n    result = test_str + nums\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    char_list = []\n\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n        else:\n            char_list.append(char)\n\n    for i in range(len(num_list)):\n        test_str = test_str.replace(num_list[i], '')\n\n    for char in char_list:\n        test_str += char\n\n    return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # initialize variables to store the original string and the new string\n    original_str = test_str\n    new_str = ''\n\n    # loop through each character in the original string\n    for char in original_str:\n        # check if the character is a number\n        if char.isdigit():\n            # add the character to the new string at the end\n            new_str += char\n        else:\n            # if the character is not a number, add it to the new string at the beginning\n            new_str = char + new_str\n\n    # return the new string with all numbers moved to the end\n    return new_str"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Initialize variables\n    n = len(a)\n    dp = [1]*n\n    max_length = 1\n\n    # Iterate through the array\n    for i in range(1, n):\n        # Check if the current number can be divided by the previous number\n        if a[i] % a[i-1] == 0:\n            # If it can, update the length of the largest subset\n            dp[i] = dp[i-1] + 1\n            # Update the maximum length if the current length is greater than the previous maximum\n            if max_length < dp[i]:\n                max_length = dp[i]\n\n    # Return the maximum length of the largest subset\n    return max_length"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a = sorted(a)\n    n = len(a)\n    size = 1\n    for i in range(1, n):\n        if a[i] % a[i - 1] == 0:\n            size += 1\n        else:\n            break\n    return size\n"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n\n    # Sort the input list\n    a.sort()\n\n    # Initialize variables for the maximum size of the subset and the current size of the subset\n    max_size = 0\n    curr_size = 0\n\n    # Iterate through the input list\n    for num in a:\n\n        # Check if the current number is divisible by the previous number\n        if num % a[curr_size-1] == 0:\n            curr_size += 1\n        else:\n            # If the current number is not divisible by the previous number, update the maximum size of the subset\n            max_size = max(max_size, curr_size)\n            # Reset the current size to 1 for the next number\n            curr_size = 1\n\n    # Update the maximum size of the subset\n    max_size = max(max_size, curr_size)\n\n    return max_size\n"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    n = len(a)\n    max_size = 1\n    current_size = 1\n    for i in range(1, n):\n        if a[i] % a[i - 1] == 0:\n            current_size += 1\n        else:\n            max_size = max(max_size, current_size)\n            current_size = 1\n    max_size = max(max_size, current_size)\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # sort the input list in non-descending order\n    a = sorted(a)\n    # initialize variables to keep track of the largest subset found so far and the indices of the largest subset found so far\n    largest_subset = []\n    start_indices = []\n    # loop through the sorted input list\n    for i in range(len(a)):\n        # check if the sum of the previous largest subset and the current element is divisible by 2\n        if sum(largest_subset) + a[i] % 2 == 0:\n            # if it is, add the current element to the largest subset found so far and the index of the current element to the list of start indices\n            largest_subset.append(a[i])\n            start_indices.append(i)\n        # if the sum of the previous largest subset and the current element is not divisible by 2, reset the largest subset and start indices\n        else:\n            # set the largest subset to the current element\n            largest_subset = [a[i]]\n            # set the start indices to [i]\n            start_indices = [i]\n    # calculate the size of the largest subset found so far\n    size = len(largest_subset)\n    # calculate the indices of the start indices of the largest subset found so far\n    start_indices = [start_indices[0]]\n    for i in range(1, len(start_indices)):\n        start_indices[i] = start_indices[i] - start_indices[i-1]\n    return size, start_indices"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a = sorted(a)\n    max_size = 0\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            if (a[i] % a[j] == 0) and (a[j] % a[i] == 0):\n                size = 2\n                while (j+1 < len(a)) and (a[j] % a[j+1] == 0):\n                    size += 1\n                    j += 1\n                max_size = max(max_size, size)\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    dp = [1] * n\n    \n    for i in range(1, n):\n        if a[i] % a[i-1] == 0:\n            dp[i] = dp[i-1] + 1\n            \n    max_size = max(dp)\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Sort the list of numbers in ascending order\n    a = sorted(a)\n\n    # Initialize the size of the largest subset\n    size = 1\n\n    # Initialize the maximum size of the largest subset\n    max_size = 1\n\n    # Iterate over all pairs of numbers in the list\n    for i in range(len(a)):\n        # Initialize the current subset size\n        current_size = 1\n\n        # Iterate over all pairs of numbers to the right of the current number\n        for j in range(i+1, len(a)):\n            # Check if the current number is divisible by the pair of numbers to its right\n            if a[i] % a[j] == 0:\n                # If it is, increment the current subset size\n                current_size += 1\n\n        # Update the size of the largest subset if the current subset size is greater\n        if current_size > max_size:\n            max_size = current_size\n\n        # Update the size of the largest subset if the current subset size is greater than the previous one\n        if current_size > size:\n            size = current_size\n\n    # Return the size of the largest subset\n    return size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    n = len(a)\n    # Initialize an array to keep track of the size of the largest subsets\n    dp = [1] * n\n    # Initialize the maximum size to be the size of the first element\n    max_size = 1\n    # Traverse the list of numbers\n    for i in range(1, n):\n        # For each number, iterate through all the numbers before it and find the maximum size that can be obtained by including it\n        for j in range(i):\n            if a[j] % a[i] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n        # Update the maximum size\n        max_size = max(max_size, dp[i])\n    # Return the maximum size\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Sort the input list\n    a.sort()\n\n    # Initialize variables to store the maximum and current subsets\n    max_subset = a[0]\n    current_subset = [a[0]]\n\n    # Iterate through the list, adding numbers to the current subset as needed\n    for num in a[1:]:\n        if num % current_subset[-1] == 0:\n            current_subset.append(num)\n        else:\n            # If the current subset is not divisible by the number being added,\n            # add the number to the maximum subset and reset the current subset\n            max_subset = max(max_subset, current_subset[-1])\n            current_subset = [num]\n\n    # Add the last number to the maximum subset if it is not already there\n    if current_subset[-1]!= max_subset:\n        max_subset = max(max_subset, current_subset[-1])\n\n    return len(max_subset)"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Concatenate the two lists to form a single list\n    merged_list = arr1 + arr2\n    \n    # Sort the merged list\n    sorted_list = sorted(merged_list)\n    \n    # Determine the median index\n    median_index = n // 2\n    \n    # Return the median element\n    return sorted_list[median_index]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    # Concatenate the two arrays\n    arr = arr1 + arr2\n    \n    # Sort the concatenated array\n    arr.sort()\n    \n    # Find the median index\n    mid = n // 2\n    \n    # Check if the length of the array is odd\n    if n % 2!= 0:\n        median = arr[mid]\n    else:\n        # If the length is even, find the two middle elements\n        median = (arr[mid - 1] + arr[mid]) / 2\n        \n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n\n    # Concatenate the two sorted lists\n    total_list = arr1 + arr2\n\n    # Sort the concatenated list\n    total_list.sort()\n\n    # Find the median\n    median = total_list[n-1]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n\n    # Concatenate the two sorted lists into a single list\n    merged_list = arr1 + arr2\n\n    # Sort the merged list in ascending order\n    merged_list.sort()\n\n    # Get the mid index of the list\n    mid = n // 2\n\n    # If the number of elements in the list is odd, return the middle element\n    if n % 2 == 1:\n        return merged_list[mid]\n\n    # If the number of elements in the list is even, return the average of the two middle elements\n    else:\n        return (merged_list[mid - 1] + merged_list[mid]) / 2"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n\n    Parameters:\n    arr1 (list): a list of integers\n    arr2 (list): a list of integers\n    n (int): the size of the two lists\n\n    Returns:\n    float: the median of the two sorted lists\n    \"\"\"\n    # Sort the two lists\n    arr1.sort()\n    arr2.sort()\n    \n    # Calculate the median\n    if len(arr1) > n:\n        return (arr1[n-1] + arr1[n])/2\n    elif len(arr1) < n:\n        return (arr2[n-1] + arr2[n])/2\n    else:\n        return (arr1[n-1] + arr2[n-1])/2"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge the two sorted lists\n    merged_arr = arr1 + arr2\n    \n    # Sort the merged list\n    sorted_arr = sorted(merged_arr)\n    \n    # Find the length of the sorted list\n    len_arr = len(sorted_arr)\n    \n    # Find the median index\n    if n % 2 == 0:\n        median_index = n // 2\n    else:\n        median_index = (n - 1) // 2\n    \n    # Return the median value\n    return sorted_arr[median_index]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # merge the two sorted lists into a single list\n    merged_list = arr1 + arr2\n\n    # sort the merged list in non-decreasing order\n    sorted_list = sorted(merged_list)\n\n    # calculate the median\n    if n % 2 == 0:\n        median = (sorted_list[n//2 - 1] + sorted_list[n//2]) / 2\n    else:\n        median = sorted_list[n//2]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n\n    # Concatenate the two arrays\n    arr = arr1 + arr2\n    \n    # Sort the concatenated array\n    arr.sort()\n    \n    # Find the median index\n    median_index = n // 2\n    \n    # If n is odd, return the middle element\n    if n % 2 == 1:\n        return arr[median_index]\n    \n    # Otherwise, return the average of the two middle elements\n    return (arr[median_index - 1] + arr[median_index]) / 2"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    # Merge the two sorted arrays into a single sorted array\n    merged = sorted(arr1 + arr2)\n\n    # Find the median index\n    median_index = n // 2\n\n    # If the length of the array is odd, return the middle element\n    if n % 2 == 1:\n        return merged[median_index]\n\n    # If the length of the array is even, return the average of the two middle elements\n    else:\n        return (merged[median_index] + merged[median_index - 1]) / 2"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def partition(arr, low, high):\n    pivot = arr[high]\n    i = low - 1\n\n    for j in range(low, high):\n        if arr[j] <= pivot:\n            i += 1\n            arr[i], arr[j] = arr[j], arr[i]\n\n    arr[i + 1], arr[high] = arr[high], arr[i + 1]\n    return i + 1\n\n\ndef quick_select(arr, low, high, k):\n    if low == high:\n        return arr[low]\n\n    pivot_index = partition(arr, low, high)\n\n    if k == pivot_index:\n        return arr[k]\n    elif k < pivot_index:\n        return quick_select(arr, low, pivot_index - 1, k)\n    else:\n        return quick_select(arr, pivot_index + 1, high, k)\n\n\ndef get_median(arr1, arr2, n):\n    m = len(arr1)\n    # Merge the two sorted arrays\n    merged_arr = arr1 + arr2\n    # Find the median using QuickSelect\n    median = quick_select(merged_arr, 0, n - 1, n // 2)\n    return median"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] **= n"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for num in nums:\n        print(num**n)"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    Write a function to compute the n-th power of each number in a list.\n    \"\"\"\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [num**n for num in nums]"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    result = \"\"\n    for char in string:\n        if char.isupper():\n            result += char.upper()\n        else:\n            result += char.lower()\n    return result"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_upper(string):\n    \"\"\"\n    Write a python function to check if a given string is uppercase or not.\n    \"\"\"\n    if string.isupper():\n        return True\n    else:\n        return False"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Check if the list is empty\n    if not newList:\n        return []\n    # If the list has only one element, return the list as it is\n    elif len(newList) == 1:\n        return newList\n    else:\n        # Get the first and last element of the list\n        first = newList[0]\n        last = newList[-1]\n        # Remove the last element from the list and add it to the front\n        newList.pop()\n        newList.insert(0, last)\n        # Return the updated list\n        return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Swap the first and last element in the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # get the length of the list\n    length = len(newList)\n    # check if the list has at least two elements\n    if length < 2:\n        print(\"The list does not have at least two elements.\")\n        return None\n    \n    # interchange the first and last elements\n    newList[0], newList[length-1] = newList[length-1], newList[0]\n    \n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n\n    # Check if the list is empty\n    if not newList:\n        return []\n\n    # Get the length of the list\n    length = len(newList)\n\n    # Swap the first and last elements\n    newList[0], newList[length - 1] = newList[length - 1], newList[0]\n\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # checking if the list has at least two elements\n    if len(newList) < 2:\n        return \"The list must have at least two elements\"\n    \n    # swapping the first and last element\n    first_element = newList[0]\n    last_element = newList[-1]\n    newList[0] = last_element\n    newList[-1] = first_element\n    \n    # returning the modified list\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) >= 2:\n        newList[0], newList[-1] = newList[-1], newList[0]\n    else:\n        print(\"List must have at least two elements\")"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last element in a given list.\n    \"\"\"\n    # checking if the list has more than 2 elements\n    if len(newList) > 2:\n        # swapping the first and last elements in the list\n        first = newList[0]\n        last = newList[-1]\n        newList[0] = last\n        newList[-1] = first\n    else:\n        print(\"The list must have at least 3 elements to swap them.\")"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last element in a given list.\n    \"\"\"\n    if len(newList) < 2:\n        return newList\n    \n    first, last = newList[0], newList[-1]\n    newList[0], newList[-1] = last, first\n    \n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # storing the length of the list\n    length = len(newList)\n    # if the length of the list is odd, then there are only two elements to swap\n    if length % 2 == 1:\n        # swapping the first and last element\n        newList[0], newList[length-1] = newList[length-1], newList[0]\n        # returning the updated list\n        return newList\n    # if the length of the list is even, then there are more than two elements to swap\n    else:\n        # swapping the first and second element\n        newList[0], newList[1] = newList[1], newList[0]\n        # swapping the second and third element\n        newList[1], newList[2] = newList[2], newList[1]\n        # swapping the third and fourth element\n        newList[2], newList[3] = newList[3], newList[2]\n        # swapping the fourth and fifth element\n        newList[3], newList[4] = newList[4], newList[3]\n        # swapping the fifth and sixth element\n        newList[4], newList[5] = newList[5], newList[4]\n        # swapping the sixth and seventh element\n        newList[5], newList[6] = newList[6], newList[5]\n        # returning the updated list\n        return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Get the length of the list\n    length = len(newList)\n    \n    # Check if the length is less than 2\n    if length < 2:\n        print(\"The list must have at least 2 elements to swap.\")\n        return\n    \n    # Interchange the first and last element\n    newList[0], newList[length-1] = newList[length-1], newList[0]\n    \n    # Print the new list\n    print(\"New list:\", newList)"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    pi = 3.141592653589793\n    area = 0\n    \n    for i in range(1, 100):\n        area += 2 * (1/i) * r ** 2 * (1 - (1/i) ** 2)\n        \n    return area\n"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Calculate the semi-perimeter of the circle\n    semi_perimeter = 2*math.pi*r\n    \n    # Calculate the area of a triangle with the given semi-perimeter\n    area = math.sqrt(semi_perimeter*(semi_perimeter-math.sqrt(semi_perimeter)))\n    \n    # Calculate the area of the largest triangle that can be inscribed in the semicircle\n    largest_area = area\n    \n    return largest_area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    a = 1\n    b = 1.5\n    h = 2.0\n    \n    # using Heron's formula\n    s = (3*a*b*h) / (4*math.tan(math.pi/3))\n    \n    # calculating the area of the largest triangle that can be inscribed in a semicircle with given radius\n    area = math.pi * r ** 2 * (s ** 2)\n    \n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    # Formula to calculate the area of the largest triangle\n    # based on the given radius and semi-circle formula\n    area = (3 * r**2) / (4 * math.tan(math.pi / 3))\n\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    # Calculate the semi-perimeter of the circle\n    semi_perimeter = 2 * r\n\n    # Calculate the area of the largest triangle that can be inscribed in the semicircle\n    area = 2 * r * (1 - 1 / (2 * semi_perimeter))\n\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n\n    # Find the semi-circle area using the formula for the area of a circle\n    semi_circle_area = math.pi * r ** 2\n\n    # Calculate the area of each triangle\n    triangle_area1 = semi_circle_area / 2\n    triangle_area2 = semi_circle_area / 3\n    triangle_area3 = semi_circle_area / 4\n\n    # Find the largest triangle area\n    largest_triangle_area = max(triangle_area1, triangle_area2, triangle_area3)\n\n    # Return the largest triangle area\n    return largest_triangle_area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n\n    # Calculate the area of a triangle with side length r and perimeter 2r\n    area = 0.5 * r * r\n\n    # Calculate the area of a semicircle with radius r\n    semicircle_area = math.pi * r * r\n\n    # Compare the areas of the two triangles and return the larger one\n    if area > semicircle_area:\n        return area\n    else:\n        return semicircle_area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Calculate the semi-perimeter of the semicircle\n    s = 2 * math.pi * r\n    \n    # Calculate the area of the largest possible triangle that can be inscribed in the semicircle\n    area = (3 * r ** 2) / s\n    \n    # Return the calculated area\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def triangle_area(r):\n    \"\"\"\n    This function calculates the area of the largest triangle that can be inscribed in a semicircle with a given radius r.\n    \"\"\"\n    # Defining the formula for calculating the area of the largest triangle that can be inscribed in a semicircle.\n    area = (3*r**2)**0.5\n\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 0.5 * r**2\n    return area"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if array[i]!= i + start:\n            return i + start\n\n    return end + 1 + start"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if array[i] - i!= 0 and array[i] - i!= len(array) - i:\n            return i\n\n    return len(array)"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Find the smallest missing number in a sorted list of natural numbers.\n\n    :param array: the sorted list of natural numbers\n    :type array: list of int\n    :param start: the starting index of the array (default is 0)\n    :type start: int\n    :param end: the ending index of the array (default is the last index of the array)\n    :type end: int\n    :return: the smallest missing number\n    :rtype: int\n    \"\"\"\n\n    if not array:\n        raise ValueError(\"The array is empty\")\n\n    if not isinstance(array, list):\n        raise TypeError(\"The input should be a list\")\n\n    if not all(isinstance(x, int) for x in array):\n        raise TypeError(\"The elements of the array should be integers\")\n\n    if not start >= 0:\n        raise ValueError(\"The starting index should be non-negative\")\n\n    if end is None:\n        end = len(array) - 1\n\n    if end >= len(array):\n        raise ValueError(\"The ending index should be less than the length of the array\")\n\n    if start >= end:\n        raise ValueError(\"The starting index should be less than or equal to the ending index\")\n\n    missing_numbers = list(range(start, end + 1))\n    for num in array:\n        if num not in missing_numbers:\n            missing_numbers.append(num)\n            missing_numbers.remove(num - 1)\n            break\n    return missing_numbers[0]"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n    \n    for i in range(start, end+1):\n        if array[i] == i:\n            return i\n    \n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start,end+1):\n        if i!= array[i]:\n            return i\n\n    return end+1+start"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if i!= array[i]:\n            return i"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end+1):\n        if array[i]!= i:\n            return i"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n\n    # If end is not passed, set it as the maximum value in the array\n    if end is None:\n        end = max(array)\n\n    # Traverse the array from start to end and check for missing numbers\n    for i in range(start, end + 1):\n        if i not in array:\n            return i\n\n    # If no missing number is found, return end+1 as the smallest missing number\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if array[i]!= i:\n            return i\n\n    return end + 1\n"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    # If the array is empty or contains only one element, the first element is the missing number\n    if len(array) <= 1:\n        return 1\n    # If the array is sorted, start and end indices are the same\n    elif start == end:\n        return start + 1\n    # If the array is not sorted, start and end indices are the last and second-to-last elements of the array\n    elif array[start] > array[end]:\n        return array[end] + 1\n    else:\n        return array[start] + 1"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    \"\"\"\n    Write a function to replace all spaces in the given string with '%20'.\n    \"\"\"\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(lst): \n    # Create an empty list to store the even numbers \n    even_numbers = [] \n\n    # Loop through each number in the list \n    for num in lst: \n        # Check if the number is even \n        if num % 2 == 0: \n            # Append the even number to the even_numbers list \n            even_numbers.append(num) \n\n    # Return the list of even numbers \n    return even_numbers "
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list: \n        if num % 2 == 0: \n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(lst):\n    \"\"\"\n    Returns a list of even numbers from a given list of numbers.\n    \"\"\"\n    return [x for x in lst if x % 2 == 0]"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(lst):\n    even_lst = []\n    for num in lst:\n        if num % 2 == 0:\n            even_lst.append(num)\n    return even_lst"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    result = []\n    for num in list:\n        if num % 2 == 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(lst):\n    \"\"\"\n    This function takes a list of numbers as input and returns a new list of even numbers.\n    \"\"\"\n    even_lst = []\n    for num in lst:\n        if num % 2 == 0:\n            even_lst.append(num)\n    return even_lst"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for number in list:\n        if number % 2 == 0:\n            even_numbers.append(number)\n    return even_numbers"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    adj = []\n    for i in range(len(ele)):\n        for j in range(len(ele)):\n            if i!= j:\n                adj.append((ele[i], ele[j]))\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    This function takes a coordinate tuple as input and returns a list of all its adjacent coordinates.\n    If the input coordinate is a sub-coordinate of another coordinate tuple, the function is called recursively to \n    find all its adjacent coordinates as well.\n    '''\n    # initialize an empty list to store the adjacent coordinates\n    adj = []\n    \n    # check if the element is a sub-coordinate of another coordinate tuple\n    if len(ele) > 1:\n        for i in range(len(ele)):\n            for j in range(i+1, len(ele)):\n                # add the adjacent coordinate to the list\n                adj.append((ele[i], ele[j]))\n                \n                # if the adjacent coordinate is a sub-coordinate, call the function recursively\n                if sub and (len(sub) > 1) and (len(sub[i]) > 1) and (len(sub[j]) > 1):\n                    adj += adjac(sub[i], sub[:i] + sub[j:])\n                elif sub and (len(sub) > 1) and (len(sub[i]) > 1):\n                    adj += adjac(sub[i], sub[:i])\n                elif sub and (len(sub) > 1) and (len(sub[j]) > 1):\n                    adj += adjac(sub[j], sub[:j])\n    \n    # if the element is not a sub-coordinate, add it to the list as is\n    else:\n        adj.append(ele)\n    \n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj_coords = []\n\n    # Add top and bottom edges\n    adj_coords.append((x, y-1))\n    adj_coords.append((x, y+1))\n\n    # Add left and right edges\n    adj_coords.append((x-1, y))\n    adj_coords.append((x+1, y))\n\n    return adj_coords"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    result = []\n    if x > 0:\n        result.append((x-1,y))\n    if x < 23:\n        result.append((x+1,y))\n    if y > 0:\n        result.append((x,y-1))\n    if y < 23:\n        result.append((x,y+1))\n    if len(sub)!= 0:\n        for s in sub:\n            if s in result:\n                result.remove(s)\n    return result"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def adjac(ele, sub=[]): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj = [(x+1, y), (x-1, y), (x, y+1), (x, y-1)]\n    for sub in adj:\n        if sub not in sub:\n            sub.append(sub)\n            sub.sort()\n            yield sub\n"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj = []\n    for i in range(-1, 2):\n        for j in range(-1, 2):\n            if i == 0 and j == 0:\n                continue\n            new_x = x + i\n            new_y = y + j\n            adj.append((new_x, new_y))\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj = []\n\n    # North\n    if y > 0:\n        adj.append((x, y - 1))\n\n    # South\n    if y < 4:\n        adj.append((x, y + 1))\n\n    # West\n    if x > 0:\n        adj.append((x - 1, y))\n\n    # East\n    if x < 4:\n        adj.append((x + 1, y))\n\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def adjac(ele, sub=None):\n    \"\"\"\n    Extract all the adjacent coordinates of the given coordinate tuple.\n    \"\"\"\n    # Check if the input is a tuple of coordinates\n    if not isinstance(ele, tuple) or len(ele)!= 2:\n        raise ValueError(\"Input must be a tuple of coordinates\")\n\n    # Initialize the list to store the adjacent coordinates\n    adjacs = []\n\n    # Iterate over the four cardinal directions and add the adjacent coordinates to the list\n    for i in range(4):\n        # Calculate the new coordinates by adding the offset to the original coordinates\n        x = ele[0] + dx[i]\n        y = ele[1] + dy[i]\n        # Add the new coordinates to the list if they are within the boundaries of the grid\n        if 0 <= x < n and 0 <= y < n:\n            adjacs.append((x, y))\n\n    return adjacs"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    \n    # iterate over the adjacent cells\n    for dx, dy in ((0, 1), (1, 0), (0, -1), (-1, 0)):\n        nx, ny = x + dx, y + dy\n        \n        # check if the cell is within the grid and not already visited\n        if 0 <= nx < len(grid) and 0 <= ny < len(grid[0]) and (nx, ny) not in sub:\n            sub.append((nx, ny))\n    \n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    This function takes a coordinate tuple as input and returns all the adjacent coordinates of that tuple.\n    '''\n    adj_coord = []\n    for i in range(len(ele)):\n        for j in range(i+1, len(ele)):\n            adj_coord.append((ele[i], ele[j]))\n    adj_coord.extend(sub)\n    return adj_coord"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Define a function to replace whitespaces with underscores\n    def replace_spaces_underscore(text):\n        return text.replace(' ', '_')\n\n    # Define a function to replace underscores with whitespaces\n    def replace_underscore_spaces(text):\n        return text.replace('_','')\n\n    # Replace whitespaces with underscores and vice versa\n    return replace_spaces_underscore(replace_underscore_spaces(text))"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # replace all spaces with underscores\n    text = text.replace(\" \", \"_\")\n    # replace all underscores with spaces\n    text = text.replace(\"_\", \" \")\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Split the input string into words\n    words = text.split()\n\n    # Loop through each word in the list\n    for i in range(len(words)):\n        # Check if the word contains a space\n        if'' in words[i]:\n            # Replace the space with an underscore\n            words[i] = words[i].replace(' ', '_')\n        # Check if the word contains an underscore\n        elif '_' in words[i]:\n            # Replace the underscore with a space\n            words[i] = words[i].replace('_','')\n\n    # Join the words back together into a string\n    result =''.join(words)\n\n    # Return the modified string\n    return result"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    \"\"\"\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    \"\"\"\n    # replace whitespaces with underscores\n    text = text.replace(\" \", \"_\")\n\n    # replace underscores with spaces\n    text = text.replace(\"_\", \" \")\n\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Initialize an empty string to store the result\n    result = \"\"\n    # Loop through each character in the input string\n    for char in text:\n        # If the character is a space, replace it with an underscore\n        if char == \" \":\n            result += \"_\"\n        # If the character is an underscore, replace it with a space\n        elif char == \"_\":\n            result += \" \"\n        # If the character is any other character, append it to the result string\n        else:\n            result += char\n    # Return the final result string\n    return result"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\")"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace(\" \", \"_\")\n    text = text.replace(\"_\", \" \")\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = \"\"\n    for char in text:\n        if char.isspace():\n            new_text += \"_\"\n        else:\n            new_text += char\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Split the input string into words\n    words = text.split()\n    # Iterate over each word in the list\n    for i in range(len(words)):\n        # Replace spaces with underscores\n        if'' in words[i]:\n            words[i] = words[i].replace(' ', '_')\n        # Replace underscores with spaces\n        else:\n            words[i] = words[i].replace('_','')\n    # Join the words back into a string and return it\n    return''.join(words)"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    zero_count = 0\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_count += 1\n        else:\n            break\n    for i in range(len(num_list)-1, -1, -1):\n        if num_list[i] == 0:\n            num_list[i], num_list[i-zero_count] = num_list[i-zero_count], num_list[i]\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    zero_index = -1\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_index = i\n            break\n    if zero_index!= -1:\n        num_list = num_list[:zero_index] + num_list[zero_index+1:]\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Move all zeroes to the end of the given list.\n    \"\"\"\n    i = 0  # index for non-zero elements\n    while i < len(num_list):\n        if num_list[i]!= 0:\n            # shift non-zero elements to the right\n            j = i\n            while j < len(num_list) - 1:\n                num_list[j], num_list[j+1] = num_list[j+1], num_list[j]\n                j += 1\n            # exit the loop when we find a non-zero element\n            break\n        i += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # create a new list to store non-zero elements\n    non_zero_list = []\n    # loop through each element in the input list\n    for num in num_list:\n        # if the element is not zero, append it to the new list\n        if num!= 0:\n            non_zero_list.append(num)\n    # append all zeroes to the end of the non-zero list\n    non_zero_list.extend([0]*num_list.count(0))\n    # return the modified non-zero list\n    return non_zero_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    i = 0\n    while i < len(num_list):\n        if num_list[i]!= 0:\n            break\n        i += 1\n    while i < len(num_list):\n        num_list[i], num_list[len(num_list)-1] = num_list[len(num_list)-1], num_list[i]\n        i += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    '''\n    Move all zeroes to the end of the given list.\n    '''\n    i = 0\n    while i < len(num_list):\n        if num_list[i] == 0:\n            num_list.pop(i)\n            num_list.append(0)\n            i -= 1\n        else:\n            i += 1"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    This function takes a list of integers as input and moves all zeroes to the end of the list.\n    \"\"\"\n    zero_index = []\n    non_zero_index = []\n\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_index.append(i)\n        else:\n            non_zero_index.append(i)\n\n    for i in range(len(zero_index)):\n        num_list[i], num_list[len(zero_index) + i] = num_list[len(zero_index) + i], num_list[i]\n\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n\n    # create an empty list to store non-zero values\n    non_zero_list = []\n\n    # iterate over each value in the input list\n    for num in num_list:\n        # if the value is not zero, add it to the non-zero list\n        if num!= 0:\n            non_zero_list.append(num)\n\n    # append all zeroes to the non-zero list\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            non_zero_list.append(0)\n\n    # overwrite the original list with the non-zero list\n    num_list = non_zero_list\n\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    \n    i = 0\n    while i < len(num_list) - 1:\n        if num_list[i] == 0:\n            num_list[i], num_list[len(num_list) - 1] = num_list[len(num_list) - 1], num_list[i]\n            len(num_list) -= 1\n        else:\n            i += 1\n    \n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    count = 0\n    for i in range(len(num_list)):\n        if num_list[i]!= 0:\n            num_list[count], num_list[i] = num_list[i], num_list[count]\n            count += 1\n    return num_list"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    This function takes in a list of integers arr and its length n, and returns the sum of xor of all pairs of numbers in the list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor = arr[i] ^ arr[j]\n            sum += xor\n    return sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # initialize the sum to zero\n    xor_sum = 0\n    \n    # loop through the list of numbers\n    for i in range(n):\n        # loop through the remaining numbers to find the xor of pairs\n        for j in range(i+1,n):\n            xor_sum += arr[i] ^ arr[j]\n    \n    # return the xor sum\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # XOR of all elements of the list\n    xor_sum = 0\n    for i in range(n):\n        xor_sum ^= arr[i]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr, n):\n    \"\"\"\n    This function takes a list of integers and its length as input and returns the sum of xor of all pairs of integers in the list.\n    \"\"\"\n    xor_sum = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    This function takes a list of n integers as input and returns the sum of xor of all pairs of numbers in the list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            sum += arr[i] ^ arr[j]\n    return sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    if n == 1:\n        return sum(arr)\n\n    # Calculate xor of all pairs of numbers except last element\n    xor_sum = 0\n    for i in range(n-1):\n        xor_sum += arr[i] ^ arr[i+1]\n\n    # Calculate xor of the last two elements\n    xor_sum += arr[n-1] ^ arr[n-2]\n\n    # Calculate sum of all elements\n    sum_arr = sum(arr)\n\n    # Return the sum of xor of all pairs of numbers\n    return xor_sum + sum_arr - 2 * xor_sum"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    \"\"\"\n    Sort the given list using heap sort algorithm.\n    \"\"\"\n    # Convert the list into a heap\n    heap = hq.heapify(iterable)\n    # Build the sorted list from the heap\n    result = []\n    while heap:\n        result.append(hq.heappop(heap))\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    This function sorts the given list using the heap sort algorithm.\n    '''\n    n = len(iterable)\n    # Build a max heap from the input iterable\n    hq.heapify(iterable)\n    # Extract elements from the heap in sorted order\n    sorted_iterable = [hq.heappop(iterable) for i in range(n)]\n    # Return the sorted list\n    return sorted_iterable"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Convert the input list to a heap using the max-heapify algorithm\n    heap = hq.heapify(iterable)\n    # Initialize an empty list to store the sorted elements\n    sorted_list = []\n    # Keep popping the largest element from the heap and appending it to the sorted list\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Convert the given iterable to a heap using heapq module\n    heap = hq.heapify(iterable)\n\n    # Extract elements from the heap one by one and add to a new list\n    sorted_list = []\n    while heap:\n        sorted_list.append(heapq.heappop(heap))\n\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # convert the list to a max heap\n    heap = [None] * len(iterable)\n    for i, x in enumerate(iterable):\n        heap[i] = x\n        hq.heapify(heap, i)\n\n    # convert the heap to a sorted list\n    sorted_list = []\n    while heap:\n        sorted_list.append(heapq.heappop(heap))\n\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)  # create max heap\n    sorted_list = []  # create empty list to store sorted elements\n    while iterable:  # while there are elements in the iterable\n        max_val = hq.heappop(iterable)  # remove and return maximum element\n        sorted_list.append(max_val)  # add to sorted list\n        hq.heapify(sorted_list)  # create max heap again to maintain sorted order\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    while iterable:\n        yield hq.heappop(iterable)"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heap sort.\n    '''\n    # Convert the list to a heap\n    heap = hq.heapify(iterable)\n\n    # Build a new list with the sorted elements\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # convert the iterable to a list\n    lst = list(iterable)\n    \n    # build the max heap\n    for i in range(len(lst) // 2 - 1, -1, -1):\n        hq.heapify(lst, i, len(lst))\n    \n    # extract elements from the heap and insert them into the list\n    for i in range(len(lst) - 1, 0, -1):\n        # move the root element to the end of the list\n        hq.heapreplace(lst, lst[0])\n        # shrink the heap\n        hq.heapify(lst, 0, i)\n        \n    return lst"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # convert the list into a heap\n    hq.heapify(iterable)\n    # sort the heap using a list comprehension\n    sorted_list = [heapq.heappop(iterable) for i in range(len(iterable))]\n    return sorted_list"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    # Calculating profit and loss\n    profit = actual_cost - sale_amount\n    loss = sale_amount - actual_cost\n    # Checking if profit and loss are positive\n    if profit >= 0 and loss >= 0:\n        # If profit and loss are positive, then the amount has no profit and no loss\n        print(\"The amount has no profit and no loss\")\n    else:\n        # If profit and loss are negative, then the amount has no profit\n        if profit >= 0:\n            print(\"The amount has no profit\")\n        # If profit and loss are positive, then the amount has no loss\n        else:\n            print(\"The amount has no loss\")"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost - sale_amount == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost >= sale_amount:\n        print(\"No profit and no loss\")\n    else:\n        print(\"Profit and loss\")"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost <= 0 or sale_amount <= 0:\n        return False\n    else:\n        if actual_cost <= sale_amount:\n            return True\n        else:\n            return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    Write a function to check whether the given amount has no profit and no loss\n\n    :param actual_cost: actual cost of the sale\n    :param sale_amount: amount of the sale\n    :return: True if the given amount has no profit and no loss, False otherwise\n    \"\"\"\n\n    if actual_cost >= sale_amount:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost >= sale_amount:\n        return False\n    else:\n        return True"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost,sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost >= sale_amount:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost,sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost > sale_amount:\n        return False\n    elif sale_amount == actual_cost:\n        return True\n    else:\n        return noprofit_noloss(sale_amount, actual_cost)"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost,sale_amount):\n    if actual_cost >= sale_amount:\n        print(\"No profit and no loss\")\n    else:\n        print(\"Profit or loss\")"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost,sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    # Calculate the profit and loss\n    profit = sale_amount - actual_cost\n    loss = actual_cost - sale_amount\n    \n    # Check if the profit and loss are positive or negative\n    if profit >= 0 and loss >= 0:\n        print(\"The amount has no profit and no loss\")\n    elif profit < 0 and loss < 0:\n        print(\"The amount has no profit and no loss\")\n    elif profit >= 0 and loss < 0:\n        print(\"The amount has only a loss\")\n    else:\n        print(\"The amount has only a profit\")"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if v >= 0 and t >= 0:\n        wc = 35.74 + 0.6215*t - 35.75*math.exp((17.62*t)/(t+243.5)) + 0.4275*v**0.16\n        wc = math.ceil(wc)\n        return wc\n    else:\n        print(\"Error: Wind velocity and temperature should be non-negative.\")"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Calculate the wind chill temperature in celsius\n    wc = 13.12 + 0.6215 * (t - 273.15) + 11.37 * math.log(v) - 0.3965 * t\n    # Calculate the wind chill index rounded to the nearest integer\n    wci = math.ceil(wc)\n    return wci"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Convert temperature to Kelvin\n    k = t + 273.15\n\n    # Calculate the wind chill index\n    c = 13.12 + 0.6215 * v - 11.37 * math.log(v) + 0.3965 * k\n\n    # Round the wind chill index to the nearest integer\n    index = int(c + 0.5)\n\n    # Check if the wind chill index is above the maximum limit (32) and round it to the nearest integer\n    if index > 32:\n        index = 32\n\n    return index"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Calculate the wind chill index rounded to the nearest integer.\n\n    :param v: wind velocity in kilometers per hour (float)\n    :param t: temperature in celsius (float)\n    :return: wind chill index rounded to the nearest integer (int)\n    \"\"\"\n    # calculate the dewpoint temperature\n    dp = 10.0 * math.log((t + 273.15) / (t - 273.15 + 10.0)) / (237.3 - math.log((t + 273.15) / (t - 273.15 + 10.0))) + 25.0\n\n    # calculate the wind chill temperature\n    w = v * (t - dp) / dp\n\n    # calculate the wind chill index rounded to the nearest integer\n    wci = math.ceil(w)\n\n    return wci"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    This function takes two parameters, v: the wind velocity in km/h and t: the temperature in celsius, and returns the wind chill index rounded to the nearest integer.\n\n    Formula:\n    Wind chill index = 13.12 + 0.6215 x T - 11.37 x v^0.16\n\n    where T is the temperature in celsius, v is the wind velocity in km/h, and ^ is the exponentiation operator.\n\n    If the temperature is below zero degrees Celsius, the function returns None.\n    '''\n    \n    # Check if temperature is below zero degrees Celsius\n    if t < 0:\n        return None\n    \n    # Convert temperature to Kelvin\n    t_k = t + 273.15\n    \n    # Calculate wind chill index\n    wc = 13.12 + 0.6215 * t_k - 11.37 * v**0.16\n    \n    # Round wind chill index to nearest integer\n    wc_rounded = math.ceil(wc)\n    \n    # Return wind chill index rounded to nearest integer\n    return wc_rounded"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    return math.ceil(13.12 + 0.6215*t - 11.37*v**0.16 + 0.3965*t*v**0.16)"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # convert temperature to Kelvin\n    T = t + 273.15\n\n    # calculate the wind chill temperature\n    wind_chill_temp = 35.72 + 0.6215*v - 35.75*math.exp((17.625/T)-((T-237.7)/T)) + 0.4275*v*math.exp((17.625/T)-((T-237.7)/T)) - 14.37*v*math.exp((17.625/T)-((T-237.7)/T))**2\n    \n    # calculate the wind chill index\n    if wind_chill_temp <= T:\n        wci = 0\n    elif wind_chill_temp <= T + 10:\n        wci = 1\n    else:\n        wci = 2\n    \n    # round the wind chill index to the next integer\n    wci = int(wci + 0.5)\n    \n    return wci"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    This function takes in wind speed in kilometers per hour and temperature in degrees Celsius and returns the wind chill index rounded to the nearest integer.\n\n    Arguments:\n    v -- wind speed in km/h\n    t -- temperature in Celsius\n\n    Returns:\n    w -- wind chill index rounded to the nearest integer\n    '''\n\n    # Convert wind speed and temperature to their corresponding speed and temperature in the standard SI units\n    v = v * 1.60934 # m/s to km/h\n    t = t - 273.15 # Celsius to Kelvin\n\n    # Calculate the speed of sound using the Reynolds number and the given temperature\n    rho = 1.225 # kg/m^3\n    Re = (v**2) / (rho * t)\n    Cp = (rho * v**2) / (Re**2)\n    Cd = (100 * 1.515) / (Re + 42.37)\n\n    # Calculate the humidity ratio\n    rho_a = 1.225 # kg/m^3\n    rho_b = 1000 # kg/m^3\n    ratio = (rho / rho_a) - (rho_b / rho)\n\n    # Calculate the heat capacity ratio\n    Cp_a = 100 # J/kg/K\n    Cp_b = 4186 # J/kg/K\n    ratio_Cp = (Cp / Cp_a) - (Cp_b / Cp)\n\n    # Calculate the Chapman-Healy coefficient\n    CH = 1 + (0.0065 * ratio) - (0.014 * ratio_Cp) + 0.00038 * ratio**2\n\n    # Calculate the wind chill index using the given formula and the calculated values\n    w = math.floor(23.45 * ((t - 68) / 1.8) + 11.22 * (0.6215 * math.log(v / 10) - 0.3565) + 0.3965 * CH)\n\n    # Round the wind chill index to the nearest integer\n    w = int(w + 0.5)\n\n    return w"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Calculate the wind chill index using the formula: \n    # WC = 13.12 + 0.6215*t - 11.37*math.exp((17.625*t)/(t+243.5))\n    wc = round(13.12 + 0.6215*t - 11.37*math.exp((17.625*t)/(t+243.5)))\n    # Return the wind chill index rounded to the nearest integer\n    return wc"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wind_speed_ft = v * 1.60934\n    alpha = 25.4 / 100\n    beta = math.log10(wind_speed_ft / 10)\n    gamma = 17.27 * math.exp(-13.12 * (t - 23) / (t - 29.65))\n    return round(alpha + beta - gamma)"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        else:\n            total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    \"\"\"\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    \"\"\"\n    count = 0\n    for name in sample_names:\n        if name[0].isupper():\n            count += len(name)\n    return count"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Define an empty list to store the names with uppercase letters\n    uppercase_names = []\n    # Loop through each name in the sample_names list\n    for name in sample_names:\n        # Check if the first character of the name is a lowercase letter\n        if name[0].islower():\n            # If it is, add it to the uppercase_names list\n            uppercase_names.append(name)\n    # Initialize a variable to keep track of the sum of the lengths of the names in uppercase_names\n    total_length = 0\n    # Loop through each name in uppercase_names\n    for name in uppercase_names:\n        # Add the length of the name to the total_length variable\n        total_length += len(name)\n    # Return the total_length value\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Initialize a variable to store the sum of the length of names after removing names starting with lowercase letters\n    sum_len = 0\n    # Loop through each name in the list\n    for name in sample_names:\n        # Check if the first character of the name is a lowercase letter\n        if name[0].islower():\n            # If it is, continue to the next name\n            continue\n        # Otherwise, add the length of the name to the sum\n        sum_len += len(name)\n    # Return the sum of the length of names after removing names starting with lowercase letters\n    return sum_len"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    valid_names = []\n    for name in sample_names:\n        if name[0].isupper():\n            valid_names.append(name)\n    sum_length = 0\n    for name in valid_names:\n        sum_length += len(name)\n    return sum_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Initialize a variable to keep track of the total length of names\n    total_length = 0\n    \n    # Loop through each name in the list\n    for name in sample_names:\n        # Check if the name starts with a lowercase letter\n        if name[0].islower():\n            # If it does, skip the name and move on to the next one\n            continue\n        # If the name does not start with a lowercase letter, add its length to the total length\n        else:\n            total_length += len(name)\n    \n    # Return the total length of all names that start with a letter\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if not name[0].islower():\n            total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n\n    count = 0\n    for name in sample_names:\n        if name[0].islower():\n            continue\n        count += len(name)\n\n    return count"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Create an empty list to store the names with no lowercase letters\n    no_lower_names = []\n    # Loop through each name in the sample_names list\n    for name in sample_names:\n        # Check if the first letter of the name is lowercase\n        if name[0].islower():\n            # If it is, add the name to the list of names with no lowercase letters\n            no_lower_names.append(name)\n    # Calculate the sum of the lengths of the names with no lowercase letters\n    sum_of_no_lower_names = sum([len(name) for name in no_lower_names])\n    # Return the sum of the lengths of the names with no lowercase letters\n    return sum_of_no_lower_names"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\((.*?)\\)')\n    matches = re.findall(pattern, items)\n    for match in matches:\n        items = items.replace(match, match.strip('()'))\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    result = []\n    for item in items:\n        if not re.search(r'\\(', item) and not re.search(r'\\)', item):\n            result.append(item)\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    This function will remove all the parenthesis and what is inbetween them from a string.\n    '''\n    # define the pattern to match the parenthesis\n    pattern = r\"\\([^)]*\\)\"\n    # replace the pattern with an empty string to remove the parenthesis and what is inbetween\n    return re.sub(pattern, \"\", items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    \"\"\"\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    \"\"\"\n    pattern = re.compile(r'\\((.*?)\\)')\n    result = re.sub(pattern, r'\\1', items)\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    pattern = r'\\(.*?\\)'\n    regex = re.compile(pattern)\n    return regex.sub('', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    pattern = r'\\([^()]*\\)'\n    new_items = re.sub(pattern, '', items)\n    return new_items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'(\\(.*?\\))') # regular expression pattern for parenthesis\n    matches = re.findall(pattern, items) # find all parenthesis matches in the string\n    for match in matches:\n        items = items.replace(match, '') # remove the parenthesis from the string\n    return items # return the modified string with parenthesis removed"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\(.*?\\)'\n    return re.sub(pattern, '', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^)]*\\)'\n    return re.sub(pattern, '', items)\n"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^)]*\\)'\n    return re.sub(pattern, '', items)"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        total += (i*(2*i-1))\n    return total"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return is_nonagonal(n-1) + is_nonagonal(n-2)\n\nprint(is_nonagonal(5))"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    num = 1\n    for i in range(n):\n        num += 2 * i + 1\n    return num\n"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if i%2 == 1 and count == 0:\n            count += 1\n            continue\n        elif i%2 == 0 and count == 1:\n            count += 1\n        elif i%2 == 1 and count == 1:\n            count = 0\n        else:\n            continue\n        if count == n:\n            print(i)\n            break"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Calculate the sum of squares of all odd integers up to n\n    sum_of_squares = (n * (n+1)) // 2 * (n * (n+1)) // 2\n    return sum_of_squares"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    Check if a number is a nonagonal number.\n\n    :param n: an integer\n    :return: True if the number is a nonagonal number, False otherwise\n    \"\"\"\n    return n % 2!= 0 and (2 * n - 1) % 4 == 0"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n < 0:\n        return None\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2 * (n - 1) + 2 * is_nonagonal(n - 1)"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n < 0: \n        return None\n    elif n == 0: \n        return 0\n    else: \n        return n * (n - 1) + n * (n - 2)"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return n * (n - 1)\n\ndef nth_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number using the previous function.\n    '''\n    if n < 0:\n        print(\"Please enter a non-negative integer.\")\n        return\n    return is_nonagonal(n)\n\nn = int(input(\"Enter the value of n: \"))\nif n < 0:\n    print(\"Please enter a non-negative integer.\")\nelse:\n    print(f\"The {n}th nonagonal number is: {nth_nonagonal(n)}\")"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Find the number of nonagonal numbers that have a side length of n\n    num_nonagonal = 0\n    for i in range(1, n+1):\n        num_nonagonal += i * (2*n - 2*i + 1)\n    # Return the nth nonagonal number\n    return num_nonagonal"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = re.compile(r'(?<![a-zA-Z])[zZ](?![a-zA-Z])')\n    match = pattern.search(text)\n    return match is not None"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'(?<=\\w)z(?=\\w)'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b[a-zA-Z]*[zZ][a-zA-Z]*\\b'\n    return re.search(pattern, text)"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'(?<=\\w)z(?=\\w)'\n    result = re.search(pattern, text)\n    return result is not None"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b(?!.*\\1)(z)\\w*\\b'\n    matches = re.findall(pattern, text)\n    return bool(matches)"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    This function checks if a string contains 'z', except at the start and end of the word.\n    '''\n    word_pattern = r'\\b[a-zA-Z]+\\b'\n    match = re.search(word_pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = re.compile('(?<=\\w)z(?=\\w|$)')\n    return bool(pattern.search(text))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b(z)\\w+\\b' # word boundary, 'z', at least one word character\n    match_obj = re.search(pattern, text, re.IGNORECASE)\n\n    if match_obj:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'(?<=\\b)z(?=\\b)'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b[zZ]\\w+\\b'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # function to swap two elements in an array\n    def swap(arr, i, j):\n        arr[i], arr[j] = arr[j], arr[i]\n\n    # function to reverse an array upto a given position\n    def reverse(arr, start, end):\n        while start < end:\n            swap(arr, start, end)\n            start += 1\n            end -= 1\n\n    # reverse the array upto the given position\n    reverse(input, 0, k - 1)\n    # reverse the array upto the last position\n    reverse(input, k, len(input) - 1)\n\n    # print the reversed array\n    print(input)"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n\n    # check if k is valid\n    if k >= len(input):\n        raise ValueError(\"Invalid k value\")\n\n    # reverse the first k elements of the array\n    input[:k] = input[:k][::-1]\n\n    # reverse the remaining elements of the array\n    input[k:] = input[k:][::-1]\n\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    input = list(input)\n    for i in range(k-1, len(input)):\n        input[i], input[i-k+1] = input[i-k+1], input[i]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n\n    # Check if the input is a list or not\n    if not isinstance(input, list):\n        return \"The input should be a list.\"\n\n    # Check if the given position k is valid or not\n    if k < 0 or k >= len(input):\n        return \"The given position should be between 0 and the length of the array.\"\n\n    # Reverse the array from 0 to k-1\n    reversed_array = input[0:k][::-1]\n\n    # Append the remaining part of the array to the beginning of the reversed array\n    for i in range(len(input)-k):\n        reversed_array.insert(0, input[k+i])\n\n    # Return the reversed array\n    return reversed_array"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if k > len(input): \n        return input\n    else:\n        input[k-1], input[-1] = input[-1], input[k-1]\n        return reverse_Array_Upto_K(input, k-1)"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Reverse the array from the first index to k-1\n    for i in range(k, len(input)):\n        input[i], input[i-k] = input[i-k], input[i]\n    return input\n"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    This function takes an array and a position k as inputs and returns the reversed array upto position k.\n    '''\n    # create a new empty list to store the reversed array\n    reversed_array = []\n\n    # loop through the input array from index 0 to k-1\n    for i in range(k):\n        # add the element at index i to the new reversed array\n        reversed_array.append(input[i])\n\n    # loop through the input array from k to the end\n    for i in range(k, len(input)):\n        # add the element at index i to the new reversed array\n        reversed_array.append(input[i])\n\n    # return the reversed array\n    return reversed_array"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Check if input is a list or not\n    if isinstance(input, list):\n        # Reverse the array upto the given position\n        input = input[:k] + input[k:][::-1] + input[:k]\n        return input\n    else:\n        print(\"Input is not a list!\")"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Reverse the first k elements of the array\n    for i in range(0, k):\n        input[i], input[-1-i] = input[-1-i], input[i]\n    \n    # Reverse the remaining elements of the array\n    for i in range(k, len(input)):\n        input[i], input[i-k] = input[i-k], input[i]\n    \n    # Print the reversed array\n    print(input)"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n\n    # initialize the left and right pointers\n    left = 0\n    right = len(input) - 1\n\n    # loop while the left pointer is less than or equal to the k-th index\n    while left <= k:\n        # swap the elements at the left and right pointers\n        temp = input[left]\n        input[left] = input[right]\n        input[right] = temp\n\n        # move the left pointer one step to the right\n        left += 1\n\n        # move the right pointer one step to the left\n        right -= 1\n\n    # return the reversed array\n    return input"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = (test_tup, test_dict)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = tuple(test_tup)\n    new_tup += tuple(test_dict.values())\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    return tuple(test_tup) + tuple(test_dict.items())"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return tuple(test_tup + tuple(test_dict.items()))"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_dict = test_dict.copy()\n    return tuple(test_tup + new_dict.items())"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    # Combine the two tuples into a new tuple\n    combined_tuple = test_tup + tuple(test_dict.items())\n    return combined_tuple"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    # create a new dictionary that combines the two input dictionaries\n    combined_dict = dict(test_tup[1].items() + test_dict.items())\n    \n    # create a new tuple with the original tuple and the combined dictionary\n    new_tup = (test_tup[0], combined_dict)\n    \n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + tuple(test_dict.items())"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    return (test_tup, test_dict)"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    for key, value in test_dict.items():\n        test_tup = test_tup + (value,)\n    return test_tup"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    N = len(cost)\n    total_cost = 0\n    total_cells = 0\n    max_cost = 0\n    max_cells = 0\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                total_cost += cost[i][j]\n                total_cells += 1\n                if cost[i][j] > max_cost:\n                    max_cost = cost[i][j]\n                    max_cells = 1\n            elif i == 0 and j > 0:\n                total_cost += cost[i][j]\n                total_cells += 1\n                if cost[i][j] > max_cost:\n                    max_cost = cost[i][j]\n                    max_cells = 1\n            elif i > 0 and j == 0:\n                total_cost += cost[i][j]\n                total_cells += 1\n                if cost[i][j] > max_cost:\n                    max_cost = cost[i][j]\n                    max_cells = 1\n            elif i > 0 and j > 0:\n                total_cost += cost[i][j]\n                total_cells += 1\n                if cost[i][j] > max_cost:\n                    max_cost = cost[i][j]\n                    max_cells = 1\n    return max_cost / max_cells"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    \"\"\"\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    \"\"\"\n    def dfs(i, j, path, seen):\n        if i == N-1 and j == N-1:\n            total_cost = sum(cost[i][j])\n            total_cells = 1\n            seen[tuple(path)] = total_cost\n            return total_cost / total_cells\n        if i < N and j < N and (i, j) not in seen:\n            total_cost = sum(cost[i][j]) + seen[tuple(path)]\n            total_cells = 1 + seen[tuple(path)]\n            seen[tuple(path)] = total_cost\n            return max(dfs(i+1, j, path, seen), dfs(i, j+1, path, seen))\n        return float('-inf')\n    \n    N = len(cost)\n    seen = {}\n    return dfs(0, 0, [], seen)"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    N = len(cost)\n    if N == 0:\n        return 0\n    elif N == 1:\n        return cost[0][0]\n\n    dp = [[float('-inf')] * N for _ in range(N)]\n\n    for i in range(N):\n        dp[0][i] = cost[0][i]\n        dp[i][0] = cost[i][0]\n\n    for i in range(1, N):\n        for j in range(1, N):\n            if i == j:\n                dp[i][j] = cost[i][j] + dp[i-1][j]\n            elif i < j:\n                dp[i][j] = max(dp[i][j], cost[i][j] + dp[i-1][j])\n            else:\n                dp[i][j] = max(dp[i][j], cost[i][j] + dp[i][j-1])\n\n    max_path = dp[N-1][N-1]\n    total_cost = 0\n    for i in range(N-1, -1, -1):\n        for j in range(N-1, -1, -1):\n            total_cost += cost[i][j]\n            if i == 0 and j == 0:\n                break\n            if i == 0:\n                max_path = max(max_path, dp[i][j] + dp[i][j-1])\n            elif j == 0:\n                max_path = max(max_path, dp[i][j] + dp[i-1][j])\n            else:\n                max_path = max(max_path, dp[i][j] + max(dp[i-1][j], dp[i][j-1]))\n\n    return max_path / (N*N)"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    N = len(cost)\n    max_avg = float('-inf')\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                continue\n            \n            if i == 0:\n                cost[i][j] += cost[i][j-1]\n            elif j == 0:\n                cost[i][j] += cost[i-1][j]\n            else:\n                cost[i][j] += min(cost[i][j-1], cost[i-1][j])\n            \n            if i == N-1 and j == N-1:\n                curr_cost = cost[i][j]\n                curr_avg = curr_cost / (i+1)\n                max_avg = max(max_avg, curr_avg)\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    # Initialize variables\n    n = len(cost)\n    max_avg = float('-inf')\n\n    # Find paths with different directions\n    for i in range(n):\n        for j in range(n):\n            # Check if this cell is part of the path\n            if i == 0 and j == 0:\n                continue\n            if i == 0:\n                path = [(i, j), (i, j+1)]\n            elif j == 0:\n                path = [(i, j), (i+1, j)]\n            else:\n                path = [(i, j), (i, j+1), (i+1, j+1)]\n\n            # Compute the average of the path\n            path_cost = sum([cost[i][j] + cost[i+1][j+1] for i, j in path])\n            path_size = len(path)\n            path_avg = path_cost/path_size\n\n            # Update max_avg if necessary\n            if path_avg > max_avg:\n                max_avg = path_avg\n\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    def helper(r, c, path_sum, visited):\n        if r == len(cost) - 1 and c == len(cost[0]) - 1:\n            if path_sum > max_sum:\n                max_sum = path_sum\n            return\n\n        if r >= len(cost) or c >= len(cost[0]):\n            return\n\n        path_sum += cost[r][c]\n        visited[r][c] = True\n\n        helper(r + 1, c, path_sum, visited)\n        helper(r, c + 1, path_sum, visited)\n\n        path_sum -= cost[r][c]\n        visited[r][c] = False\n\n    max_sum = float('-inf')\n    for r in range(len(cost)):\n        for c in range(len(cost[0])):\n            if cost[r][c] < 0:\n                continue\n            path_sum = cost[r][c]\n            visited = [[False] * len(cost[0]) for _ in range(len(cost))]\n            helper(r, c, path_sum, visited)\n\n    return max_sum / (r * c)"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # Initialize variables\n    n = len(cost)\n    dp = [[0]*n for _ in range(n)]\n    dp[0][0] = cost[0][0]\n    max_avg = dp[0][0]\n\n    # Fill the dp table\n    for i in range(1, n):\n        for j in range(n):\n            # If we can move right\n            if j+1 < n:\n                dp[i][j] = dp[i-1][j] + cost[i][j]\n            # If we can move down\n            if i+1 < n:\n                dp[i][j] = max(dp[i][j], dp[i][j-1] + cost[i][j])\n            # Update the max_avg if the path is longer\n            if dp[i][j] > max_avg:\n                max_avg = dp[i][j]\n\n    # Return the maximum average\n    return max_avg\n"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    # initialize the maximum average and the total number of cells\n    max_avg = 0\n    total_cells = 0\n    \n    # iterate over all cells\n    for i in range(len(cost)):\n        for j in range(len(cost[0])):\n            # if we have not visited this cell yet, initialize its left and up neighbours\n            if cost[i][j] == 0:\n                left_cell = (i-1,j) if i > 0 else None\n                up_cell = (i,j-1) if j > 0 else None\n                \n                # compute the maximum average for this cell and its neighbours\n                # if we have not visited the left neighbour and the up neighbour, we cannot compute an average, so we set the maximum average to 0\n                if left_cell is not None:\n                    total_cells += 1\n                    avg_left = (cost[left_cell[0]][left_cell[1]] + cost[i][j]) / 2\n                    max_avg = max(max_avg, avg_left)\n                    \n                if up_cell is not None:\n                    total_cells += 1\n                    avg_up = (cost[up_cell[0]][up_cell[1]] + cost[i][j]) / 2\n                    max_avg = max(max_avg, avg_up)\n                    \n                # if the maximum average is greater than the current maximum, update it\n                if max_avg > total_cells:\n                    total_cells = max_avg\n                    \n    # return the maximum average\n    return total_cells / len(cost)"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    paths = [[]]\n    for i in range(1, n*n):\n        paths.append([])\n    for i in range(n):\n        paths[i].append([0, 0])\n        paths[i][-1][0] = i\n        paths[i][-1][1] = 0\n    paths[n-1].append([n-1, n-1])\n    paths[n-1][-1][0] = n-1\n    paths[n-1][-1][1] = n-1\n    \n    max_avg = float('-inf')\n    for i in range(1, n*n):\n        for j in range(1, n*n):\n            if paths[i-1][j][0] < paths[i][j][0]:\n                avg = (paths[i][j][1] - paths[i][j-1][1]) / (paths[i][j][0] - paths[i][j-1][0])\n                if avg > max_avg:\n                    max_avg = avg\n            else:\n                avg = (paths[i][j][1] - paths[i-1][j][1]) / (paths[i][j][0] - paths[i-1][j][0])\n                if avg > max_avg:\n                    max_avg = avg\n    \n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    n = len(cost)\n    total_cost = 0\n    total_cells = 0\n    \n    # Calculate the total cost and total number of cells visited for all paths\n    for i in range(n):\n        for j in range(n):\n            if i == 0 and j == 0:\n                total_cost += cost[i][j]\n                total_cells += 1\n            elif i == 0:\n                total_cost += cost[i][j]\n                total_cells += 1\n            elif j == 0:\n                total_cost += cost[i][j]\n                total_cells += 1\n            elif i == n-1 and j == n-1:\n                total_cost += cost[i][j]\n                total_cells += 1\n            elif i == n-1:\n                total_cost += cost[i][j]\n                total_cells += 1\n            elif j == n-1:\n                total_cost += cost[i][j]\n                total_cells += 1\n            else:\n                total_cost += cost[i][j]\n                total_cells += 1\n    \n    # Calculate the average of total cost and total cells visited\n    average = total_cost/total_cells\n    \n    # Keep track of the maximum average and its corresponding path\n    max_average = average\n    max_path = []\n    \n    # Calculate the average of all paths and keep track of the maximum average and its corresponding path\n    for i in range(n):\n        for j in range(n):\n            if i == 0 and j == 0:\n                total_cost = cost[i][j]\n                total_cells = 1\n            elif i == 0:\n                total_cost += cost[i][j]\n                total_cells += 1\n            elif j == 0:\n                total_cost += cost[i][j]\n                total_cells += 1\n            elif i == n-1 and j == n-1:\n                total_cost += cost[i][j]\n                total_cells += 1\n            elif i == n-1:\n                total_cost += cost[i][j]\n                total_cells += 1\n            elif j == n-1:\n                total_cost += cost[i][j]\n                total_cells += 1\n            else:\n                total_cost += cost[i][j]\n                total_cells += 1\n            \n            if total_cells > 0 and total_cost/total_cells > max_average:\n                max_average = total_cost/total_cells\n                max_path = [(i,j), (i,j)]\n            elif total_cells > 1 and total_cost/total_cells == max_average:\n                max_path.append((i,j))\n    \n    return max_path"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        if data[0] > h and data[1] > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, info in students.items():\n        height, weight = info\n        if height > h and weight > w:\n            filtered_students[name] = info\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n\n    filtered_students = {}\n\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    result = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            result[name] = (height, weight)\n    return result"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_data(students, h, w):\n    \"\"\"\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    \"\"\"\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # Initialize an empty dictionary to store the count of same values\n    count_dict = {}\n    \n    # Loop through the first list and add the counts to the dictionary\n    for i in range(len(nums1)):\n        if nums1[i] in count_dict:\n            count_dict[nums1[i]] += 1\n        else:\n            count_dict[nums1[i]] = 1\n    \n    # Loop through the second list and check if the count in the dictionary is 1\n    same_pairs = []\n    for i in range(len(nums2)):\n        if nums2[i] in count_dict and count_dict[nums2[i]] == 1:\n            same_pairs.append(i)\n    \n    # Return the count of same pairs\n    return len(same_pairs)"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_same_pair(nums1, nums2):\n    # Create a dictionary to store the frequency of each number in both lists\n    freq1 = {}\n    freq2 = {}\n    \n    # Count the frequency of each number in both lists\n    for num in nums1:\n        if num in freq1:\n            freq1[num] += 1\n        else:\n            freq1[num] = 1\n    \n    for num in nums2:\n        if num in freq2:\n            freq2[num] += 1\n        else:\n            freq2[num] = 1\n    \n    # Use the dictionary to find indices where the lists have the same values\n    same_indices = []\n    for num in freq1:\n        if num in freq2 and freq1[num] == freq2[num]:\n            same_indices.append(nums1.index(num))\n    \n    return same_indices"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # Create an empty list to store the indices of the same pairs\n    same_pairs = []\n    # Loop through the first list\n    for i in range(len(nums1)):\n        # Loop through the second list and check if the current element is the same as the next element\n        for j in range(i+1, len(nums2)):\n            if eq(nums1[i], nums2[j]):\n                # If they are the same, add the index to the same_pairs list\n                same_pairs.append(i)\n                same_pairs.append(j)\n    return same_pairs"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    \"\"\"\n    The input is defined as two lists of the same length.\n    Write a function to count indices where the lists have the same values.\n    \"\"\"\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # initialize the sum variable to 0\n    total = 0\n\n    # loop through each digit of the base and add it to the total power times the digit\n    for digit in str(base):\n        total += int(digit) ** power\n\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # convert the base to a string and then split it into a list of characters\n    digits = list(str(base))\n    # initialize a variable to store the sum\n    total = 0\n    # loop through the list of digits and add the value of each digit to the total\n    for digit in digits:\n        total += int(digit) ** power\n    # return the total\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    while power > 0:\n        digit = base % 10\n        sum += digit\n        base = base // 10\n        power -= 1\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    \"\"\"\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    \"\"\"\n    # Initialize the sum variable to 0\n    sum_digits = 0\n    \n    # Iterate through each digit in the base and add it to the sum variable\n    while base!= 0:\n        sum_digits += base % 10\n        base //= 10\n    \n    # Calculate the sum of digits raised to the power and return the result\n    return sum_digits ** power"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    # Initialize the sum variable to 0\n    total = 0\n    \n    # Loop through each digit in the base\n    for digit in str(base):\n        # Convert the digit to an integer\n        digit_int = int(digit)\n        \n        # Add the digit to the total\n        total += digit_int ** power\n    \n    # Return the total sum of digits raised to the power\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # convert base to a string\n    base_str = str(base)\n    # initialize sum variable\n    sum_val = 0\n    # loop through each digit of the base string\n    for digit in base_str:\n        # convert digit to integer and add to sum\n        sum_val += int(digit)\n    # calculate the sum to the specified power\n    sum_val = sum_val ** power\n    # return the sum\n    return sum_val"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    \"\"\"\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    \"\"\"\n    total = 0\n    while power > 0:\n        digit = base % 10\n        total += digit * digit\n        power -= 1\n        base //= 10\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    while power > 0:\n        digit = base % 10\n        sum += digit\n        base //= 10\n        power -= 1\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # convert the base to a string and iterate over the digits to calculate the sum\n    digits = [int(digit) for digit in str(base)]\n    sum_of_digits = sum([digit ** power for digit in digits])\n    return sum_of_digits"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Initialize variables\n    sum_digits = 0\n    num = base\n\n    # Calculate the sum of all digits of the base to the specified power\n    for i in range(power):\n        num = sum(int(digit) for digit in str(num))\n        sum_digits += num\n    \n    return sum_digits"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_quotation(text):\n    pattern = r'(?<=\"|\")([\\w\\s]+)(?=\"|\")'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # Use regular expression to find all quotation marks\n    quotes = re.findall(r'(\".*?\")', text1)\n    # Extract the values between the quotation marks\n    values = []\n    for quote in quotes:\n        values.append(quote[1:-1])\n    return values"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n\n    # Using regular expression to extract values between quotation marks\n    pattern = r'\"([^\"]+)\"'\n    matches = re.findall(pattern, text1)\n\n    # Printing the extracted values\n    for match in matches:\n        print(match)"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = re.compile(r'\"([^\"]*)\"')\n    match = pattern.search(text)\n    if match:\n        return match.group(1)\n    else:\n        return None"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    This function extracts values between quotation marks \" \" of the given string.\n    '''\n    # Using regular expression to match quotation marks \" \" and extract the value between them\n    pattern = r'(?<=\\\").*?(?=\\\"|\\s|$)'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_quotation(text):\n    pattern = r'\"(.*?)\"'\n    return re.findall(pattern, text)"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_quotation(text):\n    pattern = r'\"(.+?)\"'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(1)\n    else:\n        return None"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_quotation(text1):\n    \"\"\"\n    Write a function to extract values between quotation marks \" \" of the given string.\n    \"\"\"\n    # Create a regular expression pattern to match quotation marks\n    pattern = r'\"([^\"]*)\"'\n    \n    # Use the re.findall() method to find all the substrings that match the pattern\n    matches = re.findall(pattern, text1)\n    \n    # Return a list of all the matched substrings\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    This function takes a string as input and returns a list of all the quotation marks enclosed by the string.\n    '''\n    pattern = re.compile(r'\"(.*?)\"')\n    matches = pattern.findall(text1)\n    return matches"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    result = []\n    for i in range(N):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    \n    # get the length of the input tuple\n    N = len(test_tup)\n    \n    # create an empty tuple to hold the output\n    output_tup = ()\n    \n    # loop through the input tuple and multiply each pair of elements\n    for i in range(N):\n        element1 = test_tup[i]\n        element2 = test_tup[i+1]\n        output = element1 * element2\n        output_tup = output_tup + (output,)\n    \n    # return the output tuple\n    return output_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) // 2\n    return tuple([x*y for x,y in zip(test_tup[::2],test_tup[1::2])][:N])"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] * test_tup[i+1])\n    result.append(test_tup[-1] * test_tup[0])\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # Get the length of the input tuple\n    N = len(test_tup)\n    \n    # Create a new tuple of length N\n    new_tup = tuple(test_tup[0] * test_tup[1])\n    \n    # Loop through the remaining elements of the tuple\n    for i in range(2, N):\n        new_tup += (test_tup[i] * test_tup[i+1],)\n    \n    # Return the new tuple\n    return new_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)-1\n    result_tup = ()\n    for i in range(N):\n        result_tup += (test_tup[i]*test_tup[i+1],)\n    result_tup += (test_tup[-1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # initialize an empty tuple of length N\n    result_tup = ()\n    # iterate through the tuple\n    for i in range(len(test_tup)-1):\n        # multiply the current element and the next element and append the result to the result_tup\n        result_tup = result_tup + (test_tup[i] * test_tup[i+1],)\n    # append the last element of the tuple to the result_tup\n    result_tup = result_tup + (test_tup[-1],)\n    # return the result_tup\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    t_1, *t_rest = test_tup\n    n = len(t_rest)\n    result = []\n    for i in range(n):\n        result.append(t_1 * t_rest[i])\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n\n    # Get the length of the tuple\n    N = len(test_tup)\n\n    # Create an empty tuple of length N\n    result = ()\n\n    # Loop through the tuple and calculate the product\n    for i in range(N):\n        product = test_tup[i] * test_tup[i+1]\n        result += (product,)\n\n    return result"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = ()\n    for i in range(len(test_tup)-1):\n        result += (test_tup[i] * test_tup[i+1],)\n    return result + (test_tup[-1] * test_tup[0],)"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a + b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_list(lst1,lst2):\n    return [x+y for x in lst1 for y in lst2]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    This function takes two lists as input and returns a new list with the sum of each element in both lists.\n    '''\n    return [lst1[i]+lst2[i] for i in range(len(lst1))]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    This function takes two lists as input and returns the sum of all elements in the two lists.\n    '''\n    return [lst1[i] + lst2[i] for i in range(len(lst1))]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    # initialize the result list\n    result = []\n    # iterate over each element in the first list\n    for i in range(len(lst1)):\n        # add the corresponding element from the second list to the result list\n        result.append(lst1[i] + lst2[i])\n    # return the result list\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_list(lst1,lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [a+b for a,b in zip(lst1,lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1,lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    This function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    # concatenate the two lists\n    lst = lst1 + lst2\n    # add all the elements of the concatenated list\n    result = sum(lst)\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(set(nums))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Convert the list to a set to remove duplicates\n    nums = set(nums)\n    # Convert the set back to a list to sort it\n    nums = sorted(list(nums))\n    # Create a generator object from the list of consecutive duplicates\n    consecutive_duplicates = (nums[i] for i in range(1, len(nums)) if nums[i] == nums[i-1]+1)\n    # Remove the consecutive duplicates from the original list and convert it back to a list\n    nums = [num for num in nums if num not in consecutive_duplicates]\n    return list(nums)"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n\n    # Remove duplicates and sort the list\n    nums = sorted(set(nums))\n\n    # Initialize an empty list to store consecutive duplicates\n    consecutive = []\n\n    # Iterate over the sorted list and group consecutive duplicates\n    for key, group in groupby(nums):\n        if len(list(group)) > 1:\n            consecutive.append(key)\n\n    # Return the list of consecutive duplicates\n    return consecutive"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    \"\"\"\n    Write a function to remove consecutive duplicates of a given list.\n    \"\"\"\n    return list(filter(lambda x: len(list(x)) > 1, groupby(sorted(nums))))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    \"\"\"\n    This function takes a list of integers as input and returns a new list of integers\n    with consecutive duplicates removed. The original list is not modified.\n    \"\"\"\n    return [list(group)[0] for key, group in groupby(sorted(nums)) if not (key == sorted(nums)[-1])]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(groupby(nums))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Convert the list to a set to remove duplicates\n    unique_nums = set(nums)\n    \n    # Use the groupby method to group the unique numbers by their consecutive duplicates\n    consecutive_groups = groupby(unique_nums)\n    \n    # Iterate over the groups and remove the consecutive duplicates\n    for i, group in consecutive_groups:\n        if i > 0 and next(group)[0] == i - 1:\n            continue\n        yield from group"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Remove consecutive duplicates from a list of integers.\n\n    Args:\n    nums (list): A list of integers\n\n    Returns:\n    A list of integers with consecutive duplicates removed.\n    '''\n\n    # Use groupby to group the numbers by their digit\n    grouped = groupby(map(str, nums))\n\n    # Use a list comprehension to remove consecutive duplicates\n    result = [int(num) for _, num in grouped if len(list(num)) == 1]\n\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Remove consecutive duplicates of a given list.\n    '''\n    groups = groupby(sorted(nums))\n    return [list(group) for group in groups if len(list(group)) > 1]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    \"\"\"\n    This function takes a list of integers as input and returns a new list with consecutive duplicates removed.\n    \"\"\"\n    seen = {}\n    result = []\n    for num in nums:\n        if num not in seen:\n            seen[num] = True\n        elif seen[num]:\n            result.append(num)\n            seen[num] = False\n    return result"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = math.pi*(r**2 + h**2)\n    lateral_surface = math.pi*r**2 + 2*math.pi*r*h + math.pi*h**2\n    return area, lateral_surface"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi * r**2 * h / 3"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n\n    # Calculate the volume of the cone\n    V = math.pi * r**2 * h\n\n    # Calculate the lateral surface area of the cone using the formula\n    A_lat = 2 * V * math.sin(math.pi/3)\n\n    return A_lat"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # calculate the lateral surface area using the formula A = pi r^2 h\n    A = math.pi * r**2 * h\n    return A"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Calculate the surface area of the base\n    base_area = math.pi*r*r\n    # Calculate the surface area of the cone\n    cone_area = math.pi*r*r*h\n    # Calculate the lateral surface area\n    lateral_area = base_area + cone_area - 2*base_area*cone_area/math.pi\n    # Return the lateral surface area\n    return lateral_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n\n    #Calculate the lateral surface area\n    lateral_surface_area = 2*r*math.tan(math.pi/6) * h\n    \n    #Return the lateral surface area\n    return lateral_surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # calculate the base area of the cone\n    base_area = math.pi * r ** 2\n    # calculate the height of the cone\n    height = h\n    # calculate the lateral surface area of the cone\n    lateral_area = 2 * base_area * height\n    # return the lateral surface area of the cone\n    return lateral_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    \"\"\"\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    \"\"\"\n    A = (math.pi * r**2 * h) / 3\n    return A"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s = (1/3) * math.pi * r**2 * h\n    return s"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Calculate the lateral surface area using the formula:\n    #   lateral surface area = pi * r^2 * (h/2)^2\n    #   lateral surface area = pi * r^2 * h^2 / 2\n    lateral_surface_area = math.pi * r**2 * h**2 / 2\n    return lateral_surface_area"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef replace_specialchar(text):\n    \"\"\"\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    \"\"\"\n    # define a regular expression pattern to match spaces, commas, or dots\n    pattern = re.compile(r'\\s|,|\\.')\n    # use the re.sub() function to replace all occurrences of the pattern with a colon\n    return re.sub(pattern, ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'[\\s\\.,]+'\n    text = re.sub(pattern, ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Replace all occurrences of spaces with a colon\n    text = re.sub(r'\\s', ':', text)\n    # Replace all occurrences of commas with a colon\n    text = re.sub(r',', ':', text)\n    # Replace all occurrences of dots with a colon\n    text = re.sub(r'\\.', ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Replace all occurrences of spaces, commas, or dots with a colon\n    text = re.sub(r'(\\s|,|\\.)',':',text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Define regular expression pattern to match all special characters\n    special_char_pattern = r'[,.\\s]'\n\n    # Replace all special characters with a colon\n    text = re.sub(special_char_pattern, ':', text)\n\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r\"[^\\w\\s]\", \"\", text) # Remove special characters\n    text = re.sub(r\"\\s+\", \" \", text) # Replace multiple spaces with single space\n    text = re.sub(r\"\\s+:\\s+\", \":\", text) # Replace multiple colon with single colon\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef replace_specialchar(text):\n    \"\"\"\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    \"\"\"\n    text = re.sub(r'[^\\w\\s]', '', text) # remove special characters except for letters and spaces\n    text = re.sub(r'\\s+', ':', text) # replace multiple spaces with single colon\n    text = re.sub(r'\\.', '', text) # replace dots with empty string\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    This function takes a string as input and returns the modified string with special characters replaced by a colon.\n    '''\n    # Define a regular expression pattern to match all occurrences of spaces, commas, or dots\n    pattern = r'[\\s,.]'\n    # Use re.sub() method to replace all occurrences of the pattern with a colon\n    return re.sub(pattern, ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Define a regular expression pattern for matching special characters\n    pattern = r'[\\s.,]'\n\n    # Use the re.sub() method to replace all occurrences of the pattern with a colon\n    return re.sub(pattern, ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    This function replaces all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = re.compile(r'[^\\w\\s]|_') # find any non-alphanumeric character or underscore\n    return pattern.sub(':', text)"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # Define the left and right pointers for the array\n    left, right = 0, len(A) - 1\n\n    # Keep track of the index of the first occurrence of x\n    first_occurrence = -1\n\n    # While the left pointer is less than or equal to the right pointer\n    while left <= right:\n        # Calculate the middle index\n        mid = (left + right) // 2\n\n        # If the middle element is equal to x\n        if A[mid] == x:\n            # If it's the first occurrence of x, set the first_occurrence variable to mid\n            if first_occurrence == -1:\n                first_occurrence = mid\n            # Otherwise, set the left pointer to mid+1, since we know the first occurrence of x is in the right half of the array\n            else:\n                left = mid + 1\n        # If the middle element is less than x\n        elif A[mid] < x:\n            # Move the left pointer to mid+1\n            left = mid + 1\n        # If the middle element is greater than x\n        else:\n            # Move the right pointer to mid-1\n            right = mid - 1\n\n    # Return the index of the first occurrence of x\n    return first_occurrence"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left, right = 0, len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            return mid\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    # initialize the index variable to -1\n    index = -1\n    \n    # loop through the array\n    for i in range(len(A)):\n        # check if the current element is equal to the given number\n        if A[i] == x:\n            # if it is, update the index variable\n            index = i\n            # break out of the loop since we found the first occurrence\n            break\n            \n    # return the index of the first occurrence\n    return index"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # initialize the index to -1\n    index = -1\n    # iterate over the array\n    for i in range(len(A)):\n        # check if the current element is equal to the given number\n        if A[i] == x:\n            # if it is, set the index to the current index and break out of the loop\n            index = i\n            break\n    return index"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # Check if the array is empty\n    if len(A) == 0:\n        return -1\n    \n    # Initialize variables for the start and end indices\n    start = 0\n    end = len(A) - 1\n    \n    # Loop through the array until the start index is greater than or equal to the end index\n    while start < end:\n        # Calculate the mid index\n        mid = (start + end) // 2\n        \n        # Check if the mid element is equal to the target element\n        if A[mid] == x:\n            # If it is, check if it is the first occurrence or not\n            if mid == 0 or A[mid - 1]!= x:\n                return mid\n            \n            # If the mid element is the first occurrence, search for the previous occurrence\n            while mid > 0 and A[mid - 1] == x:\n                mid -= 1\n            \n            return mid\n        \n        # If the mid element is less than the target element, update the start index to mid + 1\n        elif A[mid] < x:\n            start = mid + 1\n            \n        # If the mid element is greater than the target element, update the end index to mid - 1\n        else:\n            end = mid - 1\n            \n    # If the target element is not found, return -1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # Initialize the left and right pointers\n    left, right = 0, len(A) - 1\n\n    # Loop while the left pointer is less than or equal to the right pointer\n    while left <= right:\n        # Calculate the middle index\n        mid = (left + right) // 2\n\n        # If the middle element is equal to x, return the index\n        if A[mid] == x:\n            return mid\n\n        # If the middle element is less than x, search in the left subarray\n        elif A[mid] < x:\n            left = mid + 1\n\n        # If the middle element is greater than x, search in the right subarray\n        else:\n            right = mid - 1\n\n    # If x is not found, return -1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n\n    # Initialize the first occurrence index to None\n    first_occurrence_index = None\n\n    # Loop through the array\n    for i in range(len(A)):\n        # If the current element is equal to the given number x\n        if A[i] == x:\n            # If the first occurrence index is None or if the current element is smaller than the current first occurrence index\n            if first_occurrence_index is None or i < first_occurrence_index:\n                # Set the first occurrence index to the current index i\n                first_occurrence_index = i\n\n    # Return the first occurrence index\n    return first_occurrence_index"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    i = 0\n    while i < len(A) and A[i] < x:\n        i += 1\n    return i if i < len(A) and A[i] == x else -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    low = 0\n    high = len(A) - 1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        \n        if A[mid] == x:\n            if mid == 0 or A[mid - 1]!= x:\n                return mid\n            else:\n                high = mid - 1\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    \n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    left = 0\n    right = len(A) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if A[mid] == x:\n            return mid\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    \n    n = len(arr)\n    ans = 0\n    temp = 1\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            product = 1\n            for k in range(j, n):\n                product *= arr[k]\n            temp *= product\n            ans += temp\n            \n    return ans"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    dp = [[0] * (n+1) for _ in range(n+1)]\n    \n    # initialize first row of dp table\n    for i in range(n+1):\n        dp[i][0] = 0\n        \n    # initialize first column of dp table\n    for j in range(1, n+1):\n        dp[0][j] = arr[j-1]\n    \n    # fill dp table in the remaining rows and columns\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            dp[i][j] = dp[i-1][j] * arr[j-1] + dp[i][j-1] * arr[i-1]\n    \n    # calculate sum of products of all sublists\n    subarray_product = 1\n    for i in range(1, n+1):\n        subarray_product *= dp[n][i]\n    return subarray_product"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    # Calculate the product of each subarray\n    subarray_products = []\n    for i in range(len(arr)):\n        subarray_products.append(1)\n        for j in range(i+1, len(arr)):\n            subarray_products[-1] *= arr[j]\n    \n    # Calculate the sum of products of all subarrays\n    total_sum = sum(subarray_products)\n    \n    return total_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    dp = [0]*(n+1)\n    dp[0] = 0\n    dp[1] = arr[0]\n\n    for i in range(2,n+1):\n        dp[i] = dp[i-1] + arr[i-1]*dp[i-2]\n\n    return dp[n]"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    \"\"\"\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    \"\"\"\n    n = len(arr)\n    # Initialize result variable to 0\n    result = 0\n    # Create a list to store products of sublists\n    prod_list = []\n    # Create a list to store the sum of products of each sublist\n    sum_list = []\n    # Initialize two pointers i and j to 0\n    i = 0\n    j = 0\n    # Loop through the array once\n    while j < n:\n        # Calculate the product of the current sublist and append it to the prod_list\n        prod = 1\n        for k in range(i, j+1):\n            prod *= arr[k]\n        prod_list.append(prod)\n        # Calculate the sum of products of the current sublist and append it to the sum_list\n        temp = 0\n        for k in range(i, j+1):\n            temp += arr[k]\n        sum_list.append(temp)\n        # Move the pointers i and j to find the next sublist\n        i += 1\n        j += 1\n    # Loop through the sum_list and add the products of all sublists to the result variable\n    for i in range(len(sum_list)):\n        result += sum_list[i] * prod_list[i]\n    return result"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    res = 0\n    for i in range(1, n):\n        for j in range(i):\n            res += arr[j] * arr[j+i]\n    return res"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    sub_array_products = [1]*n\n    # calculating the product of the first element\n    sub_array_products[0] = arr[0]\n    # calculating the product of the subarrays from index 1 to n\n    for i in range(1, n):\n        sub_array_products[i] = sub_array_products[i-1]*arr[i]\n    # finding the sum of products of subarrays from index 1 to n\n    sum_of_subarray_products = sum(sub_array_products[1:])\n    return sum_of_subarray_products"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    total_sum = 0\n    for i in range(n):\n        temp = 1\n        for j in range(i,n):\n            temp *= arr[j]\n        total_sum += temp\n    return total_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n\n    # find the maximum subarray length\n    max_length = max(len(arr), 1)\n\n    # create a list to store the products of subarrays\n    subarray_products = [1] * max_length\n\n    # loop through each subarray of length 1 to max_length\n    for i in range(1, max_length):\n        # loop through each element in the subarray\n        for j in range(i):\n            # calculate the product of the subarray and the current element\n            subarray_products[i] = subarray_products[i] * (arr[j] * arr[i])\n\n    # find the sum of products of subarrays\n    subarray_prod_sum = sum(subarray_products)\n\n    return subarray_prod_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n\n    n = len(arr)\n\n    # Create a list to store the products of subarrays\n    prod_arr = []\n\n    # Create a list to store the sum of products of subarrays\n    sum_prod_arr = []\n\n    # Iterate through all possible sublists of the given list\n    for i in range(n):\n        for j in range(i, n):\n            # Calculate the product of the subarray\n            prod = 1\n            for k in range(i, j+1):\n                prod *= arr[k]\n            # Add the product to the list of products of subarrays\n            prod_arr.append(prod)\n\n    # Sort the list of products of subarrays in decreasing order\n    prod_arr.sort(reverse=True)\n\n    # Initialize the sum of products of subarrays\n    sum_prod = 0\n\n    # Iterate through the list of products of subarrays and add to sum\n    for i in range(len(prod_arr)):\n        sum_prod += prod_arr[i]\n\n    # Add the sum of products to the list of sum of products of subarrays\n    sum_prod_arr.append(sum_prod)\n\n    # Iterate through all possible sublists of the given list\n    for i in range(n):\n        for j in range(i, n):\n            # Calculate the sum of products of all subarrays\n            subarray_sum = 0\n            for k in range(i, j+1):\n                subarray_sum += prod_arr[k]\n            # Add the sum of products of the subarray to the list of sum of products of subarrays\n            sum_prod_arr.append(subarray_sum)\n\n    # Sort the list of sum of products of subarrays in decreasing order\n    sum_prod_arr.sort(reverse=True)\n\n    # Initialize the final sum of products of subarrays\n    final_sum = 0\n\n    # Iterate through the list of sum of products of subarrays and add to final sum\n    for i in range(len(sum_prod_arr)-1):\n        final_sum += sum_prod_arr[i]\n\n    return final_sum"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Calculate the length of the binary representation of the input number\n    length = len(bin(n)[2:])\n\n    # Toggle the middle bits of the binary representation of the input number\n    mid = length // 2\n    new_bits = \"\"\n    for i in range(mid):\n        new_bits += \"1\" if n & 1 else \"0\"\n        n >>= 1\n    new_bits += \"0\" * (length - 2 * mid)\n\n    # Convert the new binary representation of the input number back to an integer\n    return int(new_bits, 2)"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Find the first and last bit positions in binary representation\n    first_bit_pos = bin(n).rfind('1')\n    last_bit_pos = bin(n).rfind('0')\n\n    # Toggle the middle bits\n    middle_bits = n ^ (1 << (first_bit_pos + last_bit_pos))\n\n    # Return the result\n    return middle_bits"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Toggles bits of the number except the first and the last bit.\n\n    Args:\n        n (int): Number to toggle bits.\n\n    Returns:\n        int: Number with toggled bits.\n    \"\"\"\n    # Count the number of bits in the binary representation of n.\n    num_bits = len(bin(n)[2:])\n\n    # Determine which bits to toggle.\n    first_bit = 0\n    last_bit = num_bits - 1\n\n    # Toggle each bit except the first and the last.\n    for i in range(num_bits):\n        if i == first_bit or i == last_bit:\n            continue\n        n ^= (1 << i)\n\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    \"\"\"\n    mask = ((1 << 31) ^ 0) - 1  # mask for 32 bits\n    mask &= ~(1 << 31)  # mask out the last bit\n    mask &= ~(1 << 0)  # mask out the first bit\n    n = n & mask  # mask out all other bits except the first and last\n    n = n ^ (n >> 1)  # toggle the middle bit\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    mask = 1 << (n % 2)\n    n = n ^ mask\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    first_bit = n & ~(1 << 31)  # set first bit to 1\n    last_bit = n & ~(1 << 0)    # set last bit to 1\n    toggle_bit = n ^ first_bit ^ last_bit\n    return toggle_bit"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    \"\"\"\n    first_bit_mask = 0b100000000000000000000000000000000000000000000000000000000001\n    last_bit_mask = 0b0111111111111111111111111111111111111111111111111111111111110\n    \n    # Remove the first and last bits\n    n &= ~(first_bit_mask | last_bit_mask)\n    \n    # Toggle the middle bits\n    n ^= (first_bit_mask | last_bit_mask)\n    \n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n\n    # Initialize the first and last bits of the number to 1\n    n = n | (n & 0x5555555555555555)\n    n = n | (n & 0xAAAAAAAAAAAAAAAA)\n\n    # To toggle bits of the number except the first and last bits, we need to swap the first two bits and the last four bits.\n    n = (n & 0xAAAAAAAAAAAAAAA5) ^ (n & 0xAAAAAAAAAAAAAAA3)\n\n    # Reset the first two and the last four bits to 1\n    n = n & 0x7777777777777777\n    n = n & 0x8888888888888888\n\n    # To toggle the middle two bits, we can use the XOR operation with 0b0011 and shift the result by one bit.\n    n = (n & 0xAAAAAAAAAAAAAAAB) ^ ((n & 0xAAAAAAAAAAAAAAAB) << 1)\n\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # get the first and last bits of the number\n    first_bit = (n & 1)\n    last_bit = (n >> 31) & 1\n    \n    # toggle the middle bits of the number\n    middle_bits = (n >> 1) & 0xFFFFFFFF\n    \n    # combine the middle bits with the first and last bits\n    n = (first_bit << 31) | (middle_bits << 1) | last_bit\n    \n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # initialize the result variable with the first and last bits of the number\n    result = n & 1\n    # shift the number to the left by 1 bit and add the first bit to the result\n    result += (n >> 1) & 1\n    # shift the result to the left by 1 bit and add the last bit to the result\n    result += (result >> 1) & 1\n    # shift the result to the left by 1 bit and add the result to itself\n    result += (result >> 1) & 1\n    # return the result\n    return result"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_left(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    else:\n        return bisect.bisect_left(a, x) - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    else:\n        return bisect.bisect_left(a, x)"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    if index == len(a):\n        index -= 1\n    return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    if index == 0:\n        return index\n    elif x < a[index - 1]:\n        return index - 1\n    else:\n        return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    else:\n        return -1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    if index == len(a) or a[index]!= x:\n        index = bisect.bisect_left(a, x) - 1\n    return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    else:\n        return index - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_left(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    else:\n        return -1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    i = bisect.bisect_left(a, x)  # find the insertion point using bisect_left() function from the bisect module\n    if i == 0 or a[i-1] < x:  # if the leftmost element of the sorted subarray is greater than or equal to x\n        return i  # return the insertion point\n    else:  # otherwise, the leftmost element of the sorted subarray is less than x\n        j = bisect.bisect_left(a[:i], x)  # find the leftmost element of the sorted subarray\n        return j  # return the insertion point"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        print(string, 'is starting with a vowel.')\n    else:\n        print(string, 'is not starting with a vowel.')"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    pattern = re.compile(regex)\n    if pattern.match(string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    return re.match(regex, string) is not None"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return re.match(regex, string) is not None"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re \n\ndef check_str(string): \n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    \n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return bool(re.match(regex, string))"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (1 + geometric_sum(n-1)) ** (1/n)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Write a function to calculate the geometric sum of n-1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n*geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 0\n    else:\n        return (1/n) * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    for i in range(1, 10**n+1): \n        if (i*i*i) % 10**n == 0: \n            return i"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits.\n    '''\n    # convert n to a float to avoid integer division\n    n = float(n)\n    \n    # find the index of the smallest triangular number with n digits\n    index = int(n * (n+1) * (2*n+1) * (n**2 + n) / 6)\n    \n    return index\n\nWe first convert the input n to a float to avoid integer division. Then, we find the index of the smallest triangular number with n digits by using the above formula and rounding it to the nearest integer using the int() function.\n\nWe can test the function with the following code:\n\nprint(find_Index(3)) # output: 6\nprint(find_Index(4)) # output: 18\nprint(find_Index(5)) # output: 42\n\nThe output of the above code shows that the function works for n = 3, 4 and 5."
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    This function calculates the index of the smallest triangular number with n digits.\n    \"\"\"\n    # Initialize the value of the smallest triangular number\n    smallest_triangular_number = 10**(n-1)\n    # Initialize the index of the smallest triangular number\n    index = 0\n    # Initialize the variable to store the sum of the first n-1 digits\n    sum_of_digits = 0\n    \n    while index < n-1:\n        # Calculate the sum of the first n-1 digits\n        sum_of_digits = sum(str(smallest_triangular_number)[i] for i in range(n-1-index))\n        # Update the smallest triangular number\n        smallest_triangular_number += sum_of_digits\n        # Update the index\n        index += 1\n    \n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    #initialize the count variable as 1, since 0 is not a triangular number\n    count = 1\n\n    #initialize the smallest triangular number as 1, since 0 is the smallest triangular number\n    smallest_triangular = 1\n\n    #loop until the count reaches n\n    while count < n:\n\n        #increment the smallest triangular number by 1\n        smallest_triangular += 1\n\n        #check if the triangular number is a power of 2\n        if math.log2(smallest_triangular).is_integer():\n\n            #if it is a power of 2, check if it's a power of 10\n            if smallest_triangular == 2**math.ceil(math.log2(smallest_triangular)):\n\n                #if it is a power of 10, increment the count by 1\n                count += 1\n\n    #return the count of smallest triangular numbers with n digits\n    return count"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef find_Index(n): \n\n    # Initialize variables \n    triangular_numbers = [0] \n    current_number = 0 \n\n    # Generate the first n triangular numbers \n    for i in range(n): \n        current_number = current_number + i + 1 \n        triangular_numbers.append(current_number) \n\n    # Initialize variables \n    index = 0 \n    current_triangular_number = triangular_numbers[0] \n\n    # Find the smallest triangular number with n digits \n    while len(str(current_triangular_number)) < n: \n        index += 1 \n        current_triangular_number = triangular_numbers[index] \n\n    # Return the index \n    return index "
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Calculate the number of digits in the range [1, 10^n]\n    num_digits = math.floor(math.log10(10**n)) + 1\n\n    # Calculate the number of digits in the smallest triangular number with n digits\n    triangular_digits = math.floor(math.log10(10**num_digits)) + 1\n\n    # Calculate the difference between the number of digits in the smallest triangular number and n\n    difference = n - triangular_digits\n\n    # Calculate the number of triangular numbers with n digits\n    triangular_count = 10**num_digits\n\n    # Calculate the number of digits in the smallest triangular number\n    smallest_digits = math.floor(math.log10(triangular_count)) + 1\n\n    # Calculate the difference between the number of digits in the smallest triangular number and n\n    smallest_difference = n - smallest_digits\n\n    # Calculate the index of the smallest triangular number with n digits\n    index = smallest_count - smallest_difference\n\n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    This function takes an integer n as input and returns the index of the smallest triangular number with n digits.\n    '''\n    # Initialize variables\n    max_index = 2 * n - 2  # The maximum index for a triangular number with n digits\n    smallest_triangular_number = 1  # The smallest triangular number with n digits\n    triangular_number = 1  # The current triangular number\n    triangular_number_digits = 1  # The number of digits in the triangular number\n    index = 0  # The index of the smallest triangular number\n    \n    # Iterate through the triangular numbers\n    while triangular_number <= max_index:\n        # Check if the current triangular number is a valid triangular number\n        if triangular_number_digits == n:\n            return index\n        triangular_number_digits += 1\n        \n        # Update the smallest triangular number if necessary\n        if triangular_number < smallest_triangular_number:\n            smallest_triangular_number = triangular_number\n        \n        # Move to the next triangular number\n        triangular_number += 1\n        index += 1"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    index = 1\n    triangular_number = 1\n    while index < n:\n        triangular_number = (index * (index + 1)) // 2\n        index += 1\n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits.\n    https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    \"\"\"\n\n    def is_triangular_number(n):\n        return n == int(str(n)**(1/2))**2\n\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    def is_n_digit_palindrome(n):\n        for i in range(1, n+1):\n            if not is_palindrome(i*i):\n                return False\n        return True\n\n    def is_k_digit_palindrome(k):\n        for i in range(1, 10**k+1):\n            if not is_palindrome(i*i*i*i):\n                return False\n        return True\n\n    def is_k_digit_triangular(k):\n        for i in range(1, 10**k+1):\n            if not is_triangular_number(i*i*i*i):\n                return False\n        return True\n\n    def find_smallest_triangular_number(n):\n        if not is_k_digit_palindrome(n):\n            return None\n\n        for i in range(10**(n-1), 10**n):\n            if is_k_digit_triangular(n) and is_n_digit_palindrome(n):\n                return i\n\n        return None\n\n    return find_smallest_triangular_number(n)"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits.\n    \"\"\"\n    # Find the maximum value of n\n    max_value = int(math.log10(10**n))\n\n    # Initialize the first 2 smallest triangular numbers\n    triangular = [0, 1]\n\n    # Loop through the remaining digits of n\n    for i in range(1, max_value+1):\n        # Initialize the current triangular number\n        current_triangular = triangular[-1] * 10**i\n\n        # Check if the current triangular number is smaller than the smallest triangular number\n        if current_triangular < triangular[0]:\n            # Update the first 2 smallest triangular numbers if the current triangular number is smaller\n            triangular.pop(0)\n            triangular.append(current_triangular)\n\n    # Find the index of the smallest triangular number\n    index = triangular.index(min(triangular))\n\n    return index"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup[::2], test_tup[1::2]))"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    \"\"\"\n    test_dict = {}\n    for i in range(0, len(test_tup), 2):\n        test_dict[test_tup[i]] = test_tup[i+1]\n    return test_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup[0::2], test_tup[1::2]))"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dict_obj = {}\n    for i in range(0, len(test_tup), 2):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        dict_obj[key] = value\n    return dict_obj"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. \n    '''\n    # Define the empty dictionary\n    result_dict = {}\n    # Loop through the tuple using the enumerate() function\n    for i in enumerate(test_tup):\n        # Get the current element and its adjacent element\n        current_elem = i[1]\n        next_elem = test_tup[i[0] + 1]\n        # Assign the current element and its adjacent element as a key-value pair to the dictionary\n        result_dict[current_elem] = next_elem\n    # Return the final dictionary\n    return result_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    result = {}\n    for i in range(0, len(test_tup)-1, 2):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        result[key] = value\n    return result"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    result = {}\n    for i in range(0, len(test_tup), 2):\n        result[test_tup[i]] = test_tup[i+1]\n    return result"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    # initialize an empty dictionary\n    my_dict = {}\n    # loop through the tuple and add the first two elements to the dictionary\n    for i in range(0, len(test_tup), 2):\n        my_dict[test_tup[i]] = test_tup[i+1]\n    return my_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    # Initialize an empty dictionary\n    result_dict = {}\n    # Loop through the tuple and add the adjacent elements as a key-value pair to the dictionary\n    for i in range(0, len(test_tup), 2):\n        result_dict[test_tup[i]] = test_tup[i+1]\n    return result_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    # Create an empty dictionary\n    dict_obj = {}\n    \n    # Loop through the tuple\n    for i in range(len(test_tup)-1):\n        # Use the index to access the adjacent elements\n        key = i\n        value = test_tup[i+1]\n        # Add the key-value pair to the dictionary\n        dict_obj[key] = value\n    \n    return dict_obj"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if s == s[0]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0:\n        return True\n    else:\n        return s[0] == all_Characters_Same(s[1:])"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # Initialize a dictionary to store the frequency of each character in the string.\n    freq = {}\n    # Loop through each character in the string.\n    for char in s:\n        # If the character is already in the dictionary, increment its count.\n        if char in freq:\n            freq[char] += 1\n        # If the character is not in the dictionary, add it with a count of 1.\n        else:\n            freq[char] = 1\n    # Loop through the keys in the dictionary and check if all values are 1.\n    for val in freq.values():\n        if val!= 1:\n            return False\n    # If all values are 1, the string is all characters the same.\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Characters_Same(s):\n    # Check if the length of the string is greater than 1\n    if len(s) > 1:\n        # Convert the string to lowercase\n        s = s.lower()\n        # Initialize a variable to store the first character of the string\n        first_char = s[0]\n        # Loop through the remaining characters of the string\n        for char in s[1:]:\n            # If the current character is not equal to the first character, return False\n            if char!= first_char:\n                return False\n        # If all characters are the same, return True\n        return True\n    # If the length of the string is 1, return True\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # check if the length of the string is 0\n    if len(s) == 0:\n        return True\n    # check if the length of the string is 1\n    elif len(s) == 1:\n        return True\n    # check if the length of the string is greater than 1\n    else:\n        # check if the first and last character are the same\n        if s[0] == s[-1]:\n            # check if all the characters except the first and last are same\n            for i in range(len(s)-1):\n                if s[i]!= s[i+1]:\n                    return False\n            # if all the characters are same, then it is true\n            return True\n        # if the first and last characters are not the same, then it is false\n        else:\n            return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 1:\n        return True\n    else:\n        if s[0] == s[-1]:\n            return all_Characters_Same(s[1:-1])\n        else:\n            return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    This function takes a string as input and returns True if all the characters in the string are the same,\n    otherwise False.\n    \"\"\"\n    if len(s) < 2:\n        return True\n    else:\n        first_char = s[0]\n        for char in s:\n            if char!= first_char:\n                return False\n        return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Characters_Same(s):\n    # convert the string to lowercase\n    s = s.lower()\n    # iterate through the string and check if all characters are same\n    for i in range(len(s)):\n        if s[i]!= s[0]:\n            return False\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 1:\n        return True\n    elif s[0] == s[1]:\n        return all_Characters_Same(s[1:])\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    \"\"\"\n    Write a function to caluclate the area of a tetrahedron.\n    \"\"\"\n    return (1/6) * side**2 * math.sqrt(3)"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n\n    # Calculate the perpendicular distance\n    s = 1 - (side / 2)\n\n    # Calculate the angles\n    a = math.acos((1 + s) / 2)\n    b = math.acos((1 - s) / 2)\n    c = math.acos((1 - s) / 2)\n    d = math.acos((1 + s) / 2)\n\n    # Calculate the area\n    area = (1 / 6) * (side * (1 - s) * (1 - s) + s * (1 - s) * (1 - s) + s * (1 - s) * (1 - s) + side * (1 - s) * (1 - s))\n\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # calculate the semi-perimeter\n    sp = 0.5 * side\n    \n    # calculate the area using Heron's formula\n    area = math.sqrt(3) / 4 * sp * (sp - side) * (sp + side)\n    \n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = (1/3) * side**2\n    area = math.sqrt(s)\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # Formula to calculate the area of a tetrahedron\n    area = (1/6) * side * side * side\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    \"\"\"\n    Write a function to calculate the area of a tetrahedron.\n    \"\"\"\n    s = (side*side + side*side + side*side + side*side) ** 0.5\n    return (1/6) * s * (s + side + side + side)\n"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (1/6) * side**2"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = (3 * side**2) / (4 * math.tan(math.pi / 6))\n    return s"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = (side**2 + side**2 + side**2 + side**2) / 4\n    area = math.sqrt(s)\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = side / 2  # half of the side length\n    area = (1/6) * s * (s - math.sqrt(3)) * (s + math.sqrt(3))\n    return area\n"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    for i in range(m):\n        list[0], list[n-i-1] = list[n-i-1], list[0]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    m = m % n  # To make sure m is less than n\n    \n    # If m is less than half of n\n    if m < n // 2:\n        list = list[-m:] + list[:-m]\n    # If m is greater than half of n\n    else:\n        list = list[n//2:] + list[:n//2]\n        \n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    m = m % n\n    list.extend(list[:m])\n    list = list[m:]\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    m = m % n\n    list.extend(list[:m])\n    list = list[m:] + list[:m]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    m = m % n\n    list[0:m], list[m:] = list[m:], list[0:m]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    m = m % n # to keep m between 0 and n-1\n    list[:m], list[m:] = list[m:], list[:m]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    m = m % n\n    list[:m], list[m:] = list[m:], list[:m]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    m = m % n\n    list = list[-m:] + list[:-m]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction. \n    https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    \"\"\"\n    if m == 0:\n        return list\n    elif m == len(list):\n        return list[::-1]\n    else:\n        return list[-m:] + list[:-m]"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    '''\n    This function takes a list and a number m as input and rotates the list to the right by m items.\n    '''\n    n = len(list)\n    # rotate the list to the left by m items\n    list = list[m:] + list[:m]\n    # move the last item of the list to the first position\n    list[0], list[n-1] = list[n-1], list[0]\n    return list"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for element in test_tup:\n        if element is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    none_found = False\n    for item in test_tup:\n        if item is None:\n            none_found = True\n            break\n    return none_found"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    return any(x is None for x in test_tup)"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if any(x is None for x in test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    none_value = None\n    for item in test_tup:\n        if item == none_value:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    none_found = False\n    for elem in test_tup:\n        if elem is None:\n            none_found = True\n            break\n    return none_found"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for value in test_tup:\n        if value is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum to endnum where every number is divisible by every digit it contains.\n    '''\n    return lambda num: all(num % int(digit) == 0 for digit in str(num))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return filter(lambda num: all(digit % i == 0 for i in range(10)), range(startnum, endnum + 1))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    This function takes two arguments, startnum and endnum, and returns a list of all numbers within the given range\n    where every number is divisible by every digit it contains.\n    \"\"\"\n    # Define a lambda function to check if a number is divisible by a digit\n    is_divisible_by_digit = lambda x: all(int(d) in str(x) for d in str(x))\n\n    # Define a list to store the divisible numbers\n    divisible_numbers = []\n\n    # Loop through all numbers from startnum to endnum\n    for num in range(startnum, endnum+1):\n        # If the number is divisible by every digit, append it to the divisible_numbers list\n        if is_divisible_by_digit(num):\n            divisible_numbers.append(num)\n\n    # Return the list of divisible numbers\n    return divisible_numbers"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return filter(lambda num: all(int(digit) % i == 0 for digit in str(num)), range(startnum, endnum + 1))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    def is_divisible(n, d):\n        return n % d == 0\n    return list(filter(lambda x: all(is_divisible(x, i) for i in range(10)), range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    return filter(lambda num: all(num % i == 0 for i in range(1, 10)), range(startnum, endnum + 1))\n"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    def is_divisible_by_digits(num):\n        return all(int(digit) % int(digit) == 0 for digit in str(num))\n    \n    return list(filter(is_divisible_by_digits, range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    def is_divisible_by_digits(num):\n        '''\n        Helper function to check if a number is divisible by every digit it contains.\n        '''\n        return all(int(digit) % num == 0 for digit in str(num))\n\n    return filter(is_divisible_by_digits, range(startnum, endnum+1))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n\n    def is_divisible(num):\n        digits = [int(digit) for digit in str(num)]\n        return all(digit in digits for digit in digits)\n\n    return list(filter(is_divisible, range(startnum, endnum + 1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return list(filter(lambda x: all(int(d) % int(str(x)[i]) == 0 for i, d in enumerate(str(x))), range(startnum, endnum+1)))"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r**2 * a / 360\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    \n    # Convert angle from degrees to radians\n    a = math.radians(a)\n    \n    # Calculate the area of the sector\n    area = r * a\n    \n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r * r * a / 360\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    \n    # Check if the angle is within the valid range\n    if a > 360:\n        return None\n    \n    # Calculate the area of the sector using the formula A = (r * a/360) * (r * r)\n    area = (r * a/360) * (r * r)\n    \n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi*r**2*a/360\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    \n    area = math.pi * r * r * math.sin(math.radians(a/2))\n    \n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    \n    if a > 360:\n        return None\n    \n    area = math.pi * r**2 * a / 360\n    \n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r ** 2 * a / 360\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    \n    #check if the angle is valid\n    if a > 360:\n        print(\"Invalid angle\")\n        return None\n    \n    #calculate the area using the formula\n    area = r*r*math.sin(math.radians(a/360))\n    \n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * r * r # Formula for area of a sector using the formula for area of a circle\n"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z):\n    \"\"\"\n    Write a function to find the longest common subsequence for the given three string sequence.\n    https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    \"\"\"\n    m, n, p = len(X), len(Y), len(Z)\n    # table to store lengths of LCS of three strings\n    L = [[[0]*(p+1) for j in range(m+1)] for i in range(n+1)]\n\n    # fill table in bottom up manner\n    for i in range(n+1):\n        for j in range(m+1):\n            for k in range(p+1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i-1][j][k-1])\n\n    # find LCS\n    LCS = []\n    i, j, k = n, m, p\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n            LCS.append(X[i-1])\n            i -= 1\n            j -= 1\n            k -= 1\n        elif L[i-1][j][k] == L[i][j][k]:\n            i -= 1\n        elif L[i][j-1][k] == L[i][j][k]:\n            j -= 1\n        else:\n            k -= 1\n    return LCS[::-1]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z):\n    \"\"\"\n    Write a function to find the longest common subsequence for the given three string sequence.\n    \"\"\"\n    m, n, p = len(X), len(Y), len(Z)\n    # Create a table to store lengths of LCS of substring ending at i and j \n    table = [[0] * (p+1) for _ in range(m+1)] \n    # Fill in the table using dynamic programming approach \n    for i in range(m+1): \n        for j in range(n+1): \n            for k in range(p+1): \n                if i == 0 or j == 0 or k == 0: \n                    table[i][j][k] = 0 \n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]: \n                    table[i][j][k] = table[i-1][j-1][k-1] + 1 \n                else: \n                    table[i][j][k] = max(table[i-1][j][k], table[i][j-1][k], table[i][j][k-1]) \n    # Initialize the result string with zeros \n    result = [\"\"] * (p+1) \n    # Fill in the result string in reverse order \n    i, j, k = m, n, p \n    while i > 0 and j > 0 and k > 0: \n        if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]: \n            result[k] = X[i-1] \n            i -= 1 \n            j -= 1 \n            k -= 1 \n        elif table[i-1][j][k] == table[i][j-1][k]: \n            i -= 1 \n        elif table[i][j-1][k] == table[i][j][k-1]: \n            j -= 1 \n        else: \n            k -= 1 \n    # Return the final result string \n    return \"\".join(result[::-1]) "
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n\n    # table to store lengths of LCS of subarrays\n    L = [[0] * (p+1) for i in range(m+1)]\n\n    # filling the table in bottom up manner\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(p+1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n\n    # backtracking to find the LCS of subarrays\n    i = m\n    j = n\n    k = p\n    lcs = \"\"\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n            lcs = X[i-1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif L[i-1][j][k] == L[i][j-1][k]:\n            i -= 1\n        else:\n            j -= 1\n\n    # returning the LCS\n    return lcs[::-1]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    # To find the length of LCS of two strings X and Y, we can use dynamic programming.\n    # First, we need to create a 2D array to store the length of LCS of X and Y.\n    # arr[i][j] represents the length of LCS of X[:i] and Y[:j].\n    # Initially, all values are 0.\n    n = len(X)\n    m = len(Y)\n    arr = [[0] * (m+1) for i in range(n+1)]\n\n    # Now, we can fill the array using dynamic programming.\n    # We can fill the values in arr[i][j] using following recurrence relation:\n    # If X[i-1] == Y[j-1], then arr[i][j] = arr[i-1][j-1] + 1.\n    # Else, arr[i][j] = max(arr[i-1][j], arr[i][j-1]).\n    for i in range(n+1):\n        for j in range(m+1):\n            if i == 0 or j == 0:\n                arr[i][j] = 0\n            elif X[i-1] == Y[j-1]:\n                arr[i][j] = arr[i-1][j-1] + 1\n            else:\n                arr[i][j] = max(arr[i-1][j], arr[i][j-1])\n\n    # Now, we can backtrack from the array to find the LCS.\n    # We start from the bottom-right corner and move towards the top-left corner.\n    # We will keep track of the characters which are part of the LCS.\n    # We will store them in the lcs list.\n    lcs = []\n    i = n\n    j = m\n    while i > 0 and j > 0:\n        if X[i-1] == Y[j-1]:\n            lcs.append(X[i-1])\n            i -= 1\n            j -= 1\n        elif arr[i-1][j] > arr[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n\n    # Reverse the list to get the actual LCS.\n    lcs.reverse()\n\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z): \n    m = len(X) # length of X\n    n = len(Y) # length of Y\n    o = len(Z) # length of Z\n    dp = [[0] * (o + 1) for _ in range(m + 1)]\n    for i in range(m + 1):\n        for j in range(n + 1):\n            for k in range(o + 1):\n                if i == 0 or j == 0 or k == 0:\n                    dp[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    dp[i][j][k] = dp[i-1][j-1][k-1] + 1\n                else:\n                    dp[i][j][k] = max(dp[i-1][j][k], dp[i][j-1][k], dp[i][j][k-1])\n    return dp[m][n][o]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z):\n    n = len(X)\n    m = len(Y)\n    p = len(Z)\n\n    # create a table to store the length of LCS for all prefixes of X and Y\n    table = [[0] * (m + 1) for _ in range(n + 1)]\n\n    # fill the table using dynamic programming approach\n    for i in range(n + 1):\n        for j in range(m + 1):\n            if i == 0 or j == 0:\n                table[i][j] = 0\n            elif X[i - 1] == Y[j - 1]:\n                table[i][j] = table[i - 1][j - 1] + 1\n            else:\n                table[i][j] = max(table[i - 1][j], table[i][j - 1])\n\n    # backtrack to find the LCS\n    lcs = \"\"\n    i, j = n, m\n    while i > 0 and j > 0:\n        if X[i - 1] == Y[j - 1]:\n            lcs = X[i - 1] + lcs\n            i -= 1\n            j -= 1\n        elif table[i - 1][j] > table[i][j - 1]:\n            i -= 1\n        else:\n            j -= 1\n\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z):\n    \"\"\"\n    This function finds the longest common subsequence for the given three string sequence.\n    The LCS is the longest subsequence of the three strings that is present in all three strings.\n    \"\"\"\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    # Table to store lengths of LCS of prefixes of X, Y, and Z\n    L = [[0] * (o + 1) for _ in range(m + 1)]\n\n    # Build L[i][j] in bottom up fashion\n    for i in range(m + 1):\n        for j in range(o + 1):\n            if i == 0 or j == 0:\n                L[i][j] = 0\n            elif X[i - 1] == Y[j - 1] and X[i - 1] == Z[j - 1]:\n                L[i][j] = L[i - 1][j - 1] + 1\n            else:\n                L[i][j] = max(L[i - 1][j], L[i][j - 1], L[i - 1][j - 1])\n\n    # Return LCS of prefixes of X, Y, and Z\n    return L[m][o]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z):\n    # create a 2D table to store the lengths of the longest common subsequence for all three sequences\n    table = [[0 for j in range(len(Z)+1)] for i in range(len(X)+1)]\n\n    # fill the table using dynamic programming approach\n    for i in range(len(X)+1):\n        for j in range(len(Y)+1):\n            for k in range(len(Z)+1):\n                if i == 0 or j == 0 or k == 0:\n                    table[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    table[i][j][k] = table[i-1][j-1][k-1] + 1\n                else:\n                    table[i][j][k] = max(table[i-1][j][k], table[i][j-1][k], table[i][j][k-1])\n\n    # find the length of the longest common subsequence\n    max_len = table[len(X)][len(Y)][len(Z)]\n\n    # find the actual longest common subsequence using backtracking\n    i = len(X)\n    j = len(Y)\n    k = len(Z)\n    lcs = []\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n            lcs.append(X[i-1])\n            i -= 1\n            j -= 1\n            k -= 1\n        elif table[i-1][j][k] == table[i][j-1][k]:\n            i -= 1\n        elif table[i-1][j][k] == table[i][j][k-1]:\n            j -= 1\n        else:\n            k -= 1\n\n    # reverse the lcs list to obtain the longest common subsequence in descending order\n    lcs.reverse()\n\n    # create a list of tuples to represent the longest common subsequence\n    result = []\n    for c in lcs:\n        result.append((c, max_len))\n\n    return result"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n\n    # Initialize LCS length variables\n    n = len(X)\n    m = len(Y)\n    p = len(Z)\n\n    # Create a table to store the length of LCS for all possible paths\n    lcs = [[0] * (p+1) for i in range(n+1)]\n\n    # Fill the table in bottom-up manner\n    for i in range(n+1):\n        for j in range(m+1):\n            for k in range(p+1):\n                if i == 0 or j == 0 or k == 0:\n                    lcs[i][j] = 0\n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    lcs[i][j] = lcs[i-1][j-1] + 1\n                else:\n                    lcs[i][j] = max(lcs[i-1][j], lcs[i][j-1], lcs[i-1][j-1])\n\n    # Return the length of LCS\n    return lcs[n][m]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z): \n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n    table = [[[0 for j in range(p+1)] for i in range(m+1)] for k in range(n+1)]\n\n    # Build table\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, p+1):\n                if X[i-1] == Y[j-1] and Z[k-1] == Y[j-1]:\n                    table[i][j][k] = table[i-1][j][k-1] + 1\n                else:\n                    table[i][j][k] = max(table[i-1][j][k], table[i][j-1][k], table[i-1][j-1][k-1])\n\n    # Find length of LCS\n    max_len = 0\n    i = m\n    j = n\n    k = p\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and Z[k-1] == Y[j-1]:\n            max_len = max(max_len, table[i-1][j][k])\n            i -= 1\n            j -= 1\n            k -= 1\n        elif X[i-1] == Y[j-1]:\n            i -= 1\n        elif Y[j-1] == Z[k-1]:\n            j -= 1\n        else:\n            k -= 1\n\n    return max_len"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', str1)\n    new_str =''.join(words).capitalize()\n    return new_str"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Remove special characters and convert the string to lowercase\n    str2 = re.sub(r'[^\\w\\s]', '', str1).lower()\n    # Split the string into words\n    words = str2.split()\n    # Iterate through each word in the list\n    for i in range(len(words)):\n        # If the word starts with a capital letter, add a space\n        if words[i][0].isupper():\n            words[i] ='' + words[i]\n    # Join the words with spaces and return the result\n    return''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\ndef capital_words_spaces(str1):\n    # Remove all non-alphanumeric characters from the string\n    str1 = re.sub(r'[^a-zA-Z0-9\\s]', '', str1)\n    # Split the string into words\n    words = str1.split()\n    # Capitalize the first letter of each word\n    capitalized_words = [word.capitalize() for word in words]\n    # Join the capitalized words back into a string\n    result =''.join(capitalized_words)\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef capital_words_spaces(string):\n    '''\n    This function takes a string as an input and returns a string with spaces between words\n    starting with capital letters.\n\n    Parameters:\n    string (str): The string whose words need to be space separated.\n\n    Returns:\n    string (str): The modified string with spaces between words starting with capital letters.\n    '''\n    # Replace all non-alphanumeric characters with whitespace\n    string = re.sub(r'[^a-zA-Z0-9]','', string)\n\n    # Split the string into words and capitalize the first letter of each word\n    words = string.split()\n    capitalized_words = [word.capitalize() for word in words]\n\n    # Join the capitalized words back together and return the modified string\n    return''.join(capitalized_words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # split the string by spaces\n    words = str1.split()\n    \n    # loop through the words and capitalize each starting with a capital letter\n    for i in range(len(words)):\n        if words[i][0].isupper():\n            words[i] = words[i].capitalize()\n        else:\n            # check if the next word is a capital letter and if so, capitalize the current word too\n            if i < len(words)-1 and words[i+1][0].isupper():\n                words[i] = words[i].capitalize() +'' + words[i+1].capitalize()\n                # if the next word is not a capital letter, add a space to the current word and move on to the next one\n                i += 1\n    \n    # join the words with spaces\n    result =''.join(words)\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    # split the string into words\n    words = str1.split()\n    # capitalize the first word only and join the words with spaces\n    return words[0].capitalize() +'' +''.join(words[1:])"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef capital_words_spaces(string):\n    # Replace all non-word characters (except for underscores) with spaces\n    string = re.sub(r'[^a-zA-Z0-9_ ]+','', string)\n    # Split the string into words\n    words = string.split()\n    # Capitalize the first letter of each word and join the words with spaces\n    return''.join([word.capitalize() for word in words])"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef capital_words_spaces(string):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    pattern = r'\\b[A-Z][a-z]+\\b'\n    matches = re.findall(pattern, string)\n    result = ''\n    for match in matches:\n        words = match.split('_')\n        capitalized_words = [word.capitalize() for word in words]\n        result +=''.join(capitalized_words) +''\n    return result.strip()"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Define a regular expression to match capital words\n    capital_regex = re.compile(r'\\b[A-Z][a-z]+\\b')\n    \n    # Find all matches of capital words in the string\n    matches = capital_regex.finditer(str1)\n    \n    # Iterate over all matches and replace them with spaces\n    for match in matches:\n        # Get the matched word\n        word = match.group()\n        # Replace it with spaces\n        str1 = str1.replace(word,'' + word +'')\n    \n    # Return the modified string\n    return str1"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into words\n    words = re.findall(r'\\b[A-Z][a-z]+\\b', str1)\n    \n    # Join the words with spaces\n    return''.join(words)"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = []\n    for num_str in nums_str:\n        nums.append(float(num_str))\n    nums.sort()\n    return [str(num) for num in nums]"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Write a function to sort a given list of strings of numbers numerically.\n    \"\"\"\n    nums_list = []\n    for num_str in nums_str:\n        nums_list.append(int(num_str))\n    nums_list.sort()\n    return nums_list"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = [int(s) for s in nums_str]\n    nums.sort()\n    return nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # convert all strings to float and sort them numerically\n    nums = [float(x) for x in nums_str]\n    nums.sort()\n    # convert sorted floats back to strings and return as a list\n    return [str(x) for x in nums]"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Convert the list of strings to a list of integers\n    nums = [int(i) for i in nums_str]\n    # Sort the list of integers using the built-in sorted function\n    sorted_nums = sorted(nums)\n    # Convert the sorted list of integers back to a list of strings and return it\n    return [str(i) for i in sorted_nums]"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    nums_str.sort(key=lambda x: int(x))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    nums = []\n    for s in nums_str:\n        # remove non-numeric characters\n        s = ''.join(c for c in s if c.isdigit())\n        try:\n            nums.append(int(s))\n        except ValueError:\n            continue\n    nums.sort()\n    return nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    nums_str.sort(key=lambda x: float(x))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key=lambda x: float(x))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # split the list of strings into a list of lists\n    nums_list = []\n    for i in nums_str:\n        nums_list.append(list(i))\n\n    # sort each sublist numerically using the built-in sort function\n    for i in range(len(nums_list)):\n        nums_list[i].sort()\n\n    # join each sublist back into a string and append to a new list\n    sorted_nums_str = []\n    for i in nums_list:\n        sorted_nums_str.append(''.join(i))\n\n    return sorted_nums_str"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for item in test_list:\n        if item not in test_tup:\n            test_list.append(item)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # Convert the list to a set to remove duplicates\n    unique_list = set(test_list)\n    # Concatenate the tuple and the list\n    combined_list = unique_list.union(set(test_tup))\n    # Convert the combined list back to a tuple and return it\n    return tuple(combined_list)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # Append the tuple to the list\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    for item in test_list:\n        test_list.append(item)\n    \n    for item in test_tup:\n        test_list.append(item)\n        \n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    test_list.extend(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    # Base case: if i is the last element of the array, return True\n    if i == len(arr) - 1:\n        return True\n\n    # If i is not the last element, check if the parent is smaller than its children\n    if arr[i] > min(arr[2 * i + 1], arr[2 * i + 2]):\n        return False\n    else:\n        return check_min_heap_helper(arr, 2 * i + 1) and check_min_heap_helper(arr, 2 * i + 2)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_min_heap(arr):\n    '''\n    Check if a given array represents a min heap or not.\n    '''\n    n = len(arr)\n    for i in range(1, n):\n        if arr[i] < arr[0]:\n            return False\n    return True\n\ndef heapify(arr, n, i):\n    '''\n    Heapify the given array in O(n) time complexity.\n    '''\n    smallest = i\n    left = 2 * i + 1\n    right = 2 * i + 2\n\n    if left < n and arr[left] < arr[smallest]:\n        smallest = left\n\n    if right < n and arr[right] < arr[smallest]:\n        smallest = right\n\n    if smallest!= i:\n        arr[i], arr[smallest] = arr[smallest], arr[i]\n        heapify(arr, n, smallest)\n\ndef heap_sort(arr):\n    '''\n    Sort the given array in O(n log n) time complexity using heap sort.\n    '''\n    n = len(arr)\n\n    # Build max heap\n    for i in range(n//2 - 1, -1, -1):\n        heapify(arr, n, i)\n\n    # Extract elements from heap one by one\n    for i in range(n-1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]\n        heapify(arr, i, 0)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    This function checks if the given array represents a min heap or not.\n    '''\n    if i == 0:\n        return True\n    elif arr[i] < arr[i//2]:\n        return False\n    else:\n        return check_min_heap_helper(arr, i//2)\n\ndef is_min_heap(arr):\n    '''\n    This function checks if the given array is a min heap or not.\n    '''\n    return check_min_heap_helper(arr, len(arr)//2)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    \"\"\"\n    This function checks if the given array represents min heap or not.\n    \"\"\"\n    if i >= len(arr) // 2:\n        return True\n\n    left = 2 * i + 1\n    right = 2 * i + 2\n    min_index = i\n\n    if left < len(arr) and arr[left] < arr[min_index]:\n        min_index = left\n\n    if right < len(arr) and arr[right] < arr[min_index]:\n        min_index = right\n\n    if min_index!= i:\n        arr[i], arr[min_index] = arr[min_index], arr[i]\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0 or arr[i] <= arr[(i-1)//2]:\n        return True\n    else:\n        return False\n\ndef is_min_heap(arr):\n    '''\n    Check if the given array represents min heap or not.\n    '''\n    n = len(arr)\n    for i in range(n//2-1, -1, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0 or arr[i] >= arr[i//2]:\n        return True\n    else:\n        return False\n\ndef is_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n    for i in range(n//2):\n        if not check_min_heap_helper(arr, i):\n            return False\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr) // 2:\n        return True\n    if arr[i] < arr[2 * i + 1]:\n        return False\n    return check_min_heap_helper(arr, 2 * i + 1)\n\ndef is_min_heap(arr):\n    '''\n    Given an array, check if it represents a min heap or not.\n    '''\n    if len(arr) < 2:\n        return True\n    return check_min_heap_helper(arr, 0)\n\ndef print_min_heap(arr):\n    '''\n    Given an array, print the elements of the min heap.\n    '''\n    if not is_min_heap(arr):\n        print(\"Not a min heap\")\n    else:\n        for i in range(len(arr)):\n            print(arr[i], end=\" \")"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # If the index is out of range, return True\n    if i < 0 or i >= len(arr):\n        return True\n\n    # If the left child of the current index is less than or equal to the parent index, return False\n    if i * 2 + 1 < len(arr) and arr[i * 2 + 1] > arr[i]:\n        return False\n\n    # If the right child of the current index is less than or equal to the parent index, return False\n    if i * 2 + 2 < len(arr) and arr[i * 2 + 2] > arr[i]:\n        return False\n\n    # If the parent node is greater than or equal to its children, return False\n    return arr[i] >= min(arr[i * 2 + 1], arr[i * 2 + 2])\n\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # Initialize the last index of the array\n    n = len(arr) - 1\n\n    # Call the recursive helper function to check the min heap property of the array\n    return check_min_heap_helper(arr, n)\n"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    if i == 0:\n        return True\n    if arr[i] > arr[(i-1)//2]:\n        return False\n    return check_min_heap_helper(arr, (i-1)//2)\n\ndef check_min_heap(arr):\n    n = len(arr)\n    return check_min_heap_helper(arr, n-1)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    if i < 0 or i >= len(arr):\n        return False\n    \n    if i == 0:\n        return True\n    \n    parent = (i - 1) // 2\n    left_child = 2 * i + 1\n    right_child = 2 * i + 2\n    \n    if arr[parent] > arr[i]:\n        return False\n    \n    if left_child < len(arr) and arr[left_child] > arr[i]:\n        return False\n    \n    if right_child < len(arr) and arr[right_child] > arr[i]:\n        return False\n    \n    return check_min_heap_helper(arr, parent)\n\ndef check_min_heap(arr):\n    n = len(arr)\n    for i in range(n//2 - 1, -1, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n    return True"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n <= 0:\n        return None\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        result = jacobsthal_num(n-1) + jacobsthal_num(n-2)\n        return result"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def jacobsthal_num(n):\n    j_num = 0\n    for i in range(n):\n        j_num += i\n        j_num *= 2\n    return j_num"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (2 * jacobsthal_num(n-1)) - jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. \n    https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ \n    0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    jacobsthal_seq = [0, 1, 1]\n    count = 2\n    while count < n:\n        next_jacobsthal = sum(jacobsthal_seq)\n        jacobsthal_seq.append(next_jacobsthal)\n        count += 1\n    return jacobsthal_seq[n-1]"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. \n    https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    jacobsthal_nums = [0, 1]\n    for i in range(2, n+1):\n        jacobsthal_nums.append(jacobsthal_nums[i-1] + jacobsthal_nums[i-2])\n    return jacobsthal_nums[-1]"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number. \n    \"\"\"\n    jacobsthal_num = 1\n    jacobsthal_num_previous = 1\n    for i in range(2, n+1):\n        jacobsthal_num = (jacobsthal_num_previous * (2*i-1)) // i\n        jacobsthal_num_previous = jacobsthal_num\n    return jacobsthal_num"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth Jacobsthal number.\n    \"\"\"\n    j = 0\n    count = 1\n    while count < n:\n        j += 1\n        count = 0\n        for i in range(1, j+1):\n            if j % i == 0:\n                count += 1\n                break\n    return j"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n\n    jacobsthal_num = 1\n    for i in range(2, n+1):\n        jacobsthal_num = 2*jacobsthal_num + 1\n\n    return jacobsthal_num\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The\", n, \"th jacobsthal number is:\", jacobsthal_num(n))"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2)"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    # Create a list of tuples with unique elements\n    unique_list = list(set([i[0] for i in test_list]))\n\n    # Initialize min_count with a large number\n    min_count = len(unique_list)\n\n    # Sort the unique elements in ascending order\n    unique_list.sort()\n\n    # Initialize min_index with -1\n    min_index = -1\n\n    # Loop through the unique list\n    for i in range(len(unique_list)):\n        count = 1\n        # Loop through the remaining elements in the unique list\n        for j in range(i+1, len(unique_list)):\n            # If the current element is equal to the next element\n            if unique_list[j] == unique_list[i]:\n                # Increment the count\n                count += 1\n                # If the count is equal to K, update min_index\n                if count == K:\n                    min_index = i\n                    break\n            # If the count is equal to K, update min_index\n            if count == K:\n                min_index = i\n                break\n\n    # If min_index is still -1, there are not enough elements in the unique list\n    if min_index == -1:\n        return \"There are not enough elements in the unique list to form K distinct elements.\"\n\n    # Return the minimum element from the unique list\n    return unique_list[min_index]"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    Input: test_list - list of tuples, each tuple contains a key and a value\n             K - an integer that represents the minimum number of records to find\n    Output: A dictionary containing the key-value pairs of the k records with the minimum value, if any\n    '''\n    min_dict = {}\n    min_val = float('inf')\n    count = 0\n\n    for key, value in test_list:\n        if value < min_val:\n            min_dict = {key: value}\n            min_val = value\n            count = 1\n        elif value == min_val and count < K:\n            min_dict[key] = value\n            count += 1\n\n    return min_dict"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/\n    '''\n    test_list.sort()\n    min_list = test_list[:K]\n    return min_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    # sort the list by the second element of each tuple (which is the key)\n    test_list.sort(key=lambda x: x[1])\n\n    # initialize variables for minimum and count\n    min_value = float('inf')\n    count = 0\n\n    # loop through the sorted list\n    for i in range(K):\n        # if the current value is less than minimum, update minimum\n        if test_list[i][1] < min_value:\n            min_value = test_list[i][1]\n            count = 1\n        # if current value is equal to minimum, increment count\n        elif test_list[i][1] == min_value:\n            count += 1\n        # if current value is greater than minimum, decrement count\n        else:\n            count -= 1\n            if count < 0:\n                count = 0\n                min_value = float('inf')\n\n    # return the minimum value\n    return min_value"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Sort the test list by frequency\n    sorted_list = sorted(test_list, key=lambda x: x[1], reverse=True)\n\n    # Initialize variables\n    min_k_list = []\n\n    # Traverse through the sorted list and add the required number of elements\n    count = 0\n    for i in range(len(sorted_list)):\n        if count < K:\n            min_k_list.append(sorted_list[i])\n            count += 1\n        else:\n            break\n\n    # Return the minimum k records from the sorted list\n    return min_k_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    min_count = float('inf')\n    min_record = None\n    \n    for record in test_list:\n        if len(record) == K:\n            count = record.count(True)\n            if count < min_count:\n                min_count = count\n                min_record = record\n                \n    return min_record"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    test_list.sort(key=lambda x: x[0]) # sort the list based on the first element of each tuple\n    min_count = 0\n    min_val = float('inf')\n    for i in range(len(test_list)):\n        if test_list[i][1] < min_val: # if the current record's second element is less than the current minimum value\n            min_count = i + 1 # update the minimum count and value\n            min_val = test_list[i][1]\n    return min_count"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    min_set = set()\n    count = 0\n    for i in range(len(test_list)):\n        if count < K:\n            min_set.add(test_list[i])\n            count += 1\n        else:\n            min_set.discard(min_set.pop())\n            min_set.add(test_list[i])\n    return min(min_set)"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    \n    Args:\n    test_list: list of tuples, each tuple contains three elements - (name, age, marks)\n    K: integer, number of records required to find the minimum\n    \n    Returns:\n    minimum_record: tuple, contains the name, age, marks of the minimum record among the first K records from the tuple list\n    '''\n\n    # sort the test_list based on the age\n    test_list.sort(key=lambda x: x[1])\n\n    # initialize variables to keep track of the minimum record and the count of the minimum records found so far\n    minimum_record = None\n    count = 0\n\n    # loop through the first K elements of the sorted test_list\n    for i in range(K):\n        # if the current element is not equal to the previous minimum record\n        if i == 0 or test_list[i][0]!= test_list[i-1][0] or test_list[i][1]!= test_list[i-1][1]:\n            # increment the count of minimum records found\n            count += 1\n            # if the count is equal to k or if the current element is the minimum record\n            if count == K or (i == K-1 and test_list[i][0] == minimum_record[0]):\n                # update the minimum record\n                minimum_record = test_list[i]\n\n    return minimum_record"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Sort the list based on the first element of each tuple\n    test_list.sort()\n\n    # Initialize variables for minimum k records\n    min_k_records = []\n    min_k_sum = float('inf')\n\n    # Iterate over the list and add records to min_k_records until len(min_k_records) >= K\n    for i in range(len(test_list)):\n        if len(min_k_records) < K:\n            min_k_records.append(test_list[i])\n            min_k_sum = min(min_k_sum, sum(record[0] for record in min_k_records))\n        else:\n            # Remove the smallest record and add the new record to the list\n            smallest_record = min_k_records.pop(0)\n            min_k_sum -= smallest_record[0]\n            min_k_sum += test_list[i][0]\n            min_k_records.append(test_list[i])\n            min_k_sum = min(min_k_sum, sum(record[0] for record in min_k_records))\n\n    # Return the minimum k records with their sum\n    return min_k_records, min_k_sum"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    common = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common.append(l1[i])\n    return common"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    common = []\n    for i in range(min(len(l1), len(l2), len(l3))):\n        if l1[i] == l2[i] == l3[i]:\n            common.append(l1[i])\n    return common"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    \n    common_list = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common_list.append(l1[i])\n    return common_list"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index.\n    Write a function to find common elements from three lists. The function should return a list.\n    \"\"\"\n    index_list = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            if l1[i] not in index_list:\n                index_list.append(l1[i])\n    return index_list"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] and l1[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    common = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common.append(l1[i])\n    return common"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. \n    Write a function to find common elements from three lists. The function should return a list.\n    \"\"\"\n    # Initialize an empty list to store common elements\n    common_elements = []\n    \n    # Iterate through each element in l1\n    for element in l1:\n        # Check if element exists in l2 and l3\n        if element in l2 and element in l3:\n            # If element exists in both lists, add it to common_elements list\n            common_elements.append(element)\n    \n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    common = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common.append(l1[i])\n    return common"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2[i] and l1[i] in l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    This function takes a list of numbers as input and returns the second smallest number in the list.\n    \"\"\"\n    if len(numbers) < 2:\n        return None\n    else:\n        return sorted(numbers)[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort() # sort the list in ascending order\n    if len(numbers) == 1: # if the list contains only one number, return None\n        return None\n    else:\n        return numbers[1] # return the second smallest number"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for number in numbers:\n        if number < smallest:\n            second_smallest = smallest\n            smallest = number\n        elif number < second_smallest:\n            second_smallest = number\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort() # sort the list in ascending order\n    return numbers[1] # return the second smallest number"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Find the second smallest number in a list.\n\n    :param numbers: A list of numbers.\n    :return: The second smallest number in the list.\n    \"\"\"\n    if len(numbers) < 2:\n        return None\n\n    smallest = numbers[0]\n    second_smallest = numbers[1]\n\n    for number in numbers[2:]:\n        if number < smallest:\n            second_smallest = smallest\n            smallest = number\n        elif number < second_smallest and number!= smallest:\n            second_smallest = number\n\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        raise ValueError(\"List must have at least 2 elements.\")\n    else:\n        smallest = numbers[0]\n        second_smallest = numbers[1]\n        \n        for num in numbers[2:]:\n            if num < smallest:\n                second_smallest = smallest\n                smallest = num\n            elif num < second_smallest and num!= smallest:\n                second_smallest = num\n        \n        return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n\n    # Sort the list in ascending order\n    numbers.sort()\n\n    # Return the second smallest number\n    return numbers[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Find the second smallest number in a list.\n\n    Args:\n        numbers: a list of numbers\n\n    Returns:\n        the second smallest number in the list, or None if the list is empty or has only one element\n    \"\"\"\n    if len(numbers) < 2:\n        return None\n    else:\n        return min(numbers[1:], key=lambda x: x)"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(?=b*b*)'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(?=b)'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. \n    https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'ab{1,}'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = re.compile(r'a(b)*')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'ab*'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's.\n    '''\n    pattern = r'a.*?b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(?=b*b)'\n    match = re.search(pattern, text)\n    return match is not None"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a[^b]*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = re.compile(r\"a(?!b)\")\n    result = pattern.search(text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a.+b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i][::-1] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    \n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1] and test_list[j] == test_list[i][::-1]:\n                count += 1\n                \n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    \"\"\"\n    Count the number of reverse pairs in a given list of strings.\n    \"\"\"\n\n    def count_reverse_pairs_helper(start, end, pairs):\n        \"\"\"\n        Helper function to count the reverse pairs in a sublist.\n        \"\"\"\n        if start >= end:\n            return\n\n        mid = start + (end - start) // 2\n        count_reverse_pairs_helper(start, mid, pairs)\n        count_reverse_pairs_helper(mid + 1, end, pairs)\n\n        left_count = 0\n        right_count = 0\n\n        for i in range(mid + 1, end + 1):\n            if test_list[i][:mid] == test_list[start][:mid][::-1]:\n                left_count += 1\n\n        for i in range(start, mid + 1):\n            if test_list[i][:end - mid] == test_list[mid + 1][:end - mid][::-1]:\n                right_count += 1\n\n        pairs.append((start, end, left_count, right_count))\n\n    pairs = []\n    count_reverse_pairs_helper(0, len(test_list) - 1, pairs)\n\n    reverse_pairs_count = 0\n\n    for pair in pairs:\n        if pair[2] % 2 == 1 and pair[3] % 2 == 1:\n            reverse_pairs_count += 1\n\n    return reverse_pairs_count\n"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n\n    # initializing a dictionary to store the count of reverse strings\n    reverse_count = {}\n\n    # looping through the given string list\n    for string in test_list:\n\n        # converting the string into a list of characters\n        string_list = list(string)\n\n        # reversing the list of characters\n        reversed_list = string_list[::-1]\n\n        # converting the reversed list back into a string\n        reversed_string = ''.join(reversed_list)\n\n        # checking if the reversed string is already present in the dictionary\n        if reversed_string in reverse_count:\n\n            # incrementing the count of reverse strings for the given string\n            reverse_count[reversed_string] += 1\n\n        else:\n\n            # adding the reversed string to the dictionary with a count of 1\n            reverse_count[reversed_string] = 1\n\n    # initializing a variable to store the count of pairs of reverse strings\n    pair_count = 0\n\n    # looping through the dictionary to count the pairs of reverse strings\n    for count in reverse_count.values():\n\n        # adding the count of reverse strings to the pair count variable\n        pair_count += count * (count - 1) / 2\n\n    # returning the pair count\n    return pair_count\n"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    # Helper function to check if a string is a reverse of another string\n    def is_reverse(str1, str2):\n        return str1 == str2[::-1]\n    \n    # Initialize variables to count the number of pairs of reverse strings\n    count = 0\n    \n    # Iterate through the list of strings\n    for i in range(len(test_list)):\n        # Iterate through the remaining strings in the list\n        for j in range(i+1, len(test_list)):\n            # Check if the two strings are reverse pairs\n            if is_reverse(test_list[i], test_list[j]):\n                count += 1\n    \n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    n = len(test_list)\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if test_list[i][::-1] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # create a dictionary to store the frequency of each character in the given list\n    freq = {}\n    for string in test_list:\n        for char in string:\n            freq[char] = freq.get(char, 0) + 1\n    \n    # find the pairs of characters that appear more frequently in reverse order\n    pairs = 0\n    for char in freq:\n        if freq[char] % 2 == 1:\n            char_reverse = char[::-1]\n            if char_reverse in freq and freq[char_reverse] % 2 == 0:\n                pairs += 1\n    \n    return pairs"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    # create a dictionary to store the count of reverse pairs\n    reverse_dict = {}\n    # iterate through the list\n    for i in range(len(test_list)):\n        # check if the current string is a reverse of the previous string\n        if i > 0 and test_list[i][::-1] in test_list[i-1][::-1]:\n            # if it is, add to the count of reverse pairs in the dictionary\n            if test_list[i][::-1] in reverse_dict:\n                reverse_dict[test_list[i][::-1]] += 1\n            else:\n                reverse_dict[test_list[i][::-1]] = 1\n        # if it's not, add the count of reverse pairs to the dictionary\n        else:\n            if test_list[i][::-1] in reverse_dict:\n                reverse_dict[test_list[i][::-1]] += 1\n            else:\n                reverse_dict[test_list[i][::-1]] = 1\n    # return the count of reverse pairs in the dictionary\n    return len(reverse_dict)"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Create a dictionary to store the counts\n    counts = {}\n    # Iterate over each element in the list\n    for element in list1:\n        # Convert the element to a tuple\n        tup = tuple(element)\n        # Check if the tuple is already in the dictionary\n        if tup not in counts:\n            # If not, add it and set its count to 1\n            counts[tup] = 1\n        else:\n            # If it is, increment its count\n            counts[tup] += 1\n    return counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Creating a dictionary to store the counts of each sublist\n    count_dict = {}\n    for i in range(len(list1)):\n        # Converting each list to a tuple and checking if the tuple is already present in the dictionary\n        if (tuple(list1[i]),) not in count_dict:\n            count_dict[(tuple(list1[i]),)] = 1\n        else:\n            count_dict[(tuple(list1[i]),)] += 1\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(lst):\n    \"\"\"\n    Count the number of unique sublists in a given list.\n    \"\"\"\n    # Convert the list to a set of tuples, so that duplicates are automatically removed\n    sublists = set(tuple(x) for x in lst)\n    # Count the number of unique sublists\n    count = len(sublists)\n    # Create a dictionary with the sublist tuples as keys and the count as values\n    sublist_count = {sublist: lst.count(sublist) for sublist in sublists}\n    return sublist_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # create an empty dictionary\n    result_dict = {}\n    # iterate through the list\n    for lst in list1:\n        # convert the list to a tuple and add it to the dictionary\n        if (tuple(lst),) in result_dict:\n            result_dict[(tuple(lst),)] += 1\n        else:\n            result_dict[(tuple(lst),)] = 1\n    # return the dictionary\n    return result_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count_dict = {}\n    for item in list1:\n        if tuple(item) in count_dict:\n            count_dict[tuple(item)] += 1\n        else:\n            count_dict[tuple(item)] = 1\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublist_count = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in sublist_count:\n            sublist_count[sublist_tuple] += 1\n        else:\n            sublist_count[sublist_tuple] = 1\n    return sublist_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count_dict = {}\n    for sublist in list1:\n        count_dict[tuple(sublist)] = count_dict.get(tuple(sublist), 0) + 1\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # create a dictionary to store the number of times each tuple appears in the original list\n    count_dict = {}\n    # loop through each element of the original list\n    for element in list1:\n        # convert the element to a tuple and check if it's already in the dictionary\n        if tuple(sorted(element)) in count_dict:\n            count_dict[tuple(sorted(element))]+=1\n        # if the tuple is not in the dictionary, add it with a count of 1\n        else:\n            count_dict[tuple(sorted(element))] = 1\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # convert list to set to remove duplicates\n    unique_sublists = set(tuple(sorted(x)) for x in list1)\n    # create dictionary to store count of unique sublists\n    count_dict = {}\n    for sublist in unique_sublists:\n        if sublist not in count_dict:\n            count_dict[sublist] = 0\n        count_dict[sublist] += 1\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # create an empty dictionary to store the count of each sublist\n    sublist_count = {}\n    \n    # loop through the original list\n    for i in range(len(list1)):\n        # check if the current list is a sublist of the previous list\n        for j in range(i+1, len(list1)):\n            # convert the two sublists to tuples and check if they are equal\n            if tuple(list1[i]) == tuple(list1[j]):\n                # if they are equal, increment the count of the tuple in the dictionary\n                if tuple(list1[i]) in sublist_count:\n                    sublist_count[tuple(list1[i])] += 1\n                else:\n                    sublist_count[tuple(list1[i])] = 1\n    \n    return sublist_count"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # check if the string contains any non-digit characters\n    if not num.replace('.', '', 1).isdigit():\n        return False\n    # remove any leading or trailing zeros\n    num = num.lstrip('0')\n    # check if the string contains more than one decimal point\n    if '.' in num or num.count('.') > 1:\n        return False\n    # split the string into a list of integers and decimal points\n    split_num = [int(x) for x in num.split('.')]\n    # check that the list has at least two elements (integer and decimal point)\n    if len(split_num) < 2:\n        return False\n    # check that the integer and decimal point are both within the range of a 32-bit signed integer\n    if split_num[0] < -2**31 or split_num[0] > 2**31 - 1 or split_num[1] > 2**15 - 1:\n        return False\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    if '.' in num and len(num.split('.')[1]) <= 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    \"\"\"\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    \"\"\"\n    num_list = []\n    decimal_found = False\n\n    # Iterate through the string\n    for char in num:\n        # If the character is a digit\n        if char.isdigit():\n            # Append the digit to the list\n            num_list.append(int(char))\n        # If the character is a decimal point\n        elif char == '.':\n            # Check if the number already has a decimal point\n            if decimal_found:\n                return False\n            else:\n                decimal_found = True\n\n    # Check if the number has exactly 2 digits after the decimal point\n    if len(num_list) == 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    if '.' not in num:\n        return False\n    if '.' in num:\n        dot_index = num.index('.')\n        precision = len(num) - dot_index - 1\n        if precision!= 2:\n            return False\n        else:\n            return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if '.' not in num:\n        return False\n    num = num.replace('.', '')\n    if len(num) > 2:\n        return False\n    if not num.isdigit():\n        return False\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        num = float(num)\n        if num % 1 == 0:\n            if abs(num) % 1 == 0:\n                return True\n        return False\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    if not num.replace('.', '').isdigit():\n        return False\n    parts = num.split('.')\n    if len(parts)!= 2:\n        return False\n    if len(parts[0]) > 10:\n        return False\n    for char in parts[1]:\n        if not char.isdigit() and char!= '.':\n            return False\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    '''\n    This function checks whether a given string is a decimal number with a precision of 2.\n    '''\n    if '.' in num and len(num.split('.')[1]) == 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        # try to convert the string to a float with 2 decimal places\n        float(num)\n        # if the conversion succeeds, we assume the string is a decimal number with a precision of 2\n        return True\n    except ValueError:\n        # if the conversion fails, the string is not a decimal number with a precision of 2\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == len(set(arr)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == len(arr):\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n\n    unique = True\n    for i in range(len(arr)-1):\n        if arr[i] == arr[i+1]:\n            unique = False\n            break\n    if unique == True and len(arr) > 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # Using set to remove duplicates from list\n    unique_arr = list(set(arr))\n\n    # Checking whether the length of the unique_arr is 1 or not\n    if len(unique_arr) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr)!= len(set(arr)):\n        return False\n    return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    \"\"\"\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    \"\"\"\n    unique = []\n    for num in arr:\n        if num not in unique:\n            unique.append(num)\n        else:\n            return False\n    return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 1:\n        return True\n\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] == arr[j]:\n                return False\n\n    return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique = True\n    for i in range(len(arr)):\n        if arr.count(arr[i])!= len(arr):\n            unique = False\n            break\n    return unique"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique_set = set(arr)\n    if len(unique_set) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    This function takes a list of numbers and returns True if the list contains only one distinct element and False otherwise.\n    '''\n    unique_elements = set(arr)\n    if len(unique_elements) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    \"\"\"\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    \"\"\"\n    if monthnum3 in [4, 6, 9, 11]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\n    if monthnum3 in range(1, 13):\n        if months[monthnum3-1] == \"February\" and (monthnum3 % 4 == 0 and (monthnum3 % 100!= 0 or monthnum3 % 400 == 0)):\n            return True\n        elif months[monthnum3-1] in [\"April\", \"June\", \"September\", \"November\"]:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum):\n    if monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum in [4, 6, 9, 11]:\n        return False\n    else:\n        raise ValueError('Invalid month number')"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    \"\"\"\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    \"\"\"\n    days_in_months = {1: 31, 2: 28, 3: 31, 4: 30, 5: 31, 6: 30, 7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31}\n    if monthnum3 in days_in_months:\n        if days_in_months[monthnum3] == 28 and monthnum3 == 2:\n            return True\n        else:\n            return False\n    else:\n        return \"Invalid month number\""
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 2:\n        return 30\n    else:\n        return 31"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    \n    # Check if the input is valid\n    if not isinstance(monthnum3, int) or monthnum3 < 1 or monthnum3 > 12:\n        raise ValueError('Invalid month number')\n    \n    # Check if the month number has 30 days\n    if monthnum3 in (1, 3, 5, 7, 8, 10, 12):\n        return True\n    elif monthnum3 == 2:\n        if year % 4 == 0 and (year % 100!= 0 or year % 400 == 0):\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    month_names = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\n    if monthnum3 in range(1,13):\n        if monthnum3 == 2:\n            if month_names[monthnum3-1] in [\"February\", \"April\", \"June\", \"September\", \"November\"]:\n                return \"30 days\"\n            else:\n                return \"31 days\"\n        elif monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n            return \"30 days\"\n        else:\n            return \"31 days\"\n    else:\n        return \"Invalid month number\""
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n\n    if monthnum3 == 2:\n        return True\n    elif monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        return True\n    elif monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 2:\n        if (year % 4 == 0 and year % 100!= 0) or year % 400 == 0:\n            return True\n        else:\n            return False\n    elif monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        return True\n    else:\n        return False"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_min_diff(arr, n):\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize minimum difference as infinity\n    min_diff = float('inf')\n\n    # Traverse through the array and find the minimum difference\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = arr[j] - arr[i]\n            if diff < min_diff:\n                min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array and its length as input and returns the minimum difference between any two elements in the array.\n    \"\"\"\n    # Sort the array in non-decreasing order\n    arr.sort()\n    min_diff = float('inf')\n    i = 0\n    j = 1\n    while j < n:\n        diff = abs(arr[j] - arr[i])\n        if diff < min_diff:\n            min_diff = diff\n        if arr[j] > arr[i]:\n            i += 1\n        else:\n            j += 1\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_min_diff(arr, n):\n    arr.sort()\n    min_diff = arr[-1] - arr[0]\n    for i in range(1, n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_min_diff(arr, n):\n    # Sorting the array in ascending order\n    arr.sort()\n    # Initializing the minimum difference and the minimum element\n    min_diff = float('inf')\n    min_element = float('inf')\n    # Traversing through the sorted array and finding the minimum difference\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n            min_element = arr[i]\n        elif diff == min_diff:\n            min_element = min(min_element, arr[i+1])\n    # Returning the minimum difference and the minimum element\n    return min_diff, min_element"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_min_diff(arr, n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array.\n    '''\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def merge(arr, l, m, r):\n    n1 = m - l + 1\n    n2 = r - m\n    \n    L = [0] * n1\n    R = [0] * n2\n    \n    for i in range(0, n1):\n        L[i] = arr[l + i]\n    \n    for j in range(0, n2):\n        R[j] = arr[m + 1 + j]\n    \n    i = 0\n    j = 0\n    k = l\n    \n    while i < n1 and j < n2:\n        if L[i] <= R[j]:\n            arr[k] = L[i]\n            i += 1\n        else:\n            arr[k] = R[j]\n            j += 1\n        k += 1\n    \n    while i < n1:\n        arr[k] = L[i]\n        i += 1\n        k += 1\n    \n    while j < n2:\n        arr[k] = R[j]\n        j += 1\n        k += 1\n\n\ndef mergeSort(arr, l, r):\n    if l < r:\n        m = l + (r - l) // 2\n        \n        mergeSort(arr, l, m)\n        mergeSort(arr, m + 1, r)\n        \n        merge(arr, l, m, r)\n\n\ndef find_min_diff(arr, n):\n    mergeSort(arr, 0, n - 1)\n    diff = float('inf')\n    for i in range(0, n - 1):\n        diff = min(diff, arr[i + 1] - arr[i])\n    return diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array and the length of the array as input.\n    It then finds the minimum difference between any two elements in the array.\n    The function returns the minimum difference.\n    \"\"\"\n    min_diff = float('inf') # initial value of minimum difference\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(arr[i]-arr[j]) # calculate absolute difference\n            if diff < min_diff:\n                min_diff = diff # update minimum difference if necessary\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_min_diff(arr, n): \n    # Sort the array in ascending order \n    arr.sort() \n\n    # Initialize minimum difference as positive infinity \n    min_diff = float('inf') \n\n    # Traverse through the array \n    for i in range(n-1): \n        # Calculate difference between current element and next element \n        diff = arr[i+1] - arr[i] \n\n        # If the difference is less than minimum difference, update minimum difference \n        if diff < min_diff: \n            min_diff = diff \n\n    return min_diff \n"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array and its length as input and returns the minimum difference between any two elements in the array.\n    The difference between two elements is calculated as the absolute difference between their indices in the array.\n    \"\"\"\n\n    min_diff = float('inf')\n\n    # Sort the array in ascending order\n    arr.sort()\n\n    for i in range(n - 1):\n        diff = abs(arr[i] - arr[i + 1])\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function finds the minimum difference between any two elements in a given array.\n    \"\"\"\n    min_diff = float('inf')\n    prev = None\n    \n    for i in range(n):\n        if prev is not None:\n            diff = arr[i] - prev\n            min_diff = min(min_diff, diff)\n        \n        prev = arr[i]\n        \n    return min_diff"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    # initialize variable to store count\n    count = 0\n    \n    # iterate over each character in the string\n    for char in str:\n        # check if the character is a digit\n        if char.isdigit():\n            # increment count by 1\n            count += 1\n    \n    # return the count\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_ctr(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_ctr(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef is_polite(n):\n    if n <= 2:\n        return n\n    else:\n        # find the nth polite number\n        if n % 2 == 0:\n            result = 2 + math.ceil(math.log2(n - 2))\n        else:\n            result = 3 + math.floor(math.log2(n - 3))\n        return result"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math \n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n < 0:\n        return None\n    elif n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        num = 4\n        for i in range(3, n):\n            num += 2\n        return num"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef is_polite(n):\n    '''\n    This function takes an integer n and returns True if n is a polite number, False otherwise. \n    A polite number is a positive integer that is divisible by 11 and contains no adjacent digits with the same parity. \n    '''\n\n    # Check if n is a positive integer\n    if not isinstance(n, int) or n < 1:\n        return False\n\n    # Check if n is divisible by 11\n    if n % 11!= 0:\n        return False\n\n    # Iterate through the digits of n and check if there are any adjacent digits with the same parity\n    digits = [int(digit) for digit in str(n)]\n    for i in range(len(digits) - 1):\n        if digits[i] % 2 == digits[i + 1] % 2:\n            return False\n\n    return True"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    This function takes an integer n and returns the nth polite number.\n    The nth polite number is defined as the number which is the sum of all the positive integers up to n.\n    \"\"\"\n    # Initialize sum of numbers up to n\n    total = sum(range(1, n+1))\n    \n    # Calculate the sum of numbers up to nth prime\n    nth_prime = math.factorial(n-1)\n    \n    # Return the sum of numbers up to nth prime\n    return total + nth_prime"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        # initialize the variables for the nth polite number\n        prev = 1\n        curr = 2\n        count = 2\n        # loop to calculate the nth polite number\n        while count < n:\n            # update the variables for the next iteration\n            prev, curr = curr, prev + curr\n            count += 1\n        return curr"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    polite_numbers = [1, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101]\n    return polite_numbers[n-1]\n\nn = 10\n\nprint(\"The\", n, \"th polite number is:\", is_polite(n))"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    This function takes an integer n and returns the nth polite number.\n    '''\n    if n < 1:\n        return None\n    \n    polite_number = 0\n    count = 1\n    i = 1\n    \n    while count < n:\n        if math.gcd(i, polite_number) == 1:\n            polite_number += i\n            count += 1\n        i += 1\n    \n    return polite_number"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number.\n    '''\n    # Initialize count to 0\n    count = 0\n\n    # Iterate from 1 to n-1\n    for i in range(1, n):\n        # Check if the number is divisible by 5\n        if i % 5 == 0:\n            # If it is, increment count by 1\n            count += 1\n        # Check if the number is divisible by 7\n        elif i % 7 == 0:\n            # If it is, increment count by 1\n            count += 1\n\n    # Return the count of polite numbers\n    return count"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef is_polite(n):\n    if n == 1:\n        return True\n    else:\n        # find the square root of n\n        sqrt_n = int(math.sqrt(n))\n        # iterate from 2 to sqrt(n)\n        for i in range(2, sqrt_n+1):\n            if n%i == 0:\n                return False\n        # if no factor found, return True\n        return True"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    \"\"\"\n    # Define the list of polite numbers\n    polite_numbers = [13, 17, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\n    # Loop through the list of polite numbers and check if n is in it\n    for i in range(len(polite_numbers)):\n        if n == polite_numbers[i]:\n            return True\n\n    # If n is not in the list, check for the next number in the list\n    for i in range(len(polite_numbers)):\n        if n == polite_numbers[i] + 1:\n            return True\n\n    # If n is still not in the list, check for the next number in the list\n    for i in range(len(polite_numbers)):\n        if n == polite_numbers[i] + 2:\n            return True\n\n    # If n is still not in the list, check for the next number in the list\n    for i in range(len(polite_numbers)):\n        if n == polite_numbers[i] + 3:\n            return True\n\n    # If n is still not in the list, check for the next number in the list\n    for i in range(len(polite_numbers)):\n        if n == polite_numbers[i] + 4:\n            return True\n\n    # If n is still not in the list, check for the next number in the list\n    for i in range(len(polite_numbers)):\n        if n == polite_numbers[i] + 5:\n            return True\n\n    # If n is still not in the list, check for the next number in the list\n    for i in range(len(polite_numbers)):\n        if n == polite_numbers[i] + 6:\n            return True\n\n    # If n is still not in the list, check for the next number in the list\n    for i in range(len(polite_numbers)):\n        if n == polite_numbers[i] + 7:\n            return True\n\n    # If n is still not in the list, check for the next number in the list\n    for i in range(len(polite_numbers)):\n        if n == polite_numbers[i] + 8:\n            return True\n\n    # If n is still not in the list, check for the next number in the list\n    for i in range(len(polite_numbers)):\n        if n == polite_numbers[i] + 9:\n            return True\n\n    # If n is still not in the list, return False\n    return False"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n\n    # Initialize an empty list to store the pairs of consecutive items\n    pairs = []\n\n    # Loop through the list and for each item in the list, check if the next item exists in the list\n    for i in range(len(l1)-1):\n        # If the next item exists in the list, add a tuple of the current and next item to the pairs list\n        if l1[i+1] in l1[i+2:]:\n            pairs.append((l1[i], l1[i+1]))\n\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1) - 1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_wise(lst):\n    n = len(lst)\n    result = []\n    for i in range(n - 1):\n        result.append((lst[i], lst[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    result = []\n    for i in range(len(l1)-1):\n        result.append([l1[i], l1[i+1]])\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pair_list = []\n    for i in range(len(l1)-1):\n        pair_list.append((l1[i], l1[i+1]))\n    return pair_list"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    n = len(l1)\n    for i in range(n-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    \"\"\"\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The funtion gets as input a list of numbers and the sum,\n    \"\"\"\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    This function takes two parameters:\n    arr - list of integers\n    sum - integer representing the target sum\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    This function counts the number of pairs whose sum is equal to'sum'.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    # Create a new empty list to store the difference\n    diff_list = []\n    \n    # Iterate through the first list and check if it exists in the second list\n    for elem in li1:\n        if elem not in li2:\n            # If it doesn't exist, add it to the diff_list\n            diff_list.append(elem)\n            \n    # Return the diff_list\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Write a python function to get the difference between two lists.\n\n    Args:\n        li1: A list of numbers.\n        li2: A list of numbers.\n\n    Returns:\n        A list containing the elements of `li1` that are not in `li2`.\n\n    Example:\n        li1 = [1, 2, 3, 4, 5]\n        li2 = [2, 4, 6]\n        print(Diff(li1, li2))  # Output: [1, 3, 5]\n    \"\"\"\n\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff_list = []\n    for i in li1:\n        if i not in li2:\n            diff_list.append(i)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Write a python function to get the difference between two lists.\n    \"\"\"\n    diff_list = []\n    for i in range(len(li1)):\n        if li1[i] not in li2:\n            diff_list.append(li1[i])\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff_list = []\n    for i in li1:\n        if i not in li2:\n            diff_list.append(i)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff_list = [x for x in li1 if x not in li2]\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns a new list containing the elements of list1 that are not present in list2.\n    \"\"\"\n    diff = []\n    for i in li1:\n        if i not in li2:\n            diff.append(i)\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input and returns the difference between them.\n    '''\n    return [x for x in li1 if x not in li2]"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff_set = set(li1) - set(li2)\n    return list(diff_set)"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2!= 0:\n            sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i%2!=0:\n            sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    #initialize sum to zero\n    sum = 0\n    \n    #iterate through first n odd natural numbers\n    for i in range(1, n+1):\n        #if the number is odd, square it and add it to the sum\n        if i % 2 == 1:\n            sum += i ** 4\n    \n    #return the sum of fourth power of odd natural numbers\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum_of_fourth_powers = 0\n    i = 1\n    while i <= n:\n        sum_of_fourth_powers += i**4\n        i += 2\n    return sum_of_fourth_powers"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n, 2):\n        sum += i ** 4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_num_sum(n) : \n    sum = 0 \n    for i in range(2, 2 * n, 2) : \n        sum += i ** 4 \n    return sum \n\nn = int(input(\"Enter the value of n: \")) \nresult = odd_num_sum(n) \nprint(\"The sum of fourth power of first {} odd natural numbers is {}\".format(n, result)) "
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum_of_powers = 0\n    for i in range(n):\n        num = i + 1\n        if num % 2 == 1:\n            power = num ** 4\n            sum_of_powers += power\n    return sum_of_powers"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i in exp:\n        if i in ['(', '[', '{']:\n            stack.append(i)\n        elif i in [')', ']', '}']:\n            if not stack:\n                return False\n            if i == ')' and stack[-1] == '(':\n                stack.pop()\n            elif i == ']' and stack[-1] == '[':\n                stack.pop()\n            elif i == '}' and stack[-1] == '{':\n                stack.pop()\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    # create a stack\n    stack = deque()\n    \n    # loop through the expression\n    for char in exp:\n        # if char is an opening bracket, push it onto the stack\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        # if char is a closing bracket, pop the last opening bracket from the stack\n        elif char in [')', '}', ']']:\n            if not stack:\n                return \"Error: Unmatched closing bracket.\"\n            if char == ')' and stack[-1]!= '(':\n                return \"Error: Unmatched closing bracket.\"\n            if char == '}' and stack[-1]!= '{':\n                return \"Error: Unmatched closing bracket.\"\n            if char == ']' and stack[-1]!= '[':\n                return \"Error: Unmatched closing bracket.\"\n            stack.pop()\n    \n    # if the stack is empty, the expression is balanced\n    if not stack:\n        return \"Balanced\"\n    else:\n        return \"Error: Unmatched opening bracket.\""
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for c in exp:\n        if c == '(':\n            stack.append(c)\n        elif c == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                return False\n            top = stack.pop()\n            if char == ')' and top!= '(':\n                return False\n            elif char == '}' and top!= '{':\n                return False\n            elif char == ']' and top!= '[':\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char.isalnum():\n            stack.append(char)\n        else:\n            if not stack or stack.pop() not in ['(', ')']:\n                return False\n    return stack == []"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for i in exp:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if not stack:\n                return False\n            else:\n                stack.pop()\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                return False\n            top_char = stack.pop()\n            if char in ['(', '{']:\n                if not top_char in [')', '}']:\n                    return False\n            elif char in [')', ']']:\n                if not top_char in ['(', '{']:\n                    return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                return False\n            top = stack.pop()\n            if char in ['(', '{']:\n                if top in ['(', '{']:\n                    continue\n                else:\n                    return False\n            elif char in [')', '}']:\n                if top in ['{', '[']:\n                    continue\n                else:\n                    return False\n            elif char in ['[', ']']:\n                if top in ['[', '(', '{']:\n                    continue\n                else:\n                    return False\n    if not stack:\n        return True\n    else:\n        return False"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n\n    stack = deque()\n    for i in exp:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if stack:\n                stack.pop()\n            else:\n                return False\n\n    if stack:\n        return False\n    return True\n"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    filtered_words = []\n    for word in words:\n        if len(word)!= K:\n            filtered_words.append(word)\n    return''.join(filtered_words)\n"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    \"\"\"\n    Write a function to remove all the words with k length in the given string.\n    \"\"\"\n    # Split the string into words\n    words = test_str.split()\n    \n    # Create an empty list to store the non-k-length words\n    new_words = []\n    \n    # Loop through each word in the list\n    for word in words:\n        # If the length of the word is not equal to K, add it to the new list\n        if len(word)!= K:\n            new_words.append(word)\n    \n    # Join the new list of words into a string and return it\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Convert the string to lowercase\n    test_str = test_str.lower()\n    # Split the string into words\n    words = test_str.split()\n    # Initialize an empty list to store the words with length K\n    k_words = []\n    # Iterate over the words\n    for word in words:\n        # Check if the length of the current word is equal to K\n        if len(word) == K:\n            # If it is, append it to the list of words with length K\n            k_words.append(word)\n    # Join the words with a space and return the result\n    return''.join(k_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    return''.join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n\n    # Split the string into words\n    words = test_str.split()\n\n    # Initialize an empty list to store the words with k length\n    words_with_k_length = []\n\n    # Iterate through the words\n    for word in words:\n\n        # Check if the length of the word is equal to K\n        if len(word) == K:\n\n            # If the word is not already in the words_with_k_length list, add it\n            if word not in words_with_k_length:\n                words_with_k_length.append(word)\n\n    # Join the words with k length into a string and return it\n    return''.join(words_with_k_length)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    filtered_words = []\n    for word in words:\n        if len(word)!= K:\n            filtered_words.append(word)\n    return''.join(filtered_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    \"\"\"\n    Write a function to remove all the words with k length in the given string.\n    \"\"\"\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    return''.join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # Using regular expression search() method to find all occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n\n    if len(matches) == 0:\n        return None\n    \n    # Using loop to iterate through the matches and return the result in a list of tuples\n    result = []\n    for match in matches:\n        pos = text.find(match)\n        result.append((match, pos))\n    \n    return result"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # Use regular expression to search for pattern in text\n    match = re.search(pattern, text)\n\n    # Check if pattern is found\n    if match:\n        # Return match object\n        return match\n    else:\n        # Return None if no match is found\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string.\n    Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    \"\"\"\n    Write a function to find the occurrence and position of the substrings within a string.\n    Return None if there is no match.\n    \"\"\"\n    # Find all occurrences of the pattern in the text\n    matches = re.findall(pattern,text)\n    # If there are no matches, return None\n    if not matches:\n        return None\n    # Loop through all matches and find their position in the original text\n    for match in matches:\n        pos = text.find(match)\n        # Return the match and its position\n        return match, pos\n    # If we make it here, there was a match, but we couldn't find its position\n    return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    \"\"\"\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    \"\"\"\n    result = re.search(pattern,text)\n    if result:\n        return result.group(), result.start(), result.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n\n    # Convert pattern to regex pattern\n    pattern = re.compile(pattern)\n\n    # Find all occurrences of the pattern in the text\n    match = pattern.search(text)\n\n    # If no match, return None\n    if match is None:\n        return None\n\n    # Find the position of the first match\n    pos = match.start()\n\n    # Find the length of the match\n    length = match.end() - pos\n\n    # Return the match and position\n    return (match.group(), pos, length)"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    Find the occurrence and position of the substrings within a string.\n    Return None if there is no match.\n    \"\"\"\n    # use regular expressions to match the pattern in the text\n    match = re.search(pattern, text)\n    \n    # if no match is found, return None\n    if not match:\n        return None\n    \n    # extract the substring and the position of the match\n    substring = match.group(0)\n    start_pos = match.start()\n    \n    # return the substring and its position\n    return (substring, start_pos)"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    if pattern in text:\n        match = re.search(pattern, text)\n        if match:\n            return match.group(), match.start(), match.end()\n    return None"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    \"\"\"\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    \"\"\"\n    odd_count = 0\n    for i in range(len(nums)):\n        if i % 2!= 0: # check if index is odd\n            for j in range(len(nums[i])): # check if each odd index contains odd numbers\n                if nums[i][j] % 2 == 1:\n                    odd_count += 1\n                    if odd_count == len(nums[i]):\n                        return True # all odd index contain odd numbers\n            odd_count = 0 # reset count for next index\n    return False # all odd index do not contain odd numbers"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_indices = [i for i in range(len(nums)) if i % 2 == 1]  # find all odd indices\n    for i in odd_indices:\n        if len([x for x in nums[i:] if x % 2 == 0]) % 2 == 0:  # check if the current index contains an odd number\n            return False  # if not, return False\n    return True  # if all indices contain odd numbers, return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    \"\"\"\n    This function checks whether every odd index contains odd numbers of a given list.\n\n    :param nums: a list of integers\n    :return: True if every odd index contains odd numbers, False otherwise\n    \"\"\"\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0 and i % 2 == 1:\n            print(\"The number at index\", i, \"is odd.\")\n        else:\n            print(\"The number at index\", i, \"is even or not an odd index.\")\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2!= 0 and nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if len([num for num in nums[i:] if num % 2 == 1]) % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    \"\"\"\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    \"\"\"\n\n    for i in range(len(nums)):\n        if i % 2!= 0:\n            if nums[i] % 2!= 0:\n                return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    \"\"\"\n    This function takes a list of integers as input and checks whether every odd index contains odd numbers.\n    \"\"\"\n    count = 0\n    for i in range(len(nums)):\n        if i % 2!= 0:\n            if nums[i] % 2!= 0:\n                count += 1\n    if count == len(nums):\n        return True\n    else:\n        return False"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2 == 0:\n                return False\n        else:\n            if nums[i] % 2 == 1:\n                return False\n    return True"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])\n    count = 0\n    for i in range(len(test_str)):\n        if i > 0 and test_str[i] in vowels and test_str[i-1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    count = 0\n    for i in range(len(test_str) - 2):\n        if test_str[i] in vowels and test_str[i + 2] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i + 1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    \"\"\"\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    \n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    \n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    \"\"\"\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)-1):\n        if (test_str[i] in vowels and test_str[i+1] in vowels):\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    \"\"\"\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    \n    for i in range(len(test_str)):\n        if i == 0:\n            if test_str[i].lower() in vowels:\n                count += 1\n        elif i == len(test_str)-1:\n            if test_str[i].lower() in vowels:\n                count += 1\n        else:\n            if test_str[i].lower() == test_str[i-1].lower() or test_str[i].lower() == test_str[i+1].lower():\n                if test_str[i].lower() in vowels:\n                    count += 1\n    \n    return count"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # create an empty dictionary to store the elements and their frequency\n    freq_dict = {}\n    # loop through the list and update the frequency of each element in the dictionary\n    for element in arr:\n        if element in freq_dict:\n            freq_dict[element] += 1\n        else:\n            freq_dict[element] = 1\n    # loop through the dictionary and add up the non-repeated elements\n    sum = 0\n    for element, freq in freq_dict.items():\n        if freq == 1:\n            sum += element\n    return sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create a dictionary to store the occurrences of each element\n    counts = {}\n    # Iterate over the input list\n    for num in arr:\n        # If the element is not already in the dictionary, add it with a count of 1\n        if num not in counts:\n            counts[num] = 1\n        # Otherwise, increment the count of the element by 1\n        else:\n            counts[num] += 1\n    # Initialize a variable to store the sum of non-repeated elements\n    non_repeated_sum = 0\n    # Iterate over the keys (non-repeated elements) in the dictionary\n    for key in counts:\n        # If the count of the element is 1 (i.e. it is not repeated), add its value to the sum\n        if counts[key] == 1:\n            non_repeated_sum += key\n    # Return the sum of non-repeated elements\n    return non_repeated_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_sum(arr):\n    \"\"\"\n    This function finds the sum of non-repeated elements in a given list.\n\n    :param arr: A list of integers.\n    :return: The sum of non-repeated elements in the list.\n    \"\"\"\n    # Create a dictionary to store the elements and their counts\n    counts = {}\n    # Iterate over the elements in the list\n    for elem in arr:\n        # If the element is already in the dictionary, increment its count\n        if elem in counts:\n            counts[elem] += 1\n        # If the element is not in the dictionary, add it with a count of 1\n        else:\n            counts[elem] = 1\n    # Initialize the sum variable\n    sum_non_repeated = 0\n    # Iterate over the elements in the list again\n    for elem in arr:\n        # If the element is not in the dictionary, add its value to the sum\n        if elem not in counts:\n            sum_non_repeated += elem\n    # Return the sum of non-repeated elements\n    return sum_non_repeated"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # Initialize the dictionary to store the count of each element in the list\n    count_dict = {}\n    # Initialize the sum of non-repeated elements to zero\n    sum_non_repeated = 0\n    # Iterate over each element in the list\n    for element in arr:\n        # Check if the element is already in the dictionary\n        if element in count_dict:\n            # If the element is already in the dictionary, increment its count by 1\n            count_dict[element] += 1\n        else:\n            # If the element is not in the dictionary, add it with a count of 1\n            count_dict[element] = 1\n        # If the count of the element is 1, add it to the sum of non-repeated elements\n        if count_dict[element] == 1:\n            sum_non_repeated += element\n    # Return the sum of non-repeated elements\n    return sum_non_repeated"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    unique_elements = {}  # dictionary to store unique elements and their counts\n    for element in arr:\n        if element in unique_elements:\n            unique_elements[element] += 1\n        else:\n            unique_elements[element] = 1\n    sum_of_unique_elements = sum(value for key, value in unique_elements.items())\n    return sum_of_unique_elements"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # create a set to store unique elements of the list\n    unique_elements = set(arr)\n    \n    # calculate the sum of the unique elements\n    sum_of_unique = sum(unique_elements)\n    \n    # return the sum of the unique elements\n    return sum_of_unique"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create a set to store unique elements of the list\n    unique_set = set(arr)\n    # Convert the set to a list and sum it to get the sum of non-repeated elements\n    sum_non_repeated = sum(list(unique_set))\n    # Return the sum of non-repeated elements\n    return sum_non_repeated"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # convert list to set to remove duplicates\n    arr = set(arr)\n    # calculate the sum of elements in the set\n    total = sum(arr)\n    return total"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create a set to store unique elements of the list\n    unique_elements = set(arr)\n\n    # Calculate the sum of unique elements\n    sum_unique = sum(unique_elements)\n\n    # Return the sum of unique elements\n    return sum_unique"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Find the sum of non-repeated elements in a given list.\n    \"\"\"\n    seen = set()\n    for num in arr:\n        if num not in seen:\n            seen.add(num)\n    return sum(seen)"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    def pack(iterable):\n        '''\n        Helper function to pack consecutive duplicates of a given iterable.\n        '''\n        key = next(iterable)\n        group = [key]\n        for item in iterable:\n            if item == key:\n                group.append(item)\n            else:\n                yield group\n                key = item\n                group = [key]\n        yield group\n        \n    result = []\n    for group in groupby(list1):\n        if len(list(group)) > 1:\n            result.append(list(group))\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for key, group in groupby(enumerate(list1), lambda x: x[1] == x[0])]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n\n    # create a generator for groupby function\n    grouped_list = groupby(list1)\n\n    # pack consecutive duplicates into sublists\n    packed_list = []\n    for key, group in grouped_list:\n        if key == None:\n            packed_list.append(list(group))\n        else:\n            sublist = list(group)\n            sublist.insert(0, key)\n            packed_list.append(sublist)\n\n    return packed_list"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # Group the elements of the list by their indices\n    grouped_lst = groupby(enumerate(lst), lambda x: x[0] == x[1] - 1)\n    \n    # Convert the grouped list to a list of sublists\n    result = [list(group) for _, group in grouped_lst]\n    \n    # Remove the empty sublists at the beginning of the result\n    result = [sublist for sublist in result if sublist]\n    \n    return result"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(lst):\n    \"\"\"\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    \"\"\"\n    return [list(group) for key, group in groupby(lst) if not key]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pack_consecutive_duplicates(lst):\n    \"\"\"\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    \"\"\"\n    return list(groupby(lst, lambda x: x))"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for key, group in groupby(list1)]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # Initialize an empty dictionary to store sublists\n    sublists = {}\n    # Use the groupby() function from itertools to group the list elements by their index\n    grouped = groupby(enumerate(list1))\n    # Iterate over the grouped elements and pack consecutive duplicates into sublists\n    for index, group in grouped:\n        # Check if this group is a sublist of another sublist\n        if index > 0:\n            # If it is, get the corresponding sublist\n            prev_group = list(grouped)[index-1][1]\n            # Get the index of the first element in the current group\n            first_index = prev_group[0][0] + len(prev_group[0][1])\n            # Get the last element in the previous group\n            last_element = prev_group[-1][0]\n            # Pack consecutive duplicates into a sublist with the last element\n            sublist = [last_element]\n            # Iterate over the elements in the current group and add them to the sublist if they are consecutive duplicates of the last element\n            for i in range(first_index, index):\n                if list1[i] == last_element:\n                    sublist.append(list1[i])\n                else:\n                    sublists[sublist] = sublist\n                    sublist = [list1[i]]\n            # If the sublist is not empty, add it to the sublists dictionary\n            if sublist:\n                sublists[sublist] = sublist\n    # Add the final sublist to the sublists dictionary (if it is not empty)\n    if sublist:\n        sublists[sublist] = sublist\n    # Return the sublists dictionary\n    return sublists"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # Use groupby function from itertools to group the list elements by their consecutive duplicates\n    grouped = groupby(lst)\n    # Initialize an empty list to store sublists\n    sublists = []\n    # Iterate over the grouped elements and check if the consecutive duplicates are present in the next group\n    for key, group in grouped:\n        # If consecutive duplicates are present, add them to the current sublist\n        if key == group.next():\n            sublists[-1].extend(list(group))\n        # If consecutive duplicates are not present, create a new sublist\n        else:\n            sublists.append(list(group))\n    # Return the list of sublists\n    return sublists"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    pack = []\n    for item in list1:\n        if item in pack:\n            pack[-1].append(item)\n        else:\n            pack.append([item])\n    return pack"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = {}\n    for sublist in list1:\n        # turn sublist into a tuple and check if it's already in the dictionary\n        if (tuple(sublist),) not in count:\n            # if not, add it to the dictionary with a count of 1\n            count[(tuple(sublist),)] = 1\n        else:\n            # otherwise, increment its count in the dictionary\n            count[(tuple(sublist),)] += 1\n    return count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    counts = {}\n    for lst in list1:\n        if tuple(lst) not in counts:\n            counts[tuple(lst)] = 1\n        else:\n            counts[tuple(lst)] += 1\n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Create an empty dictionary to store the count of lists\n    count_dict = {}\n    # Loop through each element in the list\n    for i in list1:\n        # Check if the element is a list\n        if isinstance(i, list):\n            # If it is a list, turn it into a tuple and check if it already exists in the dictionary\n            if (i,) in count_dict:\n                # If it does, increment its count\n                count_dict[(i,)] += 1\n            else:\n                # If it doesn't, add it to the dictionary with a count of 1\n                count_dict[(i,)] = 1\n    # Return the dictionary\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Create an empty dictionary\n    sublist_count = {}\n    # Loop through each element in the list\n    for element in list1:\n        # Check if the element is a list\n        if isinstance(element, list):\n            # Convert the list to a tuple and check if it's already in the dictionary\n            if element in sublist_count:\n                # Increment the count for the tuple\n                sublist_count[element] += 1\n            else:\n                # If it's not in the dictionary, add it and set its count to 1\n                sublist_count[element] = 1\n    # Return the dictionary\n    return sublist_count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublists = {}\n    for item in list1:\n        sublist = tuple(item)\n        if sublist not in sublists:\n            sublists[sublist] = 1\n        else:\n            sublists[sublist] += 1\n    return sublists"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # create an empty dictionary\n    counts = {}\n    # loop through each list in the input list\n    for sublist in list1:\n        # convert the sublist to a tuple\n        sublist_tuple = tuple(sublist)\n        # check if the tuple exists in the dictionary\n        if sublist_tuple in counts:\n            # if it does, increment the count by 1\n            counts[sublist_tuple] += 1\n        else:\n            # if it doesn't, add the tuple to the dictionary with a count of 1\n            counts[sublist_tuple] = 1\n    # return the dictionary of counts\n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    \n    # Create an empty dictionary to store the counts\n    count_dict = {}\n    \n    # Loop through each list in the input list\n    for item in list1:\n        \n        # Convert the list to a tuple\n        item_tuple = tuple(item)\n        \n        # If the tuple is already in the dictionary, increment its count by 1\n        if item_tuple in count_dict:\n            count_dict[item_tuple] += 1\n        \n        # Otherwise, add the tuple to the dictionary with a count of 1\n        else:\n            count_dict[item_tuple] = 1\n            \n    # Return the dictionary of counts\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count_dict = {}\n    for elem in list1:\n        if type(elem) == list:\n            key = tuple(elem)\n            if key in count_dict:\n                count_dict[key] += 1\n            else:\n                count_dict[key] = 1\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    \n    # create an empty dictionary\n    count_dict = {}\n    \n    # iterate through the list of lists\n    for sublist in list1:\n        \n        # turn the sublist to a tuple\n        sublist_tuple = tuple(sublist)\n        \n        # check if the tuple is already in the dictionary\n        if sublist_tuple in count_dict:\n            \n            # increment its count\n            count_dict[sublist_tuple] += 1\n            \n        # if the tuple is not in the dictionary, add it with a count of 1\n        else:\n            count_dict[sublist_tuple] = 1\n    \n    # return the dictionary\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n\n    # Create an empty dictionary to store the counts\n    count_dict = {}\n\n    # Iterate over each list in the input list\n    for lst in list1:\n\n        # Convert the list to a tuple\n        tup = tuple(lst)\n\n        # Check if the tuple is already in the dictionary\n        if tup in count_dict:\n            # Increment its count by 1\n            count_dict[tup] += 1\n        else:\n            # Add the tuple to the dictionary with a count of 1\n            count_dict[tup] = 1\n\n    # Return the dictionary of counts\n    return count_dict"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    total = sum(test_list)\n    for i in range(1, len(test_list)+1):\n        for comb in combinations(test_list, i):\n            comb_sum = sum(comb)\n            if comb_sum == total:\n                print(comb)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    total_sum = sum(test_list)\n    result = []\n    for i in range(1, total_sum+1):\n        for combo in combinations(test_list, len(test_list)):\n            if sum(combo) == i:\n                result.append(combo)\n    return result"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n\n    # create a list of tuples\n    tup_list = [tuple(x) for x in test_list]\n\n    # find all combinations of sums\n    for i in range(len(tup_list)):\n        for j in range(i+1, len(tup_list)):\n            if sum(tup_list[i]) == sum(tup_list[j]):\n                print(tup_list[i], tup_list[j])"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    \"\"\"\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    \"\"\"\n    n = len(test_list)\n    for i in range(1, n+1):\n        for combination in combinations(test_list, i):\n            print(combination)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    n = len(test_list)\n    for i in range(2, n+1):\n        for j in range(1, n-i+1):\n            for k in range(1, n-j+1):\n                for l in range(1, n-k+1):\n                    total = test_list[j-1][0] + test_list[k-1][1] + test_list[l-1][2]\n                    if total == test_list[i-1][0]:\n                        print(\"Tuple combination:\", test_list[j-1], test_list[k-1], test_list[l-1])"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. \n    https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    total_sum = sum(test_list)\n    for i in range(1, total_sum + 1):\n        combinations_list = []\n        for tup in test_list:\n            if i == sum(tup):\n                combinations_list.append(tup)\n        if combinations_list:\n            print(\"Combinations of\", i, \"with tuples:\", combinations_list)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n\n    # create a set of tuples to store unique tuples\n    unique_tuples = set(test_list)\n\n    # find all possible combinations of unique tuples\n    combinations_set = set(combinations(unique_tuples, len(test_list[0])))\n\n    # create a list to store the combinations\n    combinations_list = []\n\n    # convert set to list and store it in a list\n    combinations_list = list(combinations_set)\n\n    return combinations_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Get the length of the tuple list\n    n = len(test_list)\n\n    # Find the total sum of all tuples in the list\n    total_sum = sum(sum(x) for x in test_list)\n\n    # Find all possible combinations of sums of length n using itertools.combinations\n    combs = combinations(test_list, n)\n\n    # Initialize an empty list to store the combinations of sums with tuples\n    combinations_list = []\n\n    # Loop through the combinations of sums with tuples and check if the sum is equal to the total sum\n    for comb in combs:\n        if sum(comb) == total_sum:\n            combinations_list.append(tuple(comb))\n\n    return combinations_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n\n    # list to store all the combinations\n    combination_list = []\n\n    # loop through all the tuples in the list\n    for i in range(len(test_list)):\n\n        # generate all the combinations of length i\n        for combo in combinations(test_list[i], i):\n\n            # check if the sum of the combination is equal to zero\n            if sum(combo) == 0:\n\n                # if yes, append the combination to the list\n                combination_list.append(tuple(combo))\n\n    # return the list of combinations\n    return combination_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    combinations_list = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][0] + test_list[j][0]) in test_list:\n                combinations_list.append((test_list[i], test_list[j]))\n    return combinations_list\n\ntest_list = [(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]\nprint(find_combinations(test_list))"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n            if i!= n//i:\n                divisors.append(n//i)\n    divisors.append(n)\n    divisors.sort()\n    count = len(divisors)\n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisor_count = 0\n    \n    # loop through all numbers from 1 to sqrt(n)\n    for i in range(1, int(math.sqrt(n))+1):\n        # check if n is divisible by i\n        if n % i == 0:\n            # add 1 to divisor count if i is a divisor of n\n            divisor_count += 1\n            \n            # check if n is divisible by i+i\n            if i == int(math.sqrt(n)) and n % (i+i) == 0:\n                divisor_count += 1\n    \n    # check if the count of divisors is even or odd\n    if divisor_count % 2 == 0:\n        print(\"The count of divisors is even.\")\n    else:\n        print(\"The count of divisors is odd.\")"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef count_divisors(n):\n    \"\"\"\n    This function calculates the number of divisors of a given number n.\n    \"\"\"\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even.\n    '''\n    # Calculate the number of divisors in n using the math.factorial() function\n    divisors = math.factorial(n)\n\n    # Compare the number of divisors to the number of divisors in n\n    if divisors % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\""
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Count the number of divisors of a number n using the trial division method.\n    '''\n    divisors = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors += 2\n            if i * i!= n:\n                divisors += 1\n    if n > 1:\n        divisors += 1\n    return divisors"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. \n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    \n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n\n    # Calculate the number of divisors of n\n    divisor_count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            divisor_count += 1\n            if n // i!= i:\n                divisor_count += 1\n\n    # Check if the count of divisors is even or odd\n    if divisor_count % 2 == 0:\n        return \"The count of divisors of {} is even.\".format(n)\n    else:\n        return \"The count of divisors of {} is odd.\".format(n)"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even.\n    '''\n\n    count = 0\n    i = 1\n    \n    while i <= math.sqrt(n):\n        if n % i:\n            i += 1\n        else:\n            count += 1\n            n //= i\n\n    if n > 1:\n        count += 1\n    \n    return count % 2 == 0"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = []\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            divisors.append(i)\n            if n // i!= i:\n                divisors.append(n // i)\n    if len(divisors) % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef count_divisors(n):\n    \"\"\"\n    This function takes an integer n as input and returns True if the count of its divisors is even, else False.\n    \"\"\"\n    # Calculate the list of divisors using the built-in sqrt function in Python\n    divisors = [i for i in range(1, int(math.sqrt(n))+1) if n % i == 0]\n    # Calculate the count of divisors using the len() function\n    count = len(divisors)\n    # Check if the count of divisors is even or odd\n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    result = 0\n    for i in range(n):\n        for j in range(i+1, min(i+2*n, n)+1, 2):\n            result += arr[j] - arr[i]\n    return result"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum_odd = 0\n    \n    for i in range(len(arr)):\n        if len(arr) % 2!= 0:\n            # if the length of the array is odd, add the element at the current index to the sum\n            sum_odd += arr[i]\n        else:\n            # if the length of the array is even, check if the subarray of size i+1 contains an odd length subarray\n            for j in range(i, len(arr)-i):\n                if len(arr[j:j+i]) % 2!= 0:\n                    # if an odd length subarray is found, add its sum to the sum_odd variable\n                    sum_odd += sum(arr[j:j+i])\n                    break\n    \n    return sum_odd"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    count = 0\n    sum = 0\n    for i in range(n):\n        if i == 0 or i == n-1 or arr[i] % 2 == 0:\n            continue\n        else:\n            count += 1\n            sum += arr[i]\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    count = 0\n    sum = 0\n    max_sum = 0\n\n    for i in range(n):\n        if i % 2 == 0:\n            sum += arr[i]\n        else:\n            if sum > max_sum:\n                max_sum = sum\n            if count % 2 == 0:\n                count += 1\n                sum -= arr[i]\n            else:\n                count += 1\n\n    if count % 2 == 0:\n        return max_sum\n    else:\n        return max_sum + (arr[n-1] * 2)"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    sum_odd = 0\n    for i in range(1, n+1):\n        odd_sum = 0\n        for j in range(i):\n            odd_sum += arr[j]\n        if i % 2!= 0:\n            sum_odd += odd_sum\n    return sum_odd"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    sum = 0\n\n    # Iterate over all subarrays of odd length\n    for i in range(1, n-1):\n        # Check if the sum of the subarray is odd\n        if arr[i] % 2 == 1:\n            # If the sum is odd, add it to the sum\n            sum += arr[i]\n\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    # Initialize variables\n    n = len(arr)\n    sum = 0\n    \n    # Loop through all subarrays\n    for i in range(n):\n        # Check if the length of the current subarray is odd\n        if i % 2!= 0 and n - i <= 1:\n            # If the length of the current subarray is odd and has only one element, then add it to the sum\n            sum += arr[i]\n            \n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    n = len(arr)\n    sum = 0\n    for i in range(n):\n        for j in range(i+1, min(i+4, n)+1):\n            sum += sum_odd_subarray(arr, i, j)\n    return sum\n\ndef sum_odd_subarray(arr, start, end):\n    return sum(arr[start:end+1])"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    n = len(arr)\n    count = 0\n    sum = 0\n\n    for i in range(n):\n        for j in range(i+1, min(2*i+2, n)):\n            count += 1\n            sum += arr[j]\n\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    total = 0\n    n = len(arr)\n    for i in range(n):\n        if i < n-1 and i > 0 and arr[i] % 2 == 0 and arr[i+1] % 2 == 0:\n            total += (arr[i] + arr[i+1])\n        elif i == 0:\n            total += arr[i]\n        elif i == n-1:\n            total += arr[i]\n    return total"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert rgb color to hsv color.\n\n    :param r: int, red value of the color (0-255)\n    :param g: int, green value of the color (0-255)\n    :param b: int, blue value of the color (0-255)\n    :return: tuple, hsv color (hue, saturation, value)\n    \"\"\"\n\n    # Convert to float and normalize to 0-1 range\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n\n    # Calculate maximum and minimum values\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n\n    # Calculate difference between maximum and minimum values\n    delta = max_value - min_value\n\n    # Calculate saturation\n    if delta == 0:\n        hue = 0\n    elif max_value == r:\n        hue = ((g - b) / delta) % 6\n    elif max_value == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n\n    # Calculate value\n    value = max_value\n\n    # Calculate saturation and value in percentages\n    if delta == 0:\n        saturation = 0\n    else:\n        saturation = delta / max_value * 100\n\n    return (hue, saturation, value)\n"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color.\n    https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    \"\"\"\n\n    # Convert r, g, b to floats and normalize to be between 0 and 1\n    r, g, b = map(lambda x: x / 255, (r, g, b))\n\n    # Find the largest and smallest values among r, g, b\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n\n    # Find the delta between the largest and smallest values\n    delta = max_val - min_val\n\n    # If the delta is 0, the color is a shade of gray\n    if delta == 0:\n        h = 0\n    else:\n        # Find the hue based on the color\n        if max_val == r:\n            h = (g - b) / delta\n        elif max_val == g:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n\n        # Convert h to be between 0 and 360 degrees\n        h = int(h * 60) if h < 0 else int(h * 60)\n\n        # If the hue is less than 0, add 360 degrees to it\n        if h < 0:\n            h += 360\n\n        # Find the saturation\n        if delta == 0:\n            s = 0\n        else:\n            s = delta / max_val\n\n        # Find the value\n        v = max_val\n\n    # Return a tuple with the converted h, s, and v values\n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    delta = max_val - min_val\n\n    if max_val == 0:\n        h = 0\n    else:\n        if delta == 0:\n            h = 0\n        else:\n            if r == max_val:\n                h = (g - b) / delta\n            elif g == max_val:\n                h = 2 + (b - r) / delta\n            else:\n                h = 4 + (r - g) / delta\n\n        h = h * 60\n        if h < 0:\n            h += 360\n\n    if max_val == min_val:\n        s = 0\n    else:\n        if delta == 0:\n            s = 0\n        else:\n            s = delta / max_val\n\n    v = max_val\n\n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert rgb color to hsv color.\n    \n    Parameters:\n        r (int): Red color component [0, 255]\n        g (int): Green color component [0, 255]\n        b (int): Blue color component [0, 255]\n    \n    Returns:\n        h (float): Hue [0, 360]\n        s (float): Saturation [0, 1]\n        v (float): Value [0, 1]\n    \"\"\"\n    \n    # Calculate the minimum and maximum values\n    min_value = min(r, g, b)\n    max_value = max(r, g, b)\n    \n    # Calculate the difference between the maximum and minimum values\n    delta = max_value - min_value\n    \n    # Calculate the saturation\n    if delta == 0:\n        h = 0\n    else:\n        if max_value == r:\n            h = (g - b) / delta\n        elif max_value == g:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n        \n        h *= 60\n        \n        # Convert the hue from degrees to radians\n        h /= 360\n    \n    # Calculate the value\n    v = max_value\n    \n    # Calculate the saturation\n    if delta == 0:\n        s = 0\n    else:\n        if max_value == 0:\n            s = 0\n        else:\n            s = delta / max_value\n    \n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    \n    # calculate maximum and minimum values\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    \n    # calculate difference between maximum and minimum values\n    diff = max_val - min_val\n    \n    # calculate value of saturation\n    if max_val == 0:\n        saturation = 0\n    else:\n        saturation = diff / max_val\n    \n    # calculate value of hue\n    if max_val == r:\n        hue = (g - b) / diff\n    elif max_val == g:\n        hue = 2 + (b - r) / diff\n    else:\n        hue = 4 + (r - g) / diff\n    \n    # calculate value of hue in degrees\n    hue = round(hue * 60)\n    \n    # handle cases where hue is out of range\n    if hue < 0:\n        hue += 360\n    \n    # calculate value of value\n    value = max_val\n    \n    # convert values to lists to display them nicely\n    saturation_list = list(map(int, '{:.1f}'.format(saturation * 100).split('.')))\n    hue_list = list(map(int, '{:.1f}'.format(hue).split('.')))\n    value_list = list(map(int, '{:.1f}'.format(value).split('.')))\n    \n    # display values nicely\n    print('RGB Color:', (r, g, b))\n    print('HSV Color:',''.join(map(str, value_list)))\n    print('Saturation:',''.join(map(str, saturation_list)) + '%')\n    print('Hue:',''.join(map(str, hue_list)))"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    This function takes three arguments: r, g, and b, and returns the equivalent hsv color.\n\n    The conversion formula used is:\n    \n    h = (r + g + b) / 3\n    s = max(r, g, b) - min(r, g, b)\n    v = max(r, g, b)\n\n    The conversion from rgb to hsv can be done using the above formula.\n    '''\n\n    # calculate the maximum and minimum values of RGB\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n\n    # calculate the value of the saturation\n    if max_value == min_value:\n        h = 0 # achromatic color\n    else:\n        delta = max_value - min_value\n        s = delta / max_value\n        if r == max_value:\n            h = (g - b) / delta\n        elif g == max_value:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n        h *= 60 # convert to degrees\n\n    # calculate the value of the brightness\n    v = max_value\n\n    # return the hsv values\n    return round(h, 2), round(s, 2), round(v, 2)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    # Convert RGB to HSV\n    r_c = r / 255.0\n    g_c = g / 255.0\n    b_c = b / 255.0\n\n    max_c = max(r_c, g_c, b_c)\n    min_c = min(r_c, g_c, b_c)\n    delta_c = max_c - min_c\n\n    h_c = 0\n    s_c = 0\n\n    if max_c == min_c:\n        h_c = 0\n    elif max_c == r_c:\n        h_c = (g_c - b_c) / delta_c\n    elif max_c == g_c:\n        h_c = 2 + (b_c - r_c) / delta_c\n    elif max_c == b_c:\n        h_c = 4 + (r_c - g_c) / delta_c\n\n    h_c = h_c * 60\n\n    if h_c < 0:\n        h_c += 360\n\n    s_c = delta_c / max_c\n\n    return h_c, s_c"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert RGB color to HSV color.\n\n    Parameters:\n    r (int): Red channel value.\n    g (int): Green channel value.\n    b (int): Blue channel value.\n\n    Returns:\n    h (float): Hue value between 0 and 360.\n    s (float): Saturation value between 0 and 1.\n    v (float): Value (brightness) value between 0 and 1.\n    \"\"\"\n\n    # Convert RGB to HEX format\n    hex_color = f'#{r:02X}{g:02X}{b:02X}'\n\n    # Convert HEX to RGB\n    r, g, b = [int(hex_color[i:i + 2], 16) / 255 for i in (0, 2, 4)]\n\n    # Calculate minimum and maximum values\n    min_val = min(r, g, b)\n    max_val = max(r, g, b)\n\n    # Calculate difference between maximum and minimum values\n    diff = max_val - min_val\n\n    # Calculate saturation value\n    if max_val == 0:\n        s = 0\n    else:\n        s = diff / max_val\n\n    # Calculate hue value\n    if max_val == r:\n        h = (g - b) / diff % 6\n    elif max_val == g:\n        h = (b - r) / diff + 2\n    else:\n        h = (r - g) / diff + 4\n\n    # Normalize hue value\n    h *= 60\n\n    # Return HSV values\n    return h, s, max_val"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    h = 0\n    s = 0\n    v = max_val\n    \n    d = max_val - min_val\n    \n    if max_val == min_val:\n        s = 0\n    else:\n        s = d / max_val\n        \n    if max_val == r:\n        h = (g - b) / d + (g < b) * 6\n    elif max_val == g:\n        h = (b - r) / d + 2\n    else:\n        h = (r - g) / d + 4\n        \n    h = h / 6\n    \n    if h < 0:\n        h += 1\n        \n    return (h, s, v)\n"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert rgb color to hsv color.\n\n    Args:\n        r (int): Red color component.\n        g (int): Green color component.\n        b (int): Blue color component.\n\n    Returns:\n        h (float): Hue value in the range [0, 360).\n        s (float): Saturation value in the range [0, 1].\n        v (float): Value value in the range [0, 1].\n    \"\"\"\n\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n\n    v = max_value / 255.0\n\n    if max_value == min_value:\n        h = 0\n        s = 0\n    else:\n        d = max_value - min_value\n        s = d / (max_value + min_value)\n\n        if r == max_value:\n            h = (g - b) / d\n        elif g == max_value:\n            h = 2 + (b - r) / d\n        else:\n            h = 4 + (r - g) / d\n\n        if h < 0:\n            h += 6\n\n        h *= 60\n\n    return h, s, v"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    even_product = 1\n    odd_product = 1\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n            even_product *= num\n        else:\n            odd_count += 1\n            odd_product *= num\n    if even_count == 0:\n        return odd_product\n    elif odd_count == 0:\n        return even_product\n    else:\n        return even_product * odd_product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    This function takes a list and finds the product of the first even and odd numbers in the list.\n    \"\"\"\n\n    # Initialize variables for even and odd numbers\n    even_num = 0\n    odd_num = 0\n\n    # Iterate through the list\n    for num in lst:\n        # Check if the number is even\n        if num % 2 == 0:\n            # If it is even, add it to the even_num variable\n            even_num += num\n        # Check if the number is odd\n        else:\n            # If it is odd, add it to the odd_num variable\n            odd_num += num\n\n    # Return the product of even_num and odd_num\n    return even_num * odd_num\n"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    product = 1\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n            product *= num\n        else:\n            odd_count += 1\n            product *= num\n            \n    if even_count!= 0:\n        product *= even_count\n    if odd_count!= 0:\n        product *= odd_count\n        \n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    product = 1\n\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        if even_count > 0 and odd_count > 0:\n            product *= num\n\n    return product\n"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def mul_even_odd(lst):\n    even = 1\n    odd = 0\n    product = 1\n    \n    for num in lst:\n        if num % 2 == 0:\n            even *= num\n            product *= even\n        else:\n            odd *= num\n            product *= odd\n    \n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    product = 1\n    count = 0\n    for num in list1:\n        if num % 2 == 0:\n            count += 1\n        else:\n            count += 1\n        if count == 2:\n            product *= num\n            count = 0\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def mul_even_odd(lst):\n    '''\n    This function takes a list as input and returns the product of the first even and odd numbers.\n    '''\n    even_sum = 1\n    odd_sum = 1\n\n    for num in lst:\n        if num % 2 == 0:\n            even_sum += num\n        else:\n            odd_sum += num\n\n    return even_sum * odd_sum"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    count = 0\n    even_count = 0\n    odd_count = 0\n\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        count += 1\n\n    if even_count!= 0 and odd_count!= 0:\n        product = list1[0] * list1[1]\n        return product\n    else:\n        return \"The list has no even or odd number.\""
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_product = 1\n    odd_product = 1\n    for num in list1:\n        if num % 2 == 0:\n            even_product *= num\n        else:\n            odd_product *= num\n    return even_product * odd_product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def mul_even_odd(list1):\n    \"\"\"\n    Write a function to find the product of first even and odd number of a given list.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return even_count * odd_count"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n\n    Args:\n        test_str (str): A tuple string in the format \"(1, 2, 3)\"\n\n    Returns:\n        int: An integer tuple in the format (1, 2, 3)\n    \"\"\"\n    # Split the string by comma and space\n    split_str = test_str.replace(\"(\", \"\").replace(\")\", \"\").replace(\" \", \"\").split(\",\")\n\n    # Convert each string to integer and append to new list\n    new_list = [int(i) for i in split_str]\n\n    # Return the new list as an integer tuple\n    return tuple(new_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # split the string into individual elements\n    elems = test_str.split(',')\n    \n    # create an empty list to store the integer values\n    int_list = []\n    \n    # iterate over each element and convert it to integer\n    for elem in elems:\n        int_list.append(int(elem))\n    \n    # return the integer tuple\n    return tuple(int_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    tuple_str = test_str.split(',')\n    return tuple(map(int, tuple_str))"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    result = []\n    for i in test_str:\n        try:\n            result.append(int(i))\n        except ValueError:\n            result.append(None)\n    return tuple(result)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string by comma\n    split_str = test_str.split(',')\n    # Convert each element in the string to integer\n    int_tuple = tuple(int(i) for i in split_str)\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n    \"\"\"\n    try:\n        int_tuple = tuple(int(i) for i in test_str)\n        return int_tuple\n    except ValueError:\n        print(\"Invalid input\")\n"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the tuple string into a list of strings\n    lst = test_str.split(',')\n    \n    # Convert each string in the list to an integer\n    lst = [int(x) for x in lst]\n    \n    # Convert the list to a tuple\n    tup = tuple(lst)\n    \n    # Return the tuple\n    return tup"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    try:\n        tup_str = tuple(test_str)\n        tup_int = tuple(int(i) for i in tup_str)\n        return tup_int\n    except ValueError:\n        print(\"Invalid input. Please provide a valid tuple string.\")"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    test_tuple = eval(test_str)\n    int_tuple = tuple(int(i) for i in test_tuple)\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Remove all spaces and convert string to list\n    test_list = list(filter(None, test_str.replace(\"(\", \"\").replace(\")\", \"\").replace(\" \", \"\").split(\",\")))\n    # Convert list to tuple and return\n    return tuple(map(int, test_list))"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_left(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    else:\n        return bisect.bisect_right(a, x)"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # Find the index where x should be inserted.\n    i = bisect.bisect_right(a, x)\n    # If x is greater than all elements to the right of i, it must be inserted at the end.\n    if i == len(a) or a[i]!= x:\n        return i\n    else:\n        # If x is already in the list, find the rightmost occurrence of x.\n        j = i - 1\n        while j >= 0 and a[j] == x:\n            j -= 1\n        return j + 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_left(a, x)\n    if index!= len(a):\n        return index\n    else:\n        return index - 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a, x) # find the insertion point using binary search\n    if i == len(a): # if the value is already in the sorted list, return the index of the next element\n        j = 0\n        while j < len(a) and a[j] == x: # find the index of the next element\n            j += 1\n        return j\n    elif a[i] == x: # if the value is equal to the element at the insertion point, return the insertion point\n        return i\n    else: # otherwise, return the index of the next element greater than the insertion point\n        return i+1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index == len(a):\n        return index\n    elif x > a[index-1]:\n        return index\n    else:\n        return index-1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index == len(a):\n        return len(a)\n    elif index == 0:\n        return 0\n    elif a[index - 1] < x:\n        return index\n    else:\n        return index - 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    if i == len(a) or a[i]!= x:\n        i -= 1\n    return i"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    if i == len(a):\n        return i\n    elif x > a[i-1]:\n        return i-1\n    else:\n        return i"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n\n    :param a: sorted list\n    :param x: value to be inserted\n    :return: index of the right insertion point\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    return index"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b{3}'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a(?=.*b{3})b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b'\n    return re.search(pattern, text)"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a(?=b{3})'\n    return re.search(pattern, text)"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b.*b.*b.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b.*b.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a(?=.*b{3})'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r\"a(?=b{3})\"\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b{3}'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.*b{3}'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    new_tuple = (test_str, test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_str, test_list)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple((str(test_str) + str(x)) for x in test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple(test_list + test_str)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple((str(i) for i in test_list) + (test_str,))\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_str, test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple(test_str) + tuple(test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # concatenate the list and string into a new string\n    new_str = str(test_list) + str(test_str)\n    \n    # convert the new string into a list of characters\n    new_list = list(new_str)\n    \n    # convert the list of characters back into a tuple\n    new_tuple = tuple(new_list)\n    \n    # return the new tuple\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Convert the list to tuple\n    test_tuple = tuple(test_list)\n    # Convert the string to list\n    test_list = list(test_str)\n    # Join the two lists into one\n    new_list = test_list + test_tuple\n    # Convert the new list to tuple\n    new_tuple = tuple(new_list)\n    # Return the new tuple\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    # convert the list to a tuple\n    test_tuple = tuple(test_list)\n    \n    # concatenate the string and the tuple\n    new_tuple = (test_str, test_tuple)\n    \n    # return the new tuple\n    return new_tuple"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0 and nums[i] % 2 == 0:\n            print(f\"{i} index has even numbers\")\n        else:\n            print(f\"{i} index does not have even numbers\")"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if len([num for num in nums[i:] if num % 2 == 0]) % 2 == 1:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    # Initialize a boolean variable to store the result\n    result = True\n    \n    # Iterate over the even indices of the list\n    for i in range(0, len(nums), 2):\n        # Check if the number at the current index is even\n        if nums[i] % 2 == 0:\n            # If it is even, check if the number at the next index is also even\n            if nums[i+1] % 2 == 0:\n                # If it is even, move to the next index\n                continue\n            else:\n                # If it's not even, set the result to False and break out of the loop\n                result = False\n                break\n        else:\n            # If the number at the current index is odd, check if the number at the next index is also odd\n            if nums[i+1] % 2 == 0:\n                # If it's even, set the result to False and break out of the loop\n                result = False\n                break\n    \n    # Return the result\n    return result"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if not nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        count = 0\n        for j in range(len(nums)):\n            if j % 2 == 0:\n                if nums[j] % 2 == 0:\n                    count += 1\n        if count == 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            count = 0\n            for j in range(i, len(nums)):\n                if nums[j] % 2 == 0:\n                    count += 1\n            if count % 2 == 1:\n                return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0 and nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 1: # checking if the index is odd\n            count = 0 # initializing count variable\n            for j in range(len(nums)):\n                if j!= i: # checking if the index is not equal to the current index\n                    if nums[i] == nums[j]: # checking if the even index contains the odd index at any position\n                        count += 1\n            if count % 2 == 1: # checking if count is odd\n                return False # if count is odd, return False\n    return True # if all even indexes contain even numbers, return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if not all(nums[i:i+2] % 2 == 0):\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    # initialize a boolean variable to check whether all even indices are even or not\n    is_all_even = True\n\n    # loop through all indices of the list\n    for i in range(len(nums)):\n        # if the current index is even and the number at that index is odd, mark is_all_even as False\n        if i % 2 == 0 and nums[i] % 2 == 1:\n            is_all_even = False\n\n    # return the boolean value of is_all_even\n    return is_all_even"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    return tuple(el for tup in test_tup for el in tup)"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if type(item) is not tuple:\n            new_tup.append(item)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    new_tup = []\n    for item in test_tup:\n        if type(item) is not tuple:\n            new_tup.append(item)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            result.extend(item)\n        else:\n            result.append(item)\n    return tuple(result)"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    return tuple(filter(lambda x: isinstance(x, tuple), test_tup))"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    flat_list = []\n    for elem in test_tup:\n        if type(elem) == tuple:\n            flat_list.extend(elem)\n        else:\n            flat_list.append(elem)\n    return tuple(flat_list)"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # Initialize an empty list to store non-tuple elements\n    non_tup_list = []\n\n    # Loop through the tuple elements and add non-tuples to the list\n    for element in test_tup:\n        if not isinstance(element, tuple):\n            non_tup_list.append(element)\n\n    # Return the list of non-tuples\n    return non_tup_list"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # Initialize an empty list to store the non-nested tuples\n    result = []\n\n    # Loop through each tuple in the input tuple\n    for tup in test_tup:\n        # Check if the tuple is a list or a tuple\n        if isinstance(tup, (list, tuple)):\n            # If the tuple is a list, recursively call the function on it\n            if isinstance(tup, list):\n                result.extend(remove_nested(tup))\n            # If the tuple is a tuple, append each element to the result list\n            else:\n                result.extend(tup)\n        else:\n            # If the tuple is not a list or a tuple, add it to the result list\n            result.append(tup)\n\n    # Return the resulting list of non-nested tuples\n    return result"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return [item for sublist in test_tup for item in sublist]"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_list = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            for subitem in item:\n                new_list.append(subitem)\n        else:\n            new_list.append(item)\n    return new_list"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_lists(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_list(input_list): \n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n            count += count_list(item)\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_lists(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_list(input_list):\n    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    i = len(arr) - 1\n    while i >= 0 and arr[i] > x:\n        i -= 1\n    return i"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last(arr, x):\n    '''\n    This function takes in two parameters, arr which is the sorted array and x which is the element whose last position is to be found.\n    It returns the index of the last occurrence of x in arr.\n    '''\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            while mid > 0 and arr[mid - 1] == x:\n                mid -= 1\n            return mid\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    i = len(arr) - 1\n    while i >= 0 and arr[i] > x:\n        i -= 1\n    return i"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes in two parameters:\n        - arr: A sorted array\n        - x: An element to find the last position of\n\n    This function returns the last position of the element x in the sorted array arr.\n\n    If x is not present in the array, the function returns -1.\n    \"\"\"\n    # Initialize the left and right pointers to the first and last elements of the array respectively\n    left = 0\n    right = len(arr) - 1\n\n    # While the left pointer is less than or equal to the right pointer\n    while left <= right:\n        # Calculate the middle index\n        mid = (left + right) // 2\n\n        # If the element at the middle index is equal to x\n        if arr[mid] == x:\n            # If the element to the left of the middle index is also equal to x, update left pointer to mid + 1\n            while mid > 0 and arr[mid-1] == x:\n                mid -= 1\n\n            return mid\n\n        # If the element at the middle index is greater than x\n        elif arr[mid] > x:\n            # If x is greater than or equal to the element to the left of the middle index, update right pointer to mid - 1\n            right = mid - 1\n\n        # If the element at the middle index is less than x\n        else:\n            # If x is less than or equal to the element to the right of the middle index, update left pointer to mid + 1\n            left = mid + 1\n\n    # If x is not present in the array, return -1\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last(arr, x):\n    '''\n    This function takes two arguments, an array and an element to search for in the array.\n    It returns the last position of the element in the array if found, otherwise it returns -1.\n    The function uses the binary search algorithm to find the element.\n    '''\n\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n\n        if arr[mid] == x:\n            while mid > 0 and arr[mid-1] == x:\n                mid -= 1\n            return mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes two parameters: an array and an element to find in the array.\n    It returns the last index of the element in the array, or -1 if the element is not present in the array.\n    \"\"\"\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            while mid > 0 and arr[mid - 1] == x:\n                mid -= 1\n            return mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes in two arguments:\n    arr: A sorted array of integers\n    x: An integer to search for in the array\n\n    The function returns the last index of the element x in the array.\n\n    Example:\n    >>> arr = [1, 2, 3, 4, 5, 6]\n    >>> x = 4\n    >>> last(arr, x)\n    4\n\n    If x is not found in the array, the function should return -1.\n    \"\"\"\n\n    # Initialize the left and right pointers\n    left, right = 0, len(arr) - 1\n\n    # If x is not found, return -1\n    while arr[left]!= x and left < right:\n        mid = (left + right) // 2\n        if arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid\n\n    # If x is not found, return -1\n    if arr[left]!= x:\n        return -1\n\n    # Find the last occurrence of x\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] < x:\n            left = mid + 1\n        elif arr[mid] == x:\n            right = mid\n        else:\n            left = mid + 1\n\n    return left\n"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left = 0\n    right = len(arr) - 1\n\n    while left < right:\n        mid = (left + right) // 2\n\n        if arr[mid] == x:\n            while mid < right and arr[mid+1] == x:\n                mid += 1\n\n            return mid\n\n        elif arr[mid] < x:\n            left = mid + 1\n\n        else:\n            right = mid - 1\n\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last(arr, x):\n    \"\"\"\n    Find the last position of an element in a sorted array.\n    \"\"\"\n    i = len(arr) - 1\n    while i >= 0 and arr[i]!= x:\n        i -= 1\n    if i < 0:\n        return None\n    return i"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes in a sorted array and an element x, and returns the last position of the element x in the array.\n\n    Args:\n        arr (list): A sorted array of integers.\n        x (int): An integer to find the last position of in the array.\n\n    Returns:\n        int: The last position of the element x in the array.\n\n    \"\"\"\n    # Initialize the last position variable to -1\n    last_position = -1\n\n    # Loop through the array from the first to the last index\n    for i in range(len(arr)):\n        # If the current element is equal to x, update the last position variable\n        if arr[i] == x:\n            last_position = i\n\n    # Return the last position variable\n    return last_position"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n\n    pattern = r'a\\w*b'\n\n    # match the pattern in the text and return the matched string\n    return re.search(pattern, text).group()"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*?b'\n    result = re.findall(pattern, text)\n    return result[0]"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a[^b]*b'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a[^b]*b$'\n    result = re.search(pattern, text)\n    if result:\n        return result.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'(?<=a)([^ab])(?=b)'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*b'\n    return re.search(pattern, text)"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a[^b]*b'\n    result = re.search(pattern, text)\n    if result:\n        return result.group()\n    else:\n        return 'No match found'"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'a\\S*b')\n    match = pattern.search(text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total_sum = 0\n    for key, value in dict.items():\n        total_sum += value\n    return total_sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total_sum = 0\n    for value in dict.values():\n        total_sum += value\n    return total_sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for value in dict.values():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total_sum = 0\n    for key, value in dict.items():\n        total_sum += value\n    return total_sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total_sum = 0\n    for item in dict.values():\n        total_sum += item\n    return total_sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total_sum = 0\n    for item in dict.values():\n        total_sum += item\n    return total_sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def return_sum(dictionary):\n    \"\"\"\n    Write function to find the sum of all items in the given dictionary.\n    \"\"\"\n    sum = 0\n    for item in dictionary.values():\n        sum += item\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key, value in dict.items():\n        sum += value\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict.values():\n        total += item\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range [1, n].\n    \"\"\"\n    total_sum = 0\n    for i in range(1, n+1, 2):\n        total_sum += i\n    return total_sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n\n    # Taking input from user\n    l = int(input(\"Enter the lower limit of the range: \"))\n    r = int(input(\"Enter the upper limit of the range: \"))\n\n    # Initializing sum variable to 0\n    sum = 0\n\n    # Iterating through the range from l to r (inclusive)\n    for i in range(l, r+1):\n        # Checking if the number is odd\n        if i % 2!= 0:\n            # Adding the odd numbers to the sum variable\n            sum += i\n\n    # Printing the sum of all odd numbers within the given range\n    print(\"The sum of all odd numbers within the given range is:\", sum)"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    # Initialize the sum to 0\n    total = 0\n    \n    # Loop through each odd number from 1 to n\n    for i in range(1, n+1, 2):\n        # Add the odd number to the total\n        total += i\n    \n    # Return the total sum\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    # Initialize variables for the sum and the starting number of the range\n    sum = 0\n    start = 1\n    \n    # Loop until we reach the end of the range\n    while start <= n:\n        # If the number is odd, add it to the sum\n        if start % 2!= 0:\n            sum += start\n        # Increment the starting number by 2\n        start += 2\n        \n    # Return the sum of all odd numbers in the range\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l, r = map(int, input(\"Enter the range: \").split())\n    return sum(x for x in range(l, r+1) if x % 2!= 0)"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(n):\n        if i % 2!= 0:\n            sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n\n    # initialize the sum variable to zero\n    total = 0\n\n    # loop through all odd numbers between 1 and n (inclusive)\n    for i in range(1, n+1, 2):\n        # add the current number to the total sum\n        total += i\n\n    # return the total sum of odd numbers\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    total = 0\n    for i in range(1, n+1, 2):\n        total += i\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(n):\n        if i % 2!= 0:\n            sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(n):\n        if i % 2!= 0:\n            sum += i\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for i in arr:\n        total += i\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for i in arr:\n        total += i\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for num in arr:\n        sum += num\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_array(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n\n    # Initialize a variable to store the sum of the array\n    total = 0\n\n    # Iterate through each element in the array and add it to the total\n    for num in arr:\n        total += num\n\n    # Return the total sum of the array\n    return total"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    # Convert the number to binary string and split it into list of digits\n    digits = [int(x) for x in bin(n)[2:]]\n    # Reverse the list of digits\n    digits.reverse()\n    # Calculate the number of digits to be rotated\n    rotation_count = d % len(digits)\n    # Rotate the list of digits by the calculated count\n    digits = digits[rotation_count:] + digits[:rotation_count]\n    # Convert the list of digits back to binary string and concatenate it with leading zeros\n    result = bin(int(''.join([str(x) for x in digits]), 2))[2:].zfill(32)\n    # Convert the binary string back to an integer and return it\n    return int(result, 2)"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to rotate left bits by d bits a given number. We assume that the number is 32 bit.\n\n    :param n: number to rotate\n    :param d: number of bits to rotate by\n    :return: rotated number\n    \"\"\"\n    mask = 0xFFFFFFFF\n    rotated_bits = (n & mask) << (32 - d) | (n & (mask >> d)) >> d\n    return rotated_bits"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Rotate bits left by d bits.\n    \"\"\"\n    return ((n << d) | (n >> (32 - d))) & 0xffffffff"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def left_rotate(n, d):\n    '''\n    This function rotates a 32-bit number to the left by a given number of bits.\n    '''\n    # Calculate the number of bits to rotate by\n    bits_to_rotate = d % 32\n\n    # Calculate the number of bits to shift the remaining bits to the left\n    shift_amount = 32 - bits_to_rotate\n\n    # Create a mask to select the bits to rotate\n    mask = (1 << bits_to_rotate) - 1\n\n    # Shift the bits to the left using bitwise operations\n    shifted_bits = ((n << shift_amount) & 0xFFFFFFFF) | ((n >> bits_to_rotate) & ~0xFFFFFFFF)\n\n    # Return the rotated number\n    return shifted_bits"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n\n    # Convert the integer to binary string\n    binary = bin(n)[2:]\n\n    # Append zeros until the binary string length is d\n    while len(binary) < d:\n        binary = '0' + binary\n\n    # Extract the last d bits from the binary string\n    last_d_bits = binary[-d:]\n\n    # Extract the first d bits from the binary string\n    first_d_bits = binary[:-d]\n\n    # Reverse the last d bits\n    reversed_last_d_bits = last_d_bits[::-1]\n\n    # Convert the reversed last d bits to integer\n    reversed_last_d_bits = int(reversed_last_d_bits, 2)\n\n    # Add the reversed last d bits to the first d bits\n    rotated_binary = int(first_d_bits + reversed_last_d_bits, 2)\n\n    # Convert the rotated binary string to an integer\n    rotated_binary = int(rotated_binary, 2)\n\n    return rotated_binary"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    # Convert the given number to binary format\n    binary = bin(n)[2:].zfill(32)\n    # Calculate the number of bits to rotate\n    n_bits = len(binary)\n    bits_to_rotate = n_bits - d\n    # Perform the rotation\n    rotated_binary = binary[bits_to_rotate:] + binary[:bits_to_rotate]\n    # Convert the rotated binary number back to decimal format\n    rotated_number = int(rotated_binary, 2)\n    return rotated_number"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def left_rotate(n, d):\n    # Convert the number to a binary string\n    binary_str = bin(n)[2:]\n    # Find the number of zero bits to the left of the MSB (most significant bit)\n    num_zero_bits = len(binary_str) - binary_str.index('1') - 1\n    # Shift the binary string by d bits to the left\n    rotated_binary_str = binary_str[:num_zero_bits] + binary_str[num_zero_bits+d:]\n    # Convert the rotated binary string back to an integer\n    rotated_int = int(rotated_binary_str, 2)\n    # Return the rotated integer\n    return rotated_int"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def left_rotate(n, d):\n    # Extract the least significant bits d bits to the left\n    mask = (1 << d) - 1\n    rotated = (n << d) & mask\n    # Return the shifted number\n    return rotated"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def left_rotate(n,d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return ((n<<d) | (n>>(32-d))) & 0xffffffff"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    # convert binary to decimal\n    n = int(n, 2)\n\n    # shift bits to the left by d bits\n    n = (n << d) & 0xFFFFFFFF\n\n    # convert decimal back to binary and return as string\n    return bin(n)[2:]"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text)\n"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # Use regular expressions to remove all whitespace characters from the string\n    text = re.sub(r'\\s+','', text)\n    # Remove any leading or trailing whitespace characters from the string\n    text = text.strip()\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n\n    # Use regex to remove all whitespaces\n    text = re.sub('\\s+','', text)\n\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    \"\"\"\n    Write a function to remove all whitespaces from a string.\n    \"\"\"\n    # Remove all whitespaces using regular expressions\n    text = re.sub(r'\\s+','', text)\n    \n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(' ', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+','', text).strip()"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_three_equal(x,y,z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    if x == y == z:\n        count += 1\n    if x == y!= z:\n        count += 1\n    if x!= y == z:\n        count += 1\n    if x!= y!= z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    for i in range(1, x + 1):\n        if i == x:\n            count += 1\n        elif i == y:\n            count += 1\n        elif i == z:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n\n    count = 0\n    if x == y == z:\n        count += 1\n    elif x == y!= z:\n        count += 1\n    elif x == z!= y:\n        count += 1\n    elif y == z!= x:\n        count += 1\n\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y:\n        count += 1\n    if y == z:\n        count += 1\n    if z == x:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    if x == y == z:\n        count += 1\n    elif x == y or x == z or y == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(x):\n        if x == y or x == z or y == z:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_three_equal(x, y, z):\n    count = 0\n    if x == y == z:\n        count += 1\n    if y == z == x:\n        count += 1\n    if z == x == y:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y and y == z:\n        count += 1\n    if x == z and y == z:\n        count += 1\n    if x == y and x == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    for num in [x, y, z]:\n        if num == x:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(min(x, y, z), max(x, y, z)+1):\n        if i == x or i == y or i == z:\n            count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    \n    # If the array is already sorted, return 0\n    if arr == sorted(arr):\n        return 0\n    \n    # If the array is not sorted, then we need to perform rotations to sort it\n    else:\n        # Traverse through all subarrays of the array\n        for i in range(n):\n            # Find the rotation required to sort the subarray\n            for j in range(i+1, n):\n                if arr[i] > arr[j]:\n                    count += 1\n        \n        return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n\n    # Iterate over all possible rotations of the array\n    for i in range(n):\n        for j in range(i+1, n):\n            # Check if the array is already sorted\n            if arr[j] >= arr[i]:\n                return 0\n\n    # If no rotations are found, return -1 (indicating that the array is already sorted)\n    return -1"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    if n <= 1:\n        return 0\n    \n    # find the largest element in the array\n    max_val = max(arr)\n    \n    # find the smallest element in the array\n    min_val = min(arr)\n    \n    # create a new array by swapping the largest element with the smallest element\n    new_arr = [max_val] * n\n    new_arr[min_val - 1] = min_val\n    \n    # count the number of rotations required to generate the sorted array\n    count = 0\n    for i in range(n):\n        if arr[i]!= new_arr[i]:\n            count += 1\n    \n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 3,
        "answer": ""
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n\n    # Check if array is sorted or not\n    if n == 1:\n        return 0\n    if arr[0] >= arr[1]:\n        return 1\n\n    # Check if array has only one rotation\n    if arr[n - 1] <= arr[0]:\n        return 2\n\n    # Find the first element that is greater than the first element\n    i = 0\n    while i < n - 1 and arr[i] < arr[i + 1]:\n        i += 1\n\n    # If the first element is at the end, there's no rotation\n    if i == n - 1:\n        return 0\n\n    # Check if the rest of the array is sorted or not\n    j = i + 1\n    while j < n:\n        if arr[j] < arr[j - 1]:\n            return 1\n        j += 1\n\n    # If all elements in the rest of the array are sorted, there's one rotation\n    return 1"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # Find the largest element in the array\n    max_val = max(arr)\n    # Initialize the count variable\n    count = 0\n    # Loop through all possible rotations of the array\n    for i in range(n):\n        # Find the index of the largest element in the current rotation\n        index = arr.index(max_val)\n        # Swap the element at the current index with the last element of the rotation\n        arr[i], arr[index] = arr[index], arr[i]\n        # Check if the rotated array is already sorted\n        if arr[:n] == sorted(arr[:n]):\n            # If it is, increment the count variable\n            count += 1\n        # Reverse the current rotation\n        for j in range(i):\n            arr[i], arr[j] = arr[j], arr[i]\n        # Check if the reversed array is already sorted\n        if arr[:n] == sorted(arr[:n]):\n            # If it is, increment the count variable\n            count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n\n    # If the array is already sorted, return 0\n    if arr == sorted(arr):\n        return 0\n\n    # Calculate the number of inversions required for each partition\n    def count_inversions(arr, left, right):\n        if left < right:\n            mid = (left + right) // 2\n            inversions_left = count_inversions(arr, left, mid)\n            inversions_right = count_inversions(arr, mid + 1, right)\n            inversions_merge = merge_sort(arr, left, mid, right)\n            return inversions_left + inversions_right + inversions_merge\n        else:\n            return 0\n\n    # Merge sort function\n    def merge_sort(arr, left, mid, right):\n        inversions = count_inversions(arr, left, right)\n        if inversions == 0:\n            return 0\n\n        # Divide the array into two halves\n        arr_left = arr[left:mid + 1]\n        arr_right = arr[mid + 1:right + 1]\n\n        # Recursively sort each half\n        merge_sort(arr_left, 0, len(arr_left) - 1, len(arr_left) - 1)\n        merge_sort(arr_right, 0, len(arr_right) - 1, len(arr_right) - 1)\n\n        # Merge the two sorted halves\n        i = j = k = 0\n        while i < len(arr_left) and j < len(arr_right):\n            if arr_left[i] < arr_right[j]:\n                arr[left + k] = arr_left[i]\n                i += 1\n            else:\n                arr[left + k] = arr_right[j]\n                j += 1\n            k += 1\n        while i < len(arr_left):\n            arr[left + k] = arr_left[i]\n            i += 1\n            k += 1\n        while j < len(arr_right):\n            arr[left + k] = arr_right[j]\n            j += 1\n            k += 1\n        return inversions\n\n    # Calculate the number of rotations required\n    def count_rotations(arr):\n        n = len(arr)\n        rotations = 0\n        for i in range(n - 1):\n            if arr[i] > arr[i + 1]:\n                rotations += 1\n        return rotations\n\n    # Check if the array is rotated\n    def is_rotated(arr):\n        n = len(arr)\n        for i in range(n - 1):\n            if arr[i] > arr[i + 1]:\n                return True\n        return False\n\n    # Main function\n    arr = sorted(arr)\n    rotations = count_rotations(arr)\n    if is_rotated(arr):\n        rotations += 1\n    return rotations"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    if n == 0 or n == 1:\n        return 0\n\n    # Check for single element array\n    if n == 2:\n        if arr[0] > arr[1]:\n            return 1\n        else:\n            return 0\n\n    # Check for arrays with single rotation\n    if arr[0] <= arr[1] and arr[1] >= arr[n-1]:\n        return 1\n\n    # Check for arrays with double rotation\n    if arr[0] <= arr[1] and arr[1] >= arr[n-2] and arr[n-2] >= arr[n-1]:\n        return 2\n\n    # Find the maximum element in the array\n    max_element = arr[0]\n    for i in range(1, n):\n        if arr[i] > max_element:\n            max_element = arr[i]\n\n    # Find the minimum element in the array\n    min_element = arr[0]\n    for i in range(1, n):\n        if arr[i] < min_element:\n            min_element = arr[i]\n\n    # Find the pivot point based on the maximum and minimum element\n    pivot_index = max_element - min_element\n    pivot_index = max(0, pivot_index)\n    pivot_index = min(n-1, pivot_index)\n    pivot_element = arr[pivot_index]\n\n    # Find the number of rotations required to generate the sorted array\n    count = 0\n    for i in range(n-1):\n        if arr[i] >= pivot_element:\n            count += 1\n            if arr[i+1] > pivot_element:\n                count += 1\n    count += 1\n\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        if i == 0 or arr[i-1] <= arr[i]:\n            count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # Check if the array is already sorted or not\n    if arr == sorted(arr):\n        return 0\n    # Find the index of the smallest element in the array\n    min_index = arr.index(min(arr))\n    # Swap the smallest element with the last element of the array\n    arr[min_index], arr[n-1] = arr[n-1], arr[min_index]\n    # Check if the array is already sorted or not\n    if arr == sorted(arr):\n        return 0\n    # Increment the count of rotations by 1 and find the new index of the smallest element\n    count = 1\n    new_min_index = arr.index(min(arr))\n    # Repeat the above steps until the array is sorted\n    while new_min_index!= min_index:\n        count += 1\n        arr[min_index], arr[new_min_index] = arr[new_min_index], arr[min_index]\n        min_index = new_min_index\n        new_min_index = arr.index(min(arr))\n    return count"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not. \n    \"\"\"\n    if n < 0:\n        return False\n    elif n == 0:\n        return True\n    elif n % 2 == 0:\n        return is_perfect_square(n//2)\n    else:\n        root = int(n**0.5)\n        if root**2 == n:\n            return True\n        else:\n            return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    if n < 2:\n        return False\n    else:\n        left, right = 1, n\n        while left <= right:\n            mid = (left + right) // 2\n            if mid*mid == n:\n                return True\n            elif mid*mid < n:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function checks whether the given number is a perfect square or not.\n    \"\"\"\n    if n == 1 or n == 4:\n        return True\n    elif n < 4:\n        return False\n\n    # Calculate the square root of n\n    root = int(n**0.5)\n\n    # Iterate over the values from 1 to the square root of n\n    for i in range(1, root+1):\n        # If the square of i equals n, then the number is a perfect square\n        if i*i == n:\n            return True\n\n    # If the number is not a perfect square, return False\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function takes an integer as input and returns True if it is a perfect square and False otherwise.\n    It follows the steps mentioned in the problem statement to check if a given number is a perfect square or not.\n    \"\"\"\n    if n < 2:\n        return False\n    i = 1\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 1\n    return True"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n\n    # To check whether a number is a perfect square or not, we need to check if the square of the number is an integer\n    # or if the difference between the square of the number and the original number is less than 0.001\n    # if both conditions are satisfied, then the number is a perfect square\n    \n    # Check if the number is a perfect square using the above conditions\n    if n < 0:\n        return False\n    else:\n        root = int(n**0.5)\n        if root**2 == n:\n            return True\n        elif abs(root**2 - n) < 0.001:\n            return True\n        else:\n            return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Returns True if n is a perfect square else False.\n    \"\"\"\n    if n < 2:\n        return False\n    i = 1\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 1\n    return True"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    x = 1\n    while x**2 <= n:\n        x += 1\n    if x**2 == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    x = int(n**0.5)\n    y = int(n**0.5)\n    if x*x == n:\n        return True\n    elif y*y == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    if n < 0:\n        return False\n    i = 1\n    while i * i <= n:\n        if i * i == n:\n            return True\n        i += 1\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. \n    '''\n    if n == 0 or n == 1:\n        return True\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    # check if the list is empty\n    if len(arr) == 0:\n        return True\n\n    # calculate the product of the first two elements in the list\n    product = arr[0] * arr[1]\n\n    # check if the product is even or odd\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    Write a function to check whether the product of numbers in a list is even or not.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    Write a function to check whether the product of numbers in a list is even or not.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return \"The product of the numbers in the list is even.\"\n    else:\n        return \"The product of the numbers in the list is odd.\""
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_product_even(arr):\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr: \n        product *= num\n    if product % 2 == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    Write a function to check whether the product of numbers in a list is even or not.\n    \"\"\"\n    # initialize variables to keep track of even and odd products\n    even_product = 1\n    odd_product = 1\n\n    # iterate over the list of numbers\n    for num in arr:\n        # calculate the product of the current number and the even product\n        even_product *= num\n\n        # if the even product is still odd at this point, the product is odd\n        if odd_product > 0 and odd_product % 2 == 1:\n            return False\n\n        # update the odd product\n        odd_product *= num\n\n    # if the even product is odd and divisible by 2, the product is even\n    if odd_product > 0 and odd_product % 2 == 1:\n        return True\n\n    # if the even product is divisible by 2, the product is even\n    if even_product % 2 == 0:\n        return True\n\n    # if the even product is not divisible by 2, the product is odd\n    return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n\n    # initialize a variable to store the product of the numbers in the list\n    product = 1\n\n    # iterate over each number in the list\n    for num in arr:\n        # multiply the current number with the product so far\n        product *= num\n\n    # check whether the product is even or odd\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Initialize the maximum sum and the corresponding list\n    max_sum = float('-inf')\n    max_list = None\n    \n    # Loop through each sublist in the lists\n    for sublist in lists:\n        # Calculate the sum of elements in the sublist\n        sublist_sum = sum(sublist)\n        \n        # Check if the sum is greater than the current maximum sum\n        if sublist_sum > max_sum:\n            # Update the maximum sum and corresponding list\n            max_sum = sublist_sum\n            max_list = sublist\n    \n    # Return the maximum sum and corresponding list\n    return max_sum, max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    max_sum = 0\n    max_sum_list = []\n\n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            current_sum = lists[i][j]\n            for k in range(len(lists[i])):\n                if k == j:\n                    continue\n                current_sum += lists[i][k]\n            if current_sum > max_sum:\n                max_sum = current_sum\n                max_sum_list = [lists[i][j]]\n            elif current_sum == max_sum:\n                max_sum_list.append(lists[i][j])\n\n    return max_sum_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n\n    # Create a list to store the sum of each list in the list of lists\n    list_sum = []\n\n    # Loop through each list in the list of lists\n    for i in range(len(lists)):\n\n        # Calculate the sum of each list\n        current_sum = sum(lists[i])\n\n        # Add the sum of the current list to the list of sums\n        list_sum.append(current_sum)\n\n    # Find the maximum sum in the list of sums\n    max_sum = max(list_sum)\n\n    # Find the index of the list with the maximum sum\n    max_sum_index = list_sum.index(max_sum)\n\n    # Return the list in the list of lists that has the highest sum\n    return lists[max_sum_index]"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = None\n    \n    for lst in lists:\n        lst_sum = sum(lst)\n        if lst_sum > max_sum:\n            max_sum = lst_sum\n            max_list = lst\n    \n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_lists = []\n\n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            current_sum = 0\n            for k in range(len(lists[i][j])):\n                current_sum += lists[i][j][k]\n            if current_sum > max_sum:\n                max_sum = current_sum\n                max_lists = [lists[i][j]]\n            elif current_sum == max_sum:\n                max_lists.append(lists[i][j])\n\n    return max_lists"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    # Initialize variables to keep track of the current max sum and the maximum list\n    current_max = float('-inf')\n    max_list = None\n    \n    # Loop through each list in the input list\n    for list in lists:\n        # Initialize a variable to keep track of the current sum of the list\n        current_sum = 0\n        \n        # Loop through each element in the list\n        for element in list:\n            # Add the current element to the current sum\n            current_sum += element\n            \n            # If the current sum is greater than the current max, update the max and the list\n            if current_sum > current_max:\n                current_max = current_sum\n                max_list = list\n    \n    # Return the maximum list that meets the conditions\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    \"\"\"\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    \"\"\"\n    def max_sum_helper(lst, current_sum, max_sum):\n        if len(lst) == 0:\n            return current_sum, max(max_sum, current_sum)\n        else:\n            max_sum_helper(lst[1:], current_sum + lst[0], max_sum)\n\n    max_sum = float('-inf')\n    max_lst = []\n    for lst in lists:\n        current_sum, max_sum = max_sum_helper(lst, 0, max_sum)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_lst = lst\n\n    return max_lst"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # initialize variables\n    max_sum = float('-inf')  # set the maximum sum to negative infinity\n    max_list = []  # initialize the list to be empty\n    \n    # loop through each sublist in the input list of lists\n    for sublist in lists:\n        # compute the sum of the elements in the sublist\n        sublist_sum = sum(sublist)\n        \n        # check if the current sublist sum is greater than the maximum sum\n        if sublist_sum > max_sum:\n            # if it is, update the maximum sum and the list of the sublist\n            max_sum = sublist_sum\n            max_list = sublist\n    \n    # return the list of the sublist with the maximum sum\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    \n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            if lists[i][j] > max_sum:\n                max_sum = lists[i][j]\n                max_list = [[lists[i][j]]]\n            elif lists[i][j] == max_sum:\n                max_list.append([lists[i][j]])\n    \n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = None\n    for l in lists:\n        current_sum = sum(l)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = l\n    return max_list"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # Convert all characters in the string to lowercase\n    test_str = test_str.lower()\n\n    # Initialize variables to keep track of the start and end of the maximum run\n    max_start = 0\n    max_end = 0\n\n    # Iterate over each character in the string\n    for i in range(len(test_str)):\n        # Check if the current character is uppercase\n        if test_str[i].isupper():\n            # If it is, update the start and end of the maximum run if necessary\n            if i > max_end:\n                max_start = max_end\n                max_end = i\n        # Check if the current character is not uppercase and the previous character was uppercase\n        elif i > 0 and test_str[i-1].isupper():\n            # If it is, update the start and end of the maximum run if necessary\n            if i > max_end:\n                max_start = max_end\n                max_end = i\n        # Check if the current character is not uppercase and the previous character was not uppercase\n        elif i > 0 and not test_str[i-1].isupper():\n            # If it is, reset the start and end of the maximum run if necessary\n            if i > max_end:\n                max_start = max_end\n                max_end = i\n\n    # If there is no maximum run, return an empty string\n    if max_start == 0:\n        return ''\n\n    # Convert the start and end indices to the corresponding character positions in the original string\n    start_char = test_str[:max_start].rfind(' ')\n    end_char = test_str[:max_end].rfind(' ')\n\n    # Return the maximum run of uppercase characters in the original string\n    return test_str[start_char:end_char+1]"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    count = 0\n    start = 0\n    max_count = 0\n    max_start = 0\n\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            count += 1\n            if count > max_count:\n                max_count = count\n                max_start = start\n        else:\n            count = 0\n            start = i + 1\n\n    return max_count, max_start"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count = 1\n    max_count = 1\n    current_char = test_str[0]\n    for i in range(1, len(test_str)):\n        if test_str[i].isupper():\n            count += 1\n            if count > max_count:\n                max_count = count\n                current_char = test_str[i]\n        else:\n            count = 1\n    return current_char"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    uppercase_count = 0\n    run_length = 0\n    max_run = 0\n    \n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            uppercase_count += 1\n        else:\n            uppercase_count = 0\n            \n        if uppercase_count > max_run:\n            max_run = uppercase_count\n            run_length = 1\n        elif uppercase_count == max_run:\n            run_length += 1\n            \n    return max_run, run_length"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    uppercase_run_start = 0\n    current_run_start = 0\n    current_run_length = 0\n    max_run_length = 0\n\n    for i, char in enumerate(test_str):\n        if char.isupper():\n            if current_run_length == 0:\n                current_run_start = i\n            current_run_length += 1\n        else:\n            if current_run_length > max_run_length:\n                max_run_start = current_run_start\n                max_run_length = current_run_length\n            current_run_length = 0\n\n    if current_run_length > max_run_length:\n        max_run_start = current_run_start\n        max_run_length = current_run_length\n\n    return test_str[max_run_start:max_run_start+max_run_length]"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    # Initialize variables for running count and current character\n    run_count = 0\n    current_char = None\n    \n    # Loop through the string and update variables as needed\n    for char in test_str:\n        if char.isupper():\n            # If the current character is uppercase, increment the run count\n            if current_char is None:\n                run_count += 1\n                current_char = char\n            else:\n                # If the current character is lowercase and we have not seen it before, reset the count to 1\n                if char!= current_char:\n                    run_count = 1\n                    current_char = char\n        else:\n            # If the current character is not uppercase, reset the count and current character to None\n            if current_char is not None:\n                run_count = 0\n                current_char = None\n    \n    # If the last character is uppercase, increment the run count\n    if current_char is not None:\n        run_count += 1\n    \n    return run_count"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n\n    # Initialize variables\n    current_run = 0\n    max_run = 0\n    max_run_start = 0\n    run_start = 0\n\n    # Iterate through the string\n    for i in range(len(test_str)):\n\n        # If the character is uppercase\n        if test_str[i].isupper():\n\n            # If the current run is greater than the maximum run\n            if current_run > max_run:\n\n                # Update maximum run\n                max_run = current_run\n\n                # Update start position of maximum run\n                max_run_start = run_start\n\n            # Reset current run\n            current_run = 1\n\n        # Otherwise, increase current run\n        else:\n            current_run += 1\n\n    # Check if the current run is greater than the maximum run\n    if current_run > max_run:\n\n        # Update maximum run\n        max_run = current_run\n\n        # Update start position of maximum run\n        max_run_start = run_start\n\n    # Return maximum run\n    return max_run_start, max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    run_start = 0\n    max_run = 0\n    uppercase_count = 0\n\n    for i, char in enumerate(test_str):\n        if char.isupper():\n            uppercase_count += 1\n        else:\n            if uppercase_count > max_run:\n                max_run = uppercase_count\n            elif uppercase_count == max_run:\n                run_start = i\n            uppercase_count = 0\n\n    if uppercase_count > max_run:\n        max_run = uppercase_count\n    elif uppercase_count == max_run:\n        run_start = len(test_str) - 1\n\n    return max_run, test_str[run_start:run_start + max_run]\n"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    max_run = 0\n    max_run_start = 0\n    current_run = 0\n    current_run_start = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n        else:\n            if current_run > max_run:\n                max_run = current_run\n                max_run_start = current_run_start\n            current_run = 0\n            current_run_start = i + 1\n    if current_run > max_run:\n        max_run = current_run\n        max_run_start = current_run_start\n    return max_run, max_run_start"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    uppercase_run = []\n    current_run = []\n    max_run = []\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_run.append(test_str[i])\n            if len(current_run) > len(uppercase_run):\n                uppercase_run = current_run\n                max_run = current_run\n        elif current_run:\n            if current_run[-1].isupper():\n                current_run[-1] = current_run[-1].lower()\n            uppercase_run = current_run\n            max_run = current_run\n            current_run = []\n    if current_run:\n        if current_run[-1].isupper():\n            current_run[-1] = current_run[-1].lower()\n        uppercase_run = current_run\n        max_run = current_run\n    return max_run"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None\n"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Returns the first odd number in a given list of numbers.\n\n    Args:\n        nums (list): A list of numbers.\n\n    Returns:\n        int: The first odd number in the list.\n\n    Raises:\n        TypeError: If the input is not a list.\n    \"\"\"\n    if not isinstance(nums, list):\n        raise TypeError(\"Input must be a list.\")\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    raise ValueError(\"No odd numbers found in the list.\")"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2 == 1:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns the first odd number in the list.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    # initialize a variable to hold the first odd number\n    first_odd_num = None\n    # loop through the list of numbers\n    for num in nums:\n        # if the number is odd, set it as the new first odd number\n        if num % 2!= 0:\n            first_odd_num = num\n            break\n    # return the first odd number\n    return first_odd_num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) < K:\n        return False\n    elif len(test_tup) == K:\n        if sum(test_tup) % K == 0:\n            return True\n        else:\n            return False\n    else:\n        if test_tup[K-1] % K == 0:\n            return True\n        else:\n            return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n\n    for tup in test_tup:\n        if K in tup:\n            print(K, \"is present in the tuple\")\n        else:\n            print(K, \"is not present in the tuple\")"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    if len(test_tup) == K:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if any(elem in test_tup for elem in K):\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    This function takes in a tuple and a integer K and returns a boolean value\n    indicating whether the tuple contains K or not.\n    '''\n    return K in test_tup"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) < K:\n        return False\n    for i in range(K):\n        if test_tup[i] not in K:\n            return False\n    return True"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    This function takes a test_tup (a tuple) and a K (an integer) as input and returns True if the given tuple contains the k or False otherwise.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) == K:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) < K:\n        return False\n    for i in range(K):\n        if test_tup[i] not in test_tup[:K]:\n            return False\n    return True"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == K:\n            count += 1\n    if count == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Tuples do not have the same length\")\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            print(\"Tuple 1 element\", i, \"is greater than or equal to tuple 2 element\", i)\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples should have the same number of elements.\")\n        return\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            print(\"The element in the second tuple is smaller than the corresponding element in the first tuple at index\", i+1)\n            return\n    print(\"All elements in the second tuple are smaller than or equal to the corresponding element in the first tuple.\")"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"The two tuples must have the same length.\"\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    # Check if the length of the two tuples is equal\n    if len(test_tup1) == len(test_tup2):\n        # Iterate over the two tuples and compare each element\n        for i in range(len(test_tup1)):\n            if test_tup1[i] < test_tup2[i]:\n                return False\n        # If all elements in both tuples are smaller, then they are equal\n        return True\n    else:\n        # If the length of the two tuples is different, then the elements cannot be compared\n        return False"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    }
]