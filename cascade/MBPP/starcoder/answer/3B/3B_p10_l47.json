[
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    common_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            common_elements.append(element)\n    return common_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for elem in test_tup1:\n        if elem in test_tup2:\n            shared_elements.append(elem)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # create sets to remove duplicates from the tuples\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    # find the intersection of the sets\n    shared_set = set1.intersection(set2)\n    # create a list to store the shared elements\n    shared_list = []\n    # loop through the shared set and add it to the list\n    for element in shared_set:\n        shared_list.append(element)\n    # return the shared elements list\n    return shared_list"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n\n    # Find the common elements between the two tuples\n    common_elements = set(test_tup1) & set(test_tup2)\n\n    # Convert the set to a list and return it\n    return list(common_elements)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    # Convert the tuples to lists for easier manipulation\n    test_list1 = list(test_tup1)\n    test_list2 = list(test_tup2)\n\n    # Initialize an empty list to store the shared elements\n    shared_elements = []\n\n    # Loop through each element in the first list\n    for element in test_list1:\n        # Check if the element is also present in the second list\n        if element in test_list2:\n            # If the element is present in both lists, add it to the shared elements list\n            shared_elements.append(element)\n\n    # Return the shared elements list\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # convert tuples to lists\n    test_list1 = list(test_tup1)\n    test_list2 = list(test_tup2)\n\n    # use set intersection to find shared elements\n    shared_elements = list(set(test_list1).intersection(set(test_list2)))\n\n    # sort and return the shared elements\n    return sorted(shared_elements)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] in test_tup2:\n            shared_elements.append(test_tup1[i])\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples as input and returns a list containing the common elements of both tuples.\n    \"\"\"\n    common_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            common_elements.append(element)\n    return common_elements"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return True\n    if n <= 3:\n        return False\n    if n % 2 == 0 or n % 3 == 0:\n        return True\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return True\n        i += 6\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 2 or n == 3:\n        return False\n    elif n < 2:\n        return False\n    else:\n        sqrt_n = math.sqrt(n)\n        if sqrt_n.is_integer():\n            return False\n        else:\n            return True\n"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n))+1, 2):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n\n    if n == 2 or n == 3:\n        return False\n\n    if n % 2 == 0:\n        return True\n\n    for i in range(3, int(math.sqrt(n))+1, 2):\n        if n % i == 0:\n            return True\n\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sieve_of_eratosthenes(n):\n    '''\n    This function generates a list of prime numbers up to n using the Sieve of Eratosthenes algorithm.\n    '''\n    primes = [True] * (n + 1)\n    primes[0] = primes[1] = False\n    \n    for i in range(2, int(math.sqrt(n)) + 1):\n        if primes[i]:\n            for j in range(i*i, n + 1, i):\n                primes[j] = False\n    \n    return [i for i in range(2, n + 1) if primes[i]]\n\ndef is_not_prime(n):\n    '''\n    This function identifies non-prime numbers using the Sieve of Eratosthenes algorithm.\n    '''\n    primes = sieve_of_eratosthenes(n)\n    return [i for i in range(2, n + 1) if i not in primes]"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_not_prime(n):\n    '''\n    This function checks if a number is not a prime number or not.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 2:\n        return False\n    elif n == 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    else:\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\nprint(is_not_prime(7))  # Output: False\nprint(is_not_prime(10))  # Output: True"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Create a min heap and push all the elements of the list into the heap\n    heap = []\n    for num in nums:\n        heapq.heappush(heap,num)\n    \n    # Pop the n largest elements and return them as a list in descending order\n    result = []\n    for _ in range(n):\n        result.append(heapq.heappop(heap))\n    \n    return result"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        hq.heappush(heap, -num)\n        if len(heap) > n:\n            hq.heappop(heap)\n    return [hq.heappop(heap) for i in range(n)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Convert the list of numbers into a min heap using a min-heap queue\n    nums_min_heap = hq.nsmallest(n, nums)\n    # Convert the min-heap queue back into a list of the n largest integers\n    result = [nums_min_heap[0]]\n    for _ in range(n-1):\n        result.append(hq.heappop(nums_min_heap))\n    return result"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    max_heap = []\n    for num in nums:\n        heapq.heappush(max_heap, -num)\n        if len(max_heap) > n:\n            heapq.heappop(max_heap)\n    return [num for num in max_heap]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    max_heap = []\n    for num in nums:\n        hq.heappush(max_heap, -num) # convert to negative to make max heap\n    \n    for _ in range(n):\n        max_heap.pop() # remove the smallest element from the heap\n    \n    return [-num for num in max_heap] # convert back to positive numbers to get the largest numbers"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # create a min heap from the given list\n    max_heap = hq.nlargest(n, nums)\n    # extract the n largest elements and return them in descending order\n    return [max_heap.pop() for _ in range(n)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    # Convert the list of numbers into a min heap\n    hq.heapify(nums)\n\n    # Initialize an empty list to store the n largest numbers\n    result = []\n\n    # Pop n largest numbers from the heap\n    while len(result) < n:\n        result.append(hq.heappop(nums))\n\n    return result"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Use a max heap to store the n largest integers\n    max_heap = hq.nsmallest(n, nums)\n    # Extract the n largest integers from the heap and return them in descending order\n    return [x for x in max_heap]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Convert the list to a min heap\n    heap = [-num for num in nums]\n    hq.heapify(heap)\n    \n    # Extract and return the n largest integers from the heap\n    return [-num for num in hq.nlargest(n, heap)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = hq.nlargest(n, nums)\n    return heap"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    This function takes an integer as input and returns True if it is a power of 2, else False.\n    A power of 2 is a number whose binary representation has no leading zeros. \n    '''\n    if x == 0:\n        return False\n    elif x == 1:\n        return True\n    elif x & (x - 1) == 0:\n        return False\n    else:\n        return is_Power_Of_Two(x - (x & -x))"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x & (x - 1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    while x & (x - 1)!= 0: # check if x is power of 2\n        if x & 1!= x >> 1:\n            return False\n        x >>= 1\n    return True"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return x & (x - 1) == 0"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Power_Of_Two (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return True\n    if x % 2 == 0:\n        return is_Power_Of_Two(x // 2)\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    \n    # Convert the given number to binary and count the number of 1's in the binary representation\n    count = 0\n    while x > 0:\n        if x % 2 == 1:\n            count += 1\n        x = x // 2\n    \n    # If the count of 1's is odd, then the numbers differ at one bit position only\n    if count % 2!= 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n    diff_bit_count = 0\n    while x!= 0:\n        if x % 2!= 0:\n            diff_bit_count += 1\n        x >>= 1\n    return diff_bit_count == 1"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # Convert the numbers to binary and store them in a list\n    binary_str = bin(x)[2:]\n    binary_list = list(binary_str)\n\n    # Remove the last element of the list\n    binary_list.pop()\n\n    # Check if the list contains only one element\n    if len(binary_list) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Power_Of_Two (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x < 2:\n        return False\n    while x & (x - 1)!= 0:\n        x &= x - 1\n    return x == 1"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    while x!= 1: \n        if x % 2 == 0: \n            x //= 2 \n        else: \n            x = 3 * x + 1 \n    return x == 1 "
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Split the text into words\n    words = re.findall(r'\\b\\w+\\b', text)\n    # Filter out words with length less than 4\n    long_words = [word for word in words if len(word) >= 4]\n    return long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Split the string into words\n    words = text.split()\n\n    # Find all words that are at least 4 characters long\n    result = []\n    for word in words:\n        if len(word) >= 4:\n            result.append(word)\n\n    # Return the list of words that are at least 4 characters long\n    return result"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Define a regular expression pattern to match words which are at least 4 characters long\n    pattern = r'\\b\\w{4,}\\b'\n\n    # Find all matches of the pattern in the text and return them as a list\n    return re.findall(pattern, text)"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Find all words that are at least 4 characters long\n    pattern = r'\\b\\w{4,}\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_char_long(text):\n    words = re.findall(r'\\b\\w+\\b', text)\n    long_words = [word for word in words if len(word) >= 4]\n    return long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # use regex to split the text into words\n    words = re.findall(r'\\b\\w+\\b', text)\n    # filter the words based on their length\n    result = [word for word in words if len(word) >= 4]\n    return result"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w{4,}\\b'\n    words = re.findall(pattern, text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w{4,}\\b'\n    words = re.findall(pattern, text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Use regular expressions to split the text into words and then filter out words with less than 4 characters\n    words = re.findall(r'\\b\\w{4,}\\b', text.lower())\n    return words"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for num in nums:\n        print(num*num)"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num ** 2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num**2)\n    return squared_nums"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Rotations(str):\n    str_len = len(str)\n    # Find the smallest rotations required to make the string palindrome\n    count = 0\n    while count < str_len // 2:\n        if str[0:count+1] == str[-(count+1):]:\n            break\n        count += 1\n    # Find the minimum rotations required to make the string not palindrome\n    min_rotations = str_len // 2\n    for i in range(str_len - 1):\n        if str[i]!= str[str_len - 1 - i]:\n            min_rotations = min(min_rotations, i + 1)\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Rotations(str):\n    \"\"\"\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n\n    Parameters:\n        str (str): The given string for which we need to find the minimum number of rotations required to get the same string.\n\n    Returns:\n        int: The minimum number of rotations required to get the same string.\n    \"\"\"\n    # Finding the length of the given string\n    n = len(str)\n\n    # Initializing the result variable\n    minRotations = float('inf')\n\n    # Finding all possible rotations of the given string\n    for i in range(1, n+1):\n        rotations = \"\"\n        for j in range(n-i+1):\n            rotations += str[j:j+i]\n        # Checking if the rotations are equal to the original string\n        if rotations == str:\n            minRotations = min(minRotations, i)\n\n    return minRotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Rotations(str):\n    \"\"\"\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    \"\"\"\n    # Initialize a dictionary to store the count of each character in the string\n    char_count = {}\n    for char in str:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    # Initialize a dictionary to store the minimum count of each character in the string\n    min_count = {}\n\n    # Loop through the keys of the char_count dictionary and find the minimum count for each character\n    for key, value in char_count.items():\n        if key not in min_count or min_count[key] > value:\n            min_count[key] = value\n\n    # Initialize a variable to store the number of rotations required\n    rotations = 0\n\n    # Loop through the keys of the min_count dictionary and find the rotation count for each character\n    for key, value in min_count.items():\n        # Loop through the keys of the min_count dictionary and find the number of rotations required for each character\n        while value > 0:\n            rotations += 1\n            value -= 1\n\n    return rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Rotations(str):\n    \"\"\"\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    \"\"\"\n    n = len(str)\n    count = 0\n    for i in range(n):\n        if str[i:n] == str[:i] + str[i+1:]:\n            count += 1\n    return count"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    min_rotations = 0\n    for i in range(n):\n        for j in range(n-1, i-1, -1):\n            if str[i:j+1] == str[j:i+1][::-1]:\n                min_rotations = min(min_rotations, i - j + 1)\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # Create a dictionary to store the count of characters in the string\n    char_count = {}\n    for char in str:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # Convert the dictionary to a list of tuples\n    char_count_list = [(k,v) for k,v in char_count.items()]\n    \n    # Sort the list in ascending order of character count\n    char_count_list.sort(key=lambda x: x[1])\n    \n    # Initialize the minimum number of rotations to zero\n    min_rotations = 0\n    \n    # Iterate over the sorted list of tuples\n    for i in range(len(char_count_list)-1):\n        if char_count_list[i][1] < char_count_list[i+1][1]:\n            min_rotations += 1\n    \n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    m = 0\n\n    for i in range(2, n+1):\n        m = max(m, n-i)\n\n    return m"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    for i in range(n // 2):\n        if str[i]!= str[n-1-i]:\n            return i + 1\n    return 0\n"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    # create a dictionary to store the frequency of characters\n    freq = {}\n    for i in range(n):\n        if str[i] in freq:\n            freq[str[i]] += 1\n        else:\n            freq[str[i]] = 1\n    # find the minimum number of rotations\n    min_rotations = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if j-i > min_rotations:\n                min_rotations = j-i\n            # check if the frequency of characters in the substring str[i:j] is equal to the frequency of characters in the original string\n            if freq[str[i]] == freq[str[j]:j]:\n                min_rotations += 1\n                break\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Rotations(str): \n    \"\"\"\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    \"\"\"\n    # create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    # find the maximum frequency of any character\n    max_freq = max(freq.values())\n    \n    # find the minimum number of rotations required to get the same string\n    count = 0\n    while True:\n        rotated_str = str + str[0:max_freq]\n        rotated_freq = {}\n        for char in rotated_str:\n            if char in rotated_freq:\n                rotated_freq[char] += 1\n            else:\n                rotated_freq[char] = 1\n        if rotated_freq == freq:\n            count += 1\n        else:\n            break\n    \n    return count"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # check if the string is empty\n    if s == '':\n        return ''\n    # check if the character is in the string\n    if ch not in s:\n        return s\n    # check if the string has only one character\n    if len(s) == 1:\n        return ''\n    # find the first and last occurrence of the character in the string\n    first = s.find(ch)\n    last = s.rfind(ch)\n    # if the first occurrence is not at the beginning of the string\n    if first!= 0:\n        s = s[:first] + s[first+1:]\n    # if the last occurrence is not at the end of the string\n    if last!= len(s)-1:\n        s = s[:last] + s[last+1:]\n    # return the string with the first and last occurrence removed\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if s.find(ch) == 0:\n        return s[1:]\n    elif s.rfind(ch) == len(s)-1:\n        return s[:len(s)-1]\n    else:\n        return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    Write a python function to remove first and last occurrence of a given character from the string.\n    \"\"\"\n    # Removing the first occurrence of the character\n    s = s.replace(ch, '', 1)\n    # Removing the last occurrence of the character\n    s = s.replace(ch, '', -1)\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_Occ(s,ch):\n    \"\"\"\n    Write a python function to remove first and last occurrence of a given character from the string.\n    \"\"\"\n    # remove first occurrence\n    if s.startswith(ch):\n        s = s[1:]\n    # remove last occurrence\n    if s.endswith(ch):\n        s = s[:-1]\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_Occ(s, ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # remove first occurrence of character from string\n    s = s.replace(ch, \"\", 1)\n    # remove last occurrence of character from string\n    s = s.replace(ch, \"\", -1)\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # Removing first occurrence\n    s = s.replace(ch, '', 1)\n    # Removing last occurrence\n    s = s.replace(ch, '', -1)\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_Occ(s, ch):\n    '''\n    This function removes first and last occurrence of a given character from the string s.\n    '''\n    s = s.replace(ch,'')\n    s = s.lstrip()\n    s = s.rstrip()\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = s.replace(ch,'')\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_Occ(s, ch):\n    # check if string is empty or None\n    if not s:\n        return \"\"\n    # check if character is empty or None\n    if not ch:\n        return s\n    # remove first occurrence of character\n    if s.find(ch) == 0:\n        return s[ch:].lstrip()\n    # remove last occurrence of character\n    elif s.rfind(ch) == len(s) - len(ch):\n        return s[:s.rfind(ch)].rstrip()\n    # return the original string if no occurrences of character were found\n    else:\n        return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    Remove first and last occurrence of a given character from the string.\n\n    :param s: string\n    :param ch: character to be removed\n    :return: string without first and last occurrence of the character\n    \"\"\"\n    # remove first occurrence of character\n    if s.startswith(ch):\n        s = s[1:]\n    # remove last occurrence of character\n    if s.endswith(ch):\n        s = s[:-1]\n    return s"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Find the maximum sum in each row\n    max_sum = [0] * len(M)\n    for i in range(len(M)):\n        row_sum = sum(M[i])\n        max_sum[i] = row_sum\n    \n    # Sort the matrix based on the maximum sum\n    sorted_M = [[] for i in range(len(M))]\n    for i in range(len(M)):\n        sorted_row = [0] * len(M[0])\n        for j in range(len(M)):\n            sorted_row[j] = M[i][j]\n        sorted_M[i] = sorted_row\n    \n    for i in range(len(sorted_M)):\n        for j in range(len(sorted_M[0])):\n            sorted_M[i][j] = sorted_M[i][j] * max_sum[i]\n    \n    # Print the sorted matrix\n    print(\"Sorted Matrix:\")\n    for row in sorted_M:\n        print(row)"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # loop through each row of the matrix\n    for i in range(len(M)):\n        # loop through each column of the current row\n        for j in range(i+1, len(M)):\n            # calculate the sum of the current row\n            row_sum = sum(M[i])\n            # calculate the sum of the next row\n            next_row_sum = sum(M[j])\n            # check if the sum of the current row is less than the sum of the next row\n            if row_sum < next_row_sum:\n                # swap the rows\n                M[i], M[j] = M[j], M[i]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n\n    # Initialize the sum of each row to 0\n    row_sums = [0] * len(M[0])\n\n    # Calculate the sum of each row\n    for i in range(len(M)):\n        for j in range(len(M[i])):\n            row_sums[j] += M[i][j]\n\n    # Sort the matrix based on the sum of each row\n    for i in range(len(M)):\n        for j in range(len(M[i])):\n            M[i][j] = M[i][j] + row_sums[j]\n\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    # Traverse all rows of the matrix\n    for i in range(n):\n        # Traverse all elements of the current row and calculate the sum of its elements\n        sum_of_row = sum(M[i])\n        # Traverse all the elements of the matrix starting from the next row and swap them with the current row if the sum of the row is smaller than the sum of the previous row\n        for j in range(i+1, n):\n            if M[j][0] < sum_of_row:\n                M[i], M[j] = M[j], M[i]\n                break"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    \n    # Initialize a list to store the row sums\n    row_sums = []\n    \n    # Loop through each row of the matrix\n    for row in M:\n        # Calculate the sum of the row\n        row_sum = sum(row)\n        # Append the sum to the row_sums list\n        row_sums.append(row_sum)\n        \n    # Sort the row_sums list in ascending order\n    row_sums.sort()\n    \n    # Initialize a new matrix of the same dimensions as the original matrix\n    sorted_M = [[0]*len(M[0]) for i in range(len(M))]\n    \n    # Loop through each row and column of the new matrix\n    for i in range(len(M)):\n        for j in range(len(M[0])):\n            # Calculate the index of the element in the sorted row_sums list\n            index = row_sums.index(sum(sorted_M[i][j:j+len(M[0])]))\n            # Append the element to the new matrix\n            sorted_M[i][j] = M[i][j+index]\n    \n    # Return the sorted matrix\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Calculate the sum of each row of the matrix\n    row_sums = [sum(row) for row in M]\n\n    # Sort the row sums in ascending order\n    sorted_row_sums = sorted(row_sums)\n\n    # Use the sorted row sums to create a new matrix where the rows are sorted in ascending order\n    sorted_M = [[M[i][j] for i in range(len(sorted_row_sums))] for j in range(len(M[0]))]\n\n    # Print the sorted matrix\n    for row in sorted_M:\n        print(row)\n\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    rows = len(M)\n    cols = len(M[0])\n    for i in range(rows):\n        for j in range(cols):\n            for k in range(i+1, rows):\n                if sum(M[i]) > sum(M[k]):\n                    M[i], M[k] = M[k], M[i]"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # initialize the list of rows to sort\n    sorted_rows = []\n    \n    # iterate through the rows of the matrix and add the sum of those rows to a list\n    for i in range(len(M)):\n        row_sum = sum(M[i])\n        sorted_rows.append((i, row_sum))\n    \n    # sort the list of rows by the second element (the sum of the row)\n    sorted_rows.sort(key=lambda x: x[1])\n    \n    # create a new matrix that contains only the rows that are in ascending order\n    new_M = [[0 for j in range(len(M[0]))] for i in range(len(sorted_rows))]\n    for i in range(len(sorted_rows)):\n        new_M[sorted_rows[i][0]] = M[sorted_rows[i][0]]\n    \n    return new_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    \n    # Get the sum of each row\n    row_sums = [sum(row) for row in M]\n    \n    # Sort the matrix based on the row sums\n    sorted_M = sorted(M, key=lambda x: row_sums.index(sum(x)))\n    \n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # initialize two variables to keep track of the current maximum sum and its index\n    max_sum = 0\n    max_index = 0\n    \n    # iterate over the rows of the matrix\n    for i in range(len(M)):\n        # initialize a variable to store the sum of the current row\n        row_sum = 0\n        \n        # iterate over the elements of the current row\n        for j in range(len(M[i])):\n            # add the value of the element to the sum\n            row_sum += M[i][j]\n            \n            # if the current sum is greater than the current maximum sum, update both variables\n            if row_sum > max_sum:\n                max_sum = row_sum\n                max_index = i\n        \n        # sort the current row in ascending order\n        M[i] = sorted(M[i])\n    \n    # sort the entire matrix in ascending order based on the sum of its rows\n    return sorted(M, key=lambda x: sum(x))"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Volume(l,b,h): \n    ''' \n    This function takes three input parameters l, b, and h which represent the length, \n    breadth, and height of a triangular prism respectively. It calculates the volume \n    of the triangular prism using the formula given below: \n\n    Volume = (l * b * h) / 3 \n\n    The function then returns the calculated volume. \n\n    Example: \n\n    >>> find_Volume(5, 8, 3)\n    68.0 \n    '''\n\n    volume = (l * b * h) / 3 \n\n    return volume "
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = 1/2 * l * b * h\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    # calculate the volume using the formula V = (l*b*h)/3\n    V = (l * b * h) / 3\n    print(\"The volume of the triangular prism is:\", V)"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l * b * h / 3\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l * b * h\n    print(\"The volume of the triangular prism is:\", volume)"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef find_Volume(l, b, h):\n    '''\n    This function takes in the length of the base, the length of the height, and the height of the prism as arguments.\n    It then calculates the volume of the prism using the formula V = \u221a(l x b x h).\n    '''\n    V = math.sqrt(l*b*h)\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    # Calculate the volume of the prism\n    volume = 0.5 * l * b * h\n    \n    # Print the result\n    print(\"The volume of the prism is:\", volume)"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Volume(l,b,h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n\n    Parameters:\n    l: float\n        Length of the base of the prism\n    b: float\n        Length of the height of the prism\n    h: float\n        Length of the width of the prism\n\n    Returns:\n    float\n        The volume of the triangular prism.\n    '''\n\n    # Calculate the volume of the prism\n    V = l*b*h\n\n    # Return the volume\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l * b * h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = 0.5 * l * b * h # calculate the volume\n    print(\"The volume of the triangular prism is:\", V)"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    underscore_pattern = re.compile(r'([a-z])_([a-z])')\n    underscore_count = underscore_pattern.findall(text)\n    return len(underscore_count) > 0"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'^[a-z]*_[a-z]+$'\n    return bool(re.match(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z]+_[a-z]+'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n\n    underscore_pattern = r'(?<!_)([a-z]+)_(?!_)'\n    matches = re.findall(underscore_pattern, text)\n\n    if matches:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'(?<=[a-z])[A-Z](?=[a-z]|$)'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'([a-z]+)(_[a-z]+)*'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'^[a-z][a-z_]*[a-z]$'\n    match = re.match(pattern, text)\n    return match is not None\n"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'(?<=[a-z])(?=[A-Z])|(?<=[A-Z])(?=[A-Z][a-z])'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'\\b[a-z]+_+\\b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n\n    # Create a regular expression to match sequences of lowercase letters\n    pattern = re.compile(r'[a-z]+_')\n    \n    # Search for matches in the input string\n    matches = pattern.findall(text)\n    \n    # Check if any matches were found\n    if matches:\n        return True\n    else:\n        return False"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    \"\"\"\n    Write a function that returns the perimeter of a square given its side length as input.\n    \"\"\"\n    perimeter = 4 * a\n    return perimeter"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def str_to_list(string, remove_chars):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    result = []\n    for char in string:\n        if char not in remove_chars:\n            result.append(char)\n    return ''.join(result)\n\n\nNO_OF_CHARS = 256\nstring = input(\"Enter a string: \")\nremove_chars = input(\"Enter the characters to remove: \")\nresult = str_to_list(string, remove_chars)\nprint(\"The modified string without the characters:\", result)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Convert the string to a list of characters\n    string_list = list(string)\n\n    # Create a set of characters to check for\n    check_set = set(string[i] for i in range(len(string)))\n\n    # Remove characters from the string_list\n    for char in string_list:\n        if char in check_set:\n            string_list.remove(char)\n\n    # Convert the list back to a string and return it\n    return ''.join(string_list)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def str_to_list(string):\n    \"\"\"\n    Remove characters from the first string which are present in the second string.\n    \"\"\"\n    list_of_chars = [chr(i) for i in range(NO_OF_CHARS)]\n    list_of_chars.remove(string[0])\n    list_of_chars.remove('0')\n    list_of_chars.remove('1')\n    list_of_chars.remove('2')\n    list_of_chars.remove('3')\n    list_of_chars.remove('4')\n    list_of_chars.remove('5')\n    list_of_chars.remove('6')\n    list_of_chars.remove('7')\n    list_of_chars.remove('8')\n    list_of_chars.remove('9')\n    list_of_chars.remove('A')\n    list_of_chars.remove('B')\n    list_of_chars.remove('C')\n    list_of_chars.remove('D')\n    list_of_chars.remove('E')\n    list_of_chars.remove('F')\n    list_of_chars.remove('G')\n    list_of_chars.remove('H')\n    list_of_chars.remove('I')\n    list_of_chars.remove('J')\n    list_of_chars.remove('K')\n    list_of_chars.remove('L')\n    list_of_chars.remove('M')\n    list_of_chars.remove('N')\n    list_of_chars.remove('O')\n    list_of_chars.remove('P')\n    list_of_chars.remove('Q')\n    list_of_chars.remove('R')\n    list_of_chars.remove('S')\n    list_of_chars.remove('T')\n    list_of_chars.remove('U')\n    list_of_chars.remove('V')\n    list_of_chars.remove('W')\n    list_of_chars.remove('X')\n    list_of_chars.remove('Y')\n    list_of_chars.remove('Z')\n    list_of_chars.remove('a')\n    list_of_chars.remove('b')\n    list_of_chars.remove('c')\n    list_of_chars.remove('d')\n    list_of_chars.remove('e')\n    list_of_chars.remove('f')\n    list_of_chars.remove('g')\n    list_of_chars.remove('h')\n    list_of_chars.remove('i')\n    list_of_chars.remove('j')\n    list_of_chars.remove('k')\n    list_of_chars.remove('l')\n    list_of_chars.remove('m')\n    list_of_chars.remove('n')\n    list_of_chars.remove('o')\n    list_of_chars.remove('p')\n    list_of_chars.remove('q')\n    list_of_chars.remove('r')\n    list_of_chars.remove('s')\n    list_of_chars.remove('t')\n    list_of_chars.remove('u')\n    list_of_chars.remove('v')\n    list_of_chars.remove('w')\n    list_of_chars.remove('x')\n    list_of_chars.remove('y')\n    list_of_chars.remove('z')\n\n    list_of_chars = ''.join(list_of_chars)\n\n    return list_of_chars"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    no_of_chars = 256\n    char_list = list(range(no_of_chars))\n    first_string = string.lower()\n    second_string = ''.join(char_list)\n    result = ''\n    for char in first_string:\n        if char not in second_string:\n            result += char\n    return result"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def str_to_list(string1, string2):\n    \"\"\"\n    Remove characters from the first string which are present in the second string.\n    \"\"\"\n    # Convert string1 to a list of characters\n    char_list1 = list(string1)\n\n    # Loop through each character in string2 and remove it from string1 if present\n    for char in string2:\n        if char in char_list1:\n            char_list1.remove(char)\n\n    # Convert list of characters back to string and return it\n    return ''.join(char_list1)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # convert string to list of characters\n    chars = list(string)\n    # create a set of characters in the second string\n    char_set = set(string)\n    # iterate over each character in the first string\n    for i in range(len(chars)):\n        # if the character is in the set, remove it\n        if chars[i] in char_set:\n            chars.pop(i)\n            # decrement the index to avoid skipping over removed characters\n            i -= 1\n    # convert the list of characters back to a string\n    result = ''.join(chars)\n    return result"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def str_to_list(string1, string2):\n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n    # convert the strings to lists of characters\n    list1 = list(string1)\n    list2 = list(string2)\n    # initialize the result list with all the characters in string1\n    result = list1\n    # remove the characters in string2 from the result list\n    for char in list2:\n        if char in result:\n            result.remove(char)\n    # convert the result list back to a string\n    result_str = ''.join(result)\n    return result_str"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def str_to_list(string):\n    NO_OF_CHARS = 256\n    char_count = [0] * NO_OF_CHARS\n    char_index = 0\n\n    for char in string:\n        char_count[ord(char)] += 1\n\n    for i in range(NO_OF_CHARS):\n        if char_count[i] > 0:\n            char_index = i\n            break\n\n    result = []\n    for char in string:\n        if ord(char)!= char_index:\n            result.append(char)\n\n    return ''.join(result)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def str_to_list(string, char_list):\n    \"\"\"\n    Removes characters from the first string which are present in the second string.\n    \"\"\"\n    result = []\n    for char in string:\n        if char not in char_list:\n            result.append(char)\n    return ''.join(result)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    char_list = list(string)\n    char_count = {}\n\n    # Count the frequency of each character in the first string\n    for i in range(len(char_list)):\n        char = char_list[i]\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    # Remove the characters from the first string which have a frequency greater than 1\n    for i in range(len(char_list)):\n        char = char_list[i]\n        if char_count[char] > 1:\n            char_list.pop(i)\n            char_count.pop(char)\n            i -= 1\n\n    return ''.join(char_list)"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # create a set to store unique elements\n    unique_set = set()\n    # loop through the array and add each element to the set\n    for num in arraynums:\n        unique_set.add(num)\n    # if the length of the set is equal to the length of the array, there are no duplicates\n    if len(unique_set) == len(arraynums):\n        return False\n    else:\n        return True"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    for i in range(len(arraynums)):\n        for j in range(i+1, len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    nums_set = set(arraynums)\n    if len(nums_set) == len(arraynums):\n        return False\n    else:\n        return True"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    hash_table = {}\n    for num in arraynums:\n        if num in hash_table:\n            return True\n        hash_table[num] = True\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # create a dictionary to store the elements and their frequency\n    frequency_dict = {}\n    for num in arraynums:\n        # if the element is already in the dictionary, increment its frequency\n        if num in frequency_dict:\n            frequency_dict[num] += 1\n        # if the element is not in the dictionary, add it with frequency 1\n        else:\n            frequency_dict[num] = 1\n\n    # loop through the dictionary and check if any frequency is greater than 1\n    for freq in frequency_dict.values():\n        if freq > 1:\n            return True\n\n    # if no duplicate was found, return False\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create a dictionary to store the elements in the array\n    element_dict = {}\n    # Iterate through the array\n    for num in arraynums:\n        # If the number is already in the dictionary, it means it is a duplicate\n        if num in element_dict:\n            return True\n        # If the number is not in the dictionary, add it to the dictionary\n        else:\n            element_dict[num] = True\n    # If no duplicates are found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # create a dictionary to store the counts of each integer in the array\n    count_dict = {}\n    \n    # loop through the array and increment the count for each integer\n    for num in arraynums:\n        count_dict[num] = count_dict.get(num, 0) + 1\n    \n    # check if there is at least one integer that appears more than once in the dictionary\n    for count in count_dict.values():\n        if count > 1:\n            return True\n    \n    # if no duplicate integers were found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    hashset = set()\n    for num in arraynums:\n        if num in hashset:\n            return True\n        else:\n            hashset.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n\n    # Create a set to store the unique elements of the array\n    unique_nums = set(arraynums)\n\n    # Check if there are any duplicates in the set\n    if len(unique_nums) == len(arraynums):\n        print(\"The array does not contain any duplicate elements.\")\n    else:\n        print(\"The array contains duplicate elements.\")"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n\n    if x < 1 or x > 500:\n        return \"Invalid input\"\n    elif x % 5 == 0:\n        return \"Woodall\"\n    else:\n        return \"Not a Woodall\""
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_woodall(x):\n    if x == 1:\n        return True\n    elif x == 2 or x == 4:\n        return False\n    elif x > 4:\n        return is_woodall(x // 2)\n    else:\n        return is_woodall(x * 2)"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 1:\n        return \"Woodball\"\n    else:\n        return \"Not a woodball\""
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 1:\n        return \"Yes, it is a woodball\"\n    elif x > 1 and x % 2 == 0:\n        return \"Yes, it is a woodball\"\n    else:\n        return \"No, it is not a woodball\""
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0:\n        return 'Woodball'\n    else:\n        return 'Not a Woodball'"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 7 == 0:\n        return 'Woodball'\n    else:\n        return 'Not Woodball'"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Check if the given number is woodball or not.\n    \"\"\"\n    if x % 2 == 0 and x % 3 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    # check if the number is divisible by 3 and 5\n    if x % 3 == 0 and x % 5 == 0:\n        return True\n    # check if the number is divisible by 2 and 3\n    elif x % 2 == 0 and x % 3 == 0:\n        return True\n    # otherwise, it's not a woodall\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    if x == 1:\n        return True\n    elif x % 2 == 0:\n        return is_woodall(x // 2)\n    else:\n        return is_woodall((3 * x) + 1)"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    if x in [1, 4, 7, 10]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while num > 0:\n        rev_num = rev_num*10 + num%10\n        num = num//10\n    return (rev_num == 2*num)"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    while num > 0:\n        reverse = reverse * 10 + num % 10\n        num //= 10\n    return num == reverse * 2 - 1"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reversed_num = 0\n    temp = num\n    \n    while temp!= 0:\n        digit = temp % 10\n        reversed_num = reversed_num * 10 + digit\n        temp //= 10\n        \n    if num < 2 * reversed_num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    temp = num\n    while temp!= 0:\n        digit = temp % 10\n        rev_num = rev_num*10 + digit\n        temp //= 10\n    if rev_num == num-1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rev(num):\n    \"\"\"\n    Check if a given number is one less than twice its reverse.\n    \"\"\"\n    reverse = 0\n    while num > 0:\n        remainder = num % 10\n        reverse = reverse * 10 + remainder\n        num //= 10\n    if reverse == 2 * reverse:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while num > 0:\n        rev_num = rev_num * 10 + num % 10\n        num //= 10\n    \n    return True if rev_num == (num - 1) else False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # convert the given number to a string and reverse it\n    rev_str = str(num)[::-1]\n    # convert the reversed string to a number and check if it is one less than twice the original number\n    return (int(rev_str) < int(str(num)))"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    while num > 0:\n        reverse = reverse*10 + num%10\n        num //= 10\n    if reverse < 2*num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    reversed_num = 0\n    while num > 0:\n        digit = num % 10\n        reversed_num = reversed_num * 10 + digit\n        num //= 10\n    return num == reversed_num * 2 - 1"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rev(num):\n    # convert the number to a string and reverse it\n    rev_num = str(num)[::-1]\n    # convert the reversed number to an integer and check if it is one less than twice its reverse\n    return int(rev_num) == num - 2"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for num in arr:\n        max_num = max(max_num, num)\n    return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Max_Num(arr) :\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    \n    # Sorting the array in ascending order\n    arr.sort()\n    \n    # Starting with the largest digit\n    largest = arr[-1]\n    \n    # Looping through the digits from smallest to largest\n    for i in range(len(arr)-2, -1, -1):\n        # Creating a new number by adding the current digit and the previous largest digit\n        new_num = arr[i] + largest\n        \n        # If the new number is greater than the current largest, updating the largest number\n        if new_num > largest:\n            largest = new_num\n            \n    # Returning the largest number found\n    return largest"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n\n    # Convert the given list of digits to a set\n    digits = set(arr)\n\n    # Initialize the largest number to 0\n    max_num = 0\n\n    # Iterate through the digits and calculate the largest number\n    for num in digits:\n        if num > max_num:\n            max_num = num\n\n    # Return the largest number\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort(reverse=True)\n    num = 0\n    for i in range(len(arr)):\n        num += arr[i] * (10**i)\n    return num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # Sort the list of digits in ascending order\n    arr.sort()\n\n    # Initialize the maximum number with the first digit\n    max_num = arr[0]\n\n    # Loop through the list of digits from second to last digit\n    for i in range(1, len(arr)):\n        # Calculate the number formed by the previous digit and the current digit\n        num = (arr[i-1] * 10) + arr[i]\n\n        # Update the maximum number if the current number is greater than the previous maximum\n        if num > max_num:\n            max_num = num\n\n    # Return the maximum number formed with the given list of digits\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # Find the maximum number of digits that can be formed from the given array of digits\n    max_digits = max(len(str(x)) for x in arr)\n\n    # Initialize the maximum number formed with the given digits to be 0\n    max_num = 0\n\n    # Initialize a list to store the possible numbers formed with the given digits\n    possible_nums = []\n\n    # Loop through all possible digits and form all possible numbers\n    for i in range(10 ** max_digits):\n        num = ''\n        for j in range(max_digits):\n            digit = i % 10\n            num = digit + num\n            i //= 10\n        possible_nums.append(int(num))\n\n    # Find the maximum number formed with the given digits\n    for num in possible_nums:\n        if num > max_num:\n            max_num = num\n\n    # Return the maximum number formed with the given digits\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    if len(arr) == 0 : \n        return 0\n    max_num = 0\n    for num in arr:\n        if num > max_num : \n            max_num = num\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    \"\"\"\n    max_num = 0\n    max_num_len = 0\n\n    for num in arr:\n        # Remove leading zeros\n        num = int(num.lstrip('0'))\n        # Check if the number is greater than the current max\n        if num > max_num:\n            max_num = num\n            max_num_len = len(str(max_num))\n\n    # Pad the max number with leading zeros\n    max_num_str = str(max_num)\n    for _ in range(max_num_len - len(max_num_str)):\n        max_num_str = '0' + max_num_str\n    return max_num_str"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n\n    # Function to return the maximum number that can be formed with the given list of digits\n    def max_num(arr):\n        max_num = arr[0]\n        for i in range(1, len(arr)):\n            max_num = max(max_num, arr[i])\n        return max_num\n\n    # Return the maximum number that can be formed with the given list of digits\n    return max_num(arr)\n"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Max_Num(arr):\n    n = len(arr)\n    max_num = 0\n    \n    for i in range(2**n):\n        curr_num = 0\n        for j in range(n):\n            if i & (1<<j):\n                curr_num += arr[j]\n        max_num = max(max_num, curr_num)\n        \n    return max_num"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n    \"\"\"\n    if x == 0 or y == 0:\n        return \"Both integers are zero\"\n    \n    if x * y > 0:\n        return \"Both integers have opposite signs\"\n    \n    return \"Both integers have the same sign\""
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n\n    # Check if both numbers have the same sign or not\n    if x >= 0 and y >= 0 or x < 0 and y < 0:\n        return \"The two numbers have opposite signs\"\n    else:\n        return \"The two numbers have the same signs\""
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y > 0:\n        return False\n    elif x < 0 and y < 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def opposite_Signs(x, y):\n    '''\n    This function takes two integers as input and returns True if they have opposite signs, else False.\n    '''\n    if x < 0 and y < 0:\n        return True\n    elif x > 0 and y > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y > 0:\n        return True\n    elif x < 0 and y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n    \"\"\"\n    if x > 0 and y < 0 or x < 0 and y > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n\n    if x > 0 and y > 0: \n        return \"Both numbers have the same sign.\"\n    elif x < 0 and y < 0: \n        return \"Both numbers have the same sign.\"\n    else: \n        return \"Both numbers have opposite signs.\"\n"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def opposite_Signs(x, y):\n    if x >= 0 and y >= 0:\n        return \"Both positive\"\n    elif x <= 0 and y <= 0:\n        return \"Both negative\"\n    elif x > 0 and y < 0:\n        return \"x positive, y negative\"\n    elif x < 0 and y > 0:\n        return \"x negative, y positive\"\n    else:\n        return \"Neither positive nor negative\""
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def opposite_Signs(x, y):\n    '''\n    This function takes two integer arguments and returns True if the sum of the two integers has opposite sign,\n    otherwise it returns False.\n    '''\n\n    # To check whether the sign of the two integers is opposite or not, we need to check whether the sum of the two integers is positive or negative.\n    # We can do this by adding the two integers and checking whether the result is positive or negative.\n\n    # To add two integers, we can use the '+' operator. We can also use the 'abs()' function to get the absolute value of the sum.\n\n    # If the sign of the sum of the two integers is positive, then the two integers have opposite signs.\n    if abs(x + y) > 0:\n        return True\n    # If the sign of the sum of the two integers is negative, then the two integers have opposite signs.\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    \n    if x > 0 and y > 0:\n        return \"The two integers have the same sign.\"\n    elif x < 0 and y < 0:\n        return \"The two integers have the same sign.\"\n    else:\n        return \"The two integers have different signs.\""
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # find the first term of the sequence\n    first_term = 1\n    # find the second term of the sequence\n    second_term = 1\n    # initialize a variable to store the result\n    octagonal_number = 1\n    # loop n times\n    for i in range(n):\n        # calculate the third term of the sequence\n        third_term = (first_term + second_term) / 2\n        # add the third term to the result\n        octagonal_number += third_term\n        # update the values of first_term and second_term\n        first_term = second_term\n        second_term = third_term\n    # return the result\n    return octagonal_number"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef nth_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 1:\n        return None\n    if is_octagonal(n):\n        return n - 1\n    for i in range(1, int(n**0.5) + 1):\n        if is_octagonal(i**2 + 1):\n            return i**2 - n + 1\n    return None"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # Check if n is positive\n    if n < 1: \n        return None\n    # Iterate from 1 to n^2\n    for i in range(1, n**2 + 1): \n        # Check if the square of i is equal to n^2\n        if i**2 == n**2: \n            return i\n    # If none of the conditions are met, return None\n    return None"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return int(n * (1.0/8)) ** 2\n\ndef nth_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return is_octagonal(n)\n\nn = int(input(\"Enter the value of n: \"))\nprint(nth_octagonal(n))"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    for i in range(1, n+1):\n        if i**2 == 8*(n-i+1):\n            return True\n    return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    octagonal = 1\n    for i in range(1, n+1):\n        octagonal += i * (i + 1)\n    return octagonal\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The\", n, \"th octagonal number is:\", is_octagonal(n))"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    for i in range(1, n + 1):\n        oct_num = (2 * i - 1) ** 2\n        if oct_num == n:\n            return True\n    return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n\n    octagonal = 1\n    for i in range(n):\n        if i % 2 == 0:\n            octagonal += i\n        else:\n            octagonal -= i\n    return octagonal\n\nn = int(input(\"Enter a number: \"))\nprint(\"The octagonal number is:\", is_octagonal(n))"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n\n    def is_prime(num):\n        \"\"\"\n        Helper function to check if a number is prime.\n        \"\"\"\n        if num < 2:\n            return False\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n\n    def nth_octagonal(n):\n        \"\"\"\n        Helper function to find the nth octagonal number.\n        \"\"\"\n        octagonal = 0\n        i = 1\n        while i <= n:\n            octagonal += i\n            i += 1\n        return octagonal - n\n\n    if is_prime(n):\n        return nth_octagonal(n)\n    else:\n        return None"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n\n    # Define a function to calculate the nth octagonal number\n    def nth_octagonal(n):\n        return (n * (3 * n - 1)) / 2\n\n    # Check if the input is an integer\n    if not isinstance(n, int):\n        raise TypeError('Input must be an integer.')\n\n    # Check if the input is greater than zero\n    if n <= 0:\n        raise ValueError('Input must be a positive integer.')\n\n    # Call the nth_octagonal function with the input\n    result = nth_octagonal(n)\n\n    # Return the result\n    return result"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    # create a dictionary to store the count of substrings with a digit sum equal to their length\n    count = defaultdict(int)\n\n    # loop through all possible substrings of s\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            # calculate the digit sum of the substring\n            digit_sum = sum(int(x) for x in s[i:j])\n\n            # if the digit sum is equal to the length of the substring, increment the count\n            if digit_sum == len(s[i:j]):\n                count[digit_sum] += 1\n\n    # return the count of substrings with a digit sum equal to their length\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # create a dictionary to store the count of substrings with a given sum of digits\n    digit_count = defaultdict(int)\n\n    # loop through all possible substrings of the given string\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            # calculate the sum of digits in the substring\n            substring_sum = sum(int(digit) for digit in s[i:j])\n\n            # update the count of substrings with the given sum of digits\n            digit_count[substring_sum] += 1\n\n    # return the count of all substrings with a given sum of digits\n    return sum(digit_count.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    digit_count = defaultdict(int)\n\n    # counting the number of digits in each substring\n    for i in range(len(s)):\n        if s[i].isdigit():\n            digit_count[len(s[i:])] += 1\n\n    # counting the number of substrings with the sum of digits equal to their length\n    count = 0\n    for i in range(1, len(digit_count) + 1):\n        count += digit_count[i] * digit_count[i]\n\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    # Create a dictionary to store the count of substrings\n    count = defaultdict(int)\n    # Iterate through the characters in the string\n    for i in range(len(s)):\n        # Iterate through the characters in the remaining part of the string\n        for j in range(i, len(s)):\n            # Calculate the sum of digits in the substring\n            substring = int(''.join(sorted(s[i:j+1])))\n            # Update the count of substrings in the dictionary\n            count[substring] += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = defaultdict(int)\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            if sum(int(digit) for digit in s[i:j]) == j-i:\n                count[j] += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n\n    count = defaultdict(int)\n    for i in range(len(s)):\n        count[s[i]] += 1\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            substring = s[i:j+1]\n            if sum(int(digit) for digit in substring) == len(substring):\n                count['count'] += 1\n    return count['count']"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    substrings = defaultdict(int)\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            substr = s[i:j+1]\n            if sum(int(d) for d in substr) == len(substr):\n                substrings[substr] += 1\n    return substrings"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # create a dictionary to store the count of substrings with each length\n    count_dict = defaultdict(int)\n\n    # iterate over all possible substrings of length 1 to n\n    for i in range(1, len(s)+1):\n        # iterate over all possible digits of length i\n        for num in range(10):\n            # check if the sum of digits is equal to i\n            if sum(int(d) for d in s[i-1:i+1]) == i:\n                # update the count of substrings of length i and the number of digits i\n                count_dict[i] += 1\n                count_dict[i] += int(s[i-1:i+1])\n\n    # return the count of substrings with the sum of digits equal to their length\n    return count_dict"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    #create a dictionary to store the count of substrings with the sum of digits equal to their length\n    count = defaultdict(int)\n    #iterate through each character in the string\n    for i in range(len(s)):\n        #convert the character to a string and reverse it\n        r = s[i:][::-1]\n        #convert the reverse string to a set to remove duplicates and sort the characters\n        rs = sorted(set(r))\n        #calculate the sum of the digits in the substring\n        sum_of_digits = sum(int(x) for x in rs)\n        #add the count of the substring to the dictionary\n        count[sum_of_digits] += 1\n    #return the dictionary\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n\n    # Create a dictionary to store the count of each substring\n    count = defaultdict(int)\n\n    # Iterate through the string and count the number of substrings with the sum of digits equal to their length\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            if sum(int(digit) for digit in s[i:j]) == j-i:\n                count[s[i:j]] += 1\n\n    return count"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # initialize the smallest number to the first element in the list\n    smallest = xs[0]\n    # loop through the rest of the list\n    for x in xs[1:]:\n        # if the current element is less than the smallest, update the smallest number\n        if x < smallest:\n            smallest = x\n    # return the smallest number\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    \n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    \n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    This function takes a list as input and returns the smallest number in the list.\n    '''\n    if len(xs) == 0:\n        return None\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 1:\n        return xs[0]\n    else:\n        return min(xs[0], smallest_num(xs[1:]))"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs[1:]:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Check if the given list is empty\n    if not test_list:\n        return None\n    \n    # Initialize variables to store the maximum difference and the minimum value\n    max_diff = 0\n    min_val = test_list[0][0]\n    \n    # Loop through the list\n    for i in range(1, len(test_list)):\n        # Check if the current value is less than the minimum value\n        if test_list[i][0] < min_val:\n            min_val = test_list[i][0]\n        else:\n            # Calculate the difference between the current value and the minimum value\n            diff = test_list[i][0] - min_val\n            # Update the maximum difference if the current difference is greater than the maximum difference\n            if diff > max_diff:\n                max_diff = diff\n    \n    # Return the maximum difference\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) < 2:\n        return None\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = test_list[j][1] - test_list[i][1]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    # Sort the tuple list in ascending order\n    sorted_list = sorted(test_list)\n\n    # Initialize maximum difference\n    max_diff = 0\n\n    # Iterate through the tuple list\n    for i in range(len(sorted_list)):\n        # Calculate the difference between adjacent elements\n        diff = sorted_list[i+1] - sorted_list[i]\n\n        # Update the maximum difference if necessary\n        if diff > max_diff:\n            max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) < 2:\n        return None\n    \n    max_diff = None\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if max_diff is None or diff > max_diff:\n                max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    diff = 0\n    for i in range(len(test_list) - 1):\n        for j in range(i + 1, len(test_list)):\n            diff = max(diff, test_list[j][0] - test_list[i][1])\n    return diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = test_list[j][0] - test_list[i][0]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Check if there are at least two elements in the list\n    if len(test_list) < 2:\n        return None\n    \n    # Sort the list by the first element in each tuple\n    test_list.sort(key=lambda x: x[0])\n    \n    # Initialize the maximum difference found so far\n    max_diff = 0\n    \n    # Loop through the sorted list\n    for i in range(len(test_list) - 1):\n        # Calculate the difference between the current pair of elements\n        diff = test_list[i+1][0] - test_list[i][0]\n        \n        # Update the maximum difference if the current difference is greater\n        if diff > max_diff:\n            max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    if len(test_list) < 2:\n        return \"Please provide at least two elements in the list.\"\n    \n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = test_list[j][0]-test_list[i][0]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    # sort the list of tuples in ascending order\n    test_list.sort()\n\n    # initialize maximum difference as 0\n    max_diff = 0\n\n    # iterate through the sorted list of tuples\n    for i in range(len(test_list)-1):\n        # calculate the difference between the current pair and the next pair\n        diff = test_list[i][1] - test_list[i+1][0]\n\n        # update maximum difference if necessary\n        if diff > max_diff:\n            max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    # Sort the list of tuples based on the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sort the list of tuples by the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    Write a function to sort a list of tuples using the second value of each tuple.\n    \"\"\"\n    # Sort the list of tuples based on the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    \n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    # sort the list of tuples using the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    # return the sorted list of tuples\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n\n    def flatten(data_list):\n        '''\n        Recursively flatten a list.\n        '''\n        result = []\n        for item in data_list:\n            if isinstance(item, list):\n                result.extend(flatten(item))\n            else:\n                result.append(item)\n        return result\n\n    flattened_list = flatten(data_list)\n    return sum(flattened_list)\n"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Base case: if the list is empty, return 0\n    if not data_list:\n        return 0\n\n    # Recursive case: flatten the list, add each element to the sum, and then return the sum\n    return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not isinstance(data_list, list):\n        return data_list\n    else:\n        flat_list = []\n        for item in data_list:\n            flat_list.extend(recursive_list_sum(item))\n        return sum(flat_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Base case: if the list is empty, return 0\n    if not data_list:\n        return 0\n    \n    # Recursive case: sum the first element and call the function recursively with the rest of the list\n    return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Base case: if the list contains only one element, return it.\n    if len(data_list) == 1:\n        return data_list[0]\n    else:\n        # Recursively flatten the list, adding each element to a new list.\n        flattened_list = []\n        for item in data_list:\n            if type(item) == list:\n                flattened_list.extend(recursive_list_sum(item))\n            else:\n                flattened_list.append(item)\n        # Sum the flattened list and return the result.\n        return sum(flattened_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Base case: if the list is empty, return 0\n    if not data_list:\n        return 0\n\n    # Recursive case: add the first element and the sum of the rest of the list to the total\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Base case: if the list is empty, return 0\n    if not data_list:\n        return 0\n    \n    # Recursive case: sum the first element of the list and call the function on the rest of the list\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten_list(lst):\n        '''\n        Helper function to flatten a list.\n        '''\n        result = []\n        for item in lst:\n            if type(item) == list:\n                result.extend(flatten_list(item))\n            else:\n                result.append(item)\n        return result\n\n    def sum_flattened_list(lst):\n        '''\n        Helper function to sum a flattened list.\n        '''\n        if not lst:\n            return 0\n        else:\n            return lst[0] + sum_flattened_list(lst[1:])\n\n    flattened_list = flatten_list(data_list)\n    return sum_flattened_list(flattened_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    if not isinstance(data_list, list):\n        return data_list\n    \n    total = 0\n    for item in data_list:\n        if isinstance(item, list):\n            total += recursive_list_sum(item)\n        else:\n            total += item\n    \n    return total"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    else:\n        head, *tail = data_list\n        return head + recursive_list_sum(tail)"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pos_count(lst):\n    \"\"\"\n    Write a python function to count the number of positive numbers in a list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pos_count(lst):\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pos_count(list):\n    '''\n    This function takes a list as input and counts the number of positive numbers in the list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pos_count(lst):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pos_count(lst):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)\n"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Define a function to check if a number is a Bell number\n    def is_bell(num):\n        if num < 1 or num > 1000000:\n            return False\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n\n    # Define a function to calculate the number of ways to partition a set of Bell numbers\n    def count_ways(num):\n        if num == 0:\n            return 1\n        elif num == 1:\n            return 2\n        elif is_bell(num):\n            return num\n        else:\n            return 0\n\n    # Define a function to calculate the number of ways to partition a set of Bell numbers using dynamic programming\n    def count_ways_dp(num):\n        dp = [0] * (num + 1)\n        dp[0] = 1\n        dp[1] = 2\n        for i in range(2, num + 1):\n            if is_bell(i):\n                dp[i] = i\n            else:\n                dp[i] = count_ways(i) + dp[i - 1]\n        return dp[num]\n\n    # Call the function to calculate the number of ways to partition a set of Bell numbers using dynamic programming\n    return count_ways_dp(n)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n\n    Parameters:\n    n (int): the number of Bell numbers to partition\n\n    Returns:\n    int: the number of ways to partition the set of Bell numbers\n    \"\"\"\n\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        # number of ways to partition the first n-1 Bell numbers\n        ways = 0\n        for i in range(1, n):\n            ways += bell_number(i)\n\n        # number of ways to partition the last one\n        ways += n\n\n        return ways"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Initialize the number of ways to partition to 1\n    ways = 1\n\n    # Iterate through all the possible ways to partition the set of Bell numbers\n    for i in range(1, n+1):\n        # Calculate the number of ways to partition the set of Bell numbers that include i\n        ways_to_include_i = bell_number(i-1)\n\n        # Multiply the number of ways to partition the set of Bell numbers that include i by the number of ways to exclude i\n        ways_to_exclude_i = ways // i\n\n        # Add the two numbers to get the total number of ways to partition the set of Bell numbers\n        ways += ways_to_include_i + ways_to_exclude_i\n\n    # Return the total number of ways to partition the set of Bell numbers\n    return ways"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return bell_number(n // 2) + bell_number(n // 2)\n    else:\n        return bell_number(n // 2) + bell_number(n // 2) - 1\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"Number of ways to partition a set of Bell numbers:\", bell_number(n))"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell = [1] * (n+1)\n    bell[0] = 0\n    bell[1] = 1\n    for i in range(2, n+1):\n        for j in range(i):\n            if j == 0:\n                bell[i] += bell[j]\n            elif j == i-1:\n                bell[i] += bell[j-1]\n            else:\n                bell[i] += bell[j] + bell[j-1]\n    return bell[n]\n"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell_set = set(range(1, n+1))\n    ways = 0\n    for i in range(1, n+1):\n        # check if the current number is in the set of Bell numbers\n        if i in bell_set:\n            # if it is, check if any of the numbers after it can be added to the set\n            for j in range(i, n+1, i):\n                bell_set.remove(j)\n            # if all the numbers after it can be added to the set, increment the number of ways\n            if len(bell_set) == 0:\n                ways += 1\n    return ways"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Initialize the table to store the number of ways to partition a set of Bell numbers\n    table = [[0] * (n+1) for i in range(n+1)]\n    \n    # Initialize the first row and column\n    table[0][0] = 1\n    table[1][0] = 0\n    \n    # Fill the rest of the table\n    for i in range(2, n+1):\n        for j in range(1, i+1):\n            table[i][j] = table[i-1][j-1] + table[i-1][j]\n    \n    return table[n][n]"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n < 0:\n        return None\n    elif n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        count = 0\n        for i in range(2, n+1):\n            count += bell_number(i)\n        return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    # Base case: If n=0 or n=1, there are 1 and 0 ways to partition the set of Bell numbers.\n    if n == 0 or n == 1:\n        return 1\n    \n    # Initialize two variables to store the count of ways to partition the set of Bell numbers.\n    ways = 0\n    ways_2 = 0\n    \n    # Loop through the range of numbers from 0 to n-1.\n    for i in range(n):\n        # Calculate the number of ways to partition the set of Bell numbers with numbers greater than i.\n        ways += bell_number(i)\n        \n        # Calculate the number of ways to partition the set of Bell numbers with numbers less than or equal to i.\n        ways_2 += 2*i + 1\n    \n    # Return the count of ways to partition the set of Bell numbers.\n    return ways_2"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Monotonic(A):\n    if len(A) < 2:\n        return True\n    if A[0] <= A[1]:\n        return is_Monotonic(A[1:])\n    else:\n        return is_Monotonic(A[:-1])"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n\n    # check if the array is empty or has only one element\n    if len(A) == 0 or len(A) == 1:\n        return True\n\n    # check if the array is monotonic in increasing or decreasing order\n    for i in range(len(A) - 1):\n        if A[i] > A[i+1]:\n            return False\n        elif A[i] < A[i+1]:\n            return True\n\n    # if the array is monotonic in increasing order, return True\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) <= 1:\n        return True\n    \n    for i in range(len(A)-1):\n        if A[i] > A[i+1]:\n            return False\n    \n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Monotonic(A):\n    for i in range(len(A) - 1):\n        if A[i] > A[i+1]:\n            return False\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    for i in range(n-1):\n        if A[i] > A[i+1]:\n            return False\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n\n    if len(A) < 2: \n        return True\n\n    if A[1] - A[0] == 0: \n        return is_Monotonic(A[1:])\n    else: \n        return False "
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Monotonic(A): \n    n = len(A) \n    if n <= 1: \n        return True\n\n    for i in range(n): \n        if A[i] > A[i+1]: \n            return False \n        elif A[i] < A[i+1]: \n            return True\n\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Monotonic(A):\n    '''\n    This function takes a list A as input and checks whether it is monotonic or not. \n    A monotonic array is one in which the elements increase or decrease sequentially. \n    In other words, if we compare A[i] with A[i+1], then A[i] is less than or equal to A[i+1].\n    If A is not monotonic, this function will return False.\n    '''\n    n = len(A)\n    for i in range(n-1):\n        if A[i] > A[i+1]:\n            return False\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) <= 1:\n        return True\n\n    if A[0] <= A[1]:\n        for i in range(1,len(A)-1):\n            if A[i] >= A[i+1]:\n                return False\n        return True\n\n    if A[0] >= A[1]:\n        for i in range(1,len(A)-1):\n            if A[i] <= A[i+1]:\n                return False\n        return True\n\n    return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Monotonic(A): \n    '''\n    This function takes an array A as input and checks if it is monotonic or not.\n    It returns True if the array is monotonic, and False otherwise.\n    '''\n    # Check if the array is empty\n    if len(A) == 0:\n        return True\n    \n    # Initialize variables to store whether the array is monotonic or not\n    is_increasing = True\n    is_decreasing = True\n    \n    # Traverse the array and compare adjacent elements\n    for i in range(len(A) - 1):\n        if A[i] > A[i+1]:\n            is_increasing = False\n        elif A[i] < A[i+1]:\n            is_decreasing = False\n    \n    # Check if the array is monotonic\n    if is_increasing and is_decreasing:\n        return True\n    else:\n        return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not l:\n        return False\n    if not s:\n        return True\n    if l[0] in s:\n        return is_sublist(l[1:], s)\n    return is_sublist(l[1:], s)"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    # Check if sublist is empty or not\n    if not s:\n        return True\n    \n    # Check if the first element of sublist is same as the first element of list\n    if l[0] == s[0]:\n        # Check if the rest of the sublist is present in list\n        if is_sublist(l[1:], s[1:]):\n            return True\n        \n    # If the sublist is not present, return False\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not s:\n        return True\n    for item in s:\n        if item not in l:\n            return False\n    return is_sublist(l[len(s):], s)"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    This function takes two lists and checks whether the first list contains the second list or not.\n    \"\"\"\n    if not isinstance(s, list):\n        raise TypeError(\"The second argument should be a list.\")\n    if not all(isinstance(x, list) for x in s):\n        raise TypeError(\"All elements in the second argument should be lists.\")\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return l in s"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Check whether a list contains the given sublist or not.\n    '''\n    # Check if the sublist is empty\n    if not s:\n        return True\n    \n    # Check if the first element of the sublist is in the list\n    if s[0] in l:\n        # Check if the sublist is in the rest of the list\n        return is_sublist(l[l.index(s[0]) + 1:], s[1:])\n    else:\n        return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(l)):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    \n    # iterate through each tuple in the input list\n    for tup in Input:\n        # check if the length of the tuple is equal to the length of the first tuple in the list\n        if len(tup)!= len(Input[0]):\n            # return False if any tuple has a different length than the first tuple in the list\n            return False\n    \n    # if all tuples have the same length, return True\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    \n    for tuple in Input:\n        if len(tuple)!= len(set(tuple)):\n            return False\n    \n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        for j in range(i+1, len(Input)):\n            if len(Input[i])!= len(Input[j]):\n                return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # Find the length of the first tuple in the input list\n    length = len(Input[0])\n    # Iterate over all the tuples in the input list\n    for i in range(len(Input)):\n        # If the length of the current tuple is not equal to the length of the first tuple, return False\n        if len(Input[i])!= length:\n            return False\n    # If all the tuples in the input list have equal length, return True\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)-1):\n        if len(Input[i])!= len(Input[i+1]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"\n    # Loop through the given list of tuples\n    for tup in Input:\n        # Check if all the tuples in the list have the same length\n        if len(set(map(len, tup)))!= 1:\n            return False\n    # If the loop completes without finding any tuples with unequal length, return True\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    # create a set to store the lengths of all the tuples\n    lengths = set()\n\n    # iterate through the input list of tuples\n    for tup in Input:\n        # add the length of each tuple to the set\n        lengths.add(len(tup))\n\n    # check if all the lengths in the set are equal\n    if len(lengths) == 1:\n        # if all the lengths are equal, return True\n        return True\n    else:\n        # otherwise, return False\n        return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    max_iter = 1000000000\n    gap = 1\n    swapped = True\n    \n    while swapped and gap < n // 2:\n        swapped = False\n        for i in range(gap, n):\n            if nums[i] < nums[i - gap]:\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n                swapped = True\n                \n        max_iter = max(max_iter, gap * 10)\n        gap *= 2\n    \n    if gap == n:\n        gap //= 1\n        while gap > 1 and nums[n - 1] == nums[n - gap]:\n            gap //= 1\n    \n    for i in range(max_iter):\n        swapped = False\n        for j in range(gap, n):\n            if nums[j] < nums[j - gap]:\n                nums[j], nums[j - gap] = nums[j - gap], nums[j]\n                swapped = True\n                \n        if not swapped:\n            break\n        \n        max_iter = max(max_iter, gap * 10)\n        gap *= 2\n    \n    if n == 1:\n        return\n    \n    for i in range(n - 1):\n        if nums[i] > nums[i + 1]:\n            nums[i], nums[i + 1] = nums[i + 1], nums[i]\n            \n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb Sort algorithm.\n    '''\n    \n    n = len(nums)\n    gap = n\n    swapped = True\n    \n    while gap > 1 or swapped:\n        gap = int(gap / 1.3) + 1\n        swapped = False\n        \n        for i in range(n-gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n                \n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb sort algorithm.\n    '''\n\n    # Define a constant for the maximum number of swaps\n    MAX_SWAPS = 1000\n\n    # Loop until the list is sorted\n    while True:\n\n        # Initialize variables for the number of swaps and the number of elements in the list\n        n_swaps = 0\n        n_elements = len(nums)\n\n        # Loop through the list and swap adjacent elements if they are in the wrong order\n        for i in range(n_elements):\n            if nums[i] > nums[i + 1]:\n                nums[i], nums[i + 1] = nums[i + 1], nums[i]\n                n_swaps += 1\n                n_elements = len(nums)\n\n                # Check if the maximum number of swaps has been reached\n                if n_swaps == MAX_SWAPS:\n                    return nums\n\n        # If there were no swaps, the list is already sorted\n        if n_swaps == 0:\n            break\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements.\n    \"\"\"\n    n = len(nums)\n    max_iter = 10000\n    \n    while True:\n        swapped = False\n        gap = n // 2\n        \n        for i in range(gap, n):\n            if nums[i] > nums[i - gap]:\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n                swapped = True\n        \n        n = gap\n        if not swapped or gap == 1:\n            break\n    \n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    swapped = True\n\n    while gap > 1 or swapped:\n        swapped = False\n        gap = n // 10\n\n        for i in range(gap, n):\n            if nums[i] < nums[i - gap]:\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n                swapped = True\n\n        n -= gap\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    max_iter = len(nums) // 2  # maximum number of iterations\n    \n    for i in range(max_iter):\n        sorted = True\n        \n        for j in range(len(nums)-1):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n                sorted = False\n        \n        if sorted:\n            break\n        \n        max_iter = len(nums) // 2\n    \n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the comb sort algorithm.\n    '''\n    n = len(nums)\n    gap = n\n    swapped = True\n    while swapped:\n        swapped = False\n        for i in range(gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n        gap //= 1.3\n        if gap < 1:\n            gap = 1"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements using the comb sort algorithm.\n    \"\"\"\n    # Set the gap size based on the length of the list\n    gap = len(nums)\n\n    # Set the swapped flag to True\n    swapped = True\n\n    # Set the iteration count to zero\n    count = 0\n\n    # While the swapped flag is True, keep swapping and increasing the gap size\n    while swapped:\n        # Set the swapped flag to False\n        swapped = False\n\n        # Iterate over the list from the gap size to the end\n        for i in range(gap, len(nums)):\n            # Check if the current element is greater than the next element\n            if nums[i] < nums[i - gap]:\n                # Swap the elements\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n                # Set the swapped flag to True\n                swapped = True\n\n        # Decrease the gap size\n        gap = int(gap / 1.3)\n\n        # If the gap size is less than or equal to 1, set it to 1\n        if gap <= 1:\n            gap = 1\n\n        # Increment the iteration count\n        count += 1\n\n    # Return the sorted list\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    swapped = True\n    i = 0\n\n    while swapped:\n        swapped = False\n        for j in range(gap):\n            if nums[j] > nums[j + gap]:\n                nums[j], nums[j + gap] = nums[j + gap], nums[j]\n                swapped = True\n        gap = (gap * 10) // 13\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    swapped = True\n    while gap > 1 or swapped:\n        swapped = False\n        for i in range(n-gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n        gap = int(gap/1.3)\n        if gap < 1:\n            gap = 1\n    return nums"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # function to check whether the given number can be represented as the difference of two squares or not\n    def is_representable(num):\n        # check whether the given number can be represented by the difference of two squares\n        if (num-int(num)**2)**2 == num:\n            return True\n        else:\n            return False\n\n    # check whether the given number is a perfect square or not\n    if n**2 == int(n**2):\n        # check whether the given number can be represented as the difference of two squares or not\n        if is_representable(n):\n            return \"The given number can be represented as the difference of two squares.\"\n        else:\n            return \"The given number cannot be represented as the difference of two squares.\"\n    else:\n        return \"The given number is not a perfect square.\""
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(1, int(n**0.5)+1):\n        if i**2 == n-i**2:\n            print(\"The number can be represented as the difference of two squares.\")\n            return\n    print(\"The number cannot be represented as the difference of two squares.\")"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n == 0:\n        return True\n    elif n == 1:\n        return True\n    else:\n        i = 2\n        while i * i <= n:\n            if n % i == 0:\n                return False\n            i += 1\n        return True\n\nprint(dif_Square(10)) # Output: True\nprint(dif_Square(15)) # Output: True\nprint(dif_Square(20)) # Output: True\nprint(dif_Square(21)) # Output: False\nprint(dif_Square(36)) # Output: True\nprint(dif_Square(37)) # Output: False\nprint(dif_Square(49)) # Output: True\nprint(dif_Square(50)) # Output: True"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    \n    for i in range(1, int(n**0.5)+1):\n        if n == i**2 + i:\n            print(n, \"can be written as the difference of two squares\")\n            return\n    \n    print(n, \"cannot be written as the difference of two squares\")"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_square(num):\n    return num == int(num**0.5)**2\n\ndef is_difference_of_squares(n):\n    # Check if the number is already a square\n    if is_square(n):\n        return True\n\n    # Check if the number can be expressed as the difference of two squares\n    for i in range(1, int(n**0.5) + 1):\n        if is_square(n - i*i):\n            return True\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # check if the input number is less than 4\n    if n < 4:\n        return False\n\n    # check if the input number can be represented as the sum of two squares\n    left_square = n ** 0.5\n    right_square = int((n - left_square) ** 0.5)\n    if right_square * right_square == n:\n        return True\n\n    # check if the input number can be represented as the difference of two squares\n    return left_square * left_square + right_square * right_square == n\n"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # initialize the square root of n\n    sqrt_n = int(n ** 0.5)\n    \n    # check if the square root of n is an integer\n    if sqrt_n ** 2!= n:\n        return False\n    \n    # check if the sum of squares of the square root and sqrt_n is equal to the difference between n and the square of sqrt_n\n    return n - sqrt_n ** 2 == sum(i ** 2 for i in range(1, sqrt_n+1))"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Check if the given number is a square\n    if n**0.5%1 == 0:\n        # Check if the given number is a difference of two squares\n        if n == (n//2)**2 + (n//2)**2:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # check if the given number is a square number\n    for i in range(1, int(n**0.5)+1):\n        if n == i*i:\n            return True\n        elif n == (n-i*i)**2:\n            return True\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Convert the number to string to avoid any errors in squaring it\n    n_str = str(n)\n\n    # Split the number into two parts: the first part contains the first digit of the number and the second part contains the remaining digits\n    first_part = n_str[0]\n    second_part = n_str[1:]\n\n    # Convert the second part to an integer\n    second_part_int = int(second_part)\n\n    # Square the first part and add the square of the second part to it\n    result = int(first_part)**2 + second_part_int**2\n\n    # Check if the result is equal to the original number\n    if result == n:\n        print(\"Yes, the number can be represented as the difference of two squares.\")\n    else:\n        print(\"No, the number cannot be represented as the difference of two squares.\")"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    This function checks whether it follows the sequence given in the patterns array.\n\n    Args:\n    colors (list): A list of colors to be checked.\n    patterns (list): A list of patterns to follow.\n\n    Returns:\n    bool: True if the colors follow the given patterns, False otherwise.\n    \"\"\"\n\n    # Check if the number of colors is equal to the number of patterns\n    if len(colors)!= len(patterns):\n        return False\n\n    # Initialize the count of same patterns in the sequence\n    count = 0\n\n    # Iterate through the colors and patterns\n    for i in range(len(colors)):\n        if colors[i] == patterns[i]:\n            count += 1\n\n    # Return True if all patterns are followed by the same number of times,\n    # False otherwise\n    return count == len(patterns)"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Check whether it follows the sequence given in the patterns array.\n\n    Args:\n        colors (list): list of colors, e.g. ['red', 'blue', 'green']\n        patterns (list): list of patterns, e.g. ['RBG', 'GRB', 'BRG']\n\n    Returns:\n        bool: True if the colors follow the patterns, False otherwise.\n    \"\"\"\n    # Initialize variables\n    same_patterns = True\n    current_pattern = ''\n    current_color = ''\n\n    # Iterate over the colors and patterns\n    for i in range(len(colors)):\n        if colors[i] == current_color and patterns[i] == current_pattern:\n            pass  # The color and pattern are the same, continue to the next color\n        elif patterns[i] == current_pattern:\n            same_patterns = False  # The color is different, reset the current pattern and color\n            current_pattern = patterns[i]\n            current_color = colors[i]\n        else:\n            same_patterns = False  # The pattern is different, reset the current pattern and color\n            current_pattern = patterns[i]\n            current_color = colors[i]\n\n    # Check if all patterns have been used\n    if same_patterns and current_pattern!= '':\n        same_patterns = False\n\n    return same_patterns"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):\n    # Initialize variables\n    color_count = len(colors)\n    pattern_count = len(patterns)\n\n    # Check if there are any patterns\n    if pattern_count == 0:\n        return True\n\n    # Check if the number of patterns matches the number of colors\n    if pattern_count!= color_count:\n        return False\n\n    # Loop through each color in the colors array\n    for i in range(color_count):\n        # Check if the color matches the current pattern\n        if colors[i]!= patterns[i % pattern_count]:\n            return False\n\n    # If all colors match the current pattern, the sequence is valid\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors)):\n        if colors[i] == patterns[i]:\n            continue\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # Create a dictionary to store the number of colors in each pattern\n    pattern_count = {}\n    # Loop through the patterns and update the pattern_count dictionary\n    for pattern in patterns:\n        pattern_count[pattern] = 0\n    # Loop through the colors and update the pattern_count dictionary\n    for color in colors:\n        for pattern, count in pattern_count.items():\n            if color in pattern:\n                pattern_count[pattern] = count + 1\n                break\n    # Loop through the patterns and check if each pattern has the same number of colors as in the patterns array\n    for pattern, count in pattern_count.items():\n        if count!= patterns[patterns.index(pattern)].count('*'):\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n\n    # Create a list to store the current pattern\n    pattern = []\n\n    # Loop through the colors\n    for i, color in enumerate(colors):\n        # If the current color is not equal to the first element of the pattern, return False\n        if color!= pattern[0]:\n            return False\n\n        # If the current color is equal to the first element of the pattern, add it to the pattern list\n        if i == 0:\n            pattern.append(color)\n        # If the current color is not equal to the previous color, return False\n        elif color!= pattern[i-1]:\n            return False\n        # If the current color is equal to the previous color, add it to the pattern list\n        else:\n            pattern.append(color)\n\n    # If the pattern list is equal to the length of the patterns array, it follows the sequence\n    return pattern == patterns"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n\n    # Convert patterns to dictionary\n    pattern_dict = {}\n    for pattern in patterns:\n        color_list = []\n        for color in pattern:\n            color_list.append(color)\n        pattern_dict[len(color_list)] = color_list\n\n    # Sort the dictionary by the number of colors\n    sorted_pattern_dict = dict(sorted(pattern_dict.items()))\n\n    # Check if the colors follow the sequence\n    for i in range(1, len(sorted_pattern_dict)):\n        if sorted_pattern_dict[i]!= sorted_pattern_dict[i-1] + 1:\n            return False\n\n    # Check if all the colors are present in the colors array\n    for color in sorted_pattern_dict.values():\n        if color not in colors:\n            return False\n\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    pattern = 0\n    for color in colors:\n        if color in patterns[pattern]:\n            pattern += 1\n            if pattern == len(patterns):\n                return True\n    return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # Create a dictionary to store the count of each pattern\n    pattern_count = {}\n\n    # Iterate through the colors and patterns arrays\n    for i in range(len(colors)):\n        if colors[i] not in pattern_count:\n            pattern_count[colors[i]] = 0\n        pattern_count[colors[i]] += 1\n\n        for j in range(len(patterns)):\n            if colors[i:i+len(patterns[j])] == patterns[j]:\n                return False\n\n    # If the loop completes without returning False, it means that all the patterns were found\n    return True"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n\n    # create an empty list to store the tuples that meet the criteria\n    result = []\n\n    # iterate over each tuple in the input list\n    for i in range(len(test_list)):\n        # extract the first element of the tuple\n        element = test_list[i][0]\n\n        # iterate over the remaining elements of the tuple\n        for j in range(1, len(test_list[i])):\n            # extract the jth element of the tuple\n            candidate = test_list[i][j]\n\n            # check if the candidate element is divisible by K\n            if candidate % K == 0:\n                # if it is, add the tuple to the result list\n                result.append(test_list[i])\n                break\n\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    result = []\n    for tup in test_list:\n        if all(i % K == 0 for i in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # create an empty dictionary to store the count of elements in each tuple\n    count = {}\n    # loop through the given list of tuples\n    for tup in test_list:\n        # loop through the tuple and add the elements to the count dictionary\n        for elem in tup:\n            if elem in count:\n                count[elem] += 1\n            else:\n                count[elem] = 1\n    # create a list to store the tuples which have all elements divisible by k\n    result = []\n    # loop through the count dictionary and check if all elements are divisible by k\n    for elem, count in count.items():\n        if count % K == 0:\n            # create a tuple of the element and its count and append it to the result list\n            result.append((elem, count))\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if all(test_list[i][k] % K == 0 for k in range(len(test_list[0]))):\n                count += 1\n    return count"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    tuples_list = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            tuple1 = (test_list[i][0], test_list[j][0])\n            tuple2 = (test_list[i][1], test_list[j][1])\n            tuple3 = (test_list[i][2], test_list[j][2])\n            if tuple1[0] % K == 0 and tuple1[1] % K == 0 and tuple2[0] % K == 0 and tuple2[1] % K == 0 and tuple3[0] % K == 0 and tuple3[1] % K == 0:\n                tuples_list.append((tuple1, tuple2, tuple3))\n    return tuples_list"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    tuples = []\n    for tup in test_list:\n        if all(elem % K == 0 for elem in tup):\n            tuples.append(tup)\n    return tuples"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        divisible = True\n        for num in tup:\n            if num % K!= 0:\n                divisible = False\n                break\n        if divisible:\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    result = []\n    for i, j in test_list:\n        if all(x % K == 0 for x in j):\n            result.append((i, j))\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    result = []\n    for tup in test_list:\n        if all(i % K == 0 for i in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        count = 0\n        for elem in tup:\n            if elem % K == 0:\n                count += 1\n        if count == len(tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Diff(n):\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Diff(n):\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Diff(n):\n    '''\n    This function takes an integer as input and returns True if it's divisible by 11, and False otherwise.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Diff(n): \n    '''\n    This function takes a number as input and returns True if the number is divisible by 11, otherwise False.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Diff(n): \n    '''\n    This function takes a number as input and returns True if it is divisible by 11.\n    If the number is divisible by 11, the function returns True.\n    If the number is not divisible by 11, the function returns False.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Diff(n):\n    \"\"\"\n    Check whether a number is divisible by 11.\n\n    Args:\n    n (int): The number to check.\n\n    Returns:\n    bool: True if n is divisible by 11, False otherwise.\n    \"\"\"\n\n    # Check if n is divisible by 11\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n\n    if n % 11 == 0: \n        return True \n    else: \n        return False "
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    s = s.split() #splitting the string into words\n    for i in s:\n        if len(i) % 2!= 0: #checking if the length of the word is odd or not\n            print(\"The length of the word is odd.\")\n            break #if the length is odd, stop iterating through the words\n        else:\n            print(\"The length of the word is even.\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split() # split the string into words\n    for word in words:\n        if len(word) % 2 == 0: # if the length is even\n            print(word, \"is an even length\")\n        else: # if the length is odd\n            print(word, \"is an odd length\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def word_len(s):\n    '''\n    This function takes a string as input and returns True if the length of the word is odd, else it returns False.\n    '''\n    if len(s) % 2!= 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 0:\n            return \"The length of the word is even.\"\n    return \"The length of the word is odd.\""
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split() \n    count = 0 \n    for word in words: \n        count += len(word) \n    if count % 2 == 0: \n        print(\"The length of the words is even\") \n    else: \n        print(\"The length of the words is odd\") "
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    # Initialize count variable to 0\n    count = 0\n    # Loop through each character in the string\n    for char in s:\n        # If the character is a space or a punctuation mark, increment count by 1\n        if char.isspace() or char in '.,\"\\'?!':\n            count += 1\n    # If the count is odd, return True\n    if count % 2 == 1:\n        return True\n    # Otherwise, return False\n    else:\n        return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n\n    # Initialize variable to store length of word\n    word_len = 0\n\n    # Loop through each character in the string\n    for char in s: \n\n        # If character is a letter, increment word length\n        if char.isalpha():\n            word_len += 1\n\n        # If word length is odd, return True\n        if word_len % 2!= 0:\n            return True\n\n    # If word length is even, return False\n    return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def word_len(s): \n    '''\n    This function takes a string as input and checks whether the length of the word is odd or not.\n    '''\n    word = s.split()[0]\n    if len(word) % 2 == 0:\n        return \"The length of the word is even.\"\n    else:\n        return \"The length of the word is odd.\""
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 1:\n            return True\n    return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 1:\n            return True\n    return False"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 4\n    else:\n        return 4*(n-1)*tetrahedral_number(n-1)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 1:\n        return 5\n    elif n == 2:\n        return 10\n    elif n == 3:\n        return 15\n    elif n == 4:\n        return 20\n    elif n == 5:\n        return 25\n    else:\n        return tetrahedral_number(n-1) + tetrahedral_number(n-2) + tetrahedral_number(n-3)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    # Initialize variables\n    i = 1\n    num = 0\n    tnum = 0\n    \n    # Calculate the nth tetrahedral number\n    while i <= n:\n        tnum = 4 * i * (i + 1)\n        num += tnum\n        i += 1\n        \n    return num"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n\n    # Initialize variables\n    a = 1\n    b = 1\n    c = 1\n    d = 1\n\n    # Calculate the nth tetrahedral number\n    result = a*b*c*d\n    for i in range(n-1):\n        a *= (1 + 1/3)\n        b *= (1 + 1/3)\n        c *= (1 + 1/3)\n        d *= (1 + 1/3)\n        result += a*b*c*d\n\n    return result"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Define the formula for tetrahedral number\n    def formula(n):\n        return (4*n**3 + 12*n**2 - 3*n)/6\n    \n    # Find the value of the nth tetrahedral number using the formula\n    return int(formula(n))"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    # Define the first tetrahedral number\n    t = 0\n\n    # Loop until we get the nth tetrahedral number\n    for i in range(n):\n        # Add 1 to the current tetrahedral number\n        t += 1\n\n        # Find the number of ways we can arrange the tetrahedron in a certain way\n        # (number of arrangements - 1 because we already counted the original arrangement)\n        arrangements = (t * (t + 1)) // 2 - 1\n\n        # Calculate the next tetrahedral number\n        next_t = t + 4 * arrangements\n\n        # If the current tetrahedral number is greater than the nth tetrahedral number, stop the loop\n        if next_t > n:\n            break\n\n    # Return the nth tetrahedral number\n    return t"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    def is_pentagonal(n):\n        \"\"\"\n        Check if a number is pentagonal.\n        \"\"\"\n        return n % 2 == 0\n\n    def is_hexagonal(n):\n        \"\"\"\n        Check if a number is hexagonal.\n        \"\"\"\n        return n % 2 == 1\n\n    def is_square(n):\n        \"\"\"\n        Check if a number is a square.\n        \"\"\"\n        return n ** 0.5 == int(n ** 0.5)\n\n    def is_tetrahedral(n):\n        \"\"\"\n        Check if a number is tetrahedral.\n        \"\"\"\n        return is_pentagonal(n) and is_hexagonal(n) and is_square(n)\n\n    def sum_tetrahedral_numbers():\n        \"\"\"\n        Find the sum of all tetrahedral numbers.\n        \"\"\"\n        i = 1\n        tetrahedral_sum = 0\n        while tetrahedral_sum < n:\n            tetrahedral_sum += i\n            i += 1\n        return tetrahedral_sum\n\n    tetrahedral_sum = sum_tetrahedral_numbers()\n    return tetrahedral_sum"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Initialize the counter variable\n    count = 0\n    \n    # Iterate through all numbers from 1 to n\n    for i in range(1, n+1):\n        # Calculate the number of sides of a triangle with i sides\n        num_sides = i * (i+1) * (i+2)\n        # If the number of sides is equal to n, increment the count by 1\n        if num_sides == n:\n            count += 1\n    \n    # Return the count\n    return count"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n\n    # Initialize variables\n    prev_num = 0\n    current_num = 1\n    sum_of_squares = 0\n\n    # Calculate the nth tetrahedral number\n    for i in range(n):\n        temp = current_num\n        current_num = prev_num + (4 * temp) + (3 * current_num) - sum_of_squares\n        prev_num = temp\n        sum_of_squares += (current_num ** 2)\n\n    # Return the nth tetrahedral number\n    return current_num"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return (n * (n - 1) * (n - 2) * (n - 3)) / 6"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    # Calculate the volume of the sphere\n    volume = (4/3) * math.pi * (r**3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    vol = (4/3)*math.pi*r**3\n    return vol"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3) * math.pi * r**3\n    return V"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * (r ** 3)\n"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = math.pi\n    volume = (4/3) * pi * r ** 3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * (r ** 3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3 * math.pi * r**3"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3) * math.pi * r**3\n    return V\n"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    This function takes a radius of a sphere and returns the volume of the sphere.\n    '''\n    V = (4/3)*math.pi*(r**3)\n    return V"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * (r**3)\n    return volume"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_val = 0\n    for char in strr:\n        ascii_val += ord(char)\n    return chr((ascii_val % 26) + 65) #add 65 to ASCII value of A to get the correct character"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    total = 0\n    for char in strr:\n        total += ord(char)\n    return chr(total % 26 + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_sum = 0\n    for i in strr:\n        ascii_sum += ord(i)\n    result = ascii_sum % 26\n    if result < 10:\n        return chr(result + ord('a'))\n    else:\n        return chr(result + ord('A') - 10)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n\n    # initialize variables\n    sum = 0\n    n = len(strr)\n\n    # loop through each character of the string\n    for i in range(n):\n\n        # get the ASCII value of the character\n        ch = ord(strr[i])\n\n        # add the ASCII value to the sum\n        sum = (sum + ch) % 26\n\n    # convert the sum to a character and return it\n    return chr(sum)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ASCII_val = 65  # Starting ASCII value for A\n    result = ''\n\n    for char in strr:\n        result += chr(ASCII_val + ord(char) % 26)  # Adding ASCII value of the current character and its ASCII value modulo 26\n        ASCII_val += 1\n\n    return result"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_val = 0\n    for char in strr:\n        ascii_val += ord(char)\n    return chr((ascii_val % 26) + ord('a'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_val = 0\n    for i in strr:\n        ascii_val += ord(i)\n    return chr((ascii_val % 26) + ord('A'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Char(strr):\n    # initialize an empty string\n    res = \"\"\n    # iterate over each character in the string\n    for c in strr:\n        # convert the character to its ASCII value\n        ascii_value = ord(c)\n        # add the ASCII value to the result string\n        res += chr((ascii_value + 13) % 26)\n    # return the result string\n    return res"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char_sum = 0\n    for char in strr:\n        char_sum += ord(char)\n    return chr((char_sum % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char = 0\n    for char_num in strr:\n        char += ord(char_num)\n    return char % 26"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return sequence(n - 1) + sequence(n - 2)\n"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequence(n): \n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n\n    sequence = [0, 1]\n\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            sequence.append(sequence[i - 2])\n        else:\n            sequence.append(3 - sequence[i - 2])\n\n    return sequence[n]\n"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return sequence(n-1) + sequence(n-2)"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1,"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [0]\n    for i in range(2, n+1):\n        sequence.append(sequence[-1] + sequence[-2])\n    return sequence[n]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the Newman conway sequence.\n    '''\n    a = 0\n    b = 1\n    while n > 0:\n        if n % 2 == 0:\n            n = n // 2\n            a = a + b\n        else:\n            n = (3 * n) + 1\n            b = b + a\n    return b"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [2, 1]\n    for i in range(2, n): \n        sequence.append(sequence[-1] + sequence[-2])\n    return sequence[-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1, 1]\n    for i in range(2, n):\n        new_sequence = [0] * len(sequence)\n        for j in range(len(sequence)):\n            if sequence[j] == 1:\n                if (j == 0 or sequence[j-1] == 0) and (j == len(sequence)-1 or sequence[j+1] == 0):\n                    new_sequence[j] = 1\n                else:\n                    new_sequence[j] = 0\n        sequence = new_sequence\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    seq = [1]\n    for i in range(1, n):\n        if seq[-1] % 2 == 0:\n            seq.append(seq[-1] * 3)\n        else:\n            seq.append(seq[-1] // 2)\n    return seq[-1]"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surfacearea_sphere(r):\n    '''\n    This function calculates the surface area of a sphere using the formula:\n    surface area = 4 * pi * r^2\n    '''\n    pi = math.pi\n    surface_area = 4 * pi * r**2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    \"\"\"\n    Calculate the surface area of a sphere given its radius.\n\n    Args:\n        r (float): The radius of the sphere.\n\n    Returns:\n        float: The surface area of the sphere.\n    \"\"\"\n    pi = math.pi\n    return 4*pi*r**2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    \"\"\"\n    Write a function to find the surface area of a sphere.\n    \"\"\"\n    return 4 * math.pi * r ** 2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4*math.pi*r**2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2\n"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = (4/3) * math.pi * r ** 3\n    return area\n"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # Convert radius to meters\n    r = r * 1000\n    \n    # Calculate surface area using formula\n    surface_area = 4 * math.pi * r**2\n    \n    # Convert surface area to square meters\n    surface_area = surface_area / 1000000\n    \n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # Surface area of a sphere is pi * r^2\n    surface_area = math.pi * r ** 2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * (r ** 2)\n"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n <= 0:\n        return None\n    else:\n        return (n * (2*n - 1) + 1) / 2"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 8\n    else:\n        return centered_hexagonal_number(n-1) + centered_hexagonal_number(n-2)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    a = 1.61803398875\n    b = 1.41421356237\n    c = 1.12837916709\n    d = 0.70710678118\n    e = 0.5\n    f = 0.38268343236\n\n    centered_hex = a + b**n + c**n*d + e**n*f**n\n\n    return centered_hex"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (n - 1) * (2 * n - 1)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n\n    # Initialize variables\n    a, b, c, d = 1, 2, 3, 4\n\n    # Loop through the first n centered hexagonal numbers\n    for i in range(n):\n\n        # Find the centered hexagonal number\n        hexagonal_number = (a**2 - b**2 + c**2 + d**2) / (2 * a * c)\n\n        # Check if the centered hexagonal number is even or odd\n        if hexagonal_number % 2 == 0:\n            centered_hexagonal_number = hexagonal_number\n\n        # Increment variables for next iteration\n        a = b\n        b = c\n        c = d\n        d = hexagonal_number\n\n    # Return the centered hexagonal number\n    return centered_hexagonal_number"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n\n    # Base case: if n is 0, return 1\n    if n == 0:\n        return 1\n\n    # Initialize variables\n    i = 1\n    j = 0\n    k = 0\n    num = 0\n\n    # Calculate centered hexagonal number using formula\n    while i <= n:\n        j = 2 * i - 1\n        k = i * (3 * i - 1) // 2\n        num = j + k\n        i += 1\n\n    return num"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    if n < 1:\n        return \"Invalid input. Please enter a positive integer.\"\n    elif n == 1:\n        return 1\n    else:\n        return 6 * (n - 1) + centered_hexagonal_number(n-1) + centered_hexagonal_number(n-2)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Calculate the value of the nth centered hexagonal number\n    nth_hexagonal_num = (2 * n + 1) ** 2 - 1\n    # Return the value of the nth centered hexagonal number\n    return nth_hexagonal_num"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    hexagonal_numbers = [1]\n    count = 1\n    while count < n:\n        hexagonal_numbers.append(2 * hexagonal_numbers[-1] + 1)\n        count += 1\n    return hexagonal_numbers[n-1]"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 6\n    else:\n        return (centered_hexagonal_number(n-1) + centered_hexagonal_number(n-2))//2"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = {}\n    for key in dict1:\n        merged_dict[key] = dict1[key]\n    for key in dict2:\n        merged_dict[key] = dict2[key]\n    for key in dict3:\n        merged_dict[key] = dict3[key]\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Merges three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = dict1.copy()\n    for key, value in dict2.items():\n        merged_dict[key] = value\n    for key, value in dict3.items():\n        merged_dict[key] = value\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = dict1.copy()\n    for key, value in dict2.items():\n        merged_dict[key] = value\n    for key, value in dict3.items():\n        merged_dict[key] = value\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # Merge two dictionaries into one\n    merged_dict = dict(dict1.items() + dict2.items())\n\n    # Merge the merged dictionary with the third dictionary\n    final_dict = ct.ChainMap(merged_dict, dict3)\n\n    return final_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    return dict(merged_dict)"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n\n    Args:\n        dict1 (dict): First dictionary to be merged.\n        dict2 (dict): Second dictionary to be merged.\n        dict3 (dict): Third dictionary to be merged.\n\n    Returns:\n        dict: A single dictionary containing all the key-value pairs from all the three input dictionaries.\n    '''\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    return dict(merged_dict)"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single dictionary.\n    \"\"\"\n    # Combine all dictionaries into a single dictionary\n    merged_dict = {**dict1, **dict2, **dict3}\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    merged_dict = dict1.copy() # create a copy of dict1\n    for key,value in dict2.items():\n        if key not in merged_dict:\n            merged_dict[key] = value # if the key is not already in the dictionary, add it\n    for key,value in dict3.items():\n        if key not in merged_dict:\n            merged_dict[key] = value # if the key is not already in the dictionary, add it\n    return merged_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections\n\ndef freq_count(list1):\n    \"\"\"\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    \"\"\"\n    # create an empty dictionary to store the frequency of each element\n    freq = {}\n\n    # iterate over each element in the list\n    for element in list1:\n        # if the element is already in the dictionary, increment its frequency by 1\n        if element in freq:\n            freq[element] += 1\n        # if the element is not in the dictionary, add it with a frequency of 1\n        else:\n            freq[element] = 1\n\n    # return the frequency dictionary\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.defaultdict(int)\n    for element in list1:\n        freq_dict[element] += 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # Convert the list to a set to get the frequency of unique elements\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    This function takes a list as input and returns a dictionary that contains the frequency of each element in the list.\n    '''\n    freq = collections.Counter(lst)\n    return dict(freq)"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return dict(freq)"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # Create an empty dictionary to store the frequency of each element\n    freq_dict = {}\n    \n    # Iterate through each element in the list\n    for item in list1:\n        # If the element is not in the dictionary, add it with a frequency of 1\n        if item not in freq_dict:\n            freq_dict[item] = 1\n        # If the element is already in the dictionary, increment its frequency by 1\n        else:\n            freq_dict[item] += 1\n    \n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.defaultdict(int)\n    for element in list1:\n        freq_dict[element] += 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = {}\n    for item in list1:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for element in list1:\n        if element in freq_dict:\n            freq_dict[element] += 1\n        else:\n            freq_dict[element] = 1\n    return freq_dict"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # Check if N is zero\n    if N == 0:\n        return 0\n    # Find the absolute difference between N and 1\n    diff = abs(N - 1)\n    # Check if N is less than 1\n    if N < 1:\n        # Check if N - 1 is less than 1\n        if N - 1 < 1:\n            return N\n        else:\n            return N - 1\n    else:\n        # Check if N - 1 is greater than or equal to 1\n        if N - 1 >= 1:\n            return N\n        else:\n            return N + 1"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    closest = N\n    for num in range(N-1, -1, -1):\n        if num < N:\n            if abs(num - N) < abs(closest - N):\n                closest = num\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n    n = N\n    while True:\n        n -= 1\n        if n < 1:\n            return n\n        if n % 2 == 1:\n            n += 1\n        else:\n            n -= 1\n"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n\n    Args:\n        N (int): An integer value.\n\n    Returns:\n        int: The closest smaller number than n.\n    \"\"\"\n    lower_bound = 0\n    upper_bound = N\n    closest_smaller = N\n    while lower_bound <= upper_bound:\n        mid = (lower_bound + upper_bound) // 2\n        if mid < N:\n            closest_smaller = mid\n            lower_bound = mid + 1\n        else:\n            upper_bound = mid - 1\n    return closest_smaller"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    num_set = set()\n    for i in range(1, N+1):\n        num_set.add(i)\n\n    closest_num = None\n    closest_diff = float('inf')\n\n    for num in num_set:\n        diff = abs(num - N)\n        if diff < closest_diff:\n            closest_diff = diff\n            closest_num = num\n\n    return closest_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    closest = float('inf')\n    for num in range(1, N):\n        diff = abs(N-num)\n        if diff < closest:\n            closest = diff\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    closest = N\n    smallest = N\n    for i in range(1, N):\n        if i < smallest:\n            smallest = i\n    for i in range(smallest, N):\n        if abs(N - i) < abs(N - closest):\n            closest = i\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def closest_num(N):\n    # Convert N to a list of digits\n    digits = [int(digit) for digit in str(N)]\n    # Sort the digits in non-decreasing order\n    digits.sort()\n    # Get the length of the sorted digits\n    length = len(digits)\n    # Calculate the sum of the digits\n    sum_digits = sum(digits)\n    # Calculate the difference between the largest and smallest digits\n    difference = digits[-1] - digits[0]\n    # Check if the difference is even or odd\n    if difference % 2 == 0:\n        # If it's even, return the smallest number greater than half of the sum of digits\n        return digits[-2] + int((sum_digits - (digits[-1] + digits[0])) / 2)\n    else:\n        # If it's odd, return the smallest number greater than one half of the sum of digits\n        return digits[-2] + int((sum_digits - (digits[-1] + digits[0])) / 2) + 1"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n    if N < 1:\n        print(\"Please enter a positive integer\")\n        return\n    \n    smallest = float(\"inf\")\n    closest = float(\"inf\")\n    \n    for num in range(1, N+1):\n        if num < smallest:\n            closest = smallest\n            smallest = num\n        elif num < closest:\n            closest = num\n    \n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    num = 1\n    while True:\n        if num < N:\n            num += 1\n        else:\n            break\n    return num - 1"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = \"\"\n    for word in list1:\n        if len(word) > len(longest):\n            longest = word\n    return len(longest)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def len_log(list1):\n    \"\"\"\n    Write a python function to find the length of the longest word in a list of sentences.\n    \"\"\"\n    longest_word = \"\"\n    for sentence in list1:\n        words = sentence.split()\n        for word in words:\n            if len(word) > len(longest_word):\n                longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n\n    max_length = 0\n    longest_word = ''\n\n    for word in list1:\n        length = len(word)\n        if length > max_length:\n            max_length = length\n            longest_word = word\n\n    return longest_word"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    return max([len(w) for w in list1])"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    # initialize the max length to 0\n    max_len = 0\n    # loop through each word in the list\n    for word in list1:\n        # if the length of the current word is greater than the max length, update the max length\n        if len(word) > max_len:\n            max_len = len(word)\n    # return the max length\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def len_log(list1):\n    \"\"\"\n    Write a python function to find the length of the longest word.\n    \"\"\"\n    # Initialize variables\n    max_len = 0\n    word = \"\"\n    \n    # Iterate through the list of words\n    for item in list1:\n        # Split the word into individual characters\n        word_list = list(item)\n        \n        # Check if the current word is longer than the previous longest word\n        if len(word_list) > max_len:\n            max_len = len(word_list)\n            word = item\n    \n    # Return the length of the longest word\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word in a given list of words.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    # Initialize variables\n    max_len = 0\n    longest_word = ''\n    # Loop through list of words\n    for word in list1:\n        # Find length of current word\n        current_len = len(word)\n        # Update maximum length if current word is longer\n        if current_len > max_len:\n            max_len = current_len\n            longest_word = word\n    # Return the length of the longest word\n    return max_len"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return any(sub_str in s for s in str1)"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if not isinstance(str1, list):\n        return \"Input should be a list of strings.\"\n    \n    if not isinstance(sub_str, str):\n        return \"Second argument should be a string.\"\n    \n    for string in str1:\n        if string.find(sub_str)!= -1:\n            return True\n    \n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for string in str1:\n        if sub_str in string:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # Convert the list of string values to a set to remove duplicates\n    set1 = set(str1)\n\n    # Check if the substring is present in the set of string values\n    if sub_str in set1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return any(sub_str in value for value in str1)"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for s in str1:\n        if s in sub_str:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # Create a list of all the string values in the list\n    str_list = [str1] + sub_str\n    \n    # Loop through all the strings in the list and check if the substring is present in it\n    for s in str_list:\n        if sub_str in s:\n            return True\n    \n    # If the substring is not present in any of the strings, return False\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str not in str1:\n        return False\n    else:\n        return True"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for value in str1:\n        if sub_str in value:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n    \"\"\"\n    for item in str1:\n        if sub_str in item:\n            return True\n    return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n\n    # Initialize a list of undulating numbers\n    undulating_numbers = []\n\n    # Check if the number is divisible by 2\n    if n % 2 == 0:\n        # If it is, add it to the list of undulating numbers\n        undulating_numbers.append(n)\n\n    # Check if the number is divisible by 3\n    elif n % 3 == 0:\n        # If it is, add it to the list of undulating numbers\n        undulating_numbers.append(n)\n\n    # Check if the number is divisible by 4\n    elif n % 4 == 0:\n        # If it is, add it to the list of undulating numbers\n        undulating_numbers.append(n)\n\n    # Check if the number is divisible by 5\n    elif n % 5 == 0:\n        # If it is, add it to the list of undulating numbers\n        undulating_numbers.append(n)\n\n    # Check if the number is divisible by 6\n    elif n % 6 == 0:\n        # If it is, add it to the list of undulating numbers\n        undulating_numbers.append(n)\n\n    # Check if the number is divisible by 7\n    elif n % 7 == 0:\n        # If it is, add it to the list of undulating numbers\n        undulating_numbers.append(n)\n\n    # Check if the number is divisible by 8\n    elif n % 8 == 0:\n        # If it is, add it to the list of undulating numbers\n        undulating_numbers.append(n)\n\n    # Check if the number is divisible by 9\n    elif n % 9 == 0:\n        # If it is, add it to the list of undulating numbers\n        undulating_numbers.append(n)\n\n    # Check if the number is divisible by 10\n    elif n % 10 == 0:\n        # If it is, add it to the list of undulating numbers\n        undulating_numbers.append(n)\n\n    # Check if the number is divisible by 11\n    elif n % 11 == 0:\n        # If it is, add it to the list of undulating numbers\n        undulating_numbers.append(n)\n\n    # Check if the number is divisible by 12\n    elif n % 12 == 0:\n        # If it is, add it to the list of undulating numbers\n        undulating_numbers.append(n)\n\n    # Check if the number is divisible by 13\n    elif n % 13 == 0:\n        # If it is, add it to the list of undulating numbers\n        undulating_numbers.append(n)\n\n    # Check if the number is divisible by 14\n    elif n % 14 == 0:\n        # If it is, add it to the list of undulating numbers\n        undulating_numbers.append(n)\n\n    # Check if the number is divisible by 15\n    elif n % 15 == 0:\n        # If it is, add it to the list of undulating numbers\n        undulating_numbers.append(n)\n\n    # Check if the number is divisible by 16\n    elif n % 16 == 0:\n        # If it is, add it to the list of undulating numbers\n        undulating_numbers.append(n)\n\n    # Check if the number is divisible by 17\n    elif n % 17 == 0:\n        # If it is, add it to the list of undulating numbers\n        undulating_numbers.append(n)\n\n    # Check if the number is divisible by 18\n    elif n % 18 == 0:\n        # If it is, add it to the list of undulating numbers\n        undulating_numbers.append(n)\n\n    # Check if the number is divisible by 19\n    elif n % 19 == 0:\n        # If it is, add it to the list of undulating numbers\n        undulating_numbers.append(n)\n\n    # Check if the number is divisible by 20\n    elif n % 20 == 0:\n        # If it is, add it to the list of undulating numbers\n        undulating_numbers.append(n)\n\n    # Check if the number is divisible by 21\n    elif n % 21 == 0:\n        # If it is, add it to the list of undulating numbers\n        undulating_numbers.append(n)"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_undulating(n):\n    '''\n    This function takes an integer input n and returns True if it is undulating and False otherwise.\n    A number is undulating if it is divisible by 3 and not divisible by 15.\n    '''\n    if n % 3 == 0 and n % 15!= 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # define the range of the input number\n    if n > 1000:\n        range_start = 1001\n    else:\n        range_start = 1\n\n    # iterate through the range of input numbers\n    for i in range(range_start, n):\n        # check if the sum of the digits of the input number is equal to the input number\n        if sum(int(digit) for digit in str(i)) == i:\n            return True\n\n    # if no such undulating number is found, return False\n    return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n > 0:\n        return True\n    elif n < 0:\n        return False\n    else:\n        return \"Error: Input should be a positive or negative number.\""
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_undulating(n): \n    '''\n    This function takes an integer input n and returns True if n is a positive odd number and False otherwise.\n    '''\n    if n % 2 == 1 and n > 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return \"The given number is even.\"\n    else:\n        return \"The given number is odd.\""
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_undulating(n):\n    \"\"\"\n    This function takes an integer as input and returns True if it is undulating and False otherwise.\n    \"\"\"\n    # Check if the number is a positive integer\n    if n <= 0:\n        return False\n    # Check if the number is a multiple of 3 or 5\n    if n % 3 == 0 or n % 5 == 0:\n        return True\n    # Check if the number is an even multiple of 3\n    if n % 6 == 0:\n        return True\n    # If none of the above conditions are met, the number is not undulating\n    return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return \"The number is undulating.\"\n    else:\n        return \"The number is not undulating.\""
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_undulating(n): \n    '''\n    This function takes an integer n as input and returns True if it is undulating, False otherwise.\n    '''\n    if n < 5:\n        return False\n    elif n % 2 == 0:\n        return True\n    else:\n        return is_undulating(n+1)"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power(a, b):\n    \"\"\"\n    Write a function to calculate the value of 'a' to the power 'b'.\n    \"\"\"\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a ** b"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b < 0:\n        return 1/power(a, -b)\n    else:\n        return a * power(a, b-1)"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    else:\n        return a*power(a,b-1)"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    \"\"\"\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Sort the list of tuples by second value in ascending order\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    # Return the first value of the first tuple in the sorted list\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    # Sort the list of tuples by the second value in ascending order\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    \n    # Return the index of the first tuple with the smallest second value\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    minimum = test_list[0]\n    for tup in test_list:\n        if tup[1] < minimum[1]:\n            minimum = tup\n    return minimum[0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=lambda x: x[1])"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n\n    min_index = 0\n    min_value = float('inf')\n\n    for i in range(len(test_list)):\n        if test_list[i][1] < min_value:\n            min_index = i\n            min_value = test_list[i][1]\n\n    return min_index\n"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return sorted(test_list, key=itemgetter(1))[0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    \"\"\"\n    return sorted(test_list, key=itemgetter(1))[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    return min(range(len(test_list)), key=lambda i: test_list[i][1])"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value in the tuple with the smallest second value.\n    '''\n\n    # sorting the list of tuples based on the second value of each tuple\n    test_list.sort(key=itemgetter(1))\n\n    # returning the index of the first value in the first tuple with the smallest second value\n    return test_list[0][0]"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the smallest list in a list of lists.\n    \"\"\"\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n\n    min_length = float('inf')\n    smallest_list = None\n\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            smallest_list = sublist\n\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for sublist in lst:\n        length = len(sublist)\n        if length < min_length:\n            min_length = length\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for i in range(len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    # initialize the length variable to maximum value \n    length = len(lst)\n    # loop through all the sublists in the list \n    for sublist in lst:  \n        # check if the length of the current sublist is smaller than the stored value \n        if len(sublist) < length:  \n            length = len(sublist)  \n    # return the length of the smallest sublist \n    return length  \n"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = float('inf')\n    for item in lst:\n        if len(item) < min_len:\n            min_len = len(item)\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    # Initialize the length of the smallest list to infinity\n    min_length = float('inf')\n    # Iterate through each list in the list of lists\n    for sublist in lst:\n        # Check if the length of the current sublist is less than the current minimum length\n        if len(sublist) < min_length:\n            # If it is, update the minimum length to the current length of the sublist\n            min_length = len(sublist)\n    # Return the minimum length found\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):\n    \"\"\"\n    This function takes a list of lists and returns the length of the smallest list in the list.\n    \"\"\"\n    smallest_length = min([len(sublist) for sublist in lst])\n    return smallest_length"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    i = 1\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            count += 1\n            n //= i\n    if n > 1:\n        count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    This function takes an integer n as input and returns the number of divisors of n.\n    A divisor of an integer n is an integer d such that n = d * d, d > 1.\n    '''\n    count = 0\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisor(n):\n    count = 0\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            count += 1\n    if n > 1:\n        count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for i in list1:\n        for j in i:\n            if j in freq_dict:\n                freq_dict[j] += 1\n            else:\n                freq_dict[j] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency_lists(lst):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for sublist in lst:\n        for elem in sublist:\n            if elem in freq_dict:\n                freq_dict[elem] += 1\n            else:\n                freq_dict[elem] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    \n    for sublist in list1:\n        for item in sublist:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n                \n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        for subitem in item:\n            if subitem in freq_dict:\n                freq_dict[subitem] += 1\n            else:\n                freq_dict[subitem] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n    freq_dict = {}\n    for lst in list1:\n        for item in lst:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Create a dictionary to store the frequency of each element in the list\n    freq_dict = {}\n\n    # Loop through each element in the list\n    for elem in list1:\n        # Check if the element is already in the dictionary\n        if elem in freq_dict:\n            # Increment the frequency count for the element\n            freq_dict[elem] += 1\n        else:\n            # Add the element to the dictionary with a frequency count of 1\n            freq_dict[elem] = 1\n\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for item in list1:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency_dict = {}\n    for item in list1:\n        if isinstance(item, list):\n            for subitem in item:\n                if subitem in frequency_dict:\n                    frequency_dict[subitem] += 1\n                else:\n                    frequency_dict[subitem] = 1\n        else:\n            if item in frequency_dict:\n                frequency_dict[item] += 1\n            else:\n                frequency_dict[item] = 1\n    return frequency_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Initialize an empty dictionary to store frequency of each element\n    freq = {}\n    # Loop through each element in the list and add its frequency to the dictionary\n    for element in list1:\n        if element in freq:\n            freq[element] += 1\n        else:\n            freq[element] = 1\n    # Return the dictionary of frequency of each element\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if isinstance(item, list):\n            for subitem in item:\n                if subitem not in freq_dict:\n                    freq_dict[subitem] = 1\n                else:\n                    freq_dict[subitem] += 1\n        else:\n            if item not in freq_dict:\n                freq_dict[item] = 1\n            else:\n                freq_dict[item] += 1\n    return freq_dict"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_num(numbers):\n    \"\"\"\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    \"\"\"\n    total = 1\n    for num in numbers:\n        total *= num\n    return total / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    if not numbers:  # if the list is empty\n        return 0\n    else:\n        product = 1\n        for num in numbers:\n            product *= num\n        result = product / len(numbers)\n        return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result\n"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result\n"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_num(numbers):\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_num(numbers):\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = \"\"\n    while n > 0: \n        binary = str(n % 2) + binary \n        n = n // 2 \n    return binary "
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = \"\"\n    while n > 0:\n        # Get the last digit of n\n        last_digit = n % 2\n        # Convert the last digit to a string and append it to the binary string\n        binary = str(last_digit) + binary\n        # Remove the last digit from n\n        n = n // 2\n    # Remove leading zeros from the binary string\n    binary = binary.lstrip(\"0\")\n    # Return the binary string\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def decimal_to_binary(n): \n    '''\n    This function takes a decimal number as input and returns its binary equivalent as a string.\n    The binary equivalent is represented as a string with no leading zeros.\n    '''\n    # Initialize an empty string to store the binary equivalent\n    binary = \"\"\n    \n    # Convert the decimal number to binary recursively\n    while n > 0: \n        # Get the last digit of the decimal number\n        last_digit = n % 2\n        \n        # Add the last digit to the binary equivalent string\n        binary = str(last_digit) + binary\n        \n        # Remove the last digit from the decimal number\n        n //= 2\n    \n    # Return the binary equivalent string\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    # check if n is an integer\n    if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer\")\n    \n    # initialize binary string\n    binary_str = \"\"\n    \n    # loop through each bit of the decimal number\n    while n > 0:\n        # get the remainder of n divided by 2 and append it to the binary string\n        binary_str = str(n % 2) + binary_str\n        \n        # divide n by 2 to get the next bit\n        n = n // 2\n    \n    # check if binary string has leading zeros and remove them\n    while binary_str[0] == \"0\":\n        binary_str = binary_str[1:]\n    \n    # return the binary string\n    return binary_str"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    binary = \"\"\n    while n > 0:\n        remainder = n % 2\n        n = n // 2\n        binary = str(remainder) + binary\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def decimal_to_binary(n): \n    \"\"\"\n    This function takes a decimal number as input and returns its binary equivalent as a string, with no leading zeros.\n    \"\"\"\n    binary_string = \"\"\n    while n > 0: \n        remainder = n % 2 \n        binary_string = str(remainder) + binary_string \n        n //= 2 \n    return binary_string "
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return \"0\"\n    binary = \"\"\n    while n > 0:\n        remainder = n % 2\n        n = n // 2\n        binary = str(remainder) + binary\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def decimal_to_binary(n): \n    '''\n    This function takes an integer as input and returns the binary equivalent as a string.\n    '''\n    binary = \"\"\n    while n > 0:\n        remainder = n % 2\n        binary = str(remainder) + binary\n        n = n // 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary_str = \"\"\n    while n > 0:\n        remainder = n % 2\n        n = n // 2\n        binary_str = str(remainder) + binary_str\n    return binary_str"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def decimal_to_binary(n): \n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    binary = \"\"\n    while n > 0:\n        remainder = n % 2\n        binary = str(remainder) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Initialize the smallest palindrome and the current palindrome\n    smallest_palindrome = 10**(num+1) - 1\n    current_palindrome = smallest_palindrome\n    while current_palindrome >= 10**(num+1):\n        current_palindrome -= 1\n\n    # Check if the current palindrome is a palindrome\n    while current_palindrome % 10 == current_palindrome // 10:\n        current_palindrome -= 1\n\n    return current_palindrome + 1"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def next_smallest_palindrome(num):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def is_palindromic_prime(num):\n        return is_prime(num) and is_palindrome(num)\n\n    def get_next_smallest_palindrome(num):\n        if is_prime(num):\n            return num + 1\n        elif is_palindrome(num):\n            return num\n        else:\n            return get_next_smallest_palindrome(num + 1)\n\n    next_num = get_next_smallest_palindrome(num)\n    return next_num\n\nif __name__ == \"__main__\":\n    if len(sys.argv)!= 2:\n        print(\"Usage: python next_smallest_palindrome.py <integer>\")\n        sys.exit(1)\n\n    num = int(sys.argv[1])\n    print(f\"Next smallest palindrome of {num} is: {next_smallest_palindrome(num)}\")"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import sys\n\ndef is_palindrome(num):\n    '''\n    Returns True if a given number is a palindrome, False otherwise.\n    '''\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Check if the given number is already a palindrome\n    if is_palindrome(num):\n        return num\n\n    # Otherwise, find the next smallest palindrome\n    n = 1\n    while not is_palindrome(num + n):\n        n += 1\n\n    return num + n"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    # Initialize the two variables: num and reverse_num\n    num = int(str(num)[::-1])\n    reverse_num = int(str(num)[::-1])\n    \n    # Increment the last digit of num and reverse_num until they become palindromes\n    while num!= reverse_num:\n        # Increment the last digit of num\n        num = int(str(num)[:-1] + str(int(str(num)[:-1]) + 1))\n        \n        # Increment the last digit of reverse_num\n        reverse_num = int(str(reverse_num)[:-1] + str(int(str(reverse_num)[:-1]) + 1))\n    \n    # Return the next smallest palindrome\n    return num + 1\n"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    \n    # Check if the input is a number greater than 1\n    if num <= 1:\n        return 2\n    \n    # Create a list of numbers from 1 to num-1\n    nums = list(range(1,num))\n    \n    # Find the smallest number in the list\n    smallest = min(nums)\n    \n    # Find the next smallest number in the list\n    next_smallest = smallest + 1\n    \n    # Check if the next smallest number is a palindrome\n    while str(next_smallest)[::-1] not in nums:\n        next_smallest += 1\n    \n    return next_smallest"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    This function takes an integer as input and returns the next smallest palindrome of that number.\n    '''\n    n = len(str(num))\n    # check if the number is already a palindrome\n    if str(num) == str(num)[::-1]:\n        return num\n    # find the smallest palindrome that is greater than the input number\n    smallest_palindrome = num + 1\n    while True:\n        palindrome = str(smallest_palindrome)\n        if palindrome == palindrome[::-1] and int(palindrome) > num:\n            return smallest_palindrome\n        smallest_palindrome += 1"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n\n    # Convert the input number to a string and reverse it\n    s = str(num)[::-1]\n\n    # Loop through the digits of the reversed string\n    for i in range(len(s)):\n        # If the digit is odd, check if it is a palindrome\n        if int(s[i]) % 2 == 1:\n            # If it is, find the smallest odd digit and increment it by one\n            for j in range(i, len(s)):\n                if int(s[j]) % 2 == 0:\n                    next_palindrome = int(s[:j+1][::-1])\n                    return next_palindrome\n\n    # If no palindrome is found, return the input number\n    return num"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Convert the input integer to a string\n    num_str = str(num)\n\n    # Initialize a flag to keep track of whether the current number is a palindrome or not\n    is_palindrome = True\n\n    # Loop through each character in the number string and check if it's a palindrome\n    for i in range(len(num_str)):\n        # If the current character is not a palindrome, set the flag to False and break out of the loop\n        if num_str[i]!= num_str[-i-1]:\n            is_palindrome = False\n            break\n\n    # If the number is not a palindrome, increment it by 1 and check if it's a palindrome\n    while not is_palindrome:\n        num += 1\n        num_str = str(num)\n        is_palindrome = True\n        for i in range(len(num_str)):\n            if num_str[i]!= num_str[-i-1]:\n                is_palindrome = False\n                break\n\n    # Return the next smallest palindrome of the input integer\n    return num"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import sys\n\ndef is_palindrome(n):\n    \"\"\"\n    Returns True if the integer is a palindrome.\n    \"\"\"\n    return str(n) == str(n)[::-1]\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Returns the next smallest palindrome of the specified integer.\n    \"\"\"\n    max_num = int(10**9)\n    while True:\n        next_num = num + 1\n        if is_palindrome(next_num):\n            return next_num\n        if next_num > max_num:\n            print(\"No valid palindrome found.\", file=sys.stderr)\n            sys.exit(1)\n        num += 1"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_palindrome(n):\n    \"\"\"\n    Helper function to check if a number is a palindrome.\n    \"\"\"\n    return str(n) == str(n)[::-1]\n\ndef is_prime(n):\n    \"\"\"\n    Helper function to check if a number is prime.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Given an integer `num`, returns the next smallest palindrome as an integer.\n    \"\"\"\n    # Check if the number is a palindrome\n    if is_palindrome(num):\n        return num + 1\n    \n    # Try increasing the number by 1 and see if it's a palindrome\n    new_num = num + 1\n    while not is_palindrome(new_num):\n        new_num += 1\n    \n    # If the new number is prime, try decreasing it by 1 until it's not prime\n    while is_prime(new_num):\n        new_num -= 1\n    \n    return new_num"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n\n    # Validate the input\n    if k < 1 or k > len(arr):\n        return None\n\n    # Use binary search to find the kth element\n    left, right = 1, len(arr)\n    while left < right:\n        mid = (left + right) // 2\n        if mid == k - 1:\n            return arr[mid]\n        elif mid < k - 1:\n            left = mid + 1\n        else:\n            right = mid\n\n    # If the kth element is not found, return None\n    return None"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    # Base case: if k is equal to or greater than n, return None\n    if k > n:\n        return None\n    # Recursive case: divide the array into two halves, find the kth element in each half, and combine the results\n    mid = n // 2\n    if k == 1 or k == n:\n        return arr[k-1]\n    elif k < mid + 1:\n        return kth_element(arr[:mid], k)\n    else:\n        return kth_element(arr[mid:], k - mid)"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    \"\"\"\n    This function takes an array and an integer k as input and returns the kth element of the array.\n    \"\"\"\n    if k < 1 or k > len(arr):\n        raise ValueError(\"k must be between 1 and the length of the array.\")\n\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k < 1 or k > n:\n        return \"Invalid input\"\n    else:\n        # Implementing bubble sort\n        for i in range(n):\n            for j in range(0, n-i-1):\n                if arr[j] > arr[j+1]:\n                    arr[j], arr[j+1] = arr[j+1], arr[j]\n        return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    \"\"\"\n    Write a function to find the kth element in the given array using 1-based indexing.\n    \"\"\"\n    if k > len(arr):\n        return None\n    \n    # binary search algorithm to find kth element\n    left, right = 1, len(arr)\n    while left <= right:\n        mid = left + (right - left) // 2\n        if mid == k:\n            return arr[mid-1]\n        elif mid < k:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    # element not found\n    return None"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if len(arr) < k:\n        return None\n    else:\n        return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        return \"Invalid input. Please enter a valid positive integer.\"\n    else:\n        return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Initialize the index variable to the start of the array\n    index = 1\n    # Initialize the count variable to 0\n    count = 0\n    \n    # Loop through the array\n    while count < k:\n        # If the current index is greater than or equal to the length of the array, stop looping\n        if index >= len(arr):\n            break\n        # Increment the count variable by 1\n        count += 1\n        # Increment the index variable by 1\n        index += 1\n    \n    # Return the kth element from the array\n    return arr[index-1]"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    first_char = word[0].upper()\n    rest_of_word = word[1:].lower()\n    return first_char + rest_of_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case = ''\n    for i, char in enumerate(word):\n        if i == 0:\n            camel_case += char.lower()\n        else:\n            camel_case += char.upper()\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Convert a snake case string to camel case string.\n    \"\"\"\n    camel_case = ''\n    for i, char in enumerate(word):\n        if i > 0 and char.isupper():\n            camel_case += '_'\n        camel_case += char.lower()\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join([word[:i] + word[i].upper() + word[i+1:] for i in range(len(word)) if word[i]!= '_'])"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(word.title() for word in word.split('_'))"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case = \"\"\n    for i in range(len(word)):\n        if i == 0:\n            camel_case += word[i].lower()\n        else:\n            camel_case += word[i]\n        if i!= len(word) - 1:\n            camel_case += \"_\"\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Convert a snake case string to camel case string.\n\n    :param word: A snake case string.\n    :type word: str\n    :return: A camel case string.\n    :rtype: str\n    \"\"\"\n    return ''.join([word[0].lower(), word[1:].title()])"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case = \"\"\n    for i, letter in enumerate(word):\n        if i == 0:\n            camel_case += letter.lower()\n        else:\n            camel_case += letter.upper()\n    return camel_case\n"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case = ''\n    prev_char = ''\n    for char in word:\n        if char.isupper():\n            if prev_char.isupper():\n                camel_case += prev_char.lower() + char\n            else:\n                camel_case += char\n        else:\n            camel_case += char.lower()\n        prev_char = char\n    return camel_case.capitalize()"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    # split the word into a list of words\n    words = word.split('_')\n    # capitalize the first letter of each word and join them with a space\n    camel_case_word =''.join([word.capitalize() for word in words])\n    # return the camel case word\n    return camel_case_word"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Initialize variables\n    a = 0\n    b = 0\n    c = 1\n    d = 0\n    \n    # Calculate a(n, m)\n    for i in range(1, n+1):\n        temp = a + b\n        a = b\n        b = temp\n        temp = c + d\n        c = d\n        d = temp\n    \n    # Calculate a(n, 0) and a(0, m) separately\n    if m > 0:\n        for i in range(1, m+1):\n            temp = c + d\n            c = d\n            d = temp\n    \n    a *= n\n    \n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 1:\n        return m\n    else:\n        return eulerian_num(n-1, m-1)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    Write a function to find the Eulerian number a(n, m).\n    \"\"\"\n    # Initialize the matrix of all zeros\n    matrix = [[0 for i in range(n+1)] for j in range(m+1)]\n\n    # Populate the matrix with the given values\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            matrix[i][j] = i*j\n\n    # Check if the matrix is Eulerian\n    if matrix[1][1] == 1:\n        for i in range(2, n+1):\n            for j in range(2, m+1):\n                if matrix[i][j] == matrix[i-1][j] + matrix[i][j-1] - matrix[i-1][j-1]:\n                    matrix[i][j] += 1\n                else:\n                    matrix[i][j] -= 1\n\n    # Find the Eulerian number a(n, m)\n    eulerian = matrix[n][m]\n\n    return eulerian"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Initialize the Eulerian number and the lookup table\n    a = 1\n    table = [[0]*(m+1) for i in range(n+1)]\n\n    # Fill in the lookup table using Pascal's triangle\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if j <= i:\n                table[i][j] = table[i-1][j-1] + table[i-1][j]\n            else:\n                table[i][j] = 0\n\n    # Find the Eulerian number using the lookup table\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if j == 1 or j == m:\n                a *= table[i][j]\n            else:\n                a *= (1 - table[i][j])\n\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def eulerian_num(n, m): \n    a = 0\n    for i in range(1, n+1): \n        for j in range(1, m+1): \n            a += (i*j)\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    Write a function to find the Eulerian number a(n, m).\n\n    Parameters:\n    n (int): the number of vertices in the graph\n    m (int): the number of edges in the graph\n\n    Returns:\n    int: the Eulerian number a(n, m)\n\n    Time Complexity: O(n^2), where n is the number of vertices\n    \"\"\"\n\n    # Initialize a dictionary to store the connected components of the graph\n    components = {}\n\n    # Find connected components of the graph using DFS\n    def dfs(u, visited):\n        visited[u] = True\n        for v in range(n):\n            if G[u][v] and not visited[v]:\n                dfs(v, visited)\n        if u not in components:\n            components[u] = []\n        components[u].append(u)\n\n    for i in range(n):\n        visited = [False] * n\n        dfs(i, visited)\n\n    # Calculate the number of connected components\n    num_components = len(components)\n\n    # Calculate the Eulerian number a(n, m)\n    if num_components == 1:\n        a = n * m\n    elif num_components == 2:\n        a = n * m - n\n    else:\n        a = n * m - n * (num_components - 2)\n\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    Write a function to find the Eulerian number a(n, m).\n    \"\"\"\n    def gcd(a, b):\n        \"\"\"\n        Find the greatest common divisor of two numbers.\n        \"\"\"\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        \"\"\"\n        Find the lowest common multiple of two numbers.\n        \"\"\"\n        return (a * b) // gcd(a, b)\n\n    def prime_factors(num):\n        \"\"\"\n        Find the prime factors of a number.\n        \"\"\"\n        factors = []\n        i = 2\n        while i * i <= num:\n            if num % i:\n                i += 1\n            else:\n                num //= i\n                factors.append(i)\n        if num > 1:\n            factors.append(num)\n        return factors\n\n    def prime_forming_sequence(n):\n        \"\"\"\n        Generate the prime forming sequence of the given number.\n        \"\"\"\n        seq = []\n        i = 2\n        while True:\n            if len(prime_factors(i)) == n:\n                seq.append(i)\n                i += 1\n            else:\n                break\n        return seq\n\n    def phi(n):\n        \"\"\"\n        Compute the Eulerian number phi(n) using the Sieve of Eratosthenes.\n        \"\"\"\n        seq = prime_forming_sequence(n)\n        result = 1\n        for i in seq:\n            result *= (i - 1)\n            result //= i\n        return result\n\n    return phi(n) - (1 / gcd(m, phi(n)))"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n\n    def sieve(n):\n        primes = [True] * (n + 1)\n        p = 2\n        while p * p <= n:\n            if primes[p]:\n                for i in range(p * p, n + 1, p):\n                    primes[i] = False\n            p += 1\n        return primes\n\n    # Sieve of Eratosthenes algorithm to find primes up to n\n    primes = sieve(n)\n\n    # Initialize Eulerian numbers array\n    a = [0] * (n + 1)\n\n    # Initialize all numbers in the range (1, n) as not prime\n    for i in range(1, n + 1):\n        a[i] = True\n\n    # Mark all multiples of each prime as not prime\n    for p in range(2, n + 1):\n        if primes[p]:\n            for i in range(p * p, n + 1, p):\n                a[i] = False\n\n    # Calculate the Eulerian number by summing the product of all primes and their multiples\n    for i in range(1, n + 1):\n        if a[i]:\n            for p in range(2, n + 1):\n                if a[p] and i % p == 0:\n                    a[i] *= p\n\n    # Calculate the sum of all Eulerian numbers\n    s = 0\n    for i in range(1, n + 1):\n        s += a[i]\n\n    # Return the Eulerian number\n    return s"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    \n    # check if n is even or odd\n    if n % 2 == 0:\n        # even case\n        a = (2*n + 1) * m\n    else:\n        # odd case\n        a = (2*n + 1) * m - 1\n    \n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    a = 0\n    for i in range(1, n+1):\n        a += (i**m) % n\n    return a"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n\n    # Loop through each sublist in the input list\n    for sublist in input_list:\n        # Use the sorted() function to sort the sublist in ascending order\n        sublist.sort()\n\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i] = sorted(input_list[i])\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        for j in range(len(input_list[i])):\n            for k in range(len(input_list[i][j])):\n                for l in range(len(input_list[i][j][k])):\n                    for m in range(len(input_list[i][j][k][l])):\n                        for n in range(len(input_list[i][j][k][l][m])):\n                            for o in range(len(input_list[i][j][k][l][m][n])):\n                                for p in range(len(input_list[i][j][k][l][m][n][o])):\n                                    for q in range(len(input_list[i][j][k][l][m][n][o][p])):\n                                        for r in range(len(input_list[i][j][k][l][m][n][o][p][q])):\n                                            for s in range(len(input_list[i][j][k][l][m][n][o][p][q][r])):\n                                                for t in range(len(input_list[i][j][k][l][m][n][o][p][q][r][s])):\n                                                    for u in range(len(input_list[i][j][k][l][m][n][o][p][q][r][s][t])):\n                                                        for v in range(len(input_list[i][j][k][l][m][n][o][p][q][r][s][t][u])):\n                                                            for w in range(len(input_list[i][j][k][l][m][n][o][p][q][r][s][t][u][v])):\n                                                                for x in range(len(input_list[i][j][k][l][m][n][o][p][q][r][s][t][u][v][w])):\n                                                                    for y in range(len(input_list[i][j][k][l][m][n][o][p][q][r][s][t][u][v][w][x])):\n                                                                        for z in range(len(input_list[i][j][k][l][m][n][o][p][q][r][s][t][u][v][w][x][y])):\n                                                                            if input_list[i][j][k][l][m][n][o][p][q][r][s][t][u][v][w][x][y][z] > input_list[i][j][k][l][m][n][o][p][q][r][s][t][u][v][w][x][y][z-1]:\n                                                                                input_list[i][j][k][l][m][n][o][p][q][r][s][t][u][v][w][x][y][z], input_list[i][j][k][l][m][n][o][p][q][r][s][t][u][v][w][x][y][z-1] = input_list[i][j][k][l][m][n][o][p][q][r][s][t][u][v][w][x][y][z-1], input_list[i][j][k][l][m][n][o][p][q][r][s][t][u][v][w][x][y][z]\n"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count(lst):\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for item in lst:\n        if item == True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if type(i) == bool and i == True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for elem in lst:\n        if elem == True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if type(item) == bool:\n            if item:\n                count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item == True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for element in lst:\n        if isinstance(element, bool):\n            count += 1\n    return count"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # append the test_list to the test_tup\n    test_tup += tuple(test_list)\n    \n    # return the modified test_tup\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup = tuple(test_tup)\n    test_tup = test_tup + tuple(test_list)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    new_tup = test_tup + tuple(test_list)\n    return new_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    # concatenate the given list and tuple\n    new_list = test_list + tuple(test_tup)\n    # return the concatenated list\n    return new_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list += test_tup\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    test_list = list(test_list)  # convert list to mutable list to allow append()\n    test_tup += tuple(test_list)  # append the list to the tuple\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    new_list = []\n    for item in test_list:\n        new_list.append(item)\n    for item in test_tup:\n        new_list.append(item)\n    return new_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # concatenate the lists into a single list\n    merged_list = num1 + num2 + num3\n    \n    # use heapq module to sort the list in ascending order\n    sorted_list = [heapq.heappushpop(heapq.heappushpop(heapq.heappushpop(heapq.heapify(merged_list)), num), num2) for num in merged_list]\n    \n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Merge three sorted lists into a single sorted list.\n    \"\"\"\n    # Combine the three lists into one sorted list\n    combined = sorted(num1 + num2 + num3)\n    return combined"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # create a min heap with three elements\n    heap = []\n    heapq.heappush(heap,num1)\n    heapq.heappush(heap,num2)\n    heapq.heappush(heap,num3)\n    # merge the min heap into a single sorted list\n    result = []\n    while heap:\n        result.append(heapq.heappop(heap))\n    return result"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Merge the three lists into a single list\n    merge_list = sorted(num1 + num2 + num3)\n    return merge_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Merge the three input lists into one\n    merged_list = num1 + num2 + num3\n    \n    # Sort the merged list using heapq\n    heapq.heapify(merged_list)\n    sorted_list = []\n    while merged_list:\n        sorted_list.append(heapq.heappop(merged_list))\n    \n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef merge_sorted_list(num1,num2,num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    # Initialize an empty list to hold the merged list\n    merged_list = []\n\n    # Merge the three lists into a single sorted list using heapq module\n    heapq.heapify(num1)\n    heapq.heappush(merged_list,heapq.heappop(num1))\n    heapq.heappush(merged_list,heapq.heappop(num2))\n    while num3:\n        heapq.heappush(merged_list,heapq.heappop(num3))\n\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Create a min heap to store the smaller numbers\n    min_heap = []\n    # Insert the numbers from the input lists into the heap\n    heapq.heappush(min_heap, num1)\n    heapq.heappush(min_heap, num2)\n    heapq.heappush(min_heap, num3)\n    # Initialize an empty list to store the merged numbers\n    merged_list = []\n    # While the heap is not empty, extract the minimum number and add it to the merged list\n    while min_heap:\n        merged_list.append(heapq.heappop(min_heap))\n    # Return the merged list\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    This function takes three sorted lists as input and returns a single sorted list containing all the elements of the three input lists.\n    '''\n    # Merge the two sorted lists\n    merged_list = num1 + num2\n    # Remove duplicates from the merged list\n    merged_list = list(set(merged_list))\n    # Merge the three sorted lists\n    merged_list = heapq.merge(merged_list, num3)\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Merge the three lists in descending order\n    num1.sort(reverse=True)\n    num2.sort(reverse=True)\n    num3.sort(reverse=True)\n\n    # Merge the three lists into one list\n    merged_list = []\n    for i in range(len(num1)):\n        if i < len(num2) and num2[i] >= num1[i]:\n            heapq.heappush(merged_list, num2[i])\n        else:\n            heapq.heappush(merged_list, num1[i])\n    for i in range(len(num2), len(num1) + len(num3)):\n        if i < len(num3) and num3[i] > merged_list[0]:\n            heapq.heappush(merged_list, num3[i])\n\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Merge three sorted lists into a single sorted list.\n    '''\n    # Combine the three lists into one\n    combined_list = sorted(num1 + num2 + num3)\n\n    # Create a min heap from the combined list\n    min_heap = []\n    for item in combined_list:\n        heapq.heappush(min_heap, item)\n\n    # Convert the min heap back to a list and return it\n    return list(heapq.merge(min_heap))"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    # initialize the count variable to 0\n    count = 0\n    \n    # check if the length of the binary string is odd\n    if len(s) % 2!= 0:\n        # if it's odd, increment the count variable by 1\n        count += 1\n    \n    # rotate the binary string the given number of times\n    for i in range(n):\n        # check if the index is out of bounds\n        if i < len(s):\n            # if it's within bounds, append the current character to the beginning of the string\n            s = s[i] + s[:i] + s[i+1:]\n        else:\n            # if it's out of bounds, append the last character to the beginning of the string\n            s = s[-1] + s[:-1] + s[0]\n    \n    # loop through the string and count the odd characters\n    for char in s:\n        if char == '1':\n            # if the character is odd, increment the count variable by 1\n            count += 1\n    \n    # return the final count\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n\n    # Initialize an empty list to store the odd numbers\n    odd_list = []\n\n    # Convert the input string to a binary string\n    binary_str = bin(int(s))[2:]\n\n    # Loop through each character in the binary string\n    for i in range(len(binary_str)):\n\n        # If the character is 1, add it to the odd_list\n        if binary_str[i] == '1':\n            odd_list.append(binary_str[i])\n\n        # If the character is 0 and the odd_list is not empty, count the number of times the character 1 appears in the list\n        elif binary_str[i] == '0' and odd_list:\n            count = 0\n            for j in odd_list:\n                if j == '1':\n                    count += 1\n            if count % 2!= 0:\n                odd_list.append(binary_str[i])\n\n    # Convert the list of odd numbers to an integer and return it\n    return int(''.join(odd_list), 2)"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_Equivalent(s,n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n\n    # Converting the binary string to a list\n    binary_list = [int(i) for i in s]\n\n    # Finding the length of the list\n    length = len(binary_list)\n\n    # Finding the number of times to rotate the list\n    rotate = n % length\n\n    # Rotating the list by the given number of times\n    rotated_list = binary_list[-rotate:] + binary_list[:-rotate]\n\n    # Counting the number of odd values in the rotated list\n    odd_count = 0\n    for i in rotated_list:\n        if i % 2!= 0:\n            odd_count += 1\n\n    return odd_count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_Equivalent(s, n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    \n    # Convert the binary string to a list of digits\n    s = list(s)\n    \n    # Initialize the count variable to zero\n    count = 0\n    \n    # Loop n times to rotate the string\n    for _ in range(n):\n        # Reverse the list of digits\n        s.reverse()\n        \n        # Initialize the odd_count variable to zero\n        odd_count = 0\n        \n        # Loop through the reversed list of digits and count the number of odd digits\n        for digit in s:\n            if digit % 2!= 0:\n                odd_count += 1\n        \n        # Add the odd_count to the count variable\n        count += odd_count\n        \n        # Reverse the list of digits\n        s.reverse()\n    \n    # Return the count variable\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_Equivalent(s, n):\n    # Initialize an empty list to store the odd numbers\n    odd_numbers = []\n    # Convert the binary string to a list of characters\n    binary_list = list(s)\n    # Loop through the list of characters n times\n    for i in range(n):\n        # Initialize an empty list to store the rotated characters\n        rotated_list = []\n        # Loop through each character in the binary string\n        for j in range(len(binary_list)):\n            # If the character is an odd number, append it to the odd_numbers list\n            if int(binary_list[j]) % 2 == 1:\n                rotated_list.append(int(binary_list[j]))\n        # Reverse the rotated list to get the correct order of the odd numbers\n        rotated_list.reverse()\n        # Concatenate the rotated list with the original binary string\n        s = ''.join(str(i) for i in rotated_list + binary_list)\n        # Convert the binary string back to a list of characters\n        binary_list = list(s)\n    # Count the number of odd numbers in the final binary string\n    odd_count = sum(1 for char in binary_list if int(char) % 2 == 1)\n    # Return the number of odd numbers found\n    return odd_count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n\n    Parameters:\n    s (str): A binary string.\n    n (int): An integer representing the number of times to rotate the binary string.\n\n    Returns:\n    int: The number of odd values found in the rotated binary string.\n    \"\"\"\n\n    # Initialize the count variable to 0\n    count = 0\n\n    # Convert the binary string to a list of integers\n    binary_list = [int(i) for i in s]\n\n    # Iterate through each integer in the binary list\n    for i in binary_list:\n        # If the integer is odd, increment the count variable\n        if i % 2!= 0:\n            count += 1\n\n    # Return the count variable\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_Equivalent(s, n):\n    # convert binary string to list of digits\n    binary = [int(d) for d in s]\n\n    # rotate binary list n times\n    for i in range(n):\n        binary.append(binary.pop(0))\n\n    # count the number of odd values in the rotated list\n    count = 0\n    for digit in binary:\n        if digit % 2 == 1:\n            count += 1\n\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_Equivalent(s, n):\n    def rotate(s, n):\n        return s[-n:] + s[:-n]\n\n    count = 0\n    for i in range(n):\n        s = rotate(s, 2)\n        if int(s, 2) % 2!= 0:\n            count += 1\n\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    binary_string = bin(int(s))[2:]\n    length = len(binary_string)\n    odd_count = 0\n\n    for i in range(n):\n        new_string = ''\n        for j in range(length):\n            if binary_string[j] == '1':\n                new_string += '0'\n            else:\n                new_string += '1'\n        binary_string = new_string\n\n    for i in range(length):\n        if binary_string[i] == '1':\n            odd_count += 1\n\n    return odd_count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_Equivalent(s, n):\n    # Convert the binary string to a list of bits\n    bits = [int(bit) for bit in s]\n    # Initialize the count of odd numbers\n    count = 0\n    # Rotate the list of bits the given number of times\n    for i in range(n):\n        bits.append(bits.pop(0))\n    # Iterate through the list of bits and count the number of odd numbers\n    for bit in bits:\n        if bit % 2 == 1:\n            count += 1\n    # Return the count of odd numbers\n    return count"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(i+1, len(nestedlist)):\n            common_elements.extend(set(nestedlist[i]).intersection(set(nestedlist[j])))\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            for k in range(len(nestedlist[i][j])):\n                if nestedlist[i][j][k] in common:\n                    common.remove(nestedlist[i][j][k])\n                else:\n                    common.append(nestedlist[i][j][k])\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(i+1, len(nestedlist)):\n            if nestedlist[i] == nestedlist[j]:\n                if nestedlist[i] not in common_elements:\n                    common_elements.append(nestedlist[i])\n    return common_elements\n"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n\n    # Check if all the elements in the list are lists\n    if not all(isinstance(x, list) for x in nestedlist):\n        raise ValueError(\"All elements in the nested list should be lists.\")\n\n    # Initialize an empty set to store the common elements\n    common_elements = set()\n\n    # Loop through the nested lists\n    for sublist in nestedlist:\n        # Loop through the sublist\n        for element in sublist:\n            # Check if the element is not already in the set\n            if element not in common_elements:\n                # Add the element to the set\n                common_elements.add(element)\n\n    # Return the common elements\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    This function takes a nested list of lists and returns a set of the common elements in all lists.\n    \"\"\"\n    common = set()\n    for sublist in nestedlist:\n        common.update(set(sublist))\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    common_elements = set()\n    for item in nestedlist:\n        for subitem in item:\n            common_elements.add(subitem)\n    return list(common_elements)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # initialize an empty dictionary to store common elements\n    common_dict = {}\n    \n    # loop through each list in the nested list\n    for i in nestedlist:\n        # loop through each item in the current list\n        for j in i:\n            # if the item is not already in the dictionary, add it as a key-value pair\n            if j not in common_dict:\n                common_dict[j] = 1\n    \n    # create a list of common elements and return it\n    return list(common_dict.keys())"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Create a set of all the elements in all the lists\n    all_elements = set()\n    for sublist in nestedlist:\n        all_elements.update(sublist)\n\n    # Create a set of all the elements that are common in all lists\n    common_elements = set()\n    for i in range(len(nestedlist)):\n        for j in range(i+1, len(nestedlist)):\n            common_elements.update(set(nestedlist[i]).intersection(set(nestedlist[j])))\n\n    # Convert the sets back to lists and return the common elements\n    return list(common_elements)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if nestedlist[i][j] in common:\n                common.remove(nestedlist[i][j])\n            else:\n                common.append(nestedlist[i][j])\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n\n    for sublist in nestedlist:\n        for element in sublist:\n            if element not in common_elements:\n                common_elements.append(element)\n\n    return common_elements"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n\n    # Check if the input is empty\n    if not text:\n        return False\n\n    # Convert the input to a string\n    text = str(text)\n\n    # Check if the string contains only digits\n    for char in text:\n        if not char.isdigit():\n            return False\n\n    # If the string contains only digits, it is an integer\n    return True"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_integer(text):\n    \"\"\"\n    This function checks if a string represents an integer or not.\n\n    Args:\n        text (str): A string to be checked if it represents an integer or not.\n\n    Returns:\n        bool: True if the string represents an integer, False otherwise.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n\n    # Check if the string contains only digits\n    if text.isdigit():\n        # Check if the integer is within the range of a 32-bit signed integer\n        if -2**31 <= int(text) <= 2**31-1:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if len(i)!= 0:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if d:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dict1 in list1:\n        if dict1:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i!= {}:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if len(d)!= 0:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if len(list1) == 0:\n        return True\n    else:\n        for i in list1:\n            if not i:\n                return False\n        return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if not i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    # iterate over the list of dictionaries\n    for d in list1:\n        # check if the dictionary is empty\n        if not d:\n            # if it's empty, return True\n            return True\n    # if all dictionaries in the list are not empty, return False\n    return False"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    if len(nums) == 0:\n        return 0\n    else:\n        return nums[0] + tuple_to_int(nums[1:])"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Convert the tuple into a list\n    nums_list = list(nums)\n    # Use the sum() function to add up all the elements in the list\n    result = sum(nums_list)\n    # Return the single integer\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        return nums[0] + tuple_to_int(nums[1:])"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    # Initialize an empty list to store the digits of the integer\n    digits = []\n    # Iterate over each digit in the tuple\n    for num in nums:\n        # If the digit is less than 10, append it to the digits list\n        if num < 10:\n            digits.append(num)\n        # If the digit is greater than or equal to 10, append 0 and the remainder of dividing the digit by 10 to the digits list\n        else:\n            digits.append(num % 10)\n            num //= 10\n    # Reverse the digits list and convert it to an integer using the int() function\n    return int(''.join(map(str, digits[::-1])))"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for sub_list in test_list:\n        for element in sub_list:\n            try:\n                element = float(element)\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], str):\n                try:\n                    test_list[i][j] = float(test_list[i][j])\n                except ValueError:\n                    pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for item in test_list:\n        if isinstance(item, list):\n            for sub_item in item:\n                if isinstance(sub_item, (int, float, complex)):\n                    item.append(float(sub_item))\n                elif isinstance(sub_item, str):\n                    try:\n                        item.append(float(sub_item))\n                    except ValueError:\n                        pass\n                else:\n                    item.append(float(sub_item))\n        elif isinstance(item, (int, float, complex)):\n            test_list.append(float(item))\n        elif isinstance(item, str):\n            try:\n                test_list.append(float(item))\n            except ValueError:\n                pass\n        else:\n            test_list.append(float(item))\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    result_list = []\n    for sublist in test_list:\n        for element in sublist:\n            if type(element) == float:\n                result_list.append(element)\n    return result_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for sublist in test_list:\n        for element in sublist:\n            try:\n                float(element)\n            except ValueError:\n                pass\n            else:\n                try:\n                    element = float(element)\n                except ValueError:\n                    pass\n                else:\n                    sublist.remove(element)\n                    test_list.remove(sublist)\n                    test_list.append(float(element))"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    result = []\n    for row in test_list:\n        for item in row:\n            try:\n                result.append(float(item))\n            except ValueError:\n                result.append(item)\n    return result"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        if isinstance(test_list[i], list):\n            test_list[i] = list_to_float(test_list[i])\n        elif isinstance(test_list[i], str):\n            try:\n                test_list[i] = float(test_list[i])\n            except ValueError:\n                pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                continue\n    return test_list"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_list(string):\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    words = string.split()\n    return words"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    # Convert the string to a list of words using split() function\n    words = string.split()\n    # Return the list of words\n    return words"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    # Split the string on the space character\n    words = string.split()\n    # Convert the list of words to a list of lists of characters\n    list_of_lists = [list(word) for word in words]\n    return list_of_lists"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    # Split the string on the space character and return a list of the resulting strings\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    # Initialize count dictionary to store the count of each element in the array\n    count = {}\n    for i in range(len(arr)):\n        if arr[i] in count:\n            count[arr[i]] += 1\n        else:\n            count[arr[i]] = 1\n    \n    # Find the element that appears only once in the array\n    for key, value in count.items():\n        if value == 1:\n            return key"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    This function takes an array as input and returns the element that appears only once in the array.\n    '''\n    # Initialize two pointers to the first and last elements of the array\n    i = 0\n    j = len(arr) - 1\n\n    # Traverse the array from the first to last element\n    while i < j:\n        # Check if the current element is equal to the next element\n        if arr[i] == arr[j]:\n            # If it is, increment the j pointer\n            j -= 1\n        else:\n            # If it is not, increment the i pointer\n            i += 1\n\n    # Return the element that appears only once\n    return arr[i]"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Create a set to store unique elements of the array\n    unique_set = set(arr)\n    # Check if the length of the set is equal to the length of the array\n    if len(unique_set) == len(arr):\n        # If yes, return the only element in the set\n        return list(unique_set)[0]\n    else:\n        # If no, return None\n        return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr) == 0 or len(arr) == 1:\n        return None\n    else:\n        for i in range(len(arr)):\n            if arr[i]!= arr[i+1]:\n                return arr[i]\n        return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    n = len(arr)\n    for i in range(n-1):\n        if arr[i] == arr[i+1]:\n            return arr[i]\n    return \"Element not found\""
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    count = 0\n    unique = None\n    for i in range(len(arr)):\n        if i == 0 or arr[i]!= arr[i-1]:\n            count += 1\n            unique = arr[i]\n    return unique"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    for i in range(n):\n        if i > 0 and arr[i] == arr[i-1]:\n            continue\n        for j in range(i+1, n):\n            if arr[j] == arr[i]:\n                return arr[i]\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    # Initialize a dictionary to store the count of each element in the array\n    count_dict = {}\n\n    # Loop through the array and count the occurrences of each element\n    for num in arr:\n        count_dict[num] = count_dict.get(num, 0) + 1\n\n    # Loop through the dictionary and find the element that appears only once\n    for key, value in count_dict.items():\n        if value == 1:\n            return key\n\n    # If no element appears only once, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Initialize a dictionary to store the frequency of elements in the array\n    freq = {}\n    # Iterate through the array and update the frequency of each element\n    for num in arr:\n        freq[num] = freq.get(num, 0) + 1\n    \n    # Iterate through the array again and find the element that appears only once\n    for num in arr:\n        if freq[num] == 1:\n            return num"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    count = 0\n    result = None\n    for i in range(len(arr)):\n        if i == 0 or arr[i]!= arr[i-1]:\n            count = 1\n            result = arr[i]\n        elif count < 2:\n            count += 1\n    return result"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    max_sum = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if abs(list1[i][0] * list1[j][1]) > max_product:\n                max_product = abs(list1[i][0] * list1[j][1])\n                max_sum = abs(list1[i][0]) + abs(list1[j][1])\n            elif abs(list1[i][1] * list1[j][0]) > max_product:\n                max_product = abs(list1[i][1] * list1[j][0])\n                max_sum = abs(list1[i][1]) + abs(list1[j][0])\n    return max_sum"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0]*list1[j][1]\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n            max_product = max(max_product, product)\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = max(abs(list1[i][0] * list1[j][1]), abs(list1[i][1] * list1[j][0]))\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product_tuple(lst):\n    \"\"\"\n    Find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n    max_product = float('-inf')\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            product = lst[i][0] * lst[j][0] * lst[i][1] * lst[j][1]\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n    max_product = -float('inf')\n    for i in range(len(list1)):\n        for j in range(i + 1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n            max_product = max(product, max_product)\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    max_product_pair = None\n\n    for i in range(len(list1)):\n        for j in range(i + 1, len(list1)):\n            pair_product = abs(list1[i][0] * list1[j][1])\n            if pair_product > max_product:\n                max_product = pair_product\n                max_product_pair = (list1[i], list1[j])\n\n    return max_product_pair"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product_tuple(lst):\n    \"\"\"\n    Find the maximum absolute product between numbers in pairs of tuples within a given list.\n\n    Args:\n        lst (list): list of tuples\n\n    Returns:\n        int: maximum absolute product\n    \"\"\"\n    max_product = 0\n    for i in range(len(lst) - 1):\n        for j in range(i + 1, len(lst)):\n            product = abs(lst[i][0] * lst[j][1])\n            max_product = max(max_product, product)\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = -float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if abs(list1[i][0] * list1[j][1]) > max_product:\n                max_product = abs(list1[i][0] * list1[j][1])\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = -float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            temp_product = max(abs(list1[i][0]*list1[j][1]), abs(list1[i][1]*list1[j][0]))\n            if temp_product > max_product:\n                max_product = temp_product\n    return max_product"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_amicable(num):\n    \"\"\"\n    Helper function to check if a given number is amicable or not.\n    \"\"\"\n    if num <= 0:\n        return False\n    sum_of_squares = 0\n    for i in range(1, num):\n        if num % i == 0:\n            sum_of_squares += i ** 2\n    return num == sum_of_squares\n\ndef sum_amicable(limit):\n    \"\"\"\n    Sums all amicable numbers from 1 to a specified number.\n    \"\"\"\n    sum_amicable = 0\n    for num in range(1, limit + 1):\n        if is_amicable(num):\n            sum_amicable += num\n    return sum_amicable"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_amicable_numbers(limit):\n    \"\"\"\n    This function takes a limit as input and returns the sum of all amicable numbers from 1 to the limit.\n    \"\"\"\n\n    # Create a list to store the sum of amicable numbers\n    amicable_sum = 0\n\n    # Iterate through all numbers from 1 to the limit\n    for num in range(1, limit + 1):\n\n        # Check if the number is amicable\n        if is_amicable(num):\n\n            # Add the number to the sum if it is amicable\n            amicable_sum += num\n\n    return amicable_sum\n\n\ndef is_amicable(num):\n    \"\"\"\n    This function takes a number as input and returns True if it is amicable, else False.\n    \"\"\"\n\n    # Check if the number is greater than 2\n    if num <= 2:\n        return False\n\n    # Calculate the sum of the proper divisors\n    proper_divisors_sum = sum(divisor for divisor in range(1, num) if num % divisor == 0)\n\n    # Check if the sum is equal to the original number\n    return num == proper_divisors_sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # Use a dictionary to store the sum of all amicable numbers\n    amicable_sum = {}\n    # Start from 1 and iterate until the limit is reached\n    for i in range(1, limit+1):\n        # Check if the current number is amicable by calculating the sum of its proper divisors\n        if i in amicable_sum:\n            amicable_sum[i] += i\n        else:\n            # If the sum of the current number and its proper divisors is not in the dictionary, add it\n            if i in amicable_sum:\n                amicable_sum[i] = amicable_sum[i] + i\n            else:\n                divisors = [j for j in range(1, int(i**0.5)+1) if i%j==0]\n                amicable_sum[i] = sum(divisors)\n\n    # Return the sum of all amicable numbers\n    return sum(amicable_sum.values())"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    for num in range(1, limit+1):\n        if num == sum_of_divisors(num):\n            sum += num\n        if num == sum_of_divisors(sum_of_divisors(num)):\n            sum += num\n    return sum\n\ndef sum_of_divisors(n):\n    '''\n    Write a function to calculate the sum of all divisors of a number.\n    '''\n    sum = 1\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            sum += i\n            if i!= n//i:\n                sum += n//i\n    return sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    This function takes a limit as input and returns the sum of all amicable numbers from 1 to the limit.\n    '''\n    amicable_pairs = []\n    for num in range(1, limit):\n        if num > 1:\n            for i in range(2, num):\n                if (num % i == 0) and (i!= num // i):\n                    amicable_pairs.append((num, i))\n    return sum(pair[0] + pair[1] for pair in amicable_pairs)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # create a dictionary to store the sum of two numbers as the key and the list of amicable numbers as the value\n    amicable_dict = {}\n    \n    # iterate through all numbers from 1 to limit\n    for i in range(1, limit+1):\n        # find the sum of the current number and all its proper divisors (numbers that divide it evenly)\n        current_sum = sum([j for j in range(1, i) if i % j == 0])\n        # check if the sum is already in the dictionary\n        if current_sum in amicable_dict:\n            # add the current number to the list of amicable numbers\n            amicable_dict[current_sum].append(i)\n        else:\n            # create a new list for the current number and add it to the dictionary\n            amicable_dict[current_sum] = [i]\n    \n    # sum all the values in the dictionary\n    result = sum(amicable_dict.values())\n    \n    return result"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_amicable(n, limit):\n    '''\n    Helper function to check if a number is amicable to a limit number.\n    '''\n    for i in range(1, limit + 1):\n        if n % i == 0 and limit % i == 0:\n            return True\n    return False\n\ndef amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_sum = 0\n    for n in range(1, limit + 1):\n        if is_amicable(n, limit):\n            amicable_sum += n\n    return amicable_sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    amicable_numbers = []\n    for num in range(2, limit):\n        if sum([num, limit - num]) in amicable_numbers:\n            amicable_numbers.append(sum([num, limit - num]))\n        else:\n            amicable_numbers.append(num)\n    return sum(amicable_numbers)\n"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for num in range(1, limit):\n        if num == sum_of_divisors(num) and num!= 1:\n            amicable_numbers.append(num)\n    return sum(amicable_numbers)\n\n\ndef sum_of_divisors(num):\n    '''\n    Write a function to find the sum of all divisors of a given number.\n    '''\n    divisors = []\n    for i in range(1, int(num**0.5)+1):\n        if num % i == 0:\n            divisors.append(i)\n            divisors.append(num//i)\n    return sum(divisors)\n\n\nif __name__ == '__main__':\n    limit = int(input(\"Enter the limit: \"))\n    print(\"The sum of all amicable numbers from 1 to\", limit, \"is:\", amicable_numbers_sum(limit))"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # List to store all numbers up to the limit\n    numbers = [i for i in range(1, limit+1)]\n    # Loop through each number in the list\n    for num in numbers:\n        # Check if the number is amicable to any other number in the list\n        for i in range(2, len(numbers)):\n            if (numbers[i] == num) or (numbers[i] % num == 0 and numbers[i] / num == num):\n                # If the number is amicable, add it to a sum list\n                sum_list.append(num)\n    # Return the sum of all numbers in the sum list\n    return sum(sum_list)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    This function takes two complex numbers as arguments and returns their angle as a complex number in radians.\n    '''\n    # calculate the magnitude of the complex number\n    magnitude = cmath.sqrt(a.real**2 + a.imag**2)\n    \n    # calculate the argument of the complex number\n    argument = cmath.phase(a)\n    \n    # return the angle as a complex number in radians\n    return cmath.rect(magnitude, argument)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # calculate the angle in radians\n    angle = cmath.phase(a + b*1j)\n    \n    # return the angle as a float in degrees\n    return angle.real*180/math.pi"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(complex(a,b))\n    return round(angle.real,2)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    Calculate the angle of a complex number using the cmath module.\n    \"\"\"\n    # Convert the complex number to polar form using the cmath module\n    angle = cmath.phase(a+b*1j)\n    # Extract the real and imaginary parts of the angle\n    real_part = angle.real\n    imag_part = angle.imag\n    # Combine the real and imaginary parts into a single value\n    angle_value = round(real_part + imag_part * 1j, 4)\n    # Return the angle value as a string\n    return f\"The angle of {a} + {b}j is {angle_value}.\""
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    angle = cmath.phase(a+b*1j)\n    return angle\n"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(complex(a,b))\n    angle_in_degrees = angle*180/cmath.pi\n    return angle_in_degrees"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    angle = angle * 180 / cmath.pi\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    angle = cmath.angle(angle)\n    angle = angle*180/cmath.pi\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(complex(a,b))"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    n = len(string)\n    max_diff = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            diff = 0\n            for k in range(i, j):\n                if string[k] == '0':\n                    diff += 1\n                else:\n                    diff -= 1\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    # Initialize two variables to store the count of 0s and 1s\n    zero_count = 0\n    one_count = 0\n\n    # Iterate through each character in the string\n    for char in string:\n        # If the character is a 0, increment the count of 0s\n        if char == '0':\n            zero_count += 1\n        # If the character is a 1, increment the count of 1s\n        else:\n            one_count += 1\n\n    # Initialize two variables to store the maximum difference between 0s and 1s\n    max_diff = 0\n    max_length = 1\n\n    # Iterate through each possible sub-string of the string\n    for i in range(len(string)):\n        for j in range(i, len(string)):\n            # Calculate the difference between the number of 0s and number of 1s in the sub-string\n            diff = abs(zero_count - one_count)\n\n            # Update the maximum difference and length if the difference is greater than the current maximum\n            if diff > max_diff:\n                max_diff = diff\n                max_length = j - i + 1\n\n    # Return the maximum difference and length\n    return max_diff, max_length"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_length(string):\n    count_0 = 0\n    count_1 = 0\n    max_diff = 0\n\n    for char in string:\n        if char == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n\n        diff = abs(count_0 - count_1)\n\n        if diff > max_diff:\n            max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n\n    def count_zeros_and_ones(sub_str):\n        zeros = sum(sub_str.count(0))\n        ones = sum(sub_str.count(1))\n        return abs(zeros - ones)\n\n    max_diff = 0\n    for i in range(len(string)):\n        sub_str = string[i:]\n        diff = count_zeros_and_ones(sub_str)\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    zero_count = 0\n    one_count = 0\n    max_diff = 0\n\n    for i in range(len(string)):\n        if string[i] == '0':\n            zero_count += 1\n        else:\n            one_count += 1\n\n        diff = abs(zero_count - one_count)\n        if diff > max_diff:\n            max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n\n    count_0 = 0\n    count_1 = 0\n\n    for i in range(len(string)): \n        if string[i] == '0': \n            count_0 += 1\n        else: \n            count_1 += 1\n\n    diff = abs(count_0 - count_1)\n\n    return diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_length(string):\n    n = len(string)\n    dp = [[0] * n for _ in range(n)]\n\n    for i in range(1, n):\n        for j in range(i):\n            if string[i] == '0' and string[j] == '0':\n                dp[i][j] = dp[j][i-1] + 1\n            elif string[i] == '1' and string[j] == '1':\n                dp[i][j] = dp[j][i-1]\n\n    max_diff = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if string[i] == '0' and string[j] == '1':\n                max_diff = max(max_diff, dp[j][i-1])\n\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_length(string): \n    n = len(string)\n    count_0s = 0\n    count_1s = 0\n    max_diff = 0\n\n    for i in range(n):\n        if string[i] == '0':\n            count_0s += 1\n        else:\n            count_1s += 1\n\n        max_diff = max(max_diff, count_0s - count_1s)\n\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    n = len(string)\n    max_diff = 0\n    \n    for i in range(n):\n        diff = 0\n        j = i\n        \n        while j < n:\n            if string[j] == '0':\n                diff += 1\n            else:\n                diff -= 1\n            if diff > max_diff:\n                max_diff = diff\n            j += 1\n            \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # Initialize variables to store the count of 0s and 1s in the string\n    count_0 = 0\n    count_1 = 0\n\n    # Iterate through each character in the string\n    for char in string:\n        # If the character is a 0, increment the count of 0s\n        if char == '0':\n            count_0 += 1\n        # If the character is a 1, increment the count of 1s\n        else:\n            count_1 += 1\n\n    # Initialize variables to store the maximum difference between the counts\n    max_diff = 0\n    current_diff = 0\n\n    # Iterate through each sub-string of the string\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            # Calculate the difference between the counts in the sub-string\n            diff = abs(count_0 - count_1)\n\n            # Update the maximum difference if the current difference is greater than the maximum\n            if diff > max_diff:\n                max_diff = diff\n\n            # Update the current difference with the difference between the counts in the sub-string\n            current_diff = diff\n\n    return max_diff"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum(a,b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    divisor_set = set()\n    for i in range(1, min(a,b)+1):\n        if a % i == 0 and b % i == 0:\n            divisor_set.add(i)\n    return sum(divisor_set)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    divisors_set = set()\n    for i in range(1, a+1):\n        if a % i == 0 and b % i == 0:\n            divisors_set.add(i)\n    return sum(divisors_set)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # Find the list of common divisors of a and b\n    divisors = []\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            divisors.append(i)\n    # Find the sum of common divisors\n    result = 0\n    for d in divisors:\n        result += d\n    return result"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # initialize a dictionary to store the common divisors of a and b\n    common_divisors = {}\n    \n    # loop through all numbers from 1 to the smaller number\n    for i in range(1, min(a, b) + 1):\n        # check if i is a divisor of both a and b\n        if a % i == 0 and b % i == 0:\n            # if it is, add it to the dictionary with the value of i\n            common_divisors[i] = common_divisors.get(i, 0) + 1\n    \n    # find the sum of the common divisors\n    result = sum(common_divisors.values())\n    \n    # return the result\n    return result"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_of_common_divisors(a, b):\n    '''\n    This function takes two numbers as input and finds the sum of their common divisors.\n    '''\n    # list of common divisors of a and b\n    common_divisors = []\n\n    # iterate through the range of numbers between 1 and the smaller number\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            common_divisors.append(i)\n\n    # calculate the sum of common divisors\n    sum_of_common = sum(common_divisors)\n\n    return sum_of_common"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_common_divisors(num1, num2):\n    \"\"\"\n    This function takes in two numbers and returns the sum of their common divisors.\n    \"\"\"\n    divisor_sum = 0\n\n    for i in range(1, num1+1):\n        if num1 % i == 0 and num2 % i == 0:\n            divisor_sum += i\n\n    return divisor_sum"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum(a, b):\n    '''\n    This function takes two integers as input and returns their sum of common divisors.\n    '''\n    # function to check if a number is a common divisor of b\n    def is_common_divisor(a, b):\n        if b == 0:\n            return True\n        elif a % b == 0:\n            return True\n        else:\n            return False\n\n    # initialize sum of common divisors to 0\n    sum_common = 0\n\n    # iterate through all the numbers from 1 to the smaller of the two numbers\n    for i in range(1, min(a, b) + 1):\n        # check if i is a common divisor of both a and b\n        if is_common_divisor(i, a) and is_common_divisor(i, b):\n            sum_common += i\n\n    # return the sum of common divisors\n    return sum_common"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum(a,b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # Finding all the common divisors of a and b using the Euclidean algorithm\n    divisors_a = []\n    divisors_b = []\n    for i in range(1,a):\n        if a%i == 0 and b%i == 0:\n            divisors_a.append(i)\n    for i in range(1,b):\n        if b%i == 0 and a%i == 0:\n            divisors_b.append(i)\n    # Finding the sum of the common divisors\n    sum_divisors = sum(divisors_a) + sum(divisors_b)\n    return sum_divisors"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # get the set of common divisors of a and b\n    divisors = set(get_divisors(a)) & set(get_divisors(b))\n    # return the sum of the common divisors\n    return sum(divisors)\n\n\ndef get_divisors(n):\n    \"\"\"\n    Return a list of the unique divisors of the given number.\n    \"\"\"\n    divisors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisors.append(i)\n    return divisors"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # Find the GCD of the two numbers\n    gcd = gcd(a, b)\n    # Initialize the sum variable\n    sum = 0\n    # Loop through all numbers between 1 and the GCD\n    for i in range(1, gcd + 1):\n        # Check if the number is a common divisor of both numbers\n        if gcd % i == 0 and a % i == 0 and b % i == 0:\n            # Add the common divisor to the sum\n            sum += i\n    # Return the sum of common divisors\n    return sum"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    while y > 0:\n        if y & 1 == 1:\n            result += x\n        x <<= 1\n        y >>= 1\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    for i in range(x):\n        result += y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    for i in range(y):\n        result += x\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers.\n    \"\"\"\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def long_words(n, words):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words_list = []\n    for word in words:\n        if len(word) > n:\n            long_words_list.append(word)\n    return long_words_list"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def long_words(n, words):\n    \"\"\"\n    This function takes two arguments, n and words, where n is the number of characters\n    that a word should be longer than and words is a list of words. It then returns a list\n    of words that are longer than n characters.\n    \"\"\"\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words\n"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def long_words(n, words):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = [word for word in words if len(word) > n]\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n\n    # Convert the string into a list of words\n    words = str.split()\n\n    # Initialize an empty list to store the longer words\n    longer_words = []\n\n    # Iterate through the list of words\n    for word in words:\n        # Check if the length of the word is greater than n\n        if len(word) > n:\n            # If it is, add it to the list of longer words\n            longer_words.append(word)\n\n    # Return the list of longer words\n    return longer_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def long_words(n, str):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n    \"\"\"\n    words = str.split()\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n    \"\"\"\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def long_words(n, str):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n    \"\"\"\n    words = str.split()\n    long_words = [word for word in words if len(word) > n]\n    return long_words"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    def is_magic_square(matrix):\n        n = len(matrix)\n        for i in range(n):\n            # Check rows\n            if not (sum(matrix[j][i] for j in range(n)) == sum(matrix[i][j] for j in range(n)) for j in range(n)):\n                return False\n            # Check columns\n            if not (sum(matrix[j][i] for j in range(n)) == sum(matrix[j][i] for j in range(n)) for j in range(n)):\n                return False\n        # Check diagonals\n        if not (matrix[0][0] + matrix[1][1] + matrix[2][2] == matrix[0][2] + matrix[1][1] + matrix[2][0]):\n            return False\n        if not (matrix[2][0] + matrix[1][1] + matrix[0][2] == matrix[2][2] + matrix[1][1] + matrix[0][0]):\n            return False\n        return True\n\n    rows = [row.split() for row in my_matrix]\n    cols = [[rows[i][j] for j in range(len(rows))] for i in range(len(rows))]\n    diag1 = [rows[i][i] for i in range(len(rows))]\n    diag2 = [rows[i][n-i-1] for i in range(len(rows))]\n\n    if is_magic_square(rows) or is_magic_square(cols) or is_magic_square(diag1) or is_magic_square(diag2):\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if the matrix is a square matrix\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    \n    # Initialize variables for checking the magic square\n    square = set()\n    row_sum = set()\n    col_sum = set()\n    \n    # Loop through each element in the matrix\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[0])):\n            # Check if the element is in the set of square elements\n            if (i, j) in square:\n                return False\n            \n            # Add the element to the set of square elements\n            square.add((i, j))\n            \n            # Add the element to the set of elements in each row\n            row_sum.add(my_matrix[i][j])\n            \n            # Add the element to the set of elements in each column\n            col_sum.add(my_matrix[j][i])\n    \n    # Check if there are any duplicates in the row_sum set or col_sum set\n    if len(row_sum)!= len(set(row_sum)) or len(col_sum)!= len(set(col_sum)):\n        return False\n    \n    # Check if the matrix is a magic square\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    n = len(my_matrix)\n    # Check if the matrix is a square\n    if n!= len(set(my_matrix[i] for i in range(n))):\n        return False\n    # Check if the matrix is a magic square\n    for i in range(n):\n        row_sum = sum(my_matrix[i])\n        col_sum = sum([my_matrix[j][i] for j in range(n)])\n        diagonal_sum = sum([my_matrix[i][i] for i in range(n)])\n        if row_sum!= col_sum!= diagonal_sum:\n            return False\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n\n    # Get the size of the matrix\n    n = len(my_matrix)\n\n    # Check if the matrix is a magic square\n    for i in range(n):\n        # Check if the rows are magic squares\n        row_sum = sum(my_matrix[i])\n        if row_sum!= n*(n+1)//2:\n            return False\n\n        # Check if the columns are magic squares\n        col_sum = sum(my_matrix[:, i])\n        if col_sum!= n*(n+1)//2:\n            return False\n\n        # Check if the main diagonal is magic squares\n        diag_sum = sum(my_matrix[i][i])\n        if diag_sum!= n*(n+1)//2:\n            return False\n\n        # Check if the secondary diagonal is magic squares\n        diag_sum = sum(my_matrix[i][n-1-i])\n        if diag_sum!= n*(n+1)//2:\n            return False\n\n    # The matrix is a magic square\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n\n    # Calculate the sum of all elements in the matrix\n    total = sum(sum(row) for row in my_matrix)\n\n    # Check if the sum of the main diagonals is equal to the total number of elements in the matrix\n    if sum(my_matrix[i][i] for i in range(len(my_matrix))) == total:\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    n = len(my_matrix)\n    # Check if the matrix is a square\n    if n!= len(set(my_matrix)):\n        return False\n    \n    # Check if the matrix is a magic square\n    for i in range(n):\n        # Check if the rows are the same\n        if my_matrix[i]!= my_matrix[0]:\n            return False\n        \n        # Check if the columns are the same\n        for j in range(n):\n            if my_matrix[j]!= my_matrix[j]:\n                return False\n    \n    # Check if the diagonal is the same\n    for i in range(n):\n        if my_matrix[i][i]!= my_matrix[i][n-i-1]:\n            return False\n    \n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n\n    # Check if the matrix is a square matrix\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n\n    # Check if the matrix contains only integers\n    for row in my_matrix:\n        if not all(isinstance(num, int) for num in row):\n            return False\n\n    # Check if the matrix has unique elements\n    if len(my_matrix)!= len(set(sum(my_matrix, []))) or len(set(sum(my_matrix, [])))!= len(my_matrix) ** 2:\n        return False\n\n    # Check if the matrix contains the elements 1, 4, 7,..., n^2 for n >= 2\n    sum_matrix = sum(my_matrix, [])\n    n = len(my_matrix)\n    for i in range(n ** 2):\n        if my_matrix[i // n][i % n]!= i + 1:\n            return False\n        if my_matrix[i // n][n - i % n - 1]!= n ** 2 - i - 1:\n            return False\n        if my_matrix[n - i // n - 1][i % n]!= i + n ** 2:\n            return False\n        if my_matrix[n - i // n - 1][n - i % n - 1]!= n ** 3 - i - 1:\n            return False\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    # get the number of rows and columns of the matrix\n    rows = len(my_matrix)\n    cols = len(my_matrix[0])\n\n    # check for the 3x3 pattern\n    pattern = [\n        [0, 0, 0],\n        [0, 0, 0],\n        [0, 0, 0]\n    ]\n\n    # check for the 3x3 sub-matrices\n    sub_matrix1 = [\n        [my_matrix[i][j] for j in range(cols)] for i in range(rows)\n    ]\n    sub_matrix2 = [\n        [my_matrix[i][cols-j-1] for j in range(rows)] for i in range(rows)\n    ]\n    sub_matrix3 = [\n        [my_matrix[cols-i-1][j] for j in range(rows)] for i in range(cols)\n    ]\n\n    if all(pattern[i][j] == my_matrix[i][j] for i in range(rows) for j in range(cols)):\n        return True\n    if all(pattern[i][j] == my_matrix[i][cols-j-1] for i in range(rows) for j in range(cols)):\n        return True\n    if all(pattern[i][j] == my_matrix[cols-i-1][j] for i in range(cols) for j in range(rows)):\n        return True\n\n    if all(pattern[i][j] == sub_matrix1[i][j] for i in range(rows) for j in range(cols)):\n        return True\n    if all(pattern[i][j] == sub_matrix2[i][j] for i in range(rows) for j in range(cols)):\n        return True\n    if all(pattern[i][j] == sub_matrix3[i][j] for i in range(rows) for j in range(cols)):\n        return True\n\n    # check for the 4x4 pattern\n    pattern = [\n        [0, 0, 0, 0],\n        [0, 0, 0, 0],\n        [0, 0, 0, 0],\n        [0, 0, 0, 0]\n    ]\n\n    # check for the 4x4 sub-matrices\n    sub_matrix1 = [\n        [my_matrix[i][j] for j in range(cols)] for i in range(rows)\n    ]\n    sub_matrix2 = [\n        [my_matrix[i][cols-j-1] for j in range(rows)] for i in range(rows)\n    ]\n    sub_matrix3 = [\n        [my_matrix[cols-i-1][j] for j in range(rows)] for i in range(cols)\n    ]\n    sub_matrix4 = [\n        [my_matrix[i][j] for j in range(cols)] for i in range(rows)\n    ]\n\n    if all(pattern[i][j] == my_matrix[i][j] for i in range(rows) for j in range(cols)):\n        return True\n    if all(pattern[i][j] == my_matrix[i][cols-j-1] for i in range(rows) for j in range(cols)):\n        return True\n    if all(pattern[i][j] == my_matrix[cols-i-1][j] for i in range(cols) for j in range(rows)):\n        return True\n    if all(pattern[i][j] == my_matrix[i][j] for i in range(rows) for j in range(cols)):\n        return True\n\n    if all(pattern[i][j] == sub_matrix1[i][j] for i in range(rows) for j in range(cols)):\n        return True\n    if all(pattern[i][j] == sub_matrix2[i][j] for i in range(rows) for j in range(cols)):\n        return True\n    if all(pattern[i][j] == sub_matrix3[i][j] for i in range(rows) for j in range(cols)):\n        return True\n    if all(pattern[i][j] == sub_matrix4[i][j] for i in range(rows) for j in range(cols)):\n        return True\n\n    # check for the 5x5 pattern\n    pattern = [\n        [0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0],\n        [0"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    \n    # Check if the matrix has the same number of rows and columns\n    if len(set(len(row) for row in my_matrix))!= 1:\n        return False\n    \n    # Check if the matrix is a magic square\n    magic_sum = 0\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix)):\n            magic_sum += my_matrix[i][j]\n    if magic_sum == 0 or magic_sum == 30:\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # check that the matrix has a square shape\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n\n    # check that all the elements are unique\n    if len(set(my_matrix))!= len(my_matrix):\n        return False\n\n    # check that the matrix is a magic square\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[i])):\n            # check the row and column of the element\n            if my_matrix[i][j]!= j+1 or my_matrix[j][i]!= i+1:\n                return False\n\n    return True"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n\n    This function takes in a list of numbers, and returns the item with the highest frequency in the list.\n    If there are multiple items with the same highest frequency, it returns any of those items.\n\n    The function uses a defaultdict to keep track of the frequency of each item in the list.\n    '''\n\n    # Create a defaultdict to store the frequency of each item in the list\n    freq = defaultdict(int)\n\n    # Iterate over each number in the list\n    for num in nums:\n        # Increment the frequency count for the current number\n        freq[num] += 1\n\n    # Find the item with the highest frequency\n    max_freq = 0\n    max_item = None\n    for item, freq_count in freq.items():\n        if freq_count > max_freq:\n            max_freq = freq_count\n            max_item = item\n\n    return max_item\n"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    # Count the frequency of each item in the list\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n\n    # Find the item with the maximum frequency\n    max_freq = 0\n    max_item = None\n    for num, count in freq.items():\n        if count > max_freq:\n            max_freq = count\n            max_item = num\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Create a dictionary to store the frequency of each item in the list\n    freq = defaultdict(int)\n\n    # Iterate over the list and update the frequency count in the dictionary\n    for num in nums:\n        freq[num] += 1\n\n    # Find the item with the maximum frequency count\n    max_item = None\n    max_freq = 0\n    for item, freq_count in freq.items():\n        if freq_count > max_freq:\n            max_freq = freq_count\n            max_item = item\n\n    # Return the item with maximum frequency count\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    max_freq = 0\n    max_item = None\n\n    for num in nums:\n        freq_dict[num] += 1\n        if freq_dict[num] > max_freq:\n            max_freq = freq_dict[num]\n            max_item = num\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Initialize an empty dictionary to store the frequency of each item\n    freq = defaultdict(int)\n    # Iterate over the list and update the frequency of each item in the dictionary\n    for num in nums:\n        freq[num] += 1\n    # Find the item with the maximum frequency\n    max_item = None\n    max_freq = 0\n    for item, count in freq.items():\n        if count > max_freq:\n            max_item = item\n            max_freq = count\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_map = defaultdict(int)\n    for num in nums:\n        freq_map[num] += 1\n\n    max_count = 0\n    max_item = None\n    for item, count in freq_map.items():\n        if count > max_count:\n            max_count = count\n            max_item = item\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    counts = defaultdict(int)\n    max_count = 0\n    max_item = None\n    \n    for num in nums:\n        counts[num] += 1\n        if counts[num] > max_count:\n            max_count = counts[num]\n            max_item = num\n    \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    max_freq = 0\n    max_item = None\n\n    for num in nums:\n        freq[num] += 1\n        if freq[num] > max_freq:\n            max_freq = freq[num]\n            max_item = num\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Create a defaultdict to store the frequency of each item in the list\n    freq = defaultdict(int)\n\n    # Iterate through the list and update the frequency of each item\n    for num in nums:\n        freq[num] += 1\n\n    # Find the item with the maximum frequency\n    max_item = None\n    max_freq = 0\n    for item, freq in freq.items():\n        if freq > max_freq:\n            max_item = item\n            max_freq = freq\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    This function takes a list of integers as input and returns the item with maximum frequency.\n    '''\n    freq = defaultdict(int)\n    max_num = None\n    max_freq = 0\n    for num in nums:\n        freq[num] += 1\n        if freq[num] > max_freq:\n            max_num = num\n            max_freq = freq[num]\n    return max_num"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    str1 = str1.lower()\n    str1 = ''.join(filter(lambda x: x not in vowels, str1))\n    return str1[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowel_indices = []\n    for i in range(len(str1)):\n        if str1[i] in vowels:\n            vowel_indices.append(i)\n    vowel_indices.sort(reverse=True)\n    for i in vowel_indices:\n        str1 = str1[:i] + str1[i+1:]\n    return str1"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    result = \"\"\n    for char in str1:\n        if char.lower() not in vowels:\n            result = char + result\n    return result"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    str1 = list(str1)\n    vowel_indices = [i for i, char in enumerate(str1) if char in vowels]\n    if not vowel_indices:\n        return str1\n    vowel_indices.sort(reverse=True)\n    for i in vowel_indices:\n        str1[i] = str1[len(str1) - 1 - i]\n    return ''.join(str1)"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])\n    return str1[::-1].translate(str.maketrans('', '', vowels))"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    result = ''\n\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] not in vowels:\n            result += str1[i]\n\n    return result\n"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    reversed_vowels = []\n    for char in str1:\n        if char.lower() not in vowels:\n            reversed_vowels.append(char)\n    return ''.join(reversed_vowels[::-1])"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_vowels(s):\n    vowels = \"aeiouAEIOU\"\n    result = []\n    for char in s:\n        if char in vowels:\n            result.append(char)\n    return \"\".join(result[::-1])"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    vowels = 'AEIOUaeiou'\n    reversed_str = ''\n    for char in str1:\n        if char not in vowels:\n            reversed_str = char + reversed_str\n    return reversed_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    str2 = \"\"\n    for char in str1:\n        if char in vowels:\n            str2 = char + str2\n        else:\n            str2 = str2 + char\n    return str2"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tup_string(tup):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ', '.join(str(x) for x in tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    # convert the tuple to a string\n    s = str(tup1)\n    return s"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tup_string(tup):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    return str(tup)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # Using a loop to convert each element of the tuple to a string\n    converted_tuple = ''\n    for i in range(len(tup1)):\n        converted_tuple += str(tup1[i])\n        if i!= len(tup1) - 1:\n            converted_tuple += ', '\n    return converted_tuple"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tup_string(tup):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    return str(tup)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    string_format = \",\".join(map(str, tup1))\n    return string_format"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str_tup = str(tup1)\n    return str_tup"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    return sum(n for n in nums if n < 0)"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    negatives = [num for num in nums if num < 0]\n    return sum(negatives)"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum_neg = 0\n    for num in nums:\n        if num < 0:\n            sum_neg += num\n    return sum_neg"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_nums = [num for num in nums if num < 0]\n    return sum(neg_nums)"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total_sum = 0\n    for num in nums:\n        if num < 0:\n            total_sum += num\n    return total_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n * (2 * n - 1))\n"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 6 * hexagonal_num(n-1) + n"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1) + 1\n"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    hex_num = 1\n    while n > 0:\n        n -= 1\n        hex_num += n\n    return hex_num"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n\n    # initialize the hexagonal number to 1\n    hex_num = 1\n\n    # loop through the range of n and multiply the hexagonal number by 6\n    for i in range(n):\n        hex_num *= 6\n\n    # return the hexagonal number\n    return hex_num"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return 2*n**2 - 1"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # define a function to calculate the length of a side of a hexagon\n    def side_length(num):\n        return num * (3 ** 0.5) + 1\n\n    # initialize the first hexagonal number\n    num = 1\n\n    # loop through each side of the hexagon and check if the nth hexagonal number is reached\n    for side in range(n + 1):\n        if side == n:\n            return num\n        num += side_length(side)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    hex_num = 1\n    for i in range(1, n+1):\n        hex_num = hex_num * 6 + 1\n    return hex_num"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # initialize the first hexagon number\n    hex = 1\n    \n    # loop through the number of hexagons to find the nth hexagon number\n    for i in range(n):\n        # add 6 to the hexagon number and multiply by 2\n        hex += 6*2\n    \n    return hex"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n < 1:\n        return None\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return 2 * n * (n + 1) - 1\n    else:\n        return 2 * n * (n + 1)"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    arr = array('i', nums)\n    zeros = 0\n    nonzeros = 0\n\n    for num in arr:\n        if num == 0:\n            zeros += 1\n        else:\n            nonzeros += 1\n\n    if nonzeros == 0:\n        return 0\n    else:\n        return zeros / nonzeros"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = array('i', [0]*len(nums))\n    for num in nums:\n        count[num] += 1\n    zeros = 0\n    nonzeros = 0\n    for num in count:\n        if num == 0:\n            zeros += 1\n        else:\n            nonzeros += 1\n    if nonzeros == 0:\n        return 0\n    else:\n        return zeros/nonzeros"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = sum(nums) - sum(nums!= 0)\n    non_zero_count = sum(nums)\n    ratio = zero_count / non_zero_count\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeroes = 0\n    non_zeroes = 0\n    \n    for num in nums:\n        if num == 0:\n            zeroes += 1\n        else:\n            non_zeroes += 1\n    \n    if non_zeroes == 0:\n        ratio = 1\n    else:\n        ratio = zeroes / non_zeroes\n    \n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count_zero = 0\n    count_non_zero = 0\n    \n    for num in nums:\n        if num == 0:\n            count_zero += 1\n        else:\n            count_non_zero += 1\n    \n    ratio = count_zero / count_non_zero\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = array('i', [1 for _ in range(len(nums))])\n    count[nums == 0] = 0\n    \n    zero_count = sum(count) / len(nums)\n    return zero_count"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    arr = array('i', nums)\n    non_zeros = arr.count(1)\n    zeroes = arr.count(0)\n    return non_zeros / zeroes"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    num_zero = 0\n    num_non_zero = 0\n    \n    for num in nums:\n        if num == 0:\n            num_zero += 1\n        else:\n            num_non_zero += 1\n            \n    if num_non_zero == 0:\n        return 0\n    else:\n        return num_zero / num_non_zero"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\n\ndef zero_count(nums):\n    \"\"\"\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    \"\"\"\n    # Initialize an array to store the count of zeroes and non-zeroes\n    count = array('i', [0, 0])\n\n    # Iterate through the array and update the count of zeroes and non-zeroes\n    for num in nums:\n        if num == 0:\n            count[0] += 1\n        else:\n            count[1] += 1\n\n    # Calculate the ratio of zeroes to non-zeroes\n    zero_ratio = count[0] / count[1]\n\n    # Return the ratio\n    return zero_ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = array('i', [0] * len(nums))\n    for num in nums:\n        if num == 0:\n            zero_count[nums.index(num)] += 1\n    non_zero_count = sum(zero_count)\n    ratio = non_zero_count / len(nums)\n    return ratio"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    count = 0\n    while n > 1:\n        if n % 2 == 0:\n            count += 1\n            n //= 2\n        else:\n            n -= 1\n    \n    return count >= 2"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    def is_power_of_two(num):\n        return (num & (num-1)) == 0\n\n    def is_sum_of_powers_of_two(num):\n        total = 0\n        while num:\n            total += 1\n            num >>= 1\n        return total & 1\n\n    if n == 0:\n        return True\n    elif n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif is_power_of_two(n):\n        return is_sum_of_powers_of_two(n)\n    elif n % 2 == 0:\n        return is_Sum_Of_Powers_Of_Two(n//2) and is_Sum_Of_Powers_Of_Two(n//2)\n    else:\n        return is_Sum_Of_Powers_Of_Two(n+1) or is_Sum_Of_Powers_Of_Two(n+1)"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # check if the given number is a power of 2\n    if n & (n-1) == 0:\n        return True\n\n    # check if the given number can be represented as sum of powers of 2\n    for i in range(32):\n        if (n >> i) & 1 == 1:\n            # check if the sum of powers of 2 is a power of 2\n            if ((1 << (i+1)) - 1) & ((1 << (i+1)) - 1) == 0:\n                return True\n\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    #convert the number to binary\n    binary_num = bin(n)[2:]\n    #create a list of non-zero powers of 2 from the binary representation\n    powers_of_two = []\n    for i in range(len(binary_num)):\n        if binary_num[i] == '1':\n            powers_of_two.append(2**i)\n    #sort the list of powers of 2 in non-decreasing order\n    powers_of_two.sort()\n    #find the largest power of 2 smaller than or equal to the square root of the given number\n    sqrt_n = int(n**(1/2))\n    largest_power_of_two = 2\n    while largest_power_of_two <= sqrt_n:\n        if largest_power_of_two**2 > n:\n            break\n        powers_of_two.append(largest_power_of_two**2)\n        largest_power_of_two *= 2\n    #check whether the given number can be represented as the sum of powers of 2 or not\n    if len(powers_of_two) > 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    count = 0\n    for i in range(1, int(n**0.5)+1):\n        if n == 2**i:\n            count += 1\n        if n == 2**(i+1):\n            count += 1\n    return count == 2"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    This function takes an integer as input and returns a boolean value indicating whether the given number\n    can be represented as sum of non-zero powers of 2 or not.\n\n    If the given number can be represented as sum of non-zero powers of 2, then the function returns True. \n    If the given number cannot be represented as sum of non-zero powers of 2, then the function returns False.\n    \"\"\"\n    # Check if n is a power of 2\n    if n == 0 or n == 1:\n        return True\n    elif n % 2 == 0:\n        return False\n    \n    # Check if n is a sum of powers of 2\n    power = 0\n    while n > 0:\n        if n % 2 == 0:\n            n //= 2\n            power += 1\n        else:\n            break\n    \n    return power >= 2"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n    # Create a list of all the possible powers of 2 from 0 to 30 (inclusive)\n    powers_of_two = [2**i for i in range(31)]\n\n    # Create a dictionary to store the number of each power of 2 in n\n    power_count = {2**i: n//(2**i) for i in range(31)}\n\n    # Check if the number can be represented as sum of non-zero powers of 2\n    if 1 in power_count:\n        return False\n\n    # Iterate through the powers of 2 from 0 to 30 (inclusive)\n    for power in powers_of_two:\n        # Check if the power is present in the power count dictionary\n        if power in power_count:\n            # Remove the power from the power count dictionary\n            del power_count[power]\n            # If the power count dictionary becomes empty, return True\n            if not power_count:\n                return True\n\n    # If the loop completes without returning True, return False\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    This function checks whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n\n    def helper(num):\n        if num == 0:\n            return 1\n        elif num % 2 == 0:\n            return helper(num // 2) * 2\n        else:\n            return helper((num - 1) // 2) * 2 + 1\n\n    if helper(n)!= n:\n        return False\n    else:\n        return True"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    if n <= 0:\n        return False\n\n    def count_bits(num):\n        count = 0\n        while num > 0:\n            count += num & 1\n            num >>= 1\n        return count\n\n    def count_set_bits(num):\n        count = 0\n        while num > 0:\n            count += bin(num & 1).count('1')\n            num >>= 1\n        return count\n\n    def count_set_bits_in_binary(num):\n        return num.bit_length()\n\n    def count_set_bits_in_binary_optimized(num):\n        return num.count_bits()\n\n    def is_power_of_two(num):\n        return (num & (num - 1)) == 0\n\n    def is_power_of_two_optimized(num):\n        return num == (1 << num.bit_length() - 1)\n\n    def is_sum_of_powers_of_two(num):\n        count_bits_func = count_set_bits_in_binary_optimized\n        if count_bits(num) == 1:\n            count_bits_func = count_set_bits_in_binary\n\n        for i in range(1, 32):\n            if count_bits_func(num) >= i:\n                if is_power_of_two_optimized(i):\n                    return True\n        return False\n\n    return is_sum_of_powers_of_two(n)"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # check if the given number is divisible by 2\n    if n % 2 == 0: \n        return False\n    \n    # if n is odd, then it cannot be represented as sum of powers of 2\n    if n % 2!= 0:\n        return True\n    \n    # if n is odd, then divide n by 2 and recursively check if it can be represented as sum of powers of 2\n    return is_Sum_Of_Powers_Of_Two(n//2)\n"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r # in meters\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    pi = 3.14159265358979323846\n    circumference = 2 * pi * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*math.pi*r"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*3.14159*r\n"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    \"\"\"\n    Write a function to find the circumference of a circle.\n    \"\"\"\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r  # using the formula for circumference of a circle\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    pi = 3.141592653589793\n    circumference = 2 * pi * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * r"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for sublist in test_list:\n        flat_list.extend(sublist)\n    return set(flat_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n\n    flattened_list = []\n    for sublist in test_list:\n        for item in sublist:\n            flattened_list.append(item)\n\n    return flattened_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = [num for sublist in test_list for num in sublist]\n    return flat_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for sublist in test_list:\n        flattened_list.extend(sublist)\n    return list(set(flattened_list))"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    def flatten_list(nested_list):\n        flattened_list = []\n        for item in nested_list:\n            if isinstance(item, list):\n                flattened_list.extend(flatten_list(item))\n            else:\n                flattened_list.append(item)\n        return flattened_list\n\n    return flatten_list(test_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = []\n    for sublist in test_list:\n        result.extend(sublist)\n    return result"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = [num for sublist in test_list for num in sublist]\n    unique_numbers = set(flattened_list)\n    return unique_numbers\n"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n    \"\"\"\n    return [num for sublist in test_list for num in sublist]"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = set()\n    for item in test_list:\n        if isinstance(item, list):\n            result.update(extract_singly(item))\n        else:\n            result.add(item)\n    return result"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    flattened_list = [num for sublist in test_list for num in sublist]\n    return set(flattened_list)"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements using the pancake sort algorithm.\n\n    The pancake sort algorithm is a variation of the bubble sort algorithm. Instead of sorting the elements in the list in a row, it uses a technique called the \"pancake\" method to sort them in a column. This algorithm has a time complexity of O(n^2), but it can be optimized to O(n) using a variant of the merge sort algorithm.\n\n    The pancake sort algorithm works as follows:\n    - Start by creating a copy of the input list.\n    - While the length of the list is greater than 1, do the following:\n        - Find the largest element in the list.\n        - Swap it with the last element of the list.\n        - Decrease the length of the list by 1.\n        - Reverse the entire column to the left of the element that was swapped.\n\n    This process repeats until the list is sorted in ascending order.\n\n    This implementation uses a helper function to reverse the entire column to the left of a given element.\n    '''\n\n    def reverse_column(nums, left, right):\n        while left < right:\n            nums[left], nums[right] = nums[right], nums[left]\n            left += 1\n            right -= 1\n\n    # Create a copy of the input list\n    sorted_nums = nums.copy()\n\n    # Perform pancake sort\n    n = len(sorted_nums)\n    for i in range(n):\n        # Find the largest element in the list\n        max_index = i\n        for j in range(i+1, n):\n            if sorted_nums[j] > sorted_nums[max_index]:\n                max_index = j\n\n        # Swap it with the last element of the list\n        sorted_nums[i], sorted_nums[max_index] = sorted_nums[max_index], sorted_nums[i]\n\n        # Reverse the entire column to the left of the element that was swapped\n        reverse_column(sorted_nums, i, n-1)\n\n    return sorted_nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n):\n        # find the maximum element in the unsorted part of the list\n        max_index = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_index]:\n                max_index = j\n\n        # swap the maximum element with the element at the end of the unsorted part of the list\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n\n        # reverse the unsorted part of the list\n        for j in range(i+1, n):\n            nums[j], nums[j-1] = nums[j-1], nums[j]\n\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    \n    def sort_helper(arr, n, temp):\n        # base case: if array has only one element, it is already sorted\n        if n == 1:\n            return\n        \n        # find maximum element in the array\n        max_index = 0\n        for i in range(1, n):\n            if arr[i] > arr[max_index]:\n                max_index = i\n        \n        # swap the maximum element with the first element of the array\n        temp[0], arr[max_index] = arr[max_index], temp[0]\n        \n        # recursively sort the array from index 1 to n-1\n        sort_helper(arr, n-1, temp)\n    \n    # create a temporary array to store the sorted elements\n    temp = [nums[0]]\n    \n    # recursively sort the array from index 1 to n-1\n    sort_helper(nums, len(nums)-1, temp)\n    \n    # copy the sorted elements back to the original array\n    for i in range(len(nums)-1, 0, -1):\n        nums[i] = temp[i]"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    \n    def recursive_pancake_sort(nums, start, end):\n        if start >= end:\n            return\n        # find the maximum element in the sublist\n        max_idx = start\n        for i in range(start+1, end+1):\n            if nums[i] > nums[max_idx]:\n                max_idx = i\n        # swap the maximum element with the first element\n        nums[start], nums[max_idx] = nums[max_idx], nums[start]\n        # sort the sublist\n        recursive_pancake_sort(nums, start+1, end)\n        \n    # sort the list using the recursive pancake sort algorithm\n    recursive_pancake_sort(nums, 0, len(nums)-1)\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements.\n    \"\"\"\n    n = len(nums)\n\n    # Loop through each element in the list\n    for i in range(n-1, 0, -1):\n        # Find the index of the largest element in the unsorted part of the array\n        max_index = i\n        \n        # Loop through the unsorted part of the array\n        for j in range(0, i):\n            # If the current element is larger than the maximum element, update the max_index\n            if nums[j] > nums[max_index]:\n                max_index = j\n        \n        # Swap the current element with the largest element found\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n\n    # Initialize an empty stack\n    stack = []\n\n    # Create a list of tuples of the size of the list\n    sizes = [(i, 1) for i in range(n)]\n\n    # Initialize the last element to its correct position\n    last = n - 1\n\n    # While there are elements to sort\n    while sizes:\n        # Pop the smallest element from the stack and append it to the list\n        size, index = sizes.pop()\n        nums[index], nums[last] = nums[last], nums[index]\n        index, last = index + size - 1, last - 1\n\n        # If the element is in the correct position, skip it\n        if index < last:\n            stack.append((index, size))\n            sizes.append((index, 1))\n\n    # Reverse the list in-place\n    for i in range(n // 2):\n        nums[i], nums[n - i - 1] = nums[n - i - 1], nums[i]"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    # Convert the list to a list of tuples with (index, element)\n    indexed_nums = [(i, num) for i, num in enumerate(nums)]\n\n    # Sort the list of tuples by index in ascending order\n    indexed_nums.sort(key=lambda x: x[0])\n\n    # Convert the list of tuples back to a list of elements\n    sorted_nums = [num for _, num in indexed_nums]\n\n    # Return the sorted list of elements\n    return sorted_nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Step 1: Reverse the list\n    nums = nums[::-1]\n\n    # Step 2: Sort the list using the selection sort algorithm\n    for i in range(len(nums)):\n        # Find the maximum element in the unsorted part of the list\n        max_index = i\n        for j in range(i, len(nums)):\n            if nums[j] > nums[max_index]:\n                max_index = j\n\n        # Swap the maximum element with the first element of the unsorted part of the list\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n\n        # Reverse the first part of the list\n        nums = nums[::-1]\n\n    # Return the sorted list\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    This function takes a list of elements and sorts them in descending order using the\n    pancake sort algorithm.\n    '''\n    for i in range(len(nums)):\n        # Find the index of the largest element in the unsorted part of the array\n        max_index = i\n        for j in range(i+1, len(nums)):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        \n        # Swap the largest element with the element at the current index\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n        \n        # Reverse the sublist between the current index and the end of the array\n        for j in range(i, len(nums)-1, -1):\n            nums[i], nums[j] = nums[j], nums[i]"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Helper function to swap elements in the list\n    def swap(nums, i, j):\n        nums[i], nums[j] = nums[j], nums[i]\n\n    # Helper function to reverse the list in place\n    def reverse(nums, start, end):\n        while start < end:\n            swap(nums, start, end)\n            start += 1\n            end -= 1\n\n    # Helper function to create the pancake sequence\n    def create_pancake_sequence(n):\n        sequence = []\n        for i in range(1, n + 1):\n            sequence.append(i)\n        return sequence\n\n    # Main function to perform the pancake sort\n    def sort(nums):\n        n = len(nums)\n        pancake_sequence = create_pancake_sequence(n)\n        while pancake_sequence:\n            # Reverse the list using the pancake sequence\n            reverse(nums, 0, pancake_sequence[0] - 1)\n            reverse(pancake_sequence, 1, len(pancake_sequence) - 1)\n            pancake_sequence = pancake_sequence[:pancake_sequence.index(max(pancake_sequence)) - 1]\n        return nums\n\n    # Perform the sort\n    result = sort(nums)\n    return result"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n\n    # initialize count variable to 0\n    count = 0\n\n    # loop through each item in the first list\n    for i in range(len(list1)):\n        # loop through each item in the second list\n        for j in range(len(list2)):\n            # loop through each item in the third list\n            for k in range(len(list3)):\n                # check if the current item in the first list is equal to the current item in the second list\n                if list1[i] == list2[j]:\n                    # check if the current item in the second list is equal to the current item in the third list\n                    if list2[j] == list3[k]:\n                        # if all conditions are true, increment the count variable by 1\n                        count += 1\n\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            count += 1\n        if list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input: \n        if isinstance(item, list): \n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lists(Input):\n    \"\"\"\n    Write a function to find number of lists present in the given tuple.\n    \"\"\"\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lists(Input):\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count\n\nInput = (1, [2, 3, 4], (5, 6), 7, 8)\nprint(find_lists(Input)) # Output: 2"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input: \n        if isinstance(item, list): \n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lists(Input):\n    \"\"\"\n    Write a function to find number of lists present in the given tuple.\n    \"\"\"\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lists(Input):\n    '''\n    This function takes a tuple as input and returns the number of lists in it.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = float('-inf') \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr):\n    \"\"\"\n    Write a python function to find the maximum difference between any two elements in a given array.\n    \"\"\"\n    if len(arr) < 2:\n        return None\n    max_diff = float('-inf')\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            max_diff = max(max_diff, diff)\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Find the maximum absolute difference between any two elements in an array.\n    '''\n    max_diff = float('-inf')\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    \n    if len(arr) <= 1: \n        return 0\n    \n    max_diff = abs(arr[1] - arr[0])\n    \n    for i in range(1, len(arr)): \n        diff = abs(arr[i+1] - arr[i])\n        \n        if diff > max_diff: \n            max_diff = diff\n    \n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    This function takes in an array as input and finds the maximum absolute difference between any two elements in the array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            diff = abs(arr[i]-arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr):\n    \"\"\"\n    Write a python function to find the maximum difference between any two elements in a given array.\n    \"\"\"\n    max_diff = 0\n    \n    for i in range(len(arr)-1):\n        for j in range(i+1,len(arr)):\n            diff = abs(arr[i]-arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Using the Pythagorean theorem to find the square root\n    sqrt_n = int(n ** 0.5)\n    # Finding the quadratic root\n    x1 = (-b + sqrt_n) / (2 * a)\n    x2 = (-b - sqrt_n) / (2 * a)\n    # Checking if the quadratic root is within the range of x1 and x2\n    if x1 >= x2 and x1 <= n and x2 <= n:\n        return (int(x1), int(x2))\n    elif x2 >= x1 and x2 <= n and x1 <= n:\n        return (int(x2), int(x1))\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    det = a * b - 1\n    if det == 0:\n        return None\n    \n    x = (-b + sqrt(b**2 - 4*a*n)) / (2*a)\n    y = (-b - sqrt(b**2 - 4*a*n)) / (2*b)\n    \n    if x >= 0 and y < 0:\n        return (int(x), int(y))"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    \n    for i in range(1, n+1):\n        if n - a*i - b*i == 0:\n            return (i, n-a*i-b*i)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # create a list of pairs (x, y) such that a*x + b*y = n\n    solutions = [(x, y) for x in range(-(b//a), b//a+1) for y in range(-(b//a), b//a+1) if a*x + b*y == n]\n    # return the first solution if there is one, otherwise return None\n    if solutions:\n        return solutions[0]\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(1, 100):\n        for y in range(1, 100):\n            if a * x + b * y == n:\n                return (x, y)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    \"\"\"\n    x0 = 0\n    y0 = b // a\n    x1 = (b * y0 - n) // a\n    y1 = b // a\n    \n    if x0 == x1:\n        return None\n    \n    return (x0, y0), (x1, y1)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # check if a and b are both positive integers\n    if not (isinstance(a, int) and isinstance(b, int) and isinstance(n, int)):\n        return None\n    \n    # check if a and n are both coprime\n    if gcd(a, n)!= 1:\n        return None\n    \n    # check if b is invertible modulo a\n    if mod_inverse(b, a) is None:\n        return None\n    \n    # initialize x and y to 0\n    x = 0\n    y = 0\n    \n    # iterate n times\n    for i in range(n):\n        # calculate the next x value\n        x = (x * a + y) % n\n        \n        # calculate the next y value\n        y = (x * b - y) % n\n    \n    # check if x and y satisfy ax + by = n\n    if x * a + y * b == n:\n        return (x, y)\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Use the quadratic formula to find the solutions of the equation ax^2 + bx + c = 0\n    a2 = a * a\n    b2 = b * b\n    c = n - a * b\n    if a == 0:\n        if b == 0:\n            return None\n        else:\n            x1, x2 = -c / b, -c / b\n    else:\n        discriminant = b2 - 4 * a2 * c\n        if discriminant < 0:\n            return None\n        else:\n            x1 = (-b + discriminant ** 0.5) / (2 * a)\n            x2 = (-b - discriminant ** 0.5) / (2 * a)\n    return (int(x1), int(x2))"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Check if a and b are both greater than zero\n    if a <= 0 or b <= 0:\n        return None\n\n    # Use the Gaussian elimination method to find the solution\n    # for x and y\n    def gaussian_elimination(matrix, n):\n        for i in range(n):\n            # Find the maximum element in the current row\n            max_index = i\n            for j in range(i+1, n):\n                if matrix[j][i] > matrix[max_index][i]:\n                    max_index = j\n\n            # Swap the row with the maximum element\n            for j in range(n):\n                matrix[i][j], matrix[max_index][j] = matrix[max_index][j], matrix[i][j]\n\n            # Scale the row to have a 1 in the pivot position\n            scale = 1 / matrix[i][i]\n            for j in range(i+1, n):\n                matrix[i][j] *= scale\n\n            # Subtract the pivot element from the rest of the row\n            for j in range(n):\n                if j!= i:\n                    matrix[j][i] -= matrix[j][i] * matrix[i][i]\n\n    # Create the augmented matrix with 1's on the diagonal\n    A = [[1, a, b], [0, 1, 1]]\n    n = 2\n\n    # Gaussian elimination to find x and y\n    gaussian_elimination(A, n)\n    x = -A[1][0] / A[0][0]\n    y = -A[0][1] / A[0][0]\n\n    # Check if the solution exists\n    if x * a + y * b == n:\n        return (x, y)\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n\n    # initialize variables\n    x = None\n    y = None\n    count = 0\n\n    # iterate through all possible x values\n    for i in range(-n, n+1):\n        # calculate the corresponding y value\n        temp_y = b * i\n\n        # check if the sum is equal to n\n        if temp_y == n:\n            # check if the x value is already assigned\n            if x is None:\n                x = i\n            else:\n                # check if the x value is already assigned but with a different y value\n                if y is not None and a * x + b * y!= n:\n                    x = i\n                    y = temp_y\n            # increment the count of solutions found\n            count += 1\n\n    # check if a solution was found\n    if count == 1:\n        return (x, y)\n    else:\n        return None"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    return [x for x in list1 if x not in list2]"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # create a new list to store the elements that are not in list2\n    new_list = []\n    # loop through the elements in list1\n    for element in list1:\n        # check if the element is not in list2\n        if element not in list2:\n            # if it is not, add it to the new list\n            new_list.append(element)\n    # return the new list containing only the elements that are not in list2\n    return new_list"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    new_list = []\n    for item in list1:\n        if item not in list2:\n            new_list.append(item)\n    return new_list"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    # Create a set of elements from list2\n    set2 = set(list2)\n    # Iterate through list1 and remove elements present in set2\n    list1 = [x for x in list1 if x not in set2]\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n\n    # Loop through the first list\n    for element in list1:\n\n        # Check if the element is present in the second list\n        if element in list2:\n\n            # If it is, remove it from the first list\n            list1.remove(element)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list1:\n        if element in list2:\n            list1.remove(element)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list2:\n        if i in list1:\n            list1.remove(i)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list1 = list(set(list1) - set(list2))\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    for i in list1:\n        if i in list2:\n            list1.remove(i)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    for item in list1:\n        if item in list2:\n            list1.remove(item)\n    return list1"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n // 2):\n        sum += n - 2 * i\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    for i in range(0, n // 2 + 1):\n        total += n - 2 * i\n    return total"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    i = 0\n    while i < n // 2:\n        total += n - 2*i\n        i += 1\n    return total"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n\n    # initialize the sum variable to zero\n    sum = 0\n\n    # loop through the series from i=0 to n // 2\n    for i in range(n // 2):\n        # calculate the sum of the series\n        series_sum = n - 2 * i\n\n        # add the series sum to the running total\n        sum += series_sum\n\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    if n % 2 == 0:\n        return sum_series(n // 2)\n    else:\n        return n + sum_series(n // 2)"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    # Initialize the sum to zero\n    total_sum = 0\n    \n    # Iterate through the series from the end to the beginning\n    for i in range(n // 2 - 1, -1, -1):\n        # Calculate the sum of the series\n        current_sum = (n - 2*i)\n        \n        # If the sum is greater than n-x, break out of the loop\n        if current_sum > n - 2*i:\n            break\n        \n        # Add the current sum to the total sum\n        total_sum += current_sum\n    \n    # Return the total sum\n    return total_sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    sum = 0\n    for i in range(n // 2):\n        sum += n - 2*i\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n // 2):\n        sum += n - 2 * i\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2,\n    for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    result = 0\n    for i in range(n // 2):\n        result += n - 2 * i\n    return result"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    i = 0\n    sum_series = 0\n    while i < n // 2:\n        sum_series += n - 2 * i\n        i += 1\n    return sum_series"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += s * (tan(2 * pi * (i+1) / l))\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s * (s - tan(pi/l)**2)) / (4*tan(pi/l))\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s * l) / 2\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += s * tan(i * 2 * pi / l)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += s * tan(pi/l)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n\n    # Calculate the area of a triangle using Heron's formula\n    triangle_area = (s * l) / 2\n    print(\"The area of the regular polygon is:\", triangle_area)\n\n    # Calculate the area of the polygon using the formula for the area of a regular polygon\n    # (n * s^2) / (4 * tan(pi/n))\n    n = l\n    area_polygon = (n * s**2) / (4 * tan(pi/n))\n    print(\"The area of the polygon is:\", area_polygon)"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += (s**2) * tan(i * pi / l)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += s * tan((2 * pi * i) / l)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += (s*tan((pi/l)*i))**2\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return 0.5 * s * (l - 2)"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef div_sum(n):\n    \"\"\"\n    Determine if the sum of the divisors of two integers are the same.\n    \"\"\"\n    divisors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n    if len(divisors) == 0:\n        return \"No divisors\"\n    elif len(divisors) == 1:\n        return \"One divisor\"\n    else:\n        sum_divisors = sum(divisors)\n        return sum_divisors == n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    def is_prime(num):\n        '''\n        A helper function to check if a number is prime or not.\n        '''\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num))+1):\n            if num % i == 0:\n                return False\n        return True\n\n    def sum_div(num):\n        '''\n        A helper function to find the sum of the divisors of a given number.\n        '''\n        sum = 1\n        for i in range(2, num):\n            if num % i == 0:\n                sum += i\n        return sum\n\n    def check_div(num1, num2):\n        '''\n        A helper function to check if the sum of the divisors of two numbers is the same or not.\n        '''\n        sum1 = sum_div(num1)\n        sum2 = sum_div(num2)\n        if abs(sum1 - sum2) > 1:\n            return False\n        return True\n\n    # check if n is prime\n    if not is_prime(n):\n        return False\n\n    # check if the sum of the divisors of n and n+1 are the same\n    if not check_div(n, n+1):\n        return False\n\n    # if both checks pass, return True\n    return True\n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n\n    divs = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divs.append(i)\n            divs.append(n//i)\n    return divs"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_list = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            div_list.append(i)\n    sum_div = sum(div_list)\n    if sum_div == n:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n\n    def sum_of_divisors(num): \n        '''\n        Write a function to calculate the sum of the divisors of a given number.\n        '''\n        div_list = []\n        for i in range(1, int(math.sqrt(num))+1): \n            if num % i == 0: \n                div_list.append(i) \n                if num // i!= i: \n                    div_list.append(num // i) \n        return sum(div_list) \n\n    if sum_of_divisors(n) == n: \n        return True \n    else: \n        return False "
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = set()\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.add(i)\n            if n // i!= i:\n                divisors.add(n // i)\n    return sum(divisors) == n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # calculate the divisors of n\n    divisors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n            if i!= n//i:\n                divisors.append(n//i)\n    # calculate the sum of the divisors\n    div_sum = sum(divisors)\n    # check if the sum is equal to n\n    if div_sum == n:\n        print(\"The sum of the divisors of\", n, \"are the same as\", div_sum)\n    else:\n        print(\"The sum of the divisors of\", n, \"is different from\", div_sum)"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div1 = []\n    div2 = []\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            div1.append(i)\n            if i!= n // i:\n                div1.append(n // i)\n    \n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            div2.append(i)\n            if i!= n // i:\n                div2.append(n // i)\n    \n    return div1 == div2"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef div_sum(n):\n    \"\"\"\n    Determines if the sum of the divisors of two integers are the same.\n    \"\"\"\n    if n <= 1:\n        return False\n    \n    # calculate the sum of the divisors\n    d1 = sum(i for i in range(1, int(math.sqrt(n))+1) if n % i == 0)\n    d2 = sum(i for i in range(int(math.sqrt(n))+1, n+1) if n % i == 0)\n    \n    # check if the sums are equal\n    return d1 == d2"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # calculate sum of divisors of n \n    div_sum = sum(int(i) for i in str(n))\n\n    # calculate sum of divisors of n \n    divisor_sum = sum(i for i in range(1, int(math.sqrt(n))+1) if n % i == 0)\n\n    # compare the two sums \n    if div_sum == divisor_sum:\n        print(\"The sum of the divisors of\", n, \"is equal to the divisor sum.\")\n    else:\n        print(\"The sum of the divisors of\", n, \"is not equal to the divisor sum.\")\n"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    english_alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    count_dict = {}\n\n    # Loop through each character in the string\n    for char in str1:\n        # Convert the character to lowercase\n        char = char.lower()\n        # Check if the character is in the English alphabet\n        if char in english_alphabet:\n            # Check if the position of the character in the English alphabet has been seen before\n            if char in count_dict:\n                # Increment the count for this position\n                count_dict[char] += 1\n            else:\n                # Add the position and count to the dictionary\n                count_dict[char] = 1\n\n    # Return the dictionary of counts\n    return count_dict"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Convert the string to lowercase and split it into individual characters\n    chars = str1.lower().split('')\n\n    # Initialize a dictionary to store the count of characters at each position in the alphabet\n    counts = {chr(i): 0 for i in range(ord('a'), ord('z')+1)}\n\n    # Iterate through each character in the string\n    for char in chars:\n        # If the character is in the English alphabet, increment its count in the dictionary\n        if char in counts:\n            counts[char] += 1\n\n    # Return the count of characters at each position in the alphabet\n    return counts"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_char_position(str1):\n    # Initialize a dictionary to store the counts of each character in str1\n    char_count = {}\n    for i in range(26):\n        char_count[chr(i+97)] = 0\n    \n    # Loop through each character in str1 and increment the count in the corresponding position in the dictionary\n    for char in str1.lower():\n        if char in char_count:\n            char_count[char] += 1\n    \n    # Return the dictionary containing the counts of each character in str1 that occur at the same position in the English alphabet\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    \n    # convert the input string to lowercase\n    str1 = str1.lower()\n    \n    # initialize a dictionary to store the character counts\n    char_count = {}\n    \n    # loop through each character in the input string\n    for char in str1:\n        # if the character is an English alphabet character\n        if char.isalpha():\n            # get the position of the character in the English alphabet\n            pos = ord(char) - ord('a')\n            \n            # if the position is already in the dictionary, increment the count\n            if pos in char_count:\n                char_count[pos] += 1\n            # otherwise, add the character to the dictionary with a count of 1\n            else:\n                char_count[pos] = 1\n    \n    # return the dictionary of character counts\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_char_position(str1):\n    # convert string to lowercase to ignore case sensitivity\n    str1 = str1.lower()\n\n    # create a dictionary to store the counts of characters at each position in the string\n    char_counts = {}\n\n    # loop through each character in the string\n    for i, char in enumerate(str1):\n        # check if the character is in the English alphabet\n        if char.isalpha():\n            # get the index of the character in the English alphabet\n            index = ord(char) - ord('a')\n\n            # if the character is already in the dictionary, increment its count\n            if index in char_counts:\n                char_counts[index] += 1\n            # otherwise, add the character to the dictionary with a count of 1\n            else:\n                char_counts[index] = 1\n\n    # loop through the dictionary to count the number of occurrences of each character\n    for count in char_counts.values():\n        print(count)\n\n    # return the total count of characters in the string\n    return sum(char_counts.values())"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_char_position(str1):\n    count = 0\n    for i in range(26):\n        count += str1.lower().count(chr(ord('a')+i))\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabets = \"abcdefghijklmnopqrstuvwxyz\"\n    count = 0\n    for i in range(26):\n        if str1.lower().count(alphabets[i].lower()) > 0:\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_char_position(str1):\n    '''\n    This function takes a string as input and counts the number of characters in the string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Convert the string to lowercase for case insensitive comparison\n    str1 = str1.lower()\n\n    # Initialize a dictionary to store the frequency of each character in the English alphabet\n    freq_dict = {}\n\n    # Iterate over each character in the string\n    for char in str1:\n        # If the character is in the English alphabet, add it to the dictionary\n        if char.isalpha():\n            # If the character is already in the dictionary, increment its frequency by 1\n            if char in freq_dict:\n                freq_dict[char] += 1\n            # If the character is not in the dictionary, add it with a frequency of 1\n            else:\n                freq_dict[char] = 1\n\n    # Initialize a counter for the number of characters that occur at the same position in the string as in the English alphabet\n    count = 0\n\n    # Iterate over each character in the string\n    for char in str1:\n        # If the character is in the English alphabet, check if it occurs at the same position in the string as in the English alphabet\n        if char.isalpha() and freq_dict[char] == 1:\n            # Increment the counter\n            count += 1\n\n    # Return the counter\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    count = 0\n    \n    # Loop through each character in the string\n    for char in str1:\n        # Check if the character is in the English alphabet\n        if char.lower() in alphabet:\n            # If it is, check if it is at the same position in the English alphabet as the previous character\n            if alphabet.index(char.lower()) == alphabet.index(str1[count-1].lower()):\n                # If it is, increment the count of characters at the same position\n                count += 1\n    \n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    english_alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    count = 0\n\n    # Loop through the string\n    for char in str1:\n        # Convert the character to lowercase\n        char = char.lower()\n\n        # Check if the character is in the English alphabet\n        if char in english_alphabet:\n            # Increment the count if it is\n            if str1.count(char) > 1:\n                count += 1\n\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 0:\n                even_count += 1\n    return even_count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_even_pair(A): \n    \"\"\"\n    Counts the number of pairs of integers in a list that xor to an even number.\n    \"\"\"\n    even_sum = 0\n    count = 0\n    for i in A:\n        if i % 2 == 0:\n            even_sum += i\n        else:\n            count += 1\n    return count * (count - 1) // 2 + even_sum"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_even_pair(A): \n    count = 0 \n    for i in range(len(A)): \n        for j in range(i+1, len(A)): \n            if A[i] ^ A[j] == 0: \n                count += 1 \n    return count "
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0 and A[i] % 2 == 0 and A[j] % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor_sum = A[i] ^ A[j]\n            if xor_sum % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                even_count += 1\n    return even_count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor_result = A[i] ^ A[j]\n            if xor_result == 0:\n                count += 1\n    return count"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def next_power_of_2(n): \n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Check if n is already a power of 2\n    if n & (n-1) == 0:\n        return n\n\n    # Iterate until we find the smallest power of 2 greater than or equal to n\n    while True:\n        n += 1\n        if n & (n-1) == 0:\n            return n"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def next_power_of_2(n): \n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Initialize the variable to keep track of the current power of 2 \n    power = 1\n\n    # Loop until the current power of 2 is greater than or equal to n \n    while power < n:\n        power <<= 1\n\n    # Return the current power of 2 \n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def next_power_of_2(n): \n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n\n    # find the binary representation of n\n    binary_representation = bin(n)[2:]\n    \n    # if the binary representation starts with '1' or '0', the power of 2 is 1\n    if binary_representation[0] == '1' or binary_representation[0] == '0':\n        return 1\n    \n    # find the length of the binary representation\n    length = len(binary_representation)\n    \n    # initialize a variable to store the power of 2\n    power = 1\n    \n    # iterate over the binary representation and add 1 to the power of 2\n    for i in range(length):\n        if binary_representation[i] == '1':\n            power <<= 1\n        else:\n            break\n    \n    # add 1 to the power of 2 if the last bit is 0\n    if binary_representation[-1] == '0':\n        power += 1\n    \n    # return the power of 2\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Find the smallest power of 2 that is greater than or equal to n\n    power_of_2 = 1\n    while power_of_2 < n:\n        power_of_2 <<= 1\n\n    # Return the result\n    return power_of_2"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    if n <= 1:\n        return 2\n    elif n & (n - 1) == 0:\n        return n\n    else:\n        return 2 * (2 ** int(n.bit_length() - 1))"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n\n    # find the binary representation of n\n    binary_str = bin(n)[2:]\n\n    # calculate the number of bits in binary_str\n    num_bits = len(binary_str)\n\n    # if n is already a power of 2, then return n\n    if 2 ** num_bits == n:\n        return n\n\n    # find the smallest power of 2 that is greater than or equal to n\n    while binary_str[-1] == '0':\n        num_bits -= 1\n\n    # calculate the result as 2 ** num_bits\n    result = 2 ** num_bits\n\n    return result"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Initialize variables for the smallest power of 2 greater than or equal to n and its binary representation\n    smallest_power = n\n    power = bin(smallest_power)[2:]\n    \n    # Perform binary search to find the smallest power of 2 greater than or equal to n\n    while True:\n        # Calculate the next power of 2\n        next_power = int(power, 2) << 1\n        \n        # If the next power is greater than or equal to n, update smallest_power and break out of the loop\n        if next_power >= n:\n            smallest_power = next_power\n            break\n        \n        # Update power and repeat the binary search loop\n        power = bin(next_power)[2:]"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Set the initial value to 1 and the value to compare with\n    power = 1\n    compare = n\n\n    # Loop until we find a power of 2 greater than or equal to n\n    while compare >= n:\n        # Increase the value of power\n        power *= 2\n        # Reduce the value of compare by half of the current value of power\n        compare = compare // 2\n\n    # Return the power of 2 greater than or equal to n\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def next_power_of_2(n): \n    '''\n    This function finds the smallest power of 2 greater than or equal to n.\n    '''\n    # Initialize a variable to store the smallest power of 2 greater than or equal to n\n    smallest_power_of_2 = 1\n\n    # While smallest_power_of_2 is less than or equal to n, increment it and check if it is a power of 2\n    while smallest_power_of_2 <= n:\n        smallest_power_of_2 <<= 1\n\n    # Return the value of smallest_power_of_2\n    return smallest_power_of_2"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return 2**(int(n.bit_length() + 1))"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency(a, x): \n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for i in a: \n        if i == x: \n            count += 1 \n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency(lst, x):\n    \"\"\"\n    Given a list of numbers and a target number, returns the number of times the target number appears in the list.\n    \"\"\"\n    count = 0\n    for i in lst:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency(a,x): \n    '''\n    This function takes in a list and a number as arguments and returns the number of times the number x occurs in the list a.\n    '''\n\n    count = 0\n\n    for i in a:\n        if i == x:\n            count += 1\n\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency(a,x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency(a, x): \n    '''\n    This function takes two arguments:\n    a: the list to search through\n    x: the number to search for\n    \n    It returns the number of times x occurs in a list a.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total = 0\n    for i in range(m, n+1):\n        if i in list1:\n            total += i\n    return total"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # Check if the indices are valid\n    if m < 0 or m >= len(list1) or n < 0 or n >= len(list1):\n        return \"Invalid indices.\"\n    # Check if the range is valid\n    elif m > n:\n        return \"Invalid range.\"\n    else:\n        # Calculate the sum of numbers in the range\n        sum = 0\n        for i in range(m, n+1):\n            sum += list1[i]\n        return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # Calculate the sum of the elements in the list\n    sum_list = sum(list1[m:n+1])\n    return sum_list"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total = 0\n    for i in range(m, n+1):\n        total += list1[i-m]\n    return total"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m < 0 or n < 0 or m >= len(list1) or n >= len(list1):\n        return \"Invalid indices\"\n    else:\n        return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum_range = 0\n    for i in range(m, n+1):\n        sum_range += list1[i-1]\n    return sum_range"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # Compute the hypotenuse of a right triangle\n    hypotenuse = math.sqrt(3) * a\n    # Compute the semiperimeter of the pentagon\n    semiperimeter = 5 * a\n    # Compute the perimeter of the pentagon\n    perimeter = 5 * math.sqrt(3) * a\n    # Return the computed values\n    return round(semiperimeter, 3), round(perimeter, 3)"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a\n"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n\n    circumference = 2 * math.sqrt(3) * a\n\n    perimeter = circumference * 5\n\n    return perimeter\n"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    p = 7 * 1/2\n    return round(p, 2)"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter\n"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n\n    # Calculating the semi-perimeter\n    b = (a ** 2 + a ** 2) ** 0.5\n\n    # Calculating the area\n    area = 5 * a ** 2 / 4 * math.tan(math.pi / 5)\n\n    # Calculating the perimeter\n    perimeter = 5 * a\n\n    # Returning the perimeter\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-3):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] =='std':\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] =='std':\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] == \"std\":\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurance of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurances of the string'std' in a given string.\n    '''\n    count = 0\n    while'std' in s:\n        count += s.count('std')\n        s = s.replace('std', '')\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for char in s:\n        if char =='s' and s.find('std')!= -1:\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    index = s.find('std')\n    while index!= -1:\n        count += 1\n        index = s.find('std', index+1)\n    return count"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # Get the data type of first element in the tuple\n    data_type = type(test_tuple[0])\n    \n    # Iterate through all the elements in the tuple\n    for element in test_tuple:\n        # Check if the element has same data type or not\n        if type(element)!= data_type:\n            return False\n    \n    # If all elements have same data type then return True\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    types = set()\n    for item in test_tuple:\n        types.add(type(item))\n    return len(types) == 1"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for i in range(1, len(test_tuple)):\n        if type(test_tuple[i])!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    if not test_tuple:\n        return False\n    \n    # get the first element of the tuple\n    element_type = type(test_tuple[0])\n    \n    # check if all elements have the same data type\n    for element in test_tuple[1:]:\n        if type(element)!= element_type:\n            return False\n    \n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n\n    if not test_tuple:\n        return False\n\n    first_elem_type = type(test_tuple[0])\n    for elem in test_tuple:\n        if type(elem)!= first_elem_type:\n            return False\n\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    first_element = test_tuple[0]\n    for element in test_tuple:\n        if not isinstance(element, type(first_element)):\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # check if the length of tuple is greater than 1\n    if len(test_tuple) <= 1:\n        return False\n    # get the first element of tuple\n    first_elem = type(test_tuple[0])\n    # iterate over the remaining elements of tuple\n    for elem in test_tuple[1:]:\n        # check if the data type of each element is same as the first element\n        if type(elem)!= first_elem:\n            return False\n    # if all elements are same data type, return True\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # Check if the tuple is empty\n    if not test_tuple:\n        return True\n\n    # Get the first element of the tuple\n    first_element = type(test_tuple[0])\n\n    # Iterate over the rest of the tuple and check if the type of the element is same as first element\n    for element in test_tuple[1:]:\n        if type(element)!= first_element:\n            return False\n\n    # If all the elements have same data type, return True\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # Check if all the elements in tuple are of the same data type\n    if len(set(type(x) for x in test_tuple)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # check if the tuple is empty\n    if not test_tuple:\n        return True\n    # get the first element of the tuple\n    first_element = test_tuple[0]\n    # check if all the elements of the tuple have the same type as the first element\n    for element in test_tuple:\n        if type(element)!= type(first_element):\n            return False\n    return True"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Check whether an element is the majority element in a sorted array.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n            if count > n / 2:\n                return True\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n        if count == n // 2:\n            return True\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n            if count == n//2:\n                return True\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n            if count == n // 2:\n                return True\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n            if count > n // 2:\n                return True\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n\n    # Initialize variables\n    count = 0\n    curr_count = 0\n\n    # Iterate through the array and count the number of occurrences of the element\n    for i in range(n):\n        if arr[i] == x:\n            curr_count += 1\n        else:\n            curr_count -= 1\n\n        # If the count becomes negative, it means the element has been counted twice and is now the majority element\n        if curr_count < 0:\n            count += 1\n            curr_count = 0\n\n    # Return whether the element is the majority or not\n    return count > n // 2"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n\n    # Calculate the count of the element x\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n\n    # Check if the count is greater than n/2\n    if count > n // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n        if count > n//2:\n            return True\n    return False"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        if n % 2 == 1:\n            count += 1\n        n //= 2\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n\n    # initialize count variable to 0 \n    count = 0\n\n    # loop through each bit of the number\n    while n > 0: \n        # check if the last bit is set \n        if n % 2 == 1: \n            # increment count variable \n            count += 1\n        # shift the number to the right by 1 bit \n        n = n >> 1\n\n    # return the final count of set bits \n    return count \n"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Set_Bits(n):\n    \"\"\"\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    \"\"\"\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        if n & 1:\n            count += 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    \n    # initialize count variable to 0\n    count = 0\n    \n    # loop through each bit in the binary representation of the given number\n    for i in range(len(bin(n)[2:])): \n        # if the bit is set (1), increment count\n        if bin(n)[2:].startswith('1'): \n            count += 1\n            \n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Set_Bits(n): \n    '''\n    This function counts the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n!= 0:\n        if n % 2 == 1: # if the last digit of n is 1\n            count += 1\n        n //= 2 # remove the last digit of n and shift it to the left by 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n = n >> 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n\n    count = 0\n\n    while n:\n        count += n & 1\n        n >>= 1\n\n    return count"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = ''\n    for i in range(len(str)):\n        if i % 2 == 1:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = ''\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    return ''.join([str[i] if i % 2 == 0 else '' for i in range(len(str))])"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2!= 0:\n            new_str += str[i]\n    return new_str\n"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 1:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Remove the characters which have odd index values of a given string.\n    \"\"\"\n    return ''.join([str[i] for i in range(len(str)) if i % 2 == 0])"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    # Initialize an empty string to store the result\n    result = \"\"\n    \n    # Iterate through each character in the input string\n    for char in str:\n        # Check if the index of the character is odd\n        if len(str) % 2!= 0 and char % 2 == 1:\n            # Add the odd character to the result string\n            result += char\n    \n    # Return the result string\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return ''.join([str[i] for i in range(len(str)) if i % 2 == 0])"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Write a function to find minimum of three numbers.\n    \"\"\"\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    else:\n        if b < c:\n            return b\n        else:\n            return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    else:\n        if b < c:\n            return b\n        else:\n            return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_of_three(a, b, c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a, b, c)"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_of_three(a,b,c): \n    \"\"\"\n    This function takes three numbers as input and returns the minimum of those numbers.\n    \"\"\"\n    if a < b and a < c: \n        return a \n    elif b < a and b < c: \n        return b \n    else: \n        return c "
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Write a function to find minimum of three numbers.\n    \"\"\"\n    return min(a, b, c)"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a, b, c)"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Write a function to find minimum of three numbers.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    '''\n    This function will check whether all the bits are unset in the given range or not.\n    It returns a boolean value.\n    '''\n    # Convert the range to a binary string\n    range_binary = bin(r)[2:]\n    \n    # Calculate the number of set bits in the range\n    num_set_bits = len([bit for bit in range_binary if bit == '1'])\n    \n    # Calculate the total number of bits in the given number\n    total_bits = bin(n)[2:].zfill(len(bin(n)[2:]))\n    \n    # Return true if all the bits are set in the given range, else false\n    return num_set_bits == total_bits"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if l > r:\n        return True\n\n    # Check the bit at the leftmost position\n    if (n & (1 << l - 1)):\n        return False\n\n    # Recursive call on the left sub-range\n    return all_Bits_Set_In_The_Given_Range(n, l, r - 1)"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    all_unset = True\n    for i in range(l, r+1):\n        if bin(i)[2:].zfill(32)[::-1].find('1')!= -1:\n            all_unset = False\n            break\n    return all_unset"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n\n    # Create a binary string of n bits\n    binary_string = bin(n)[2:]\n\n    # Create a mask for the given range\n    mask = (1 << (r - l + 1)) - 1\n\n    # Check if all the bits are unset in the given range\n    if (binary_string & mask) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n\n    # Initialize the counter variable to zero\n    count = 0\n\n    # Traverse through all the bits of the number\n    for i in range(32):\n        # Check if the current bit of the number is set or not\n        if ((n >> i) & 1) == 1:\n            # If the bit is set, increment the counter variable\n            count += 1\n\n            # Check if the count exceeds the given range\n            if count > r:\n                # If yes, return False\n                return False\n\n    # If the loop completes without returning False, return True\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if l == 0 and r == 0:\n        return True\n    if n == 0:\n        return False\n    if r - l > 32:\n        return all_Bits_Set_In_The_Given_Range(n >> (r - l) & ((1 << (r - l)) - 1), l, r - l)\n    else:\n        return all_Bits_Set_In_The_Given_Range(n & ((1 << r) - 1), l, r)"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    count = 0\n    for i in range(l, r+1):\n        count += bin(i).count('1')\n    if count == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    # Initialize all the bits in the given range to 1\n    n = bin(n)[2:].zfill(r-l+1)\n\n    # Check if all the bits are 0 or 1\n    for i in range(l, r+1):\n        if n[i-l]!= '0' and n[i-l]!= '1':\n            return False\n\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n\n    # Find the maximum power of 2 less than or equal to n\n    max_pow2 = 1\n    while max_pow2 < n:\n        max_pow2 <<= 1\n\n    # Loop through all the numbers between l and r (inclusive)\n    for num in range(l, r+1):\n        # Find the binary representation of num\n        binary_num = bin(num)[2:]\n        # Add padding to binary_num so that it is of length max_pow2\n        while len(binary_num) < max_pow2:\n            binary_num = '0' + binary_num\n\n        # Convert the binary_num to an integer and set all its bits to 1\n        int_num = int(binary_num, 2)\n        int_num = int_num | ((1 << max_pow2) - 1)\n\n        # Compare the integer representation of the current number with the integer representation of l\n        if int_num == num:\n            return False\n\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if l > r:\n        return True\n    elif l == r:\n        if n & (1 << l):\n            return False\n        else:\n            return True\n    else:\n        if n & (1 << l):\n            return False\n        else:\n            return all_Bits_Set_In_The_Given_Range(n, l+1, r)"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    # create a dictionary to store the count of negative and positive elements\n    count_dict = {}\n    for num in arr:\n        if num < 0:\n            count_dict['neg'] = count_dict.get('neg', 0) + 1\n        else:\n            count_dict['pos'] = count_dict.get('pos', 0) + 1\n\n    # create a list to store the indices of negative and positive elements\n    neg_indices = []\n    pos_indices = []\n    for i, count in count_dict.items():\n        for j in range(count):\n            if i == 'neg':\n                neg_indices.append(j)\n            elif i == 'pos':\n                pos_indices.append(j)\n\n    # shuffle the negative indices and concatenate them with the positive indices\n    shuffle(neg_indices)\n    rearranged_indices = neg_indices + pos_indices\n\n    # reorder the elements of the given array using the rearranged_indices list\n    reordered_arr = [arr[i] for i in rearranged_indices]\n    return reordered_arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Step 1: Initialize two pointers (i and j) to start of the array\n    i = 0\n    j = n - 1\n    \n    # Step 2: Swap the elements pointed by i and j\n    arr[i], arr[j] = arr[j], arr[i]\n    \n    # Step 3: Loop through the array from index 1 to n-1\n    while j < len(arr) - 1:\n        # Step 4: Check if the current element is negative or positive\n        if arr[j] >= 0:\n            # Step 5: If it is positive, move j to the next index\n            j += 1\n        else:\n            # Step 6: If it is negative, swap the current element with the element pointed by j\n            arr[i], arr[j] = arr[j], arr[i]\n            # Step 7: Move i to the next index\n            i += 1\n            # Step 8: Move j to the next index\n            j += 1\n    \n    # Step 9: Reverse the first n elements of the array\n    arr[:n] = arr[:n][::-1]\n    \n    # Step 10: Return the updated array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n\n    # Initialize variables\n    neg_count = 0\n    pos_count = 0\n    neg_start = 0\n    pos_start = n\n\n    # Iterate through the array\n    for i in range(n, len(arr)):\n        if arr[i] < 0:\n            # Move negative elements to the front of the array\n            arr[neg_start], arr[i] = arr[i], arr[neg_start]\n            neg_start += 1\n            neg_count += 1\n        else:\n            # Move positive elements to the end of the array\n            arr[pos_start], arr[i] = arr[i], arr[pos_start]\n            pos_start -= 1\n            pos_count += 1\n\n    # Return the re-arranged array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # create two empty lists for negative and positive elements\n    negative_list = []\n    positive_list = []\n\n    # loop through the array and add elements to the appropriate lists\n    for num in arr:\n        if num < 0:\n            negative_list.append(num)\n        else:\n            positive_list.append(num)\n\n    # concatenate the negative and positive lists into a single list\n    combined_list = negative_list + positive_list\n\n    # loop through the combined list and sort it in ascending order\n    combined_list.sort()\n\n    # loop through the combined list and place elements in the original array\n    for i, num in enumerate(combined_list[:n]):\n        arr[i] = num"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    # Separate the positive and negative elements\n    pos = [x for x in arr[:n] if x >= 0]\n    neg = [x for x in arr[:n] if x < 0]\n\n    # Sort the negative elements in reverse order\n    neg.sort(reverse=True)\n\n    # Combine the negative and positive elements into a single list\n    result = neg + pos\n\n    # Return the modified array\n    return result"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Rearranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n\n    Args:\n        arr (list): the input array to be re-arranged\n        n (int): the number of elements to be re-arranged (must be less than or equal to the length of the array)\n\n    Returns:\n        list: the re-arranged array\n    \"\"\"\n    # check if n is less than or equal to the length of the array\n    if n > len(arr):\n        raise ValueError(\"The number of elements to be re-arranged must be less than or equal to the length of the array\")\n\n    # create two empty lists to hold the negative and positive elements, respectively\n    neg_arr = []\n    pos_arr = []\n\n    # iterate over the elements of the input array\n    for elem in arr:\n        # if the element is negative, append it to the negative array\n        if elem < 0:\n            neg_arr.append(elem)\n        # if the element is positive, append it to the positive array\n        else:\n            pos_arr.append(elem)\n\n    # combine the negative and positive arrays into a single list in a certain order\n    combined_arr = neg_arr + pos_arr\n\n    # return the re-arranged array\n    return combined_arr[:n]"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    # Initialize variables\n    count_neg = 0\n    count_pos = 0\n    current_pos = 0\n    \n    # Loop through array\n    for i in range(n):\n        # If current element is negative, increment count of negative elements\n        if arr[i] < 0:\n            count_neg += 1\n        # If current element is positive, increment count of positive elements\n        else:\n            count_pos += 1\n        \n        # If count of negative elements is less than count of positive elements, move current element to end of array\n        if count_neg < count_pos:\n            arr[i], arr[current_pos] = arr[current_pos], arr[i]\n            current_pos += 1\n        \n        # If count of negative elements is equal to or greater than count of positive elements, move current element to end of array\n        else:\n            arr[i], arr[current_pos] = arr[current_pos], arr[i]\n            current_pos += 1\n        \n        # Reset count of negative and positive elements\n        count_neg = 0\n        count_pos = 0\n    \n    # If count of negative elements is greater than count of positive elements, move the last negative element to the end of the array\n    if count_neg > count_pos:\n        for i in range(n-1, -1, -1):\n            if arr[i] < 0:\n                arr[i], arr[current_pos] = arr[current_pos], arr[i]\n                current_pos += 1\n                break\n    \n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    # create an empty list to hold negative elements\n    neg_list = []\n    \n    # loop through the array and add negative elements to the neg_list\n    for i in range(len(arr)):\n        if arr[i] < 0:\n            neg_list.append(arr[i])\n    \n    # sort the neg_list in reverse order\n    neg_list.sort(reverse=True)\n    \n    # loop through the array and add the elements to the final list\n    for i in range(n):\n        if i < len(neg_list):\n            arr[i] = neg_list[i]\n        else:\n            arr[i] = abs(neg_list[i%len(neg_list)])\n    \n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n\n    # Sort the array in descending order\n    arr.sort(reverse=True)\n\n    # Initialize two pointers, one for the negative elements and one for the positive elements\n    i = 0\n    j = 0\n\n    # Move all negative elements to the beginning of the array\n    while i < n:\n        if arr[i] < 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            j += 1\n        i += 1\n\n    # Move all positive elements to the end of the array\n    while j < len(arr):\n        if arr[j] > 0:\n            arr[j], arr[n - 1] = arr[n - 1], arr[j]\n            n -= 1\n        j += 1\n\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] < 0:\n            arr[i], arr[count] = arr[count], arr[i]\n            count += 1\n    arr[count:] = sorted(arr[count:])\n    return arr"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_blank(str1, char):\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ',char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_blank(str1, char):\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    new_str = \"\"\n    for i in range(len(str1)):\n        if str1[i]!= \" \":\n            new_str += str1[i]\n        else:\n            new_str += char\n    return new_str"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    str1 = str1.replace(\" \", char)\n    return str1"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    This function takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(\" \", char)\n"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    # use heapq to sort the list in descending order\n    heap = heapq.nlargest(n, list1)\n    # return the sorted list\n    return list(heap)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Use heapify to sort the list in descending order\n    heapq.heapify(list1)\n    # Use heapq.nlargest() to extract the top n largest elements\n    result = heapq.nlargest(n, list1)\n    return result"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for num in list1:\n        heapq.heappush(heap, num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n, list1)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef larg_nnum(lst, n):\n    '''\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if n > len(lst):\n        return lst\n    heap = []\n    for i in lst:\n        heapq.heappush(heap, i)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return [heap[0]] + heapq.nlargest(n-1, heap[1:])"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    max_heap = []\n    for num in list1:\n        if len(max_heap) < n:\n            heapq.heappush(max_heap,num)\n        else:\n            if num > max_heap[0]:\n                heapq.heappop(max_heap)\n                heapq.heappush(max_heap,num)\n    return list(max_heap)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for item in list1:\n        heapq.heappush(heap,item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # create a min heap of size n\n    min_heap = []\n    # add the first n items from the list to the heap\n    heapq.heapify(min_heap, list1[:n])\n    # add the remaining items from the list to the heap\n    for item in list1[n:]:\n        if item > min_heap[0]:\n            heapq.heappushpop(min_heap, item)\n    # return the n largest items from the heap\n    return min_heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Convert list to a min heap\n    heap = []\n    for num in list1:\n        heapq.heappush(heap, num)\n    # Extract the n largest numbers from the heap\n    result = []\n    for _ in range(n):\n        result.append(heapq.heappop(heap))\n    return result"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n, list1)"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lateralsuface_cylinder(r, h):\n    \"\"\"\n    Write a function to find the lateral surface area of a cylinder.\n    \"\"\"\n    import math\n    area = (2 * math.pi * r * h) / 3\n    return area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = 2 * r * h  # Formula for lateral surface area\n    return area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2 * r * h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2 * pi * r * h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*r*h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return (2*math.pi*r**2*h) + (2*math.pi*r*h**2)"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*math.pi*r*h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2 * r * h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Calculate the lateral surface area of the cylinder\n    lateral_surface_area = 2 * pi * r * h\n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef lateralsuface_cylinder(r, h):\n    '''\n    This function calculates the lateral surface area of a cylinder.\n    '''\n    area = math.pi * (r**2 + h**2)\n    return area"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    v = l ** 3\n    return v"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3\n"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l**3\n    return volume"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    even_bits = n & 0b11111110\n    return even_bits"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    count = 0\n    while n:\n        n &= n - 1\n        count += 1\n    return count"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_bit_set_number(n): \n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    # Find all even bits in the number\n    even_bits = [i for i in range(1, 32) if bin(n & (1 << i))[2:].count('0') % 2 == 0]\n\n    # Set each even bit in the number\n    for bit in even_bits:\n        n |= (1 << bit)\n\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n | (n-1)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # initialize an empty list to store the result\n    result = []\n    \n    # loop through each bit in the number\n    for bit in bin(n)[2:]:\n        # if the bit is even, add it to the result list\n        if int(bit) % 2 == 0:\n            result.append(int(bit))\n    \n    # join the list of bits into a single number\n    result_number = int(''.join(map(str, result)))\n    \n    # return the final result number\n    return result_number"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    # Initialize a variable to store the result\n    result = 0\n    \n    # Iterate over the bits of the input number\n    for bit in bin(n)[2:]:\n        # If the current bit is even, set it to 1; otherwise, leave it as 0\n        if int(bit) % 2 == 0:\n            result |= int(bit)\n            \n    # Return the result\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Create an empty list to store even bits\n    even_bits = []\n    # Loop through each bit in the binary representation of n\n    for i in bin(n)[2:]:\n        # If the bit is even, append it to the even_bits list\n        if int(i) % 2 == 0:\n            even_bits.append(int(i))\n    # Return the number with all even bits set to 1\n    return sum(2**i for i in even_bits)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize a variable to keep track of the even bits\n    even_bits = 0\n\n    # Iterate through the bits of the number\n    for bit in bin(n)[2:]:\n        # Check if the current bit is even\n        if int(bit) % 2 == 0:\n            # If the current bit is even, set it in the even_bits variable\n            even_bits |= 1 << (int(bit) - 1)\n    \n    # Return the final even_bits value\n    return even_bits"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    even_bits = []\n    while n > 0:\n        if n % 2 == 0:\n            even_bits.append(n)\n        n //= 2\n    return even_bits"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # create an empty string to store the binary representation of n\n    binary_str = \"\"\n    # iterate through each bit of n using a loop\n    for bit in bin(n)[2:]:\n        # if the bit is even, add it to the binary_str\n        if bit == \"0\":\n            binary_str += \"0\"\n        else:\n            binary_str += \"1\"\n    # convert the binary string to an integer and return it\n    return int(binary_str, 2)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create a dictionary to store the count of each unique tuple\n    count_dict = {}\n    # Loop through the list of tuples\n    for tup in test_list:\n        # If the tuple is not in the dictionary, add it with a count of 1\n        if tup not in count_dict:\n            count_dict[tup] = 1\n        # If the tuple is already in the dictionary, increment its count by 1\n        else:\n            count_dict[tup] += 1\n    # Return the dictionary\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create a dictionary to store the counts\n    counts = {}\n    # Loop through each tuple in the list\n    for tup in test_list:\n        # If the tuple is already in the dictionary, increment its count\n        if tup in counts:\n            counts[tup] += 1\n        # If the tuple is not in the dictionary, add it with a count of 1\n        else:\n            counts[tup] = 1\n    # Return the dictionary of counts\n    return counts"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = {}\n    for item in test_list:\n        if item not in count_dict:\n            count_dict[item] = 1\n        else:\n            count_dict[item] += 1\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = {}\n    for item in test_list:\n        if item in count_dict:\n            count_dict[item] += 1\n        else:\n            count_dict[item] = 1\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create a dictionary to store the occurrence counts\n    count_dict = {}\n    \n    # Loop through the list of tuples\n    for tup in test_list:\n        # Check if the tuple is already in the dictionary\n        if tup in count_dict:\n            # Increment the count of the tuple by 1\n            count_dict[tup] += 1\n        else:\n            # If the tuple is not in the dictionary, add it and set its count to 1\n            count_dict[tup] = 1\n    \n    # Return the dictionary of occurrence counts\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # convert the list to a set to remove duplicates\n    unique_tuples = set(test_list)\n    \n    # create a dictionary to store the counts\n    count_dict = {}\n    \n    # iterate over the unique tuples\n    for tup in unique_tuples:\n        # check if the tuple is already in the dictionary\n        if tup in count_dict:\n            # if it is, increment the count\n            count_dict[tup] += 1\n        else:\n            # if not, add it to the dictionary with a count of 1\n            count_dict[tup] = 1\n    \n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create a dictionary to store the count of each tuple\n    count_dict = {}\n    # Use the Counter class from the collections module to count the occurrences of each tuple\n    for tup in Counter(test_list):\n        count_dict[tup] = test_list.count(tup)\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create a Counter object to count the occurrences of each tuple in the list\n    count_dict = Counter(test_list)\n\n    # Convert the Counter object to a dictionary\n    result_dict = count_dict.to_dict()\n\n    return result_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create a set of unique tuples from the input list of tuples\n    unique_tuples = set(tuple(i) for i in test_list)\n    # Create a Counter object to count the occurrences of each unique tuple\n    counter = Counter(unique_tuples)\n    # Convert the Counter object to a dictionary and return it\n    return dict(counter)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter \n\ndef check_occurrences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create a dictionary to store the count of each unique tuple\n    count_dict = {}\n    # Use Counter to count the number of occurrences of each tuple in the list\n    count_dict = Counter(test_list)\n    # Return the dictionary of counts\n    return count_dict"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_of_substrings(str):\n    \"\"\"\n    Write a python function to count the number of non-empty substrings of a given string.\n    \"\"\"\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            substring = str[i:j]\n            if substring:\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n\n    # Initialize count to 0\n    count = 0\n\n    # Loop through each character in the string\n    for i in range(len(str)): \n        # If the current character is a letter, add 1 to the count\n        if str[i].isalpha(): \n            count += 1\n\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_of_substrings(str):\n    \"\"\"\n    Write a python function to count the number of non-empty substrings of a given string.\n    \"\"\"\n\n    count = 0\n    n = len(str)\n\n    for i in range(n):\n        for j in range(i+1, n+1):\n            count += 1\n\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_of_substrings(str):\n    count = 0\n    n = len(str)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            substring = str[i:j]\n            if substring!= '':\n                count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n\n    # Helper function to check if a number is prime\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True\n\n    # Helper function to generate all possible sequences of length n\n    def generate_sequences(m, n):\n        sequences = []\n        for i in range(m, m + 1, 2):\n            if is_prime(i):\n                for j in range(i*i, m, 2):\n                    if j < n:\n                        sequences.append(j)\n        return sequences\n\n    # Calculate the number of possible sequences of length n\n    count = 0\n    for i in range(1, 1 + n):\n        sequences = generate_sequences(m, i)\n        count += len(sequences)\n\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m, n):\n    total_sequences = 0\n    for i in range(m, n+1):\n        if i >= 2*total_sequences and i <= m:\n            total_sequences += 1\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m, n):\n    count = 0\n    for i in range(2, m+1):\n        if i <= 2 * (n - 1):\n            count += i\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m,n):\n    # First, find all possible sequences of length n\n    sequences = []\n    for i in range(n):\n        sequences.append([2*i+1, 2*i+2])\n    for i in range(1, n):\n        for j in range(i):\n            sequences.append([sequences[j][0], sequences[j][1]])\n            sequences.append([sequences[j][1], sequences[j][0]])\n\n    # Now, count the number of sequences that satisfy the given condition\n    count = 0\n    for sequence in sequences:\n        if sequence[0] >= sequence[1] >= 2*sequence[1]:\n            count += 1\n\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m, n):\n    def helper(arr, start, end):\n        if start == end:\n            return 1\n        total = 0\n        for i in range(start, end):\n            if arr[i] >= 2 * arr[start] and arr[i] <= m:\n                total += helper(arr, start + 1, i)\n        return total\n\n    if n == 1:\n        return m\n    else:\n        return helper([2] * n, 0, n)"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    def is_valid_sequence(seq):\n        prev = 0\n        for num in seq:\n            if num < prev * 2 or num > m:\n                return False\n            prev = num\n        return True\n    \n    def generate_sequences(n, m, prev_element, sequences):\n        if n == 0:\n            if is_valid_sequence(sequences):\n                total_sequences.append(list(sequences))\n            return\n        \n        generate_sequences(n-1, m, prev_element, sequences)\n        sequences.append(prev_element)\n        generate_sequences(n-1, m, prev_element + 1, sequences)\n        \n    total_sequences = []\n    generate_sequences(n, m, 2, [2])\n    return len(total_sequences)"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m, n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        count = 0\n        prev = 0\n        curr = 1\n        for i in range(2, n+1):\n            count += get_total_number_of_sequences(m, i-1) * get_total_number_of_sequences(m-prev, i-1)\n            prev = curr\n            curr = i\n        return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m,n):\n    count = 0\n    for i in range(m//2):\n        for j in range(i+1,m//2+1):\n            count += (m-2*j)//(j-i+1)\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m, n):\n    def helper(start, length):\n        if length == 0:\n            return 1\n        if length > n:\n            return 0\n        total = 0\n        for i in range(start, m):\n            if i >= 2 * start:\n                total += helper(i, length - 1)\n        return total\n\n    return helper(2, n)\n\nm = 10\nn = 4\nprint(get_total_number_of_sequences(m, n))"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m, n):\n    # Initialize a dictionary to store the number of sequences for each length\n    sequences_dict = {}\n    for i in range(1, n+1):\n        # Check if the length is already in the dictionary\n        if i in sequences_dict:\n            continue\n        # Initialize the number of sequences for this length\n        sequences_dict[i] = 0\n        # Iterate through the integers from 1 to m\n        for j in range(1, m+1):\n            # Check if the current integer is greater than or equal to twice the previous integer\n            if j >= 2*j:\n                # Increment the number of sequences for this length\n                sequences_dict[i] += 1\n                # Break out of the loop because the current integer is too big for this length\n                break\n    # Return the total number of sequences\n    return sum(sequences_dict.values())"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1) < len(list2):\n        list1 = list1 + [None] * (len(list2) - len(list1))\n    else:\n        list2 = list2 + [None] * (len(list1) - len(list2))\n    return list1[:-1] + list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # Get the length of the first list\n    length = len(list1)\n    # Replace the last element of the first list with the elements of the second list\n    list1[length-1:length] = list2\n    # Return the modified list\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    list1[-1] = list2\n"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    list1[-1] = list2[-1]"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # check if the lengths of the lists are equal\n    if len(list1)!= len(list2):\n        print(\"The two lists must have the same length.\")\n        return\n    else:\n        # loop through the first list and replace the last element with the elements of the second list\n        for i in range(len(list1)-1,-1,-1):\n            list1[i] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1) < len(list2):\n        list1 = list1 + [None]*(len(list2)-len(list1))\n    elif len(list2) < len(list1):\n        list2 = list2 + [None]*(len(list1)-len(list2))\n    for i in range(len(list1)-1, -1, -1):\n        list1[i] = list2[i]"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    # Check if the length of the lists are equal\n    if len(list1) == len(list2):\n        # Find the index of the last element of the first list\n        last_index = len(list1) - 1\n        # Replace the last element with the elements of the second list\n        list1[last_index] = list2\n        return list1\n    else:\n        print(\"The lists are not of equal length.\")\n        return None"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # get the length of the first list\n    n = len(list1)\n    # loop through the list and swap the last element with the elements of the second list\n    for i in range(n-1, -1, -1):\n        list1[i] = list2[i]"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in range(len(str1)):\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_characters(string):\n    \"\"\"\n    This function counts the total number of characters in a string.\n    \"\"\"\n    count = 0\n    for char in string:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    \"\"\"\n    This function takes a string as an argument and returns the total number of characters in the string.\n    \"\"\"\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count\n"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    N = int(N)\n    sqrt_N = math.sqrt(N)\n    sqrt_N_int = int(sqrt_N)\n    sqrt_N_plus_1 = sqrt_N_int + 1\n    while (sqrt_N_plus_1**2 <= N):\n        sqrt_N_plus_1 += 1\n    return sqrt_N_plus_1\n"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Find the square root of N\n    sqrtN = int(math.sqrt(N))\n    \n    # If sqrtN is odd, increment it\n    if sqrtN % 2!= 0:\n        sqrtN += 1\n    \n    # Calculate the square of sqrtN\n    square = sqrtN ** 2\n    \n    # If square is greater than N, calculate the next greater perfect square\n    while square > N:\n        sqrtN += 1\n        square = sqrtN ** 2\n    \n    # If square is less than or equal to N, calculate the next smaller perfect square\n    else:\n        sqrtN -= 1\n        square = sqrtN ** 2\n    \n    # Return the next perfect square greater than N\n    return sqrtN"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    sqrt_N = math.sqrt(N)\n    for i in range(int(sqrt_N)+1, int(math.sqrt(math.pow(2, 31)-1))+1):\n        if math.pow(i, 2) > N:\n            return i"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    while True:\n        i = int(math.sqrt(N))\n        if i * i == N:\n            return i + 1\n        else:\n            N = i + 1"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    sqrtN = int(math.sqrt(N))\n    if sqrtN * sqrtN == N:\n        return sqrtN * sqrtN * 2\n    else:\n        return (sqrtN + 1) * (sqrtN + 1)"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    def is_perfect_square(num):\n        \"\"\"\n        Helper function to check if a number is a perfect square or not.\n        \"\"\"\n        root = math.sqrt(num)\n        return root == int(root) and root * root == num\n    \n    def is_next_square(num):\n        \"\"\"\n        Helper function to check if a number is a next perfect square or not.\n        \"\"\"\n        return is_perfect_square(num + 1)\n    \n    # Find the largest perfect square number less than or equal to N\n    largest_perfect_square = 2 * N\n    while not is_perfect_square(largest_perfect_square):\n        largest_perfect_square += 1\n    \n    # Find the next perfect square greater than largest perfect square\n    next_square = largest_perfect_square\n    while not is_next_square(next_square):\n        next_square += 1\n    \n    return next_square"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    sqrt_N = math.sqrt(N)\n    sqrt_N = int(sqrt_N)\n    if sqrt_N % 2 == 0:\n        sqrt_N += 1\n    \n    while True:\n        sqrt_N += 1\n        if math.isqrt(sqrt_N) * math.isqrt(sqrt_N) == N:\n            break\n    \n    return sqrt_N"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n\n    # find the perfect square root of N\n    N_sqrt = int(math.sqrt(N))\n\n    # iterate until we find a number greater than the current square root\n    while True:\n        N_sqrt += 1\n        if is_Perfect_Square(N_sqrt) and N_sqrt > N:\n            return N_sqrt\n\ndef is_Perfect_Square(N):\n    '''\n    Check if a number is a perfect square.\n    '''\n\n    # check if N is a perfect square\n    sqrt_N = int(math.sqrt(N))\n    if sqrt_N**2 == N:\n        return True\n    else:\n        return False"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    This function takes an integer N as input and returns the next perfect square greater than N.\n    \"\"\"\n    # check if N is a perfect square\n    if N == int(N**0.5)**2:\n        # if N is a perfect square, find the next integer greater than N\n        k = 1\n        while int(N**0.5)**2 + k**2 <= N:\n            k += 1\n        # return the next perfect square greater than N\n        return int(N**0.5)**2 + k**2\n    else:\n        # if N is not a perfect square, find the next square greater than N\n        i = int(math.sqrt(N))\n        k = 1\n        while i**2 + k**2 <= N:\n            k += 1\n        return i**2 + k**2"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    # Convert input number to int and store as integer\n    N = int(N)\n    # Initialize variables for finding the next perfect square\n    square = N\n    i = 2\n    # Use a while loop to find the next perfect square greater than square\n    while square < N:\n        i += 1\n        square = i * i\n    # Return the next perfect square greater than square\n    return square\n"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    # Initialize variables for max sum and left and right pointers\n    max_sum = float('-inf')\n    left = 0\n    right = 1\n\n    # Iterate through the array and find the max sum of a bitonic subsequence\n    for i in range(n):\n        # If current element is greater than the next element\n        if arr[i] > arr[i + 1]:\n            # If the sum of the current subsequence is greater than the max sum, update max sum and left and right pointers\n            if i + 1 - left > right - i:\n                max_sum = i + 1 - left\n                left = i + 1\n            # If the sum of the current subsequence is less than or equal to the max sum, update max sum and left and right pointers\n            else:\n                max_sum = right - i\n                left = i\n        # If current element is less than the next element\n        else:\n            # If the sum of the current subsequence is greater than the max sum, update max sum and left and right pointers\n            if i + 1 - left > right - i:\n                max_sum = i + 1 - left\n                left = i + 1\n            # If the sum of the current subsequence is less than or equal to the max sum, update max sum and left and right pointers\n            else:\n                max_sum = right - i\n                left = i\n        # Move the right pointer to the next element\n        right = i + 1\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n\n    # initialize variables\n    n = len(arr)\n    max_sum_so_far = float('-inf')\n    max_sum_ending_here = 0\n\n    # iterate through the array\n    for i in range(1, n):\n        if arr[i] < arr[i - 1]:\n            # if the current element is decreasing, update the max_sum_ending_here\n            max_sum_ending_here += arr[i]\n        else:\n            # if the current element is increasing, update the max_sum_so_far and max_sum_ending_here\n            max_sum_ending_here = arr[i]\n            max_sum_so_far = max(max_sum_so_far, max_sum_ending_here)\n\n    return max_sum_so_far"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    max_sum = float('-inf')\n    prev = None\n    for i in range(n):\n        if arr[i] > prev:\n            if arr[i] + prev > max_sum:\n                max_sum = arr[i] + prev\n            prev = arr[i]\n        else:\n            if prev + arr[i] > max_sum:\n                max_sum = prev + arr[i]\n            prev = arr[i]\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    dp = [[0] * (n+1) for _ in range(2)]\n    \n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if i == j:\n                dp[0][i] = arr[i-1]\n            elif arr[i-1] < arr[j-1]:\n                dp[0][i] = max(arr[i-1] + dp[0][j-1], dp[0][i-1])\n                dp[1][i] = dp[0][i]\n            else:\n                dp[1][i] = max(arr[j-1] + dp[1][j-1], dp[1][i-1])\n                dp[0][i] = dp[1][i]\n                \n    return max(dp[0][n], dp[1][n])"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum(arr):\n    def max_bitonic_subsequence(arr):\n        n = len(arr)\n        max_sum = float('-inf')\n        prev_sum = 0\n        for i in range(n):\n            curr_sum = max(arr[i], arr[i+1])\n            if curr_sum > prev_sum:\n                max_sum = max(max_sum, curr_sum)\n            prev_sum = curr_sum\n        return max_sum\n\n    def is_bitonic(arr):\n        n = len(arr)\n        return arr[0] < arr[1] < arr[2] < arr[3] if n > 4 else arr[0] < arr[1]\n\n    max_bitonic_subsequence_arr = arr\n    max_bitonic_subsequence_sum = max_bitonic_subsequence(max_bitonic_subsequence_arr)\n    bitonic_subsequence_index = max_bitonic_subsequence_arr.index(max_bitonic_subsequence_sum)\n    while is_bitonic(max_bitonic_subsequence_arr[:bitonic_subsequence_index+1]):\n        max_bitonic_subsequence_arr.pop()\n    bitonic_subsequence = max_bitonic_subsequence_arr[:bitonic_subsequence_index+1]\n\n    bitonic_subsequence_sum = max_bitonic_subsequence(bitonic_subsequence)\n    return max(bitonic_subsequence_sum, max_bitonic_subsequence_sum)"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    if len(arr) < 2:\n        return arr[0]\n    else:\n        max_ending_here = max(arr[0], arr[1])\n        max_so_far = max_ending_here\n        for i in range(2, len(arr)):\n            if arr[i] < arr[i - 1]:\n                max_ending_here = max(max_ending_here + arr[i], arr[i])\n            else:\n                max_ending_here = arr[i]\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    dp = [[0] * n for _ in range(n)]\n\n    for i in range(n):\n        for j in range(i, n):\n            dp[i][j] = arr[i]\n            if i < j:\n                dp[i][j] += dp[i + 1][j - 1]\n\n    return max(sum(row) for row in dp)\n"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum(arr): \n    '''\n    This function takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return arr[0]\n    else:\n        max_so_far = arr[0]\n        max_ending_here = arr[0]\n        for i in range(1, n):\n            if arr[i] > arr[i-1]:\n                max_ending_here = max(max_ending_here + arr[i], arr[i])\n            else:\n                max_ending_here = max(max_ending_here - arr[i], arr[i])\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far\n"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    # Check if array is empty or contains only one element\n    if len(arr) <= 1:\n        return 0\n    \n    # Initialize variables to keep track of the maximum sum and the current sum\n    max_sum = arr[0]\n    current_sum = arr[0]\n    \n    # Loop through the array and calculate the sum of the current subsequence\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            current_sum += arr[i]\n        else:\n            current_sum = arr[i]\n        \n        # Update the maximum sum if the current sum is greater\n        max_sum = max(max_sum, current_sum)\n        \n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    dp = [0] * n\n    max_sum = float('-inf')\n\n    for i in range(n):\n        for j in range(i, n):\n            if arr[i] < arr[j]:\n                dp[j] = max(dp[j], dp[j-1] + arr[j])\n                max_sum = max(max_sum, dp[j])\n\n    return max_sum"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n\n    # Initialize the current guess and the number of iterations\n    guess = 1\n    iterations = 0\n\n    # Set a maximum number of iterations to prevent infinite loops\n    max_iterations = 10000\n\n    # Keep iterating until the square root is within the desired tolerance\n    while guess**2 > number and iterations < max_iterations:\n\n        # Update the guess and increase the number of iterations\n        guess = (guess + number/guess) / 2\n        iterations += 1\n\n    # If the square root is within the desired tolerance, return it\n    if guess**2 == number:\n        return guess\n\n    # If the square root is not within the desired tolerance, return None\n    return None"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # find the square root using the babylonian method\n    x = 1\n    y = number / x\n    while abs(y - x) > 0.0001:\n        x = y\n        y = number / x\n    return x"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2\n    prev_guess = 0\n\n    while abs(prev_guess - guess) > 0.0001:\n        prev_guess = guess\n        guess = (guess + number / guess) / 2\n\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Compute the square root of a number using the babylonian method.\n\n    :param number: the number for which we want to compute the square root\n    :return: the square root of the given number\n    \"\"\"\n    tolerance = 1e-6\n    guess = number / 2\n    while abs(guess**2 - number) > tolerance:\n        guess = (guess + number/guess) / 2\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Computes square roots using the babylonian method.\n\n    :param number: The number whose square root is to be found.\n    :type number: int or float\n\n    :return: The square root of the given number.\n    :rtype: float\n    \"\"\"\n\n    # Use babylonian method to find square root\n    x = number\n    y = (x + number/x) / 2\n    n = 0\n\n    while abs(y - x) > 1e-10:\n        n += 1\n        x = y\n        y = (x + number/x) / 2\n\n    print(f\"Number of iterations: {n}\")\n\n    return y"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Compute the square root of a number using the babylonian method.\n\n    Args:\n    number (int): The number whose square root is to be found.\n\n    Returns:\n    float: The square root of the input number.\n    \"\"\"\n    # Initialize a variable to store the guess for the square root\n    guess = number / 2\n    \n    # Initialize the iteration counter\n    i = 0\n    \n    # Loop until the difference between the guess and the square of the guess is less than or equal to the tolerance\n    while abs(guess * guess - number) > 0.00001:\n        # Increment the iteration counter\n        i += 1\n        \n        # Compute the next guess for the square root\n        guess = (number / guess) + guess\n        \n        # Print the current guess for the square root\n        print(\"Iteration\", i, \":\", guess)\n    \n    # Print the final guess for the square root\n    print(\"Final guess:\", guess)\n    \n    # Return the final guess\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # Initialize variables\n    guess = 1\n    delta = 0.00001\n\n    # Main loop\n    while delta > 0.00001:\n        new_guess = (guess + number / guess) / 2\n        guess = new_guess\n        delta = abs(guess - new_guess)\n\n    # Return the final value of guess\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    a = 1\n    b = number\n    c = b/2\n    while c**2 > a:\n        a = b\n        b = c\n        c = (b+number/b)/2\n    return c"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    old_guess = number / 2\n    new_guess = (old_guess + number / old_guess) / 2\n    while abs(old_guess - new_guess) > 0.000001:\n        old_guess = new_guess\n        new_guess = (old_guess + number / old_guess) / 2\n    return new_guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # initial guess\n    x = 1\n\n    while True:\n        # calculate the next guess\n        x_new = (x + number / x) / 2\n\n        # check if the difference between the old and new guess is less than a tolerance\n        if abs(x_new - x) < 0.00001:\n            break\n\n        # update the old guess\n        x = x_new\n\n    return x"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lps(s):\n    \"\"\"\n    This function finds the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    n = len(s)\n    # Create a 2D table to store the length of LPS ending at each index\n    table = [[0] * n for _ in range(n)]\n\n    # Fill the table in bottom up manner\n    max_len = 1\n    for i in range(1, n):\n        for j in range(i):\n            if s[i] == s[j]:\n                # If characters are same, expand LPS by 1\n                table[i][j] = table[i-1][j-1] + 2\n                if table[i][j] > max_len:\n                    max_len = table[i][j]\n            else:\n                # If characters are different, expand LPS by 0\n                table[i][j] = max(table[i-1][j], table[i][j-1])\n\n    return max_len"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    \n    n = len(str) \n    L = [[0] * n for i in range(n)] \n    max_len = 1 \n    start = 0 \n    for i in range(1, n): \n        for j in range(i): \n            if str[i] == str[j]: \n                L[i][j] = L[j][i-1] + 2\n                if L[i][j] > max_len: \n                    max_len = L[i][j] \n                    start = i-L[i][j]+1\n            else: \n                L[i][j] = max(L[i][j-1], L[j][i]) \n    return max_len"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lps(str): \n    n = len(str) \n    # Create a 2D table to store lengths of longest palindromic subsequences of all substrings \n    # of length i. \n    L = [[0] * n for i in range(n)] \n    # All substrings of length 1 are palindromes. \n    for i in range(n): \n        L[i][i] = 1 \n    # Check for substrings of length 2 to n. \n    for length in range(2, n+1): \n        # Check for substrings of length 'length' from i. \n        for i in range(n-length+1): \n            j = i + length - 1 \n            # Check if the substring is palindrome or not. \n            if str[i] == str[j]: \n                L[i][j] = 2 + L[i+1][j-1] \n            # If the substring is not palindrome, then it is a part of the longest palindromic subsequence. \n            else: \n                L[i][j] = max(L[i][j-1], L[i+1][j]) \n    return L[0][n-1] "
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lps(s):\n    \"\"\"\n    This function takes a string as input and returns the length of the longest palindromic subsequence in the string.\n    \"\"\"\n    # Create a table to store the length of longest palindromic subsequence ending at each index\n    dp = [[0] * len(s) for _ in range(len(s))]\n    \n    # Initialize the base cases for first and last characters\n    dp[0][0] = 1\n    dp[0][1] = 0\n    \n    # Fill the table using dynamic programming\n    for i in range(2, len(s)):\n        if s[i] == s[i-1]:\n            dp[i][i] = dp[i-1][i-1] + 1\n        else:\n            dp[i][i] = max(dp[i-1][i], dp[i-1][i-1])\n    \n    # Return the length of the longest palindromic subsequence ending at the last index\n    return dp[-1][-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lps(s):\n    \"\"\"\n    Given a string, return the length of the longest palindromic subsequence in it.\n\n    Time Complexity: O(n^2)\n    Space Complexity: O(n^2)\n    \"\"\"\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n\n    for i in range(n):\n        dp[i][i] = 1\n\n    for length in range(3, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if s[i] == s[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n\n    return dp[0][n - 1]\n"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    dp = [[0] * n for _ in range(n)]\n    max_len = 1\n    start = 0\n\n    for i in range(n):\n        dp[i][i] = 1\n\n        if i < n-1 and str[i] == str[i+1]:\n            dp[i][i+1] = 1\n            max_len = 2\n            start = i\n\n    for length in range(3, n+1):\n        for i in range(n-length+1):\n            j = i + length - 1\n            if str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n\n                if dp[i][j] > max_len:\n                    max_len = dp[i][j]\n                    start = i\n\n    return max_len, str[start:start+max_len]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lps(string):\n    n = len(string)\n    # Initialize two variables to store the length of the longest palindromic subsequence ending at each index\n    max_len = 1\n    max_ending_index = 0\n\n    # Loop through each index of the string\n    for i in range(n):\n        # Check if the character at the current index is odd or even\n        if i < n//2:\n            # If it is even, check if the current character is part of the palindrome on the left\n            left_index = 2*max_ending_index - i - 1\n            if left_index >= 0 and string[left_index] == string[i]:\n                max_len = max(max_len, i - left_index)\n            # If it is odd, check if the current character is part of the palindrome on the right\n            right_index = 2*max_ending_index - i\n            if right_index < n and string[right_index] == string[i]:\n                max_len = max(max_len, i - right_index)\n        else:\n            # If it is odd, check if the current character is part of the palindrome on the left\n            left_index = 2*max_ending_index - i\n            if left_index >= 0 and string[left_index] == string[i]:\n                max_len = max(max_len, i - left_index)\n            # If it is even, check if the current character is part of the palindrome on the right\n            right_index = 2*max_ending_index - i - 1\n            if right_index < n and string[right_index] == string[i]:\n                max_len = max(max_len, i - right_index)\n\n    return max_len"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lps(str):\n    n = len(str)\n    # Initialize an empty list to store the length of longest palindromic subsequences ending at each index\n    lps_list = []\n    # Initialize a variable to store the length of the longest palindromic subsequence found so far\n    max_length = 1\n    # Iterate through the string\n    for i in range(n):\n        # Initialize two variables to store the starting and ending index of the longest palindromic subsequence ending at index i\n        start = end = i\n        # Check for palindromic subsequences ending at index i\n        while start >= 0 and end < n and str[start] == str[end]:\n            # Update the length of the longest palindromic subsequence found so far if this subsequence is longer than the current maximum\n            if end-start+1 > max_length:\n                max_length = end-start+1\n                # Update the start and end indices of the longest palindromic subsequence found so far\n                start_index = start\n                end_index = end\n            # Move the starting index to the left\n            start -= 1\n            # Move the ending index to the right\n            end += 1\n        # Add the length of the longest palindromic subsequence ending at index i to the lps_list\n        lps_list.append(max_length)\n    # Return the length of the longest palindromic subsequence found so far\n    return max_length\n"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    # initialize variables to store the longest palindromic subsequence length and index of the first element of that subsequence\n    longest_palindromic_subsequence_length = 1\n    longest_palindromic_subsequence_start = 0\n    \n    # loop through the string and find the longest palindromic subsequence\n    for i in range(1, len(str)): \n        # check if the current character is a palindrome\n        if str[i-1] == str[i]: \n            # if it is, check if it is the longest palindromic subsequence so far\n            if i+1 > longest_palindromic_subsequence_length: \n                longest_palindromic_subsequence_length = i+1\n                longest_palindromic_subsequence_start = i-i+1\n    \n    # return the length of the longest palindromic subsequence\n    return longest_palindromic_subsequence_length"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lps(str): \n    n = len(str) \n  \n    # Create a 2D table to store the length of longest \n    # palindromic subsequence ending at each index \n    L = [[0 for j in range(n)] for i in range(n)] \n  \n    # Initialize L[i][i] as 1 for all indices i \n    for i in range(n): \n        L[i][i] = 1 \n  \n    # Fill in L[i][j] for all i, j such that str[i] == str[j] \n    for i in range(1, n): \n        if str[i] == str[i-1]: \n            L[i][i] = 1\n        else: \n            L[i][i] = 0 \n  \n    # Fill in L[i][j] for all i, j such that str[i]!= str[j] \n    for length in range(3, n+1): \n        for i in range(n-length+1): \n            j = i + length - 1 \n            if str[i] == str[j] and length > L[i+1][j-1]: \n                L[i][j] = length + 2\n            else: \n                L[i][j] = L[i][j-1] \n  \n    # Return the length of the longest palindromic subsequence \n    return L[0][n-1] "
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(1, n):\n        harmonic_sum += 1/i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum_n = 0\n    for i in range(1, n):\n        sum_n += 1/i\n    return sum_n"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (1/n + 1/n**2 +... + 1/n**(n-1))**n"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # Initialize variables for the harmonic sum and the denominator\n    harmonic_sum = 0\n    denominator = n\n    \n    # Calculate the harmonic sum using the formula for the sum of a sequence of harmonic numbers\n    for i in range(1, n):\n        harmonic_sum += 1/i\n    \n    # Calculate the harmonic sum using the formula for the sum of n^2\n    for i in range(1, n):\n        harmonic_sum += i*i\n    \n    # Divide the harmonic sum by the denominator to get the actual sum of n-1\n    actual_sum = harmonic_sum/denominator\n    \n    # Return the actual sum of n-1\n    return actual_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 2 * n - 1"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # Initialize sum to 0\n    sum = 0\n    # Loop n-1 times\n    for i in range(n-1):\n        # Add 1/(i+1) to sum\n        sum += 1/float(i+1)\n    # Return harmonic sum\n    return sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return n * (n-1)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    This function takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (n*(n-1))//2"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n\n    harmonic_sum = 0\n    for i in range(n-1):\n        harmonic_sum += 1/i\n    \n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 1/n*(1/n-1/2+1/3-1/4+...)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    This function takes in two arrays as arguments and returns a new array containing only the elements that are present in both arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Using a set to store unique elements in array_nums1\n    set1 = set(array_nums1)\n    # Using a set to store unique elements in array_nums2\n    set2 = set(array_nums2)\n    # Finding the intersection of set1 and set2 using a set intersection\n    intersection = set1.intersection(set2)\n    # Converting the intersection set back to a list and returning it\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n\n    # Create two dictionaries to store the frequency of each element in the arrays\n    freq_dict1 = {}\n    freq_dict2 = {}\n\n    # Iterate through each element in the first array and increment its frequency in the first dictionary\n    for num in array_nums1:\n        freq_dict1[num] = freq_dict1.get(num, 0) + 1\n\n    # Iterate through each element in the second array and increment its frequency in the second dictionary\n    for num in array_nums2:\n        freq_dict2[num] = freq_dict2.get(num, 0) + 1\n\n    # Find the intersection of the two dictionaries by iterating through the keys in freq_dict1 and checking if they are also in freq_dict2\n    intersection = []\n    for key in freq_dict1:\n        if key in freq_dict2 and freq_dict1[key] == freq_dict2[key]:\n            intersection.append(key)\n\n    # Return the intersection as a sorted list\n    return sorted(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # create a set of all elements in the first array\n    set_nums1 = set(array_nums1)\n    # create a set of all elements in the second array\n    set_nums2 = set(array_nums2)\n    # find the intersection of the two sets\n    intersection = set_nums1.intersection(set_nums2)\n    # convert the intersection set back to a list and return it\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    array_nums1 = list(set(array_nums1))\n    array_nums2 = list(set(array_nums2))\n    intersection = list(set(array_nums1) & set(array_nums2))\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    common_set = set(array_nums1) & set(array_nums2)\n    return list(common_set)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # create a set of elements from the first array\n    set1 = set(array_nums1)\n    # create a set of elements from the second array\n    set2 = set(array_nums2)\n    # find the intersection of the two sets\n    intersection = set1.intersection(set2)\n    # convert the intersection set to a list and return it\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Find the intersection of two arrays.\n    \"\"\"\n    # Create a set of the first array to get unique values\n    set_nums1 = set(array_nums1)\n\n    # Create an empty list to store the intersection values\n    intersection_list = []\n\n    # Iterate through the second array and check if each value is in the set of first array\n    for num2 in array_nums2:\n        if num2 in set_nums1:\n            intersection_list.append(num2)\n\n    return intersection_list"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # create a set from the second array to remove duplicates\n    array_nums2_set = set(array_nums2)\n    # create a set to store the intersection of the two arrays\n    intersection_set = set()\n    # loop through each element in the first array\n    for num in array_nums1:\n        # if the number is in the second array's set, add it to the intersection set\n        if num in array_nums2_set:\n            intersection_set.add(num)\n    # convert the intersection set back to a list and return it\n    return list(intersection_set)"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_X(tup, x):\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_X(tup, x):\n    '''\n    This function takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in list:\n        new_list.append(element)\n        new_list.append(i)\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.append(list[i])\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for item in list:\n        result.append(item)\n        result.insert(0,element)\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def insert_element(lst, elem):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    return [elem] + lst[:-1] + [lst[-1]]"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for i in range(len(list)):\n        list.insert(i, element)\n    return list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def insert_element(lst, element):\n    \"\"\"\n    This function takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    for i in range(len(lst)):\n        lst.insert(i, element)\n    return lst"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i, item in enumerate(list):\n        result.append(element)\n        result.append(item)\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return [element] + list[:-1] + [element] + list[-1:]\n"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    new_list = []\n    for item in list:\n        new_list.append(item)\n        new_list.append(element)\n    return new_list"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    # Initialize variables to store the real and imaginary parts of the input numbers\n    real = []\n    imag = []\n\n    # Loop through each number in the input list\n    for num in numbers:\n        # If the number is a complex number, extract its real and imaginary parts\n        if isinstance(num, complex):\n            real.append(num.real)\n            imag.append(num.imag)\n        # If the number is a regular number, convert it to a complex number and store its real and imaginary parts\n        else:\n            real.append(num)\n            imag.append(0)\n    \n    # Initialize variables to store the magnitude and angle of each complex number\n    mag = []\n    theta = []\n\n    # Loop through each pair of real and imaginary parts in the input lists\n    for r, i in zip(real, imag):\n        # Calculate the magnitude and angle of the complex number\n        mag.append(abs(cmath.sqrt(r**2 + i**2)))\n        theta.append(cmath.phase(complex(r, i)))\n    \n    # Return the list of magnitudes and angles in a dictionary\n    return dict(zip(numbers, mag))"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    complex_numbers = []\n    for number in numbers:\n        complex_numbers.append(cmath.rect(number))\n    return complex_numbers"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        if isinstance(num, complex):\n            r = abs(num)\n            phi = cmath.phase(num)\n            print(f\"({r}, {phi*180/cmath.pi})\")\n        else:\n            print(\"Invalid input. Please enter complex numbers.\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    This function takes a list of complex numbers as input and returns a list of tuples containing the magnitude and angle of the corresponding complex number in polar coordinates.\n    '''\n    polar_coordinates = []\n    for num in numbers:\n        magnitude = cmath.sqrt(num.real**2 + num.imag**2)\n        angle = cmath.phase(num)\n        polar_coordinates.append((magnitude, angle))\n    return polar_coordinates"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    # Create an empty list to store the polar coordinates\n    polar_coordinates = []\n\n    # Loop through each complex number in the input list\n    for number in numbers:\n        # Calculate the modulus and argument of the complex number\n        modulus = abs(number)\n        argument = cmath.phase(number)\n\n        # Add the polar coordinate to the list\n        polar_coordinates.append((modulus, argument))\n\n    # Return the list of polar coordinates\n    return polar_coordinates"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    # initialize variables\n    result = []\n\n    for num in numbers:\n        # convert to polar coordinates\n        angle = cmath.phase(num)\n        mag = abs(num)\n\n        # append to result list\n        result.append((angle, mag))\n\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        real, imag = num\n        magnitude = cmath.sqrt(real**2 + imag**2)\n        angle = cmath.phase(num)\n        print(f\"Polar coordinates: {magnitude:.2f} magnitude and {angle:.2f} angle\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_coordinates = []\n    for number in numbers:\n        # Convert the complex number to polar coordinates\n        real, imag = cmath.polar(number)\n        # Add the polar coordinates to the list\n        polar_coordinates.append((real, imag))\n    return polar_coordinates"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_coordinates = []\n    for number in numbers:\n        # Convert the complex number to polar coordinates\n        r = abs(number)\n        theta = cmath.phase(number)\n        \n        # Add the polar coordinates to a list\n        polar_coordinates.append((r, theta))\n        \n    return polar_coordinates"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    This function takes a list of complex numbers as input and returns a list of \n    polar coordinates. The polar coordinates are obtained by taking the magnitude of the \n    complex numbers and the argument of the complex numbers in the form of a tuple.\n    '''\n    polar_numbers = []\n    for num in numbers:\n        mag = cmath.sqrt(num.real**2 + num.imag**2)\n        arg = cmath.phase(num)\n        polar_numbers.append((mag, arg))\n    return polar_numbers"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_integer(lst):\n    \"\"\"\n    Returns the number of integer elements in a given list.\n    \"\"\"\n    count = 0\n    for item in lst:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_integer(lst):\n    count = 0\n    for i in lst:\n        if type(i) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_integer(lst):\n    count = 0\n    for item in lst:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_integer(lst):\n    count = 0\n    for element in lst:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_integer(list1):\n    \"\"\"\n    Write a python function that returns the number of integer elements in a given list.\n    \"\"\"\n    count = 0\n    for element in list1:\n        if type(element) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_integer(lst):\n    \"\"\"\n    This function returns the number of integer elements in a given list.\n    \"\"\"\n    count = 0\n    for item in lst:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_integer(lst):\n    count = 0\n    for item in lst:\n        if type(item) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    This function takes a list as input and returns the count of integer elements in the list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    if n > len(l):\n        return []\n    for i in range(len(l)-n+1):\n        yield tuple(l[i:i+n])\n"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combinations = []\n    for i in range(len(l) - n + 1):\n        combination = tuple(l[i:i+n])\n        combinations.append(combination)\n    return combinations"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # Generate all combinations of length n\n    for i in range(1, len(l)+1):\n        for comb in combinations_with_replacement(l, i):\n            # Check if each combination has all colors\n            if len(set(comb)) == n:\n                # If yes, append the tuple of combination to the result list\n                result.append(tuple(comb))\n    return result"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combs = combinations_with_replacement(l, n)\n    return list(combs)"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        if all(i % j!= 0 for j in range(2, int(i**0.5) + 1)):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_prime(num):\n    '''\n    Function to check if a given number is prime or not.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    count = 0\n    for num in range(2, n):\n        is_prime = True\n        for i in range(2, num):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n+1):\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                break\n        else:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_prime(num):\n    \"\"\"\n    This function returns True if the given number is prime, else False\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    \"\"\"\n    This function takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n+1):\n        if all(i%j!=0 for j in range(2, int(i**0.5)+1)):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    count = 0\n    for i in range(2, n+1):\n        if is_prime(i):\n            count += 1\n    return count\n\nprint(count_Primes_nums(10))"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n+1):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_numbers(a,b):\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_numbers(a, b):\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_numbers(a, b):\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_numbers(a, b):\n    return (b, a)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    \n    # check if both tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        return None\n    \n    # create a dictionary to store the elements and their indices\n    dict_tup1 = {}\n    dict_tup2 = {}\n    \n    # loop through the tuples and add their elements to the dictionary\n    for i in range(len(test_tup1)):\n        dict_tup1[test_tup1[i]] = i\n        dict_tup2[test_tup2[i]] = i\n    \n    # loop through the keys of the dictionaries and compare them\n    for key in dict_tup1:\n        if key > dict_tup2[key]:\n            return test_tup1\n    \n    # if the keys are the same, return the tuple with the highest value\n    for key in dict_tup2:\n        if key > dict_tup1[key]:\n            return test_tup2\n    \n    # if the keys are also the same and the values are the same, return None\n    return None"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Check if both tuples are of the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples must have the same length.\")\n        return\n    \n    # Initialize the maximum values\n    max1 = 0\n    max2 = 0\n    \n    # Loop through the tuples and compare the values\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            max1 = test_tup1[i]\n        else:\n            max1 = test_tup2[i]\n        \n        if test_tup1[i] > max2:\n            max2 = test_tup1[i]\n        elif test_tup2[i] > max2:\n            max2 = test_tup2[i]\n            \n    # Return the maximum values as a tuple\n    return (max1, max2)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('Tuples must have the same length.')\n    \n    max_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            max_tup += (test_tup1[i],)\n        else:\n            max_tup += (test_tup2[i],)\n    \n    return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = ()\n    max_value = 0\n    for tup in (test_tup1, test_tup2):\n        if len(tup) > len(max_tup):\n            max_tup = tup\n            max_value = max(tup)\n    return max_value"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Find the length of both tuples\n    length1 = len(test_tup1)\n    length2 = len(test_tup2)\n    \n    # Check if the first tuple is longer than the second\n    if length1 > length2:\n        # Find the length of the longer tuple\n        longest_length = length1\n    else:\n        # Find the length of the shorter tuple\n        longest_length = length2\n        \n    # Initialize the max_tuple with zeros\n    max_tuple = [0] * longest_length\n    \n    # Initialize the index to start at the end of the longer tuple\n    index = longest_length - 1\n    \n    # Loop through the longer tuple from the end\n    while index >= 0:\n        # Check if the element at the current index is greater than the current max element\n        if test_tup1[index] > test_tup2[index]:\n            # Update the max element\n            max_tuple[index] = test_tup1[index]\n        else:\n            # Update the max element\n            max_tuple[index] = test_tup2[index]\n        \n        # Decrement the index\n        index -= 1\n        \n    # Return the max_tuple\n    return max_tuple"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n    \"\"\"\n    # Initialize the max tuple with the first element\n    max_tuple = (test_tup1[0],)\n    \n    # Loop through the tuple elements and compare each one with the max tuple element\n    for element in test_tup2:\n        if element > max_tuple[0]:\n            max_tuple = (element,)\n    \n    # Return the max tuple\n    return max_tuple"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Get the maximum sum of the two tuples\n    max_sum = max(test_tup1[0]+test_tup2[0], test_tup1[1]+test_tup2[1])\n    \n    # If the maximum sum is the same as the sum of the two tuples, return the tuple with the higher value\n    if max_sum == test_tup1[0]+test_tup2[0]:\n        return test_tup1 if test_tup1[0] > test_tup2[0] else test_tup2\n    else:\n        return test_tup2 if test_tup1[1] > test_tup2[1] else test_tup1\n        \n"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max1, max2 = test_tup1\n    for i in test_tup2:\n        if i > max1:\n            max1 = i\n        elif i > max2:\n            max2 = i\n    return max1, max2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Check if both tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples should have the same length.\")\n    # Convert tuples to lists\n    test_tup1 = list(test_tup1)\n    test_tup2 = list(test_tup2)\n    # Initialize maximum value to None\n    max_value = None\n    # Loop through the tuples\n    for i in range(len(test_tup1)):\n        # Check if the current element is greater than the maximum value\n        if test_tup1[i] > test_tup2[i]:\n            # If it is, update the maximum value\n            max_value = test_tup1[i]\n        else:\n            # If not, update the maximum value\n            max_value = test_tup2[i]\n    # Return the maximum value\n    return max_value"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def newman_prime(n): \n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    if n < 0:\n        print(\"Please enter a non-negative integer.\")\n        return\n    \n    i = 2\n    while True:\n        if is_prime(i):\n            count = 0\n            j = 2\n            while j < i:\n                if i % j == 0:\n                    count += 1\n                    j += 1\n                else:\n                    j += 1\n            \n            if count == 3:\n                print(\"The\", n, \"th newman\u2013shanks\u2013williams prime number is:\", i)\n                break\n        i += 1\n\ndef is_prime(n): \n    \"\"\"\n    Determine if a number is prime.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    # Check if n is even\n    if n % 2 == 0:\n        return None\n    \n    # Initialize variables\n    is_prime = True\n    num = 3\n    \n    # Check for primes up to sqrt(n)\n    while is_prime and num <= n**0.5:\n        if n % num == 0:\n            is_prime = False\n        else:\n            num += 2\n            \n    # If is_prime is True, n is a newman\u2013shanks\u2013williams prime\n    if is_prime:\n        return num\n    else:\n        return None"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n\n    # Starting with 2, check if it's a newman prime\n    if n == 2:\n        return 2\n\n    # Check if it's already a prime\n    if is_prime(n):\n        return n\n\n    # Check if the square root of n is an integer\n    sqrt_n = int(n**0.5)\n    if sqrt_n**2 == n:\n        return sqrt_n\n\n    # Otherwise, iterate until we find a newman prime\n    i = 3\n    while True:\n        if i > sqrt_n:\n            return i\n        elif is_prime(i) and is_prime(i*i) and is_prime(i*i+2):\n            return i\n        i += 2\n\ndef is_prime(n):\n    '''\n    Write a function to check if a number is prime.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    def is_prime(n): \n        '''\n        Helper function to check if a number is prime or not.\n        '''\n        if n < 2: \n            return False\n        for i in range(2, int(n**0.5) + 1): \n            if n % i == 0: \n                return False\n        return True\n\n    def next_prime(n): \n        '''\n        Helper function to find the next prime number greater than n.\n        '''\n        while True: \n            n += 1\n            if is_prime(n): \n                return n\n\n    def newman_prime_helper(k): \n        '''\n        Main function to find the nth newman\u2013shanks\u2013williams prime number.\n        '''\n        if k < 1: \n            return None\n        if k == 1: \n            return 2\n        for i in range(3, 10**9): \n            if is_prime(i): \n                if is_prime(i - 2) and is_prime(i - 3) and is_prime(i - 5): \n                    return i\n\n    return newman_prime_helper(n)"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n\n    # Define the prime numbers\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]\n\n    # Initialize the count of prime numbers\n    count = 0\n\n    # Iterate through the list of primes\n    for prime in primes:\n        # Check if the current prime number is greater than n\n        if prime > n:\n            break\n        # If the current prime number is greater than or equal to n, increment the count\n        elif prime >= n:\n            count += 1\n\n    # Return the count of prime numbers\n    return count"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    is_prime = [True] * (n + 1)\n    is_prime[0], is_prime[1] = False, False\n\n    for i in range(2, int(n**0.5) + 1):\n        if is_prime[i]:\n            for j in range(i*i, n + 1, i):\n                is_prime[j] = False\n\n    prime_nums = []\n    for i in range(2, n + 1):\n        if is_prime[i]:\n            prime_nums.append(i)\n\n    return prime_nums"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n\n    # check if n is an integer\n    if not isinstance(n, int):\n        return 'Input must be an integer.'\n\n    # initialize variables\n    count = 0\n    i = 2\n\n    # loop through numbers until the desired prime is found\n    while count < n:\n        if is_prime(i):\n            count += 1\n        i += 1\n\n    # if the desired prime was not found, return None\n    if count == n:\n        return i - 1\n    else:\n        return None\n\ndef is_prime(n):\n    '''\n    Check if a number is prime.\n    '''\n\n    # check if n is less than 2\n    if n < 2:\n        return False\n\n    # check if n is divisible by any number less than itself\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n\n    return True"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    def is_newman_prime(n):\n        \"\"\"\n        Helper function to check if a number is newman-prime.\n        \"\"\"\n        if n < 2:\n            return False\n\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n\n        return True\n\n    def find_newman_prime(n):\n        \"\"\"\n        Helper function to find the nth newman-prime number.\n        \"\"\"\n        count = 0\n        num = 1\n\n        while count < n:\n            if is_newman_prime(num):\n                count += 1\n            num += 1\n\n        return num\n\n    return find_newman_prime(n)\n"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n\n    # initialize variables\n    count = 0\n    prime = 2\n    \n    # loop through all odd numbers until count reaches n\n    while count < n:\n        # check if the number is prime\n        if is_prime(prime):\n            count += 1\n        prime += 2\n    \n    # if count is equal to n, the nth newman\u2013shanks\u2013williams prime number has been found\n    return prime\n\ndef is_prime(num):\n    '''\n    Write a helper function to check if a number is prime.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n\n    # Function to check if a number is prime or not\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    # Initializing variables\n    count = 0\n    i = 2\n\n    # Looping through the numbers starting from 2\n    while count < n:\n        # Checking if the number is prime\n        if is_prime(i):\n            # Incrementing the count if the number is prime\n            count += 1\n        i += 1\n\n    # Returning the nth newman-shanks-williams prime number\n    return i - 1"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Check if the tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples must have the same length.\")\n        return\n    \n    # Perform element-wise division\n    result_tup = tuple(x/y for x,y in zip(test_tup1, test_tup2))\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Check if the length of the two tuples is equal\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('Both tuples must have the same length.')\n\n    # Perform element-wise division\n    result_tup = tuple(elem1/elem2 for elem1, elem2 in zip(test_tup1, test_tup2))\n\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples must have the same length.\")\n        return\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] / test_tup2[i],)\n    return result"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple(map(lambda x, y: x/y, test_tup1, test_tup2))"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # check if the length of the tuples are equal\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('The length of the two tuples should be equal')\n\n    # create a new tuple with element-wise division of the two tuples\n    result_tup = tuple(test_tup1[i]/test_tup2[i] for i in range(len(test_tup1)))\n\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] / test_tup2[i])\n    return result"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) % L!= 0:\n        return None\n    mid = len(list1) // 2\n    part1 = list1[:mid]\n    part2 = list1[mid:]\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    length1 = L\n    length2 = len(list1) - L\n    list2 = list1[length1:]\n    list1 = list1[:length1]\n    return (list1, list2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # split the list into two parts\n    part1 = list1[:L]\n    part2 = list1[L:]\n    # return the two parts as a tuple\n    return part1, part2"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    length = len(list1)\n    if L <= length:\n        return list1[:L], list1[L:]\n    else:\n        return list1, []"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Create an empty list for the first part of the list\n    part1 = []\n    # Create an empty list for the second part of the list\n    part2 = []\n    \n    # Iterate through the input list and add elements to the corresponding part of the list\n    for i in range(len(list1)):\n        # If the length of the current element is equal to L, add it to the first part of the list\n        if len(list1[i]) == L:\n            part1.append(list1[i])\n        # Otherwise, add it to the second part of the list\n        else:\n            part2.append(list1[i])\n            \n    # Return the resulting lists in a tuple\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) <= L:\n        raise ValueError(\"List cannot be split into two parts with a length less than or equal to the length of the input list.\")\n    first_part = list1[:L]\n    second_part = list1[L:]\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_two_parts(lst, L):\n    '''\n    This function takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    n = len(lst)\n    mid = n // 2\n    part1 = lst[:mid]\n    part2 = lst[mid:]\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    \"\"\"\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    \"\"\"\n    if L > len(list1):\n        raise ValueError(\"The length of the first part of the list cannot be greater than the length of the list.\")\n    elif L == 0:\n        raise ValueError(\"The length of the first part of the list cannot be zero.\")\n    else:\n        return (list1[:L], list1[L:])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if L >= len(list1):\n        return (list1[:L], [])\n    elif L <= 0:\n        return ([], list1)\n    else:\n        mid = len(list1) // 2\n        return (list1[:mid], list1[mid:])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    n = len(list1)\n    if n <= L:\n        return list1, []\n    else:\n        return list1[:L], list1[L:]"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n    \"\"\"\n    dog_years = 7 * h_age\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = (h_age * 7) / 12\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # Calculate dog's age in dog's years\n    dog_years = h_age * 7\n    # Return dog's age in dog's years\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    age = 7 * int(h_age)\n    return age"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n    \"\"\"\n    days_per_year = 365\n    weeks_per_year = 52\n    weeks_per_month = 4\n    months_per_year = 12\n    years_per_century = 100\n    centuries_per_year = 10\n\n    # Convert the h_age to days\n    age_in_days = h_age * days_per_year\n\n    # Calculate the age in weeks\n    age_in_weeks = age_in_days / weeks_per_year\n\n    # Calculate the age in months\n    age_in_months = age_in_weeks / weeks_per_month\n\n    # Calculate the age in years\n    age_in_years = age_in_months / months_per_year\n\n    # Calculate the age in centuries\n    age_in_centuries = age_in_years / years_per_century\n\n    return age_in_centuries"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7 * h_age\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n    \"\"\"\n    dog_age = 10 * h_age\n    return dog_age"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n    \"\"\"\n    age_in_years = 7 * h_age\n    return age_in_years"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    if step == 0:\n        return []\n    elif step > 0:\n        return [S[i:i+step] for i in range(0, len(S), step)]\n    else:\n        return [S[i:i+abs(step)] for i in range(0, len(S), abs(step))]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    n = step\n    result = []\n    while n < len(S):\n        result.append(S[n:n+step])\n        n += step\n    result.append(S[n:])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    n = len(S)\n    split_list = []\n    for i in range(0, n, step):\n        sublist = S[i:i+step]\n        split_list.append(sublist)\n    return split_list"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # Initialize an empty list to store the resulting lists\n    result = []\n    # Loop through the input list and split for every nth element\n    for i in range(0, len(S), step):\n        # Add the current list to the result list\n        result.append(S[i:i+step])\n    # Return the resulting list of lists\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    n = len(S)\n    result = []\n    for i in range(0, n, step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # initialize an empty list to store the resulting lists\n    result = []\n    # loop through the input list\n    for i in range(0, len(S), step):\n        # slice the input list and add it to the result list\n        result.append(S[i:i+step])\n    # return the result list\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    S_split = []\n    for i in range(0, len(S), step):\n        S_split.append(S[i:i+step])\n    return S_split"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    results = []\n    for i in range(0, len(S), step):\n        results.append(S[i:i+step])\n    return results"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    n = len(S)\n    result = []\n    for i in range(0, n, step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    surface_area = 6 * l * l\n    return surface_area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # Define the volume of the cube\n    volume = l**3\n    \n    # Calculate the lateral surface area\n    lateral_surface_area = 6 * volume\n    \n    return lateral_surface_area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return (l ** 2) * 6"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    \"\"\"\n    Write a function to find the lateral surface area of a cube given its side length.\n    \"\"\"\n    return 6 * l ** 2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2\n"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    area = 6 * l * l # Formula for the lateral surface area of a cube\n    return area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l*l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    # initialize sum to 0\n    sum = 0\n    \n    # loop through first n odd natural numbers\n    for i in range(2, n+1, 2):\n        # calculate the square of the current odd number\n        square = i**2\n        \n        # add the square to the sum\n        sum += square\n        \n    # return the sum of squares\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(1, n+1, 2):\n        sum_of_squares += i**2\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n\n    # Initialize the sum to 0\n    sum = 0\n\n    # Use a for loop to iterate through the first n odd natural numbers\n    for i in range(1, n+1, 2):\n        # Add the square of i to the sum\n        sum += i*i\n\n    # Return the sum of the squares of the first n odd natural numbers\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    # initialize sum variable to zero\n    sum = 0\n    \n    # loop through the first n odd natural numbers\n    for i in range(1, n+1, 2):\n        # calculate the square of i and add it to the sum variable\n        sum += i*i\n    \n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):\n    # Initialize the sum of squares to 0\n    sum_of_squares = 0\n\n    # Initialize the counter variable to 1\n    counter = 1\n\n    # Loop through the first n odd natural numbers\n    while counter <= n:\n        # Calculate the square of the current odd natural number\n        square = counter ** 2\n\n        # Add the square to the sum of squares\n        sum_of_squares += square\n\n        # Increment the counter\n        counter += 2\n\n    # Return the sum of squares\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer\")\n    if n % 2 == 0:\n        raise ValueError(\"n must be an odd integer\")\n    sum_of_squares = 0\n    for i in range(n):\n        sum_of_squares += i*i\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    # initialize sum variable to 0\n    sum = 0\n    \n    # loop through odd natural numbers up to n\n    for i in range(1, n+1, 2):\n        # square the current number and add it to the sum variable\n        sum += i*i\n        \n    # return the sum\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    for i in range(1, n+1, 2):\n        sum_of_squares += i*i\n    return sum_of_squares"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    # Calculate the first n stars in the triangle\n    stars = \"*\" * n\n    # Return the first n stars in the triangle\n    return stars"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    # Initialize variables\n    num_stars = 1\n    result = 0\n    \n    # Iterate through the range of n\n    for i in range(1, n+1):\n        # Add num_stars to the result\n        result += num_stars\n        \n        # Update num_stars\n        num_stars *= 2\n    \n    # Return the result\n    return result"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    # initialize the first star number as 1\n    star = 1\n    \n    # loop through the rest of the numbers\n    for i in range(1, n):\n        # multiply the current number by 2\n        star *= 2\n        \n        # add 1 to the previous number\n        star += 1\n    \n    # return the nth star number\n    return star"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    # Initialize a variable to store the star number\n    star_num = 1\n\n    # Loop through each digit in the n-th number\n    for i in range(1, n+1):\n        # Multiply the current star number by 10\n        star_num *= 10\n\n        # Add the product to the sum of all the digits\n        sum_of_digits = sum(int(digit) for digit in str(star_num))\n\n        # If the sum of all the digits is less than or equal to n, it means the n-th star number has been found\n        if sum_of_digits <= n:\n            return star_num"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    stars = '*'\n    for i in range(n):\n        print(stars)\n    print()"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    if n == 1:\n        return \"*\"\n    else:\n        return \"*\" + find_star_num(n-1)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    # Calculate the nth star number\n    star_num = (n * (n + 1)) // 2\n    return star_num"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n\n    # initialize a variable to keep track of the number of stars\n    count = 1\n\n    # loop until we reach the nth star\n    while count <= n:\n        # print the current star number\n        print(\"*\" * count)\n        # increment the count\n        count += 1"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    # initialize variables\n    num_rows = 1\n    num_cols = n\n    \n    # initialize empty list to store the star numbers\n    star_num_list = []\n    \n    # iterate through the rows and columns\n    for i in range(num_rows):\n        for j in range(num_cols):\n            # if the number of columns is even, then we need to add an extra row for odd numbers of rows\n            if num_cols % 2 == 0 and i == 0 and j < num_cols // 2:\n                num_rows += 1\n            # calculate the star number for each cell\n            num = (num_rows - i) * num_cols + (j + 1)\n            # add the star number to the list\n            star_num_list.append(num)\n    \n    # return then'th star number\n    return star_num_list[n-1]"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_star_num(n):\n    \"\"\"\n    This function takes an integer n as input and returns then'th star number.\n    \"\"\"\n    # Initialize the star number as 1\n    star_num = 1\n    # Loop through the range of numbers from 1 to n\n    for i in range(2, n+1):\n        # Multiply the current star number by i\n        star_num *= i\n    return star_num"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    # Convert the character to its ASCII value\n    ascii_value = ord(k)\n    # Return the ASCII value\n    return ascii_value"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n\n    # Convert k to string\n    k = str(k)\n\n    # Convert first character to integer and find its ascii value\n    ascii_k = ord(k[0])\n\n    # Return ascii_k\n    return ascii_k"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    # Convert the character to its ascii code\n    ascii_code = ord(k)\n    # Return the ascii code\n    return ascii_code"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    # convert the input character to its ascii value\n    ascii_value = ord(k)\n    # return the ascii value\n    return ascii_value"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    even_sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    sum_even = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            sum_even += arr[i]\n    return sum_even"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            sum_even += arr[i]\n    return sum_even"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):\n    even_sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            sum += arr[i]\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    even_index = 0\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            even_sum += arr[i]\n            even_index = i\n    return even_sum, even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    even_sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            if arr[i] % 2 == 0:\n                even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    \n    even_sum = 0\n    even_count = 0\n    \n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n            even_count += 1\n            \n    return even_sum, even_count"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    even_sum = 0\n    even_index = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n            even_index = i\n    return even_sum, even_index"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum_power_n = 0\n    for i in range(2, n+1, 2):\n        sum_power_n += i**5\n    return sum_power_n"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_Power_Sum(n): \n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum = 0\n    for i in range(n):\n        if i**5 % 2 == 0:\n            sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += (i+1)**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum_of_powers = 0\n    current_num = 2\n    for i in range(n):\n        sum_of_powers += current_num ** 5\n        current_num += 2\n    return sum_of_powers"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_Power_Sum(n): \n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    # initialize sum variable to 0\n    total_sum = 0\n    # loop through n even natural numbers\n    for i in range(2, n+1, 2):\n        # calculate the sum of the raised even natural numbers to the fifth power\n        power_sum = sum([i ** 5 for _ in range(i)])\n        # add the sum of the raised even natural numbers to the total sum\n        total_sum += power_sum\n    # return the total sum\n    return total_sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    power_sum = 0\n    for i in range(2, n+1, 2):\n        power_sum += i**5\n    return power_sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    total = 0\n    i = 0\n    while i < n:\n        total += i ** 5\n        i += 1\n    return total"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += (i+1)**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    total = 0\n    for i in range(2, n+1, 2):\n        total += i**5\n    return total"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1):\n        sum += i**5\n    return sum"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    \"\"\"\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for item in test_list:\n        result.append(item[-1])\n    return result"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    # Initialize an empty list to store the rear elements\n    rear_elements = []\n    # Iterate over the list of tuples\n    for tup in test_list:\n        # Append the rear element of the current tuple to the rear_elements list\n        rear_elements.append(tup[1])\n    # Return the list of rear elements\n    return rear_elements"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_list)):\n        rear_list.append(test_list[i][-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_list)):\n        rear_list.append(test_list[i][-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    \"\"\"\n    return [x[-1] for x in test_list]"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[-1])\n    return rear_list"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # create an empty list to store the subtraction results\n    subtraction_results = []\n    # loop through the first tuple\n    for i in range(len(test_tup1)):\n        # subtract the element of the first tuple from the element of the second tuple with the same index\n        subtraction_result = test_tup1[i] - test_tup2[i]\n        # add the subtraction result to the subtraction results list\n        subtraction_results.append(subtraction_result)\n    # return the subtraction results list\n    return subtraction_results"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return result"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] == test_tup2[i]:\n            test_tup1[i] = test_tup1[i] - test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The two tuples must have the same length.\")\n    else:\n        sub_tup = ()\n        for i in range(len(test_tup1)):\n            sub_tup += (test_tup1[i] - test_tup2[i],)\n        return sub_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Loop through the elements of the first tuple and subtract the corresponding elements of the second tuple\n    for i in range(len(test_tup1)):\n        # Check if the indices match\n        if i == test_tup2.index(test_tup1[i]):\n            # Subtract the elements and assign the result to the same index of the first tuple\n            test_tup1[i] -= test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # loop through the tuples and subtract the elements with the same index\n    for i in range(len(test_tup1)):\n        test_tup1[i] -= test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    new_tup = []\n    for i in range(len(test_tup1)):\n        new_tup.append(test_tup1[i] - test_tup2[i])\n    return new_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    new_tup = []\n    for i in range(len(test_tup1)):\n        new_tup.append(test_tup1[i] - test_tup2[i])\n    return new_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    for index, value in enumerate(test_tup1):\n        test_tup1[index] = value - test_tup2[index]\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must have the same length.\")\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            test_tup1[i] -= test_tup2[i]\n    \n    return test_tup1"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            sum += math.factorial(n) // math.factorial(i) // math.factorial(n-i)\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_binomial_Coeff_Sum(n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum_even_index = 0\n    for i in range(2, n+1):\n        sum_even_index += math.factorial(i) // (math.factorial(2*i-1) * math.factorial(i-2))\n    return sum_even_index"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_binomial_Coeff_Sum( n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    # Calculate the sum of even index binomial coefficients using the formula:\n    # coeff_sum = n!/(2*i*j) * (2*i+1)^(2*j+1)\n    # where i,j = 0,1,2,3,...\n    # For i=0, the index i is not even, so we ignore it\n    # For i=1, the index i is even, so we add coeff_sum from i=0\n    # For i=2, the index i is even, so we add coeff_sum from i=0 and i=1\n    # For i=3, the index i is even, so we add coeff_sum from i=0, i=1, and i=2\n    # For i=4, the index i is even, so we add coeff_sum from i=0, i=1, i=2, and i=3\n    #...\n    # For i=n, the index i is even, so we add coeff_sum from i=0, i=1, i=2,... and i=n-2\n    coeff_sum = 0\n    for i in range(1, n+1, 2):\n        for j in range(i):\n            coeff_sum += math.factorial(n)/(2*(i-1)*j) * (2*i+1)**(2*j+1)\n    return coeff_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n\n    # Initialize a variable to store the sum of even index binomial coefficients\n    even_index_sum = 0\n\n    # Initialize two variables to store the values of the first two terms of the binomial series\n    term1 = 1\n    term2 = 1\n\n    # Loop through the first n terms of the binomial series\n    for i in range(2, n+1):\n\n        # Update the values of the current two terms of the binomial series\n        term1 = term1 * i\n        term2 = term2 * (n-i+1)\n\n        # Check if the index is even, and add the corresponding binomial coefficient to the sum if it is\n        if i % 2 == 0:\n            even_index_sum += term1 / term2\n\n    return even_index_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function takes a positive integer n as input and returns the sum of even index binomial coefficients of n.\n    \"\"\"\n    # initialize the sum of even index binomial coefficients to 0\n    sum_even_binomial_coeff = 0\n\n    # loop through each number from 2 to n-1\n    for i in range(2, n+1):\n        # calculate the binomial coefficient of i and j\n        binomial_coeff = math.comb(n, i-1) * math.comb(n-i+1, i-1)\n\n        # check if the binomial coefficient is even and add it to the sum of even index binomial coefficients\n        if i % 2 == 0:\n            sum_even_binomial_coeff += binomial_coeff\n\n    # return the sum of even index binomial coefficients\n    return sum_even_binomial_coeff"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += math.comb(n, i)\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(2, n+1):\n        sum += math.comb(n, i) * 2**(i-2)\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    \n    # Initialize variables\n    sum_even = 0\n    denominator = 2\n    \n    # Loop through odd indices of n\n    for i in range(1,n+1,2):\n        # Calculate the binomial coefficient and add to sum if even\n        coefficient = math.comb(n,i-1)\n        if i % 2 == 0:\n            sum_even += coefficient\n        else:\n            denominator += 1\n    \n    # Calculate the final sum by multiplying sum of even and denominator\n    final_sum = sum_even * denominator\n    \n    return final_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    This function takes a positive integer n as input and returns the sum of even index binomial coefficients.\n    '''\n\n    # Initialize sum variable to 0\n    sum_even_binomial_Coeff = 0\n\n    # Calculate the even index binomial coefficients and add them to the sum variable\n    for i in range(2, n + 1, 2):\n        sum_even_binomial_Coeff += math.comb(n, i - 1)\n\n    return sum_even_binomial_Coeff"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math  \n  \ndef even_binomial_Coeff_Sum(n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    coeff_sum = 0\n    for i in range(n+1):\n        coeff = math.factorial(i) // (math.factorial(n-i)*math.factorial(2*i-1))\n        coeff_sum += coeff if i % 2 == 0 else 0\n    return coeff_sum"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14159 * r**2 * h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    \"\"\"\n    # Calculate the volume using the formula V = \u03c0r^2 h\n    V = (3.14159 * r**2 * h)\n    return V"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    \"\"\"\n    return 3.14 * (r**2) * h / 3"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    v = 3.14 * r**2 * h\n    return v\n"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    \"\"\"\n    return 3.14159 * r * r * h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (1/3) * (3.14 * r**2 * h)\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    V = 3.14159 * r**2 * h\n    return V"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    V = 3.14 * r**2 * h\n    return V"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cylinder(r, h):\n    '''\n    This function takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    v = (1/3) * 3.14159 * r**2 * h\n    return v"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cylinder(r, h):\n    '''\n    This function takes in the radius and height of a cylinder and returns the volume.\n    '''\n    return 3.14 * r**2 * h"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {key: value for key, value in dict.items() if value >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    # Use a loop to iterate over each key-value pair in the dictionary\n    for key, value in dict.items():\n        # Check if the value is greater than or equal to n\n        if value >= n:\n            # If it is, add the key-value pair to a new dictionary\n            new_dict = {key: value}\n            # Add the new dictionary to the list of filtered dictionaries\n            filtered_dicts.append(new_dict)\n    # Return the list of filtered dictionaries\n    return filtered_dicts"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {k: v for k, v in dict.items() if v >= n}\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    result = {}\n    for key, value in dict.items():\n        if value >= n:\n            result[key] = value\n    return result"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    new_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_filter(dict, n):\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    result = {}\n    for key, value in dict.items():\n        if value >= n:\n            result[key] = value\n    return result"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)-1):\n        if test_tup[i] == test_tup[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        if test_tup[i]!= test_tup[i-1]:\n            count += 1\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        if test_tup[i] == test_tup[i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    \"\"\"\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    \"\"\"\n    count = 0\n    for i in range(len(test_tup)):\n        if i!= len(test_tup) - 1:\n            if test_tup[i] == test_tup[i+1]:\n                count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    \"\"\"\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    \"\"\"\n    count = 0\n    for i in range(len(test_tup)-1):\n        if test_tup[i] < test_tup[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[0]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == len(test_tup) - 1:\n            break\n        if test_tup[i]!= test_tup[i + 1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i]!= test_tup[i+1]:\n            count += 1\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        if test_tup[i]!= test_tup[i-1]:\n            break\n        count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            count += 1\n        elif test_tup[i]!= test_tup[i-1]:\n            break\n    return count"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal_num = 1\n    for i in range(1, n+1):\n        decagonal_num += i*i\n    return decagonal_num\n"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    decagonal = 0\n    i = 0\n    while i <= n:\n        decagonal += (i * (3 * i - 1)) // 2\n        i += 1\n    return decagonal"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    # Check if input is a positive integer\n    if type(n)!= int or n < 0:\n        raise ValueError(\"Input must be a positive integer.\")\n\n    # Calculate the value of the nth decagonal number\n    value = ((4 * n * n) - (n - 2)) / 2\n\n    # Return the nth decagonal number\n    return value"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    # First two decagonal numbers are 1 and 5\n    decagonal_nums = [1, 5]\n    for i in range(2, n+1):\n        # Sum of the decagonal numbers before i\n        decagonal_sum = decagonal_nums[0] + decagonal_nums[1]\n        # Add to the list of decagonal numbers\n        decagonal_nums.append(decagonal_sum)\n    return decagonal_nums[-1]"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    #initialize counter\n    count = 1\n    #find the square of the given number\n    square = n * n\n    #find the sum of the first n odd numbers\n    sum_of_odds = (n * (n + 1)) // 2\n    #calculate the decagonal number\n    decagonal = square - sum_of_odds\n    #check if the given number is a decagonal number\n    if decagonal == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    num = 1\n    for i in range(n):\n        num = num + 4*i*(i+1)\n    return num\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The\", n, \"th Decagonal number is:\", is_num_decagonal(n))"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n < 1:\n        return False\n    num = 1\n    decagonal_num = 1\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            num += 1\n        else:\n            num += 2\n        decagonal_num += num\n    if decagonal_num == n:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n\n    # Initialize a variable to hold the result\n    result = 0\n\n    # Loop through the values from 1 to n\n    for i in range(1, n+1):\n        # Increment the result by 2*(n-i+1)\n        result += 2*(n-i+1)\n\n    # Return the result\n    return result"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n < 1:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        return is_num_decagonal(n-1) + is_num_decagonal(n-2)\n\nn = int(input(\"Enter a number: \"))\nresult = is_num_decagonal(n)\nif result is None:\n    print(\"Invalid input. Please enter a positive integer.\")\nelse:\n    print(\"The\", n, \"th decagonal number is:\", result)"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # define a function to calculate the nth decagonal number\n    def nth_decagonal(n):\n        # calculate the number of rows and columns of the decagonal matrix\n        rows = int(n ** 0.5) + 1\n        cols = 2 * rows - 1\n        # calculate the matrix\n        matrix = [[0] * cols for i in range(rows)]\n        # fill the matrix with numbers\n        for i in range(1, rows):\n            for j in range(1, cols - i):\n                matrix[i][j] = matrix[i - 1][j - 1] + matrix[i - 1][j]\n        # return the nth element of the matrix\n        return matrix[n - 1][n - 1]\n    \n    # return the nth decagonal number\n    return nth_decagonal(n)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    # Loop through the array and check if the element is found\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    # If the element is not found, return a tuple containing False and -1\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i, value in enumerate(dlist):\n        if value == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    return (found, index)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Write a python function to check if the elements of a given list are unique or not.\n    \"\"\"\n    unique = True\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                unique = False\n                break\n    return unique"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n\n    # Create a set from the list and check if it has the same length as the list\n    if len(set(test_list)) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) == len(set(test_list)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # create an empty set to store unique elements\n    unique_set = set()\n    # loop through each element in the list\n    for element in test_list:\n        # check if the element is already in the set\n        if element in unique_set:\n            # if it is, return False, since the list contains duplicates\n            return False\n        # otherwise, add the element to the set\n        else:\n            unique_set.add(element)\n    # if the loop completes without returning False, return True, since all elements are unique\n    return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    test_list = list(set(test_list))\n    if len(test_list) == len(test_list.set()):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_list = []\n    for item in test_list:\n        if item not in unique_list:\n            unique_list.append(item)\n        else:\n            return False\n    return True"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # initialize an empty list to store the result\n    result = []\n    # iterate over the elements of nums1 and nums2\n    for i in range(len(nums1)):\n        # add the elements of nums1 and nums2 at index i and store the result in result\n        result.append(nums1[i] - nums2[i])\n    # return the result list\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two lists must have the same length.\")\n    return [x - y for x, y in zip(nums1, nums2)]"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('Both lists must have the same length.')\n    return [num1 - num2 for num1,num2 in zip(nums1,nums2)]"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        return \"Lists must have the same length.\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Error: Lists must have same length.\")\n        return\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # Check if the lists are of equal length\n    if len(nums1)!= len(nums2):\n        print(\"Error: lists must be of equal length.\")\n        return\n    \n    # Initialize the result list with the same length as the first list\n    result = [0] * len(nums1)\n    \n    # Subtract the corresponding elements from the first and second lists\n    for i in range(len(nums1)):\n        result[i] = nums1[i] - nums2[i]\n    \n    # Return the result list\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Subtracts the elements of two lists element-wise.\n\n    Parameters:\n    nums1 (list): The first list.\n    nums2 (list): The second list.\n\n    Returns:\n    list: The difference between the two lists.\n    \"\"\"\n    diff_list = []\n    for i in range(len(nums1)):\n        diff_list.append(nums1[i] - nums2[i])\n    return diff_list"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Write a function to subtract two lists element-wise.\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n\n    for i in range(len(nums1)):\n        if type(nums1[i])!= type(nums2[i]):\n            raise TypeError(\"Both lists must contain only integers or floats.\")\n\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n\n    return result\n"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Lists must have the same length.\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def validate(n):\n    # initialize a dictionary to store the frequency of each digit\n    freq = {}\n    # loop through the digits of the number and update the frequency of each digit in the dictionary\n    for digit in str(n):\n        freq[digit] = freq.get(digit, 0) + 1\n    # loop through the digits of the number and check if the frequency of each digit is less than or equal to the digit itself\n    for digit in freq:\n        if freq[digit] > freq[digit]:\n            return False\n    # if the loop completes without returning False, then all the digits have a frequency less than or equal to themselves\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    \n    # Use list comprehension to count the frequency of each digit in the integer\n    freq = [n.count(digit) for digit in str(n)]\n    \n    # Check whether the frequency of each digit is less than or equal to the digit itself\n    if all(digit <= digit for digit in freq):\n        return True\n    else:\n        return False"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    count = {}\n    for i in range(10):\n        count[i] = 0\n    while n > 0:\n        digit = n % 10\n        if count[digit] > 0:\n            return False\n        count[digit] += 1\n        n = n // 10\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    freq = {}\n    num = str(n)\n    for digit in num:\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n\n    for digit in freq:\n        if freq[digit] > digit:\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    \n    # Create a dictionary to store the frequency of each digit in the integer\n    digit_freq = {}\n    for digit in str(n):\n        digit_freq[digit] = digit_freq.get(digit, 0) + 1\n    \n    # Check whether the frequency of each digit in the integer is less than or equal to the digit itself\n    for digit in digit_freq:\n        if digit_freq[digit] > digit:\n            return False\n    \n    # If the loop completes, all digits have a frequency less than or equal to the digit itself\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    count = [0]*10 # create a list of 10 zeros\n    while n > 0:\n        count[n%10] += 1 # increment the count of the last digit in the number\n        n //= 10 # remove the last digit from the number\n    for i in range(10):\n        if count[i] > i: # if the count of digit i is greater than i, return False\n            return False\n    return True # if no digit has a frequency greater than i, return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = [0] * 10  # initialize a list to store the frequency of each digit\n\n    for i in range(10):\n        freq[i] = n // 10**i  # divide the number by 10^i and store the result in the list at index i\n        n %= 10**i  # subtract the result from the original number and store the result in the list at index i\n\n    for i in range(10):\n        if freq[i] > n:  # if the frequency of the digit is greater than the digit itself, return False\n            return False\n\n    return True  # if all the conditions are satisfied, return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = [0]*10 #initialize an array of size 10 to store frequency of each digit\n    num = n #initialize the number for which frequency validation will be performed\n    \n    #count frequency of each digit in the number\n    for i in range(len(str(num))):\n        freq[int(str(num)[i])] += 1\n        \n    #check if frequency of each digit is less than or equal to its value\n    for i in range(10):\n        if freq[i] > num and freq[i]!= num: #if frequency is greater than the number and not equal to the number, return False\n            return False\n        \n    return True #if all conditions are satisfied, return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def validate(n): \n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    freq = [0] * 10  # initialize frequency array with zeros\n    \n    # loop through each digit in the number\n    for digit in str(n):\n        freq[int(digit)] += 1  # increment frequency count for digit\n    \n    # loop through the frequency array and check if each digit is less than or equal to itself\n    for digit in range(10):\n        if freq[digit] > 0 and freq[digit] > digit:\n            return False  # if any digit is greater than the digit itself, return False\n    \n    return True  # if all digits are less than or equal to themselves, return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = [0] * 10  # Initialize frequency array with 0s\n\n    # Count frequency of each digit in the integer\n    for num in str(n):\n        freq[int(num)] += 1\n\n    # Check if the frequency of each digit is less than or equal to the digit itself\n    for i in range(len(freq)):\n        if freq[i] > n // 10:\n            return False\n\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return all(x == element for x in list)"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    # check if all elements in list are equal to element\n    if all(elem == element for elem in list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_element(lst, elem):\n    '''\n    This function takes in a list and an element and returns True if all items in the list are equal to the given element,\n    otherwise, it returns False.\n    '''\n    if len(lst) == 0:\n        return False\n    else:\n        return lst[0] == elem and check_element(lst[1:], elem)"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_element(lst, el):\n    \"\"\"\n    This function takes in a list and element as input and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    for item in lst:\n        if item!= el:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    if len(list) == 0:\n        return True\n    elif list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_element(lst, elem):\n    if len(lst) == 0:\n        return True\n    elif lst[0] == elem:\n        return check_element(lst[1:], elem)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_element(lst, element):\n    '''\n    This function takes in a list and an element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(lst) == 0:\n        return True\n    else:\n        if lst[0] == element:\n            return check_element(lst[1:], element)\n        else:\n            return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if all(x == element for x in list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    if len(list) == 0:\n        return True\n    elif list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    \n    pattern = re.compile(r'a(b){2,3}')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a(b{2,3})'\n    result = re.search(pattern, text)\n    return result is not None"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a(b){1,2}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a(?=b{2,3})'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a[bB][bB]*'\n    matches = re.findall(pattern, text)\n    return len(matches) > 0"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = re.compile(r'a(?=b{2,3})')\n    return bool(pattern.search(text))"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = re.compile(r'ab(b{2,3})')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'\\ba[bc]{2,3}\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a(b{2,3})'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'ab{2,3}'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    max_sum = a[0]\n    for i in range(n-k+1):\n        cur_sum = 0\n        for j in range(k):\n            cur_sum += a[i+j]\n        cur_max_sum = max(cur_sum, max_sum)\n        max_sum = cur_max_sum\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n\n    # initialize maximum sum to be negative infinity\n    max_sum = float('-inf')\n\n    # loop through the array and calculate the maximum sum of a contiguous subarray\n    for i in range(n):\n        for j in range(k):\n            # calculate the sum of the current array\n            current_sum = sum(a[i:i+j+1])\n\n            # update the maximum sum if the current sum is greater than the previous maximum sum\n            if current_sum > max_sum:\n                max_sum = current_sum\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    # initialize the sum of the given array and the maximum sum of any subarray\n    sum_given = sum(a)\n    max_sum = sum_given\n\n    # iterate through the array and add the sum of each subarray to the maximum sum\n    for i in range(n):\n        sum_i = a[i]\n        for j in range(k):\n            sum_i += a[i]\n        if sum_i > max_sum:\n            max_sum = sum_i\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    max_sum = float('-inf')\n    max_sum_with_repeat = float('-inf')\n    max_sum_without_repeat = float('-inf')\n    current_sum = 0\n    current_sum_with_repeat = 0\n    current_sum_without_repeat = 0\n\n    for i in range(k):\n        current_sum += a[0]\n        current_sum_with_repeat += a[0]\n        current_sum_without_repeat += a[0]\n\n    for i in range(n-k):\n        current_sum += a[i+1] - a[i]\n        current_sum_with_repeat += a[i+1] - a[i]\n        current_sum_without_repeat += a[i+1] - a[i]\n\n    max_sum = max(max_sum, current_sum)\n    max_sum_with_repeat = max(max_sum_with_repeat, current_sum_with_repeat)\n    max_sum_without_repeat = max(max_sum_without_repeat, current_sum_without_repeat)\n\n    return max(max_sum, max_sum_with_repeat, max_sum_without_repeat)"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    # Initialize variables\n    max_sum = float('-inf')\n    current_sum = 0\n    index_max_sum = 0\n    index_start = 0\n    \n    # Loop through the array\n    for i in range(k):\n        # Add the element to the current sum\n        current_sum += a[i]\n        \n        # If the current sum is greater than the maximum sum so far, update variables\n        if current_sum > max_sum:\n            max_sum = current_sum\n            index_max_sum = i\n            index_start = i\n            \n        # If the current sum is negative, reset it to 0\n        if current_sum < 0:\n            current_sum = 0\n            \n    # Find the maximum sum of a contiguous array in the modified array\n    max_sum_array = []\n    for i in range(k, n):\n        current_sum = current_sum - a[index_start] + a[i]\n        \n        if current_sum > max_sum_array[-1]:\n            max_sum_array.append(current_sum)\n    \n    # Return the maximum sum of a contiguous array in the modified array\n    return max(max_sum_array)"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    repeated_array = []\n\n    # Add the first element of the array to the repeated array\n    repeated_array.append(a[0])\n\n    # Find the maximum sum of the first element of the array\n    for i in range(1, n):\n        current_sum = a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n        # If the sum of the first element exceeds the limit k, remove the first element from the repeated array\n        while repeated_array[0]!= a[i]:\n            repeated_array.pop(0)\n\n        # If the sum of the first element is equal to the limit k, add the element to the repeated array\n        if current_sum == k:\n            repeated_array.append(a[i])\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    max_sum = float('-inf')\n    prev_sum = 0\n    for i in range(n):\n        current_sum = a[i]\n        for j in range(k):\n            if i - j >= 0:\n                current_sum += a[i - j]\n        if current_sum > max_sum:\n            max_sum = current_sum\n            prev_sum = current_sum\n        elif current_sum == max_sum:\n            prev_sum += current_sum\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = float('-inf')\n    current_sum = sum(a)\n    for i in range(k):\n        current_sum += n * (a[0] + a[-1])\n        if current_sum > max_sum:\n            max_sum = current_sum\n        a.extend(a)\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    \"\"\"\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    \"\"\"\n    # Create a list of k copies of the given array\n    arr = a * k\n    \n    # Initialize variables to keep track of the maximum sum and its index\n    max_sum = arr[0]\n    max_index = 0\n    \n    # Loop through the modified array\n    for i in range(1, n):\n        # Calculate the sum of the next element and the sum of the previous elements\n        temp_sum = arr[i] + arr[i - 1]\n        \n        # If the sum is greater than the current maximum sum, update the maximum sum and its index\n        if temp_sum > max_sum:\n            max_sum = temp_sum\n            max_index = i\n    \n    # Return the maximum sum and its index\n    return max_sum, max_index"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Initialize variables\n    max_sum = float('-inf')\n    total_sum = 0\n    repeated_sum = 0\n    \n    # Repeat the given array k times\n    for i in range(k):\n        repeated_sum = sum(a)\n    \n    # Calculate the total sum\n    total_sum = (k * sum(a)) + (n * repeated_sum)\n    \n    # Compare the total sum with the maximum sum\n    if total_sum > max_sum:\n        max_sum = total_sum\n    \n    # Return the maximum sum\n    return max_sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n\n    # initialize sum and counter\n    sum = 0\n    count = 0\n\n    # loop through even natural numbers\n    for i in range(2, n+1, 2):\n        # add square of i to sum\n        sum += i**2\n        # increment counter\n        count += 1\n\n    # return the sum\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    for i in range(2, n+1, 2):\n        sum_of_squares += i**2\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    if n < 2:\n        return 0\n    else:\n        sum = 0\n        for i in range(2, n+1, 2):\n            sum += i**2\n        return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_squares = 0\n    for i in range(1, n+1, 2):\n        sum_squares += i*i\n    return sum_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(2, n+1, 2):\n        sum_of_squares += i*i\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):\n    #initialize sum variable to 0\n    sum = 0\n    #initialize counter variable to 1\n    count = 1\n    #loop through first n even numbers\n    while count <= n:\n        #if the number is even, square it and add it to the sum variable\n        if count % 2 == 0:\n            sum += count ** 2\n        #increment counter variable\n        count += 1\n    #return the sum of squares of even numbers\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    count = 0\n    i = 2\n    while count < n:\n        sum += i**2\n        count += 1\n        i += 2\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    max_length_list = []\n    for sublist in list1:\n        if len(sublist) > max_length_list:\n            max_length_list = sublist\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    # Find the maximum length of the list\n    max_length = 0\n    for lst in list1:\n        if len(lst) > max_length:\n            max_length = len(lst)\n    # Return the list of maximum length\n    return [lst for lst in list1 if len(lst) == max_length]"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for sublist in list1:\n        max_length = max(len(sublist), len(max_lengths))\n        max_lengths.append(max_length)\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n    return max_len"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_list = []\n    for i in range(len(list1)):\n        if len(list1[i]) > len(max_list):\n            max_list = list1[i]\n    return max_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for sublist in list1:\n        if len(sublist) > len(max_lengths) or len(sublist) == len(max_lengths) and sublist > max_lengths:\n            max_lengths = sublist\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for i in range(len(list1)):\n        if len(list1[i]) > len(max_length_list):\n            max_length_list = list1[i]\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for sublist in list1:\n        if len(sublist) > max(max_lengths) or max_lengths == []:\n            max_lengths = [len(sublist)]\n        else:\n            max_lengths.append(len(sublist))\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    # Initialize an empty list to store the maximum length of each sub-list\n    max_length_list = []\n    # Loop through each sub-list in the list\n    for sub_list in list1:\n        # If the length of the sub-list is greater than the current maximum, update the maximum length\n        if len(sub_list) > max(max_length_list):\n            max_length_list = [len(sub_list)]\n        # If the length of the sub-list is equal to the current maximum, add it to the list\n        elif len(sub_list) == max(max_length_list):\n            max_length_list.append(len(sub_list))\n    # Return the maximum length list\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    result = []\n\n    for i in list1:\n        if len(i) > max_len:\n            max_len = len(i)\n            result = [i]\n        elif len(i) == max_len:\n            result.append(i)\n\n    return result"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 0,
        "answer": ""
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k):\n    def paint(arr, i, j, k):\n        if j == 0:\n            return 1\n        if i < 0 or i >= n or j >= len(arr[0]) or arr[i][j] == 0:\n            return 0\n        if arr[i][j] == k:\n            return paint(arr, i+1, j, k) + paint(arr, i, j-1, k) + paint(arr, i, j-1, arr[i][j])\n        else:\n            return paint(arr, i+1, j, k) + paint(arr, i, j-1, k)\n\n    arr = [[0]*k for _ in range(n)]\n    return paint(arr, 0, 0, 0)"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    fence = [0] * (k + 1)\n    for i in range(1, n + 1):\n        fence[i] = fence[i - 1] + 1\n    for i in range(n - 1, 0, -1):\n        fence[i] = max(fence[i], fence[i + 1] + 1)\n    return fence[1]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # initializing the list to store the number of ways of painting the fence for each color\n    ways_list = []\n    \n    # iterating through the range of colors k\n    for color in range(k):\n        # initializing the variable to store the number of ways of painting the fence for the current color\n        current_ways = 0\n        \n        # iterating through the range of numbers from 1 to n-1\n        for i in range(1, n):\n            # checking if the adjacent post has the same color as the current post\n            if i < n-1 and i < k:\n                if color == 0:\n                    if i > 0:\n                        if ways_list[i-1] > 0:\n                            current_ways += ways_list[i-1]\n                    if i > 1:\n                        if ways_list[i-2] > 0:\n                            current_ways += ways_list[i-2]\n                elif color == n-1:\n                    if i < n-2:\n                        if ways_list[i+1] > 0:\n                            current_ways += ways_list[i+1]\n                    if i < n-3:\n                        if ways_list[i+2] > 0:\n                            current_ways += ways_list[i+2]\n                else:\n                    if i > 0:\n                        if ways_list[i-1] > 0:\n                            current_ways += ways_list[i-1]\n                    if i < n-2:\n                        if ways_list[i+1] > 0:\n                            current_ways += ways_list[i+1]\n            else:\n                current_ways += ways_list[i-1]\n                \n        # storing the number of ways of painting the fence for the current color in the ways_list\n        ways_list.append(current_ways)\n    \n    # returning the number of ways of painting the fence for the last color\n    return ways_list[-1]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Generate all possible combinations of colors\n    colors = ['r', 'g', 'b'] * (n//2) + ['r', 'g'] * (n//2) + ['b', 'g'] * (n//2) + ['r', 'b'] * (n//2) + ['g', 'b'] * (n//2)\n    colors += ['r', 'r'] * (n//2) + ['g', 'g'] * (n//2) + ['b', 'b'] * (n//2)\n    # Remove duplicate colors\n    colors = list(set(colors))\n    # Initialize the count to 0\n    count = 0\n    # Loop through all possible pairs of colors\n    for i in range(len(colors)):\n        for j in range(i+1, len(colors)):\n            # Check if the two colors are adjacent and if they have the same color\n            if i <= j <= i+2 and colors[i] == colors[j]:\n                # If they have the same color, increment the count\n                count += 1\n    # Return the count of ways\n    return count"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k):\n    dp = [0]*(k+1)\n    dp[0] = 1\n    for i in range(1, k+1):\n        if i%2 == 0:\n            dp[i] += dp[i//2]\n        else:\n            dp[i] += dp[i//2] + dp[i//2+1]\n    return dp[n]\n\nn = 5\nk = 3\nprint(count_no_of_ways(n, k))"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k):\n    # Initialize the count of ways to 0\n    count = 0\n    \n    # Loop through all possible combinations of colors\n    for i in range(1, k+1):\n        count += n // i\n    \n    # Return the count of ways\n    return count"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k):\n    def backtrack(i, color_count, path):\n        if len(path) == n:\n            count += 1\n            return\n\n        for j in range(i + 1, n + 1):\n            if color_count[j] < k - 2:\n                color_count[j] += 1\n                path.append(j)\n                backtrack(j, color_count.copy(), path)\n                color_count[j] -= 1\n                path.pop()\n\n    count = 0\n    color_count = [0] * (n + 1)\n    path = []\n    backtrack(0, color_count.copy(), path)\n    return count"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k):\n    # create a 2D array to store the number of ways of painting the fence\n    num_ways = [[0] * (n + 1) for _ in range(k + 1)]\n    \n    # initialize the first row and column to 1\n    num_ways[0][0] = 1\n    \n    # iterate through the rows and columns of the array\n    for i in range(1, k + 1):\n        for j in range(1, n + 1):\n            # if the current color is the same as the previous color, add 1 to the number of ways of painting the fence\n            if num_ways[i - 1][j] > 0 and num_ways[i - 1][j - 1] > 0:\n                num_ways[i][j] = num_ways[i - 1][j] + num_ways[i - 1][j - 1]\n            # if the current color is different from the previous color, add 1 to the number of ways of painting the fence plus the number of ways of painting the fence without the current color\n            else:\n                num_ways[i][j] = num_ways[i - 1][j] + num_ways[i][j - 1]\n    \n    # return the total number of ways of painting the fence\n    return num_ways[k][n]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    def count_ways(n, k):\n        dp = [0] * (k+1)\n        dp[0] = 1\n        dp[1] = 1\n        \n        for i in range(2, k+1):\n            for j in range(n):\n                if j >= i:\n                    dp[i] += dp[j]\n                else:\n                    dp[i] += dp[j] * dp[k-i]\n        \n        return dp[-1]\n    \n    return count_ways(n, k)"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    if (quotient * m!= n):\n        quotient += 1\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find(n, m):\n    \"\"\"\n    Find the quotient of two numbers rounded down to the nearest integer.\n    \"\"\"\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return int(n/m)"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m  \n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find(n, m):\n    \"\"\"\n    This function takes two numbers as input and returns the quotient of the two numbers rounded down to the nearest integer.\n    \"\"\"\n    return (n // m)"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    # finding the quotient\n    quotient = n // m\n    \n    # rounding down to the nearest integer\n    quotient = round(quotient)\n    \n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find(n, m):\n    \"\"\"\n    This function calculates the quotient of two numbers (rounded down to the nearest integer) and returns it.\n    \"\"\"\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find(n, m):\n    '''\n    This function takes in two numbers and finds their quotient rounded down to the nearest integer.\n    '''\n\n    # Calculate the quotient by taking the integer division of the numerator and denominator\n    quotient = n // m\n\n    # Calculate the remainder of the division by taking the modulo operator\n    remainder = n % m\n\n    # If the remainder is not 0, then the quotient is increased by 1\n    if remainder!= 0:\n        quotient += 1\n\n    # Return the quotient rounded down to the nearest integer\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    This function takes in the lengths of the other two sides of a right-angled triangle,\n    and returns the length of the third side.\n    '''\n\n    # Using the Pythagorean theorem, we can calculate the length of the third side\n    # as the square root of the sum of the squares of the other two sides\n    return math.sqrt((w ** 2) + (h ** 2) - 2 * w * h)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = math.sqrt(w ** 2 + h ** 2)  # Find the semi-perimeter\n    c = math.cos(math.radians(60))  # Find the cosine of the angle formed by sides w and h\n    side_3 = s * c  # Calculate the third side of the right angled triangle\n    return side_3"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Calculate the length of the third side\n    c = math.sqrt(w**2 + h**2)\n\n    return c"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # calculate the semi-perimeter of the triangle\n    s = (w + h) / 2\n    # use the law of cosines to calculate the square of the semi-perimeter\n    s_squared = math.pow(s, 2)\n    # use the law of sines to calculate the other side of the triangle\n    o_s = math.sqrt(s_squared - math.pow(h, 2))\n    # calculate the third side of the triangle\n    o_w = math.sqrt(math.pow(w, 2) + math.pow(o_s, 2))\n    # return the third side\n    return o_w"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def otherside_rightangle(w, h):\n    \"\"\"\n    This function calculates the third side of a right angled triangle, given the lengths of its two sides and the hypotenuse.\n    \"\"\"\n    s = math.sqrt(w ** 2 + h ** 2)\n    return s"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 5,
        "answer": ""
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # calculate the length of the semi-perimeter\n    s = (w+h) / 2\n\n    # calculate the length of the third side\n    c = math.sqrt(s ** 2 - w ** 2 - h ** 2)\n\n    return c"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = math.sqrt(w**2 + h**2)\n    return s"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # calculate the length of the other side\n    l = math.sqrt((w**2)+(h**2))\n    # calculate the third side\n    s = math.sqrt(w**2 + (h/2)**2)\n    # return the third side\n    return s"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    area = math.sqrt(w*w + h*h)\n    third_side = area / 2\n    return third_side"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not isinstance(listval, list):\n        print(\"Input must be a list.\")\n        return\n    \n    max_val = listval[0]\n    for i in range(1, len(listval)):\n        if isinstance(listval[i], int) and listval[i] > max_val:\n            max_val = listval[i]\n        elif isinstance(listval[i], float) and listval[i] > max_val:\n            max_val = listval[i]\n        elif isinstance(listval[i], str) and listval[i] > max_val:\n            max_val = listval[i]\n        else:\n            print(\"Input must be a list of numbers, strings, or None.\")\n            return\n    \n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = None\n    for i in listval:\n        if max_val is None or i > max_val:\n            max_val = i\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # Initialize the maximum value to the first element in the list\n    max_val = listval[0]\n    # Loop through the list to find the maximum value\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n    max_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # initializing maximum value to the first element of the list\n    max_val = listval[0]\n    # iterating through the rest of the list\n    for i in range(1, len(listval)):\n        # checking if the current element is greater than the current maximum value\n        if listval[i] > max_val:\n            # updating the maximum value if it is\n            max_val = listval[i]\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n    maxval = listval[0]\n    for item in listval:\n        if item > maxval:\n            maxval = item\n    return maxval"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    max_value = None\n    for value in listval:\n        if max_value is None:\n            max_value = value\n        elif value > max_value:\n            max_value = value\n    return max_value"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_num = float('-inf')\n    for num in listval:\n        if num > max_num:\n            max_num = num\n    return max_num"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n    max_val = None\n    for item in listval:\n        if max_val is None:\n            max_val = item\n        elif item > max_val:\n            max_val = item\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n    max_val = None\n    for val in listval:\n        if max_val is None or val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor = 1\n    while divisor*divisor <= number:\n        if number % divisor == 0:\n            number //= divisor\n        else:\n            divisor += 1\n    return divisor*divisor\n"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inv_count = 0 \n    n = len(arr) \n    for i in range(n): \n        # iterating through all elements except first one \n        for j in range(i+1, n): \n            if arr[i] > arr[j]: \n                # if current element is greater than next one \n                inv_count += n-j-1 \n    return inv_count "
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n\n    mid = len(arr) // 2\n    left = arr[:mid]\n    right = arr[mid:]\n\n    left = merge_sort(left)\n    right = merge_sort(right)\n\n    return merge(left, right)\n\ndef merge(left, right):\n    result = []\n    i = j = 0\n\n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n\n    result += left[i:]\n    result += right[j:]\n\n    return result\n\ndef get_Inv_Count(arr):\n    inv_count = 0\n\n    sorted_arr = merge_sort(arr)\n\n    for i in range(1, len(sorted_arr)):\n        if sorted_arr[i] < sorted_arr[i - 1]:\n            inv_count += (i * (i - 1)) // 2\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr): \n    n = len(arr)\n    # Base case: if array has 1 or 0 elements, return 0 inversions\n    if n <= 1:\n        return 0\n    # Recursive case: divide the array into two halves, \n    # calculate inversions in each half and add them together\n    mid = n // 2\n    left_inv = get_Inv_Count(arr[:mid])\n    right_inv = get_Inv_Count(arr[mid:])\n    # Calculate the inversions in the two halves using merge sort\n    merge_inv = merge_sort(arr[:mid], arr[mid:])\n    # Return the sum of the inversions in the two halves\n    return left_inv + right_inv + merge_inv\n\ndef merge_sort(left, right):\n    if len(left) == 1 or len(right) == 1:\n        return len(left) + len(right)\n    mid = len(left) // 2\n    left_half = left[:mid]\n    right_half = right[:mid]\n    merge_inv = merge_sort(left_half, right_half)\n    left_inv = get_Inv_Count(left_half)\n    right_inv = get_Inv_Count(right_half)\n    return merge_inv + left_inv + right_inv"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Inv_Count(arr): \n    n = len(arr) \n    Inversions = 0 \n  \n    # One-based indexing \n    for i in range(1, n): \n        # Find the maximum element in the unsorted part of the array \n        max_idx = i \n        for j in range(i): \n            if arr[j] > arr[max_idx]: \n                max_idx = j \n  \n        # Swap arr[i] and arr[max_idx] \n        arr[i], arr[max_idx] = arr[max_idx], arr[i] \n  \n        # Count inversions \n        left, right = i, n - 1 \n        while left < right: \n            if arr[left] > arr[max_idx]: \n                left += 1 \n            if arr[right] > arr[max_idx]: \n                right -= 1 \n            if left < right: \n                Inversions += left - right + 1 \n  \n        # Recursive call for the unsorted part \n        get_Inv_Count(arr[:max_idx]) \n        get_Inv_Count(arr[max_idx+1:]) \n  \n    # Return the final count of inversions \n    return Inversions "
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n\n    n = len(arr)\n    # for each sub-array, count the number of inversions using merge sort algorithm\n    for start in range(0, n, 1):\n        mid = start + n // 2\n        end = start + n\n        merge_sort(arr, start, mid)\n        merge_sort(arr, mid, end)\n        merge(arr, start, mid, end)\n\n    # count the number of inversions using a nested loop\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                count += 1\n\n    return count\n\ndef merge_sort(arr, start, end):\n    if start < end:\n        mid = (start + end) // 2\n        merge_sort(arr, start, mid)\n        merge_sort(arr, mid + 1, end)\n        merge(arr, start, mid, end)\n\ndef merge(arr, start, mid, end):\n    i = start\n    j = mid + 1\n    k = start\n    inv_count = 0\n\n    while i <= mid and j <= end:\n        if arr[i] <= arr[j]:\n            arr[k] = arr[i]\n            i += 1\n        else:\n            arr[k] = arr[j]\n            j += 1\n            inv_count += mid - i + 1\n        k += 1\n\n    while i <= mid:\n        arr[k] = arr[i]\n        i += 1\n        k += 1\n\n    while j <= end:\n        arr[k] = arr[j]\n        j += 1\n        k += 1\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    mid = len(arr) // 2\n    left = merge_sort(arr[:mid])\n    right = merge_sort(arr[mid:])\n    return merge(left, right)\n\n\ndef merge(left, right):\n    i = j = k = 0\n    result = []\n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n    result += left[i:]\n    result += right[j:]\n    return result\n\n\ndef get_Inv_Count(arr):\n    sorted_arr = merge_sort(arr)\n    count = 0\n    i, j = 0, len(sorted_arr) - 1\n    while i < j:\n        if sorted_arr[i] > sorted_arr[j]:\n            count += j - i\n            i += 1\n        else:\n            j -= 1\n    return count\n"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    inv_count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += n - j - 1\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    # Create a helper array to store the indices of the array\n    helper = [0] * len(arr)\n    # Sort the array in ascending order\n    arr.sort()\n    # Count the inversions using the merge sort algorithm\n    inversions = merge_sort(arr, helper, 0, len(arr)-1)\n    return inversions\n\ndef merge_sort(arr, helper, left, right):\n    if left < right:\n        # Find the middle index of the array\n        mid = (left + right) // 2\n        # Recursively sort the left half of the array\n        merge_sort(arr, helper, left, mid)\n        # Recursively sort the right half of the array\n        merge_sort(arr, helper, mid+1, right)\n        # Merge the two sorted halves using the merge function\n        merge(arr, helper, left, mid, right)\n    return 0\n\ndef merge(arr, helper, left, mid, right):\n    # Merge the left and right halves of the array\n    i = left\n    j = mid + 1\n    k = left\n    inversions = 0\n    while i <= mid and j <= right:\n        if arr[i] <= arr[j]:\n            helper[k] = arr[i]\n            i += 1\n        else:\n            helper[k] = arr[j]\n            j += 1\n            inversions += mid - i + 1\n        k += 1\n    # Copy the remaining elements of the left half to the helper array\n    while i <= mid:\n        helper[k] = arr[i]\n        i += 1\n        k += 1\n    # Copy the remaining elements of the right half to the helper array\n    while j <= right:\n        helper[k] = arr[j]\n        j += 1\n        k += 1\n    # Copy the sorted elements back to the original array\n    for i in range(left, right+1):\n        arr[i] = helper[i]\n    return inversions"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def merge_sort(arr):\n    \"\"\"\n    Merge sort algorithm for counting inversions in an array.\n    \"\"\"\n    if len(arr) > 1:\n        mid = len(arr) // 2\n        left_half = arr[:mid]\n        right_half = arr[mid:]\n\n        merge_sort(left_half)\n        merge_sort(right_half)\n\n        i = j = k = 0\n\n        while i < len(left_half) and j < len(right_half):\n            if left_half[i] <= right_half[j]:\n                arr[k] = left_half[i]\n                i += 1\n            else:\n                arr[k] = right_half[j]\n                j += 1\n                inv_count += len(left_half) - i\n            k += 1\n\n        while i < len(left_half):\n            arr[k] = left_half[i]\n            i += 1\n            k += 1\n\n        while j < len(right_half):\n            arr[k] = right_half[j]\n            j += 1\n            k += 1\n\n\ndef get_Inv_Count(arr):\n    \"\"\"\n    Write a python function to count inversions in an array using merge sort.\n    \"\"\"\n    inv_count = 0\n    merge_sort(arr)\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    inv_count = 0\n\n    for i in range(1, n):\n        left, right = 0, i\n        while left < right:\n            mid = (left + right) // 2\n            if arr[i] < arr[mid]:\n                left = mid + 1\n            else:\n                right = mid\n        arr[i], arr[left] = arr[left], arr[i]\n        inv_count += n - i\n\n    return inv_count"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    if isinstance(list1, list):\n        for item in list1:\n            if isinstance(item, list):\n                flatten_list(item)\n            else:\n                yield item\n    else:\n        yield list1"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    # initialize an empty list to store the flattened list\n    flattened_list = []\n\n    # iterate over each element in the list\n    for element in list1:\n        # if the element is a list, recursively flatten it and append the flattened list to the flattened list\n        if type(element) == list:\n            flattened_list.extend(flatten_list(element))\n        # if the element is not a list, append it to the flattened list\n        else:\n            flattened_list.append(element)\n\n    # return the flattened list\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n\n    Args:\n        list1 (list): A nested list structure.\n\n    Returns:\n        list: A flattened list structure.\n    \"\"\"\n    flat_list = []\n\n    for item in list1:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    result = []\n    for item in lst:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for item in list1:\n        if type(item) == list:\n            flat_list += flatten_list(item)\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for item in list1:\n        if type(item) == list:\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for item in list1:\n        if type(item) is list:\n            flat_list += flatten_list(item)\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if type(item) is list:\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    \n    # Create a defaultdict to store the maximum aggregate for each combination of products\n    max_aggr = defaultdict(int)\n    \n    # Iterate through the list of tuples\n    for product, price in stdata:\n        # Get the current maximum aggregate for the current product\n        curr_max = max_aggr[product]\n        \n        # Update the maximum aggregate for the current product to the maximum of the current aggregate and the price\n        max_aggr[product] = max(curr_max, price)\n    \n    # Return the maximum aggregate from the defaultdict\n    return max(max_aggr.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_aggregate(stdata):\n    '''\n    This function takes a list of tuples (product_name, price) as input,\n    where each tuple represents a product in the store.\n\n    The function returns the maximum aggregate (i.e., the total price of all products)\n    of the store.\n    '''\n\n    # Create a defaultdict to store the prices of each product in the store\n    prices = defaultdict(int)\n\n    # Loop through each tuple in the list\n    for name, price in stdata:\n        # Add the price of the current product to the defaultdict\n        prices[name] += price\n\n    # Get the maximum value in the defaultdict and return it as the maximum aggregate\n    return max(prices.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Calculate the maximum aggregate from the list of tuples.\n    '''\n    max_aggr = defaultdict(int)\n    for item in stdata:\n        for item_type, num in item:\n            max_aggr[item_type] += num\n    max_aggr_list = sorted(max_aggr.items(), key=lambda x: x[1], reverse=True)\n    return max_aggr_list[0][1]"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    This function takes a list of tuples as input and returns the maximum aggregate.\n    '''\n    max_aggr = defaultdict(lambda: float('-inf'))\n    for val in stdata:\n        for key, val1 in val:\n            if val1 > max_aggr[key]:\n                max_aggr[key] = val1\n    return max_aggr.values()[0]"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_sum = defaultdict(int)\n    max_sum[1] = 0\n    for (num, weight) in stdata:\n        max_sum[weight] = max(max_sum[weight], num)\n    return max_sum[max(max_sum)]"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a defaultdict to store the count of each item\n    item_count = defaultdict(int)\n    # Calculate the count of each item in the list of tuples\n    for item, quantity in stdata:\n        item_count[item] += quantity\n    # Find the maximum count\n    max_count = max(item_count.values())\n    # Initialize the maximum aggregate to zero\n    max_aggregate = 0\n    # Calculate the maximum aggregate for each item in the list\n    for item, quantity in stdata:\n        if item_count[item] == max_count:\n            max_aggregate += quantity\n    # Return the maximum aggregate\n    return max_aggregate"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # create a defaultdict to store the maximum aggregate for each product\n    max_aggs = defaultdict(int)\n\n    # iterate over the list of tuples\n    for item, agg in stdata:\n        # calculate the maximum aggregate\n        max_agg = max(max_aggs.values()) + agg\n        # update the maximum aggregate for the current product\n        max_aggs[item] = max_agg\n\n    # return the maximum aggregate for all products\n    return max(max_aggs.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # create a dictionary to store the count of each unique item\n    item_count = defaultdict(int)\n\n    # loop through the list of tuples\n    for item, quantity in stdata:\n        # add the item to the dictionary and increment its count\n        item_count[item] += quantity\n\n    # loop through the dictionary and find the maximum count\n    max_count = 0\n    for count in item_count.values():\n        if count > max_count:\n            max_count = count\n\n    # calculate the maximum aggregate\n    max_agg = sum(item_count[item] * item_price for item, quantity, item_price in stdata) / max_count\n\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a dictionary to store the maximum aggregate for each unique item\n    max_dict = defaultdict(int)\n    \n    # Iterate through the list of tuples\n    for item, price in stdata:\n        # Update the maximum aggregate for the current item\n        max_dict[item] = max(max_dict[item], price)\n    \n    # Find the maximum aggregate from the dictionary\n    max_agg = max(max_dict.values())\n    \n    # Return the maximum aggregate\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    d = defaultdict(int)\n    for item in stdata:\n        d[item[0]] += item[1]\n    max_agg = max(d.values())\n    return max_agg"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    def is_valid_binary_seq(binary_seq):\n        '''\n        Check if the binary sequence is valid: that is, the sum of the first n bits is equal to the sum of the last n bits.\n        '''\n        first_bits = int(binary_seq[:n], 2)\n        last_bits = int(binary_seq[-n:], 2)\n        return first_bits == last_bits\n    \n    count = 0\n    for i in range(2**n):\n        binary_seq = format(i, f'0{n}b')\n        if is_valid_binary_seq(binary_seq):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**n):\n        binary = bin(i)[2:]\n        if sum(int(bit) for bit in binary[:n]) == sum(int(bit) for bit in binary[n:]):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n-1):\n        if sum(int(digit) for digit in bin(i)[2:].zfill(n)) == sum(int(digit) for digit in bin(i)[2:].zfill(n-1)):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    \n    count = 0\n    \n    for i in range(2**n, 2**2*n+1):\n        first_bits = bin(i)[2:].zfill(n)\n        last_bits = bin(i-2**n)[2:].zfill(n)\n        \n        if first_bits == last_bits:\n            count += 1\n            \n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n, 2**(2*n+1)):\n        binary_str = bin(i)[2:]\n        if int(binary_str[:n]) == int(binary_str[-n:]):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n): \n        binary_str = bin(i)[2:] # removing the '0b' prefix \n        if binary_str[:n] == binary_str[-n:]: # checking if the first n bits are same as the last n bits \n            count += 1\n    return count "
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2 ** n, 2 ** (2 * n)):\n        bits_sum = sum(int(digit) for digit in bin(i)[2:])\n        if bits_sum == i // 2:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n, 2**n + 2**n, 2**n):\n        # check if the first n bits are the same as the last n bits\n        if sum(int(digit) for digit in bin(i)[2:].zfill(n)) == i // (2**n) % (2**n):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(1, 2**n+1):\n        if bin(i)[2:].startswith(bin(i-1)[2:]):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(1, 2**n+1):\n        if sum(i[:n]) == sum(i[-n:]):\n            count += 1\n    return count"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    \"\"\"\n    Write a function to find the depth of a dictionary.\n    \"\"\"\n    if isinstance(d, dict):\n        return 1 + max(dict_depth(v) for k, v in d.items())\n    else:\n        return 0"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    stack = [d]\n    depth = 0\n\n    while stack:\n        current_dict = stack.pop()\n        depth += 1\n\n        for key in current_dict:\n            if isinstance(current_dict[key], dict):\n                stack.append(current_dict[key])\n\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 1\n    else:\n        return 1 + max(dict_depth(v) for k, v in d.items())"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth = max(depth, dict_depth(value) + 1)\n        else:\n            depth += 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth = max(depth, 1 + dict_depth(value))\n        else:\n            depth += 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            new_depth = dict_depth(value)\n            if new_depth > depth:\n                depth = new_depth + 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for item in d.values():\n        if isinstance(item, dict):\n            depth += 1\n        elif isinstance(item, list):\n            for item2 in item:\n                if isinstance(item2, dict):\n                    depth += 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # initialize depth variable to 1\n    depth = 1\n    \n    # loop through all keys and values in dictionary\n    for value in d.values():\n        \n        # check if value is another dictionary\n        if isinstance(value, dict):\n            # increment depth by 1\n            depth += 1\n            \n            # recursively call dict_depth function on value\n            dict_depth(value)\n    \n    # return depth\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    current_depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            current_depth += 1\n            max_depth = max(max_depth, current_depth)\n            current_depth -= 1\n        else:\n            current_depth += 1\n            max_depth = max(max_depth, current_depth)\n            current_depth -= 1\n    return max_depth + 1"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth += 1\n            depth += dict_depth(d[key])\n    return depth"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    Write a python function to find element at a given index after number of rotations.\n    \"\"\"\n    # Initialize variables\n    n = len(arr)\n    rotations_needed = rotations % n\n    current_rotation = 0\n\n    # Find the current rotation\n    while current_rotation < rotations_needed:\n        current_rotation += ranges[arr[current_rotation]]\n\n    # Compute the index after rotations\n    final_index = (current_rotation + index) % n\n\n    # Return the element at the final index\n    return arr[final_index]\n"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # Find the index of the element to be rotated\n    element_to_rotate = arr[index]\n    # Find the index of the last element in the array\n    last_index = len(arr) - 1\n    # Find the index of the first element in the rotated array\n    first_index = (last_index - rotations + 1) % last_index\n    # Find the index of the element after the first element in the rotated array\n    second_index = (first_index + 1) % last_index\n    # Find the element to be inserted\n    element_to_insert = arr[(first_index + rotations) % last_index]\n    # Create a new array with the required element\n    rotated_arr = arr.copy()\n    # Insert the element to be rotated at the given index\n    rotated_arr[index] = element_to_insert\n    # Insert the second element in the rotated array at the first index\n    rotated_arr[first_index] = rotated_arr[second_index]\n    # Insert the first element in the rotated array at the second index\n    rotated_arr[second_index] = element_to_rotate\n    # Find the element at the given index after rotating the array\n    result = rotated_arr[index]\n    return result"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n\n    Parameters:\n    arr (list): List of integers.\n    ranges (list): List of tuples where each tuple contains two integers, first is the starting index and the second is the ending index.\n    rotations (list): List of tuples where each tuple contains two integers, first is the starting index and the second is the ending index.\n    index (int): Index of the element we want to find.\n\n    Returns:\n    int: The element at the given index after the number of rotations.\n    '''\n    # Initialize the sum of squares of the elements at the starting index\n    start_sum = sum(arr[i] ** 2 for i in range(ranges[0][0], ranges[0][1] + 1))\n    # Initialize the sum of squares of the elements at the ending index\n    end_sum = sum(arr[i] ** 2 for i in range(ranges[1][0], ranges[1][1] + 1))\n\n    # Iterate through the rotations and calculate the sum of squares of the elements at the starting and ending indices\n    for i in rotations:\n        start_sum -= arr[i[0]] ** 2\n        start_sum += arr[i[1]] ** 2\n        end_sum -= arr[i[0]] ** 2\n        end_sum += arr[i[1]] ** 2\n\n    # Calculate the element at the given index after the number of rotations\n    element_after_rotations = start_sum - end_sum\n\n    # Return the element at the given index after the number of rotations\n    return element_after_rotations"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    Write a python function to find element at a given index after number of rotations.\n\n    Args:\n    arr (list): List of elements to be rotated.\n    ranges (list): List of ranges of each element in arr.\n    rotations (list): List of rotations for each element in arr.\n    index (int): Index of the element to be found.\n\n    Returns:\n    int: The element at the given index after number of rotations.\n\n    \"\"\"\n\n    def rotate(arr, ranges, rotation):\n        \"\"\"\n        Helper function to rotate an element in arr.\n\n        Args:\n        arr (list): List of elements to be rotated.\n        ranges (list): List of ranges of each element in arr.\n        rotation (int): Number of rotations for an element.\n\n        Returns:\n        list: The rotated element in arr.\n\n        \"\"\"\n        i = 0\n        for j in range(rotation):\n            arr[i], arr[i + rotation] = arr[i + rotation], arr[i]\n            i += 1\n        return arr\n\n    def find_element(arr, ranges, index):\n        \"\"\"\n        Helper function to find the element at the given index after number of rotations.\n\n        Args:\n        arr (list): List of elements to be rotated.\n        ranges (list): List of ranges of each element in arr.\n        index (int): Index of the element to be found.\n\n        Returns:\n        int: The element at the given index after number of rotations.\n\n        \"\"\"\n        for i, r in enumerate(ranges):\n            if index >= r:\n                index -= r\n        for i in range(len(ranges)):\n            if index == 0:\n                return arr[i]\n            index -= ranges[i]\n        return None\n\n    rotated_arr = [arr[i] for i in rotations]\n    for rotation in rotations:\n        rotated_arr = rotate(rotated_arr, ranges, rotation)\n\n    return find_element(rotated_arr, ranges, index)"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # find the number of rotations that we need to perform\n    count = 0\n    for i in range(len(ranges)):\n        count += ranges[i]\n        if count > index:\n            break\n    # perform rotations and find the element at the given index\n    temp = arr\n    for i in range(rotations):\n        arr = []\n        for j in range(len(temp)):\n            arr.append(temp[j-1])\n        temp = arr\n    return arr[index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    Write a python function to find element at a given index after number of rotations.\n    \"\"\"\n    def rotate_array(arr, d):\n        \"\"\"\n        Rotate an array arr by d elements.\n        \"\"\"\n        n = len(arr)\n        arr = arr[-n:] + arr[:-n]\n        return arr\n\n    # apply rotations to the array\n    for i in range(rotations):\n        arr = rotate_array(arr, ranges[i])\n\n    # find the element at the given index\n    return arr[index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes an array, a list of ranges for rotations, and a list of rotations, as well as an index.\n    It returns the element at the given index after applying the rotations.\n    \"\"\"\n\n    # Initialize the result variable with the initial element at the given index.\n    result = arr[index]\n\n    # Iterate through each range in the list of ranges.\n    for i in range(len(ranges)):\n\n        # Calculate the number of rotations required for this range.\n        rotations_needed = ranges[i]\n\n        # Calculate the total number of rotations required for all the ranges.\n        total_rotations = sum(ranges)\n\n        # Calculate the number of rotations after the current range.\n        rotations_after = rotations[i]\n\n        # Calculate the index of the element after the required rotations.\n        rotated_index = (index + rotations_needed - 1) % total_rotations\n\n        # Calculate the actual index of the element after the rotations.\n        actual_index = (rotated_index + rotations_after - 1) % total_rotations\n\n        # Update the result variable with the element at the new index.\n        result = arr[actual_index]\n\n    return result"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    This function takes an array, a list of ranges, the number of rotations, and the index where the element needs to be found.\n    The function returns the element at the given index after the specified number of rotations.\n    '''\n\n    # Initialize variables\n    element = arr[index]\n    count = 0\n    i = 0\n\n    # Loop through the array and check if the element is present in the given range\n    while i < len(arr):\n        if element in arr[i:i+ranges[count][0]]:\n            break\n        count += 1\n        i += ranges[count][1]\n\n    # Rotate the array to find the element\n    if count == len(ranges):\n        return element\n    else:\n        for _ in range(rotations):\n            temp = arr[i]\n            j = i + ranges[count][1]\n            for k in range(ranges[count][0]):\n                arr[i+k] = arr[j+k]\n            arr[j+ranges[count][0]-k] = temp\n            i += ranges[count][1]\n        element = arr[index]\n        count = 0\n        i = 0\n        while i < len(arr):\n            if element in arr[i:i+ranges[count][0]]:\n                break\n            count += 1\n            i += ranges[count][1]\n        return arr[i]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n\n    Parameters:\n    arr (list): A list of integers to be rotated.\n    ranges (list): A list of integers indicating the range of values that can be used to rotate the array.\n    rotations (int): The number of rotations to perform.\n    index (int): The index of the element to find.\n\n    Returns:\n    The element at the given index after the given number of rotations.\n    '''\n\n    # Initialize the element to be found and its index in the rotated array.\n    element = arr[index]\n    rotated_index = index\n\n    # Perform the specified number of rotations.\n    for i in range(rotations):\n        # Generate a random index within the specified range.\n        random_index = random.randint(0, len(ranges) - 1)\n\n        # Swap the element at the current index with the element at the randomly selected index.\n        arr[index], arr[random_index] = arr[random_index], arr[index]\n\n        # Update the rotated index and the element to be found.\n        rotated_index = (rotated_index + random_index) % len(arr)\n        element = arr[rotated_index]\n\n    return element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # Finding the last element\n    last_element = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > last_element:\n            last_element = arr[i]\n\n    # Finding the number of rotations needed to bring the last element to the given index\n    rotations_needed = 0\n    current_index = 0\n    while current_index < index:\n        current_index += last_element\n        rotations_needed += 1\n\n    # Finding the element at the given index after the number of rotations\n    element_at_index = last_element\n    for i in range(rotations_needed):\n        current_index -= last_element\n        if current_index < 0:\n            current_index += len(arr)\n        element_at_index = arr[current_index]\n\n    return element_at_index"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for i in range(len(words)):\n        if words[i][0] == 'p':\n            return words[i], words[i+1]\n    return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p'\n    result = re.findall(pattern, words, re.IGNORECASE)\n    if len(result) == 2:\n        return result\n    else:\n        return 'No words starting with p found.'"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(\"^p\") # pattern to match words starting with 'p'\n    for i in range(len(words)):\n        if pattern.match(words[i]): # match pattern with current word\n            if i+1 < len(words) and pattern.match(words[i+1]): # check if there is another word after the current match\n                return words[i], words[i+1] # return two words if they exist\n    return None # if no matches found, return None\n"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(\"^p\")\n    for i in range(len(words)):\n        if pattern.match(words[i]):\n            return words[i:i+2]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # Regular expression to match words starting with 'p'\n    pattern = re.compile(r'\\bp\\w+')\n    \n    # Iterate over the list of words and check if the first letter matches 'p'\n    for word in words:\n        match = pattern.match(word)\n        if match:\n            # Return the two matching words if found\n            return match.group(), match.group(0)"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # Find all the words that start with 'p'\n    p_words = [word for word in words if word[0] == 'p']\n    \n    # If there are no words starting with 'p', return None\n    if not p_words:\n        return None\n    \n    # Return two random words starting with 'p' from the list\n    return p_words[0], p_words[1]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p[a-zA-Z]*')\n    matches = pattern.findall(words)\n    if len(matches) == 0:\n        return None\n    elif len(matches) == 1:\n        return matches[0]\n    else:\n        return matches"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p')\n    return pattern.search(words).groups()"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if re.match(r'^p', word):\n            p_words.append(word)\n            if len(p_words) == 2:\n                return p_words\n    return None\n"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'\\b[Pp]ro\\w+')\n    match = pattern.search(words)\n    if match:\n        return match.group(), match.group(1)\n    else:\n        return \"There are no words starting with 'p' in the given list.\", None"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    max_sum = float('-inf')\n    max_subseq = []\n    for i in range(index, n):\n        if i == index or a[i] > a[i - 1]:\n            current_sum = a[i] + max_sum_increasing_subseq(a, n, i + 1, k)\n        else:\n            current_sum = max_sum_increasing_subseq(a, n, i + 1, k)\n        if current_sum > max_sum and k > i:\n            max_sum = current_sum\n            max_subseq = [a[i], a[index]]\n            for j in range(i + 1, k + 1):\n                max_subseq.append(a[j])\n    return max_sum, max_subseq\n"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if k > index:\n        return 0\n    if k == index:\n        return a[k]\n    \n    dp = [[0 for j in range(k+1)] for i in range(n+1)]\n    \n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            if a[i] > a[i-1]:\n                dp[i][j] = max(dp[i-1][j], dp[i-1][j-1]) + a[i]\n            else:\n                dp[i][j] = dp[i-1][j]\n    \n    return dp[n][k]"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if k > index:\n        return 0, 0, 0, 0\n\n    if index == 0:\n        return 0, 0, 0, 0\n\n    dp = [[0] * (k+1) for _ in range(n+1)]\n\n    max_sum = 0\n    max_sum_prev = 0\n    max_sum_curr = 0\n\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            if j == 1:\n                dp[i][j] = a[i-1]\n            elif j == 2:\n                dp[i][j] = max(dp[i-1][j], dp[i-1][j-1], a[i-1])\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i-1][j-1], dp[i-1][j-2]) + a[i-1]\n            if dp[i][j] > max_sum_curr:\n                max_sum_curr = dp[i][j]\n                max_sum = max_sum_curr\n                max_sum_prev = max(max_sum_prev, max_sum_curr)\n\n    return max_sum, max_sum_prev, max_sum_curr, max_sum_prev - max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    \n    # initialize the maximum sum\n    max_sum = float('-inf')\n    \n    # initialize the maximum subsequence\n    max_subseq = [float('-inf')] * (k + 1)\n    \n    # initialize the prefix sum\n    prefix_sum = 0\n    \n    # loop through the array from i to n\n    for i in range(index, n):\n        \n        # update the prefix sum\n        prefix_sum += a[i]\n        \n        # check if the current prefix sum is greater than the maximum sum\n        if prefix_sum > max_sum:\n            max_sum = prefix_sum\n            max_subseq[i - index] = prefix_sum\n        \n        # check if the current prefix sum is greater than the maximum subsequence of the last k elements\n        if i - index >= k:\n            max_subseq[i - index - k] = max(max_subseq[i - index - k], prefix_sum)\n    \n    # return the maximum sum of increasing subsequence\n    return max_sum, max_subseq"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if index == 0:\n        return 0\n    \n    if k > index:\n        return max_sum_increasing_subseq(a, n, index-1, k)\n    \n    dp = [0] * n\n    dp[0] = a[0]\n    \n    for i in range(1, n):\n        if i <= index:\n            dp[i] = dp[i-1]\n        elif i > index and a[i] > a[k] and a[i] > a[index]:\n            dp[i] = max(dp[i-1], dp[i-2]+a[i])\n        else:\n            dp[i] = dp[i-1]\n    \n    return dp[index]"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    if n == 0:\n        return 0\n\n    dp = [0] * (n + 1)\n    max_sum = float('-inf')\n\n    for i in range(n + 1):\n        for j in range(i, n + 1):\n            if a[j] > a[i]:\n                dp[j] = max(dp[j], dp[i] + a[j])\n                max_sum = max(max_sum, dp[j])\n\n    if k < index:\n        return max_sum\n    else:\n        max_sum_k = float('-inf')\n        for i in range(index, n + 1):\n            max_sum_k = max(max_sum_k, dp[i])\n\n        return max_sum_k"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if k > n:\n        return 0\n\n    # Initialize the result\n    result = [0] * (k + 1)\n    result[0] = 0\n    result[1] = a[0]\n\n    # Iterate through the array from 1 to n\n    for i in range(1, n + 1):\n        # Find the maximum subsequence ending at the ith index\n        max_ending_at_ith = 0\n        for j in range(max(1, index - i + 1), min(index, i) + 1):\n            max_ending_at_ith = max(max_ending_at_ith, result[j] + a[i])\n\n        # Update the result for the given kth element\n        if i >= k:\n            result[i] = max(result[i], max_ending_at_ith)\n\n    # Return the maximum sum of increasing subsequence\n    return result[k]"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n\n    # Initialize a list to store the maximum sum of increasing subsequence for each index\n    max_sum = [0]*n\n    \n    # Initialize the maximum sum for the first index\n    max_sum[0] = a[0]\n\n    # Initialize the maximum sum for the last index\n    max_sum[n-1] = a[n-1]\n\n    # Initialize the maximum sum for the middle indexes\n    for i in range(1, n-1):\n        if a[i] < a[i-1]:\n            max_sum[i] = max(max_sum[i-1] + a[i], a[i])\n        else:\n            max_sum[i] = max_sum[i-1]\n\n    # Initialize the maximum sum for the first index\n    max_sum[0] = max(max_sum[0], max_sum[1] + a[0])\n\n    # Initialize the maximum sum for the last index\n    max_sum[n-1] = max(max_sum[n-1], max_sum[n-2] + a[n-1])\n\n    # Initialize the maximum sum for the middle indexes\n    for i in range(1, n-2):\n        if a[i+1] < a[i]:\n            max_sum[i+1] = max(max_sum[i] + a[i+1], max_sum[i+1])\n        else:\n            max_sum[i+1] = max_sum[i]\n\n    # Find the maximum sum including the kth element which is after i\n    max_sum[k] = max(max_sum[k], max_sum[k-1] + a[k])\n\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n\n    # initialize the dp array to -infinity\n    dp = [-float('inf')] * n\n\n    # initialize the maximum sum\n    max_sum = -float('inf')\n\n    # loop through the array and compute the maximum sum of increasing subsequence\n    for i in range(n):\n\n        # if the current element is not greater than the kth element\n        if a[i] <= a[k]:\n\n            # if the current element is less than or equal to the previous element in the dp array\n            if a[i] <= a[i - 1]:\n\n                # update the dp array with the sum of the current element and the previous maximum sum of increasing subsequence till the current element\n                dp[i] = dp[i - 1] + a[i]\n\n            # if the current element is greater than the previous element in the dp array\n            else:\n\n                # update the dp array with the current maximum sum of increasing subsequence till the current element\n                dp[i] = dp[i - 1]\n\n            # if the current element is the kth element\n            if i == k:\n\n                # if the current maximum sum is greater than the maximum sum found till now\n                if dp[i] > max_sum:\n\n                    # update the maximum sum\n                    max_sum = dp[i]\n\n    # return the maximum sum of increasing subsequence\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if k > n or k > index:\n        return 0\n    if index == n:\n        return max(a[n-k:n]) + a[n-k]\n    if a[index] > a[index+1]:\n        left_sum = max_sum_increasing_subseq(a, n, index+1, k) + a[index]\n    else:\n        left_sum = max_sum_increasing_subseq(a, n, index+1, k)\n    if a[index] < a[index+1]:\n        right_sum = max_sum_increasing_subseq(a, n, index+1, k)\n    else:\n        right_sum = max_sum_increasing_subseq(a, n, index+1, k)\n    return max(left_sum, right_sum)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Write a function to get a colon of a tuple.\n    \"\"\"\n\n    # Create a copy of the tuple to avoid modifying original\n    tuplex_copy = deepcopy(tuplex)\n\n    # Get the indices of the elements in the colon\n    colon_indices = []\n    for i in range(m):\n        for j in range(n):\n            colon_indices.append(tuplex_copy.index((i, j)))\n\n    # Return the colon of the tuple\n    return tuple(tuplex_copy[i] for i in colon_indices)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if len(tuplex) == 0:\n        return []\n    if len(tuplex) == 1:\n        return [tuplex[0]]\n    if len(tuplex) == 2:\n        return [tuplex[0], tuplex[1]]\n    if len(tuplex) == m:\n        return [tuplex[0]] + colon_tuplex(tuplex[1:], m-1, n)\n    if len(tuplex) == m+1:\n        return [tuplex[0], tuplex[m]] + colon_tuplex(tuplex[m+1:], m-1, n)\n    if len(tuplex) == m+n:\n        return [tuplex[0], tuplex[m], tuplex[m+1]] + colon_tuplex(tuplex[m+n:], m, n-1)\n    if len(tuplex) == m+n+1:\n        return [tuplex[0], tuplex[m], tuplex[m+1], tuplex[m+n]] + colon_tuplex(tuplex[m+n+1:], m, n-1)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n\n    :param tuplex: Tuple to get the colon from\n    :type tuplex: tuple\n    :param m: Number of rows in the colon\n    :type m: int\n    :param n: Number of columns in the colon\n    :type n: int\n    :return: A tuple of m tuples of n elements, where each inner tuple contains m elements from tuplex\n    :rtype: tuple\n    '''\n    new_tuplex = deepcopy(tuplex)\n    return tuple(new_tuplex[i:i+n] for i in range(0, len(new_tuplex), n))"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Create a copy of the tuple\n    col = deepcopy(tuplex)\n    # Get the length of the tuple\n    length = len(col)\n    # If m is greater than or equal to n, swap rows and columns\n    if m >= n:\n        # Swap rows\n        for i in range(m):\n            for j in range(length - m):\n                temp = col[i][j]\n                col[i][j] = col[j][i]\n                col[j][i] = temp\n        # Swap columns\n        for i in range(m, length):\n            for j in range(m):\n                temp = col[i][j]\n                col[i][j] = col[i][j+m]\n                col[i][j+m] = temp\n    # If m is less than or equal to n, swap columns only\n    else:\n        # Swap columns\n        for i in range(m, length):\n            for j in range(n):\n                temp = col[i][j]\n                col[i][j] = col[i+n][j]\n                col[i+n][j] = temp\n    # Return the colon\n    return col"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    col = deepcopy(tuplex)\n    for i in range(m):\n        for j in range(n):\n            col[i] = col[i][j]\n    return col"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Check if input is valid\n    if len(tuplex)!= m:\n        raise ValueError('Invalid tuple length')\n    if not all(isinstance(i, (int, float)) for i in tuplex):\n        raise ValueError('Invalid tuple elements')\n    # Make a copy of the input tuple to avoid modifying it\n    tuplex = deepcopy(tuplex)\n    # Loop through the tuple elements and append a colon if m is divisible by n\n    for i in range(len(tuplex)):\n        if (i + 1) % n == 0:\n            tuplex.insert(i+1, ':')\n    # Return the colonized tuple\n    return tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # initialize the result list\n    result = []\n    # iterate over each tuple element\n    for i in range(m):\n        # create a copy of the tuplex\n        tuplex_copy = deepcopy(tuplex)\n        # reverse the i-th column of the copy\n        tuplex_copy[i], tuplex_copy[n-1-i] = tuplex_copy[n-1-i], tuplex_copy[i]\n        # add the copy to the result list\n        result.append(tuplex_copy)\n    # return the result list\n    return result"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m == 0:\n        return ()\n    else:\n        col = deepcopy(tuplex)\n        for i in range(1,n+1):\n            col = col[:i] + (tuplex[i-1],) + col[i:]\n        return col[:m]"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Create a copy of the input tuple\n    tuplex_copy = deepcopy(tuplex)\n    # Sort the tuple\n    tuplex_copy.sort()\n    # Get the number of elements in the sorted tuple\n    n_sorted = len(tuplex_copy)\n    # Get the index of the mth element in the sorted tuple\n    mth_index = (m-1) * n_sorted // (n-1)\n    # Get the first m elements of the sorted tuple\n    m_elements = tuplex_copy[:mth_index]\n    # Create a new tuple with the first m elements of the original tuple and the last n-m elements of the original tuple\n    colon_tuplex = (m_elements + tuplex_copy[-(n-m):])\n    # Return the colon_tuplex\n    return colon_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    col = []\n    for i in range(m):\n        for j in range(n):\n            col.append(tuplex[i][j])\n    return tuple(col)"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n\n    # Calculate the maximum value of the first list\n    max_val1 = max(nums1)\n\n    # Calculate the maximum value of the second list\n    max_val2 = max(nums2)\n\n    # Initialize a list to store the products of each factor\n    product_list = []\n\n    # Loop through all possible combinations of factors\n    for i in range(min(len(nums1), len(nums2))):\n        # Calculate the product of the i-th factor of nums1 and nums2\n        prod = nums1[i] * nums2[i]\n\n        # Check if the product is greater than the current maximum product\n        if prod > max_val1 * max_val2 * product_list[-1]:\n            # If yes, update the maximum product and the list of products\n            max_val1, max_val2 = max(nums1[i], nums2[i]), max(max_val1, max_val2)\n            product_list = [prod]\n        elif prod > max_val1 * max_val2 * product_list[-1] and prod > max_val1 * product_list[-1] * max_val2:\n            # If the product is not greater than the maximum product, but is greater than the previous maximum product, update the maximum product and the list of products\n            max_val1, max_val2 = max(nums1[i], nums2[i]), max(max_val1, max_val2)\n            product_list = [prod]\n        elif prod > max_val2 * product_list[-1] * max_val1:\n            # If the product is not greater than the maximum product and not greater than the previous maximum product, add the product to the list of products\n            max_val1, max_val2 = max(nums1[i], nums2[i]), max(max_val1, max_val2)\n            product_list.append(prod)\n\n    # Sort the list of products in descending order\n    product_list.sort(reverse=True)\n\n    # Return the specified number of largest products\n    return product_list[:N]"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Initialize variables to store the largest products and the indices of their corresponding elements in each list\n    largest_products = []\n    indices = []\n    \n    # Find the indices of the largest elements in each list\n    for i in range(N):\n        max_index1 = nums1.index(max(nums1))\n        max_index2 = nums2.index(max(nums2))\n        indices.append([max_index1, max_index2])\n        \n        # Remove the largest elements from their corresponding lists\n        nums1.pop(max_index1)\n        nums2.pop(max_index2)\n    \n    # Calculate the largest products for each combination of factors\n    for i in range(N):\n        for j in range(i+1, N):\n            product = nums1[indices[i][0]] * nums2[indices[j][1]]\n            largest_products.append(product)\n    \n    # Sort the products in descending order and return the N largest products\n    largest_products.sort(reverse=True)\n    return largest_products[:N]"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the two lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Initialize two pointers for each list\n    i = 0\n    j = 0\n\n    # Initialize two variables to store the largest products\n    largest_product1 = nums1[0]\n    largest_product2 = nums2[0]\n\n    # Iterate N times\n    for _ in range(N):\n        # Calculate the product of the current largest products in each list\n        current_product1 = largest_product1 * nums1[i]\n        current_product2 = largest_product2 * nums2[j]\n\n        # Update the largest products if the current product is greater\n        if current_product1 > largest_product1:\n            largest_product1 = current_product1\n        if current_product2 > largest_product2:\n            largest_product2 = current_product2\n\n        # Increment the pointers for each list\n        i += 1\n        j += 1\n\n        # If we have reached the end of one of the lists, switch to the other\n        if i == len(nums1):\n            i = 0\n            j += 1\n        if j == len(nums2):\n            j = 0\n            i += 1\n\n    # Return the largest products\n    return largest_product1, largest_product2"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the two lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Calculate the products of the first N elements\n    products = [nums1[i] * nums2[j] for i in range(len(nums1)) for j in range(i+1, len(nums2))]\n\n    # Keep track of the maximum and minimum products seen so far\n    max_product = max(products[:N])\n    min_product = min(products[:N])\n\n    # Find the indices of the maximum and minimum products\n    max_index = products.index(max_product)\n    min_index = products.index(min_product)\n\n    # Return the indices of the selected factors\n    return max_index, min_index"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if N > len(nums1) or N > len(nums2):\n        raise ValueError(\"The product number N must be less than or equal to the length of the longest list.\")\n    \n    # Find the maximum product of any two elements from each list\n    max_product = float('-inf')\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            product = nums1[i] * nums2[j]\n            if product > max_product:\n                max_product = product\n    \n    # Find the product of N largest products from each list\n    for i in range(N):\n        for j in range(len(nums1)):\n            for k in range(len(nums2)):\n                product = nums1[j] * nums2[k]\n                if product == max_product:\n                    return product\n    \n    # If no such product exists, return None\n    return None"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    largest1 = []\n    largest2 = []\n    for i in range(N):\n        largest1.append(max(nums1[i], nums2[i]))\n        largest2.append(min(nums1[i], nums2[i]))\n    return max(largest1) * max(largest2)"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    # Sort the two lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    # Initialize the result list and counters\n    result = []\n    count1, count2 = 0, 0\n    # Iterate over the N largest elements of each list\n    for i in range(N):\n        # Calculate the product of the largest elements in each list\n        product1 = nums1[i] * nums2[i]\n        # Update the counter for the first list\n        count1 += 1\n        # Check if the second list has at least as many elements as the first list\n        if count2 >= count1:\n            # Calculate the product of the largest elements in each list\n            product2 = nums1[i] * nums2[count2 - 1]\n            # Update the counter for the second list\n            count2 += 1\n            # Check if the product is larger than the maximum product seen so far\n            if product2 > result[-1] if result else 0:\n                # Update the maximum product seen so far\n                result = [product2]\n            # If the product is equal to the maximum product seen so far, add it to the result list\n            elif product2 == result[-1]:\n                result.append(product2)\n    # Return the result list\n    return result"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the two lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Initialize the result list with zeros\n    result = [0] * N\n\n    # Loop through each element of the result list\n    for i in range(N):\n        # Calculate the product of the largest elements of both lists\n        largest_product = nums1[0] * nums2[0]\n\n        # Update the result list with the largest product found so far\n        result[i] = largest_product\n\n        # Remove the largest elements from both lists\n        nums1 = nums1[1:]\n        nums2 = nums2[1:]\n\n    return result"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    max_product = 0\n    max_nums = []\n    for i in range(len(nums1)):\n        nums1_factor = 1\n        nums2_factor = 1\n        for j in range(i+1, len(nums1)+1):\n            product = nums1[i] * nums2[j-1]\n            if product > max_product:\n                max_product = product\n                max_nums = [nums1[i], nums2[j-1]]\n            if product > 0:\n                nums1_factor = max(nums1_factor, product)\n            if product < 0:\n                nums2_factor = max(nums2_factor, product)\n        if nums1_factor > 0:\n            max_product = max(max_product, nums1_factor)\n        if nums2_factor > 0:\n            max_product = max(max_product, nums2_factor)\n        if len(max_nums) == N:\n            return max_nums"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the two input lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Initialize the result list to store the largest products\n    result = []\n\n    # Loop through the number of products we want to find\n    for i in range(N):\n        # Calculate the product of the first factor from both lists\n        factor1 = nums1[i] * nums2[i]\n\n        # Check if this product is already in the result list\n        if factor1 in result:\n            continue\n\n        # Calculate the product of the second factor from both lists\n        factor2 = nums1[-i-1] * nums2[-i-1]\n\n        # Check if this product is already in the result list\n        if factor2 in result:\n            continue\n\n        # Add the two factors to the result list and break out of the loop\n        result.append(factor1)\n        result.append(factor2)\n        break\n\n    # Return the result list\n    return result"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximum(a,b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximum(a,b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # Convert the string to a list of characters\n    lst = list(str1)\n    # Convert the list to a tuple\n    tup = tuple(lst)\n    # Return the tuple\n    return tup"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # Convert the string to a list of characters\n    lst = list(str1)\n    # Convert the list of characters to a tuple\n    tup = tuple(lst)\n    return tup"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Write a function to convert a given string to a tuple of characters.\n    \"\"\"\n    # Convert string to list of characters\n    lst = list(str1)\n    # Convert list to tuple\n    tup = tuple(lst)\n    # Return the tuple\n    return tup"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n):\n    # Check if the given number is 0\n    if n == 0:\n        # If it's 0, return 0\n        return 0\n    \n    # Convert the number to binary string\n    binary = bin(n)[2:]\n    \n    # Iterate over the binary string and find the first unset bit\n    for i in range(len(binary)):\n        if binary[i] == '0':\n            break\n            \n    # Convert the index to binary string and shift it to the left by 1 position\n    set_bit_index = bin(i)[2:].zfill(len(binary))\n    set_bit = '0' * (len(binary) - len(set_bit_index)) + set_bit_index\n    \n    # Set the unset bit to 1 and convert it to integer\n    set_bit = int(set_bit, 2)\n    \n    # Set the first unset bit of the binary string to 1\n    binary = binary[:i] + '1' + binary[i+1:]\n    \n    # Convert the binary string back to integer and return it\n    return int(binary, 2)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n): \n    \"\"\"\n    This function sets the leftmost unset bit in a given number.\n    \"\"\"\n    # Initialize variable to store the binary representation of n\n    binary = bin(n)[2:]\n    \n    # Initialize index variable to iterate through the binary representation\n    index = 0\n    \n    # Iterate through the binary representation until the leftmost unset bit is found\n    while binary[index] == '0':\n        index += 1\n    \n    # Set the leftmost unset bit to 1 and return the modified number\n    n = n | (1 << index)\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Convert the number to binary string\n    binary = bin(n)[2:]\n    # Loop through each bit of the binary string\n    for i in range(len(binary)):\n        # If the bit is already set, continue to the next bit\n        if binary[i] == '1':\n            continue\n        # If the bit is unset, set it and break out of the loop\n        binary[i] = '1'\n        break\n    # Convert the binary string back to an integer\n    return int(binary, 2)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    i = 0\n    while n & 1 == 0:\n        n >>= 1\n        i += 1\n    return n | (1 << i)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n): \n    \"\"\"\n    This function takes an integer as input and returns an integer where the left most unset bit is set to 1.\n\n    If the input integer is already set to 1, then it is returned unchanged.\n\n    If there is no unset bit in the input integer, then the input integer is returned unchanged.\n    \"\"\"\n\n    # Convert the input integer to a binary string\n    binary_string = bin(n)[2:]\n\n    # Find the index of the leftmost unset bit\n    unset_bit_index = binary_string.rfind('0')\n\n    # Check if the input integer is already set to 1\n    if unset_bit_index == -1:\n        return n\n\n    # Check if there is any unset bit in the binary string\n    if unset_bit_index == len(binary_string) - 1:\n        return n\n\n    # Set the leftmost unset bit to 1\n    binary_string = binary_string[:unset_bit_index] + '1' + binary_string[unset_bit_index+1:]\n\n    # Convert the binary string back to an integer\n    return int(binary_string, 2)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Find the index of the leftmost set bit\n    left_most_set_bit_index = n.bit_length() - 1 - n.bit_length().bit_count(0)\n    \n    # Set the leftmost unset bit to 1\n    n |= (1 << left_most_set_bit_index)\n    \n    # Return the modified number\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n\n    # Convert binary number to a list of binary digits\n    binary_list = [int(digit) for digit in bin(n)[2:]]\n\n    # Set the left most unset bit to 1\n    binary_list.insert(0, 1)\n\n    # Convert the list of binary digits back to a binary number\n    result = int(''.join(str(bit) for bit in binary_list), 2)\n\n    return result"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    while n & 1 == 0:\n        n >>= 1\n    return n | 1"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # loop through all bits of the number until the leftmost unset bit is found\n    while n & 1 == 0:\n        n >>= 1\n    \n    # set the leftmost unset bit to 1\n    n |= 1\n    \n    # return the updated number\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Loop through the bits and set the leftmost unset bit to 1\n    for i in range(32):\n        if (n & (1 << i)) == 0:\n            n = n | (1 << i)\n            break\n    return n\n"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V = (1/3) * math.pi * r**2 * h\n    return V"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    # calculate the volume of the cone using the formula\n    volume = (1/3) * math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_cone(r, h):\n    \"\"\"\n    Calculates the volume of a cone.\n    \n    Parameters:\n    r (float): the radius of the base of the cone\n    h (float): the height of the cone\n    \n    Returns:\n    float: the volume of the cone\n    \"\"\"\n    \n    # calculate the volume using the formula V = (1/3) * \u03c0 * r^2 * h\n    vol = (1/3) * math.pi * r ** 2 * h\n    \n    return vol"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function calculates the volume of a cone with given radius and height.\n    '''\n    volume = (1/3) * math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function takes two arguments: r (radius of the cone) and h (height of the cone).\n    It then calculates the volume of the cone using the formula: V = (1/3) * pi * r^2 * h\n    '''\n\n    # calculate volume of the cone\n    V = (1/3) * math.pi * r**2 * h\n\n    # return the volume\n    return V"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    This function calculates the volume of a cone given its radius r and height h.\n    '''\n    volume = math.pi*(r**2)*(h/3)\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    # Calculate the volume of a cone using the formula: V = \u03c0r^2h\n    V = math.pi * (r**2) * h\n    return V"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function takes the radius and height of a cone as input and returns the volume of the cone.\n    '''\n    # Formula for volume of a cone: V = 1/3 * pi * r^2 * h\n    volume = (1/3) * math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_cone(r, h):\n    \"\"\"\n    Calculate the volume of a cone using the formula: V = (1/3) * \u03c0 * r^2 * h\n    \"\"\"\n    return (1/3) * math.pi * r ** 2 * h"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function takes in two arguments, radius and height, and returns the volume of a cone.\n    '''\n    vol = (1/3) * math.pi * r**2 * h\n    return vol"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n): \n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    if n < 1:\n        return None\n    max_pow_of_2 = 1\n    while max_pow_of_2 < n:\n        max_pow_of_2 <<= 1\n    return max_pow_of_2"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 1\n    while power <= n:\n        if 2 ** power > n:\n            return power\n        power <<= 1"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        if n & (n - 1) == 0:\n            return highest_Power_of_2(n // 2) + 1\n        else:\n            return highest_Power_of_2(n - 1)"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 0\n    while n > 1:\n        power += 1\n        n >>= 1\n    return power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n\n    # initialize the power of 2 as 1\n    highest_power = 1\n\n    # loop until the highest power of 2 is greater than or equal to n\n    while highest_power < n:\n        # increment the power of 2 by 1\n        highest_power <<= 1\n\n    # return the highest power of 2 less than or equal to n\n    return highest_power - 1"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    while n > 1:\n        if n & (n-1) == 0:\n            n = n - (n & (n-1))\n        else:\n            n = n - 1\n    return n"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n):\n    '''\n    This function takes an integer n as input and returns the highest power of 2 that is less than or equal to n.\n    '''\n    while n > 1:\n        n //= 2\n    return n"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    while n > 1:\n        if n % 2 == 0:\n            n /= 2\n        else:\n            n = 3 * n + 1\n    return n"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n <= 1: # base case for n = 1 and n = 0\n        return n\n    \n    highest = highest_Power_of_2(n//2) # recursive call to find the highest power of 2 less than or equal to n/2\n    \n    if highest == n//2: # if the highest power of 2 found is equal to n/2, then return n\n        return highest\n    \n    return n"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # initialize the highest power of 2 as 1\n    highest = 1\n\n    # loop through all the powers of 2 up to n\n    for i in range(1, n+1):\n\n        # if the current power of 2 is less than or equal to n, update the highest power of 2\n        if i <= n:\n            highest = i\n\n    # return the highest power of 2\n    return highest"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n\n    # Initialize the first two lucas numbers\n    lucas1, lucas2 = 2, 1\n\n    # Calculate the nth lucas number\n    for i in range(2, n+1):\n        lucas = lucas1 + lucas2\n        lucas1, lucas2 = lucas2, lucas"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return (4*find_lucas(n-1) - find_lucas(n-2))"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef sieve_of_eratosthenes(n):\n    sieve = [True] * (n+1)\n    sieve[0] = False\n    sieve[1] = False\n    for i in range(2, int(n**0.5)+1):\n        if sieve[i]:\n            for j in range(i*i, n+1, i):\n                sieve[j] = False\n    return sieve\n\ndef find_lucas(n):\n    lucas_numbers = []\n    sieve = sieve_of_eratosthenes(n)\n    for i in range(n):\n        lucas_numbers.append(2*i+1)\n    for i in range(2, n):\n        if sieve[i]:\n            lucas_numbers.append(i)\n    return lucas_numbers"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lucas(n): \n    '''\n    This function will find the nth Lucas number using the formula:\n    Lucas(n) = (1/2) * (2^(n-1) - 1)\n    '''\n    if n == 0 or n == 1:\n        return 2**n - 1\n    else:\n        return 4 * find_lucas(n-1) - find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 7,
        "answer": ""
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0: \n        return 2\n    elif n == 1: \n        return 1\n    else: \n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0: \n        return 2\n    elif n == 1: \n        return 1\n    else: \n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    \"\"\"\n    Write a function to apply a given format string to all of the elements in a list.\n    \"\"\"\n    new_list = []\n    for element in list_:\n        new_list.append(string.format(element))\n    return new_list"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    result = []\n    for element in list_:\n        result.append(string % element)\n    return result"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    \"\"\"\n    Write a function to apply a given format string to all of the elements in a list.\n    \"\"\"\n    formatted_list = [string.format(elem) for elem in list_]\n    return formatted_list"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    formatted_list = []\n    for item in list_:\n        formatted_list.append(string.format(item))\n    return formatted_list"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i, item in enumerate(list_):\n        list_[i] = string.format(item)\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string % list_[i]\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(i) for i in list_]"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    \n    # combine all lists into one dictionary\n    combined_dict = dict(zip(l1, l2))\n    for key, value in combined_dict.items():\n        combined_dict[key] = dict(zip(l3, value))\n    \n    return combined_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def convert_list_dictionary(*lists):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    nested_dict = {}\n    for i, l in enumerate(lists):\n        for j, elem in enumerate(l):\n            if elem in nested_dict:\n                nested_dict[elem][i] = j\n            else:\n                nested_dict[elem] = {i: j}\n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # create an empty dictionary to store the final result\n    result = {}\n    # iterate over each list and append the elements to the nested dictionary\n    for i in range(len(l1)):\n        result[i] = {}\n        for j in range(len(l2)):\n            result[i][j] = {}\n            for k in range(len(l3)):\n                result[i][j][k] = l1[i][j][k]\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n\n    # Create a nested dictionary to store the data\n    data = {}\n\n    # Loop through each list and add the values to the nested dictionary\n    for i in range(len(l1)):\n        data[l1[i]] = {}\n        data[l1[i]][l2[i]] = l3[i]\n\n    return data"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def convert_list_dictionary(*lists):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i, lst in enumerate(lists):\n        for j, item in enumerate(lst):\n            if j not in result:\n                result[j] = []\n            result[j].append(item)\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def convert_list_dictionary(*args):\n    \"\"\"\n    This function takes in multiple lists as arguments and returns a nested dictionary.\n    \n    Parameters:\n    *args: A tuple containing multiple lists.\n    \n    Returns:\n    A nested dictionary where each key is a list and each value is another list.\n    \"\"\"\n    # Loop through each argument and convert it to a dictionary\n    nested_dict = {}\n    for arg in args:\n        temp_dict = {}\n        for item in arg:\n            # Convert each item to a list\n            temp_list = []\n            if type(item) == list:\n                for subitem in item:\n                    temp_list.append(subitem)\n            else:\n                temp_list.append(item)\n            # Add the list to the temporary dictionary\n            temp_dict[item] = temp_list\n        # Add the temporary dictionary to the final dictionary\n        nested_dict[arg] = temp_dict\n    \n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n    data = {}\n    for i, item in enumerate(l1):\n        data[item] = {l2[i]: l3[i]}\n    return data"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def convert_list_dictionary(*args):\n    '''\n    This function takes a variable number of lists as input.\n    It converts each list to a nested dictionary and returns the result.\n    '''\n    result = {}\n    for l in args:\n        if isinstance(l, list):\n            for i, item in enumerate(l):\n                if isinstance(item, (list, tuple)):\n                    if not item:\n                        result[i] = []\n                    else:\n                        nested_dict = convert_list_dictionary(*item)\n                        result[i] = nested_dict\n                else:\n                    result[i] = item\n        else:\n            result = l\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # create an empty dictionary\n    nested_dict = {}\n    # iterate through the first list\n    for i in range(len(l1)):\n        # get the current item from the list\n        item = l1[i]\n        # if the current item is a list, convert it to dictionary and add it to the dictionary\n        if isinstance(item, list):\n            nested_dict[i] = convert_list_dictionary(item)\n        # if the current item is not a list, add it to the dictionary as is\n        else:\n            nested_dict[i] = item\n    # iterate through the second list\n    for i in range(len(l2)):\n        # get the current item from the list\n        item = l2[i]\n        # if the current item is a list, convert it to dictionary and add it to the dictionary\n        if isinstance(item, list):\n            nested_dict[i]['sublist'] = convert_list_dictionary(item)\n        # if the current item is not a list, add it to the dictionary as is\n        else:\n            nested_dict[i]['sublist'] = item\n    # iterate through the third list\n    for i in range(len(l3)):\n        # get the current item from the list\n        item = l3[i]\n        # if the current item is a list, convert it to dictionary and add it to the dictionary\n        if isinstance(item, list):\n            nested_dict[i]['sublist']['sublist'] = convert_list_dictionary(item)\n        # if the current item is not a list, add it to the dictionary as is\n        else:\n            nested_dict[i]['sublist']['sublist'] = item\n    # return the nested dictionary\n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def convert_list_dictionary(*lists):\n    \"\"\"\n    Convert more than one list to nested dictionary.\n\n    Args:\n        *lists (list): A list of lists to be converted.\n\n    Returns:\n        dict: A nested dictionary representation of the input lists.\n    \"\"\"\n    # Check that the input lists are all lists\n    if not all(isinstance(l, list) for l in lists):\n        raise TypeError(\"All input lists must be lists\")\n\n    # Initialize an empty dictionary\n    result = {}\n\n    # Loop through each list and add its elements to the dictionary\n    for i, sublist in enumerate(lists):\n        for j, item in enumerate(sublist):\n            # Add the sublist to the result dictionary with its own key\n            sublist_key = f\"{i}_{j}\"\n            result[sublist_key] = item\n\n    return result"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_max_sum(n):\n    if n <= 1:\n        return n\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5) + n, n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # Base case\n    if n == 1:\n        return 1\n    \n    # Recursive case\n    elif n % 2 == 0:\n        return get_max_sum(n/2) + get_max_sum(n/4) + n\n    else:\n        return get_max_sum(n/2) + get_max_sum(n/3) + n"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    def f(n):\n        if n == 1:\n            return 1\n        elif n == 2:\n            return 2\n        elif n == 3:\n            return 4\n        elif n == 4:\n            return 8\n        elif n == 5:\n            return 16\n        else:\n            return f(n-1) + f(n-2) + f(n-3) + f(n-4) + f(n-5)\n\n    def max_sum_helper(n, max_sum, max_i):\n        if n == 1:\n            return max_sum\n        elif n == 2:\n            return max_sum + f(n)\n        elif n == 3:\n            return max_sum + f(n) + f(n-1)\n        elif n == 4:\n            return max_sum + f(n) + f(n-1) + f(n-2)\n        elif n == 5:\n            return max_sum + f(n) + f(n-1) + f(n-2) + f(n-3)\n        else:\n            sub_max_sum = max_sum_helper(n/2, max_sum + f(n), max_i)\n            if max_sum < sub_max_sum:\n                return max_sum_helper(n/3, max_sum + f(n) + f(n/2), n)\n            elif max_sum == sub_max_sum:\n                return max_sum_helper(n/3, max_sum + f(n) + f(n/2), n)\n            else:\n                return max_sum_helper(n/4, max_sum + f(n) + f(n/2) + f(n/3), n)\n\n    return max_sum_helper(n, 0, 0)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 1:\n        return n\n\n    # Recursive approach for finding maximum sum using the given equation\n    return max(get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # base case\n    if n <= 1:\n        return n\n    \n    # recursive case\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    def f(n):\n        if n == 1:\n            return 1\n        elif n % 2 == 0:\n            return f(n/2) + f(n/3) + f(n/4) + f(n/5) + n\n        else:\n            return f(n/2) + f(n/3) + f(n/4) + f(n/5) + n\n\n    return f(n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n < 2:\n        return n\n    \n    if n == 2:\n        return 14\n    \n    if n == 3:\n        return 21\n    \n    if n == 4:\n        return 28\n    \n    if n == 5:\n        return 35\n    \n    if n % 2 == 0:\n        return get_max_sum(n/2) + n\n    else:\n        return max(get_max_sum(n/2) + n, get_max_sum(n/3) + n, get_max_sum(n/4) + n, get_max_sum(n/5) + n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    else:\n        return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5) + n, get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5))"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    \n    def sum_of_factors(n):\n        return n * (n + 1) // 2\n    \n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n - 1)\n    \n    def f(n):\n        return max(sum_of_factors(n) + factorial(n), n)\n    \n    return f(n)\n"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = len(input_list[0])\n    max_list = input_list[0]\n\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_list = i\n\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = len(max(input_list, key=len))\n    return input_list[max_length - 1]"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    max_length = 0\n    max_list = []\n\n    for i in range(len(input_list)):\n        if len(input_list[i]) > max_length:\n            max_length = len(input_list[i])\n            max_list = [input_list[i]]\n        elif len(input_list[i]) == max_length:\n            max_list.append(input_list[i])\n\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = None\n    \n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = item\n            \n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = None\n\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_list = i\n\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    result = None\n\n    for i in input_list:\n        if len(i) > max_len:\n            max_len = len(i)\n            result = i\n\n    return result"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = None\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = item\n    return max_list"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    seen = set()\n    return all(x not in seen and seen.add(x) for x in test_tup)"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # Use a set to remove duplicates from the tuple\n    unique_tup = set(test_tup)\n\n    # Check if the length of the set is equal to the length of the original tuple\n    if len(unique_tup) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # Use a set to keep track of the values we've seen so far\n    seen = set()\n\n    # Loop through the tuple and check each value\n    for val in test_tup:\n        # If we've seen this value before, the tuple contains duplicates\n        if val in seen:\n            return False\n        # Otherwise, add it to our set of seen values\n        else:\n            seen.add(val)\n\n    # If we made it through the entire tuple without finding duplicates, the tuple is distinct\n    return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    \"\"\"\n    Write a function to check if given tuple contains no duplicates.\n    \"\"\"\n    # convert the tuple to a set to remove duplicates\n    unique_tup = set(test_tup)\n    # check if the set is empty\n    return bool(len(unique_tup) == len(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    \"\"\"\n    Write a function to check if given tuple contains no duplicates.\n    \"\"\"\n    # Create a set from the tuple and check if its length is equal to the length of the tuple\n    return len(set(test_tup)) == len(test_tup)"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # convert the tuple to a set to remove duplicates\n    set_tup = set(test_tup)\n    \n    # check if the length of the set is equal to the length of the original tuple\n    if len(set_tup) == len(test_tup):\n        # if the set and the tuple have the same length, the function returns True\n        return True\n    else:\n        # otherwise, it returns False\n        return False"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    This function finds the first non-repeating character in a given string.\n\n    Parameters:\n    str1 (str): The given string.\n\n    Returns:\n    str: The first non-repeating character in the given string.\n\n    \"\"\"\n    # Create a dictionary to store the frequency of each character in the string\n    char_freq = {}\n\n    # Iterate over each character in the string\n    for char in str1:\n        # If the character is already present in the dictionary, increment its frequency by 1\n        if char in char_freq:\n            char_freq[char] += 1\n        # If the character is not present in the dictionary, add it with a frequency of 1\n        else:\n            char_freq[char] = 1\n\n    # Find the first character with a frequency of 1\n    for char in char_freq:\n        if char_freq[char] == 1:\n            return char\n\n    # If no character has a frequency of 1, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    This function takes a string as input and returns the first non-repeated character in the string.\n    \"\"\"\n    # create a dictionary to store the count of each character in the string\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # iterate through the string and find the first non-repeated character\n    for i in range(len(str1)):\n        if char_count[str1[i]] == 1:\n            return str1[i]\n    \n    # if no non-repeated character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    This function takes a string as input and returns the first non-repeating character in the string.\n    \"\"\"\n    # create a dictionary to store the count of each character in the string\n    count = {}\n    for char in str1:\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n\n    # find the first non-repeating character in the string\n    for char in str1:\n        if count[char] == 1:\n            return char\n\n    # if no non-repeating character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    # Create a dictionary to store character frequencies\n    freq_dict = {}\n    \n    # Loop through the string and update the frequency dictionary\n    for char in str1:\n        if char in freq_dict:\n            freq_dict[char] += 1\n        else:\n            freq_dict[char] = 1\n    \n    # Find the first non-repeated character\n    for char in str1:\n        if freq_dict[char] == 1:\n            return char\n    \n    # If no non-repeated characters are found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n            \n    for char in char_count:\n        if char_count[char] == 1:\n            return char\n    \n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_non_repeating_character(string):\n    '''\n    This function will find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in string:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    for char in string:\n        if char_count[char] == 1:\n            return char\n\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    This function takes a string as input and returns the first non-repeating character in the string.\n    If all characters in the string are repeating, then it will return None.\n    \"\"\"\n    # create a dictionary to store the count of each character in the string\n    char_count = {}\n\n    # iterate over the string and increment the count of each character in the dictionary\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    # iterate over the string again and find the first non-repeating character\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n\n    # if all characters are repeating, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char, count in char_count.items():\n        if count == 1:\n            return char\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    # create a dictionary to store the frequency of characters in the string\n    freq = {}\n    for char in str1:\n        freq[char] = freq.get(char, 0) + 1\n    \n    # iterate through the characters in the string and return the first non-repeating character\n    for char in str1:\n        if freq[char] == 1:\n            return char"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    \"\"\"\n    Write a function to check whether the given string starts and ends with the same character or not.\n    \"\"\"\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if not isinstance(string, str):\n        return \"Error: Input should be a string\"\n\n    if not re.match(regex, string):\n        return \"Error: Input should start and end with the same character or not\"\n\n    return True"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n\n    # Check if the string matches the regex pattern\n    if re.match(regex, string):\n        # If it does, check if the first and last characters match\n        if string[0] == string[-1]:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef check_char(string):\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    a_b = a + b\n    a_c = a + c\n    b_c = b + c\n\n    a_b_c = sorted([a_b, a_c, b_c])\n    median = a_b_c[1]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # First, sort the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # If the numbers are equal, return the middle number\n    if sorted_numbers[0] == sorted_numbers[1] == sorted_numbers[2]:\n        return sorted_numbers[1]\n\n    # Find the middle two numbers and the middle number\n    middle_two = sorted_numbers[1:3]\n    middle = sorted_numbers[2]\n\n    # Check which number is the median\n    if middle_two[0] < middle_two[1]:\n        if middle_two[0] < middle:\n            return middle_two[0]\n        else:\n            return middle_two[1]\n    else:\n        if middle_two[1] < middle:\n            return middle_two[1]\n        else:\n            return middle_two[0]"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n\n    # Sort the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # Calculate the median\n    if len(sorted_numbers) % 2 == 0:\n        median = (sorted_numbers[len(sorted_numbers) // 2 - 1] + sorted_numbers[len(sorted_numbers) // 2]) / 2\n    else:\n        median = sorted_numbers[len(sorted_numbers) // 2]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # sort the numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # calculate the length of the sorted list\n    length = len(sorted_numbers)\n\n    # if the length of the sorted list is odd, the median is the middle number\n    if length % 2 == 1:\n        median = sorted_numbers[length//2]\n    # if the length of the sorted list is even, the median is the average of the two middle numbers\n    else:\n        median = (sorted_numbers[length//2 - 1] + sorted_numbers[length//2]) / 2\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    numbers = [a, b, c]\n    numbers.sort()\n\n    # Find the indices of the middle two numbers\n    index1 = len(numbers) // 2\n    index2 = len(numbers) // 2 + 1\n\n    # Calculate the median\n    median = numbers[index1] if len(numbers) % 2 == 0 else (numbers[index1] + numbers[index2]) / 2\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numbers = [a,b,c]\n    numbers.sort()\n    if len(numbers)%2==0:\n        return (numbers[len(numbers)//2-1]+numbers[len(numbers)//2])/2\n    else:\n        return numbers[len(numbers)//2]"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numbers = [a,b,c]\n    numbers.sort()\n    if len(numbers) % 2 == 0:\n        median = (numbers[len(numbers)//2-1] + numbers[len(numbers)//2]) / 2\n    else:\n        median = numbers[len(numbers)//2]\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_numbers(a, b, c):\n    sorted_list = sorted([a, b, c])\n    n = len(sorted_list)\n    if n % 2 == 0:\n        median = (sorted_list[n//2 - 1] + sorted_list[n//2]) / 2\n    else:\n        median = sorted_list[n//2]\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    sorted_list = sorted([a, b, c])\n    n = len(sorted_list)\n    if n % 2 == 0:\n        mid = n // 2\n        return (sorted_list[mid - 1] + sorted_list[mid]) / 2\n    else:\n        return sorted_list[n // 2]"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Finds the median of three numbers using the quickselect algorithm.\n\n    :param a: The first number.\n    :param b: The second number.\n    :param c: The third number.\n    :return: The median of the three numbers.\n    \"\"\"\n    # Convert the numbers to a list\n    numbers = [a, b, c]\n\n    # Sort the list using the quickselect algorithm\n    pivot_index = quickselect(numbers, len(numbers) // 2)\n\n    # Find the median based on the pivot index\n    if (pivot_index == 0) or (pivot_index == len(numbers) // 2):\n        return numbers[pivot_index]\n    else:\n        return (numbers[pivot_index - 1] + numbers[pivot_index]) / 2\n\n\ndef quickselect(numbers, k):\n    \"\"\"\n    Implementation of the quickselect algorithm.\n\n    :param numbers: The list of numbers to search.\n    :param k: The index of the element to find.\n    :return: The index of the kth smallest element in the list.\n    \"\"\"\n    if len(numbers) == 1:\n        return 0\n\n    pivot = numbers[len(numbers) // 2]\n\n    lows = [x for x in numbers if x < pivot]\n    highs = [x for x in numbers if x > pivot]\n    pivots = [x for x in numbers if x == pivot]\n\n    if k < len(lows):\n        return quickselect(lows, k)\n    elif k < len(lows) + len(pivots):\n        return len(lows)\n    else:\n        return quickselect(highs, k - len(lows) - len(pivots))"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total_sum = 0\n    for num in nums:\n        total_sum += sum(int(digit) for digit in str(num))\n    return total_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    Write a function to compute the sum of digits of each number of a given list.\n    \"\"\"\n    # Initialize a list to store the sum of digits of each number\n    result = []\n\n    # Iterate over each number in the input list\n    for num in nums:\n        # Convert the number to a string and split it into a list of digits\n        digits = [int(digit) for digit in str(num)]\n        # Compute the sum of digits using a list comprehension\n        sum_digits = sum(digits)\n        # Append the sum of digits to the result list\n        result.append(sum_digits)\n\n    # Return the result list\n    return result"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    Write a function to compute the sum of digits of each number of a given list.\n    \"\"\"\n    return [sum(int(d) for d in str(n)) for n in nums]"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        sum_digits = sum([int(digit) for digit in str(num)])\n        result.append(sum_digits)\n    return result"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total_sum = 0\n    for num in nums:\n        total_sum += sum(map(int, str(num)))\n    return total_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total_sum = 0\n    for num in nums:\n        total_sum += sum(int(d) for d in str(num))\n    return total_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits = 0\n    for num in nums:\n        digits_sum = 0\n        while num > 0:\n            digits_sum += num % 10\n            num //= 10\n        sum_of_digits += digits_sum\n    return sum_of_digits"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total_sum = 0\n    for num in nums:\n        total_sum += sum(map(int, str(num)))\n    return total_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits_list = []\n    for num in nums:\n        sum_of_digits_list.append(sum(int(digit) for digit in str(num)))\n    return sum_of_digits_list"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum = 0\n    for num in nums:\n        sum += sum_digits(num)\n    return sum\n\ndef sum_digits(num):\n    '''\n    Write a function to compute the sum of digits of a given number.\n    '''\n    return sum(int(digit) for digit in str(num))"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(map(lambda x, y: x ^ y, test_tup1, test_tup2))\n"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = 0\n    for i in range(len(test_tup1)):\n        result ^= test_tup1[i] ^ test_tup2[i]\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = []\n    for i in range(min(len(test_tup1), len(test_tup2))):\n        xor_result.append(test_tup1[i] ^ test_tup2[i])\n    return xor_result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = 0\n    for i in range(len(test_tup1)):\n        xor_result ^= test_tup1[i] ^ test_tup2[i]\n    return xor_result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Initialize the result tuple with the values of the two input tuples\n    result = (test_tup1[0] ^ test_tup2[0], test_tup1[1] ^ test_tup2[1])\n    \n    # Return the result tuple\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Initialize an empty list to store the result\n    result = []\n    \n    # Iterate over the elements of both tuples and perform the bitwise xor operation\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] ^ test_tup2[i])\n    \n    # Return the result list\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] ^ test_tup2[i],)\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # initialize the result tuple with the same size as the input tuples\n    result = (0,) * len(test_tup1)\n    \n    # loop through the input tuples and perform bitwise xor operation on each element\n    for i in range(len(test_tup1)):\n        result[i] = test_tup1[i] ^ test_tup2[i]\n    \n    # return the result tuple\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = 0\n    for i in range(len(test_tup1)):\n        result |= test_tup1[i] ^ test_tup2[i]\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] ^ test_tup2[i])\n    return result"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set()\n    for item in test_list:\n        unique_tuples.add(tuple(item))\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # Create an empty set to store unique tuples\n    unique_tuples = set()\n    \n    # Loop through each element in the list\n    for element in test_list:\n        # Add each tuple to the set only if it's not already in it\n        if tuple(element) not in unique_tuples:\n            unique_tuples.add(tuple(element))\n    \n    # Return the number of unique tuples\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for i in test_list:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return freq"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    This function takes a list and returns the number of unique tuples in the list.\n    \"\"\"\n    freq = {}\n    for item in test_list:\n        if item not in freq:\n            freq[item] = 1\n        else:\n            freq[item] += 1\n    return len(freq)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # Create a dictionary to store the frequency of each tuple in the list\n    freq_dict = {}\n    for item in test_list:\n        # Convert the tuple into a string to count its frequency\n        key = str(item)\n        # If the key already exists in the dictionary, increment its frequency by 1\n        if key in freq_dict:\n            freq_dict[key] += 1\n        # If the key does not exist in the dictionary, add it with a frequency of 1\n        else:\n            freq_dict[key] = 1\n    # Calculate the total number of unique tuples in the list\n    unique_count = sum(freq_dict.values())\n    # Return the total number of unique tuples\n    return unique_count"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    unique_tuples = set()\n    for item in test_list:\n        unique_tuples.add(item)\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # create a set to store unique tuples\n    unique_tuples = set()\n\n    # iterate over each tuple in the list\n    for tup in test_list:\n        # add the tuple to the set if it's not already there\n        if tup not in unique_tuples:\n            unique_tuples.add(tup)\n\n    # return the length of the set\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    # create an empty dictionary to store the frequency of tuples\n    freq_dict = {}\n    \n    # loop through each element of the list\n    for item in test_list:\n        # if the item is a tuple, add it to the dictionary\n        if isinstance(item, tuple):\n            freq_dict[item] = freq_dict.get(item, 0) + 1\n    \n    # return the number of unique tuples in the list\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    freq = {}\n    for item in test_list:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    freq = {}\n    for item in test_list:\n        if item not in freq:\n            freq[item] = 1\n        else:\n            freq[item] += 1\n    return len(freq)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # checking if the two given tuples have the same number of elements\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two given tuples must have the same number of elements.\")\n    else:\n        # creating a new empty tuple to store the result\n        result_tup = ()\n        # iterating over the elements of the two input tuples\n        for i in range(len(test_tup1)):\n            # adding the elements of the two input tuples\n            result_tup += (test_tup1[i] + test_tup2[i],)\n        # returning the new tuple as the result\n        return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup2[0])):\n            test_tup1[i][j] += test_tup2[i][j]\n    return test_tup1"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Initializing the result tuple\n    result_tup = ()\n    # Iterating over the indices of the two tuples\n    for i in range(len(test_tup1)):\n        # Checking if the current index is in the bounds of the first tuple\n        if i < len(test_tup1[0]):\n            # Checking if the current index is in the bounds of the second tuple\n            if i < len(test_tup2[0]):\n                # Adding the corresponding elements of the two tuples at the current index and appending the result to the result tuple\n                result_tup += (test_tup1[0][i] + test_tup2[0][i],)\n            else:\n                # If the current index is in the bounds of the second tuple but not the first tuple, we have to append None to the result tuple\n                result_tup += (None,)\n        else:\n            # If the current index is in the bounds of the first tuple but not the second tuple, we have to append None to the result tuple\n            result_tup += (None,)\n    # Returning the result tuple\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        tup_sum = tuple(map(lambda x, y: x + y, test_tup1[i], test_tup2[i]))\n        result.append(tup_sum)\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # initialize the result tuple\n    result = []\n    # iterate through each tuple in the input tuples\n    for i in range(len(test_tup1)):\n        # initialize the current element of the result tuple\n        curr_elem = 0\n        # iterate through each element in the corresponding tuple\n        for j in range(len(test_tup1[i])):\n            # add the current element of both tuples\n            curr_elem += test_tup1[i][j] + test_tup2[i][j]\n        # add the current element to the result tuple\n        result.append(curr_elem)\n    # return the result tuple\n    return tuple(result)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] + test_tup2[i])\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        inner_sum = 0\n        for j in range(len(test_tup1[i])):\n            inner_sum += test_tup1[i][j] + test_tup2[i][j]\n        result.append(inner_sum)\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return None\n    else:\n        result_tup = ()\n        for i in range(len(test_tup1)):\n            if isinstance(test_tup1[i], tuple) and isinstance(test_tup2[i], tuple):\n                result_tup += add_nested_tuples(test_tup1[i], test_tup2[i])\n            elif isinstance(test_tup1[i], tuple):\n                result_tup += (test_tup1[i] + test_tup2[i],)\n            elif isinstance(test_tup2[i], tuple):\n                result_tup += (test_tup1[i], test_tup2[i] + test_tup1[i])\n            else:\n                result_tup += (test_tup1[i] + test_tup2[i],)\n        return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Initialize an empty list to store the result\n    result = []\n    # Loop through each element of the first tuple\n    for i in range(len(test_tup1)):\n        # Loop through each element of the second tuple\n        for j in range(len(test_tup2[0])):\n            # Add the corresponding elements of both tuples\n            result.append(test_tup1[i] + test_tup2[j][i])\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    \"\"\"\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup2[i])):\n            test_tup1[i][j] += test_tup2[i][j]\n    return test_tup1"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return min(a, b)"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def minimum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the smaller one.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def minimum(a, b):\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex, tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for element in tuplex:\n        if element in tuple1:\n            print(\"Element found in the tuple.\")\n            return\n    print(\"Element not found in the tuple.\")"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex, tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for item in tuplex: \n        if item in tuple1: \n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for element in tuplex:\n        if element in tuple1:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for element in tuple1:\n        if element in tuplex:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for element in tuplex:\n        if element in tuple1:\n            print(f\"{element} is present in {tuple1}\")\n            break\n    else:\n        print(f\"{tuplex} is not present in {tuple1}\")"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1: \n        print(f\"{tuplex} exists in the tuple1\") \n    else: \n        print(f\"{tuplex} does not exist in the tuple1\") "
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    This function takes in two tuples and returns True if the first element of tuplex is present in tuple1, otherwise it returns False.\n    \"\"\"\n    for element in tuple1:\n        if element == tuplex[0]:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex, tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        print(\"Element exists in tuple\")\n    else:\n        print(\"Element does not exist in tuple\")"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        print(f\"{tuplex} exists in {tuple1}\")\n    else:\n        print(f\"{tuplex} does not exist in {tuple1}\")"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    parity = 1 if x % 2 == 0 else 0\n    return parity"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Parity(x):\n    \"\"\"\n    Write a python function to find whether the parity of a given number is odd.\n    \"\"\"\n    # check if the number is odd\n    if x % 2 == 1:\n        print(\"The number\", x, \"is odd.\")\n    else:\n        print(\"The number\", x, \"is even.\")"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return \"The number is even.\"\n    else:\n        return \"The number is odd.\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd or even.\n    '''\n    if x % 2 == 0:\n        return \"The number is even.\"\n    else:\n        return \"The number is odd.\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd or even.\n    '''\n    parity = (x % 2)\n    if parity == 0:\n        return \"Even\"\n    else:\n        return \"Odd\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd or even.\n    '''\n    \n    # initialize variables\n    parity = \"\"\n    \n    # check if x is even or odd\n    if x % 2 == 0:\n        parity = \"even\"\n    else:\n        parity = \"odd\"\n        \n    return parity"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    parity = x % 2   # Calculating the parity of the given number x\n    if parity == 0:   # If the parity is even, print \"The parity of the given number is even.\"\n        print(\"The parity of the given number is even.\")\n    else:             # If the parity is odd, print \"The parity of the given number is odd.\"\n        print(\"The parity of the given number is odd.\")"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd or even.\n    '''\n    if x%2 == 0:\n        return 'The number is even.'\n    else:\n        return 'The number is odd.'\n"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    \n    # check if the number is even or odd\n    if x % 2 == 0:\n        parity = \"Even\"\n    else:\n        parity = \"Odd\"\n        \n    return parity"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    parity = 0\n    while x > 0:\n        parity += 1\n        x = x // 2\n    if parity % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\""
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    num_str = str(n)\n    digits = []\n    for i in range(len(num_str)):\n        digits.append(int(num_str[i]))\n    largest_digit = max(digits)\n    new_digits = sorted(digits)\n    new_num = \"\"\n    for i in range(len(digits)):\n        if digits[i] == largest_digit:\n            new_digits[i] += 1\n        new_num += str(new_digits[i])\n    new_num = int(new_num)\n    return new_num\n"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    digits = []\n    while n > 0:\n        digits.append(n % 10)\n        n //= 10\n    digits.reverse()\n    result = 0\n    for digit in digits:\n        result = result * 10 + digit\n    return result + 1"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n\n    # Reverse the digits of the input number\n    num_str = str(n)[::-1]\n\n    # Iterate through the digits of the reversed number and append the digit at its corresponding position in the original number\n    new_num = 0\n    for i, digit in enumerate(num_str):\n        new_num += int(digit) * 10 ** i\n\n    return new_num"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    digits = [int(d) for d in str(n)]\n    for i in range(len(digits)-1, -1, -1):\n        if digits[i] > 0:\n            digits[i] -= 1\n            digits[i+1:] = [0]*(len(digits[i+1:])-1)\n            return int(''.join(map(str, digits)))\n    # This should never happen as we iterate through the digits in reverse order\n    return None"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n\n    # Initialize the result as the input number\n    result = n\n\n    # Rearrange the digits of the result\n    while result > 0:\n        # Get the last digit of the result\n        digit = result % 10\n\n        # Find the first digit that is greater than the last digit\n        # We start from 9 and move down to the next digit\n        for i in range(9, digit, -1):\n            if digit!= i:\n                break\n        else:\n            # If no such digit is found, increment the last digit to create the next bigger number\n            digit += 1\n\n        # Replace the last digit of the result with the rearranged digit\n        result = (result // 10) * 10 + digit\n\n    # Return the result\n    return result"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    \n    # convert the given number to a list of digits\n    num_list = [int(digit) for digit in str(n)]\n    \n    # find the digits that have the highest power\n    power_dict = {}\n    for digit in num_list:\n        if digit in power_dict:\n            power_dict[digit] += 1\n        else:\n            power_dict[digit] = 1\n    \n    # sort the digits based on their power\n    sorted_list = sorted(power_dict.items(), key=lambda x: x[1], reverse=True)\n    \n    # create a new number by rearranging the digits\n    new_num = 0\n    for digit in sorted_list:\n        new_num = new_num * 10 + digit[0]\n    \n    # convert the new number to string\n    new_num = str(new_num)\n    \n    # convert the new number to integer and return it\n    return int(new_num)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Remove any leading zeros from the input number\n    n = str(n)\n    while n[0] == '0':\n        n = n[1:]\n\n    # Reverse the number\n    n = n[::-1]\n\n    # Find the index of the first digit that is non-zero\n    for i in range(len(n)):\n        if n[i]!= '0':\n            break\n\n    # Iterate through the digits from the beginning of the number to the index of the first non-zero digit\n    for digit in n[i:]:\n        # Check if digit is greater than 0\n        if int(digit) > 0:\n            # Check if the next digit would be 0\n            next_digit = n[i+1]\n            if next_digit == '0':\n                n = n[:i+1] + '1' + n[i+2:]\n            # If the next digit is greater than 0, swap the digits\n            else:\n                n = n[:i] + next_digit + digit + n[i+1:]\n                break\n\n    # Convert the reversed number back to an integer\n    n = int(n, 2)\n\n    # Add 1 to the reversed number if it was odd\n    if n % 2 == 1:\n        n += 1\n\n    return n"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    # Convert the input number to a string and split it into a list of digits\n    digits = [int(digit) for digit in str(n)]\n\n    # Sort the list of digits in descending order\n    digits.sort(reverse=True)\n\n    # Concatenate the sorted digits back into a string and convert it back to an integer\n    result = int(''.join(map(str, digits)))\n\n    # Return the result\n    return result"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    \n    # Convert the given number to a string\n    num_str = str(n)\n    \n    # Initialize the largest number found so far\n    max_num = None\n    \n    # Loop through all possible permutations of the digits of the given number\n    for i in range(1, len(num_str)+1):\n        # Create a new string with the digits in a different order\n        num_str = ''.join(sorted(num_str, reverse=True))\n        \n        # Convert the new string back to an integer and compare it to the largest number found so far\n        if int(num_str) > max_num:\n            max_num = int(num_str)\n    \n    # Return the next bigger number\n    return max_num"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    # function to rearrange the digits of a number\n    def rearrange(num):\n        # initialize an empty list to store the rearranged digits\n        rearranged = []\n        # loop through each digit in the number\n        for digit in str(num):\n            # if the digit is greater than 0, append it to the list of rearranged digits\n            if int(digit) > 0:\n                rearranged.append(int(digit))\n        # join the list of rearranged digits into a string and return it\n        return ''.join(map(str, rearranged))\n\n    # function to create the next bigger number by rearranging the digits of a given number\n    def next_bigger(num):\n        # convert the given number to a string\n        s = str(num)\n        # initialize the index of the first non-zero digit\n        index = len(s) - 1\n        # loop through each digit in the string\n        while index >= 0:\n            # if the digit is greater than 0, break out of the loop\n            if int(s[index]) > 0:\n                break\n            # decrement the index\n            index -= 1\n        # if the index is less than 0, the number is already the largest number\n        if index < 0:\n            return num\n        # if the index is equal to 0, the first digit is already 9, so increase the next digit by 1\n        elif index == 0:\n            # find the next digit that is greater than 0\n            for i in range(len(s)):\n                if int(s[i]) > 0:\n                    next_digit = i + 1\n                    break\n            else:\n                next_digit = 1\n            # convert the next digit to a string and append it to the end of the string\n            return int(str(num) + str(next_digit))\n        # if the index is greater than 0, rearrange the digits in the number to the left of the index\n        else:\n            # rearrange the digits to the left of the index\n            s = rearrange(int(s))\n            # find the next digit that is greater than 0 in the rearranged digits\n            for i in range(len(s)):\n                if int(s[i]) > 0:\n                    next_digit = int(s[:i] + str(int(s[i])+1))\n                    break\n            else:\n                next_digit = int(s + '1')\n            # append the next digit to the end of the rearranged digits\n            return next_bigger(int(s + str(next_digit)))\n\n    # return the next bigger number by rearranging the digits of a given number\n    return next_bigger(n)"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Initialize the min_heap\n    min_heap = []\n\n    # Iterate over the first array\n    for num in nums1:\n        # Add the pair (num, -inf) to the min_heap\n        heapq.heappush(min_heap, (num, -float('inf')))\n\n        # If the size of the min_heap exceeds k, remove the smallest element\n        if len(min_heap) > k:\n            heapq.heappop(min_heap)\n\n    # Initialize the result list\n    result = []\n\n    # Iterate over the second array\n    for num in nums2:\n        # Remove the pair (num, -inf) from the min_heap\n        while min_heap and min_heap[0][0] > num:\n            heapq.heappop(min_heap)\n\n        # If the size of the min_heap is greater than or equal to k, add the pair (num, -inf) to the result list\n        if len(min_heap) >= k:\n            result.append((min_heap[0][0], num))\n\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    # Create a min heap of size k to store the smallest k pairs\n    min_heap = []\n    \n    # Iterate through both arrays and find the k smallest pairs\n    for num1 in nums1:\n        for num2 in nums2:\n            if len(min_heap) < k:\n                # Add the pair to the heap if we haven't reached k yet\n                heapq.heappush(min_heap, (num1+num2, (num1, num2)))\n            else:\n                # Otherwise, if we have reached k, find the smallest pair and add it to the heap\n                pair = heapq.heappop(min_heap)\n                if pair[0] > num1+num2:\n                    # If the pair is smaller than the current smallest, update it\n                    heapq.heappush(min_heap, pair)\n    \n    # Extract and return the k smallest pairs from the heap\n    return [pair[1] for pair in min_heap]"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Sort the arrays in ascending order\n    nums1.sort()\n    nums2.sort()\n\n    # Initialize the min-heap to store the smallest k pairs\n    min_heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            # Add each pair to the heap if it satisfies the constraints\n            if i == 0 or nums1[i] > nums1[i-1]:\n                if j == 0 or nums2[j] > nums2[j-1]:\n                    heapq.heappush(min_heap, (nums1[i], nums2[j]))\n                    if len(min_heap) == k:\n                        # Remove the largest pair from the heap if the heap size becomes greater than k\n                        heapq.heappop(min_heap)\n\n    # Extract the k smallest pairs from the heap\n    k_pairs = []\n    while min_heap:\n        k_pairs.append(heapq.heappop(min_heap))\n\n    return k_pairs"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap1 = []\n    heap2 = []\n    for num in nums1:\n        heapq.heappush(heap1, num)\n    for num in nums2:\n        heapq.heappush(heap2, num)\n\n    result = []\n    while k > 0 and heap1 and heap2:\n        if heap1[0] < heap2[0]:\n            result.append([heap1[0], heap2[0]])\n            heapq.heappop(heap1)\n            k -= 1\n        else:\n            result.append([heap2[0], heap1[0]])\n            heapq.heappop(heap2)\n            k -= 1\n\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    min_heap = []\n    total = 0\n    count = 0\n    \n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            pair = (nums1[i] + nums2[j], i, j)\n            if count < k or pair[0] < min_heap[0][0]:\n                heapq.heappush(heap, pair)\n                if count < k:\n                    count += 1\n                    min_heap.append(pair)\n                elif pair[0] < min_heap[0][0]:\n                    heapq.heappop(min_heap)\n                    heapq.heappush(min_heap, pair)\n            total += 1\n            \n    return min_heap"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n    heap1 = []\n    heap2 = []\n    ans = []\n    count = 0\n    \n    for num1 in nums1:\n        heapq.heappush(heap1, (-num1, 0))\n    \n    for num2 in nums2:\n        if count == k:\n            break\n        if heapq.heappop(heap1)[1] < num2:\n            heapq.heappush(heap1, (-heapq.heappop(heap1)[0], -1))\n            heapq.heappush(heap2, (-num2, -1))\n            count += 1\n        else:\n            heapq.heappush(heap2, (-num2, -1))\n    \n    while heap2:\n        ans.append(heapq.heappop(heap2))\n        count -= 1\n    \n    ans.reverse()\n    return ans"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Sort the two arrays\n    nums1.sort()\n    nums2.sort()\n\n    # Initialize the result list\n    result = []\n\n    # Initialize the index of the first array\n    i = 0\n\n    # Initialize the index of the second array\n    j = 0\n\n    # Initialize the count of pairs\n    count = 0\n\n    # While there are still pairs to be found and count is less than k\n    while count < k and i < len(nums1) and j < len(nums2):\n        # Check if the sum of the elements at the current indices is less than the smallest sum found so far\n        if nums1[i] + nums2[j] < nums1[i+1] + nums2[j+1]:\n            # If the sum is smaller, add the pair to the result list and increment the count\n            result.append([nums1[i], nums2[j]])\n            count += 1\n            # Increment the index of the first array\n            i += 1\n        else:\n            # If the sum is larger, increment the index of the second array\n            j += 1\n\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a min heap of tuples with the first element being the sum of the first element and the second element\n    min_heap = [(-nums1[0] + nums2[0], (nums1[0], nums2[0]))]\n    for i in range(1, len(nums1)):\n        for j in range(1, len(nums2)):\n            # Check if the sum of the current elements is greater than or equal to the smallest sum in the heap\n            if nums1[i] + nums2[j] >= min_heap[0][0]:\n                # If it is, add a new tuple to the heap with the sum and the pair of elements (nums1[i], nums2[j])\n                heapq.heappush(min_heap, (-nums1[i] + nums2[j], (nums1[i], nums2[j])))\n            # If the heap has less than k elements, pop the smallest element from the heap\n            if len(min_heap) > k:\n                heapq.heappop(min_heap)\n    # Extract the k smallest sums from the heap and return them\n    return [i[1] for i in heapq.nsmallest(k, min_heap)]"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    min_heap = []\n    for num1 in nums1:\n        for num2 in nums2:\n            heapq.heappush(min_heap, (num1 + num2, (num1, num2)))\n            if len(min_heap) > k:\n                heapq.heappop(min_heap)\n    return min_heap"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a min heap of length k\n    min_heap = []\n\n    # Iterate through the array and add the minimum element to the min heap\n    for num in nums1:\n        heapq.heappush(min_heap, num)\n        if len(min_heap) > k:\n            heapq.heappop(min_heap)\n\n    # Iterate through the array again and add the minimum element to the min heap\n    for num in nums2:\n        if len(min_heap) < k:\n            heapq.heappush(min_heap, num)\n        else:\n            if num < min_heap[0]:\n                heapq.heappop(min_heap)\n                heapq.heappush(min_heap, num)\n\n    # Return the k smallest elements from the min heap\n    return min_heap[:k]"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # sort the list of tuples by the first element in each tuple\n    sorted_list = sorted(list1, key=lambda x: x[0])\n\n    # initialize the minimum product variable to infinity\n    min_product = float('inf')\n\n    # loop through the sorted list of tuples\n    for i in range(len(sorted_list)):\n        # loop through the remaining tuples in the list\n        for j in range(i + 1, len(sorted_list)):\n            # calculate the product of the first element of each tuple\n            product = sorted_list[i][0] * sorted_list[j][0]\n\n            # update the minimum product if the current product is smaller than the previous minimum\n            if product < min_product:\n                min_product = product\n\n    # return the minimum product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    \"\"\"\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    \"\"\"\n    # Initialize variables to store the minimum product and the number of pairs\n    min_product = float('inf')\n    count = 0\n    \n    # Iterate through the list of tuples\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # Calculate the product of the two tuples\n            product = list1[i] * list1[j]\n            \n            # Check if the product is less than the current minimum product\n            if product < min_product:\n                # Update the minimum product and the number of pairs\n                min_product = product\n                count = 2\n            \n            # If the product is equal to the current minimum product, increment the number of pairs\n            else:\n                count += 1\n    \n    # Return the minimum product and the number of pairs\n    return min_product, count"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # initialize minimum product and minimum tuple\n    min_product = float('inf')\n    min_tuple = (0, 0)\n    # iterate through the list of tuples\n    for tup in list1:\n        # calculate the product of the two numbers in the tuple\n        product = tup[0] * tup[1]\n        # check if the product is less than the minimum product\n        if product < min_product:\n            # update the minimum product and minimum tuple\n            min_product = product\n            min_tuple = tup\n    # return the minimum product and minimum tuple\n    return min_product, min_tuple"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_product_tuple(lst):\n    '''\n    Given a list of tuples, find the minimum product of any two tuples within it.\n    '''\n    min_product = float('inf')\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            product = lst[i][0] * lst[j][1]\n            min_product = min(min_product, product)\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if len(list1) % 2!= 0:\n        print(\"List should have an even number of elements.\")\n        return\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i] * list1[j]\n            if product < min_product:\n                min_product = product\n    return min_product\n"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    \"\"\"\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    \"\"\"\n    min_value = float('inf')\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_value:\n                min_value = product\n                result = [(list1[i][0], list1[i][1]), (list1[j][0], list1[j][1])]\n    return result"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    \"\"\"\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    \"\"\"\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][1] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    \"\"\"\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    \"\"\"\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # initialize the minimum value to be the first value of the list\n    min_val = listval[0]\n    # loop through the list to find the minimum value\n    for val in listval:\n        # if the current value is less than the minimum value, update the minimum value\n        if val < min_val:\n            min_val = val\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = float('inf')\n    for i in listval:\n        if i < min_val:\n            min_val = i\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    This function takes a list as an argument and returns the minimum value in the list.\n    '''\n    min_num = listval[0]\n    for num in listval:\n        if num < min_num:\n            min_num = num\n    return min_num"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for val in listval:\n        if val < min_val:\n            min_val = val\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if type(listval[0]) == int or type(listval[0]) == float:\n        min_val = min(listval)\n        return min_val\n    elif type(listval[0]) == str:\n        min_val = min(listval, key=len)\n        return min_val\n    elif type(listval[0]) == list:\n        min_val = min([min_val(lst) for lst in listval])\n        return min_val\n    else:\n        return None"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    \n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # Initialize a variable to store the minimum value\n    min_val = float('inf')\n    # Loop through each element in the list\n    for i in range(len(listval)):\n        # Check if the current element is less than the minimum value\n        if listval[i] < min_val:\n            # If it is, update the minimum value\n            min_val = listval[i]\n    # Return the minimum value\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n\n    # initialize minimum value\n    min_value = None\n\n    # loop through the list\n    for value in listval:\n\n        # check if value is less than current minimum value\n        if min_value is None or value < min_value:\n            min_value = value\n\n    # return the minimum value\n    return min_value"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_val(listval):\n    \"\"\"\n    Find the minimum value in a given heterogeneous list.\n    \"\"\"\n    # Initialize minimum value to a very large number\n    min_val = 1e10\n\n    # Loop through the list and compare each value to the minimum\n    for val in listval:\n        if val < min_val:\n            min_val = val\n\n    # Return the minimum value\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_val(listval):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n    \"\"\"\n    min_num = listval[0]\n    for i in listval:\n        if i < min_num:\n            min_num = i\n    return min_num"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    words = re.findall(r'\\w+', word)\n    return ''.join(word.title() for word in words)"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Convert snake case to camel case\n    camel_case = re.sub('_(.)', lambda match: match.group(1).upper(), word)\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Convert snake case to camel case\n    camel_word = re.sub('_(.)', lambda x: x.group(1).upper(), word)\n    # Remove prefix and suffix for camel case\n    camel_word = re.sub('([a-z])([A-Z])', lambda x: x.group(1).lower() + '_' + x.group(2).lower(), camel_word)\n    return camel_word.capitalize()"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # replace underscores with spaces\n    word = re.sub('_','', word)\n    # split the string into words\n    words = word.split()\n    # capitalize the first letter of each word except the first one\n    words[0] = words[0].capitalize()\n    # join the words into a camel case string\n    camel_case = ''.join(words)\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # convert all snake case characters to uppercase\n    word = word.upper()\n    # split the word into words\n    words = re.findall(r'\\w+', word)\n    # join the words into a camel case string\n    camel_case = ''.join(words)\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef snake_to_camel(word):\n    \"\"\"\n    Write a function to convert the given snake case string to camel case string.\n\n    :param word: The input string in snake case.\n    :return: The converted camel case string.\n    \"\"\"\n    # Split the input string into words using the regular expression \\w+\n    words = re.findall(r'\\w+', word)\n\n    # Convert the first word to lowercase and append it to the camel case string\n    camel_case = words[0].lower() + words[1:]\n\n    # Convert the remaining words to camel case and join them back together\n    camel_case = ''.join(camel_case)\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Convert the given snake case string to a list of words\n    words = re.findall(r'\\b\\w+\\b', word)\n    # Initialize a variable to store the camel case string\n    camel_case = ''\n    # Iterate over each word in the list\n    for i, word in enumerate(words):\n        # If the current word is the first word in the list, capitalize it\n        if i == 0:\n            camel_case += word.capitalize()\n        # If the current word is not the first word in the list, append a space and capitalize it\n        else:\n            camel_case +='' + word.capitalize()\n    # Return the camel case string\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef snake_to_camel(word):\n    \"\"\"\n    Write a function to convert the given snake case string to camel case string.\n    \"\"\"\n    camel_case = \"\"\n    for i, char in enumerate(word):\n        if i == 0:\n            camel_case += char.lower()\n        elif char.isupper():\n            camel_case += \"_\"\n        camel_case += char.lower()\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Remove underscores from the word\n    word = re.sub('_','', word)\n    # Split the word into words\n    words = word.split()\n    # Capitalize the first letter of each word and join the words back together\n    camel_case_word = ''.join(word.capitalize() for word in words)\n    return camel_case_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef snake_to_camel(word):\n    \"\"\"\n    Write a function to convert the given snake case string to camel case string.\n    \"\"\"\n    # convert snake case to camel case by capitalizing the first letter of each subsequent word\n    camel_case = \"\"\n    for i, char in enumerate(word):\n        if i == 0:\n            camel_case += char.lower()\n        else:\n            camel_case += char.upper()\n    return camel_case"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for num in l:\n        if num % 2 == 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    # initialize a new list to store the even numbers\n    result = []\n\n    # loop through the given list\n    for num in l:\n        # if the number is odd, add it to the result list\n        if num % 2!= 0:\n            result.append(num)\n\n    return result"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    This function removes odd numbers from a given list and returns a new list.\n    '''\n    new_list = []\n    for num in l:\n        if num % 2!= 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # iterate over the list of tuples\n    for tup in list1:\n        # check if the index is equal to the required n\n        if len(tup) == n:\n            # return the nth element of the tuple\n            return tup[n-1]\n    # if we reach here, the nth element is not present in the list of tuples\n    return None"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    try:\n        if isinstance(list1, list) and isinstance(list1[0], tuple):\n            return list1[n-1]\n        else:\n            print(\"Invalid input. Please provide a valid list of tuples.\")\n    except Exception as e:\n        print(\"An error occurred:\", e)"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    \"\"\"\n    Write a function to extract the nth element from a given list of tuples.\n    \"\"\"\n    if n > len(list1):\n        return None\n    return list1[n-1][1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    \"\"\"\n    Write a function to extract the nth element from a given list of tuples.\n    \"\"\"\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    \"\"\"\n    Write a function to extract the nth element from a given list of tuples.\n\n    Parameters:\n    list1 (list): A list of tuples.\n    n (int): The index of the element to be extracted.\n\n    Returns:\n    The nth element of the list.\n\n    Raises:\n    ValueError: If the index is out of range.\n    \"\"\"\n\n    if n < 0 or n >= len(list1):\n        raise ValueError(\"Index out of range.\")\n\n    return list1[n][1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    try:\n        nth_element = list1[n-1][1]\n        return nth_element\n    except IndexError:\n        return None"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if isinstance(list1, list) and isinstance(list1[0], tuple):\n        return list1[n-1]\n    else:\n        raise TypeError(\"Input must be a list of tuples\")"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1][1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    \"\"\"\n    Write a function to extract the nth element from a given list of tuples.\n    \"\"\"\n    if isinstance(list1, list) and isinstance(list1[0], tuple):\n        # Extract the nth element from the list of tuples\n        return list1[n-1]\n    else:\n        return \"Invalid input. Please provide a list of tuples.\""
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return any(x in list1 for x in list2) or any(x in list2 for x in list1)"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for val in list1:\n        if val in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def overlapping(list1,list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    This function takes two sequences as input and returns True if there is any common element between the two sequences, and False otherwise.\n    \"\"\"\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for i in list1:\n        if i in list2:\n            print(i, \"exists in both lists.\")\n            return True\n    for i in list2:\n        if i in list1:\n            print(i, \"exists in both lists.\")\n            return True\n    print(\"No overlapping values found.\")\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for item in list1:\n        if item in list2:\n            print(item, \"exists in list2\")\n            break\n    else:\n        print(\"No value exists in list2\")"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    return any(item in list1 for item in list2)"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def overlapping(list1,list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Product(arr): \n    # Initialize two variables to store the maximum product and the product of the first and second maximum elements\n    max1, max2, max_product = float('-inf'), float('-inf'), float('-inf')\n    second_max = float('-inf')\n\n    # Iterate through the array and update the maximum and second maximum variables if a new pair is found\n    for num in arr:\n        if num > max1:\n            second_max = max2\n            max2 = max1\n            max1 = num\n        elif num > max2 and num!= max1:\n            second_max = max2\n            max2 = num\n        elif num > second_max and num!= max1 and num!= max2:\n            second_max = num\n\n    # Return the pair with the highest product\n    return max1, second_max"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    # Create a set to store unique elements of the array\n    unique_set = set(arr)\n    \n    # Find the pair of integers with the highest product\n    highest_product = float('-inf')\n    pair = (-1, -1)\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i]*arr[j]\n            if product > highest_product and (pair[0] == -1 or arr[i] > arr[pair[0]]):\n                highest_product = product\n                pair = (i, j)\n            elif product == highest_product and arr[i] > arr[pair[0]]:\n                pair = (i, j)\n                \n    # Return the pair of integers with the highest product\n    return pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Product(arr):\n    \"\"\"\n    This function takes an array of integers as input and returns a tuple containing the two integers in the array\n    whose product is the highest.\n    \"\"\"\n    max_1 = arr[0]\n    max_2 = arr[0]\n    min_1 = arr[0]\n    min_2 = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max_1:\n            max_2 = max_1\n            max_1 = arr[i]\n        elif arr[i] > max_2:\n            max_2 = arr[i]\n        elif arr[i] < min_1:\n            min_2 = min_1\n            min_1 = arr[i]\n        elif arr[i] < min_2:\n            min_2 = arr[i]\n    return (max_1, max_2)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    # Find the maximum and minimum values in the array\n    max_val = max(arr)\n    min_val = min(arr)\n\n    # Check if the array contains only one element\n    if len(arr) == 1:\n        return arr[0]\n\n    # Initialize the max and min product to be the same as the first element\n    max_product = min_product = arr[0]\n\n    # Loop through the array and find the maximum and minimum products of adjacent elements\n    for i in range(1, len(arr)):\n        if arr[i] > max_product:\n            max_product = arr[i]\n        elif arr[i] < min_product:\n            min_product = arr[i]\n        else:\n            continue\n\n        # Update the maximum and minimum products found so far\n        if max_product > max_val:\n            max_val = max_product\n        elif min_product < min_val:\n            min_val = min_product\n\n    # Return the pair with highest product\n    return (max_val, min_val)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Product(arr):\n    \"\"\"\n    This function takes an array of integers as input and returns a tuple containing two integers\n    representing the pair with the highest product from the array.\n    \"\"\"\n    max1 = arr[0]\n    max2 = arr[0]\n    min1 = arr[0]\n    min2 = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n        elif arr[i] < min1:\n            min2 = min1\n            min1 = arr[i]\n        elif arr[i] < min2:\n            min2 = arr[i]\n    return (max1, max2)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = float('-inf')\n    max_pair = (0,0)\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            product = arr[i]*arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = (arr[i],arr[j])\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_pair = [0,0]\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if (arr[i]*arr[j]) > (max_pair[0]*max_pair[1]):\n                max_pair = [arr[i]*arr[j], arr[i]*arr[j]]\n            elif (arr[i]*arr[j]) > (max_pair[0]):\n                max_pair[1] = arr[i]*arr[j]\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1 = arr[0]\n    max2 = arr[0]\n    min1 = arr[0]\n    min2 = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n        elif arr[i] < min1:\n            min2 = min1\n            min1 = arr[i]\n        elif arr[i] < min2:\n            min2 = arr[i]\n\n    max_product = max1 * max2\n    return max_product"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = float('-inf')\n    max_pair = (float('-inf'), float('-inf'))\n\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = (arr[i], arr[j])\n\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Product(arr):\n    if len(arr) < 2:\n        return None\n    max_val = arr[0]\n    min_val = arr[0]\n    max_product = arr[0] * arr[1]\n    min_product = arr[0] * arr[1]\n    \n    for i in range(1, len(arr)):\n        temp = max_product\n        if arr[i] > max_val:\n            max_val = arr[i]\n            max_product = arr[i]\n        elif arr[i] < min_val:\n            min_val = arr[i]\n            min_product = arr[i]\n        \n        max_product = max(max_product, min_product)\n        min_product = min(temp, min_product)\n    \n    return (max_val, min_val)"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_elements = []\n    for i in Input:\n        if not common_elements:\n            common_elements.append(i[0])\n        else:\n            for j in common_elements:\n                if i[0] == j:\n                    break\n            else:\n                common_elements.append(i[0])\n    return common_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_elements = []\n    for tuple1 in Input:\n        first_element = tuple1[0]\n        for tuple2 in Input:\n            if tuple1!= tuple2 and tuple1[0] == tuple2[0]:\n                common_elements.append(tuple1[0])\n    return common_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    \n    # Create a dictionary to store common first element and count of occurances for each element\n    common_dict = {}\n    \n    # Iterate through the input list of tuples\n    for tup in Input:\n        \n        # If the first element is already in the dictionary, increment the count of occurances\n        if tup[0] in common_dict:\n            common_dict[tup[0]] += 1\n        \n        # Otherwise, add the first element and its count of occurances to the dictionary\n        else:\n            common_dict[tup[0]] = 1\n    \n    # Find the common first element with the maximum count of occurances and return it\n    max_count = 0\n    common_element = None\n    \n    for element, count in common_dict.items():\n        if count > max_count:\n            max_count = count\n            common_element = element\n    \n    return common_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n\n    common_element = None\n    common_count = 0\n\n    for i in range(len(Input)):\n        for j in range(len(Input)-1):\n            if Input[i][0] == Input[j][0]:\n                common_count += 1\n                if common_count == len(Input[i]):\n                    common_element = Input[i][0]\n                    break\n    \n    return common_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    \n    # Create a dictionary to store common elements and their count\n    count = {}\n    \n    # Iterate through the list of tuples\n    for tup in Input:\n        \n        # Extract the first element of the tuple\n        first_element = tup[0]\n        \n        # If the element is already in the dictionary, increment its count\n        if first_element in count:\n            count[first_element] += 1\n        # Otherwise, add the element to the dictionary with a count of 1\n        else:\n            count[first_element] = 1\n    \n    # Find the common elements with the highest count\n    common_elements = []\n    max_count = 0\n    \n    for elem, count in count.items():\n        if count > max_count:\n            max_count = count\n            common_elements = [elem]\n        elif count == max_count:\n            common_elements.append(elem)\n    \n    # Return the common elements with their count\n    return common_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def group_tuples(Input):\n    '''\n    This function takes a list of tuples as input and returns a dictionary where the keys are the common first element of the tuples in the input list and the values are the number of times each common first element occurs in the input list.\n    '''\n    common_first_dict = {}\n    for i in range(len(Input)):\n        for j in range(i+1, len(Input)):\n            if Input[i][0] == Input[j][0]:\n                if Input[i][0] in common_first_dict:\n                    common_first_dict[Input[i][0]] += 1\n                else:\n                    common_first_dict[Input[i][0]] = 1\n    return common_first_dict"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def group_tuples(Input):\n    common_tuples = {}\n    for tup in Input:\n        first_element = tup[0]\n        if first_element in common_tuples:\n            common_tuples[first_element].append(tup)\n        else:\n            common_tuples[first_element] = [tup]\n    return common_tuples"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n\n    # Initialize an empty list to store common elements\n    common = []\n\n    # Iterate through the list of tuples\n    for tup in Input: \n        # Extract the first element of the tuple\n        first = tup[0]\n\n        # Check if the first element is already present in the common list\n        if first not in common: \n            # If it is not, add it to the list\n            common.append(first)\n\n    # Return the list of common elements\n    return common"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def group_tuples(Input): \n    \"\"\"\n    This function takes a list of tuples as input and returns a list of tuples where each tuple contains the same common first element as the input list.\n    \"\"\"\n    common_first_element = []\n    for tuple in Input:\n        if tuple[0] in common_first_element:\n            continue\n        else:\n            common_first_element.append(tuple[0])\n    return common_first_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    Write a function to find common first element in given list of tuple.\n    \"\"\"\n    # Initialize an empty dictionary to store common elements and their counts\n    common_dict = {}\n\n    # Loop through the input list of tuples\n    for i in Input:\n        # Extract the first element of the tuple\n        first_element = i[0]\n\n        # If the first element is not already in the dictionary, add it with a count of 1\n        if first_element not in common_dict:\n            common_dict[first_element] = 1\n        # Otherwise, increment the count of the first element in the dictionary\n        else:\n            common_dict[first_element] += 1\n\n    # Find the common element with the highest count\n    max_count = 0\n    common_element = None\n    for key, value in common_dict.items():\n        if value > max_count:\n            max_count = value\n            common_element = key\n\n    # Return the common element and its count\n    return common_element, max_count"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n\n    for element in lst:\n        if len(str(element)) > max_length:\n            max_length = len(str(element))\n            max_element = element\n\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max(lst):\n    '''\n    This function takes a list as input and returns the element of that list \n    having the maximum length.\n    '''\n    max_length = 0\n    max_element = \"\"\n    for item in lst:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_element = item\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max(lst):\n    '''\n    This function finds the maximum element of a list.\n    '''\n    max_elem = lst[0]\n    for elem in lst:\n        if len(str(elem)) > len(str(max_elem)):\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max(lst):\n    max_len = 0\n    max_str = \"\"\n\n    for i in lst:\n        if len(i) > max_len:\n            max_len = len(i)\n            max_str = i\n\n    return max_str\n"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    \n    for elem in lst:\n        if len(str(elem)) > max_len:\n            max_len = len(str(elem))\n            max_elem = elem\n    \n    return max_elem\n"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max(lst):\n    '''\n    This function takes a list as input and returns the element with maximum length.\n    '''\n    max_len = 0\n    max_elem = ''\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max(lst):\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_element = ''\n    for i in lst:\n        if len(i) > max_len:\n            max_len = len(i)\n            max_element = i\n    return max_element"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    print(total * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = sum(list(map(round, list1)))\n    print(total * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for i in range(len(list1)):\n        list1[i] = round(list1[i])\n        total_sum += list1[i]\n    \n    total_sum = total_sum * len(list1)\n    print(total_sum)"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def round_and_sum(lst):\n    total_sum = 0\n    for num in lst:\n        total_sum += round(num)\n    print(total_sum * len(lst))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    print(total * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    print(total * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    print(total * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    total = 0\n    for num in list1:\n        total += round(num)\n    print(total * len(list1))"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_Sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            sum += i ** 3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    i = 0\n    while i < n:\n        sum += i**3\n        i += 2\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # initializing the sum variable\n    sum = 0\n\n    # iterating for n times\n    for i in range(1,n+1,2):\n        # calculating the cube of i\n        cube = i ** 3\n        # adding the cube to the sum\n        sum += cube\n\n    # returning the sum of cubes of even natural numbers\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    i = 0\n    while i <= n:\n        if i % 2 == 0:\n            sum += i ** 3\n        i += 1\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1,2):\n        sum += i*i*i\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum_of_cubes = 0\n    i = 2\n    while i <= n:\n        sum_of_cubes += i**3\n        i += 2\n    return sum_of_cubes"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**3\n    return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1, 2):\n        sum_of_cubes += i ** 3\n    return sum_of_cubes"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_Sum(n): \n    '''\n    This function takes an integer as an input and returns the sum of cube of first n even natural numbers.\n    '''\n    cube_sum = 0\n    for i in range(n):\n        cube_sum += i*i*i\n    return cube_sum"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter =''\n    return delimiter.join(str(elem) for elem in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter ='- '\n    concatenated_string = ''\n    for element in test_tup:\n        concatenated_string += str(element) + delimiter\n    return concatenated_string[:-len(delimiter)]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = \"\"\n    for item in test_tup:\n        result += str(item)\n    return result"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup, delimiter=' '):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n\n    Args:\n        test_tup (tuple): A tuple containing any number of elements.\n        delimiter (str, optional): The delimiter to use for concatenating the elements. Defaults to''.\n\n    Returns:\n        str: A string containing the concatenated elements of the tuple.\n    '''\n    return delimiter.join(map(str, test_tup))"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = \",\"\n    return delimiter.join(str(i) for i in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup, delimiter=' '):\n    '''\n    Concatenate each element of tuple by the delimiter.\n    '''\n    concatenated_string = delimiter.join(map(str, test_tup))\n    return concatenated_string"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ','.join(str(i) for i in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter =''\n    return delimiter.join(test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return \", \".join([str(i) for i in test_tup])"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = ''\n    result = []\n    for item in test_tup:\n        result.append(item)\n        result.append(delimiter)\n        delimiter = '.'\n    return ''.join(result)[:-1]"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum += i**3\n    average = sum/n\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n\n    # Initialize sum variable to 0\n    sum = 0\n\n    # Loop through n natural numbers\n    for i in range(n):\n        # Calculate cube of current natural number and add to sum variable\n        sum += i**3\n\n    # Calculate and return average of cubes of first n natural numbers\n    return sum/n"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0\n    count = 0\n    for i in range(1, n+1):\n        cube = i ** 3\n        total += cube\n        count += 1\n    average = total / count\n    return average\n"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum/n"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n\n    # initialize variables\n    sum_of_cubes = 0\n    count = 0\n\n    # iterate through the first n natural numbers and calculate their cubes\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n        count += 1\n\n    # calculate the average of cubes\n    average_of_cubes = sum_of_cubes/count\n\n    # return the result\n    return average_of_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        total += i**3\n    average = total/n\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n\n    sum_of_cubes = 0\n\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n\n    average_of_cubes = sum_of_cubes / n\n\n    return average_of_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    count = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i*i*i\n        count += 1\n    return sum_of_cubes/count"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    # initialize sum and count to 0\n    sum_of_cubes = 0\n    count = 0\n\n    # loop through first n natural numbers\n    for i in range(1, n+1):\n        # calculate the cube of the number\n        cube = i*i*i\n        \n        # add the cube to the sum and increment the count\n        sum_of_cubes += cube\n        count += 1\n\n    # calculate the average of cubes and return it\n    return sum_of_cubes/count"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n\n    #initialize the sum and count variables\n    sum_of_cubes = 0\n    count = 0\n\n    #loop through the first n natural numbers\n    for i in range(1, n+1):\n\n        #calculate the cube of the current natural number and add to the sum\n        sum_of_cubes += i**3\n\n        #increment the count variable\n        count += 1\n\n    #calculate the average of cubes of the first n natural numbers\n    average_of_cubes = sum_of_cubes / count\n\n    #return the average of cubes of the first n natural numbers\n    return average_of_cubes"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_indices = []\n    for index, item in enumerate(test_tuple):\n        if index == len(test_tuple) - 1:\n            rear_indices.append(index)\n    rear_elements = []\n    for index, item in enumerate(test_tuple):\n        if index in rear_indices:\n            rear_elements.append(test_tuple[index][-1])\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_tuple)):\n        if isinstance(test_tuple[i], str):\n            rear_list.append(test_tuple[i][-1])\n        else:\n            rear_list.append(test_tuple[i])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    extracted_elements = []\n    for item in test_tuple:\n        extracted_elements.append(item[-1])\n    return extracted_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = []\n    for element in test_tuple:\n        rear_elements.append(element[-1])\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple([str(test_tuple[i][-1]) for i in range(len(test_tuple))])"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    \"\"\"\n    Write a function to extract only the rear index element of each string in the given tuple.\n    \"\"\"\n    rear_elements = []\n    for string in test_tuple:\n        rear_elements.append(string[-1])\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = []\n    for i in range(len(test_tuple)):\n        rear_elements.append(test_tuple[i][-1])\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = []\n    for i in range(len(test_tuple)):\n        rear_elements.append(test_tuple[i][-1])\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index = []\n    for i in range(len(test_tuple)):\n        rear_index.append(test_tuple[i][-1])\n    return rear_index"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index = []\n    for i in range(len(test_tuple)):\n        if isinstance(test_tuple[i], str):\n            rear_index.append(test_tuple[i][-1])\n    return rear_index"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers from a given list.\n    '''\n    odd_nums = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_nums.append(num)\n    return odd_nums"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers from a list of numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers from a list.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.match(pattern, dt)\n    if match:\n        year, month, day = match.groups()\n        yyyy, mm, dd = map(int, [year, month, day])\n        mm, dd, yyyy = dd, mm, yyyy\n        return f'{dd}-{mm}-{yyyy}'\n    else:\n        return None"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # define a regular expression pattern for matching dates in yyyy-mm-dd format\n    pattern = r'^\\d{4}-\\d{2}-\\d{2}$'\n    \n    # use re.match() function to match the pattern with the input string\n    match = re.match(pattern, dt)\n    \n    # if the pattern matches, split the date string into its components and reverse the order\n    if match:\n        year, month, day = match.groups()\n        return day + '-' + month + '-' + year\n    else:\n        # if the pattern does not match, return the original input string\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define regular expression pattern to match date format\n    pattern = r'^\\d{4}-\\d{2}-\\d{2}$'\n    # Use regular expression to match the pattern in the date string\n    match = re.match(pattern, dt)\n    # If match is found, split the date string into components\n    if match:\n        yyyy, mm, dd = match.groups()\n        # Reverse the month and day values and join them with dashes\n        new_date = f'{dd}-{mm}-{yyyy}'\n        return new_date\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define a regular expression pattern to match the date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    # Use the re.search() method to search for a match with the pattern\n    match = re.search(pattern, dt)\n    # If a match is found, extract the groups and format the date accordingly\n    if match:\n        year, month, day = match.groups()\n        new_date = day + '-' + month + '-' + year\n        return new_date\n    # If no match is found, return the original date\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define the regular expression pattern for matching date formats\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n\n    # Match the pattern in the input date string\n    match = re.match(pattern, dt)\n\n    # If the input date string matches the pattern, extract the year, month, and day components\n    if match:\n        year = match.group(1)\n        month = match.group(2)\n        day = match.group(3)\n    else:\n        return None\n\n    # Convert the year, month, and day components to dd-mm-yyyy format\n    date_str = f\"{day}-{month}-{year}\"\n\n    return date_str"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef change_date_format(dt):\n    # define regex pattern to match yyyy-mm-dd format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    \n    # match the pattern in the date string\n    match = re.match(pattern, dt)\n    \n    # if match found\n    if match:\n        # extract the matched groups\n        year, month, day = match.groups()\n        \n        # format the date string in dd-mm-yyyy format\n        new_dt = f'{day}-{month}-{year}'\n        \n        return new_dt\n    \n    # if no match found, return None\n    else:\n        return None"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef change_date_format(dt):\n    \"\"\"\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    \"\"\"\n    date_format = r'^\\d{4}-\\d{2}-\\d{2}$'\n    match = re.match(date_format, dt)\n    if match:\n        year, month, day = match.groups()\n        return f\"{day}-{month}-{year}\"\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define the regex pattern to match date format\n    pattern = r'\\d{4}-\\d{2}-\\d{2}'\n\n    # Match the pattern in the date string\n    match = re.match(pattern, dt)\n\n    # Check if the match object exists\n    if match:\n        # Extract the year, month, and day from the match object\n        year = match.group(1)\n        month = match.group(2)\n        day = match.group(3)\n\n        # Convert the month and day to the correct format\n        year = year[-2:] + '-' + year[:-2]\n        month = month.zfill(2)\n        day = day.zfill(2)\n\n        # Combine the new year, month, and day into a new date string\n        new_date = day + '-' + month + '-' + year\n\n        # Return the new date string\n        return new_date\n    else:\n        # If the date format is not yyyy-mm-dd, return the original date string\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r\"(\\d{4})-(\\d{2})-(\\d{2})\"\n    matches = re.findall(pattern, dt)\n    if matches:\n        return matches[0][2] + '-' + matches[0][1] + '-' + matches[0][0]\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    date_match = re.match(pattern, dt)\n    if date_match:\n        year, month, day = date_match.groups()\n        new_date = f'{day}-{month}-{year}'\n        return new_date\n    else:\n        return dt"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n//2\n    while gap > 0:\n        for i in range(gap, n):\n            key = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > key:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = key\n        gap = gap // 2"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    # Calculate the increment sequence\n    inc = n // 2\n    while inc > 0:\n        # Insertion sort\n        for i in range(inc, n):\n            j = i\n            while j >= inc and my_list[j] < my_list[j - inc]:\n                my_list[j], my_list[j - inc] = my_list[j - inc], my_list[j]\n                j -= inc\n            # If the insertion is successful, move on to the next increment\n            if j == i:\n                break\n        # Decrease the increment until it is one\n        inc //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    # get the length of the list\n    length = len(my_list)\n\n    # initialize gap value\n    gap = length // 2\n\n    # loop until gap is 1\n    while gap > 0:\n        # loop through all elements with gap\n        for i in range(gap, length):\n            # compare the current element with its gap ahead elements\n            j = i\n            while j >= gap and my_list[j - gap] > my_list[j]:\n                # swap the elements if they are not in order\n                my_list[j], my_list[j - gap] = my_list[j - gap], my_list[j]\n                # move the cursor to the previous gap size\n                j -= gap\n        # decrease the gap size by half\n        gap //= 2\n\n    # return the sorted list\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and temp < my_list[j-gap]:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    h = 1\n\n    while h < n//3:\n        h = 3*h + 1\n\n    while h >= 1:\n        for i in range(h, n):\n            key = my_list[i]\n            j = i\n            while j >= h and my_list[j-h] > key:\n                my_list[j] = my_list[j-h]\n                j -= h\n            my_list[j] = key\n        h = h//3"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            j = i\n            while j >= gap and my_list[j] < my_list[j - gap]:\n                # swap elements\n                temp = my_list[j]\n                my_list[j] = my_list[j - gap]\n                my_list[j - gap] = temp\n                j -= gap\n\n        # reduce gap by 1\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n\n    n = len(my_list)\n\n    # Step 1: Calculate the increment sequence\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n\n            # Shift elements of the array\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n\n            my_list[j] = temp\n\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n//2\n    while gap > 0:\n        for i in range(gap, n):\n            key = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > key:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = key\n        gap //= 2\n    return my_list"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = ()\n    for i in range(len(test_tup1)):\n        and_tup += (test_tup1[i] & test_tup2[i],)\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples as input and returns their elementwise and tuples.\n    \"\"\"\n    # create a new tuple with the elementwise and tuples of the input tuples\n    and_tup = tuple(zip(test_tup1, test_tup2))\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = ()\n    for i in range(len(test_tup1)):\n        and_tup += (test_tup1[i] & test_tup2[i],)\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n\n    if len(test_tup1)!= len(test_tup2):\n        return \"Error: The two tuples have different lengths.\"\n\n    and_tups = []\n    for i in range(len(test_tup1)):\n        and_tups.append((test_tup1[i] & test_tup2[i], test_tup1[i] & test_tup2[i]))\n\n    return and_tups"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    \"\"\"\n    # initialize a list to store the elementwise and tuples\n    and_list = []\n    # iterate over both tuples\n    for i in range(len(test_tup1)):\n        # extract the elements at indices i and i+1 from the two tuples\n        element1 = test_tup1[i]\n        element2 = test_tup2[i]\n        # extract the elementwise and of the elements at indices i and i+1\n        and_element = element1 & element2\n        # append the elementwise and tuple to the and_list\n        and_list.append((element1, element2, and_element))\n    # return the and_list\n    return and_list"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Using the zip function to iterate over the two tuples and comparing the elements\n    for i in range(len(test_tup1)):\n        if test_tup1[i] and test_tup2[i]:\n            # If both the elements are True, add them to a new tuple and print it\n            print(i, test_tup1[i], test_tup2[i], \"and\", test_tup1[i] & test_tup2[i])\n    # Returning the new tuple as the result of the function\n    return test_tup1 & test_tup2"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples must have the same length.\")\n    else:\n        result_list = []\n        for i in range(len(test_tup1)):\n            result_list.append(test_tup1[i] & test_tup2[i])\n        return result_list"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(x and y for x, y in zip(test_tup1, test_tup2))"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(a and b for a, b in zip(test_tup1, test_tup2))"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant > 0:\n        root1 = (-b + discriminant**0.5) / (2*a)\n        root2 = (-b - discriminant**0.5) / (2*a)\n        print(\"The directrix of the parabola is:\", root1, \"and\", root2)\n    elif discriminant == 0:\n        root = -b / (2*a)\n        print(\"The directrix of the parabola is:\", root)\n    else:\n        print(\"The parabola has no real root.\")"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant >= 0:\n        return (-b + discriminant**0.5)/(2*a)\n    else:\n        return (-b - discriminant**0.5)/(2*a)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c):\n    \"\"\"\n    Write a function to find the directrix of a parabola.\n    \"\"\"\n    # calculate the discriminant\n    discriminant = b**2 - 4*a*c\n\n    # calculate the root of the discriminant\n    root = (-b + discriminant**0.5) / (2*a)\n\n    # check if the directrix is real or complex\n    if b > 0:\n        return root\n    elif b == 0:\n        return 0\n    else:\n        return -root"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    determinant = b**2 - 4*a*c\n    if determinant > 0:\n        x = (-b + determinant**0.5) / (2*a)\n        y = (-b - determinant**0.5) / (2*a)\n        print(\"The directrix is:\", x)\n        print(\"The directrix is:\", y)\n    elif determinant == 0:\n        x = -b / (2*a)\n        y = -b / (2*a)\n        print(\"The directrix is:\", x)\n    else:\n        print(\"The equation of the parabola is not real\")"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # Find the discriminant\n    discriminant = b**2 - 4*a*c\n\n    # If discriminant is negative, the directrix is one of the two roots\n    if discriminant < 0:\n        return None\n    \n    # If discriminant is zero, the directrix is at the focus point of the parabola\n    elif discriminant == 0:\n        return -b/(2*a)\n    \n    # If the discriminant is positive, the directrix is at one of the two roots\n    else:\n        return (-b + math.sqrt(discriminant))/(2*a)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    This function finds the directrix of a parabola.\n    '''\n    # Define the equation of the parabola\n    parabola = a*x**2 + b*x + c\n    # Use the quadratic formula to solve for the directrix\n    directrix = (-b + sqrt(b**2 - 4*a*c)) / (2*a)\n    # Return the directrix\n    return directrix"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant < 0:\n        return \"The parabola has no real roots.\"\n    elif discriminant == 0:\n        return \"The parabola has a single real root.\"\n    else:\n        x1 = (-b + discriminant**0.5)/(2*a)\n        x2 = (-b - discriminant**0.5)/(2*a)\n        return f\"The parabola has two real roots: {x1} and {x2}.\""
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    \n    if discriminant < 0:\n        return \"No real roots\"\n    elif discriminant == 0:\n        x1 = -b/(2*a)\n        return \"x1 = {}\".format(x1)\n    else:\n        x1 = (-b + math.sqrt(discriminant))/(2*a)\n        x2 = (-b - math.sqrt(discriminant))/(2*a)\n        return \"x1 = {}, x2 = {}\".format(x1, x2)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    \n    if discriminant > 0:\n        root1 = (-b + discriminant**0.5)/(2*a)\n        root2 = (-b - discriminant**0.5)/(2*a)\n        return root1, root2\n    elif discriminant == 0:\n        root = -b/(2*a)\n        return root\n    else:\n        return \"The quadratic equation does not have a real root.\""
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    This function takes in three parameters, a, b, and c, and returns the value of the directrix of a parabola.\n    \n    The directrix is the point where the parabola crosses the y-axis. \n    It is the point where the line through the origin (0,0) intersects the parabola at a distance of 0.\n    \n    The directrix is defined as:\n\n    directrix = (-b +/- sqrt(b^2 - 4ac)) / 2a\n\n    The function uses the quadratic formula to find the root of this equation.\n\n    Args:\n    a, b, c (floats): coefficients of the parabola.\n\n    Returns:\n    float: value of the directrix of the parabola.\n\n    Example:\n    >>> parabola_directrix(1, 2, 1)\n    1\n    '''\n\n    if a == 0:\n        return None  # cannot find directrix for a vertical line\n\n    disc = b**2 - 4*a*c\n    root1 = (-b + disc**0.5) / (2*a)\n    root2 = (-b - disc**0.5) / (2*a)\n\n    return root1 if root1 > 0 else root2  # choose the root with positive value"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    This function takes two lists as input and returns True if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    # Convert both lists to sets to remove duplicates\n    set1 = set(list1)\n    set2 = set(list2)\n    \n    # Check if there is at least one common element in both sets\n    if len(set1.intersection(set2)) > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1) > len(list2):\n        list1, list2 = list2, list1\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    This function takes two lists and returns True if they have at least one common element, False otherwise.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common = False\n    for i in list1:\n        if i in list2:\n            common = True\n            break\n    return common"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n\n    # Convert the lists to sets to remove duplicates\n    list1_set = set(list1)\n    list2_set = set(list2)\n\n    # Find the intersection of the two sets using the & operator\n    intersection = list1_set & list2_set\n\n    # If the intersection is not empty, then there is a common element\n    if intersection:\n        return True\n    else:\n        return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # create a set of elements in list1 and list2\n    set1 = set(list1)\n    set2 = set(list2)\n    # compare the sets and return true if there is at least one common element\n    return len(set1.intersection(set2)) > 0"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common = False\n    for i in list1:\n        if i in list2:\n            common = True\n            break\n    return common"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    area = 0.5*(base1+base2)*(height+height)\n    return area*base1"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the length of the upper half of the trapezium\n    half_height = height / 2\n    \n    # Calculate the length of the lower half of the trapezium\n    lower_half_height = height - half_height\n    \n    # Calculate the length of the upper half of the first trapezium base\n    first_half_base1 = base1 / 2\n    \n    # Calculate the length of the lower half of the first trapezium base\n    lower_half_base1 = base1 - first_half_base1\n    \n    # Calculate the length of the upper half of the second trapezium base\n    second_half_base1 = base2 / 2\n    \n    # Calculate the length of the lower half of the second trapezium base\n    lower_half_base2 = base2 - second_half_base1\n    \n    # Calculate the lengths of the four trapezium bases\n    base1_length = first_half_base1 + lower_half_base1\n    base2_length = second_half_base1 + lower_half_base2\n    lower_half_length = base1_length + base2_length\n    upper_half_length = lower_half_length + half_height\n    \n    # Calculate the lengths of the two trapezium bases\n    base1_length = first_half_base1 + second_half_base1\n    base2_length = lower_half_base1 + lower_half_base2\n    lower_half_length = base1_length + base2_length\n    upper_half_length = lower_half_length + half_height\n    \n    # Calculate the length of the trapezium\n    trapezium_length = lower_half_length + upper_half_length\n    \n    # Determine the side of the trapezium with the highest length\n    side = None\n    if trapezium_length == base1_length:\n        side = 'base1'\n    elif trapezium_length == base2_length:\n        side = 'base2'\n    elif trapezium_length == lower_half_length:\n        side = 'lower_half'\n    elif trapezium_length == upper_half_length:\n        side = 'upper_half'\n    \n    # Determine the side of the other trapezium with the same length as the first\n    other_side = None\n    if side == 'base1' or side == 'lower_half':\n        other_side = 'base2'\n    elif side == 'base2' or side == 'lower_half':\n        other_side = 'base1'\n    \n    # Calculate the lengths of the two trapezium sides\n    side1_length = None\n    side2_length = None\n    if side == 'base1':\n        side1_length = base1_length\n        side2_length = base2_length\n    elif side == 'base2':\n        side1_length = base2_length\n        side2_length = base1_length\n    elif side == 'lower_half':\n        side1_length = lower_half_length\n        side2_length = lower_half_length\n    elif side == 'upper_half':\n        side1_length = upper_half_length\n        side2_length = upper_half_length\n    \n    # Calculate the length of the median trapezium\n    median_trapezium_length = None\n    if side1_length > side2_length:\n        median_trapezium_length = side1_length\n    else:\n        median_trapezium_length = side2_length\n    \n    # Calculate the middle point of the median trapezium\n    middle_point = None\n    if side == 'lower_half' or side == 'upper_half':\n        middle_point = (half_height - (lower_half_length - upper_half_length)) / 2\n    elif side == 'base1' or side == 'base2':\n        middle_point = (half_height - (base1_length + base2_length)) / 2\n    \n    # Determine which side of the trapezium the median is on\n    if middle_point < base1_length:\n        median_side = 'base1'\n    elif middle_point < base1_length + base2_length:\n        median_side = 'base2'\n    else:\n        median_side = 'lower_half'\n    \n    # Calculate the median length of the trapezium\n    median_length = None\n    if median_side == 'base1':\n        median_"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    median = 0.5 * min(base1, base2) + 0.5 * height\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n\n    # Compute the length of each half\n    half1 = base1 * 0.5\n    half2 = base2 * 0.5\n\n    # Compute the area of each half\n    area1 = half1 * height\n    area2 = half2 * height\n\n    # Compute the sum of the areas\n    total_area = area1 + area2\n\n    # Compute the median area\n    median_area = 0.5 * total_area\n\n    # Compute the length of the trapezium\n    trapezium_length = 0.5 * math.sqrt(median_area * (base1 + base2))\n\n    # Compute the median length\n    median_length = 0.5 * (trapezium_length + half1 + half2)\n\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n\n    # Calculate the lengths of the three sides of the trapezium\n    s1 = 0.5 * base1\n    s2 = 0.5 * (base1 + base2)\n    s3 = height\n\n    # Sort the lengths of the sides in ascending order\n    sides = sorted([s1, s2, s3])\n\n    # Find the area of the trapezium using Heron's formula\n    area = 0.5 * sides[0] * sides[1]\n\n    # Find the length of the trapezium\n    base_of_trapezium = sides[1]\n    length_of_trapezium = 2 * sides[0] - sides[1]\n\n    # Calculate the perimeter of the trapezium\n    perimeter = base_of_trapezium + sides[0] + sides[1]\n\n    # Calculate the median length of the trapezium\n    if area > length_of_trapezium:\n        median = base_of_trapezium\n    else:\n        median = sides[0]\n\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # find the area of the trapezium\n    area = (base1 + base2) * height / 2\n    \n    # calculate the length of the base of the upper half\n    half_base = area / height\n    \n    # calculate the length of the base of the lower half\n    lower_half = area - half_base\n    \n    # find the median of the base of the upper and lower halves\n    median_upper = (half_base + lower_half) / 2\n    median_lower = half_base / 2\n    \n    # calculate the length of the trapezium using the formula: \n    # half_base + lower_half = half_base + median_lower + median_upper\n    median_trapezium = (half_base + lower_half) / 2\n    \n    # find the median of the length of the trapezium\n    return median_trapezium"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n\n    Parameters:\n    base1 (float): The length of the first base of the trapezium.\n    base2 (float): The length of the second base of the trapezium.\n    height (float): The height of the trapezium.\n\n    Returns:\n    float: The median length of the trapezium.\n    \"\"\"\n\n    # Calculate the length of the trapezium using the formula:\n    # length = (base1 + base2) * height / 2\n\n    trapezium_length = (base1 + base2) * height / 2\n\n    # Sort the sides of the trapezium in ascending order\n    sorted_sides = sorted([base1, base2, height])\n\n    # Calculate the index of the median side\n    median_index = len(sorted_sides) // 2\n\n    # Calculate the median length of the trapezium\n    median_length = sorted_sides[median_index]\n\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    half_height = height / 2\n    area1 = base1 * half_height\n    area2 = base2 * half_height\n    area_trapezium = area1 + area2\n    median_area = area_trapezium / 2\n    return math.sqrt(median_area)"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the area of the trapezium\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n    \n    # Calculate the length of the trapezium\n    length = 2 * area / (base1 + base2)\n    \n    # Calculate the median length\n    median_length = length\n    \n    # Return the median length\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the area of the trapezium\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n\n    # Calculate the length of the trapezium\n    length = 2 * area / height\n\n    # Sort the lengths of the trapezium in ascending order\n    lengths = sorted([length, 0.5 * base1, 0.5 * base2])\n\n    # Calculate the median length\n    median = lengths[1]\n\n    return median"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    for element in arr:\n        if element > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    \"\"\"\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater = False\n    for i in range(len(arr)):\n        if arr[i] > number:\n            greater = True\n            break\n    return greater"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for element in arr:\n        if element > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    count = 0\n    for num in arr:\n        if num > number:\n            count += 1\n    if count > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for num in arr:\n        if num > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater = False\n    for i in range(len(arr)):\n        if arr[i] > number:\n            greater = True\n            break\n    return greater"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if number > arr[0]:\n        return True\n    else:\n        for i in range(1, len(arr)):\n            if arr[i] > number:\n                return True\n            elif arr[i] == number:\n                return False\n        return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a+b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a(?=b)'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a(?=[bB][^a])'\n    return re.findall(pattern, text)"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a{1,}b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        print(match.group())\n    else:\n        print('No match found.')"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'\\ba\\w*b\\w*\\b')\n    result = pattern.search(text)\n    \n    if result:\n        return result.group()\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'\\ba\\w*b\\w*\\Z'\n    return bool(re.match(pattern, text))"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = re.compile(r'a\\w*b')\n    match = pattern.search(text)\n    if match:\n        return match.group()\n    else:\n        return None\n"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a.*b')\n    match = pattern.match(text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    last_digit = n % 10\n    return last_digit"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return last_Digit(n // 10) + n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit(n):\n    '''\n    This function takes a positive integer as input and returns its last digit.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    last = n % 10\n    return last"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit(n) :\n    \"\"\"\n    Write a python function to find the last digit of a given number.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def neg_nos(lst):\n    '''\n    This function takes a list of numbers and returns a new list with negative numbers.\n    '''\n    neg_list = []\n    for num in lst:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    This function takes a list of integers as input and returns the negative numbers in the list.\n    \"\"\"\n    neg_lst = []\n    for num in list1:\n        if num < 0:\n            neg_lst.append(num)\n    return neg_lst"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def neg_nos(lst):\n    '''\n    This function takes a list of integers as input and returns the negative numbers in the list.\n    '''\n    neg_list = []\n    for i in lst:\n        if i < 0:\n            neg_list.append(i)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for i in list1:\n        if i < 0:\n            neg_list.append(i)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    Write a python function to return the negative numbers in a list.\n    \"\"\"\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    new_str = \"\"\n    for char in str1:\n        if char.isalpha():\n            if ord(char) % 2 == 0:\n                new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    str1 = list(str1)\n    odd_chars = []\n    for i in str1:\n        if i.isdigit():\n            odd_chars.append(i)\n    return ''.join(odd_chars)"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(string):\n    \"\"\"\n    This function takes in a string as an argument and removes all the odd characters in the string.\n    \"\"\"\n    result = \"\"\n    for char in string:\n        if char.isalpha():\n            if char.isupper():\n                result += char.upper()\n            elif char.islower():\n                result += char.lower()\n    return result"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    return ''.join([char for char in str1 if char.isalnum()])"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if char.isdigit() and int(char) % 2 == 0:\n            continue\n        else:\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if char % 2 == 0:\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Remove odd characters from a string.\n\n    Parameters\n    ----------\n    str1 : str\n        A string.\n\n    Returns\n    -------\n    str\n        A new string with odd characters removed.\n    \"\"\"\n\n    # Initialize a new empty string to store the new string without odd characters\n    new_str = \"\"\n\n    # Loop through each character in the input string\n    for char in str1:\n        # Check if the character is odd (i.e. divisible by 2)\n        if char % 2 == 1:\n            # If the character is odd, add it to the new string\n            new_str += char\n\n    # Return the new string with odd characters removed\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(string):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    new_string = \"\"\n    for char in string:\n        if char.isdigit():\n            new_string += char\n    return new_string"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(string):\n    \"\"\"\n    This function takes a string as an argument and returns a new string with all odd characters removed.\n    \"\"\"\n    # initialize an empty string to hold the new string\n    new_string = \"\"\n    # loop through each character in the original string\n    for char in string:\n        # check if the character is odd and append it to the new string if it is\n        if char % 2!= 0:\n            new_string += char\n    # return the new string with all odd characters removed\n    return new_string"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join(c for c in str1 if c.isdigit() or c.isalpha())"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][1] == test_list[j][0]) and (test_list[j][1] == test_list[i][0]):\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if tuple(test_list[i]) == tuple(test_list[j]):\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if i < j:\n                if (test_list[i], test_list[j]) in test_list[j:i+1]:\n                    count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i], test_list[j]) in test_list[j:i+1] or (test_list[j], test_list[i]) in test_list[j:i+1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] in test_list[j] and test_list[j][::-1] in test_list[i]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    bidirectional_count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                bidirectional_count += 1\n    return bidirectional_count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] in test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Write a function to count bidirectional tuple pairs.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] in test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for i in range(len(L)):\n        if L[i] % 10 == 0:\n            result += L[i]\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    Write a function to join a list of multiple integers into a single integer.\n    \"\"\"\n    # Initialize the sum variable with the first element of the list\n    sum = L[0]\n    \n    # Loop through the remaining elements of the list\n    for i in range(1, len(L)):\n        # If the current element is a multiple of 10, add it to the sum\n        if L[i] % 10 == 0:\n            sum += L[i]\n    \n    return sum"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Initialize variables\n    sum_of_multiples = 0\n    multiple_count = 1\n    single_number = 0\n    \n    # Iterate through the list of integers\n    for num in L:\n        # Calculate the number of multiples of the current integer\n        num_multiples = L.count(num)\n        \n        # Check if the current integer is a multiple of the sum of previous integers\n        if num_multiples % multiple_count == 0:\n            # If it is, add it to the sum of multiples\n            sum_of_multiples += num * multiple_count\n            \n            # Reset the multiple count to 1 since we have found a new multiple\n            multiple_count = 1\n            \n            # Reset the single number to 0 since we have found a new multiple\n            single_number = 0\n            \n        else:\n            # If it's not, add it to the single number\n            single_number += num * multiple_count\n            \n            # Increment the multiple count by 1\n            multiple_count += 1\n    \n    # Return the sum of multiples and the single number\n    return sum_of_multiples, single_number"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if len(L) == 0:\n        return None\n    elif len(L) == 1:\n        return L[0]\n    else:\n        max_multiple = max(L)\n        single_number = 0\n        for i in range(2, max_multiple+1):\n            if all(j % i == 0 for j in L):\n                single_number = i\n                break\n        if single_number == 0:\n            raise ValueError('There is no common multiple for the given list of integers.')\n        return single_number"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if not L:\n        return 0\n    if len(L) == 1:\n        return L[0]\n    return L[0] + multiple_to_single(L[1:])"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    total = 1\n    for x in L:\n        total *= x\n    return total"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    single_number = 0\n    for num in L:\n        single_number = single_number * 10 + num\n    return single_number"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        result = result * num\n    return result"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    \n    # Split the text into words and sentences\n    words = re.findall(r'\\w+', text)\n    sentences = re.split(r'[.?!]', text)\n    \n    # Initialize empty lists to store adverb and their positions\n    adverbs = []\n    adverb_positions = []\n    \n    # Iterate through each sentence\n    for i, sentence in enumerate(sentences):\n        # Remove punctuation and convert to lowercase\n        sentence = sentence.translate(str.maketrans('', '', string.punctuation)).lower()\n        \n        # Check if the sentence contains an adverb\n        if re.search(r'(\\w+)\\s*(?:is|are)\\s*(?:an|a|the)\\s*(?:adverb)\\s*(?:of)?\\s*(.*?)\\s*(?:and|or)\\s*(?:\\w+)?', sentence, re.IGNORECASE):\n            # Find the adverb and its position\n            adverb = re.search(r'(\\w+)\\s*(?:is|are)\\s*(?:an|a|the)\\s*(?:adverb)\\s*(?:of)?\\s*(.*?)\\s*(?:and|or)\\s*(?:\\w+)?', sentence, re.IGNORECASE).group(1)\n            adverb_position = re.search(r'(\\w+)\\s*(?:is|are)\\s*(?:an|a|the)\\s*(?:adverb)\\s*(?:of)?\\s*(.*?)\\s*(?:and|or)\\s*(?:\\w+)?', sentence, re.IGNORECASE).start()\n            \n            # Add the adverb and its position to their respective lists\n            adverbs.append(adverb)\n            adverb_positions.append(adverb_position)\n    \n    # Print the adverb and its position\n    print('Adverb:', adverbs[0])\n    print('Position:', adverb_positions[0])"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define a regular expression pattern to match adverbs\n    adverb_pattern = r'\\b(very|seriously|amazing|amazingly|extraordinary|fantastic|terrific|excellent|exceptional|amazingly|lovely|nice|superb|so-so|amazingly|wonderful|incredible|magical|extraordinarily|unbelievably|splendid|fabulous|astonishing|sumptuous|splendidly|superbly|enormous|amazingly|fantastically|fabulously|incredibly|glorious|heartbreaking|wondrous|maddening|majestic|incredibly|stunning|amazingly|stupendous|outrageous|outrageously|outstanding|unprecedentedly|unquestionably|amazingly|powerful|amazing|fortunate|splendid|unbelievable|unbelievably|unimaginably|wondrously|unprecedented|unprecedentedly|unquestionably|incredibly|astonishingly|exceptionally|amazingly|exquisite|greatly|amazingly|excellent|amazingly|wonderful|so-so|terrifically|extraordinarily|splendidly|fantastically|majestically|superbly|unbelievably|unbelievable|unimaginably|outrageously|outstanding|unprecedentedly|unquestionably)\\b'\n\n    # Find all the adverbs in the text\n    matches = re.findall(adverb_pattern, text)\n\n    # Iterate through each adverb and print its position in the sentence\n    for i, match in enumerate(matches):\n        print(f\"{match} found at position {i+1}.\")\n\n    # If no adverbs are found, print a message saying so\n    if not matches:\n        print(\"No adverbs found.\")"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Find all the adverbs in the sentence\n    adverbs = re.findall(r'\\b\\w+\\b', text)\n    \n    # Loop through each adverb and its position in the sentence\n    for i, adverb in enumerate(adverbs):\n        # Print the adverb and its position\n        print(f'Adverb {i+1}: {adverb}')"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n\n    # Regular expression to find adverbs in the sentence\n    pattern = r'\\b([a-zA-Z]+\\s*adverb\\b)'\n\n    # Find all the occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n\n    # Sort the matches based on their position in the text\n    matches.sort(key=lambda x: text.find(x[0]))\n\n    # Return the sorted matches\n    return matches"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverbs = re.findall(r'\\b\\w*[a-z]\\w*[a-z]\\w*\\b', text)\n    if adverbs:\n        print(\"Adverbs: \", adverbs)\n        for i, adv in enumerate(adverbs):\n            print(f\"{i+1}. {adv}\")\n    else:\n        print(\"No adverbs found.\")"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverb_position(text):\n    \"\"\"\n    Write a function to find the first adverb and their positions in a given sentence.\n    \"\"\"\n    # define the pattern to match adverbs\n    pattern = r'\\b(?:after|again|also|although|as|at|before|because|but|by|consequently|considering|could|dare|did|during|else|enough|even|further|in|including|instead|just|less|most|much|namely|nevertheless|never|next|no|nor|not|of|off|on|only|or|out|over|since|so|some|than|that|the|their|then|there|these|thus|till|too|under|unless|unlike|until|up|upon|very|was|were|what|when|where|while|who|why|will|with|without|without|without|yet|you|your|your|your)\\b'\n\n    # use the re.findall() function to find all occurrences of the pattern in the text\n    adverbs = re.findall(pattern, text)\n\n    # print the adverbs and their positions\n    for index, adverb in enumerate(adverbs):\n        print(f'{index+1}. {adverb}')\n\n    # print a message if no adverbs are found\n    if len(adverbs) == 0:\n        print('No adverbs found.')\n"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverb_position(text):\n    \"\"\"\n    This function takes a text string as input and returns a dictionary where the keys are the adverbs\n    and the values are their positions in the text.\n    \"\"\"\n\n    # Define regular expression pattern to match adverbs\n    pattern = r'\\b(also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverb_position(text):\n    \"\"\"\n    Write a function to find the first adverb and their positions in a given sentence.\n    \"\"\"\n\n    # Define the regex pattern to match adverbs\n    pattern = r'\\b(?:adverb|adv|adv_phrase)\\b'\n\n    # Search for the pattern in the text and get the matches\n    matches = re.findall(pattern, text, re.IGNORECASE)\n\n    # Create a dictionary to store the adverbs and their positions\n    adverb_positions = {}\n\n    # Iterate through the matches and add them to the dictionary\n    for match in matches:\n        position = text.lower().index(match.lower())\n        adverb_positions[match] = position\n\n    # Return the dictionary of adverbs and their positions\n    return adverb_positions"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverbs = re.findall(r'\\b(adverb)\\b', text)\n    if adverbs:\n        print(f\"Adverb: {adverbs[0]}, Position: {text.lower().index(adverbs[0])}\")\n    else:\n        print(\"No adverbs found.\")"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverb_position(text):\n    # Define regex pattern to find adverbs\n    pattern = r'\\b(?:a|an|the|as|at|on|to|in|with|by)\\b'\n\n    # Use re.findall() function to find all occurrences of the pattern in the given text\n    adverbs = re.findall(pattern, text)\n\n    # Sort the adverbs based on their positions in the sentence\n    adverbs.sort(key=lambda x: text.index(x))\n\n    # Print the adverbs and their positions in the sentence\n    for i, adv in enumerate(adverbs):\n        print(f'{adv} : {i+1}')"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l*l"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    # Calculate the surface area of the cube using the formula: 6 * (l**2)\n    surface_area = 6 * (l**2)\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    area = l**2 * 6\n    return area\n"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * (l * l + l * l + l * l)\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l * l * l\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    # calculate the surface area of the cube\n    return 6 * l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2\n"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l**2\n    return surface_area"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # Use an array to store integers\n    arr = array('i', nums)\n    count = 0\n    total_count = 0\n\n    # Iterate through the array\n    for num in arr:\n        if num > 0:\n            count += 1\n        total_count += 1\n\n    # Calculate and return the ration of positive numbers\n    return count / total_count"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # convert the array to a list to make it mutable\n    nums_list = list(nums)\n\n    # initialize the positive count and the total count\n    pos_count = 0\n    total_count = len(nums_list)\n\n    # iterate through the list and count the positive values\n    for num in nums_list:\n        if num > 0:\n            pos_count += 1\n\n    # compute the ration and return it as a float\n    return pos_count / total_count"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive = 0\n    total = len(nums)\n    for num in nums:\n        if num > 0:\n            positive += 1\n    return positive / total"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    arr = array('i', nums) # convert nums to an array of integers\n    count = 0\n    for i in arr:\n        if i > 0:\n            count += 1\n    return count / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_num = 0\n    total_num = len(nums)\n    for num in nums:\n        if num > 0:\n            positive_num += 1\n    return positive_num / total_num"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # Initialize arrays to store positive and negative numbers\n    positive = array('i')\n    negative = array('i')\n\n    # Loop through the array and add positive and negative numbers to the appropriate arrays\n    for num in nums:\n        if num > 0:\n            positive.append(num)\n        else:\n            negative.append(num)\n\n    # Calculate the ration of positive and negative numbers\n    pos_count = len(positive)\n    neg_count = len(negative)\n    pos_neg_count = pos_count + neg_count\n\n    if pos_neg_count == 0:\n        return 0\n    else:\n        return pos_count / pos_neg_count"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    arr = array('i', nums)\n    count = 0\n    for num in arr:\n        if num > 0:\n            count += 1\n    return count / len(arr)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\n\ndef positive_count(nums):\n    \"\"\"\n    Write a function to find the ration of positive numbers in an array of integers.\n    \"\"\"\n    # Convert the array to a list\n    nums_list = list(nums)\n\n    # Initialize the count of positive numbers to 0\n    count_pos = 0\n\n    # Iterate through the list of integers\n    for num in nums_list:\n        # Check if the number is positive\n        if num > 0:\n            # Increment the count of positive numbers\n            count_pos += 1\n\n    # Calculate the ration of positive numbers\n    ratio = count_pos / len(nums_list)\n\n    return ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def positive_count(nums):\n    \"\"\"\n    Write a function to find the ration of positive numbers in an array of integers.\n    \"\"\"\n    # Count the number of positive integers in the array\n    pos_count = sum(1 for num in nums if num > 0)\n\n    # Count the number of negative integers in the array\n    neg_count = sum(1 for num in nums if num < 0)\n\n    # Calculate the ration of positive numbers\n    pos_ratio = pos_count / (pos_count + neg_count)\n\n    # Return the ration of positive numbers\n    return pos_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n\n    # create an array to store the positive integers\n    positives = array('i')\n\n    # iterate through the array and count the positive integers\n    for num in nums:\n        if num > 0:\n            positives.append(num)\n\n    # calculate the ration of positive integers\n    total = len(nums)\n    positive_num = len(positives)\n    ratio = positive_num / total\n    return ratio"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = list1[0]\n    for num in list1:\n        if num < 0 and num > max_neg:\n            max_neg = num\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    largest = None\n    for num in list1:\n        if num < 0:\n            if largest is None or num > largest:\n                largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_neg(list1):\n    '''\n    This function takes a list as input and returns the largest negative number in the list.\n    '''\n    largest = float('-inf')\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_neg(lst):\n    \"\"\"\n    Find the largest negative number in a list of integers.\n    \"\"\"\n    neg_num = -1\n    for num in lst:\n        if num < 0 and num > neg_num:\n            neg_num = num\n    return neg_num"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    max_neg = float('-inf') # initialize the maximum negative number as negative infinity\n    for num in list1:\n        if num < 0:\n            if num > max_neg:\n                max_neg = num\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = None\n    for num in list1:\n        if num < 0 and (largest is None or num > largest):\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_neg(list1): \n    '''\n    This function takes a list as an argument and returns the largest negative number present in the list.\n    '''\n    largest = list1[0]\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    max_neg = list1[0]\n    for num in list1:\n        if num < 0 and num > max_neg:\n            max_neg = num\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = float('-inf') # Initialize max_neg to negative infinity\n    for num in list1:\n        if num < 0 and num > max_neg:\n            max_neg = num # Update max_neg if a negative number is found\n    return max_neg # Return the largest negative number found"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if len(test_list[i][j]) > K:\n                test_list[i][j] = test_list[i][j][:K]"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for tup in test_list:\n        trimmed_tup = tuple(tup[i:i+K] for i in range(0, len(tup), K))\n        result.append(trimmed_tup)\n    return result"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n\n    # Initialize an empty list to store the trimmed tuples\n    trimmed_list = []\n\n    # Loop through each tuple in the list\n    for tup in test_list:\n        # Split the tuple into a list of values\n        values = list(tup)\n\n        # Loop through each value in the list\n        for i in range(len(values)):\n            # If the value is larger than k, remove it from the list\n            if values[i] > K:\n                values.pop(i)\n                break\n\n        # Convert the list of values back into a tuple\n        trimmed_tup = tuple(values)\n\n        # Add the trimmed tuple to the list of trimmed tuples\n        trimmed_list.append(trimmed_tup)\n\n    # Return the list of trimmed tuples\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result_list = []\n    \n    for tuple_item in test_list:\n        result_list.append(tuple(tuple_item[i:i+K]))\n        \n    return result_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = tuple(test_list[i][:K] + tuple(test_list[i][K:]))\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    \"\"\"\n    Write a function to trim each tuple by k in the given tuple list.\n    \"\"\"\n    trimmed_list = []\n    for tup in test_list:\n        if len(tup) > K:\n            trimmed_list.append(tup[:K])\n        else:\n            trimmed_list.append(tup)\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        if len(test_list[i]) > K:\n            test_list[i] = test_list[i][:K]"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # Using list comprehension to trim each tuple by k\n    trimmed_list = [tuple(item[k:]) for item in test_list]\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n\n    Parameters:\n    test_list (list): a list of tuples to be trimmed\n    K (int): the number of elements to be trimmed from each tuple\n\n    Returns:\n    trimmed_list (list): a list of trimmed tuples\n    '''\n\n    trimmed_list = []\n    for t in test_list:\n        trimmed_t = tuple([x for i, x in enumerate(t) if i % K!= 0])\n        trimmed_list.append(trimmed_t)\n\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        if len(test_list[i]) > K:\n            test_list[i] = tuple(test_list[i][:K])\n    return test_list"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    This function takes in two tuples and performs index-wise multiplication of their elements.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Both tuples should have the same length.\")\n        return None\n    else:\n        multiplied_tup = ()\n        for i in range(len(test_tup1)):\n            multiplied_tup += (test_tup1[i] * test_tup2[i],)\n        return multiplied_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # initialize an empty list to store the result\n    result = []\n\n    # iterate through both tuples and multiply each element at each index\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n\n    # return the list of results\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] *= test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] * test_tup2[i])\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # getting the length of the two tuples\n    len1 = len(test_tup1)\n    len2 = len(test_tup2)\n    # checking if the two tuples have the same length\n    if len1!= len2:\n        print(\"The two tuples are not of equal length!\")\n        return None\n    else:\n        # creating an empty list to store the result of index multiplication\n        result_list = []\n        # iterating through the two tuples and multiplying the corresponding elements at each index\n        for i in range(len1):\n            result_list.append(test_tup1[i] * test_tup2[i])\n        # returning the result list as the output\n        return result_list"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples must have the same length.\")\n        return\n    \n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    \n    return result_tup"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(tup)\n    count = {}\n    \n    for key, value in count_dict.items():\n        if key in lst:\n            count[key] = value\n            \n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = {}\n    for element in lst:\n        count_dict[element] = tup.count(element)\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(lst)\n    return count.most_common(tup)"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = {}\n    \n    # Iterate through the list and count the occurence of each element in the tuple\n    for elem in lst:\n        count_dict[elem] = tup.count(elem)\n    \n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(tup)\n    for item in lst:\n        if item in count:\n            count[item] += 1\n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(lst)\n    count = {}\n    for key in count_dict.keys():\n        count[tup[lst.index(key)]] = count_dict[key]\n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = {} \n    for item in tup: \n        if item in lst: \n            count_dict[item] = count_dict.get(item, 0) + 1 \n    return count_dict "
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # Convert the tuple to a set to remove duplicates\n    set_tup = set(tup)\n    # Count the occurrence of each element in the set_tup using Counter function from collections module\n    count_dict = Counter(set_tup)\n    # Convert the count_dict to a list and count the occurrence of each element in the list\n    count_lst = count_dict.most_common()\n    # Create a dictionary to store the count of each element in the list\n    count_dict_lst = {}\n    for i in count_lst:\n        if i[0] in count_dict_lst:\n            count_dict_lst[i[0]] += i[1]\n        else:\n            count_dict_lst[i[0]] = i[1]\n    # Count the occurrence of each element in the list using Counter function from collections module\n    count_dict_lst = Counter(count_dict_lst)\n    # Return the count_dict_lst as the output\n    return count_dict_lst"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n\n    # Using Counter class from collections module to count the occurrence of all elements in the list in the tuple\n    count_dict = Counter(tup) \n\n    # Looping through the dictionary to count the occurrence of each element in the list in the tuple\n    for key, value in count_dict.items(): \n        if key in lst: \n            count_dict[key] += 1 \n\n    # Returning the updated dictionary\n    return dict(count_dict) "
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurrence of all elements of list in a tuple.\n    '''\n    # Create a dictionary to store the count of each element in the list\n    count_dict = Counter(lst)\n    # Create an empty list to store the count of each element in the tuple\n    count_list = []\n    # Loop through each element in the tuple\n    for elem in tup:\n        # Check if the element exists in the dictionary\n        if elem in count_dict:\n            # If it does, append the count to the list\n            count_list.append(count_dict[elem])\n        # If the element doesn't exist, append zero to the list\n        else:\n            count_list.append(0)\n    # Return the list of counts\n    return count_list"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    \"\"\"\n    Write a function to find cubes of individual elements in a list.\n    \"\"\"\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    for num in nums:\n        print(num ** 3)"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num ** 3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    \"\"\"\n    Write a function to find cubes of individual elements in a list.\n    \"\"\"\n    # create an empty list to store the cubes\n    cubes = []\n    # loop through each element in the input list\n    for num in nums:\n        # calculate the cube of the current element and append it to the cubes list\n        cubes.append(num ** 3)\n    # return the cubes list\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n + 1):\n        sum += perrin_number(i)\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n\n    perrin = []\n    for i in range(1, n+1):\n        perrin.append(1/i)\n\n    sum_perrin = sum(perrin)\n    return sum_perrin"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    p = 1\n    sum = 0\n    for i in range(1, n+1):\n        sum = sum + p\n        p = p * 2\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def perrin(n):\n    \"\"\"\n    Write a function to calculate the sum of Perrin numbers.\n    \"\"\"\n    sum = 0\n    p = 1\n    while p <= n:\n        if p % 2 == 0:\n            sum += p\n        p += 1\n    return sum\n\n\ndef cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    return perrin(n)\n"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n\n    #initialize the sum of perrin numbers\n    sum_perrin = 0\n\n    #loop through each perrin number\n    for i in range(1,n+1):\n\n        #calculate the next perrin number\n        next_perrin = 2*i - 1\n\n        #add it to the sum of perrin numbers\n        sum_perrin += next_perrin\n\n    #return the sum of perrin numbers\n    return sum_perrin"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum_perrin = 0\n    perrin = 1\n    while perrin <= n:\n        sum_perrin += perrin\n        perrin += 2\n    return sum_perrin"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    p = 1\n    s = 0\n    while p <= n:\n        s += p\n        p += 1\n    return s"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    perrin_numbers = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765]\n    total_sum = 0\n\n    for num in perrin_numbers:\n        total_sum += num\n\n    return total_sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of Perrin numbers.\n    '''\n    perrin_numbers = [1, 12, 61, 463, 4405, 55361, 829173, 13143397, 235015641, 4724667089]\n    sum = 0\n    for num in perrin_numbers:\n        if num <= n:\n            sum += num\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum_perrin = 0\n    for i in range(1, n+1):\n        sum_perrin += i * i\n    return sum_perrin"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_string(str_list, size):\n    '''\n    Extract specified size of strings from a given list of string values.\n    '''\n    extracted_list = []\n    for i in range(len(str_list)):\n        if len(str_list[i]) == size:\n            extracted_list.append(str_list[i])\n    return extracted_list"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_string(str_list, size):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for string in str_list:\n        if len(string) == size:\n            result.append(string)\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    # Initialize an empty list to store extracted strings\n    extracted_str = []\n    \n    # Loop through the list of strings\n    for i in l:\n        # If the length of the extracted string is less than the specified size,\n        # append the string to the extracted_str list\n        if len(extracted_str) < l[0]:\n            extracted_str.append(i)\n            \n    # Return the extracted string list\n    return extracted_str"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of strings and a size as input and returns a list of strings of specified size.\n    '''\n    extracted_strings = []\n    for string in str_list:\n        extracted_strings.append(string[:size])\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(len(l)):\n        result.append(l[i][:l[i].find(' ', l[i].find(' ')+1)])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    Extracts specified size of strings from a given list of string values.\n    \"\"\"\n    extracted_list = []\n    for i in range(0, len(str_list), size):\n        extracted_list.append(''.join(str_list[i:i+size]))\n    return extracted_list"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of strings and a size of string to extract.\n    It returns a list of strings of specified size extracted from the input list.\n    '''\n    extracted_list = []\n    for i in range(len(str_list)):\n        extracted_list.append(str_list[i][:size])\n    return extracted_list"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(len(l)):\n        result.append(l[i][:l[i].find(str)])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_string(str_list, size):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    extracted_strings = []\n    for i in range(len(str_list)):\n        extracted_strings.append(str_list[i][:size])\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    This function extracts the specified size of strings from a given list of string values.\n\n    Args:\n        str_list: list of string values\n        size: size of the strings to be extracted\n\n    Returns:\n        list of extracted string values\n    \"\"\"\n    return [str[i:i+size] for i in range(0, len(str), size)]"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Remove all occurrences of whitespace from the string\n    return re.sub('\\s+','', text1)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+','', text1).strip()"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = re.sub(r'\\s+','', text1)\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub('\\s+','', text1).strip()"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    \"\"\"\n    Remove all whitespaces from the given string using regular expressions.\n    \"\"\"\n    text = re.sub(r'\\s+','', text)\n    return text.strip()"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Remove all whitespaces using regular expressions\n    text = re.sub(r'\\s+','', text)\n    # Remove leading and trailing whitespaces\n    text = text.strip()\n    return text"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # replace all the whitespaces with a single space\n    text2 = re.sub('\\s+','', text1)\n    # remove all the whitespaces from the string\n    text3 = re.sub('\\s', '', text2)\n    # return the modified string\n    return text3"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    \"\"\"\n    Write a function to remove all whitespaces from the given string.\n    \"\"\"\n    # Define a regular expression pattern to match any whitespace character\n    pattern = r'\\s+'\n    # Use the re.sub() function to remove all whitespace characters from the string\n    return re.sub(pattern, '', text1)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Remove all whitespaces using regular expressions\n    text2 = re.sub('\\s+','', text1)\n    return text2"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss_percent = 0.1 # loss percentage\n    if sale_amount > actual_cost * (1 - loss_percent): # if sale is greater than actual cost with loss\n        loss_amount = sale_amount - actual_cost * (1 - loss_percent) # calculate loss amount\n    else:\n        loss_amount = 0 # no loss\n    return loss_amount"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    \"\"\"\n    This function takes two parameters, actual_cost and sale_amount, and returns the loss amount on the sale.\n    If the sale_amount is greater than actual_cost, then the loss amount is the difference between the sale_amount and actual_cost, \n    else the loss amount is 0.\n    \"\"\"\n    if sale_amount > actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost < sale_amount:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        loss_amount = actual_cost - sale_amount\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost,sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    \"\"\"\n    This function calculates the loss amount on a sale if the given amount has loss.\n    \"\"\"\n    if sale_amount > actual_cost:\n        loss = sale_amount - actual_cost\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        loss = sale_amount - actual_cost\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost: \n        return sale_amount - actual_cost \n    else: \n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    if actual_cost < sale_amount:\n        loss_amount = actual_cost - sale_amount\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef sumofFactors(n): \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n\n    # find even factors of the number\n    factors = [x for x in range(2, int(math.sqrt(n))+1) if n % x == 0 and x % 2 == 0]\n\n    # sum of even factors\n    return sum(factors)"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math \n\ndef sumofFactors(n): \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n\n    # initialize variables for sum and factor count\n    total = 0\n    count = 0\n\n    # loop through each integer from 2 to sqrt(n)\n    for i in range(2, int(math.sqrt(n))+1):\n\n        # check if the integer is even and divisible by n\n        if (i * i <= n) and (n % i == 0) and (i % 2 == 0):\n            \n            # add the factor to the sum and increment the count\n            total += i\n            count += 1\n\n    # return the total sum of even factors\n    return total"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef sumofFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    count = 0\n    total = 0\n\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                count += 1\n                total += i\n\n    if count == 0:\n        return n\n    else:\n        return total"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    even_sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            even_sum += i\n            \n    return even_sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    This function takes a number as input and returns the sum of even factors of that number.\n    '''\n    sum = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef sumofFactors(n): \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    total = 0\n    for i in range(2, int(math.sqrt(n)) + 1): \n        if n % i == 0 and i % 2 == 0: \n            total += i \n    return total "
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef sumofFactors(n) : \n    '''\n    This function takes a number as input and returns the sum of even factors of the number.\n    '''\n    even_factors = 0\n    for i in range(2, int(math.sqrt(n))+1) :\n        if n % i == 0 and n // i == i :\n            even_factors += i\n    return even_factors\n"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum_of_evens = 0\n    i = 2\n    while i <= n:\n        if i % 2 == 0 and i <= n:\n            sum_of_evens += i\n        i += 1\n    return sum_of_evens"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    # initialize sum to 0\n    sum = 0\n\n    # loop through numbers from 2 to n/2\n    for i in range(2, int(n**0.5)+1):\n        # check if i is even and divisible by n\n        if i % 2 == 0 and n % i == 0:\n            # add i to sum\n            sum += i\n\n    # return sum of even factors of n\n    return sum"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    \n    # Use regex to match words containing 'z'\n    pattern = r'\\b(z)\\w*\\b'\n    matches = re.findall(pattern, text)\n    \n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+z\\b'\n    return re.findall(pattern, text)"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b[a-zA-Z]+z\\b'\n    words = re.findall(pattern, text)\n    return words"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b(z)\\w+\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w*z\\w*\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w*[zZ]\\w*\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+\\bz\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w*z\\w*\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w+z\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b\\w*[zZ]\\w*\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    This function takes a month number as input and returns True if it contains 31 days, otherwise False.\n    '''\n    if monthnum == 2:\n        if year % 4 == 0 and (year % 100!= 0 or year % 400 == 0):\n            return True\n        else:\n            return False\n    elif monthnum == 4 or monthnum == 6 or monthnum == 9 or monthnum == 11:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    if monthnum2 == 2 and (year % 4 == 0 and year % 100!= 0) or year % 400 == 0:\n        return 29\n    else:\n        return 28\n"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    \"\"\"\n    Write a function to check whether the given month number contains 31 days or not.\n    \"\"\"\n\n    # Check if the given month number is between 1 and 12\n    if monthnum2 <= 0 or monthnum2 > 12:\n        return \"Invalid month number!\"\n\n    # Convert the given month number to a month name and its corresponding number of days\n    months = {\n        \"January\": 31,\n        \"February\": 28,\n        \"March\": 31,\n        \"April\": 30,\n        \"May\": 31,\n        \"June\": 30,\n        \"July\": 31,\n        \"August\": 31,\n        \"September\": 30,\n        \"October\": 31,\n        \"November\": 30,\n        \"December\": 31\n    }\n\n    # Check if the month number has 31 days\n    if monthnum2 in months:\n        if months[monthnum2] == 31:\n            return \"The month has 31 days.\"\n        elif months[monthnum2] == 28 and (monthnum2 == 2 and (year % 4 == 0 and (year % 100!= 0 or year % 400 == 0))):\n            return \"The month has 28 days but it is a leap year.\"\n        else:\n            return \"The month has \" + str(months[monthnum2]) + \" days.\"\n    else:\n        return \"Invalid month name!\""
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    if monthnum2 == 2:\n        return True\n    elif monthnum2 % 2 == 0 and monthnum2 % 100!= 0 or monthnum2 % 4 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    # check if the given month number contains 31 days\n    if monthnum2 % 30 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1,3,5,7,8,10,12]:\n        return True\n    elif monthnum2 in [4,6,9,11]:\n        return False\n    else:\n        return None"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    # check whether the month number is valid or not\n    if monthnum2 < 1 or monthnum2 > 12:\n        print(\"Invalid month number. Please enter a month number between 1 and 12.\")\n        return\n    \n    # check whether the month number contains 31 days or not\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        print(\"Month number contains 31 days.\")\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        print(\"Month number contains 30 days.\")\n    else:\n        print(\"Month number does not contain 31 or 30 days.\")"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    days_in_months = {1: 31, 3: 31, 5: 31, 7: 31, 8: 30, 10: 31, 12: 31}\n    if monthnum2 in days_in_months:\n        print(\"The month number contains 31 days.\")\n    else:\n        print(\"The month number does not contain 31 days.\")"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    if monthnum2 in [1,3,5,7,8,10,12]:\n        return True\n    elif monthnum2 in [4,6,9,11]:\n        return False\n    else:\n        print(\"Invalid input.\")\n        return None"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    \"\"\"\n    Write a function to check whether the given month number contains 31 days or not.\n    \"\"\"\n    monthnum = int(monthnum2)\n    if monthnum in [4, 6, 9, 11]:\n        return False\n    elif monthnum in [2, 3, 5, 7, 8, 10, 12]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist\n"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n\n    # Loop through each string in the list\n    for i in range(len(stringlist)):\n        # Use slicing to reverse the order of the characters in the string\n        reversed_string = stringlist[i][::-1]\n        # Replace the original string with the reversed string\n        stringlist[i] = reversed_string\n\n    # Return the modified list\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    # Find the minimum length sublist \n    min_len = float('inf')\n    min_sublist = []\n\n    # Iterate through the list \n    for i in range(len(lst)):\n        # Find the length of the sublist starting from index i \n        sublist_len = 0\n        for j in range(i, len(lst)):\n            sublist_len += 1\n            # If the sublist length is less than the minimum length, update the minimum length and the corresponding sublist \n            if sublist_len < min_len:\n                min_len = sublist_len\n                min_sublist = lst[i:j+1]\n    # Return the minimum length sublist \n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf') # initialize minimum length to infinity\n    min_sublist = [] # initialize minimum sublist as empty list\n    \n    # loop through each sublist in the list\n    for i in range(len(lst)):\n        # loop through each element in the sublist\n        for j in range(len(lst[i])):\n            # check if the current sublist is shorter than the minimum length\n            if len(lst[i]) < min_len:\n                # if it is, update the minimum length and minimum sublist\n                min_len = len(lst[i])\n                min_sublist = lst[i]\n    \n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    \n    # creating a dictionary to store the length of each sublist\n    sublist_length = {}\n    \n    # iterating over the sublist\n    for sublist in lst:\n        # updating the length of the sublist in the dictionary\n        sublist_length[sublist] = len(sublist)\n    \n    # finding the sublist with minimum length\n    min_sublist = min(sublist_length, key=sublist_length.get)\n    \n    # returning the sublist with minimum length\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf')\n    min_sublist = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublist = lst[i:j]\n            if len(sublist) < min_len:\n                min_len = len(sublist)\n                min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min(lst): \n    \"\"\"\n    Write a python function to find the sublist having minimum length.\n    \"\"\"\n    min_len = float('inf')\n    min_sublist = None\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            sublist = lst[i:j+1]\n            if len(sublist) < min_len:\n                min_len = len(sublist)\n                min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_sublist = lst\n    min_length = len(lst)\n\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_sublist = sublist\n            min_length = len(sublist)\n\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf') # initialize minimum length to positive infinity\n    min_sublist = [] # initialize list to store minimum sublist\n    \n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n    \n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min(lst): \n    '''\n    This function takes a list of strings as input and returns the sublist with the minimum length.\n    '''\n    min_length = 1000000 # large number to start\n    min_sublist = []\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n\n    # Initialize min_length to a large number to start\n    min_length = len(lst)\n\n    # Initialize a variable to store the sublist with minimum length\n    min_sublist = lst\n\n    # Loop through the list and update min_length and min_sublist as needed\n    for i in range(len(lst)):\n        # Initialize a variable to store the current sublist length\n        curr_length = i + 1\n\n        # Check if curr_length is less than min_length\n        if curr_length < min_length:\n            # If it is, update min_length and min_sublist\n            min_length = curr_length\n            min_sublist = lst[:i+1]\n\n    # Return the sublist with minimum length\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf')\n    min_sublist = []\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l*b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rectangle_area(l,b):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    return l*b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area\n"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_uppercase(string):\n    '''\n    Remove uppercase substrings from a given string.\n    '''\n    # define a regular expression pattern to match uppercase substrings\n    pattern = re.compile(r'\\b[A-Z][A-Za-z]*\\b')\n    # find all uppercase substrings in the string\n    matches = pattern.findall(string)\n    # replace all matches with an empty string\n    for match in matches:\n        string = string.replace(match, '')\n    return string"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = re.compile(r'(?i)\\b[A-Z]\\w+\\b')\n    result = re.sub(pattern, '', str1)\n    return result"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = r'(?i)\\b[A-Z]+\\b'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_uppercase(string):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Define a regular expression pattern to match uppercase substrings\n    pattern = r'([A-Z])\\w*'\n\n    # Use re.sub() to replace all uppercase substrings in the string with an empty string\n    result = re.sub(pattern, r'\\1', string)\n\n    # Return the modified string\n    return result"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # remove all uppercase substrings using regular expressions\n    pattern = re.compile(r'\\b[A-Z][A-Z0-9]*\\b')\n    str2 = pattern.sub('', str1)\n    # remove all non-alphanumeric characters from the remaining string\n    pattern = re.compile(r'\\W')\n    str3 = pattern.sub('', str2)\n    # return the final result\n    return str3"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Define a regular expression pattern to match uppercase substrings\n    pattern = r'(?i)\\b[A-Z][a-z]*\\b'\n    # Use the re.sub() method to replace uppercase substrings with an empty string\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_uppercase(string):\n    \"\"\"\n    This function takes a string as input and returns the same string with all uppercase substrings removed.\n    \"\"\"\n\n    # Define a regular expression pattern to match uppercase substrings\n    uppercase_pattern = re.compile(r'([A-Z])')\n\n    # Apply the pattern to the given string\n    matches = uppercase_pattern.finditer(string)\n\n    # Iterate over the matches and replace the uppercase substrings with spaces\n    for match in matches:\n        string = string.replace(match.group(),'')\n\n    return string"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_uppercase(string):\n    '''\n    This function removes uppercase substrings from a given string.\n    '''\n\n    # Removing uppercase substrings using regular expressions\n    pattern = re.compile(r'[A-Z]+')\n    string = pattern.sub('', string)\n\n    return string"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Define a regular expression pattern for uppercase substrings\n    pattern = re.compile(r'\\b[A-Z]\\w+\\b')\n    # Use the pattern to find all matches in the string\n    matches = pattern.findall(str1)\n    # Loop through the matches and remove the uppercase substrings\n    for match in matches:\n        str1 = str1.replace(match, '')\n    # Return the modified string\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # define a regular expression pattern for uppercase substrings\n    pattern = re.compile(r'\\b[A-Z][a-z]*\\b')\n\n    # split the input string into substrings\n    substrings = pattern.findall(str1)\n\n    # join the substrings back into the original string\n    result = ''.join(substrings)\n\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for i in lst:\n        if isinstance(i, list):\n            for j in i:\n                result.append(j)\n        else:\n            result.append(i)\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for i in lst:\n        result.append(i[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    # Create an empty list to store the first elements\n    first_elements = []\n    # Iterate through each sublist in the input list\n    for sublist in lst:\n        # Get the first element of the sublist\n        first_element = sublist[0]\n        # Append the first element to the first_elements list\n        first_elements.append(first_element)\n    # Return the first_elements list\n    return first_elements"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Extract(lst):\n    '''\n    This function takes in a list and extracts the first element of each sublist.\n    '''\n    return [elem[0] for sublist in lst for elem in sublist]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [lst[0]] + Extract(lst[1:])"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    new_lst = []\n    for item in lst:\n        if type(item) == list:\n            new_lst.append(item[0])\n        else:\n            new_lst.append(item)\n    return new_lst"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [lst[0] for sublist in lst]"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    \"\"\"\n    Write a python function to count the upper case characters in a given string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_case_count = 0\n    for char in str:\n        if char.isupper():\n            upper_case_count += 1\n    return upper_case_count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def upper_ctr(string):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    \"\"\"\n    Write a function to find all possible combinations of the elements of a given list.\n    \"\"\"\n    n = len(list1)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            print(list1[i:j])"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # initializing empty list to store combinations\n    comb_list = []\n    # initializing a list to store the elements of the given list\n    elements = []\n    # loop through the given list\n    for i in list1:\n        # check if the element is not in the list of elements\n        if i not in elements:\n            # add the element to the list of elements\n            elements.append(i)\n            # create a combination by concatenating the element with all the elements that come before it\n            for j in range(len(elements)):\n                if j!= list1.index(i):\n                    # concatenate the elements and add them to the list of combinations\n                    comb = elements[j] + ''.join([str(k) for k in list1[:list1.index(i)]])\n                    comb_list.append(comb)\n            # remove the element from the list of elements\n            elements.pop()\n"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i + 1, len(list1) + 1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # Create a copy of the original list to avoid modifying it\n    list1_copy = list1.copy()\n    \n    # Create an empty list to store the combinations\n    combinations = []\n    \n    # Helper function to generate combinations recursively\n    def generate_combinations(start, current_combination):\n        # Base case: if there are no more elements to choose from, add the combination to the list\n        if start == len(list1_copy):\n            combinations.append(current_combination)\n            return\n        \n        # Recursive case: choose the current element and generate all possible combinations from the remaining elements\n        generate_combinations(start+1, current_combination+[list1_copy[start]])\n        generate_combinations(start+1, current_combination)\n    \n    # Call the helper function to generate the first combination\n    generate_combinations(0, [])\n    \n    # Return the list of combinations\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n\n    # Define a helper function to generate all combinations\n    def generate_combinations(start, end):\n        combinations = []\n        for i in range(start, end+1):\n            combinations.append(list1[i-1])\n        return combinations\n\n    # Call the helper function to generate all combinations of length 1\n    combinations1 = generate_combinations(1, len(list1))\n    print(\"All possible combinations of length 1:\")\n    print(combinations1)\n\n    # Call the helper function to generate all combinations of length 2\n    combinations2 = generate_combinations(2, len(list1))\n    print(\"\\nAll possible combinations of length 2:\")\n    print(combinations2)\n\n    # Call the helper function to generate all combinations of length 3\n    combinations3 = generate_combinations(3, len(list1))\n    print(\"\\nAll possible combinations of length 3:\")\n    print(combinations3)"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            combination = list1[i:j]\n            result.append(combination)\n\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 0:\n        return []\n    if len(list1) == 1:\n        return [list1]\n    result = []\n    for i in range(len(list1)):\n        rest = list1[:i] + list1[i+1:]\n        for combo in combinations_list(rest):\n            result.append([list1[i]] + combo)\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            print(list1[i:j])"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    n = len(list1)\n    for i in range(1, n+1):\n        for j in range(i, n+1):\n            combination = list1[j-1:j]\n            result.append(combination)\n    return result"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    This function takes an array of integers as input and returns the maximum product subarray.\n    \"\"\"\n    max_product = float('-inf')\n    current_product = 1\n    max_ending_here = 1\n    for num in arr:\n        if num < 0:\n            max_ending_here = current_product\n            current_product = 1\n        else:\n            current_product = max(current_product * num, num)\n        max_ending_here = max(max_ending_here, current_product)\n    return max_ending_here"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    max_product = arr[0]\n    current_product = arr[0]\n    \n    for i in range(1, len(arr)):\n        current_product = max(arr[i], current_product * arr[i])\n        max_product = max(max_product, current_product)\n        \n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Find the maximum product subarray of the given array.\n    \"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    \n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    \n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n        \n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n\n    # Initialize variables to keep track of current and maximum subarray products\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    # Iterate over the array and update max_so_far and max_ending_here\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    \n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n        \n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) == 0:\n        return 0\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    for i in range(1, len(arr)):\n        max_ending_here = max(max_ending_here * arr[i], arr[i])\n        min_ending_here = min(min_ending_here * arr[i], arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    \n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here*arr[i])\n        min_ending_here = min(arr[i], min_ending_here*arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    \n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    current_product = 1\n    max_ending_here = 1\n    \n    for i in range(len(arr)):\n        current_product *= arr[i]\n        max_ending_here = max(max_ending_here * arr[i], arr[i])\n        max_product = max(max_product, max_ending_here)\n        \n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    max_product = float('-inf')\n    max_ending_here = 1\n    min_ending_here = 1\n\n    for i in range(len(arr)):\n        max_ending_here = max(max_ending_here * arr[i], max_ending_here, arr[i])\n        min_ending_here = min(min_ending_here * arr[i], min_ending_here, arr[i])\n\n        max_product = max(max_product, max_ending_here)\n\n    return max_product"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n\n    # Initialize a variable to store the count of the values in the dictionary\n    count = 0\n\n    # Loop through all the values in the dictionary\n    for value in dict.values():\n        # Check if the count of values is equal to n\n        if count == n:\n            # If it is, return True\n            return True\n        # If it isn't, increment the count\n        else:\n            count += 1\n\n    # If the loop completes without finding a match, return False\n    return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # Get the first value in the dictionary\n    value = next(iter(dict.values()))\n\n    # Check if all the values in the dictionary are same as the first value\n    for value in dict.values():\n        if value!= value:\n            return False\n\n    # If all the values are same, return True\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = set(dict.values())\n    return len(values) == 1 and dict[list(values)[0]] == n"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = list(dict.values())\n    if len(values) == 1:\n        return True\n    if len(set(values)) == 1:\n        return True\n    return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = list(dict.values())\n    return all(x == values[0] for x in values)"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = list(dict.values())\n    if len(values) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = list(dict.values())\n    if len(values) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    \"\"\"\n    Write a function to check if all values are same in a dictionary.\n    \"\"\"\n    values = [value for value in dict.values()]\n    if len(set(values)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # initialize a variable to store the value of the first key-value pair\n    value = next(iter(dict.values()))\n\n    # iterate over the dictionary and check if all values are equal to the first value\n    for key, value in dict.items():\n        if value!= value:\n            # if any value is not equal to the first value, return False\n            return False\n\n    # if all values are equal to the first value, return True\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for value in dict.values():\n        if value!= dict[next(iter(dict))]:\n            return False\n    return True"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    return {k: v for k, v in dict1.items() if v is not None and v!= '' and v!= []}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for key, value in dict1.items():\n        if value:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v!= ''}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v is not None and v!= ''}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key: value for key, value in dict1.items() if value is not None and value!=''}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v!= ''}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for key, value in dict1.items():\n        if value:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    dp = [1] * n\n\n    for i in range(1, n):\n        if arr[i] > arr[i-1]:\n            dp[i] = dp[i-1] + 1\n        else:\n            dp[i] = 1\n\n    max_product = max(dp)\n\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    # Initialize the maximum and minimum values to the first and last elements of the array\n    max_so_far = arr[0]\n    min_so_far = arr[0]\n\n    # Traverse through the array\n    for i in range(1, len(arr)):\n        # If the current element is greater than the maximum value, update the maximum value\n        if arr[i] > max_so_far:\n            max_so_far = arr[i]\n        # If the current element is less than the minimum value, update the minimum value\n        elif arr[i] < min_so_far:\n            min_so_far = arr[i]\n        # If the current element is greater than the minimum value and less than or equal to the maximum value, then multiply the two values and update the maximum value\n        else:\n            max_so_far = max(max_so_far * arr[i], min_so_far * arr[i])\n\n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product(arr):\n    n = len(arr)\n    dp = [1] * n  # first row of the dp array is all ones\n    \n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i] = max(dp[i], dp[j] * arr[i])\n                \n    return max(dp)"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product(arr):\n    if len(arr) == 0:\n        return 0\n    \n    max_ending_here = max_so_far = arr[0]\n    min_ending_here = arr[0]\n    \n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here*arr[i])\n        min_ending_here = min(arr[i], min_ending_here*arr[i])\n        \n        max_so_far = max(max_so_far, max_ending_here)\n        \n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product(arr):\n    n = len(arr)\n    max_product_so_far = float('-inf')\n    max_product_ending_here = 1\n    \n    for i in range(n):\n        max_product_ending_here = max(max_product_ending_here * arr[i], max_product_ending_here)\n        max_product_so_far = max(max_product_so_far, max_product_ending_here)\n        \n    return max_product_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    max_so_far = max_ending_here = arr[0]\n\n    for i in range(1, n):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n <= 1:\n        return 0\n    \n    # Initialize variables\n    max_product = float('-inf')\n    curr_product = 1\n    \n    # Iterate through array\n    for i in range(n):\n        # If we have a decreasing subsequence, update max_product\n        if i > 0 and arr[i] > arr[i-1]:\n            curr_product = max(arr[i], arr[i] * curr_product)\n        else:\n            curr_product = arr[i]\n        \n        # Update max_product\n        max_product = max(max_product, curr_product)\n    \n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    dp = [0] * n\n    max_so_far = float('-inf')\n    max_ending_here = float('-inf')\n    for i in range(n):\n        max_ending_here = max(max_ending_here * arr[i], arr[i], 0)\n        dp[i] = max_ending_here\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far\n"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n\n    # Initialize variables\n    max_product_so_far = float('-inf')\n    max_product_ending_here = 1\n\n    # Loop through the array\n    for num in arr:\n        # Update the maximum product ending here\n        max_product_ending_here = max(num, max_product_ending_here * num)\n        # Update the maximum product so far\n        max_product_so_far = max(max_product_so_far, max_product_ending_here)\n\n    return max_product_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product(arr):\n    max_product = 1\n    current_product = 1\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i-1]:\n            current_product *= arr[i]\n        else:\n            max_product = max(max_product, current_product)\n            current_product = 1\n    return max(max_product, current_product)"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        print(\"Tuple should have at least two elements.\")\n        return None\n    \n    pair_sum = 0\n    \n    for i in range(1, len(test_tup)):\n        pair_sum += test_tup[i-1] + test_tup[i]\n    \n    return pair_sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return None\n    else:\n        return sum(test_tup[1:-1]) + test_tup[-1]"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        print(\"Tuple must have at least two elements!\")\n        return\n\n    else:\n        pairwise_sum = 0\n        for i in range(len(test_tup)-1):\n            pairwise_sum += test_tup[i] + test_tup[i+1]\n        return pairwise_sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # create a copy of the tuple so we don't modify the original\n    tup_copy = list(test_tup)\n    # loop through each element of the tuple, adding the neighboring elements to get the sum\n    for i in range(len(tup_copy)-1):\n        tup_copy[i] += tup_copy[i+1]\n    # return the new tuple with the pairwise sums added\n    return tuple(tup_copy)"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    n = len(test_tup)\n    result = 0\n    for i in range(n-1):\n        result += test_tup[i] + test_tup[i+1]\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Initialize a list to store the pairwise additions\n    pairwise_sum = []\n    \n    # Iterate over each element in the tuple\n    for i in range(len(test_tup)-1):\n        # Calculate the pairwise sum and append it to the list\n        pairwise_sum.append(test_tup[i] + test_tup[i+1])\n    \n    return pairwise_sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return sum([test_tup[i] + test_tup[i+1] for i in range(len(test_tup)-1)])"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return None\n    else:\n        for i in range(len(test_tup)-1):\n            test_tup[i] += test_tup[i+1]\n        return test_tup[-1]"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    neighboring_sum = 0\n    for i in range(len(test_tup)-1):\n        neighboring_sum += test_tup[i] + test_tup[i+1]\n    return neighboring_sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n    if len(test_tup) < 2:\n        return None\n\n    first_element = test_tup[0]\n    second_element = test_tup[1]\n\n    total_sum = first_element + second_element\n\n    for i in range(2, len(test_tup)):\n        first_element = second_element\n        second_element = test_tup[i]\n        total_sum += first_element + second_element\n\n    return total_sum"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_remainder(arr, n):\n    \"\"\"\n    Returns the product of the array multiplication modulo n.\n    \"\"\"\n    # Calculate the product of the array modulo n\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n        \n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product = (product * i) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_remainder(arr, n):\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_remainder(arr, n):\n    '''\n    This function takes an array and a number as input and returns the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product = (product * i) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_remainder(arr, n):\n    \"\"\"\n    Finds the product of the array multiplication modulo n.\n    \"\"\"\n    # calculate the product of the array using the modulo operator\n    product = 1\n    for i in arr:\n        product = (product * i) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_remainder(arr, n):\n    product = 1\n\n    for num in arr:\n        product = (product * num) % n\n\n    return product"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) < 2:\n        return \"List should have at least two elements\"\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            return \"List contains consecutive numbers\"\n        else:\n            return \"List does not contain consecutive numbers\""
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)): \n        if i == 0: \n            if l[i] == l[i+1]: \n                return True\n        else: \n            if l[i] == l[i-1]+1: \n                return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    Write a python function to check whether the given list contains consecutive numbers or not.\n\n    Args:\n        l (list): the list of numbers to check\n\n    Returns:\n        bool: True if the list contains consecutive numbers, False otherwise\n    \"\"\"\n    if len(l) < 2:\n        return False\n\n    for i in range(len(l)-1):\n        if l[i] + 1!= l[i+1]:\n            return False\n\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) < 2: # Check if the list has at least two elements\n        return False\n    for i in range(len(l) - 1): # Loop through the list from first to second-to-last element\n        if l[i] + 1!= l[i+1]: # Check if the element at current index is consecutive to the element at next index\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1): \n        if l[i] + 1 == l[i+1]: \n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_Consecutive(l): \n    '''\n    This function takes a list as input and returns True if all the numbers in the list are consecutive, and False otherwise.\n    '''\n    if len(l) == 0: \n        return False\n    else: \n        for i in range(len(l)-1): \n            if l[i] + 1!= l[i+1]: \n                return False\n        return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l) - 1):\n        if l[i] + 1!= l[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) < 2: \n        return True \n    elif l[0] + 1 == l[1]: \n        return check_Consecutive(l[1:]) \n    else: \n        return False "
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)):\n        if l[i]!= l[i+1]:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if not l: #check if the list is empty\n        return False\n    \n    for i in range(len(l)-1): #iterate through the list and check for consecutive numbers\n        if l[i] + 1!= l[i+1]: #if the difference between current number and next number is not 1, then the list contains consecutive numbers\n            return True\n    \n    return False #if the loop completes without finding consecutive numbers, return False"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Using set to remove duplicates and then converting set to list for intersection\n    return list(set(test_list1) & set(test_list2))\n"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    intersection_list = []\n    # Iterate through each element of the first list\n    for element1 in test_list1:\n        # If the element is present in the second list, append it to the intersection list\n        if element1 in test_list2:\n            intersection_list.append(element1)\n    # Return the intersection list\n    return intersection_list"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # Get the first tuple in the first list\n    first_tuple = test_list1[0]\n    \n    # Create a set to store the unique elements from the first tuple in the first list\n    unique_set = set(first_tuple)\n    \n    # Initialize an empty list to store the intersection tuples\n    intersection_list = []\n    \n    # Iterate through the second list\n    for second_tuple in test_list2:\n        # Convert the second tuple to a set to remove duplicates\n        second_tuple_set = set(second_tuple)\n        \n        # Find the intersection of the two sets using the & operator\n        intersection = unique_set.intersection(second_tuple_set)\n        \n        # If there is at least one element in the intersection, add it to the intersection list\n        if intersection:\n            intersection_list.append(tuple(sorted(intersection)))\n    \n    # Return the intersection list\n    return intersection_list"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # sort both lists\n    test_list1.sort()\n    test_list2.sort()\n    # initialize an empty list to store the intersection\n    intersection = []\n    # iterate through both lists\n    i = j = 0\n    while i < len(test_list1) and j < len(test_list2):\n        # if the current elements of both lists are equal\n        if test_list1[i] == test_list2[j]:\n            # add the element to the intersection list\n            intersection.append(test_list1[i])\n            # increment both pointers\n            i += 1\n            j += 1\n        # if the element of the first list is smaller\n        elif test_list1[i] < test_list2[j]:\n            # increment the first list pointer\n            i += 1\n        # if the element of the second list is smaller\n        else:\n            # increment the second list pointer\n            j += 1\n    # return the intersection list\n    return tuple(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection = set()\n    for i in test_list1:\n        if i in test_list2 and i not in intersection:\n            intersection.add(i)\n    return tuple(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # Convert both the lists to sets to remove duplicates\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n\n    # Find the intersection of the sets\n    intersection = set1.intersection(set2)\n\n    # Convert the intersection back to a list and sort it to get the tuple intersection\n    intersection_list = list(intersection)\n    intersection_list.sort()\n\n    return intersection_list"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n\n    # Convert both list into sets to remove duplicates\n    list1_set = set(test_list1)\n    list2_set = set(test_list2)\n\n    # Find the intersection of the two sets using set intersection\n    intersection = list1_set.intersection(list2_set)\n\n    # Convert the set intersection back into a tuple\n    intersection_tuple = tuple(intersection)\n\n    return intersection_tuple"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    common_elements = set(test_list1) & set(test_list2)\n    return list(common_elements)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    intersection = []\n    for tup1 in test_list1:\n        for tup2 in test_list2:\n            if tup1 == tup2:\n                intersection.append(tup1)\n    return intersection"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection_set = set(test_list1) & set(test_list2)\n    return tuple(intersection_set)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    This function takes three parameters:\n    str1: The string from which we want to replace characters.\n    ch: The character we want to replace.\n    newch: The new character we want to replace the old character with.\n    \"\"\"\n    newstr = \"\"\n    for char in str1:\n        if char == ch:\n            newstr += newch\n        else:\n            newstr += char\n    return newstr"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # Loop through each character in the string\n    for i in range(len(str1)):\n        # If the character is the specified character, replace it with the new character\n        if str1[i] == ch:\n            str1 = str1[:i] + newch + str1[i+1:]\n    return str1"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Replace all occurrences of a character in a string with another character.\n    \"\"\"\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    This function replaces all occurrences of a given character in a string with another character.\n\n    Parameters:\n    str1 (str): Input string.\n    ch (str): Character to be replaced.\n    newch (str): Character to replace the input character with.\n\n    Returns:\n    str: String with replaced characters.\n    \"\"\"\n\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1 = str1.replace(ch, newch)\n    return str1"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # Loop through the string and replace the character\n    for i in range(len(str1)):\n        if str1[i] == ch:\n            str1 = str1[:i] + newch + str1[i+1:]\n    return str1"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    result = \"\"\n    for i in range(len(str1)):\n        if str1[i] == ch:\n            result += newch\n        else:\n            result += str1[i]\n    return result"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda item: item[1]))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    count_dict = Counter(dict1)\n    sorted_dict = dict(sorted(count_dict.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    count_dict = Counter(dict1)\n    sorted_dict = dict(sorted(count_dict.items(), key=lambda x: x[1]))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    This function takes a dictionary as an argument and returns a new dictionary where the keys are sorted by value in descending order.\n    '''\n    sorted_dict = Counter(dict1)\n    sorted_dict = dict(sorted_dict.most_common())\n    sorted_dict = dict(sorted_dict.items())\n    sorted_dict = dict(sorted_dict.items())\n    sorted_dict = dict(sorted_dict.items())\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # create a Counter object from the dictionary\n    count_obj = Counter(dict1)\n    # convert the Counter object to a list of tuples\n    sorted_list = count_obj.most_common()\n    # sort the list of tuples in ascending order of values\n    sorted_list.sort(key=lambda x: x[1])\n    # convert the list of tuples back to a dictionary and return it\n    return dict(sorted_list)"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda item: item[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = Counter(dict1)\n    sorted_dict = dict(sorted_dict.most_common())\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # create a Counter object from the input dictionary\n    counter = Counter(dict1)\n    \n    # sort the Counter object in descending order\n    sorted_counter = sorted(counter.items(), key=lambda x: x[1], reverse=True)\n    \n    # create a new dictionary from the sorted Counter object\n    sorted_dict = dict(sorted_counter)\n    \n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    sorted_dict = Counter(dict1)\n    sorted_dict = dict(sorted_dict.items())\n    sorted_dict = dict(sorted_dict.items())\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    counter = Counter(dict1)\n    sorted_counter = dict(sorted(counter.items(), key=lambda x: x[1], reverse=True))\n    return sorted_counter"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n\n    if len(nums) < 2:\n        return None\n\n    largest = max(nums)\n    smallest = min(nums)\n\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num + min_num"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    This function takes a list of numbers as input and returns the sum of the largest and smallest values.\n    '''\n    if not nums:\n        return \"List is empty!\"\n    \n    # Sort the list in ascending order\n    nums.sort()\n    \n    # Get the largest and smallest values\n    largest = nums[-1]\n    smallest = nums[0]\n    \n    # Calculate the sum of the largest and smallest values\n    result = largest + smallest\n    \n    return result"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if not nums:\n        return None\n\n    largest = float('-inf')\n    smallest = float('inf')\n\n    for num in nums:\n        if num > largest:\n            largest = num\n        if num < smallest:\n            smallest = num\n\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) < 2:\n        return None\n    else:\n        largest = nums[0]\n        smallest = nums[0]\n        for num in nums:\n            if num > largest:\n                largest = num\n            if num < smallest:\n                smallest = num\n        return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    \"\"\"\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    \"\"\"\n    if len(nums) < 2:\n        return \"The array must have at least two elements.\"\n    \n    largest = nums[0]\n    smallest = nums[0]\n    \n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    \n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    \"\"\"\n    This function takes a list of numbers as an argument and returns the sum of the two largest and two smallest numbers in the list.\n    \"\"\"\n    # Sort the list in descending order\n    sorted_nums = sorted(nums, reverse=True)\n    \n    # Take the first two elements (which will be the largest and smallest numbers) and add them up\n    sum_of_largest_smallest = sorted_nums[0] + sorted_nums[1]\n    \n    # Return the sum of the two largest and two smallest numbers\n    return sum_of_largest_smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if not nums:\n        return None\n    # Initialize two variables to store the largest and smallest values in the array\n    largest = nums[0]\n    smallest = nums[0]\n    # Iterate through the array to find the largest and smallest values\n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    # Return the sum of the largest and smallest values\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) < 2:\n        raise ValueError(\"Array must have at least two elements\")\n\n    # Find the largest and smallest values in the array\n    largest = nums[0]\n    smallest = nums[0]\n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n\n    # Calculate the sum of the largest and smallest values\n    sum_largest_smallest = largest + smallest\n\n    # Return the sum of the largest and smallest values\n    return sum_largest_smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    \"\"\"\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    \"\"\"\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num + min_num"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n\n    # find all lowercase substrings in the string\n    lower_substrings = re.findall(r'[a-z]+', str1)\n\n    # loop through the list of lowercase substrings and remove them from the string\n    for i in range(len(lower_substrings)):\n        str1 = re.sub(r'(?i)' + lower_substrings[i], '', str1)\n\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Remove lowercase substrings using regular expressions\n    str2 = re.sub(r'[a-z]+', '', str1)\n    return str2"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = re.compile('[a-z]*')\n    return pattern.sub('', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = re.compile(r'[a-z]+')\n    return pattern.sub('', str1.lower())"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    lowercase_pattern = r'[a-z]'\n    # substitute to remove all lowercase substrings from the string\n    str2 = re.sub(lowercase_pattern, '', str1)\n    return str2"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_lowercase(string):\n    '''\n    Remove lowercase substrings from a given string.\n    '''\n    return re.sub(r'[a-z]+', '', string)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    regex = r'[a-z]+'\n    pattern = re.compile(regex)\n    return pattern.sub('', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Define a regular expression to match lowercase substrings\n    pattern = re.compile('[a-z]+')\n    # Use the findall() method to find all lowercase substrings in the string\n    matches = pattern.findall(str1)\n    # Loop through each match and replace it with an empty string\n    for match in matches:\n        str1 = str1.replace(match, '')\n    # Return the modified string\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Convert the string to lowercase\n    str1 = str1.lower()\n\n    # Split the string by lowercase words\n    words = re.findall(r'\\b\\w+\\b', str1)\n\n    # Join the words without lowercase substrings\n    result =''.join(words)\n\n    return result"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    \"\"\"\n    Remove lowercase substrings from a given string.\n    \"\"\"\n    # convert string to lowercase\n    str1 = str1.lower()\n\n    # remove all lowercase substrings\n    pattern = re.compile(r'([a-z])')\n    str1 = pattern.sub('', str1)\n\n    return str1"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    return n // 10 ** len(str(n))"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n < 10:\n        return n\n    else:\n        return first_Digit(n//10)"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return str(n)[0]"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes a number as input and returns the first digit of the number.\n    \"\"\"\n    # Extracting the first digit of the number\n    first_digit = str(n)[0]\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes a number as input and returns the first digit of the number.\n    \"\"\"\n    first_digit = n // 10 ** (len(str(n)) - 1)\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n\n    # extract the first digit of the number and return it\n    return n % 10"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_Digit(n):\n    return n // 10"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # Check if the input is a valid integer\n    if not isinstance(n, int):\n        raise ValueError('Input must be an integer.')\n    \n    # Find the first digit of the number\n    first_digit = n % 10\n    \n    # Return the first digit of the number\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n<10:\n        return n\n    else:\n        return first_Digit(n//10)"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    first_digit = n % 10  # extract the last digit of the number\n    return first_digit  # return the first digit of the number"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function which takes a list of integers and only returns the odd ones.\n    \"\"\"\n    # iterate over the list of integers and only add odd numbers to a new list\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    # return the new list of odd numbers\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(list):\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(lst):\n    '''\n    This function takes a list of integers and returns only the odd numbers in the list.\n    '''\n    odd_lst = []\n    for num in lst:\n        if num % 2!= 0:\n            odd_lst.append(num)\n    return odd_lst"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [num for num in list if num % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function which takes a list of integers and only returns the odd ones.\n    \"\"\"\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(lst):\n    \"\"\"\n    This function takes a list of integers and only returns the odd ones.\n    \"\"\"\n    return [num for num in lst if num % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function which takes a list of integers and only returns the odd ones.\n    \"\"\"\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n\n    # Function to calculate the sum of cubes of first n natural numbers\n    def sum_of_cubes(n):\n        return sum(x**3 for x in range(1, n+1))\n\n    # Function to calculate the sum of first n natural numbers\n    def sum_of_natural_numbers(n):\n        return sum(range(1, n+1))\n\n    # Calculate the sum of cubes of first n natural numbers\n    sum_of_cubes_n = sum_of_cubes(n)\n\n    # Calculate the sum of first n natural numbers\n    sum_of_natural_numbers_n = sum_of_natural_numbers(n)\n\n    # Find the difference between the two sums\n    difference_sum_cubes_natural_numbers = abs(sum_of_cubes_n - sum_of_natural_numbers_n)\n\n    # Return the difference\n    return difference_sum_cubes_natural_numbers"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n\n    # Calculate the sum of cubes of the first n natural numbers\n    cubes_sum = sum([x**3 for x in range(1, n+1)])\n\n    # Calculate the sum of the first n natural numbers\n    sum_numbers = sum(range(1, n+1))\n\n    # Calculate the difference between the two sums\n    difference = cubes_sum - sum_numbers\n\n    # Return the difference\n    return difference\n"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = sum([i**3 for i in range(1,n+1)])\n    sum_of_nums = sum(range(1,n+1))\n    return abs(sum_of_cubes - sum_of_nums)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    cubes = [num**3 for num in range(1,n+1)]\n    sums = [num for num in range(1,n+1)]\n    sum_cubes = sum(cubes)\n    sum_numbers = sum(sums)\n    difference = sum_cubes - sum_numbers\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_of_cubes = sum([x ** 3 for x in range(1, n + 1)])\n    sum_of_numbers = sum(range(1, n + 1))\n    return sum_of_cubes - sum_of_numbers"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # function to calculate the sum of cubes of the first n natural numbers\n    def sum_of_cubes(n):\n        total = 0\n        for i in range(1, n+1):\n            total += i**3\n        return total\n\n    # function to calculate the sum of the first n natural numbers\n    def sum_of_natural_numbers(n):\n        total = 0\n        for i in range(1, n+1):\n            total += i\n        return total\n\n    # calculate the difference between the sums of cubes and natural numbers\n    sum_of_cubes_result = sum_of_cubes(n)\n    sum_of_natural_numbers_result = sum_of_natural_numbers(n)\n    difference_result = sum_of_cubes_result - sum_of_natural_numbers_result\n    return difference_result\n"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Calculate the sum of cubes of the first n natural numbers\n    cubes_sum = sum([x**3 for x in range(1, n+1)])\n    # Calculate the sum of the first n natural numbers\n    sum_sum = sum(range(1, n+1))\n    # Return the difference between the two sums\n    return abs(cubes_sum - sum_sum)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def difference(n):\n    # Sum of cubes of the first n natural numbers\n    cubes = 1\n    for i in range(1, n+1):\n        cubes *= i*i*i\n    # Sum of the first n natural numbers\n    sum_n = 1\n    for i in range(1, n+1):\n        sum_n += i\n    # Difference between the two sums\n    diff = cubes - sum_n\n    return diff"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_of_natural = sum(range(1, n+1))\n    difference = abs(sum_of_cubes - sum_of_natural)\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_nums = sum(range(1, n+1))\n    return sum_cubes - sum_nums"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if (A[i] ^ A[j]) % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    This function takes an array A of size N and returns the count of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor_value = A[i] ^ A[j]\n            if xor_value % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A, N):\n    \"\"\"\n    Write a python function to count the number of pairs whose xor value is odd.\n    \"\"\"\n\n    count = 0\n\n    # Iterate through the array A and check if the xor value of the element is odd\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor_value = A[i] ^ A[j]\n            if xor_value % 2!= 0:\n                count += 1\n\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A,N):\n    # Initialize count variable to 0\n    count = 0\n    # Iterate over all possible pairs of elements in the list\n    for i in range(N):\n        for j in range(i+1,N):\n            # Calculate xor of the two elements\n            xor = A[i] ^ A[j]\n            # If the xor value is odd, increment the count variable\n            if xor % 2 == 1:\n                count += 1\n    # Return the count of odd pairs\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A,N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count=0\n    for i in range(N-1):\n        for j in range(i+2,N):\n            if A[i]^A[j]%2!=0:\n                count+=1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A,N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    xor_sum = 0\n    odd_count = 0\n\n    # Calculate the XOR sum of all the elements in A\n    for i in range(N):\n        xor_sum += A[i]\n\n    # Iterate through all pairs of elements in A and calculate the XOR of them\n    for i in range(N-1):\n        for j in range(i+1,N):\n            xor_val = A[i] ^ A[j]\n            if xor_val % 2 == 1:\n                odd_count += 1\n\n    return odd_count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A, N):\n    \"\"\"\n    Write a python function to count the number of pairs whose xor value is odd.\n    \"\"\"\n    odd_count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor_value = A[i] ^ A[j]\n            if xor_value % 2 == 1:\n                odd_count += 1\n            if odd_count >= N:\n                return odd_count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A, N):\n    odd_pairs = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor_val = A[i] ^ A[j]\n            if xor_val % 2 == 1:\n                odd_pairs += 1\n    return odd_pairs"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if A[i] ^ A[j] % 2!= 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N-1):\n        for j in range(i+2,N):\n            xor_val = A[i] ^ A[j]\n            if xor_val % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # Convert the string to lowercase\n    lowercase = string.lower()\n    # Convert the lowercase string to uppercase\n    uppercase = lowercase.upper()\n    # Compare the two strings and return the result\n    if lowercase == uppercase:\n        return string\n    else:\n        return uppercase"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n    \"\"\"\n    result = \"\"\n    for char in string:\n        if char.isupper():\n            result += char.lower()\n        else:\n            result += char.upper()\n    return result"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    result = \"\"\n    for char in string:\n        if char.isupper():\n            result += char.lower()\n        else:\n            result += char.upper()\n    return result"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(char.upper() if char.islower() else char.lower() for char in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n    \"\"\"\n    return ''.join(c.upper() if c.islower() else c.lower() for c in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n    \"\"\"\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n    \"\"\"\n    # loop through each character in the string\n    for i in range(len(string)):\n        # convert the character to lowercase and store it in the variable 'char_lower'\n        char_lower = string[i].lower()\n        # convert the character to uppercase and store it in the variable 'char_upper'\n        char_upper = string[i].upper()\n        # compare the lowercase and uppercase characters and swap them if they are not equal\n        if char_lower!= char_upper:\n            string = string[:i] + string[i].swapcase() + string[i+1:]\n    return string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # Initialize a new string to store the modified characters\n    result = ''\n    # Iterate through each character in the input string\n    for char in string:\n        # Check if the character is a lowercase letter\n        if char.islower():\n            # Convert the character to uppercase\n            result += char.upper()\n        # Check if the character is an uppercase letter\n        elif char.isupper():\n            # Convert the character to lowercase\n            result += char.lower()\n        # If the character is neither a lowercase nor an uppercase letter, leave it as is\n        else:\n            result += char\n    # Return the modified string\n    return result"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(char.lower() if char.isupper() else char.upper() for char in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # convert the string to lowercase\n    string = string.lower()\n    # iterate over each character in the string\n    for i in range(len(string)):\n        # if the character is uppercase, convert it to lowercase\n        if string[i] in ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']:\n            string = string[:i] + string[i].lower() + string[i+1:]\n        # if the character is lowercase, convert it to uppercase\n        else:\n            string = string[:i] + string[i].upper() + string[i+1:]\n    # return the modified string\n    return string"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n    # Convert the input numbers to strings and remove any leading zeros\n    n1 = str(n1)[1:]\n    n2 = str(n2)[1:]\n    \n    # Initialize the sum variable to zero\n    digit_sum = 0\n    \n    # Loop through the digits of both numbers\n    for i in range(len(n1)):\n        # Subtract the digits of the two numbers\n        digit_diff = int(n1[i]) - int(n2[i])\n        \n        # Add the per-digit difference to the total sum\n        digit_sum += digit_diff**2\n        \n    return digit_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n\n    # Convert the given integers to strings and extract the individual digits\n    str1 = str(n1)\n    str2 = str(n2)\n    digits1 = list(map(int, str1))\n    digits2 = list(map(int, str2))\n\n    # Find the length of the strings and the maximum length of the digits\n    len1 = len(str1)\n    len2 = len(str2)\n    max_len = max(len1, len2)\n\n    # Calculate the per-digit difference between the two numbers\n    diff = 0\n    for i in range(max_len):\n        if i < len1 and i < len2:\n            diff += abs(digits1[i] - digits2[i])\n        elif i < len1:\n            diff += abs(digits1[i])\n        elif i < len2:\n            diff += abs(digits2[i])\n\n    return diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Initialize the sum variable\n    digit_diff = 0\n    \n    # Convert the input integers to lists of digits\n    n1_digits = [int(digit) for digit in str(n1)]\n    n2_digits = [int(digit) for digit in str(n2)]\n    \n    # Loop through each digit in the lists\n    for i in range(len(n1_digits)):\n        # Calculate the difference between the digits and add it to the sum variable\n        digit_diff += abs(n1_digits[i] - n2_digits[i])\n    \n    # Return the sum of the per-digit differences\n    return digit_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the input integers to strings\n    n1_str = str(n1)\n    n2_str = str(n2)\n    \n    # Initialize the sum of differences to zero\n    diff_sum = 0\n    \n    # Iterate through each digit in both strings\n    for i in range(len(n1_str)):\n        diff = abs(ord(n1_str[i]) - ord(n2_str[i]))\n        diff_sum += diff\n    \n    # Return the sum of differences\n    return diff_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Initialize sum to zero\n    sum_diff = 0\n\n    # Convert both integers to strings\n    str1 = str(n1)\n    str2 = str(n2)\n\n    # Loop through each digit in both strings\n    for i in range(len(str1)):\n        diff = abs(int(str1[i]) - int(str2[i]))\n        sum_diff += diff\n\n    # Return the sum\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n    # convert the integers to lists of digits\n    digits_n1 = [int(digit) for digit in str(n1)]\n    digits_n2 = [int(digit) for digit in str(n2)]\n\n    # initialize the sum to 0\n    sum_diff = 0\n\n    # loop through each digit in the lists\n    for i in range(len(digits_n1)):\n        # calculate the difference between the corresponding digits in the lists\n        diff = abs(digits_n1[i] - digits_n2[i])\n\n        # add the difference to the sum of differences\n        sum_diff += diff\n\n    # return the sum of differences\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    diff = 0\n    for i in range(10):\n        diff += abs(n1 % 10 - n2 % 10)\n        n1 //= 10\n        n2 //= 10\n\n    return diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Initialize variables\n    total_distance = 0\n    # Convert the integers to lists of digits\n    num1_digits = [int(digit) for digit in str(n1)]\n    num2_digits = [int(digit) for digit in str(n2)]\n    # Loop through each digit in both lists and compare them\n    for i in range(max(len(num1_digits), len(num2_digits))):\n        if i < len(num1_digits):\n            digit_diff = abs(num1_digits[i] - num2_digits[i])\n        else:\n            digit_diff = abs(0 - num2_digits[i])\n        total_distance += digit_diff ** 2\n    # Return the total distance\n    return total_distance ** 0.5"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the integers to lists of digits\n    digits1 = [int(d) for d in str(n1)]\n    digits2 = [int(d) for d in str(n2)]\n\n    # Calculate the absolute difference between the two lists of digits\n    diff = [abs(a - b) for a, b in zip(digits1, digits2)]\n\n    # Calculate the sum of the per-digit differences\n    sum_diff = sum(diff)\n\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    sum_diff = 0\n    \n    # Loop through each digit of n1 and n2\n    for i in range(10):\n        # Calculate the difference between the corresponding digits of n1 and n2\n        diff = abs(n1 % 10 - n2 % 10)\n        # Add the difference to the sum_diff\n        sum_diff += diff\n        # Remove the last digit from n1 and n2 (to get the next digit)\n        n1 //= 10\n        n2 //= 10\n    \n    return sum_diff"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        max_sum = max(max_sum, current_sum)\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 1:\n        return a[0]\n    max_sum = max_ending_here = a[0]\n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_sum = max(max_sum, max_ending_here)\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    current_sum = 0\n    max_sum = float('-inf')\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size > len(a):\n        raise ValueError(\"Size should be less than or equal to the length of the input array\")\n\n    max_sum = float('-inf')\n    current_sum = 0\n\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if i >= size - 1:\n            return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = 0\n    curr_sum = 0\n    for i in range(size):\n        curr_sum += a[i]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n        elif curr_sum < 0:\n            curr_sum = 0\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far = a[0]\n    max_ending_here = a[0]\n    min_ending_here = a[0]\n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n        min_ending_here = min(a[i], min_ending_here + a[i])\n        max_ending_here = max(min_ending_here, max_ending_here)\n    return max_so_far"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    This function takes a list 'a' of integers and an integer'size' as input and returns the maximum sum of a contiguous sublist of size'size' in the list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    current_start = 0\n    for i in range(len(a)):\n        if i >= size - 1:\n            current_sum = max(a[i], a[i] + current_sum)\n        if current_sum > max_sum:\n            max_sum = current_sum\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    \"\"\"\n    max_sum = float('-inf')\n    current_sum = 0\n    start = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n            start = i\n        elif current_sum < 0:\n            current_sum = 0\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n\n    # Initialize variables\n    max_sum = a[0]\n    current_sum = a[0]\n\n    # Traverse through the array\n    for i in range(1, size):\n        current_sum = max(a[i], current_sum + a[i])\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n    return max_sum"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # create a set of all elements in both tuples\n    all_elements = set(test_tup1 + test_tup2)\n    # convert set to list and sort it\n    sorted_union = sorted(list(all_elements))\n    # return the sorted list\n    return sorted_union"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # convert the tuples to sets to remove duplicates and find the union\n    union_set = set(test_tup1) | set(test_tup2)\n    \n    # convert the union set back to a tuple and sort it\n    union_tup = sorted(union_set)\n    \n    return union_tup"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Get the union of the two tuples\n    union_list = set(test_tup1 + test_tup2)\n    \n    # Sort the union list and print it\n    union_list = sorted(union_list)\n    print(union_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # flatten the tuples into a list\n    flat_list1 = [item for sublist in test_tup1 for item in sublist]\n    flat_list2 = [item for sublist in test_tup2 for item in sublist]\n    \n    # create a set from the flattened lists\n    union_set = set(flat_list1 + flat_list2)\n    \n    # convert the set back to a list and sort it in ascending order\n    sorted_union = sorted(list(union_set))\n    \n    return sorted_union"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # Find the union of the two given tuples\n    union_set = set(test_tup1).union(set(test_tup2))\n    \n    # Convert the set to a list and sort it in ascending order\n    union_list = sorted(list(union_set))\n    \n    # Print the union list\n    print(union_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # concatenate the two tuples into one\n    combined_tuple = test_tup1 + test_tup2\n    # convert the combined tuple into a set to remove duplicates\n    unique_set = set(combined_tuple)\n    # convert the set back into a list\n    unique_list = list(unique_set)\n    # sort the list in ascending order\n    unique_list.sort()\n    # convert the sorted list back into a tuple\n    sorted_tuple = tuple(unique_list)\n    # return the sorted tuple\n    return sorted_tuple"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n\n    # Use set() to remove duplicates from the elements in each tuple\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n\n    # Combine the sets and convert it back to a list\n    union_set = list(set1.union(set2))\n\n    # Sort the list in ascending order\n    union_set.sort()\n\n    # Output the sorted list\n    print(union_set)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Combine the two tuples into a single list\n    combined_list = test_tup1 + test_tup2\n\n    # Find the union of the elements in the list\n    union_list = list(set(combined_list))\n\n    # Sort the list in ascending order\n    sorted_list = sorted(union_list)\n\n    # Output the sorted list as a tuple\n    return tuple(sorted_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Combine the two tuples into a single list\n    combined_list = list(test_tup1) + list(test_tup2)\n    # Convert the list to set to remove duplicates\n    combined_set = set(combined_list)\n    # Convert the set back to a list and sort it\n    sorted_list = sorted(list(combined_set))\n    # Convert the list back to a tuple and return it\n    return tuple(sorted_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Create a set from each tuple\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    \n    # Find the union of the sets\n    union = set1.union(set2)\n    \n    # Convert the union set back to a list and sort it\n    union_list = sorted(list(union))\n    \n    # Output the union list\n    print(union_list)"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            if len(lst[i:j+1]) > max_length:\n                max_length = len(lst[i:j+1])\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            if i!= j:\n                sublist = lst[i:j+1]\n                length = len(sublist)\n                if length > max_length:\n                    max_length = length\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):\n    max_length = 0\n    for i in range(len(lst)):\n        current_length = 1\n        for j in range(i+1, len(lst)):\n            if lst[i] == lst[j]:\n                current_length += 1\n            else:\n                break\n        max_length = max(max_length, current_length)\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    length_list = []\n    for i in range(len(lst)):\n        sublist = lst[i:]\n        length = len(sublist)\n        length_list.append(length)\n    return max(length_list)"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            max_length = max(max_length, len(lst[i:j+1]))\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            max_length = max(max_length, len(lst[i:j+1]))\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 1\n    for i in range(1, len(lst)):\n        if len(lst[i]) > max_length:\n            max_length = len(lst[i])\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    \n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            if j == i+1:\n                continue\n            sublist = lst[i:j+1]\n            if len(sublist) > max_length:\n                max_length = len(sublist)\n                \n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    This function takes a list as input and returns the length of the longest sublist.\n    '''\n    \n    # Initialize the max_length variable to zero\n    max_length = 0\n    \n    # Iterate through the list using a loop\n    for i in range(len(lst)):\n        # Initialize a variable to keep track of the current sublist length\n        current_length = 1\n        \n        # Iterate through the remaining elements of the list using another loop\n        for j in range(i+1, len(lst)):\n            # If the current element is not equal to the next element, increment the sublist length\n            if lst[j]!= lst[i]:\n                current_length += 1\n                \n        # If the current sublist length is greater than the max_length, update max_length\n        if current_length > max_length:\n            max_length = current_length\n            \n    # Return the maximum sublist length found\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            sublist = lst[i:j+1]\n            max_length = max(max_length, len(sublist))\n    return max_length"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    This function extracts values between quotation marks from a string.\n    '''\n    # use a regular expression to find all the strings between quotation marks\n    matches = re.findall(r'\"([^\"]+)\"', text)\n    # return a list of the extracted values\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # Define a regular expression pattern to match values between quotation marks\n    pattern = r'\"(?:[^\"\\\\]|\\\\.)*\"'\n    \n    # Use the re.findall() function to extract all the values between quotation marks\n    values = re.findall(pattern, text)\n    \n    # Return the list of extracted values\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile(r'\"([^\"]*)\"') # matches any double-quoted string\n    matches = pattern.findall(text) # find all matches using the pattern\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'\"(.*?)\"'\n    return re.findall(pattern, text)"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'(?P<value>\"[^\"]*\")'\n    matches = re.findall(pattern, text)\n    values = [match['value'][1:-1] for match in matches]\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r\"(?<=')(?:(?!\\')\\S)+?(?=')\"\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"(.*?)\"'\n    values = re.findall(pattern, text)\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_values(text):\n    \"\"\"\n    Write a function to extract values between quotation marks from a string.\n    \"\"\"\n    # Use regular expressions to extract values between quotation marks\n    pattern = r'\"([^\"]*)\"'\n    values = re.findall(pattern, text)\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"(.*?)\"'\n    values = re.findall(pattern, text)\n    return values"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Pairs(arr,n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Pairs(arr, n):\n    '''\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    arr.sort()\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Pairs(arr, n):\n    # initialize a dictionary to store the frequency of each element in the array\n    freq = {}\n    for i in range(n):\n        freq[arr[i]] = freq.get(arr[i], 0) + 1\n\n    # initialize a counter variable to keep track of the number of pairs\n    count = 0\n\n    # loop through the array and for each element, check if there exists an element that has the same frequency\n    for i in range(n):\n        for j in range(i+1, n):\n            if freq[arr[i]] == freq[arr[j]]:\n                count += 1\n\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Pairs(arr, n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    # Create a set to store the elements in the array\n    set_arr = set(arr)\n    count = 0\n    # Iterate through all pairs of elements in the set\n    for i in range(len(set_arr)):\n        for j in range(i+1, len(set_arr)):\n            # Check if both elements are different and if they are not None\n            if set_arr[i]!= set_arr[j] and set_arr[i] is not None and set_arr[j] is not None:\n                count += 1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Pairs(arr, n):\n    '''\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split(word):\n    \"\"\"\n    Write a python function to split a string into characters.\n    \"\"\"\n    # Initialize an empty list to store the characters\n    chars = []\n    # Loop through each character in the string\n    for char in word:\n        # Append the character to the list of characters\n        chars.append(char)\n    # Return the list of characters\n    return chars"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split(word): \n    '''\n    This function takes a string as input and returns a list of its characters.\n    '''\n    return list(word)"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Convert the integer to a list of digits\n    digits = [int(digit) for digit in str(n)]\n    # Initialize the sum to zero\n    sum_of_digits = 0\n    # Iterate over each digit and add it to the sum\n    for digit in digits:\n        sum_of_digits += digit\n    # Return the sum of digits\n    return sum_of_digits"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Initialize sum variable\n    sum = 0\n    # Convert number to a string and loop through each character\n    for char in str(n):\n        # Convert each character to an integer and add it to the sum variable\n        sum += int(char)\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 0:\n        n = abs(n)\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 0:\n        raise ValueError(\"Input should be a non-negative integer\")\n    else:\n        sum = 0\n        while n > 0:\n            digit = n % 10\n            sum += digit\n            n //= 10\n        return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    return sum(int(digit) for digit in str(n))"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n > 0:\n        digit = n % 10\n        sum += digit\n        n //= 10\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n > 0:\n        digit = n % 10\n        sum += digit\n        n = n // 10\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n > 0:\n        digit = n % 10\n        sum += digit\n        n //= 10\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum(int(digit) for digit in str(n))"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n    \"\"\"\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n    \"\"\"\n\n    # Using the built-in sorted function to check if the list is sorted or not.\n    if sorted(list1) == list1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) < 2:\n        return True\n    for i in range(len(list1) - 1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) < 2:\n        return True\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n    \"\"\"\n    if len(list1) <= 1:\n        return True\n    else:\n        return (list1[1] < list1[0]) and issort_list(list1[1:])"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) == 0:\n        return True\n    elif list1[0] >= list1[1]:\n        return False\n    else:\n        return issort_list(list1[1:])"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def issort_list(list1):\n    \"\"\"\n    This function takes a list and checks whether it is sorted or not. It returns True if the list is sorted and False otherwise.\n    \"\"\"\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n    for i in range(length):\n        empty_list.append({})\n    return empty_list"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{}] * length"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_list(length):\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n\n    Parameters:\n    length (int): The length of the list to create.\n\n    Returns:\n    list: A list of N empty dictionaries.\n    \"\"\"\n    return [{}] * length"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            list1[i][j] = ''.join(sorted(list1[i][j], reverse=True))\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Loop through each sublist in the list of lists\n    for i in range(len(list1)):\n        # Use the sorted() function to sort the sublist in place\n        sorted(list1[i])"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    \"\"\"\n    Sort each sublist of strings in a given list of lists.\n\n    Args:\n        list1 (list of lists): a list of lists where each sublist contains strings.\n\n    Returns:\n        list of lists: the sorted list of lists.\n    \"\"\"\n\n    # iterate over each sublist in the list\n    for i in range(len(list1)):\n        # sort the sublist\n        list1[i].sort()\n\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    for i in range(len(list1)):\n        list1[i].sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Loop over each sublist in the list\n    for sublist in list1:\n        # Sort the sublist using the sorted() function\n        sublist.sort()\n    # Return the modified list\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i] = sorted(list1[i])\n    return list1"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    # convert lists to sets to remove duplicates\n    nums_set = set([num for sublist in nums for num in sublist])\n    # convert sets back to lists and return\n    return list(nums_set)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    # Create a set to store unique numbers\n    unique_nums = set()\n    # Loop through each list in the input list\n    for num_list in nums:\n        # Loop through each number in the list\n        for num in num_list:\n            # Add the number to the set only if it's not already in the set\n            if num not in unique_nums:\n                unique_nums.add(num)\n    # Convert the set back to a list and return it\n    return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n\n    Parameters:\n    - nums: A list of lists of numbers.\n\n    Returns:\n    - A list of lists where each sublist contains only unique numbers from the original lists.\n    \"\"\"\n    # Initialize an empty set to store unique numbers\n    unique_nums = set()\n\n    # Loop through each sublist of nums\n    for sublist in nums:\n        # Loop through each number in the sublist\n        for num in sublist:\n            # Check if the number is already in the set\n            if num not in unique_nums:\n                # If not, add it to the set and append it to the current sublist\n                unique_nums.add(num)\n                sublist.append(num)\n\n    # Convert the set to a list and return it\n    return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    unique_nums = []\n    for num_list in nums:\n        for num in num_list:\n            if num not in unique_nums:\n                unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    seen = set()\n    result = []\n    for num in nums:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    This function takes a list of lists and returns a new list with duplicate numbers removed.\n    \"\"\"\n    # Use a set to remove duplicate elements from the list\n    unique_nums = set(num for sublist in nums for num in sublist)\n    return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n\n    Args:\n        nums (list): A list of lists, where each inner list contains integers.\n\n    Returns:\n        list: A list containing only the unique integers from the input lists.\n    \"\"\"\n\n    # create an empty set to store unique integers\n    unique_nums = set()\n\n    # iterate through each inner list in the input lists\n    for num_list in nums:\n        # iterate through each integer in the inner list\n        for num in num_list:\n            # add the integer to the set if it's not already there\n            if num not in unique_nums:\n                unique_nums.add(num)\n\n    # convert the set back to a list and return it\n    return list(unique_nums)\n"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns a new list with only the unique numbers in the original list.\n    \"\"\"\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    # Create an empty set to store unique numbers\n    unique_set = set()\n\n    # Loop through each list in the input list\n    for num_list in nums:\n        # Loop through each number in the list\n        for num in num_list:\n            # If the number is not in the set, add it to the set\n            if num not in unique_set:\n                unique_set.add(num)\n\n    # Create a new list with only the unique numbers\n    unique_list = list(unique_set)\n\n    return unique_list"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    unique_numbers = list(set(list_data))\n    unique_product = 1\n    for num in unique_numbers:\n        unique_product *= num\n    return unique_product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = list(set(list_data))\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    unique_numbers = set(list_data)\n    product = 1\n    \n    for num in unique_numbers:\n        product *= num\n        \n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = list(set(list_data))  # Convert the list to a set to get unique numbers\n    product = 1  # Initialize the product to 1\n\n    # Calculate the product of the unique numbers\n    for num in unique_numbers:\n        product *= num\n\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list = []\n    for num in list_data:\n        if num not in unique_list:\n            unique_list.append(num)\n    \n    product = 1\n    for num in unique_list:\n        product *= num\n        \n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = list(set(list_data))\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    unique_numbers = set(list_data)\n    product = 1\n\n    for num in unique_numbers:\n        product *= num\n\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Calculate the product of the unique numbers in a given list.\n\n    Args:\n        list_data (list): A list of numbers.\n\n    Returns:\n        int: The product of the unique numbers in the list.\n    \"\"\"\n    unique_list = []\n    for num in list_data:\n        if num not in unique_list:\n            unique_list.append(num)\n    return 1 if len(unique_list) == 1 else (unique_list[0] * unique_product(unique_list[1:]))"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    # Convert the list to a set to remove duplicates\n    unique_set = set(list_data)\n    # Convert the set back to a list and calculate the product\n    product = 1\n    for num in unique_set:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    # create a set of unique numbers from the input list\n    unique_numbers = set(list_data)\n    # calculate the product of the unique numbers\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = 2 * math.pi * r * r + 2 * math.pi * r * h + 2 * math.pi * h * h\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # calculate the surface area using the formula:\n    # A = 2 * pi * r * h\n    return 2 * math.pi * r * h"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # calculate the surface area of the base of the cylinder\n    base_area = 2 * r * r\n    # calculate the surface area of the top of the cylinder\n    top_area = 2 * r * h\n    # calculate the surface area of the base of the cylinder using Heron's formula\n    cylinder_area = (3 * base_area * r) / 2\n    \n    # print the surface areas of the base, top, and cylinder\n    print(\"Surface area of the base of the cylinder:\", base_area)\n    print(\"Surface area of the top of the cylinder:\", top_area)\n    print(\"Surface area of the cylinder:\", cylinder_area)"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = 2 * 3.14 * r * h\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * 3.14 * r * h"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r, h):\n    \"\"\"\n    Write a function to find the surface area of a cylinder.\n    \"\"\"\n    area = (2 * r * h) + (2 * h * r)\n    print(\"The surface area of the cylinder is:\", area)"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 6,
        "answer": ""
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r, h):\n    \"\"\"\n    Write a function to find the surface area of a cylinder.\n    \n    Arguments:\n    r (float): radius of the cylinder\n    h (float): height of the cylinder\n    \n    Returns:\n    float: surface area of the cylinder\n    \"\"\"\n    \n    # Formula for the surface area of a cylinder\n    surface_area = 2 * 3.14 * r * r + 2 * 3.14 * r * h + 2 * 3.14 * h * h\n    \n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = 2 * 3.14 * r * r + 2 * 3.14 * r * h + 2 * 3.14 * h * h\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = math.pi * r**2\n    volume = (math.pi/3) * r**2 * h\n    surface_area = 2 * area\n    print(\"The surface area of the cylinder is:\", surface_area)\n    print(\"The volume of the cylinder is:\", volume)"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(B) > len(A):\n        return False\n    i=0\n    j=0\n    while j<len(B):\n        if A[i]==B[j]:\n            i+=1\n        j+=1\n    return i==len(B)"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) > len(B):\n        return False\n    \n    i,j = 0,0\n    while i < len(A) and j < len(B):\n        if A[i] == B[j]:\n            i += 1\n            j += 1\n        else:\n            j = i\n    return j == len(B)"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B): \n    if len(B) > len(A): \n        return False\n    else: \n        for i in range(len(B)): \n            if A[i] not in B: \n                return False\n    return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n\n    if len(A) >= len(B): \n        # check for sublist condition \n        if A == B: \n            return True\n        \n        for i in range(len(A)-len(B)+1): \n            # check for sublist condition \n            if A[i:i+len(B)] == B: \n                return True\n\n        return False\n\n    else: \n        # check for sublist condition \n        if A == B: \n            return True\n        \n        for i in range(len(B)): \n            # check for sublist condition \n            if A[:i+1] == B: \n                return True\n\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    Write a python function to check whether a list is sublist of another or not.\n    \"\"\"\n\n    # If B is empty, then A is a sublist of B\n    if not B:\n        return True\n\n    # Check if first element of A is same as first element of B\n    if A[0] == B[0]:\n        return is_Sub_Array(A[1:], B[1:])\n\n    # If first element of A is not same as first element of B, then A is not a sublist of B\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) > len(B):\n        return False\n\n    i = 0\n    j = 0\n\n    while i < len(A) and j < len(B):\n        if A[i] == B[j]:\n            i += 1\n            j += 1\n        else:\n            i = i - j + 1\n            j = 0\n\n    if j == len(B):\n        return True\n    else:\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sub_Array(A, B): \n    \"\"\"\n    Check whether a list is sublist of another or not.\n    \"\"\"\n    if len(A) < len(B):\n        return False\n    else:\n        for i in range(len(B)):\n            if A.count(B[i])!= len(B):\n                return False\n        return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n\n    # check if A is a sublist of B\n    if len(B) > len(A):\n        return False\n\n    i = 0\n    j = 0\n\n    while i < len(A) and j < len(B):\n        if A[i] == B[j]:\n            i += 1\n            j += 1\n        else:\n            j = j - i + 1\n            i = 0\n\n    if i == len(A) and j == len(B):\n        return True\n    else:\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    # If B is a sublist of A, then A must also be a sublist of B.\n    if all(B in A):\n        return True\n    else:\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sub_Array(A,B):\n    for i in range(len(A)):\n        for j in range(len(B)):\n            if A[i:j+i] == B[j:j+i]:\n                return True\n    return False"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # initialize a variable to store the factorial \n    factorial = 1\n    # loop through each digit in the number\n    for i in str(n):\n        # multiply the current factorial by the factorial of the current digit\n        factorial *= int(i)\n        # get the last digit of the factorial\n        last_digit = factorial % 10\n    # return the last digit of the factorial\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    Write a python function to find the last digit in factorial of a given number.\n    \"\"\"\n    if n == 0:\n        return 0\n    else:\n        digit = n % 10\n        factorial = 1\n        for i in range(2, digit+1):\n            factorial *= i\n        return factorial"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n):\n    # Find the factorial of n\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n\n    # Find the last digit of the factorial\n    last_digit = factorial % 10\n\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n\n    # Check if the input number is valid\n    if n < 0:\n        return \"Invalid input: n must be a non-negative integer.\"\n    elif n == 0:\n        return 1\n    else:\n        # Convert the number to a string and split it into digits\n        num_str = str(n)\n        num_list = list(num_str)\n\n        # Find the last digit in the factorial and return it\n        factorial = 1\n        for i in range(len(num_list)):\n            factorial *= int(num_list[i])\n        return factorial % 10"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n):\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    return factorial % 10"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Finding the factorial of n\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n\n    # Extracting the last digit of the factorial\n    last_digit = int(factorial % 10)\n\n    # Returning the last digit of the factorial\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n):\n    # convert input number to string\n    str_n = str(n)\n    # find length of string\n    length = len(str_n)\n    # find last digit of string\n    last_digit = str_n[length-1]\n    # convert last digit to integer\n    last_digit_int = int(last_digit)\n    # find factorial of number\n    factorial = 1\n    for i in range(1, last_digit_int+1):\n        factorial *= i\n    # return last digit of factorial\n    return factorial % 10"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    This function takes a positive integer n as input and returns the last digit in the factorial of n.\n    \"\"\"\n    # If n is less than 1, raise an error\n    if n < 1:\n        raise ValueError(\"Input should be a positive integer.\")\n\n    # Calculate the factorial of n\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n\n    # Return the last digit of the factorial\n    return factorial % 10"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    Write a python function to find the last digit in factorial of a given number.\n    \"\"\"\n    # convert the given number to a string\n    num = str(n)\n    # initialize the last digit to 0\n    last_digit = 0\n    # loop through each character of the string and calculate the last digit of the factorial\n    for char in num:\n        last_digit += int(char)\n    # return the last digit\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    last_digit = factorial % 10\n    return last_digit"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    i = 0\n    result = []\n    while i < len(list1):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n        i += 1\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    if len(list1)!= len(list2) or len(list1)!= len(list3):\n        raise ValueError(\"All lists must have the same length\")\n    return list1 + list2 + list3"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    result = []\n    i = 0\n    j = 0\n    k = 0\n\n    while i < len(list1) and j < len(list2) and k < len(list3):\n        if list1[i] < list2[j] and list1[i] < list3[k]:\n            result.append(list1[i])\n            i += 1\n        elif list2[j] < list1[i] and list2[j] < list3[k]:\n            result.append(list2[j])\n            j += 1\n        else:\n            result.append(list3[k])\n            k += 1\n\n    result += list1[i:]\n    result += list2[j:]\n    result += list3[k:]\n\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    if len(list1)!= len(list2) or len(list1)!= len(list3):\n        return \"Lists should have same length\"\n    \n    result = []\n    i = 0\n    j = 0\n    k = 0\n    \n    while i < len(list1) and j < len(list2) and k < len(list3):\n        if i < len(list1) and j < len(list2):\n            if list1[i] < list2[j]:\n                if k < len(list3):\n                    result.append(list1[i])\n                    i += 1\n                    k += 1\n                else:\n                    result.append(list2[j])\n                    j += 1\n            elif list1[i] > list2[j]:\n                if k < len(list3):\n                    result.append(list2[j])\n                    j += 1\n                    k += 1\n                else:\n                    result.append(list1[i])\n                    i += 1\n            else:\n                if k < len(list3):\n                    result.append(list1[i])\n                    i += 1\n                    k += 1\n                else:\n                    result.append(list2[j])\n                    j += 1\n        elif j < len(list2) and k < len(list3):\n            if list2[j] < list3[k]:\n                result.append(list2[j])\n                j += 1\n                k += 1\n            else:\n                result.append(list3[k])\n                k += 1\n        elif i < len(list1) and k < len(list3):\n            if list1[i] < list3[k]:\n                result.append(list1[i])\n                i += 1\n                k += 1\n            else:\n                result.append(list3[k])\n                k += 1\n    \n    if i < len(list1) and j < len(list2):\n        for item in list1[i:]:\n            result.append(item)\n    elif j < len(list2) and k < len(list3):\n        for item in list2[j:]:\n            result.append(item)\n    elif i < len(list1) and k < len(list3):\n        for item in list3[k:]:\n            result.append(item)\n    \n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Flatten the lists using list comprehension\n    flat_list = [num for sublist in [list1, list2, list3] for num in sublist]\n    \n    # Return the flattened list\n    return flat_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # create a new list to hold the interleaved elements\n    interleaved = []\n    # loop through each list and add the elements to the new list\n    for i in range(len(list1)):\n        interleaved.append(list1[i])\n        interleaved.append(list2[i])\n        interleaved.append(list3[i])\n    # return the new list\n    return interleaved"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    i = 0\n    while i < len(list1):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n        i += 1\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # Check if all lists have the same length\n    if len(list1)!= len(list2) or len(list1)!= len(list3):\n        return \"Error: Lists must have the same length.\"\n\n    # Initialize an empty list to hold the interleaved lists\n    interleaved_list = []\n\n    # Iterate through each list in turn\n    for i in range(len(list1)):\n        # Append the first element of the first list to the end of the interleaved list\n        interleaved_list.append(list1[i])\n        # Append the second element of the second list to the end of the interleaved list\n        interleaved_list.append(list2[i])\n        # Append the third element of the third list to the end of the interleaved list\n        interleaved_list.append(list3[i])\n\n    # Return the interleaved list\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    This function takes in three lists and returns a single list that contains all the elements of each list in order.\n    '''\n    # initialize an empty list to hold the interleaved elements\n    result = []\n    # loop through each element in each list\n    for i in range(len(list1)):\n        # add the first element of each list to the result list\n        result.append(list1[i])\n        # add the second element of each list to the result list\n        result.append(list2[i])\n        # add the third element of each list to the result list\n        result.append(list3[i])\n    # return the result list\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # Create a new list to store the interleaved elements\n    result = []\n\n    # Loop through each list and add elements to the result list\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n\n    return result"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Get the length of the tuples\n    len_tup1 = len(test_tup1)\n    len_tup2 = len(test_tup2)\n    \n    # Initialize an empty list to store the dissimilar elements\n    dissimilar_list = []\n    \n    # Loop through each element of the first tuple\n    for i in range(len_tup1):\n        # Check if the current element is present in the second tuple\n        if test_tup1[i] not in test_tup2:\n            # If the element is not present, add it to the dissimilar list\n            dissimilar_list.append(test_tup1[i])\n    \n    # Loop through each element of the second tuple\n    for i in range(len_tup2):\n        # Check if the current element is present in the first tuple\n        if test_tup2[i] not in test_tup1:\n            # If the element is not present, add it to the dissimilar list\n            dissimilar_list.append(test_tup2[i])\n    \n    # Return the dissimilar elements in a list\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the dissimilar elements in the given two tuples.\n    \"\"\"\n    dissimilar = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar.append(test_tup1[i])\n    return dissimilar"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    common_elements = set(test_tup1) & set(test_tup2)\n    dissimilar_elements = test_tup1 - common_elements - test_tup2\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the dissimilar elements in the given two tuples.\n    \"\"\"\n    # Initialize a list to store the dissimilar elements\n    dissimilar_list = []\n\n    # Iterate over the tuples and compare their elements\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            # If there is a dissimilar element, add it to the list\n            dissimilar_list.append(test_tup1[i])\n\n    # Return the list of dissimilar elements\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Initialize an empty set to store dissimilar elements\n    dissimilar_set = set()\n    # Loop through the elements of the first tuple\n    for elem in test_tup1:\n        # Check if the element is in the second tuple\n        if elem not in test_tup2:\n            # If the element is not in the second tuple, add it to the dissimilar set\n            dissimilar_set.add(elem)\n    # Return the set of dissimilar elements\n    return dissimilar_set"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples as input and returns a list of all elements that are present\n    in one tuple but not in the other.\n    \"\"\"\n    common_elements = set(test_tup1) & set(test_tup2)\n    return list(common_elements)"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the dissimilar elements in the given two tuples.\n    \"\"\"\n    # Use set operations to find the elements that are in both tuples but not in test_tup1\n    set_diff1 = set(test_tup2) - set(test_tup1)\n    # Use set operations to find the elements that are in both tuples but not in test_tup2\n    set_diff2 = set(test_tup1) - set(test_tup2)\n    # Combine the two sets of dissimilar elements into a single list\n    dissimilar_list = list(set_diff1.union(set_diff2))\n    # Return the list of dissimilar elements\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    diff_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            diff_list.append(test_tup1[i])\n    return diff_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            new_tuple.append(even_ele(item, even_fnc))\n        elif isinstance(item, list):\n            new_tuple.append([even_fnc(x) for x in item])\n        else:\n            new_tuple.append(even_fnc(item))\n    return new_tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_list = []\n    for i in test_tuple:\n        if isinstance(i, tuple):\n            even_list.extend(even_fnc(i))\n        else:\n            if even_fnc(i):\n                even_list.append(i)\n    return even_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # Check if the nested tuple is empty\n    if not test_tuple:\n        return test_tuple\n\n    # Check if the first element is an even number\n    if even_fnc(test_tuple[0]):\n        # Check if the rest of the tuple is also even\n        if all(even_fnc(x) for x in test_tuple[1:]):\n            # If both conditions are met, return the tuple with even elements\n            return tuple(x for x in test_tuple if even_fnc(x))\n\n    # If none of the above conditions are met, remove the first element and recursively check the rest of the tuple\n    return even_ele(test_tuple[1:], even_fnc)"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n\n    # Define an empty list to store the even elements\n    even_list = []\n\n    # Loop through each element in the tuple\n    for element in test_tuple:\n        # Check if the element is even by calling the given function\n        if even_fnc(element):\n            # If it is even, add it to the even list\n            even_list.append(element)\n\n    # Return the even list\n    return even_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    uneven_elems = []\n    for elem in test_tuple:\n        if isinstance(elem, list):\n            uneven_elems += even_ele(elem, even_fnc)\n        elif isinstance(elem, tuple):\n            uneven_elems.append(even_ele(elem, even_fnc))\n        elif even_fnc(elem):\n            uneven_elems.append(elem)\n    return uneven_elems"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc):\n    \"\"\"\n    Remove uneven elements in the nested mixed tuple using the provided function.\n\n    Args:\n        test_tuple (tuple): Nested tuple of mixed elements.\n        even_fnc (function): Function to check if an element is even or odd.\n\n    Returns:\n        tuple: New tuple with uneven elements removed.\n    \"\"\"\n\n    new_tuple = []\n\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            new_tuple.append(even_ele(item, even_fnc))\n        elif isinstance(item, list):\n            new_tuple.append(even_ele(item, even_fnc))\n        elif even_fnc(item):\n            new_tuple.append(item)\n\n    return tuple(new_tuple)"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    for i in range(len(test_tuple)):\n        if not even_fnc(test_tuple[i]):\n            test_tuple = test_tuple[:i] + test_tuple[i+1:]\n            break\n    return test_tuple\n\ndef is_even(x):\n    return x % 2 == 0"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    \n    # create a new list to store the even elements of the test tuple\n    even_list = []\n    \n    # iterate over each element of the test tuple\n    for element in test_tuple:\n        \n        # if the element is a tuple, recursively call the function on the element\n        if isinstance(element, tuple):\n            even_list += even_ele(element, even_fnc)\n            \n        # if the element is not a tuple, check if it satisfies the condition of being even using the even_fnc function\n        elif even_fnc(element):\n            even_list.append(element)\n            \n    # return the new list of even elements\n    return even_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for i in test_tuple:\n        if isinstance(i, (tuple, list)):\n            new_tuple.extend(even_ele(i, even_fnc))\n        elif even_fnc(i):\n            new_tuple.append(i)\n    return new_tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    for i in range(len(test_tuple)):\n        if not even_fnc(test_tuple[i]):\n            if isinstance(test_tuple[i], tuple):\n                even_ele(test_tuple[i], even_fnc)\n            else:\n                test_tuple = test_tuple[:i] + test_tuple[i+1:]\n            break\n        elif isinstance(test_tuple[i], tuple):\n            even_ele(test_tuple[i], even_fnc)\n    return test_tuple"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surface_Area(b, s):\n    \"\"\"\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    \"\"\"\n    # Formula for surface area of square pyramid\n    surface = (b * s) / 2\n\n    return surface"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surface_Area(b, s):\n    \"\"\"\n    This function calculates the surface area of a square pyramid with the given base edge and height.\n\n    Parameters:\n    b (float): The base edge of the pyramid.\n    s (float): The height of the pyramid.\n\n    Returns:\n    float: The surface area of the pyramid.\n    \"\"\"\n\n    # Calculate the base area of the pyramid\n    base_area = b * b\n\n    # Calculate the surface area of the pyramid\n    surface_area = base_area + 2 * (s * b)\n\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    \n    # Finding the surface area of the base of the pyramid\n    area_base = b * s\n    \n    # Finding the surface area of the remaining area of the pyramid\n    area_remaining = 2 * s * (b**2)\n    \n    # Adding the two surface areas and returning the result\n    return area_base + area_remaining"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n\n    # Formula to find surface area of a square pyramid\n    surface_area = (b*s*2)+(b*s*2)+(b*s*2)+(b*s*2)+(b*s*2)+(b*s*2)+(b*s*2)+(b*s*2)+(b*s*2)\n\n    # Return the surface area of the square pyramid\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Calculate the surface area of a square pyramid\n    area = (b**2) * s\n    # Return the surface area\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surface_Area(b, s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (b**2) + (s**2) + (b*s*2)  # formula for surface area of square pyramid\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # calculate the surface area of the base\n    base_area = b * b\n    # calculate the surface area of the side\n    side_area = b * s\n    # calculate the surface area of the pyramid\n    pyramid_area = 3 * base_area + 6 * side_area\n    # return the surface area of the pyramid\n    return pyramid_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    surface = 2*(b*s + b*s + b*s + b*s) + 2*b*s + 2*b*s \n    return surface"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Find the length of the perimeter of the pyramid\n    perimeter = 4 * b\n    # Calculate the surface area of the pyramid\n    surface = (perimeter * s) / 3\n    # Return the surface area\n    return surface"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n\n    if b <= 0 or s <= 0:\n        return None\n\n    return 2 * b * s + surface_Area(b - 1, s)"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1.keys():\n        return False\n    else:\n        return True"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1:\n        return False\n    else:\n        return True"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    \"\"\"\n    Write a function to check if a dictionary is empty\n    \"\"\"\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        print(\"The dictionary is empty.\")\n    else:\n        print(\"The dictionary is not empty.\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n\n    if len(dict1) == 0:\n        print(\"The dictionary is empty\")\n    else:\n        print(\"The dictionary is not empty\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def catalan_number(n):\n    '''\n    This function calculates the nth Catalan number.\n    '''\n    catalan = [0] * (n+1)\n    catalan[0] = 1\n    for i in range(1, n+1):\n        catalan[i] = (2*i-1) * catalan[i-1] / i\n    return catalan[n]"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    # Catalan number formula: C(n,k) = binomial(n,k) * binomial(n-1,k-1) / k!\n    # where k = num and binomial() is the binomial coefficient function from math library\n\n    from math import factorial\n\n    # Calculate binomial coefficient using math.factorial() function\n    def binomial(n, k):\n        return factorial(n) // (factorial(k) * factorial(n - k))\n\n    # Calculate nth catalan number\n    catalan = 1\n    for i in range(1, num + 1):\n        catalan *= binomial(num, i)\n        catalan //= i\n\n    return catalan"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def catalan_number(n):\n    '''\n    This function returns the nth Catalan number using a recursive algorithm.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return catalan_number(n-1) + 2*catalan_number(n-1)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def catalan_number(n):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        result = 0\n        for i in range(1, n+1):\n            result += catalan_number(i-1) * catalan_number(n-i)\n        return result // (2**n)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    n = num\n    catalan = 1\n    for i in range(1, n+1):\n        catalan = catalan * (2*i-1)/(i)\n    return catalan\n"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Write a function which returns the nth Catalan number.\n    \"\"\"\n    if n < 0:\n        return None\n    elif n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        catalan_numbers = [0] * (n + 1)\n        catalan_numbers[0] = 1\n        catalan_numbers[1] = 1\n        for i in range(2, n + 1):\n            for j in range(i):\n                catalan_numbers[i] += catalan_numbers[j] * catalan_numbers[i - j - 1]\n        return catalan_numbers[n]"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def catalan_number(n):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if n <= 1:\n        return 1\n    else:\n        return (2*n-1) * catalan_number(n-1)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return 4*catalan_number(n//2) - catalan_number(n//2+1)\n    else:\n        return 4*catalan_number(n//2+1) - catalan_number(n//2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def catalan_number(n):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    return (n * (2 * n - 1)) // 6"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Write a function which returns nth catalan number.\n    \"\"\"\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return (2*n-1) * catalan_number(n-1) / n"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverbs(text):\n    # Compile regular expression pattern to match adverbs ending with \"ly\"\n    pattern = re.compile(r'\\b(no|not|only|just|justly|already|still|actually|actually|rather|rather|probably|probably|almost|almost|seeming|seeming|really|really|somewhat|somewhat|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n\n    # Define a regular expression pattern for adverbs ending with \"ly\"\n    pattern = r'\\b\\w+(ly|ed|ing|ive|sly|ingly)\\b'\n\n    # Use the re.findall() function to find all the adverbs in the text that match the pattern\n    adverbs = re.findall(pattern, text)\n\n    # Initialize an empty list to store the positions of the adverbs in the text\n    positions = []\n\n    # Loop through the adverbs and append their positions to the positions list\n    for i, adv in enumerate(adverbs):\n        positions.append(text.find(adv))\n\n    # Return the list of adverb positions and their corresponding adverbs\n    return positions, adverbs"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define the pattern for finding adverbs ending with ly\n    pattern = r'\\b[a-z]+ly\\b'\n\n    # Find all matches of the pattern in the input text\n    matches = re.findall(pattern, text, re.IGNORECASE)\n\n    # Return a list of tuples containing the adverb and its starting position in the text\n    return [(match, text.find(match)) for match in matches]"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverbs(text):\n    \"\"\"\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    \"\"\"\n    pattern = r'ly$' # regular expression pattern for finding adverbs ending with \"ly\"\n    matches = re.findall(pattern, text) # find all matches of the pattern in the text\n    for match in matches:\n        print(f\"Adverb found: {match} at position {text.find(match)}\")"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define regex pattern to match adverbs ending with ly\n    pattern = r'\\bly\\b'\n    # Use re.findall() function to find all occurrences of pattern in text\n    matches = re.findall(pattern, text)\n    # Initialize an empty list to store adverb positions\n    positions = []\n    # Iterate over matches and add their positions to positions list\n    for match in matches:\n        positions.append(text.find(match))\n    # Return positions list\n    return positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverbs(text):\n    pattern = r'\\b(?:[a-z]+)(?:ly|sly|esly|ingly|inglyly|ing|nly|lys|s|es|ingly|lying)\\b'\n    matches = re.findall(pattern, text, re.IGNORECASE)\n    return matches\n\ntext = \"In the early morning, you feel light and happy.\"\nprint(find_adverbs(text))"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define the regular expression pattern for adverbs ending with ly\n    pattern = r'\\b\\w+(ly)\\b'\n\n    # Find all non-overlapping matches of the pattern in the text\n    matches = re.finditer(pattern, text, re.IGNORECASE)\n\n    # Iterate through the matches and print the adverbs and their positions\n    for match in matches:\n        print(match.group(), ':', match.start(), '-', match.end())"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # define regex pattern for adverbs ending with ly\n    pattern = r'\\b[a-zA-Z]+ly\\b'\n    # use re.findall() function to find all occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n    # iterate over the matches and return a list of tuples containing the adverb and its positions in the text\n    adverbs = []\n    for match in matches:\n        start = text.index(match)\n        end = start + len(match)\n        adverbs.append((match, (start, end)))\n    return adverbs"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverbs(text):\n    # use a regular expression to find all adverbs ending with ly\n    pattern = r'\\b(ly)\\b'\n    adverbs = re.findall(pattern, text)\n\n    # loop through the list of adverbs and return their positions\n    result = []\n    for adv in adverbs:\n        pos = text.find(adv)\n        result.append((adv, pos))\n\n    return result"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n\n    # Find all instances of the pattern \".*ly$\" (matches anything after \"ly\")\n    adverbs = re.findall(r'.*ly$', text)\n    \n    # If the list is not empty, print the positions and the first adverb\n    if adverbs:\n        print(f\"\\nAdverbs: {adverbs}\\nPositions: {', '.join([str(i) for i in range(len(text))])}\")\n    \n    # Otherwise, print a message indicating that no adverbs were found\n    else:\n        print(\"No adverbs found.\")"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Given a list of items and an integer n, return a list of the n most expensive items.\n    The items are assumed to have prices.\n    The function should return a list of tuples, where each tuple contains an item and its price.\n    '''\n    heap = []\n    for item, price in items:\n        heapq.heappush(heap, (-price, item))\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Find the n most expensive items in a given dataset.\n\n    Args:\n        items: List of items (tuples of price and description)\n        n: Number of most expensive items to return\n\n    Returns:\n        List of tuples of the n most expensive items.\n    \"\"\"\n\n    # Create a min heap of size n to store the n most expensive items\n    min_heap = []\n\n    # Iterate through the items and add each item to the min heap\n    for price, description in items:\n        heapq.heappush(min_heap, (-price, description))\n\n    # Extract the n most expensive items from the min heap\n    result = []\n    for _ in range(n):\n        result.append(heapq.heappop(min_heap))\n\n    return result"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Find the n most expensive items in a given dataset.\n    '''\n    # Create a min heap to store the n most expensive items\n    heap = []\n    for item in items:\n        # Add the item to the heap if it's the first item, or if its price is less than or equal to the first item's price\n        if not heap or item[1] <= heap[0][1]:\n            heapq.heappush(heap, item)\n        # If the heap is full, remove the cheapest item\n        elif len(heap) == n:\n            heapq.heappop(heap)\n    # Return the n most expensive items in the heap\n    return [item[0] for item in heap]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, -item) # max heap, so items are negative\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return [-item for item in heap] # get the n most expensive items"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    This function takes a list of items and a positive integer n and returns a list of the n most expensive items in the dataset.\n    \"\"\"\n    heap = []\n    heapq.heapify(heap)\n    for item in items:\n        if len(heap) < n:\n            heapq.heappush(heap, item)\n        else:\n            if item > heap[0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, item)\n    return [heap[0]] + heap[1:]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    \"\"\"\n    Write a function to find the n most expensive items in a given dataset.\n    \"\"\"\n    # Create a min heap of size n to store the n most expensive items\n    min_heap = []\n    for i in range(n):\n        min_heap.append(items[0])\n        heapq.heappop(min_heap)\n\n    # Pop the n most expensive items from the heap and add them to a new list\n    most_expensive = []\n    while min_heap:\n        most_expensive.append(heapq.heappop(min_heap))\n    \n    return most_expensive"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    This function takes a list of items and an integer n and returns a list of the n most expensive items in the dataset.\n    \"\"\"\n    # create a min heap with the given n\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, items.pop())\n    # add the remaining items to the heap\n    for item in items:\n        heapq.heappush(heap, item)\n    # return the n most expensive items from the heap\n    return [heapq.heappop(heap) for _ in range(n)]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # sort the items in descending order based on the price\n    sorted_items = sorted(items, key=lambda x: x[1], reverse=True)\n    \n    # take the first n items from the sorted list\n    result = [sorted_items[i][0] for i in range(n)]\n    \n    return result"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n:]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth element and add the first part to the end.\n    '''\n    if n > len(l):\n        return None\n    else:\n        split_index = n - 1\n        first_part = l[:split_index]\n        second_part = l[split_index:]\n        return first_part + second_part"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # Split the list into two parts at the nth element\n    first_part = l[:n]\n    second_part = l[n:]\n    # Concatenate the two parts and return the result\n    return first_part + second_part"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    split_list = l[n:]\n    l[n:] = l[:n]\n    l += split_list\n    return l"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # Splitting the list into two parts at the nth element\n    first_part = l[:n]\n    second_part = l[n:]\n    # Adding the first part to the end of the second part\n    l = first_part + second_part\n    return l"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth element and add the first part to the end.\n    '''\n    # Split the list into two parts\n    mid = n // 2\n    left_arr = l[:mid]\n    right_arr = l[mid:]\n\n    # Add the left part to the end of the right part\n    l[mid:] = left_arr + right_arr\n\n    # Return the modified list\n    return l"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # Check if the length of the list is greater than the nth element\n    if len(l) <= n:\n        return \"List length is less than or equal to the nth element.\"\n    \n    # Split the list at the nth element\n    arr = l[:n] + [l[n]] + l[n+1:]\n    \n    return arr"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n:]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # Check if the list is empty or not\n    if len(l) == 0:\n        return []\n    \n    # Find the nth element\n    if n > len(l):\n        return []\n    elif n == 1:\n        return [l[0],] + l[1:]\n    else:\n        return l[:n-1] + [l[n-1],] + l[n:]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # Calculate the position of the element to split at\n    split_at = n-1\n\n    # Split the list at the nth element\n    left = l[:split_at]\n    right = l[split_at:]\n\n    # Add the first part to the end\n    result = right + left\n\n    return result"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    \"\"\"\n    Write a function to convert a list to a tuple.\n    \"\"\"\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    \"\"\"\n    Convert a list to a tuple.\n    \"\"\"\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_tuple(lst):\n    return tuple(lst)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_tuple(lst):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(lst)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    # convert the list to a tuple\n    tuplex = tuple(listx)\n    return tuplex"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    This function takes a list of numbers and finds the difference between the largest and smallest value in the list.\n    '''\n    if len(nums) == 0:\n        return \"Error: List is empty\"\n    elif len(nums) == 1:\n        return \"Error: List has only one element\"\n    else:\n        max_num = max(nums)\n        min_num = min(nums)\n        diff = max_num - min_num\n        return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) < 2:\n        return None\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num - min_num\n"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    \"\"\"\n    Write a python function to find the difference between largest and smallest value in a given list.\n    \"\"\"\n    if len(nums) < 2:\n        return None\n    \n    max_num = max(nums)\n    min_num = min(nums)\n    \n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # finding the smallest value in the list\n    smallest = nums[0]\n    \n    # finding the largest value in the list\n    for num in nums:\n        if num < smallest:\n            smallest = num\n            \n    # finding the difference between the largest and smallest value in the list\n    big_diff = largest - smallest\n    \n    return big_diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 0:\n        return None\n    elif len(nums) == 1:\n        return None\n    else:\n        largest = nums[0]\n        smallest = nums[0]\n        for i in range(1, len(nums)):\n            if nums[i] > largest:\n                largest = nums[i]\n            elif nums[i] < smallest:\n                smallest = nums[i]\n        return largest - smallest"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n\n    # Find the maximum and minimum values in the list\n    max_val = max(nums)\n    min_val = min(nums)\n\n    # Find the difference between max and min values\n    diff = max_val - min_val\n\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    This function takes a list of numbers as input and returns the difference between the largest and smallest value in the list.\n    '''\n    if len(nums) == 0:\n        return None\n    \n    max_num = nums[0]\n    min_num = nums[0]\n    \n    for num in nums:\n        if num > max_num:\n            max_num = num\n        elif num < min_num:\n            min_num = num\n    \n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) < 2:\n        return None\n\n    # Find the maximum and minimum values in the list\n    max_val = max(nums)\n    min_val = min(nums)\n\n    # Calculate the difference between the maximum and minimum values\n    diff = max_val - min_val\n\n    return diff"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # create a list to store perfect squares\n    squares = []\n    # loop through numbers from a to b\n    for i in range(a, b+1):\n        # loop through numbers from 1 to i/2\n        for j in range(1, i//2+1):\n            # check if the sum of the squares is equal to i\n            if i == j**2 + i:\n                # add the square to the list of perfect squares\n                squares.append(i)\n    # return the list of perfect squares\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        if i**2 == a or i**2 == b:\n            print(i)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n\n    # initialize the count of perfect squares\n    count = 0\n\n    # loop through all possible values of x\n    for x in range(a, b+1):\n\n        # check if x is a perfect square\n        if x*x == a or x*x == b:\n\n            # increment the count if it is\n            count += 1\n\n    # return the count of perfect squares\n    return count"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n\n    # check if a is less than or equal to zero\n    if a <= 0:\n        return \"Error: Please enter a positive integer.\"\n\n    # check if b is less than or equal to zero\n    if b <= 0:\n        return \"Error: Please enter a positive integer.\"\n\n    # check if a is greater than b\n    if a > b:\n        return \"Error: Please enter a smaller value for b.\"\n\n    # initialize two variables to store the square root of a and b\n    a_sqrt = 0\n    b_sqrt = 0\n\n    # loop until a_sqrt >= b_sqrt\n    while a_sqrt < b_sqrt:\n        a_sqrt += 1\n        b_sqrt = (a_sqrt * a_sqrt + a) / 2\n\n    # check if the last square root is greater than b\n    if b_sqrt > b:\n        return \"Error: Please enter a smaller value for b.\"\n\n    # initialize an empty list to store perfect squares\n    perfect_squares_list = []\n\n    # loop through all possible square roots of a_sqrt and b_sqrt\n    for i in range(a_sqrt, b_sqrt + 1):\n        if i * i == a:\n            perfect_squares_list.append(i)\n\n    # check if the number of perfect squares is odd\n    if len(perfect_squares_list) % 2 == 1:\n        perfect_squares_list.append((a_sqrt + b_sqrt) // 2)\n\n    # return the perfect squares list\n    return perfect_squares_list"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n\n    # Initialize a list to store perfect squares\n    squares = []\n\n    # Loop through the range of numbers between a and b\n    for num in range(a, b+1):\n        # Check if the square of the current number is within the range of b\n        if num ** 2 <= b:\n            # If it is, add it to the list of perfect squares\n            squares.append(num ** 2)\n\n    # Return the list of perfect squares\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    result = []\n    for i in range(a, b + 1):\n        square = i * i\n        if square == i ** 2 and i ** 2 in range(a, b + 1):\n            result.append(square)\n    return result"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        for j in range(i, b+1):\n            if i**2 + j**2 == i*j:\n                print(i, j)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Initialize a list to store the perfect squares\n    squares = []\n    # Loop through each number between a and b\n    for num in range(a, b+1):\n        # Check if the number is a perfect square\n        square = num ** 0.5\n        # If it is, add it to the list of perfect squares\n        if square == int(square):\n            squares.append(square)\n    # Return the list of perfect squares\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # create an empty list to store perfect squares\n    perfect_square_list = []\n    # loop through numbers a to b\n    for num in range(a, b+1):\n        # check if the number is a perfect square\n        is_square = True\n        for i in range(2, num):\n            if num % i!= 0:\n                is_square = False\n                break\n        # if the number is a perfect square, add it to the list\n        if is_square:\n            perfect_square_list.append(num)\n    # return the list of perfect squares\n    return perfect_square_list"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    perfect_squares = []\n    for num in range(int(a), int(b) + 1):\n        if num**2 == num:\n            perfect_squares.append(num)\n    return perfect_squares"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n\n    # Convert radians to degrees\n    theta = cmath.phase(x+y*1j)\n    theta = abs(theta) * 180 / cmath.pi\n    \n    # Calculate rectangular coordinates\n    x = abs(x) * cmath.cos(theta)\n    y = abs(y) * cmath.sin(theta)\n    \n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Convert polar coordinates (r, theta) to rectangular coordinates.\n\n    Args:\n        r (float): radius\n        theta (float): angle in radians\n\n    Returns:\n        float: x-coordinate in rectangular coordinates\n        float: y-coordinate in rectangular coordinates\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    # Convert polar to rectangular coordinates\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    '''\n    Convert polar coordinates to rectangular coordinates.\n    '''\n    x = r*cmath.cos(theta)\n    y = r*cmath.sin(theta)\n    return x,y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.phase(x + y*1j)\n    return r * cmath.cos(theta), r * cmath.sin(theta)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Write a function to convert polar coordinates to rectangular coordinates.\n\n    Parameters:\n    r (float): Polar radius\n    theta (float): Polar angle in radians\n\n    Returns:\n    x (float): Rectangular x-coordinate\n    y (float): Rectangular y-coordinate\n    \"\"\"\n\n    # Convert angle to degrees\n    theta_deg = cmath.phase(theta) * 180.0 / cmath.pi\n\n    # Calculate rectangular coordinates\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return (x, y)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    phi = cmath.phase(theta)\n    x = r*cmath.cos(phi)\n    y = r*cmath.sin(phi)\n    return x,y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef polar_rect(x, y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    # Calculate the radius\n    radius = cmath.sqrt(x**2 + y**2)\n    \n    # Calculate the angle\n    angle = cmath.phase(x + y*1j)\n    \n    # Convert the angle to degrees and radians\n    degrees = angle * 180 / cmath.pi\n    radians = angle\n    \n    # Calculate the rectangular coordinates\n    x_rect = radius * cmath.cos(radians)\n    y_rect = radius * cmath.sin(radians)\n    \n    # Return the rectangular coordinates\n    return x_rect, y_rect"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    #get the length of the list\n    length = len(newList)\n    \n    #if the length of the list is less than or equal to 1, return the list as it is\n    if length <= 1:\n        return newList\n    \n    #if the length of the list is greater than 1, swap the first and last elements\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]\n    \n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Swap the first and last elements in the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) < 2: # check if list has less than two elements\n        return \"List should have at least two elements\"\n    else:\n        first, last = newList[0], newList[-1] # extract first and last elements\n        newList[0], newList[-1] = last, first # interchange first and last elements\n        return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last elements in a list.\n    \"\"\"\n    if len(newList) < 2:\n        return newList\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Get the length of the list\n    length = len(newList)\n    # Check if the length of the list is 2 or more\n    if length >= 2:\n        # Swap the first and last elements in the list\n        newList[0], newList[-1] = newList[-1], newList[0]\n    else:\n        # If the list has less than 2 elements, do nothing\n        return newList\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n\n    # Check if the list has at least two elements\n    if len(newList) < 2:\n        print(\"Error: List must have at least two elements\")\n        return\n\n    # Interchange the first and last elements in the list\n    first_element = newList[0]\n    last_element = newList[-1]\n    newList[0] = last_element\n    newList[-1] = first_element\n\n    print(\"List after swapping elements:\", newList)"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Assigning the last element of the list to temp variable\n    temp = newList[-1]\n    # Removing last element from the list\n    newList.pop()\n    # Adding the first element to the last position of the list\n    newList.append(temp)"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last elements in a list.\n    \"\"\"\n    if len(newList) < 2:\n        return newList\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    n = len(newList)\n    if n > 1:\n        newList[0], newList[n-1] = newList[n-1], newList[0]\n        return newList\n    else:\n        return \"List must have at least 2 elements\""
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n\n    # initialize the binomial coefficient as 0\n    coeff = 0\n\n    # loop through each k from 0 to n-k\n    for i in range(k, n+1):\n\n        # calculate the binomial coefficient by multiplying i with (n-i+1) and (n-i)\n        coeff += i*(n-i+1)*(n-i)\n\n    # return the sum of the product of consecutive binomial coefficients\n    return coeff"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n\n    Args:\n    n (int): The number of elements in the set\n    k (int): The number of elements to choose from the set\n\n    Returns:\n    int: The sum of the product of consecutive binomial co-efficients\n\n    \"\"\"\n    if n < k:\n        return 0\n    elif k == 0 or k == n:\n        return 1\n    else:\n        coeff = 1\n        count = 1\n        total = 0\n\n        for i in range(1, k + 1):\n            if i <= n - k + i:\n                coeff *= i\n                count += 1\n            else:\n                coeff *= (n - k + i)\n                count += 1\n\n            if count <= 2:\n                total += coeff\n        return total"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def binomial_Coeff(n, k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # Initialize the sum variable to 0\n    sum = 0\n    \n    # Initialize the product variable to 1\n    product = 1\n    \n    # Check if k is less than or equal to n-k\n    if k > n - k:\n        # If k is greater than n-k, return 0\n        return 0\n    \n    # Loop from 0 to k\n    for i in range(k):\n        # Multiply the product by (n-i)\n        product *= (n-i)\n        \n        # Add the product to the sum\n        sum += product\n    \n    # Return the sum\n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # Initialize sum variable to zero\n    sum_ = 0\n    # Loop through each i from 0 to k\n    for i in range(k+1):\n        # Calculate the binomial coefficient at i\n        coeff = math.factorial(n) // (math.factorial(i) * math.factorial(n-i))\n        # Multiply the binomial coefficient with the sum variable\n        sum_ += coeff\n    # Return the final sum variable\n    return sum_"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n\n    if k > n: # Check if k is greater than n\n        return 0\n\n    # Initialize the sum variable\n    sum_product = 0\n\n    # Find the factorial of n and the factorial of k\n    factorial_n = 1\n    for i in range(1, n+1):\n        factorial_n *= i\n\n    factorial_k = 1\n    for i in range(1, k+1):\n        factorial_k *= i\n\n    # Calculate the product of consecutive binomial coefficients\n    for i in range(1, k+1):\n        sum_product += factorial_n // (factorial_k*i)\n        factorial_k *= i\n\n    return sum_product"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    if k > n:\n        return 0\n    elif k == 0 or k == n:\n        return 1\n    else:\n        return binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k == 0:\n        return 1\n    elif k == n:\n        return 1\n    else:\n        return binomial_Coeff(n-1,k) + binomial_Coeff(n-1,k-1)*n"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n\n    # Initialize the sum to 0\n    sum = 0\n\n    # Iterate from 0 to n-1\n    for i in range(n): \n\n        # Calculate the binomial coefficient\n        binomial = factorial(n)/(factorial(i)*factorial(n-i))\n\n        # Multiply the binomial coefficient with k^i and k^(n-i)\n        product = k**i * k**(n-i)\n\n        # Add the product to the sum\n        sum += product\n\n    # Return the sum of all products\n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n\n    # Initialize variables\n    coeffSum = 0\n    coeffProduct = 1\n\n    # Calculate the sum of the product of consecutive binomial co-efficients\n    for i in range(k, n+1):\n        coeffSum += i*coeffProduct\n        coeffProduct *= (n-k+i)/(i-1)\n\n    return coeffSum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    coefficients = [1]\n    for i in range(1, k+1):\n        coefficients.append(coefficients[i-1] * (n-i+1) // i)\n    sum_of_coefficients = sum(coefficients)\n    return sum_of_coefficients"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^\\d+\\.0\\.0\\.0', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # remove leading zeros from each octet\n    octets = re.findall(r'(\\d+\\.\\d+\\.\\d+\\.\\d+)', ip)\n    for i in range(len(octets)):\n        octets[i] = re.sub(r'^\\d+(\\.\\d+){2}', r'\\1', octets[i])\n    # join the octets back together with \".\"\n    return \".\".join(octets)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = r'^\\d+\\.\\d+\\.\\d+\\.\\d+.*'\n    result = re.sub(pattern, r'\\1', ip)\n    return result"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef removezero_ip(ip):\n    # Regular expression pattern to match IP addresses\n    pattern = r'^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$'\n    # Match the pattern against the input IP address\n    match = re.match(pattern, ip)\n    if match:\n        # Remove leading zeroes from each octet\n        return match.group(1) + '.' + match.group(2)[1:] + '.' + match.group(3)[1:] + '.' + match.group(4)[1:]\n    else:\n        # If the pattern does not match, return the original input\n        return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'^\\D', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = r'^\\d+\\.\\d+\\.\\d+\\.\\d+$'\n    ip = re.sub(pattern, lambda x: x.group(0).replace('0', ''), ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^\\d{0,3}\\.', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Regular expression to match an IP address\n    ip_regex = r'^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$'\n\n    # Check if the input is an IP address using the regular expression\n    if re.match(ip_regex, ip):\n        # Split the IP address into four parts\n        parts = ip.split('.')\n        # Remove leading zeroes from each part\n        for i in range(len(parts)):\n            while parts[i].startswith('0'):\n                parts[i] = parts[i][1:]\n        # Join the parts back into an IP address string\n        ip = '.'.join(parts)\n        return ip\n    else:\n        return 'Invalid IP address format'"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Remove leading zeros from each octet of the IP address\n    ip = re.sub(r'^(0+)\\d+\\.\\d+\\.\\d+\\.(0+)', r'\\1\\2', ip)\n    ip = re.sub(r'^(0+)\\d+\\.\\d+\\.(0+)\\d+\\.\\d+', r'\\1\\2\\3\\4', ip)\n    ip = re.sub(r'^(0+)(\\d+)', r'\\1\\2', ip)\n\n    # If the IP address is all zeros, return a default value\n    if ip == '0.0.0.0':\n        ip = '127.0.0.1'\n\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n\n    # Regular expression pattern to match ip addresses with leading zeros\n    pattern = r'^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$'\n\n    # Use re.match() method to match the pattern\n    match = re.match(pattern, ip)\n\n    # If no match is found, return the original ip address\n    if match:\n        ip = match.group(0)\n\n    # Remove leading zeros from the ip address\n    ip = ''.join([i for i in ip if i!= '0'])\n\n    # Return the modified ip address\n    return ip"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n\n    # Initialize variables for even and odd numbers\n    even = None\n    odd = None\n\n    # Loop through the list\n    for num in list1:\n        # If the number is even\n        if num % 2 == 0:\n            # If the even number is not set yet\n            if even is None:\n                even = num\n            # If the even number is already set\n            else:\n                diff = even - num\n                print(\"The difference between the first even and first odd numbers is:\", diff)\n                return\n\n    # If the loop completes without finding the difference, return None\n    print(\"The list does not contain an even and odd number.\")\n    return"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_found = False\n    odd_found = False\n    even_diff = 0\n    odd_diff = 0\n    for num in list1:\n        if num % 2 == 0:\n            if even_found:\n                break\n            even_found = True\n            even_diff = num\n        elif num % 2!= 0:\n            if odd_found:\n                break\n            odd_found = True\n            odd_diff = num\n    return even_diff - odd_diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = odd_num = None\n    for num in list1:\n        if num % 2 == 0:\n            if even_num is None:\n                even_num = num\n            else:\n                even_num = even_num - num\n        else:\n            if odd_num is None:\n                odd_num = num\n            else:\n                odd_num = odd_num - num\n    return even_num - odd_num"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # Initialize variables for even and odd numbers\n    even = None\n    odd = None\n    # Iterate through the list and find the first even and first odd numbers\n    for num in list1:\n        if num % 2 == 0:\n            if even is None:\n                even = num\n            else:\n                even = None\n        else:\n            if odd is None:\n                odd = num\n            else:\n                odd = None\n        # If both even and odd numbers have been found, break out of the loop\n        if even is not None and odd is not None:\n            break\n    # Return the difference of even and odd numbers\n    return abs(even - odd)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n\n    # Check if the list has at least two elements\n    if len(list1) < 2:\n        print(\"The list must have at least two elements.\")\n        return None\n\n    # Find the first even number\n    count = 0\n    for num in list1:\n        count += 1\n        if count % 2 == 0 and num % 2 == 0:\n            return num - list1[0]\n\n    # If no even number is found, the function should return None\n    return None"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # Find the first even number in the list\n    even_num = None\n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n            break\n    \n    # Find the first odd number in the list\n    odd_num = None\n    for num in list1:\n        if num % 2!= 0:\n            odd_num = num\n            break\n    \n    # If no even or odd numbers were found, return None\n    if even_num is None or odd_num is None:\n        return None\n    \n    # Calculate and return the difference between the even and odd numbers\n    return even_num - odd_num"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = 0\n    odd_num = 0\n    even_count = 0\n    odd_count = 0\n\n    for i in list1:\n        if i % 2 == 0:\n            even_num += i\n            even_count += 1\n        else:\n            odd_num += i\n            odd_count += 1\n\n    return abs(even_num - odd_num)\n"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    count_even = 0\n    count_odd = 0\n    for num in list1:\n        if num % 2 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n        if count_even > 0 and count_odd > 0:\n            break\n    \n    if count_even > 0 and count_odd > 0:\n        return list1[count_even] - list1[count_odd]\n    else:\n        return None"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # get the first even and first odd numbers of the list\n    even_num = list1[0]\n    odd_num = list1[1]\n    \n    # calculate the difference of the two numbers and return it\n    return abs(even_num - odd_num)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def diff_even_odd(lst):\n    '''\n    This function takes a list as input and returns the difference of the first even and first odd number of the list.\n    '''\n    even_list = [num for num in lst if num % 2 == 0]\n    odd_list = [num for num in lst if num % 2!= 0]\n    return abs(even_list[0] - odd_list[0])"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Swaps(str1, str2):\n    # Convert the two binary numbers to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # Initialize two variables to keep track of the maximum number of swaps required\n    max_swaps = 0\n    swap_count = 0\n\n    # While both numbers are not equal\n    while num1!= num2:\n        # If num1 is greater than num2, swap num1 and num2\n        if num1 > num2:\n            swap_count += 1\n            num1, num2 = num2, num1\n            max_swaps = max(max_swaps, swap_count)\n        # Otherwise, swap num2 and num1\n        else:\n            swap_count += 1\n            num1, num2 = num2, num1\n            max_swaps = max(max_swaps, swap_count)\n\n    return max_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Swaps(str1, str2):\n    # convert strings to binary\n    binary1 = bin(int(str1, 2))[2:]\n    binary2 = bin(int(str2, 2))[2:]\n\n    # make sure binary strings are of same length\n    if len(binary1) > len(binary2):\n        binary1 = binary1 + '0' * (len(binary2) - len(binary1))\n    elif len(binary1) < len(binary2):\n        binary2 = binary2 + '0' * (len(binary1) - len(binary2))\n\n    # initialize variables\n    min_swaps = 0\n    prev_swaps = 0\n    swaps = 0\n\n    # iterate through each bit of the binary strings\n    for i in range(len(binary1)):\n        if binary1[i]!= binary2[i]:\n            if binary1[i] == '1' and binary2[i] == '0':\n                min_swaps = min(min_swaps, swaps)\n                swaps = 0\n            else:\n                min_swaps = min(min_swaps, swaps)\n                prev_swaps = swaps\n                swaps = 0\n        else:\n            swaps += 1\n\n    # return minimum number of swaps required\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Swaps(str1, str2):\n    # Convert binary strings to binary numbers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # Initialize variables for keeping track of min and max swaps\n    min_swap = 0\n    max_swap = 0\n\n    # Iterate through each bit of the binary numbers\n    for i in range(32):\n        # Calculate the XOR of the current bit and both binary numbers\n        xor_result = num1 ^ num2\n\n        # If the XOR result is 0, then the current bit is 0 in both binary numbers\n        if xor_result == 0:\n            # Check if the current bit is 1 in one of the binary numbers\n            if num1 & 1 == 1:\n                # If it's 1 in the first binary number, increment the minimum swap count\n                min_swap += 1\n            else:\n                # If it's 1 in the second binary number, increment the maximum swap count\n                max_swap += 1\n        # If the XOR result is 1, then the current bit is 1 in both binary numbers\n        else:\n            # Check if the current bit is 1 in both binary numbers\n            if num1 & 1 == 1 and num2 & 1 == 1:\n                # If it's 1 in both binary numbers, increment the minimum swap count\n                min_swap += 1\n            else:\n                # If it's 1 in one of the binary numbers but not the other, increment the maximum swap count\n                max_swap += 1\n\n        # Shift the binary numbers right by one bit\n        num1 >>= 1\n        num2 >>= 1\n\n    # Return the minimum swap count\n    return min_swap"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    \"\"\"\n    # Converting the binary numbers to lists of binary digits\n    bin1 = list(str1[::-1])\n    bin2 = list(str2[::-1])\n\n    # Finding the length of the binary numbers\n    length1 = len(bin1)\n    length2 = len(bin2)\n\n    # Initializing the minimum number of swaps to infinity\n    min_swaps = float('inf')\n\n    # Looping through all possible subsets of length 1, 2,..., length2\n    for i in range(2**length2):\n        # Extracting the subset\n        subset1 = bin1[:i]\n        subset2 = bin2\n\n        # Finding the total number of swaps required\n        count = 0\n        for j in range(length1):\n            if subset1[j]!= subset2[j]:\n                count += 1\n\n        # Updating the minimum number of swaps found\n        min_swaps = min(min_swaps, count)\n\n    # Returning the minimum number of swaps required\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Swaps(str1, str2):\n    def binary_to_decimal(binary):\n        return int(binary, 2)\n\n    def decimal_to_binary(decimal):\n        binary = \"\"\n        while decimal > 0:\n            binary = str(decimal % 2) + binary\n            decimal //= 2\n        return binary\n\n    binary1 = binary_to_decimal(str1)\n    binary2 = binary_to_decimal(str2)\n\n    # Find the number of digits of each binary number\n    n1 = len(str1)\n    n2 = len(str2)\n\n    # Compare the numbers of digits\n    if n1 < n2:\n        diff = n2 - n1\n        binary1 = binary1 * diff\n    elif n2 < n1:\n        diff = n1 - n2\n        binary2 = binary2 * diff\n\n    # Convert the binary numbers to decimal and compare them\n    decimal1 = binary_to_decimal(decimal_to_binary(binary1))\n    decimal2 = binary_to_decimal(decimal_to_binary(binary2))\n\n    swaps = 0\n    while decimal1!= decimal2:\n        if decimal1 < decimal2:\n            decimal1 += 1\n            swaps += 1\n        else:\n            decimal2 += 1\n            swaps += 1\n\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    This function takes two binary numbers represented as strings as input and returns the minimum number of swaps required to convert the first number to the second number.\n    \"\"\"\n    # Convert the binary numbers to integers\n    int1 = int(str1, 2)\n    int2 = int(str2, 2)\n\n    # Initialize two variables to keep track of the number of swaps required to convert int1 to int2\n    swaps1 = 0\n    swaps2 = 0\n\n    # Iterate over each bit in int1 and int2 and swap the bits if they are different\n    for i in range(32):\n        if int1 & (1 << i)!= int2 & (1 << i):\n            if int1 & (1 << i):\n                swaps1 += 1\n            else:\n                swaps2 += 1\n\n    # Return the minimum number of swaps required to convert int1 to int2\n    return min(swaps1, swaps2)"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Swaps(str1,str2):\n    #converting binary strings to binary numbers\n    binary1 = int(str1, 2)\n    binary2 = int(str2, 2)\n    \n    #initializing counter for swaps\n    count = 0\n    \n    #checking if binary numbers have same number of digits\n    if len(str1)!= len(str2):\n        return -1\n    \n    #checking if binary numbers are same\n    if binary1 == binary2:\n        return count\n    \n    #checking if binary numbers are equal\n    if binary1 == 0 and binary2 == 0:\n        return count\n    \n    #finding the number of swaps required to convert binary numbers\n    while binary1!= binary2:\n        if binary1 > binary2:\n            #swapping the last digit of binary1 with the first digit of binary2\n            binary1 = binary1 ^ (binary1 & binary2)\n            #incrementing count\n            count += 1\n            #replacing the last digit of binary2 with the first digit of binary1\n            binary2 = binary2 ^ (binary2 & binary1)\n            #incrementing count\n            count += 1\n        else:\n            #swapping the last digit of binary2 with the first digit of binary1\n            binary2 = binary2 ^ (binary2 & binary1)\n            #incrementing count\n            count += 1\n            #replacing the last digit of binary1 with the first digit of binary2\n            binary1 = binary1 ^ (binary1 & binary2)\n            #incrementing count\n            count += 1\n    \n    return count"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    \n    # Convert the binary strings to lists\n    list1 = [int(i) for i in str1]\n    list2 = [int(i) for i in str2]\n\n    # Initialize the count of swaps\n    count = 0\n\n    # Compare the two binary strings\n    for i in range(len(list1)):\n        if list1[i]!= list2[i]:\n            # If the bits are different, swap the values\n            list1[i], list2[i] = list2[i], list1[i]\n            # Increment the count of swaps\n            count += 1\n\n    # Return the count of swaps\n    return count"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    This function will take two binary numbers represented as strings and return the minimum number of swaps required to convert one binary number to another.\n    \"\"\"\n    \n    # convert the two binary strings to binary lists\n    bin1 = [int(bit) for bit in str1]\n    bin2 = [int(bit) for bit in str2]\n    \n    # create a dictionary to store the minimum number of swaps required to convert each binary number to another\n    min_swaps = {}\n    \n    # iterate through each possible binary string\n    for i in range(2**len(bin1)):\n        # convert the current binary string to its corresponding binary number\n        current_bin = bin(i)[2:].zfill(len(bin1))\n        \n        # check if the current binary number is equal to the binary number represented by the binary list\n        if current_bin == bin1:\n            # add 0 swaps to the dictionary if the binary number is already represented by the binary list\n            if current_bin in min_swaps:\n                min_swaps[current_bin] = 0\n            # add 1 swaps to the dictionary if the current binary number is not already represented by the binary list\n            else:\n                min_swaps[current_bin] = 1\n                \n    # iterate through each binary number in the binary list\n    for i in range(len(bin2)):\n        # check if the current binary number is already in the dictionary\n        if bin2[i] in min_swaps:\n            # add the minimum number of swaps required to convert the current binary number to the binary number represented by the binary list\n            min_swaps[bin2[i]] += 1\n            \n    # return the minimum number of swaps required to convert each binary number in the binary list\n    return min(min_swaps.values())"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Swaps(str1, str2):\n    m, n = len(str1), len(str2)\n    dp = [[float('inf')]*(n+1) for _ in range(m+1)] # Initialize the 2D table\n\n    # Base case\n    for i in range(1, m+1):\n        dp[i][0] = i\n    for j in range(1, n+1):\n        dp[0][j] = j\n\n    # Fill the table\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            if str1[i-1] == str2[j-1]:\n                dp[i][j] = dp[i-1][j-1]\n            else:\n                dp[i][j] = 1 + min(dp[i-1][j], dp[i][j-1])\n\n    return dp[m][n]"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for i in range(len(tuple_list)):\n        size += sys.getsizeof(tuple_list[i])\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    \"\"\"\n    Write a function to find the size in bytes of the given tuple.\n    \"\"\"\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for element in tuple_list:\n        size += sys.getsizeof(element)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for i in tuple_list:\n        size += sys.getsizeof(i)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for tuple in tuple_list:\n        total_size += sys.getsizeof(tuple)\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    This function takes a list of tuples as input and returns the size in bytes of the largest tuple in the list.\n    '''\n    size = 0\n    for tuple_obj in tuple_list:\n        size += sys.getsizeof(tuple_obj)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for i in range(len(tuple_list)):\n        total_size += sys.getsizeof(tuple_list[i])\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # Initialize a variable to store the size of the tuple in bytes\n    size = 0\n    # Loop through each element in the tuple\n    for element in tuple_list:\n        # Add the size of the element to the size variable\n        size += sys.getsizeof(element)\n    # Return the size of the tuple in bytes\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    tuple_size = 0\n    for tup in tuple_list:\n        for item in tup:\n            tuple_size += sys.getsizeof(item)\n    return tuple_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # Calculate the size in bytes of the tuple\n    tuple_size = 0\n    for item in tuple_list:\n        tuple_size += sys.getsizeof(item)\n    return tuple_size"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            if k == 1:\n                return arr1[i]\n            else:\n                i += 1\n                k -= 1\n        elif arr1[i] > arr2[j]:\n            if k == 1:\n                return arr2[j]\n            else:\n                j += 1\n                k -= 1\n        else:\n            if k == 1:\n                return arr1[i]\n            else:\n                i += 1\n                j += 1\n                k -= 1\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i, j = 0, 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n            break\n    if k <= i:\n        return find_kth(arr1, arr2[j:], k-i)\n    else:\n        return find_kth(arr1[i:], arr2, k-i)"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    i = 0\n    j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n            i += 1\n            j += 1\n\n    if i == len(arr1):\n        return arr2[j]\n    elif j == len(arr2):\n        return arr1[i]\n    else:\n        raise ValueError(\"k is greater than the total number of elements in the arrays\")"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n\n    # Find the total number of elements in both arrays\n    n1 = len(arr1)\n    n2 = len(arr2)\n\n    # Initialize the result variable with the first element of the first array\n    result = arr1[0]\n\n    # Compare the elements of both arrays\n    i = 0\n    j = 0\n\n    while i < n1 and j < n2:\n        if arr1[i] < arr2[j]:\n            if k == 1:\n                return result\n            else:\n                k -= 1\n                i += 1\n        elif arr1[i] > arr2[j]:\n            if k == 1:\n                return result\n            else:\n                k -= 1\n                j += 1\n        else:\n            if k == 1:\n                return result\n            else:\n                k -= 1\n                i += 1\n                j += 1\n\n    # If the remaining elements in the first array are less than k,\n    # return the element at index i of the first array\n    if i == n1:\n        return arr1[i - k]\n\n    # If the remaining elements in the second array are less than k,\n    # return the element at index j of the second array\n    return arr2[j - k]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    This function finds the kth element from the two sorted arrays.\n\n    Parameters:\n    arr1 (list): The first sorted array.\n    arr2 (list): The second sorted array.\n    k (int): The kth element to find.\n\n    Returns:\n    int: The kth element from the two sorted arrays.\n    '''\n\n    # Merge the two arrays using the merge sort algorithm\n    arr1, arr2 = merge(arr1, arr2)\n\n    # Return the kth element\n    return arr1[k - 1]\n\ndef merge(arr1, arr2):\n    '''\n    This function merges two sorted arrays into a single sorted array.\n\n    Parameters:\n    arr1 (list): The first sorted array.\n    arr2 (list): The second sorted array.\n\n    Returns:\n    list: The merged sorted array.\n    '''\n\n    # Initialize variables to keep track of the index of the current element\n    i, j = 0, 0\n\n    # Initialize an empty list to store the merged sorted array\n    merged = []\n\n    # Loop through both arrays until one is empty\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] <= arr2[j]:\n            merged.append(arr1[i])\n            i += 1\n        else:\n            merged.append(arr2[j])\n            j += 1\n\n    # Add any remaining elements from the first array\n    merged += arr1[i:]\n\n    # Add any remaining elements from the second array\n    merged += arr2[j:]\n\n    # Return the merged sorted array\n    return merged"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    This function takes three parameters: arr1, arr2 and k.\n    arr1 and arr2 are two sorted arrays and k is the index of the element to be found.\n    This function returns the kth element of arr1.\n    \"\"\"\n    i, j = 0, len(arr2) - 1\n    while i <= j:\n        mid = (i + j) // 2\n        if arr1[mid] == arr2[mid]:\n            k = k - mid - 1\n            if k == 0:\n                return arr1[mid]\n            elif k > 0:\n                j = mid - 1\n            else:\n                i = mid + 1\n        elif arr1[mid] > arr2[mid]:\n            i = mid + 1\n        else:\n            j = mid - 1\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    n = len(arr1) + len(arr2)\n    while i < n and j < n:\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            k -= 1\n            if k == 0:\n                return arr1[i]\n            i += 1\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Find the kth smallest element in the given two sorted arrays.\n\n    Parameters:\n    arr1 (list): First sorted array.\n    arr2 (list): Second sorted array.\n    k (int): The index of the element to find (1-indexed).\n\n    Returns:\n    The kth smallest element from the given two sorted arrays.\n    \"\"\"\n\n    # Get the length of the arrays\n    n1 = len(arr1)\n    n2 = len(arr2)\n\n    # Initialize the pointers for arr1 and arr2\n    i, j = 0, 0\n\n    # Initialize the result\n    result = None\n\n    # Loop until we find the kth smallest element\n    while i < n1 and j < n2:\n        if arr1[i] < arr2[j]:\n            # Update the result and move the pointer for arr1\n            result = arr1[i]\n            i += 1\n        else:\n            # Update the result and move the pointer for arr2\n            result = arr2[j]\n            j += 1\n\n    # Check if we found the kth smallest element\n    if result is None:\n        raise ValueError(\"k is greater than the total number of elements in the arrays\")\n\n    # Check if k is 1-indexed\n    if k == 1:\n        return result\n    else:\n        # If k is not 1-indexed, find the kth smallest element from the result array\n        result_arr = sorted(result)\n        return result_arr[k-1]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    i, j = 0, 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            if k == 1:\n                return arr1[i]\n            elif k == 2:\n                return arr2[j]\n            k -= 2\n            i += 1\n        else:\n            if k == 1:\n                return arr2[j]\n            elif k == 2:\n                return arr1[i]\n            k -= 2\n            j += 1\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    This function takes three parameters: arr1, arr2, and k.\n\n    arr1 and arr2 are sorted arrays.\n\n    k is the index of the element that needs to be found in arr1 and arr2.\n\n    The function returns the kth smallest element from arr1 and arr2.\n    \"\"\"\n\n    # Find the length of both arrays\n    n1 = len(arr1)\n    n2 = len(arr2)\n\n    # If both arrays are empty, return None\n    if n1 == 0 and n2 == 0:\n        return None\n\n    # If both arrays have only one element, return the element from the other array\n    if n1 == 1 and n2 == 1:\n        if arr1[0] > arr2[0]:\n            return arr2[0]\n        else:\n            return arr1[0]\n\n    # If one array has only one element, return the element from the other array\n    if n1 == 1 or n2 == 1:\n        if n1 == 1:\n            return arr1[0]\n        else:\n            return arr2[0]\n\n    # If both arrays have more than one element, divide the arrays into two halves\n    mid1 = n1 // 2\n    mid2 = n2 // 2\n\n    # Find the kth element from the first half of arr1 and arr2\n    if arr1[mid1] < arr2[mid2]:\n        return find_kth(arr1[:mid1], arr2, k)\n    else:\n        return find_kth(arr1, arr2[:mid2], k)\n\n    # Once we have found the kth element from one of the halves, find it in the other half of the array\n    # This is because the kth element is already in the first half of one of the arrays\n    if k < mid1 + mid2:\n        return find_kth(arr1, arr2[mid2:], k)\n    elif k < mid1 + mid2 + 1:\n        return arr2[mid2]\n    else:\n        return None"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_armstrong(num):\n    if num < 10:\n        return False\n    else:\n        s = 0\n        temp = num\n        while temp > 0:\n            digit = temp % 10\n            s += digit ** 3\n            temp //= 10\n        return num == s\n\ndef armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    return is_armstrong(number)"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_armstrong(number):\n    # Convert the number to a string and remove any non-numeric characters\n    num_str = ''.join(filter(str.isdigit, str(number)))\n    \n    # Calculate the sum of the cubes of each digit in the number\n    cube_sum = sum(int(digit)**3 for digit in num_str)\n    \n    # Return True if the number is equal to the cube of its digits sum, otherwise False\n    return num_str == str(cube_sum)\n\ndef armstrong_number(number):\n    # Check if the number is an armstrong number\n    return is_armstrong(number)"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # converting the number to a string\n    number_str = str(number)\n    # initializing the sum of the digits of the number\n    sum_digits = 0\n    # converting the number to a list of digits\n    digits = list(map(int, number_str))\n    # calculating the sum of the digits of the number\n    for digit in digits:\n        sum_digits += digit**len(digits)\n    # comparing the sum of the digits of the number with the original number\n    if sum_digits == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    This function takes a number as input and returns True if it is an armstrong number, otherwise it returns False.\n    An Armstrong number is a number that is equal to the sum of its own digits each raised to the power of the number of digits.\n    \"\"\"\n    num_digits = len(str(number))\n    sum_of_digits = 0\n    temp = number\n    while temp > 0:\n        digit = temp % 10\n        sum_of_digits += digit ** num_digits\n        temp //= 10\n    return number == sum_of_digits"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Convert the given number to a string\n    num_str = str(number)\n    # Initialize the sum variable\n    sum = 0\n    # Loop through each character in the number string and add its power to the sum\n    for i in num_str:\n        sum += int(i) ** len(num_str)\n    # Return True if the sum of the number is equal to the original number, else False\n    return sum == number"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_armstrong_number(n):\n    \"\"\"\n    Returns True if the given number is an Armstrong number and False otherwise.\n    \"\"\"\n    # Convert the number to a string and find its length\n    num_str = str(n)\n    length = len(num_str)\n\n    # Initialize the sum and the digit of each digit to 0\n    sum_of_digits = 0\n    digit_of_each_digit = 0\n\n    # Loop through each digit in the number\n    for digit in num_str:\n        # Convert the digit to an integer and add it to the sum\n        digit_int = int(digit)\n        sum_of_digits += digit_int ** length\n\n        # Calculate the digit of each digit\n        digit_of_each_digit += digit ** (length - 1)\n\n    # Compare the sum of digits with the original number\n    return sum_of_digits == n"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_armstrong_number(n):\n    '''\n    A function to check whether a given number is an Armstrong number or not.\n    '''\n    # Check if the number is less than or equal to 10\n    if n <= 10:\n        return False\n\n    # Calculate the sum of the cubes of each digit in the number\n    num_str = str(n)\n    sum_cubes = 0\n    for digit in num_str:\n        cube = int(digit) ** 3\n        sum_cubes += cube\n\n    # Check if the sum of cubes is equal to the original number\n    return sum_cubes == n"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    # check if the number is greater than 9\n    if number > 9:\n        return False\n    \n    # convert the number to a list of digits\n    digits = [int(digit) for digit in str(number)]\n    \n    # calculate the sum of the digits raised to the power of the length of the list of digits\n    sum_of_squares = sum(digit ** len(digits) for digit in digits)\n    \n    # compare the original number with the sum of squares\n    if sum_of_squares == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_armstrong(number):\n    \"\"\"\n    This function takes a number as input and returns True if the number is an Armstrong number or False otherwise.\n    \"\"\"\n    # Convert the number to a string\n    number_str = str(number)\n\n    # Calculate the sum of the cubes of the digits of the number\n    sum_of_cubes = 0\n    for digit in number_str:\n        digit = int(digit)\n        sum_of_cubes += digit ** 3\n\n    # Check if the sum of the cubes of the digits is equal to the original number\n    return sum_of_cubes == number"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Convert the number to a string\n    number = str(number)\n    # Initialize a counter variable\n    count = 0\n    # Loop through each digit of the number\n    for digit in number:\n        # Multiply the digit by itself and add to the counter\n        count += int(digit) ** len(number)\n    # Check if the sum of the digits raised to the power of the length of the number is equal to the original number\n    if count == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(1, number+1):\n        sum += i\n        count += 1\n    average = sum / count\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    count = 0\n    for i in range(1, number+1):\n        total += i\n        count += 1\n    average = total / count\n    print(f\"The sum of the first {number} natural numbers is: {total}\")\n    print(f\"The average of the first {number} natural numbers is: {average}\")\n"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(1, number+1):\n        sum += i\n        count += 1\n    average = sum / count\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(number):\n        sum += i\n        count += 1\n    average = sum / count\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_average(n):\n    \"\"\"\n    This function takes an integer as an argument n and returns a tuple containing the sum and average of first n natural numbers.\n    \"\"\"\n    total = 0\n    count = 0\n    for i in range(1, n+1):\n        total += i\n        count += 1\n    average = total / count\n    return (total, average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_average(n):\n    \"\"\"\n    This function finds the sum and average of first n natural numbers.\n    \"\"\"\n    # initialize sum and count\n    total = 0\n    count = 0\n    \n    # iterate n times\n    for i in range(1, n+1):\n        # add the current number to the total\n        total += i\n        \n        # increment the count\n        count += 1\n    \n    # calculate the average\n    average = total / count\n    \n    # return the sum and average\n    return total, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number + 1):\n        sum += i\n    average = sum / number\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n\n    # initialize variables\n    sum_numbers = 0\n    count_numbers = 0\n    sum_average = 0\n\n    # loop through numbers and calculate sum and average\n    for i in range(1, number+1):\n        sum_numbers += i\n        count_numbers += 1\n        sum_average += i\n\n    # calculate average\n    average = sum_average/count_numbers\n\n    # return results\n    return sum_numbers, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_average(n):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum_of_numbers = 0\n    count = 0\n    for i in range(1, n+1):\n        sum_of_numbers += i\n        count += 1\n    average = sum_of_numbers/count\n    return sum_of_numbers, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(1, number+1):\n        sum += i\n        count += 1\n    average = sum / count\n    return sum, average"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        print(\"The number is even.\")\n    else:\n        print(\"The number is odd.\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        print(\"The given number\", n, \"is even\")\n    else:\n        print(\"The given number\", n, \"is odd\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Even(n):\n    \"\"\"\n    This function takes an integer as input and returns True if it is even, False otherwise.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            return char\n        else:\n            char_count[char] = True"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n\n    # create a dictionary to store the frequency of each character\n    freq = {}\n\n    # loop through each character in the string\n    for char in str1:\n        # if the character is already in the dictionary, increment its frequency\n        if char in freq:\n            freq[char] += 1\n        # if the character is not in the dictionary, add it with frequency of 1\n        else:\n            freq[char] = 1\n\n    # find the first repeated character by looping through the frequency dictionary\n    for char, freq_count in freq.items():\n        if freq_count > 1:\n            return char\n\n    # if no character is repeated, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Create an empty dictionary to store the count of each character in the string\n    char_count = {}\n\n    # Iterate over each character in the string\n    for char in str1:\n        # If the character is already in the dictionary, increment its count\n        if char in char_count:\n            char_count[char] += 1\n        # If the character is not in the dictionary, add it with a count of 1\n        else:\n            char_count[char] = 1\n\n    # Iterate over each character in the string again and find the first repeated character\n    for char in str1:\n        if char_count[char] == 2:\n            return char\n\n    # If no repeated character is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Create a dictionary to store the frequency of each character\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n            \n    # Find the first repeated character\n    for char in freq:\n        if freq[char] > 1:\n            return char\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n\n    # Initialize an empty dictionary to store the character count\n    char_count = {}\n\n    # Loop through each character in the string\n    for char in str1:\n        # If the character is already in the dictionary, increment its count\n        if char in char_count:\n            char_count[char] += 1\n        # If the character is not in the dictionary, add it and set its count to 1\n        else:\n            char_count[char] = 1\n\n    # Find the first repeated character\n    for char in char_count:\n        if char_count[char] > 1:\n            return char\n\n    # If no repeated character is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    This function takes a string as input and returns the first repeated character. If no repeated character is found, it returns None.\n    '''\n    # create a dictionary to store the count of each character in the string\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n            \n    # loop through the dictionary and find the first repeated character\n    for char, count in char_count.items():\n        if count > 1:\n            return char\n            \n    # if no repeated character is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Create a dictionary to store the count of each character in the string\n    char_count = {}\n    \n    # Loop through each character in the string and increment its count in the dictionary\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # Loop through each character in the string and check if its count is greater than 1\n    for char in str1:\n        if char_count[char] > 1:\n            return char\n    \n    # If no repeated character is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # create a dictionary to store the frequency of each character in the string\n    freq_dict = {}\n\n    # loop through each character in the string and update the frequency dictionary\n    for char in str1:\n        if char in freq_dict:\n            freq_dict[char] += 1\n        else:\n            freq_dict[char] = 1\n\n    # find the first repeated character\n    for char in freq_dict:\n        if freq_dict[char] > 1:\n            return char\n\n    # if no repeated character is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    This function takes a string as input and returns the first repeated character.\n    \"\"\"\n    char_list = []\n    for char in str1:\n        if char in char_list:\n            return char\n        else:\n            char_list.append(char)\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    # find the first repeated character\n    for char in str1:\n        if freq[char] > 1:\n            return char\n    \n    # if no repeated character is found, return None\n    return None"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    lucid = []\n    for i in range(1, n+1):\n        if sum([int(j) for j in str(i)]) % 2 == 0:\n            lucid.append(i)\n    return lucid"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    lucid_numbers = []\n    for i in range(1, n+1):\n        if i == 1:\n            lucid_numbers.append(1)\n        elif i == 2:\n            lucid_numbers.append(2)\n        else:\n            temp = i\n            for j in range(2, i):\n                if i % j == 0:\n                    temp += j\n            lucid_numbers.append(temp)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid = []\n    for i in range(1, n+1):\n        if i == 1 or i == 2 or i == 3:\n            lucid.append(i)\n        else:\n            for j in range(2, int(i**0.5)+1):\n                if i % j == 0:\n                    break\n            else:\n                lucid.append(i)\n    return lucid"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid = []\n    for i in range(1, n+1):\n        if sum(int(digit) ** i for digit in str(i)) % 2 == 0:\n            lucid.append(i)\n    return lucid"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    i = 2\n    while True:\n        if is_lucid(i):\n            lucid_numbers.append(i)\n        if i >= n:\n            break\n        i += 1\n    return lucid_numbers\n\ndef is_lucid(n):\n    '''\n    Write a helper function to check if a given integer is a lucid number.\n    '''\n    digits = [int(d) for d in str(n)]\n    digits_sum = sum(digits)\n    return digits_sum == n"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n\n    lucid = [2]\n    i = 3\n    while i <= n:\n        lucid.append(i)\n        i += 2\n\n    return lucid"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_list = []\n    for i in range(1, n+1):\n        if i == len(str(i))**2:\n            lucid_list.append(i)\n    return lucid_list"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    num = 1\n    while num <= n:\n        if is_lucid(num):\n            lucid_numbers.append(num)\n        num += 1\n    return lucid_numbers\n\ndef is_lucid(num):\n    '''\n    Write a function to check if a number is lucid or not.\n    '''\n    return num % 2 == 0 or num == 2 or num % 3 == 0 or num % 5 == 0"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n\n    lucid_numbers = []\n    for i in range(1, n+1):\n        if is_lucid(i):\n            lucid_numbers.append(i)\n    return lucid_numbers\n\ndef is_lucid(n):\n    '''\n    Check if a given number is a lucid number or not.\n    '''\n\n    if n < 10:\n        return True\n\n    return False\n"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(1, n+1):\n        if is_lucid(i):\n            lucid_numbers.append(i)\n    return lucid_numbers\n\n\ndef is_lucid(num):\n    '''\n    Check if a number is a lucid number or not.\n    '''\n    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Split the string into words\n    words = s.split()\n    # Reverse the order of words\n    words.reverse()\n    # Join the words back into a string\n    result = \" \".join(words)\n    return result"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split() # split the string into words\n    words.reverse() # reverse the order of the words\n    reversed_words =''.join(words) # join the words back into a string\n    return reversed_words"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Reverse words in a given string.\n    \"\"\"\n    # Split the string into a list of words\n    words = s.split()\n    # Reverse each word in the list\n    for i in range(len(words)):\n        words[i] = words[i][::-1]\n    # Join the words back together into a string with spaces\n    s = \" \".join(words)\n    return s"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    words.reverse()\n    return''.join(words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Split the string into a list of words\n    words = s.split()\n    # Reverse the list of words\n    words.reverse()\n    # Join the list of words into a string with spaces\n    reversed_string =''.join(words)\n    return reversed_string"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # split the string into words\n    words = s.split()\n    # reverse the order of the words\n    words.reverse()\n    # join the words back into a string\n    return''.join(words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = []\n    for i in range(len(words)-1, -1, -1):\n        reversed_words.append(words[i])\n    reversed_string =''.join(reversed_words)\n    return reversed_string"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    words = s.split()  # split the string into words\n    reversed_words = []\n    for word in words:  # reverse each word\n        reversed_words.append(word[::-1])  # reverse the word using slicing\n    reversed_string = \" \".join(reversed_words)  # join the reversed words back into a string\n    return reversed_string"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    words = s.split()\n    words.reverse()\n    return \" \".join(words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    words = s.split()  # split the string into a list of words\n    reversed_words = words[::-1]  # reverse the order of the words\n    return''.join(reversed_words)  # join the reversed words back into a string"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def prime_num(num):\n    \"\"\"\n    Write a function to check if the given integer is a prime number.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if is_prime(num):\n        return True\n    else:\n        return False"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    # Check if the number is less than 2\n    if num < 2:\n        return False\n    \n    # Check if the number is equal to 2\n    elif num == 2:\n        return True\n    \n    # Check if the number is divisible by 2\n    elif num % 2 == 0:\n        return False\n    \n    # Check for odd numbers greater than 2\n    else:\n        for i in range(3, int(num**0.5)+1, 2):\n            if num % i == 0:\n                return False\n        return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_prime(num):\n    \"\"\"\n    This function checks if a given number is prime or not.\n    \"\"\"\n    if num <= 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    # Check if the number is less than 2\n    if num < 2:\n        return False\n\n    # Check if the number is equal to 2 or 3\n    if num == 2 or num == 3:\n        return True\n\n    # Check if the number is divisible by any number between 2 and the square root of the number\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_prime(num):\n    '''\n    A simple function to check if a given number is prime or not.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_num(num):\n    '''\n    A function to check if the given integer is a prime number.\n    '''\n    return is_prime(num)"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def prime_num(num):\n    \"\"\"\n    Write a function to check if the given integer is a prime number.\n    \"\"\"\n    if num < 2:\n        return False\n    elif num == 2:\n        return True\n    else:\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n\n    # Check if the number is less than 2\n    if num < 2:\n        return False\n\n    # Check if the number is equal to 2\n    if num == 2:\n        return True\n\n    # Check if the number is divisible by 2\n    if num % 2 == 0:\n        return False\n\n    # Check if the number is a prime number by iterating over all numbers between 3 and the square root of the number\n    for i in range(3, int(num ** 0.5) + 1, 2):\n        if num % i == 0:\n            return False\n\n    # If none of the above conditions are met, the number is a prime number\n    return True"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\n"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    This function will convert a degree value to its corresponding radian value.\n    '''\n    radian = degree * math.pi / 180\n    return radian"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi/180)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * math.pi / 180\n    return radian"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.pi * degree / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.pi * degree / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi/180)"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # find all occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n    \n    # if no matches were found, return an empty list\n    if not matches:\n        return []\n    \n    # find the start and end indices of the first match\n    start = text.find(matches[0])\n    end = start + len(matches[0])\n    \n    # create a list of tuples containing the matching subtring, start index, and end index\n    result = [(match, start, end)]\n    \n    # iterate over the remaining matches and update the result list with their start and end indices\n    for match in matches[1:]:\n        start = text.find(match, end)\n        end = start + len(match)\n        result.append((match, start, end))\n    \n    return result"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    \"\"\"\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    \"\"\"\n    match = re.search(pattern, text)\n    if match:\n        return match.group(0), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        # Returns a list of tuples with (substring, start index, end index)\n        return [(match, text.find(match), text.find(match)+len(match)-1) for match in matches]\n    else:\n        return None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0][0], matches[0].start(), matches[0].end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    \"\"\"\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    \"\"\"\n    matches = re.finditer(pattern, text)\n    if matches:\n        for match in matches:\n            return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    matches = re.findall(pattern, text)\n    for match in matches:\n        start_index = text.find(match)\n        end_index = start_index + len(match)\n        print(match, start_index, end_index)\n    return matches"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    if matches:\n        for match in matches:\n            return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0], 0, len(matches[0])\n    else:\n        return None, None, None"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n\n    # Calculate the number of digits in n\n    num_digits = len(str(n))\n\n    # Initialize the count of 1's in the bell number\n    count = 0\n\n    # Loop through each digit in the number\n    for digit in str(n):\n\n        # If the digit is even, add 1 to the count\n        if int(digit) % 2 == 0:\n            count += 1\n\n        # If the count is equal to the number of digits, return the bell number\n        if count == num_digits:\n            return int(digit)\n\n        # If the count is greater than the number of digits, increment the digit by 1\n        elif count > num_digits:\n            digit = int(digit) + 1\n            digit_str = str(digit)\n            num_digits = len(digit_str)\n            count = 0\n\n    # If the loop completes without finding the nth bell number, return -1\n    return -1"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return (2*n-1) * bell_Number(n-1)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_Number(n):\n    \"\"\"\n    Write a python function to find nth bell number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return (2**n - 1) // (n - 1)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_Number(n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    return n*(3**n-1) // (2*n+1)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_Number(n):\n    '''\n    This function takes an integer n as input and returns the nth Bell number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 1: \n        return 1\n    else: \n        return n*bell_Number(n-1) "
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_Number(n): \n    '''\n    This function finds the nth Bell number using the formula for nth Fibonacci number.\n\n    Formula:\n        B(n) = (phi^n - (1-phi)^n) / sqrt(5)\n\n    where phi = (1 + sqrt(5)) / 2\n    '''\n    \n    phi = (1 + 5**0.5) / 2\n    return round(((phi**n - (1-phi)**n) / 5**0.5))"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = L\n    for i in range(len(list1)):\n        if k == 1:\n            list1.pop(i)\n            k = 0\n        else:\n            k -= 1\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = len(list1) - L\n    return list1[:k] + list1[k+1:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L-1] + list1[L:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # Create a new list with the same elements as the input list\n    new_list = list1.copy()\n    # Remove the k'th element from the new list\n    new_list.pop(L-1)\n    # Return the new list\n    return new_list"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list2 = []\n    for i in range(L):\n        list2.append(list1.pop(0))\n    return list2"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # Initialize an empty list to store the new list\n    new_list = []\n    # Check if the length of the list is greater than L\n    if len(list1) > L:\n        # Initialize a variable to keep track of the index of the element to be removed\n        k = 0\n        # Loop through the list starting from the element after the k'th element\n        for i in range(L, len(list1)):\n            # Add the current element to the new list\n            new_list.append(list1[i])\n            # Increment the k variable\n            k += 1\n    # If the length of the list is less than or equal to L, simply return the original list\n    else:\n        return list1\n    # Return the new list without the k'th element\n    return new_list"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    This function takes a list and returns a list with the same elements, but the k'th element removed.\n    \"\"\"\n    # initialize the kth index\n    kth_index = L-1\n    # initialize a counter to keep track of the number of elements in the list\n    count = 0\n    # loop through the list and increment the counter\n    for i in range(len(list1)):\n        count += 1\n        # if the counter is equal to L, the kth element is at the current index\n        if count == L:\n            break\n        # increment the kth index by 1\n        kth_index += 1\n    # remove the kth element from the list and return it\n    return list1[:kth_index]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = L\n    for i in range(len(list1)-1, -1, -1):\n        if i == L-1:\n            kth_element = list1[i]\n            break\n    list1.remove(kth_element)\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_kth_element(lst, k, index=0):\n    if index == len(lst):\n        return []\n    \n    if index == k:\n        return lst[:index] + lst[index+1:]\n    \n    return lst[:index] + remove_kth_element(lst, k, index+1)"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    Remove the kth element from the list.\n\n    Parameters:\n    -----------\n    list1 : list\n        List to remove the kth element from.\n    L : int\n        The index of the kth element to remove.\n\n    Returns:\n    --------\n    list\n        The list with the kth element removed.\n    \"\"\"\n    return list1[:L] + list1[L+1:]"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # initialize a variable to store the max value of the nth column\n    max_val = None\n    \n    # loop through each row of the matrix\n    for row in test_list:\n        # check if the nth column value is greater than the current max value\n        if row[N-1] > max_val:\n            # if it is, update the max value\n            max_val = row[N-1]\n    \n    # return the max value of the nth column\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Initialize a variable to store the max value\n    max_val = 0\n    \n    # Iterate over each row in the matrix\n    for row in test_list:\n        # Check if the index N is within the range of the row\n        if N >= 0 and N < len(row):\n            # If the value at index N is greater than the max value, update the max value\n            if row[N] > max_val:\n                max_val = row[N]\n    \n    # Return the max value\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Initialize the maximum value to be negative infinity\n    max_value = float('-inf')\n    # Loop through each row of the matrix\n    for row in test_list:\n        # Get the value of then'th column of the row\n        value = row[N-1]\n        # Update the maximum value if the new value is greater\n        if value > max_value:\n            max_value = value\n    # Return the maximum value\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n\n    # Check if input is valid\n    if not isinstance(test_list, list):\n        raise TypeError('Input must be a list')\n    if len(test_list) == 0:\n        raise ValueError('Input list cannot be empty')\n    if not all(isinstance(row, list) for row in test_list):\n        raise TypeError('Input list must contain only lists')\n\n    # Get the length of the first row\n    first_row_len = len(test_list[0])\n\n    # Check if N is within the range of the first row length\n    if N < 1 or N > first_row_len:\n        raise ValueError('N must be between 1 and the length of the first row')\n\n    # Initialize the max value\n    max_val = float('-inf')\n\n    # Iterate over each row in the list\n    for row in test_list:\n        # Get the nth column\n        nth_col = row[N-1]\n\n        # Update the max value if necessary\n        if nth_col > max_val:\n            max_val = nth_col\n\n    # Return the max value\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n\n    # Find the length of the first row\n    first_row_length = len(test_list[0])\n\n    # Initialize a variable to store the max of then'th column\n    max_value = float('-inf')\n\n    # Loop through the first row and find the max of then'th column\n    for i in range(first_row_length):\n        if i == N-1:\n            max_value = max(max_value, max([row[i] for row in test_list]))\n        else:\n            max_value = max(max_value, min([row[i] for row in test_list]))\n\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Check if the list is empty or not\n    if not test_list:\n        return None\n    \n    # Check if the length of the first row is 0\n    if not test_list[0]:\n        return None\n    \n    # Find the length of the first row\n    length = len(test_list[0])\n    \n    # Check if N is less than or equal to 0 or greater than the length of the first row\n    if N <= 0 or N > length:\n        return None\n    \n    # Initialize a variable to store the max value\n    max_val = None\n    \n    # Loop through the rows of the matrix\n    for i in range(len(test_list)):\n        # Check if the length of the current row is 0\n        if not test_list[i]:\n            return None\n        \n        # Check if then'th column exists\n        if N > len(test_list[i]):\n            return None\n        \n        # Check if the current value is greater than the max value\n        if max_val is None or test_list[i][N-1] > max_val:\n            max_val = test_list[i][N-1]\n    \n    # Return the max value\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_value = 0\n    for row in test_list:\n        if row[N-1] > max_value:\n            max_value = row[N-1]\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    for i in range(len(test_list)):\n        test_list[i].sort()\n    for i in range(len(test_list)):\n        if i == N-1:\n            return test_list[i][-1]\n        elif i!= N-1:\n            test_list[i].pop()\n    return None"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n\n    # Finding the length of the longest row in the matrix\n    max_len = max([len(row) for row in test_list])\n\n    # Generating a list of lists containing the nth column of each row\n    nth_columns = []\n    for row in test_list:\n        nth_columns.append([row[i] for i in range(max_len) if i == N - 1])\n\n    # Finding the maximum value in each column of the nth column\n    max_values = []\n    for col in nth_columns:\n        max_values.append(max(col))\n\n    # Returning the maximum value in each nth column\n    return max_values"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_value = float('-inf')\n    for i in range(len(test_list)):\n        if test_list[i][N] > max_value:\n            max_value = test_list[i][N]\n    return max_value"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def merge(lst):\n    merged = []\n    for sublist in lst:\n        merged.append([sublist[0], sublist[1]])\n    return merged"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def merge(lst):\n    merged_lst = []\n    for sublist in lst:\n        merged_lst.append([sublist[0], sublist[1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def merge(lst):\n    \"\"\"\n    Merge two lists of sublists, where each sublist has two elements.\n\n    Args:\n    lst (list): a list of lists, where each sublist has two elements.\n\n    Returns:\n    list: a list of two lists, where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for i in lst:\n        result.append([i[0], i[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for sublist in lst:\n        first_element = sublist[0]\n        second_element = sublist[1]\n        merged_list.append([first_element, second_element])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def merge(lst):\n    result = []\n    for i in range(len(lst)):\n        result.append([lst[i][0], lst[i][1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def merge(lst):\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result\n"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def merge(lst):  \n    merged = []  \n    for sublist in lst:  \n        merged.append([sublist[0], sublist[1]])  \n    return merged"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    \"\"\"\n    total_sum = 0\n    for i in range(len(test_list)):\n        total_sum += test_list[i][1]\n    return total_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # initialize cumulative sum to zero\n    cum_sum = 0\n    \n    # iterate over the list of tuples\n    for tup in test_list:\n        # add the value of the tuple to the cumulative sum\n        cum_sum += tup\n    \n    # return the cumulative sum\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for i in range(len(test_list)):\n        cum_sum += test_list[i][1]\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = []\n    for i in test_list:\n        cum_sum.append(sum(i))\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # initialize the sum and cumulative sum to zero\n    sum = 0\n    cum_sum = 0\n    # loop through the list\n    for i in range(len(test_list)):\n        # check if the current element is present in the list\n        if i+1 in test_list[i]:\n            # add the value at the current index to the sum and update the cumulative sum\n            sum += test_list[i][i+1]\n            cum_sum += sum\n    # return the cumulative sum\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Initialize the cumulative sum variable to 0\n    cum_sum = 0\n    # Iterate over the tuple list\n    for tup in test_list:\n        # Add the current tuple's sum to the cumulative sum\n        cum_sum += sum(tup)\n    # Return the cumulative sum\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumsum = 0\n    for i in range(len(test_list)):\n        cumsum += test_list[i]\n    return cumsum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Initialize an empty list to store the cumulative sum\n    cum_sum = []\n\n    # Loop through the list of tuples\n    for tup in test_list:\n        # Check if the current tuple contains a value\n        if tup[1]:\n            # If the value is not already in the cumulative sum list, append it\n            if tup[1] not in cum_sum:\n                cum_sum.append(tup[1])\n\n    # Loop through the list of tuples again and calculate the cumulative sum\n    for tup in test_list:\n        # Check if the current tuple contains a value\n        if tup[1]:\n            # If the value is in the cumulative sum list, add it to the cumulative sum\n            if tup[1] in cum_sum:\n                cum_sum.remove(tup[1])\n                cum_sum.append(tup[1] + cum_sum[-1])\n\n    # Return the cumulative sum list\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # initialize the cumulative sum to 0\n    cum_sum = 0\n    \n    # iterate over the list of tuples\n    for i in test_list:\n        # add the value to the cumulative sum\n        cum_sum += i\n    \n    # return the cumulative sum\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = 0\n    for num in test_list:\n        cumulative_sum += num\n    return cumulative_sum"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for tup in nums:\n        avg = sum(tup)/len(tup)\n        result.append(avg)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for i in range(len(nums)):\n        total = 0\n        for j in range(len(nums[i])):\n            total += nums[i][j]\n        averages.append(total/len(nums[i]))\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    \"\"\"\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    \"\"\"\n    result = []\n    for num in nums:\n        if isinstance(num, tuple):\n            avg = sum(num) / len(num)\n            result.append(avg)\n        else:\n            result.append(num)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for i in range(len(nums)):\n        total = sum(nums[i])\n        averages.append(total/len(nums[i]))\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # initialize an empty list to store the average values\n    averages = []\n    # iterate over each tuple in the input tuple of tuples\n    for tup in nums:\n        # calculate the sum of the tuple elements\n        total = sum(tup)\n        # calculate the average value and add it to the list\n        averages.append(total / len(tup))\n    # return the list of average values\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averaged_list = []\n    for num_tuple in nums:\n        sum = 0\n        for num in num_tuple:\n            sum += num\n        average = sum / len(num_tuple)\n        averaged_list.append(average)\n    return averaged_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for num_tuple in nums:\n        total = sum(num_tuple)\n        average = total / len(num_tuple)\n        averages.append(average)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for i in nums:\n        sum = 0\n        for j in i:\n            sum += j\n        averages.append(sum / len(i))\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    total = 0\n    count = 0\n    for sub_tuple in nums:\n        total += sum(sub_tuple)\n        count += len(sub_tuple)\n    return [total/count]"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for num in nums:\n        avg = sum(num) / len(num)\n        avg_list.append(avg)\n    return avg_list"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # Check if the two tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must have the same length.\")\n    # Perform element wise modulo operation\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] % test_tup2[i])\n    # Return the result tuple\n    return tuple(result)"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    This function takes two tuples of the same length and performs element-wise modulo.\n    '''\n\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples must have the same length\")\n        return\n\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple(x % y for x, y in zip(test_tup1, test_tup2))"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # Check if the input tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both input tuples must have the same length.\")\n    # Perform element-wise modulo using a list comprehension and the modulo operator\n    result_tup = [(a % b) for a, b in zip(test_tup1, test_tup2)]\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] % test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    This function takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] %= test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple(x % y for x, y in zip(test_tup1, test_tup2))"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The length of the first tuple is not equal to the length of the second tuple.\")\n        return\n    else:\n        result_tup = ()\n        for i in range(len(test_tup1)):\n            result_tup += (test_tup1[i] % test_tup2[i],)\n        return result_tup"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # initial values\n    min_jumps = 0\n    last_pos = (0, 0)\n    \n    # loop through the steps\n    for i in range(steps):\n        # get the next position\n        next_pos = (last_pos[0] + 1, last_pos[1]) if last_pos[1] < d else (last_pos[0], last_pos[1] - 1)\n        \n        # check if next position is valid\n        if next_pos not in valid_positions:\n            return -1\n        \n        # update the last position\n        last_pos = next_pos\n        \n        # update the min_jumps if current position is less than d\n        if last_pos[1] < d:\n            min_jumps += 1\n            \n    # return the minimum number of jumps\n    return min_jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # List of steps required to reach (d, 0) from origin\n    steps_list = [steps]\n\n    # Keep track of the minimum number of jumps required\n    min_steps = steps\n\n    # Initialize the number of jumps required to 0\n    num_jumps = 0\n\n    # Keep track of the remaining distance to reach (0, 0)\n    remaining_distance = d\n\n    # Loop until remaining distance becomes 0\n    while remaining_distance > 0:\n        # Check if there are steps required to reach remaining_distance\n        if remaining_distance % 2 == 0:\n            # Update the minimum number of jumps required\n            min_steps = min(min_steps, remaining_distance // 2)\n        else:\n            # Update the minimum number of jumps required\n            min_steps = min(min_steps, remaining_distance)\n\n        # Update the number of jumps required\n        num_jumps += 1\n\n        # Update the remaining distance\n        remaining_distance = (remaining_distance // 2) + (remaining_distance % 2)\n\n        # Append the new steps to the list\n        steps_list.append(steps_list[-1] + min_steps)\n\n        # Reset the minimum number of jumps required\n        min_steps = steps\n\n    return num_jumps, steps_list"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Initialize variables\n    i = 0\n    j = d\n    \n    # Loop until we reach the origin\n    while j!= 0:\n        # Check if we can reach the origin from the current position\n        if i+j > steps:\n            return -1\n        # Update position variables\n        i += j\n        j = max(0, j-1)\n    \n    # Return the number of jumps\n    return i"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    count = 0\n    end_point = (d, 0)\n    \n    for i in range(steps):\n        # Moving right\n        if end_point[0] < steps - i:\n            end_point = (end_point[0] + 1, end_point[1])\n            count += 1\n        # Moving down\n        if end_point[1] < d:\n            end_point = (end_point[0], end_point[1] + 1)\n            count += 1\n    \n    return count"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d): \n    # Check if the given steps is greater than the distance\n    if steps > d: \n        return -1\n\n    # Initialize the current position and jumps count\n    position = 0\n    jumps = 0\n\n    # Loop through each step and check if the position is at (d, 0)\n    for i in range(steps): \n        position = (position[0] + d, position[1])\n        jumps += 1\n\n        # Check if we have reached the destination\n        if position[0] == 0 and position[1] == 0: \n            return jumps\n\n    # If we have not reached the destination, return -1\n    return -1"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n\n    # Create an array to store the distance of each step \n    dist = [0] * steps\n\n    # Initialize the first distance as infinity and the step count as 0\n    dist[0] = float('inf')\n    steps_taken = 0\n\n    # Iterate through the steps and calculate the distance at each step\n    for i in range(1, steps):\n        # Calculate the distance from the origin by adding the distance to reach (d, 0) from current step and the step count\n        dist[i] = (dist[i-1] + i) * d\n\n        # If the distance from the origin is less than the current distance, update the current distance and the step count\n        if dist[i] < dist[i-1]:\n            dist[i] = dist[i-1]\n            steps_taken = i\n\n    # Return the number of steps taken\n    return steps_taken"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n\n    # Function to check if the point is reachable or not\n    def is_reachable(pos, visited):\n        if pos[0] == 0 and pos[1] == 0:\n            return True\n        if pos in visited:\n            return False\n        visited.add(pos)\n        next_pos = (pos[0] + d, pos[1])\n        if 0 <= next_pos[0] < steps and 0 <= next_pos[1] < steps and not is_reachable(next_pos, visited):\n            return True\n        return False\n\n    # Check for the number of jumps required to reach (d, 0) from origin\n    visited = set()\n    if is_reachable((0, 0), visited):\n        return 1\n    return -1"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d):\n    # Get the number of steps required to reach d, 0 from origin\n    n = steps\n    # Initialize the jumps required to reach d, 0 from origin\n    jumps = 0\n    # Initialize the index of the last step reached\n    last_index = 0\n    # Loop until the last index is less than n\n    while last_index < n:\n        # If the last index is even, then add 1 to the jumps required\n        if last_index % 2 == 0:\n            jumps += 1\n        # If the last index is odd, then add 2 to the jumps required\n        else:\n            jumps += 2\n        # Update the last index\n        last_index += d\n    # Return the minimum number of jumps required\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # initialize variables\n    jumps = 0\n    prev_pos = (0, 0)\n    \n    # check if origin is at (d, 0)\n    if (0, d) == prev_pos:\n        return jumps\n    \n    # check for possible jumps\n    for i in range(1, steps+1):\n        # check if the position is within the range of (0, d)\n        if (prev_pos[0] + i, prev_pos[1]) < (0, d):\n            # update the previous position\n            prev_pos = (prev_pos[0] + i, prev_pos[1])\n            # increment the number of jumps\n            jumps += 1\n            \n        # check if the position is at (d, 0)\n        elif (prev_pos[0], prev_pos[1] - i) == (d, 0):\n            return jumps\n    \n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d):\n    \"\"\"\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    \"\"\"\n    # check if (d, 0) is reachable from origin\n    if d > steps:\n        return -1\n    \n    # initialize variables\n    dp = [steps + 1] * (steps + 1)\n    dp[0] = 0\n    \n    for i in range(1, steps + 1):\n        # if (i, 0) is reachable from origin, set dp[i] = 1\n        if i == d:\n            dp[i] = 1\n        \n        # if (i + 1, 0) is reachable from origin, then either\n        # 1. i jumps to (i + 1, 0) and then from there, i+2 jumps to (i + 2, 0)\n        # or\n        # 2. i jumps to (i + 1, 0) and then from there, i+1 jumps to (i + 2, 0)\n        dp[i] = min(dp[i] + 1, dp[i + 1] + 1) + 1\n    \n    return dp[steps]"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element wise.\n    \"\"\"\n    result = []\n    for num1, num2 in zip(nums1, nums2):\n        result.append(num1 / num2)\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # Check if the lists have the same length\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Lists must have the same length.\")\n    # Initialize a new list to store the result\n    result = []\n    # Iterate through the lists and divide each element by its corresponding element of the other list\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    # Return the new list as the result\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    if len(nums1) == len(nums2):\n        for i in range(len(nums1)):\n            result.append(nums1[i]/nums2[i])\n    else:\n        print(\"The two lists should have the same length.\")\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element wise.\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists should have the same length\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Both lists must have the same length.\")\n    else:\n        result = []\n        for i in range(len(nums1)):\n            result.append(nums1[i] / nums2[i])\n        return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element wise.\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        print(\"Both lists must have the same length\")\n        return None\n    \n    for i in range(len(nums1)):\n        nums1[i] = nums1[i] / nums2[i]\n        \n    return nums1"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]/nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n\n    if len(nums1)!= len(nums2):\n        print(\"Error: The two lists must have the same length.\")\n        return\n\n    result = []\n    for i in range(len(nums1)):\n        if nums2[i] == 0:\n            print(\"Error: Cannot divide by zero.\")\n            return\n        result.append(nums1[i] / nums2[i])\n\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # initialize an empty list to store numbers\n    num_list = []\n    # loop through each character in the string\n    for char in test_str:\n        # if the character is a number, append it to the list\n        if char.isdigit():\n            num_list.append(char)\n    # reverse the list so that the numbers are in descending order\n    num_list.reverse()\n    # join the list into a string and return it\n    return ''.join(num_list)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n    num_list.sort(reverse=True)\n    return ''.join(num_list) + test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Split the string into a list of characters\n    char_list = list(test_str)\n    \n    # Initialize a flag to keep track of whether a number has been found\n    num_found = False\n    \n    # Iterate over the characters in the list\n    for i in range(len(char_list)):\n        # If the current character is a number, move it to the end of the list and set the flag to True\n        if char_list[i].isdigit():\n            char_list[i], char_list[-1] = char_list[-1], char_list[i]\n            num_found = True\n    \n    # If no number has been found, return the original string\n    if not num_found:\n        return test_str\n    \n    # Convert the list of characters back into a string and return it\n    return ''.join(char_list)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Split the string into a list of characters and convert it to a string\n    str_list = list(test_str)\n    str_str = ''.join(str_list)\n\n    # Define a regular expression pattern to find all numbers\n    pattern = re.compile(r'\\d+')\n\n    # Find all matches of the pattern in the string\n    num_matches = pattern.findall(str_str)\n\n    # If there are no numbers, return the original string\n    if not num_matches:\n        return test_str\n\n    # Find the index of the first number in the list\n    num_index = str_list.index(num_matches[0])\n\n    # Move all the numbers to the end of the string\n    for i in range(len(num_matches)-1, -1, -1):\n        str_list.pop(num_index + i)\n        str_list.insert(num_index, num_matches[i])\n        num_index += 1\n\n    # Convert the list of characters back to a string and return it\n    return ''.join(str_list)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    new_str = ''\n\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n        else:\n            new_str += char\n\n    for num in num_list:\n        new_str += num\n\n    return new_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_str = \"\"\n    for char in test_str:\n        if char.isdigit():\n            num_str += char\n        else:\n            break\n    return num_str + num_str.replace(\"0\", \"\")"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # initialize a variable to keep track of the position of the number\n    num_pos = -1\n    # initialize a variable to keep track of the position of the letter\n    letter_pos = 0\n    # loop through the string\n    for i in range(len(test_str)):\n        # if the character is a number, swap it with the number and update the position of the number\n        if test_str[i].isdigit():\n            test_str = test_str[:num_pos] + test_str[num_pos].upper() + test_str[num_pos+1:]\n            num_pos = -1\n        # if the character is a letter, update the position of the letter\n        else:\n            num_pos += 1\n    # return the modified string\n    return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # initialize variables\n    num_count = 0\n    digit_count = 0\n    start_num = -1\n    end_num = -1\n    result = \"\"\n\n    # iterate through the string\n    for i in range(len(test_str)):\n        # check if current character is a number\n        if test_str[i].isdigit():\n            # if number count is less than 1, initialize start_num and digit_count\n            if num_count < 1:\n                start_num = i\n                digit_count = 0\n            # if number count is greater than or equal to 1, update digit_count\n            else:\n                digit_count += 1\n            # if digit count is greater than 1, update end_num\n            if digit_count > 1:\n                end_num = i\n                break\n        # if current character is not a number, increment number count and reset digit_count\n        else:\n            num_count += 1\n            digit_count = 0\n\n    # if start_num and end_num are not -1, move all the numbers to the end of the string\n    if start_num!= -1 and end_num!= -1:\n        result = test_str[:start_num] + test_str[end_num:]\n    # if start_num and end_num are -1, return the original string\n    else:\n        result = test_str\n\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # split the string into a list of words\n    words = test_str.split()\n\n    # loop through each word in the list\n    for i in range(len(words)):\n        # check if the current word is a number\n        if words[i].isdigit():\n            # append the number to the end of the list\n            words.append(words.pop(i))\n\n    # join the list of words into a string and return it\n    return''.join(words)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n    if len(num_list) > 0:\n        return test_str[-len(num_list):] + ''.join(num_list)\n    else:\n        return test_str"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    n = len(a)\n    max_sum = 0\n    max_size = 0\n    current_sum = 0\n    current_size = 0\n    for i in range(n-1):\n        if a[i] % a[i+1] == 0:\n            current_sum += a[i]\n            current_size += 1\n            if current_size > max_size:\n                max_sum = current_sum\n                max_size = current_size\n            elif current_size == max_size:\n                if current_sum > max_sum:\n                    max_sum = current_sum\n                    max_size = current_size\n        else:\n            current_sum = a[i]\n            current_size = 1\n    if max_size == 0:\n        return 0\n    else:\n        return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    # Create a dictionary to store the indices of the numbers in the subset\n    indices = {}\n\n    # Initialize variables to keep track of the largest subset and its size\n    max_subset_size = 0\n    max_subset = []\n\n    # Iterate through the list of numbers\n    for num in a:\n        # If the number is not in the dictionary, it's the first number in the subset\n        if num not in indices:\n            indices[num] = 0\n\n        # Iterate through the remaining numbers in the subset\n        for i in range(indices[num], len(a)):\n            # If the current number is divisible by the previous number, add it to the subset\n            if a[i] % a[indices[num]] == 0:\n                indices[num] = i\n                max_subset_size = max(max_subset_size, i - indices[num] + 1)\n                max_subset.append(a[i])\n                break\n\n    return max_subset_size, max_subset"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    n = len(a)\n    dp = [[1]*n for i in range(n)]\n\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i][j] = dp[i-1][j-1] + dp[i-1][j]\n\n    size = 0\n    for i in range(n):\n        if dp[n-1][i] > size:\n            size = dp[n-1][i]\n\n    return size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n\n    # Create a set of all the numbers in the list\n    num_set = set(a)\n\n    # Create an empty list to store the size of the largest subset\n    max_size = []\n\n    # Loop through the set of numbers\n    for num in num_set:\n        # Create a new set to store the numbers that can divide the given number\n        divisors = set(range(1, num+1)) - {num}\n        # Check if there exists a pair of numbers that can be divided\n        if any(a % b == 0 and b % c == 0 for a in divisors for b in divisors for c in divisors):\n            # If there is, add the size of the subset to the list\n            max_size.append(len(divisors))\n\n    # Return the maximum size of the largest subset\n    return max(max_size)"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    \n    # Create a set to store the remaining numbers in the list\n    remaining = set(a)\n    \n    # Create a set to store the pairs of numbers that can be divided\n    pairs = set()\n    \n    # Initialize the largest subset size\n    largest_size = 0\n    \n    # Loop through the list of numbers and find the pairs that can be divided\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            \n            # Check if the pair is divisible\n            if a[i] % a[j] == 0:\n                \n                # Check if the pair is smaller than the current largest subset size\n                if j-i+1 < largest_size:\n                    largest_size = j-i+1\n                    \n                # Add the pair to the set of pairs\n                pairs.add((a[i], a[j]))\n    \n    # Return the largest subset size\n    return largest_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    n = len(a)\n    max_length = 0\n    max_count = 0\n    start = 0\n\n    for i in range(n):\n        count = 1\n        while start <= i and a[i] % a[start]!= 0:\n            start += 1\n            count += 1\n        max_length = max(max_length, count)\n        max_count = max(max_count, count - 1)\n\n    return max_length"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Create a list to store the size of each subset\n    subset_sizes = []\n\n    # Sort the list in ascending order\n    a.sort()\n\n    # Loop through each number in the list\n    for num in a:\n        # Initialize a counter variable to keep track of the number of pairs with this number\n        pairs = 0\n\n        # Initialize a flag variable to keep track of whether we have found a pair\n        found = False\n\n        # Loop through each number in the list\n        for i in range(len(a)):\n            # If we find a number that is divisible by num and not itself, then increment the counter and set the flag to True\n            if a[i] % num == 0 and a[i]!= num:\n                pairs += 1\n                found = True\n                break\n\n        # If we have found a pair, then add its size to the subset_sizes list\n        if found:\n            subset_sizes.append(pairs)\n\n    # Find the maximum size of a subset\n    max_size = max(subset_sizes)\n\n    # Return the maximum size of a subset\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    max_size = 0\n    max_subset = []\n    subset = []\n\n    for i in range(n):\n        if len(subset) == 0 or a[subset[-1]] % a[i]!= 0:\n            subset.append(i)\n        else:\n            subset[-1] = i\n\n        if len(subset) > max_size:\n            max_size = len(subset)\n            max_subset = subset.copy()\n\n    return max_subset"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    n = len(a)\n    max_size = 0\n    i = 0\n    j = 1\n    while j < n:\n        if a[j] % a[i] == 0:\n            max_size = max(max_size, j - i + 1)\n            j += 1\n        elif a[i] % a[j] < a[j] % a[i]:\n            i += 1\n        else:\n            j += 1\n    max_size = max(max_size, n - i + 1)\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n\n    # sort the input list in ascending order\n    a.sort()\n\n    # initialize a variable to store the largest subset size\n    max_size = 0\n\n    # loop through each number in the list\n    for num in a:\n        # initialize a variable to store the number of pairs of numbers less than or equal to num\n        count = 0\n\n        # loop through each number in the list from the next number to the end\n        for i in range(num+1, len(a)):\n            # check if the next number is divisible by the current number\n            if a[i] % num == 0:\n                # if it is, increment the count of pairs\n                count += 1\n\n        # update the maximum subset size if the current number is the largest in the subset\n        if count > max_size:\n            max_size = count\n\n    # return the maximum subset size\n    return max_size"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    This function takes three arguments:\n    arr1: a list of integers\n    arr2: a list of integers\n    n: the size of the lists\n    \n    This function returns the median of the two lists, calculated using the QuickSelect algorithm.\n    \"\"\"\n    \n    # Find the median of the two sorted arrays\n    quickselect(arr1, 0, len(arr1) - 1, n // 2)\n    quickselect(arr2, 0, len(arr2) - 1, n // 2)\n\n    # Find the minimum value in the first sorted array\n    min1 = arr1[0]\n    for i in range(1, n // 2 + 1):\n        if arr1[i] < min1:\n            min1 = arr1[i]\n    \n    # Find the maximum value in the second sorted array\n    max2 = arr2[n // 2]\n    for i in range(n // 2, n):\n        if arr2[i] > max2:\n            max2 = arr2[i]\n    \n    # Compute the median as the average of the two medians\n    median = (min1 + max2) / 2\n\n    return median\n\n\ndef quickselect(arr, left, right, k):\n    \"\"\"\n    This function takes four arguments:\n    arr: a list of integers\n    left: the left index of the array\n    right: the right index of the array\n    k: the index to choose\n    \n    This function performs the QuickSelect algorithm, which is an efficient in-place variation of the QuickSort algorithm.\n    \"\"\"\n    \n    if left == right:\n        return arr[left]\n    \n    pivot_index = partition(arr, left, right)\n    \n    if k == pivot_index:\n        return arr[k]\n    elif k < pivot_index:\n        return quickselect(arr, left, pivot_index - 1, k)\n    else:\n        return quickselect(arr, pivot_index + 1, right, k)\n\n\ndef partition(arr, left, right):\n    \"\"\"\n    This function takes three arguments:\n    arr: a list of integers\n    left: the left index of the array\n    right: the right index of the array\n    \n    This function partitions the array around a pivot element, and returns its index.\n    \"\"\"\n    \n    pivot = arr[right]\n    i = left - 1\n    \n    for j in range(left, right):\n        if arr[j] <= pivot:\n            i += 1\n            arr[i], arr[j] = arr[j], arr[i]\n    \n    arr[i + 1], arr[right] = arr[right], arr[i + 1]\n    return i + 1"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n\n    # Merge the two sorted lists\n    merged_list = arr1 + arr2\n\n    # Sort the merged list\n    sorted_list = sorted(merged_list)\n\n    # Find the median\n    mid = n // 2\n    if n % 2 == 0:\n        median = (sorted_list[mid - 1] + sorted_list[mid]) / 2\n    else:\n        median = sorted_list[mid]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge the two sorted lists into a single sorted list\n    merged_list = merge_lists(arr1, arr2)\n    \n    # Find the median index\n    median_index = n // 2\n    \n    # If the size of the merged list is odd, the median is the middle element\n    if n % 2 == 1:\n        median = merged_list[median_index]\n    # If the size of the merged list is even, the median is the average of the two middle elements\n    else:\n        median = (merged_list[median_index - 1] + merged_list[median_index]) / 2\n    \n    return median\n    \ndef merge_lists(arr1, arr2):\n    '''\n    Merge two sorted lists into a single sorted list.\n    '''\n    # Initialize two pointers to the beginning of the lists\n    i, j = 0, 0\n    \n    # Initialize a new empty list to store the merged list\n    merged_list = []\n    \n    # While both pointers are still within their respective lists\n    while i < len(arr1) and j < len(arr2):\n        # If the current element in arr1 is smaller, append it to the merged list and move the pointer in arr1\n        if arr1[i] < arr2[j]:\n            merged_list.append(arr1[i])\n            i += 1\n        # If the current element in arr2 is smaller, append it to the merged list and move the pointer in arr2\n        else:\n            merged_list.append(arr2[j])\n            j += 1\n    \n    # If there are remaining elements in arr1, append them to the merged list\n    while i < len(arr1):\n        merged_list.append(arr1[i])\n        i += 1\n    \n    # If there are remaining elements in arr2, append them to the merged list\n    while j < len(arr2):\n        merged_list.append(arr2[j])\n        j += 1\n    \n    return merged_list"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if len(arr1)!= len(arr2):\n        print(\"Error: Lists are not of the same length\")\n        return\n    \n    mid1 = len(arr1) // 2\n    mid2 = len(arr2) // 2\n    \n    if len(arr1) % 2 == 0:\n        # find the average of the two middle elements\n        median = (arr1[mid1] + arr1[mid1 - 1] + arr2[mid2] + arr2[mid2 - 1]) / 4\n    else:\n        # find the middle element\n        median = arr1[mid1]\n    \n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    \n    # Merge the two sorted lists into one sorted list\n    merged_list = arr1 + arr2\n    \n    # Sort the merged list\n    merged_list.sort()\n    \n    # Find the length of the list\n    length = len(merged_list)\n    \n    # If the length is odd, the median is the middle element\n    if length % 2 == 1:\n        return merged_list[length//2]\n    # If the length is even, the median is the average of the two middle elements\n    else:\n        return (merged_list[length//2 - 1] + merged_list[length//2]) / 2"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # merge the two sorted lists\n    merged_list = merge_sorted_lists(arr1, arr2, n)\n    \n    # find the middle element\n    mid = n // 2\n    \n    # if the length of the merged list is odd, the median is the middle element\n    if n % 2 == 1:\n        return merged_list[mid]\n    # if the length of the merged list is even, the median is the average of the two middle elements\n    else:\n        return (merged_list[mid - 1] + merged_list[mid]) / 2\n\ndef merge_sorted_lists(arr1, arr2, n):\n    '''\n    Merge two sorted lists into one sorted list.\n    '''\n    # create a temporary list to store the merged list\n    merged_list = [None] * (n + 1)\n    \n    # merge the two lists\n    i = j = 0\n    while i < n and j < n:\n        if arr1[i] < arr2[j]:\n            merged_list[i + j] = arr1[i]\n            i += 1\n        else:\n            merged_list[i + j] = arr2[j]\n            j += 1\n            \n    # copy any remaining elements from arr1 or arr2\n    while i < n:\n        merged_list[i + j] = arr1[i]\n        i += 1\n        \n    while j < n:\n        merged_list[i + j] = arr2[j]\n        j += 1\n        \n    # remove the extra None's from the merged list\n    merged_list = merged_list[:n]\n    \n    return merged_list"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge the two sorted arrays\n    merged = arr1 + arr2\n\n    # Find the middle index of the merged array\n    mid = n // 2\n\n    # If the length of the array is odd, the median is the middle element\n    if n % 2 == 1:\n        return merged[mid]\n\n    # If the length of the array is even, the median is the average of the middle two elements\n    else:\n        return (merged[mid - 1] + merged[mid]) / 2"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    arr1.sort()\n    arr2.sort()\n\n    # Find the median of the two sorted lists\n    if n % 2 == 0:\n        median = (arr1[n//2-1] + arr1[n//2] + arr2[n//2-1] + arr2[n//2]) / 4\n    else:\n        median = arr1[n//2]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    # Merge the two sorted arrays\n    merged_arr = sorted(arr1 + arr2)\n\n    # Find the median\n    mid = len(merged_arr) // 2\n    if len(merged_arr) % 2 == 0:\n        # If the length of the merged array is even, the median is the average of the two middle elements\n        return (merged_arr[mid - 1] + merged_arr[mid]) / 2\n    else:\n        # If the length of the merged array is odd, the median is the middle element itself\n        return merged_arr[mid]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n\n    # Merge the two sorted lists\n    merged_arr = arr1 + arr2\n\n    # Find the median\n    sorted_arr = sorted(merged_arr)\n    if n % 2 == 0:\n        median = (sorted_arr[n//2-1] + sorted_arr[n//2]) / 2\n    else:\n        median = sorted_arr[n//2]\n\n    return median"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] = nums[i] ** n\n    return nums"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    Computes the n-th power of each number in a list.\n\n    Args:\n        nums (list): A list of numbers.\n        n (int): The power to which to raise each number.\n\n    Returns:\n        A list of the same size as `nums`, containing the n-th powers of each number in `nums`.\n    \"\"\"\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_upper(string):\n    \"\"\"\n    Write a python function to convert a given string to uppercase.\n    \"\"\"\n    string = string.upper()\n    return string"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_upper(string):\n    \"\"\"\n    Write a python function to convert a given string to uppercase.\n    \"\"\"\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n\n    # Convert the given string to uppercase\n    string = string.upper()\n\n    return string"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_upper(string):\n    \"\"\"\n    Write a python function to convert a given string to uppercase.\n    \"\"\"\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    length = len(newList)\n    # check if list has at least two elements\n    if length < 2:\n        return \"Error: List must have at least two elements.\"\n    # swap first and last elements\n    newList[0], newList[length-1] = newList[length-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Check if the list has more than two elements\n    if len(newList) > 2:\n        # Swap the first and last elements\n        newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList.pop(1)\n    newList.insert(0, newList.pop())\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # check if the length of the list is greater than 1\n    if len(newList) > 1:\n        # store the first element of the list\n        first_element = newList[0]\n        # store the last element of the list\n        last_element = newList[-1]\n        # change the first element to the last element and last element to the first element\n        newList[0] = last_element\n        newList[-1] = first_element\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) < 2:\n        return newList\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return swap_List(newList)"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Check if the length of the list is greater than 0\n    if len(newList) > 0:\n        # Store the length of the list\n        length = len(newList)\n        # Swap the first and last element\n        newList[0], newList[length - 1] = newList[length - 1], newList[0]\n        # Return the updated list\n        return newList\n    else:\n        return \"Error: List is empty.\""
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) > 1:\n        temp = newList[0]\n        newList[0] = newList[-1]\n        newList[-1] = temp\n        return newList\n    else:\n        print(\"List should have at least two elements!\")"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    n = len(newList)\n    first = newList[0]\n    last = newList[n-1]\n    newList[0] = last\n    newList[n-1] = first\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # check if the list has at least two elements\n    if len(newList) < 2:\n        print(\"The list should have at least two elements.\")\n        return None\n    else:\n        # swap the first and last element\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    def is_valid_triangle(a, b, c):\n        return a + b > c and a + c > b and b + c > a\n\n    def largest_valid_triangle(r):\n        a = r\n        b = r ** 2\n        c = r ** 3\n        while True:\n            if is_valid_triangle(a, b, c):\n                return (a, b, c)\n            a = b\n            b = c\n            c = r ** 3\n\n    a, b, c = largest_valid_triangle(r)\n    s = (a + b + c) / 2\n    return math.pi * s ** 2"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # calculate area of the largest triangle inscribed in a semicircle\n    area = 0.5 * r**2\n    # return the calculated area\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Compute the area of the smallest triangle that can be inscribed in a semicircle with a radius r\n    area = math.pi * (r**2)\n    \n    # Compute the area of the largest triangle that can be inscribed in a semicircle with a radius r\n    area_max = 2 * area / 3\n    \n    return area_max"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 0.5 * r * r\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    import cmath\n\n    pi = math.pi\n    sec = cmath.sec\n\n    # Formula to find the area of a triangle given its base and height\n    def triangle_area(base, height):\n        s = (base + height) / 2\n        return math.sqrt(s * (s - base) * (s - height))\n\n    # Formula to find the semi-perimeter of a triangle given its base and height\n    def triangle_semi_perimeter(base, height):\n        s = (base + height) / 2\n        return 2 * s\n\n    # Formula to find the diameter of a circle given its radius\n    def circle_diameter(r):\n        return 2 * r\n\n    # Function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius\n    def largest_triangle_area(r):\n        # Find the semi-perimeter of a triangle with a given radius\n        s = circle_diameter(r) / 2\n\n        # Find the maximum possible area of a triangle that can be inscribed in a semicircle\n        max_area = 0.5 * s * s * (1 + sec(r))\n\n        # Find the area of a triangle with the largest possible area\n        for b in range(s - 1, 0, -1):\n            for h in range(s - 1, 0, -1):\n                area = triangle_area(b, h)\n                if area > max_area:\n                    max_area = area\n\n        return max_area\n\n    return largest_triangle_area(r)"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    return 3.14159 * r**2"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Calculate the semi-perimeter of the semicircle\n    s = 2 * math.pi * r\n\n    # Calculate the area of the largest triangle that can be inscribed in the semicircle\n    area = math.sqrt(s * (s - r) * (s - 2 * r))\n\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 0.5 * (r ** 2)\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    pi = 3.14159265358979323846\n    \n    # Find the semi-perimeter of the circle\n    a = 2*pi*r\n    \n    # Find the area of the largest triangle that can be inscribed in the circle\n    area = (r**2)/3\n    \n    # Find the area of the smallest triangle that can be inscribed in the circle\n    triangle_area = pi*r**2\n    \n    # Find the area of the largest triangle that can be inscribed in the semicircle\n    area = max(area, triangle_area)\n    \n    # Return the area of the largest triangle that can be inscribed in the semicircle\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    \n    # Calculate the semi-perimeter of the semicircle\n    s = 2 * r\n    \n    # Calculate the area of the largest triangle inscribed in the semicircle\n    area = math.sqrt(s * (s - r) * (s - r + math.sqrt(s * (s - r) * (s - r)))) / math.sqrt(3)\n    \n    # Return the calculated area\n    return area"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    # Check if the list is sorted\n    if not all(array[i] < array[i+1] for i in range(len(array)-1)):\n        raise ValueError(\"The list must be sorted\")\n    \n    # Check if the end index is provided\n    if end is None:\n        # Find the maximum number in the array\n        end = max(array)\n    \n    # Iterate over the array and check if each number is missing\n    for i in range(start, end+1):\n        if i not in array:\n            return i\n    \n    # If no missing number is found, return the end index + 1\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers (array) and returns the smallest missing number.\n    If an end value is not provided, the function will find the missing number from the beginning of the array.\n    \"\"\"\n    # Check if the array is sorted\n    if not all(array[i] < array[i+1] for i in range(len(array)-1)):\n        print(\"Error: Array must be sorted in ascending order\")\n        return\n    \n    # Find the start and end indices of the missing number\n    if end is None:\n        end = len(array) - 1\n    for i in range(start, end+1):\n        if array[i]!= i:\n            return i\n    \n    # If no missing number is found, return the start index\n    return start"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes an array of natural numbers and returns the smallest missing number from the array.\n    \"\"\"\n    # Check if the array is sorted in ascending order\n    if not all(x < y for x, y in zip(array, array[1:])):\n        print(\"Error: Array is not sorted in ascending order.\")\n        return None\n\n    # If the end index is not provided, set it to the length of the array\n    if end is None:\n        end = len(array)\n\n    # Iterate over the array from the start index to the end index and check if each number is missing\n    for i in range(start, end):\n        if i+1!= array[i]:\n            return i+1\n\n    # If no missing number is found, return the length of the array plus 1\n    return end+1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    # Check if the input is valid\n    if not (isinstance(array,list) and all(isinstance(i,int) and i>0 for i in array)):\n        raise TypeError(\"Input must be a list of positive integers\")\n    \n    # Check if the list is sorted\n    if not all(array[i]<=array[i+1] for i in range(len(array)-1)):\n        raise ValueError(\"Input list is not sorted\")\n    \n    # Initialize variables\n    missing = start\n    count = 0\n    \n    # Iterate over the list and check if the missing number is present\n    for num in array:\n        if missing == num:\n            missing = start + count\n            count += 1\n        else:\n            missing += 1\n            \n    # Return the smallest missing number\n    return missing"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    # Check if the array is sorted in ascending order\n    if len(array)!= len(set(array)):\n        return \"Array must be sorted in ascending order\"\n    if not array:\n        return \"Array cannot be empty\"\n\n    # If end is not specified, set it to the last index of the array\n    if end is None:\n        end = len(array) - 1\n\n    # Find the first missing number in the array using binary search\n    while start <= end:\n        mid = (start + end) // 2\n        if mid == 0 or array[mid - 1] < mid:\n            if mid == len(array) or array[mid] > mid:\n                return mid\n            else:\n                return mid + 1\n        elif array[mid] > mid:\n            start = mid + 1\n        else:\n            end = mid - 1\n\n    return \"No missing number found in the given array\""
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers as input and returns the smallest missing number.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n    \n    for i in range(start, end + 1):\n        if array[i]!= i:\n            return i\n    \n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end):\n        if array[i]!= i + 1:\n            return i + 1\n\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n\n    Args:\n        array (list): A sorted list of natural numbers.\n        start (int, optional): The starting index of the search range. Defaults to 0.\n        end (int, optional): The ending index of the search range. Defaults to None.\n\n    Returns:\n        int: The smallest missing number in the sorted list.\n\n    Raises:\n        TypeError: If the input is not a list.\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if array[i]!= i:\n            return i\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array) - 1\n    for i in range(start, end):\n        if array[i]!= i + 1:\n            return i + 1\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes a list of natural numbers (array) and returns the smallest missing number.\n    \"\"\"\n    if end is None:\n        end = max(array)\n    for i in range(start, end + 1):\n        if i not in array:\n            return i\n    return end + 1"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list: \n        if num % 2 == 0: \n            even_numbers.append(num) \n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(list):\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(lst):\n    '''\n    This function takes a list of numbers as an input and returns a list of even numbers.\n    '''\n    even_list = []\n    for num in lst:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function to find even numbers from a list of numbers.\n    \"\"\"\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(lst):\n    '''\n    This function takes a list as input and returns a new list containing only even numbers from the original list.\n    '''\n    even_numbers = []\n    for num in lst:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n\n    # Get the adjacent coordinates by iterating over adjacent elements\n    for i in range(len(ele)): \n        if i-1 >= 0:\n            sub.append((ele[0], ele[1]+i))\n        if i+1 < len(ele):\n            sub.append((ele[0], ele[1]+i+1))\n        if ele[0]-1 >= 0:\n            sub.append((ele[0]-1, ele[1]))\n        if ele[0]+1 < len(ele[0]):\n            sub.append((ele[0]+1, ele[1]))\n\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def adjac(ele, sub=None):\n    \"\"\"\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    \"\"\"\n    if sub is None:\n        sub = []\n    x, y = ele\n    if x == 0:\n        sub.append((x+1, y))\n        sub.append((x-1, y))\n    elif y == 0:\n        sub.append((x, y+1))\n        sub.append((x, y-1))\n    elif x == len(grid)-1:\n        sub.append((x-1, y))\n        sub.append((x+1, y))\n    elif y == len(grid[0])-1:\n        sub.append((x, y-1))\n        sub.append((x, y+1))\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adjacent = []\n    for i in range(-1, 2):\n        for j in range(-1, 2):\n            if i!= 0 or j!= 0:\n                nx, ny = x + i, y + j\n                if nx >= 0 and ny >= 0 and nx < len(sub) and ny < len(sub[0]) and sub[ny][nx]!= 0:\n                    adjacent.append((nx, ny))\n    return adjacent"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def adjac(ele, sub=[]):\n    \"\"\"\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n\n    Args:\n    ele (tuple): A coordinate tuple.\n\n    Keyword Args:\n    sub (list): A list of sub-coordinates. Default is an empty list.\n\n    Returns:\n    list: A list of all the adjacent coordinates of the given coordinate tuple.\n    \"\"\"\n\n    # Get the x and y coordinates of the given coordinate tuple\n    x, y = ele\n\n    # Initialize an empty list to store the adjacent coordinates\n    adj_coords = []\n\n    # Extract the adjacent x and y coordinates\n    for dx, dy in [(1, 0), (-1, 0), (0, 1), (0, -1)]:\n        nx, ny = x + dx, y + dy\n\n        # Check if the adjacent coordinate is within the boundaries of the grid\n        if 0 <= nx < n and 0 <= ny < m:\n            adj_coords.append((nx, ny))\n\n    # Add the sub-coordinates to the adjacent coordinates list\n    adj_coords.extend(sub)\n\n    return adj_coords"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    if sub:\n        sub.append((x-1,y))\n        sub.append((x+1,y))\n        sub.append((x,y-1))\n        sub.append((x,y+1))\n        return sub\n    else:\n        return [(x-1,y), (x+1,y), (x,y-1), (x,y+1)]"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj_coords = []\n\n    # check all adjacent cells\n    for dx, dy in [(0, 1), (1, 0), (0, -1), (-1, 0), (1, 1), (-1, 1), (1, -1), (-1, -1)]:\n        new_x, new_y = x + dx, y + dy\n        if 0 <= new_x < n and 0 <= new_y < m:\n            adj_coords.append((new_x, new_y))\n\n    # return the list of adjacent coordinates\n    return adj_coords"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    if y < len(sub):\n        if sub[y][x-1] is None:\n            sub[y][x-1] = (x-1, y)\n            sub[y][x] = (x, y)\n            sub[y][x+1] = (x+1, y)\n        if sub[y-1][x] is None:\n            sub[y-1][x] = (x, y-1)\n            sub[y][x-1] = (x-1, y)\n            sub[y][x] = (x, y)\n            sub[y][x+1] = (x+1, y)\n        if sub[y-1][x-1] is None:\n            sub[y-1][x-1] = (x-1, y-1)\n            sub[y][x-1] = (x-1, y)\n            sub[y][x] = (x, y)\n            sub[y][x+1] = (x+1, y)\n        if sub[y][x+1] is None:\n            sub[y][x+1] = (x+1, y)\n            sub[y][x] = (x, y)\n            sub[y][x-1] = (x-1, y)\n            sub[y-1][x-1] = (x-1, y-1)\n            sub[y-1][x] = (x, y-1)\n            sub[y-1][x+1] = (x+1, y-1)\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def adjac(ele, sub=[]):\n    \"\"\"\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    \"\"\"\n    x, y = ele\n    result = []\n    for i in range(x-1, x+2):\n        for j in range(y-1, y+2):\n            if (i, j) not in sub:\n                result.append((i, j))\n    return result"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def adjac(ele, sub=[]):\n    \"\"\"\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    \"\"\"\n    x, y = ele\n    # Check for the top row\n    if y == 0:\n        top = (x, y+1)\n        sub.append(top)\n        bot = (x, y-1)\n        sub.append(bot)\n    # Check for the right column\n    elif x == len(sub) - 1:\n        left = (x-1, y)\n        sub.append(left)\n        right = (x+1, y)\n        sub.append(right)\n    # Check for the bottom row\n    elif y == len(sub) - 1:\n        top = (x, y-1)\n        sub.append(top)\n        bot = (x, y+1)\n        sub.append(bot)\n    # Check for the left column\n    else:\n        left = (x-1, y)\n        sub.append(left)\n        right = (x+1, y)\n        sub.append(right)\n        top = (x, y-1)\n        sub.append(top)\n        bot = (x, y+1)\n        sub.append(bot)\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj = []\n    if x-1 >= 0:\n        adj.append((x-1, y))\n    if x+1 < len(sub[0]):\n        adj.append((x+1, y))\n    if y-1 >= 0:\n        adj.append((x, y-1))\n    if y+1 < len(sub):\n        adj.append((x, y+1))\n    return adj"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    \"\"\"\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    \"\"\"\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Remove whitespaces from text\n    text = text.replace(\" \", \"_\")\n    # Remove underscores from text\n    text = text.replace(\"_\", \" \")\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    \"\"\"\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    \"\"\"\n    result = ''\n    for char in text:\n        if char =='':\n            result += '_'\n        elif char == '_':\n            result +=''\n        else:\n            result += char\n    return result"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    result = \"\"\n    for char in text:\n        if char.isspace():\n            result += \"_\"\n        else:\n            result += char\n    return result"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Convert all spaces to underscores\n    text = text.replace(\" \", \"_\")\n    # Convert all underscores to spaces\n    text = text.replace(\"_\", \" \")\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Convert the string to lowercase\n    text = text.lower()\n\n    # Replace whitespaces with underscores\n    text = text.replace(\" \", \"_\")\n\n    # Replace underscores with whitespaces\n    text = text.replace(\"_\", \" \")\n\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    spaces = \" \"\n    underscores = \"_\"\n    new_text = \"\"\n    \n    for char in text:\n        if char == spaces:\n            new_text += underscores\n        elif char == underscores:\n            new_text += spaces\n        else:\n            new_text += char\n    \n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # split the string into words\n    words = text.split()\n    # loop through each word and replace spaces with underscores\n    for i in range(len(words)):\n        words[i] = words[i].replace(' ', '_')\n    # loop through each word and replace underscores with spaces\n    for i in range(len(words)):\n        words[i] = words[i].replace('_','')\n    # join the words back into a string\n    result =''.join(words)\n    return result"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    # Initialize two pointers for iterating through the list\n    i = 0\n    j = 0\n    # Iterate through the list\n    while j < len(num_list):\n        # If the current element is not zero, move it to its correct position\n        if num_list[j]!= 0:\n            num_list[i], num_list[j] = num_list[j], num_list[i]\n            i += 1\n        j += 1\n    # Return the modified list\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    # create an empty list to hold the non-zero numbers\n    non_zero_list = []\n    \n    # iterate over each number in the input list\n    for num in num_list:\n        # if the number is not zero, add it to the non_zero_list\n        if num!= 0:\n            non_zero_list.append(num)\n    \n    # add all the zeroes to the end of the non_zero_list\n    non_zero_list += [0]*num_list.count(0)\n    \n    # return the non_zero_list\n    return non_zero_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    # Create a new list to store non-zero numbers\n    non_zero_list = []\n\n    # Iterate through the input list\n    for num in num_list:\n        # If the number is not zero, append it to the non_zero_list\n        if num!= 0:\n            non_zero_list.append(num)\n\n    # Append the remaining zeroes to the end of the non_zero_list\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            non_zero_list.append(0)\n\n    # Return the non-zero list\n    return non_zero_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # create a new empty list to store the non-zero values\n    result = []\n    # iterate through the input list and add each non-zero value to the result list\n    for num in num_list:\n        if num!= 0:\n            result.append(num)\n    # add all zeroes to the end of the result list\n    for i in range(len(result), len(num_list)):\n        result.append(0)\n    return result"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # initialize a new list to store the non-zero numbers\n    result_list = []\n    # loop through the original list\n    for num in num_list:\n        # if the number is non-zero, append it to the result list\n        if num!= 0:\n            result_list.append(num)\n    # append all zeroes to the end of the result list\n    result_list += [0] * len(num_list)\n    # return the final list\n    return result_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    zero_count = 0\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            num_list.pop(i)\n            zero_count += 1\n            i -= 1\n        else:\n            break\n    num_list.extend([0] * zero_count)\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    # iterate over the list from the end to the beginning\n    for i in range(len(num_list)-1, -1, -1):\n        # if the current element is zero, move it to the end of the list\n        if num_list[i] == 0:\n            num_list[i], num_list[len(num_list)-1] = num_list[len(num_list)-1], num_list[i]\n            # decrease the length of the list by one\n            len_list = len(num_list)\n            num_list = num_list[:len_list-1]\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    i = 0\n    while i < len(num_list):\n        if num_list[i] == 0:\n            num_list.pop(i)\n        else:\n            i += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    # Using two pointers to iterate through the list\n    i = 0  # pointer for non-zero elements\n    j = 0  # pointer for zero elements\n    \n    while j < len(num_list):\n        if num_list[j]!= 0:\n            num_list[i], num_list[j] = num_list[j], num_list[i]\n            i += 1\n        j += 1\n    \n    # Return the final list with all non-zero elements moved to the end\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    i = 0\n    while i < len(num_list):\n        if num_list[i] == 0:\n            num_list.pop(i)\n        else:\n            i += 1\n    return num_list"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr, n):\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr, n):\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr,n) : \n    \"\"\"\n    This function takes two arguments:\n    arr - a list of integers\n    n - the length of the list\n\n    It calculates the xor of all pairs of numbers in the list and returns their sum.\n    \"\"\"\n\n    # Initialize the sum variable to zero\n    xor_sum = 0\n\n    # Loop through the list\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum ^= arr[i] ^ arr[j]\n\n    # Return the xor sum\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr,n): \n    # initialize the sum to zero\n    xor_sum = 0\n\n    # iterate through the list of numbers\n    for i in range(n): \n        # xor the current number with all other numbers in the list\n        xor_sum = xor_sum ^ arr[i]\n\n    # return the xor_sum\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr, n):\n    \"\"\"\n    This function takes a list of integers and an integer n as input.\n    It returns the sum of xor of all pairs of numbers in the list.\n\n    Example:\n    arr = [2, 5, 7, 1, 8, 3]\n    n = 5\n    Output: 20\n\n    arr = [4, 6, 1, 8, 3, 2]\n    n = 8\n    Output: 12\n    \n    arr = [9, 5, 2, 3, 7, 6, 8]\n    n = 12\n    Output: 44\n    \"\"\"\n    xor_sum = 0\n\n    for i in range(n):\n        xor_sum ^= arr[i]\n\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum_xor = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            sum_xor += arr[i] ^ arr[j]\n    return sum_xor"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    This function takes in two lists, arr and n, where arr is the list of numbers and n is the number of elements in the list. \n    It then calculates the xor of all pairs of numbers in the list arr using the built-in function `sum()` and returns the sum.\n    '''\n    xor_sum = 0\n    for i in range(len(arr)):\n        xor_sum ^= arr[i]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    This function takes in a list of n integers and returns the sum of the xor of all pairs of integers in the list.\n    '''\n    xor = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor = xor ^ arr[i] ^ arr[j]\n    return xor"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    This function takes a list and its length as input and returns the sum of xor of all pairs of numbers in the list.\n    '''\n    sum_of_xor = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor = arr[i] ^ arr[j]\n            sum_of_xor += xor\n    return sum_of_xor"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            sum += arr[i] ^ arr[j]\n    return sum"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # create a min heap from the given iterable\n    heap = hq.heapify(iterable)\n    \n    # sort the heap using heapsort\n    sorted_heap = []\n    while heap:\n        sorted_heap.append(heapq.heappop(heap))\n    \n    return sorted_heap"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    This function sorts the given list using heap sort.\n    '''\n    hq.heapify(iterable)\n    result = []\n    while iterable:\n        result.append(heapq.heappop(iterable))\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using the heap sort algorithm.\n    '''\n    heap = hq.heapify(iterable)\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef heap_sort(iterable):\n    '''\n    Sorts the given iterable using the heap sort algorithm.\n    '''\n    hq.heapify(iterable)\n    sorted_list = []\n    while hq.heapify(iterable):\n        sorted_list.append(hq.heappop(iterable))\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heap sort.\n    '''\n    # Convert the iterable to a list\n    iterable = list(iterable)\n    n = len(iterable)\n\n    # Build a max heap\n    for i in range(n//2 - 1, -1, -1):\n        heapify(iterable, n, i)\n\n    # Extract elements from the max heap one by one and add them to a new list\n    result = []\n    for _ in range(n):\n        result.append(hq.heappop(iterable))\n\n    # Convert the list to an iterable and return the sorted result\n    return result\n\n\ndef heapify(heap, n, i):\n    '''\n    Recursively build a max heap from the given list.\n    '''\n    largest = i\n    left = 2*i + 1\n    right = 2*i + 2\n\n    if left < n and heap[left] > heap[largest]:\n        largest = left\n\n    if right < n and heap[right] > heap[largest]:\n        largest = right\n\n    if largest!= i:\n        heap[i], heap[largest] = heap[largest], heap[i]\n        heapify(heap, n, largest)\n"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    This function takes an iterable as input and sorts it using heap sort algorithm.\n    '''\n    heap = []\n    for num in iterable:\n        hq.heappush(heap, num)\n    result = []\n    while heap:\n        result.append(hq.heappop(heap))\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heap sort.\n    '''\n    heap = []\n    for num in iterable:\n        heapq.heappush(heap, num)\n    return [hq.heappop(heap) for _ in range(len(iterable))]"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Convert the iterable to a list\n    lst = list(iterable)\n\n    # Sort the list using a min heap\n    hq.heapify(lst)\n\n    # Convert the min heap to a list and return it\n    return [hq.heappop(lst) for i in range(len(lst))]"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Convert the list to a heap\n    heap = [h for h in iterable]\n    hq.heapify(heap)\n\n    # Perform heap sort\n    for i in range(len(heap)-1, 0, -1):\n        hq.heappop(heap)\n        hq.heappush(heap, heap[i])\n\n    # Convert the heap back to a list and return it\n    return [h for h in heap]"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heap sort.\n    '''\n    # Convert the given list to a min heap\n    hq.heapify(iterable)\n    # Extract elements from the heap in sorted order\n    sorted_list = []\n    while iterable:\n        sorted_list.append(hq.heappop(iterable))\n    return sorted_list"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    This function checks whether the given amount has no profit and no loss\n    \"\"\"\n    profit = sale_amount - actual_cost\n    if profit >= 0 and profit <= sale_amount:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    # Define the profit and loss values\n    profit = sale_amount - actual_cost\n    loss = actual_cost - sale_amount\n\n    # Check if profit is negative and loss is positive or zero\n    if profit < 0 and loss > 0 or profit == 0 and loss == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    This function checks whether the given amount has no profit and no loss.\n    \"\"\"\n    if sale_amount <= actual_cost:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    This function checks whether the given amount has no profit and no loss.\n    \"\"\"\n\n    # Check if the actual cost is greater than or equal to the sale amount\n    if actual_cost >= sale_amount:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    \n    Args:\n    actual_cost: float\n        The actual cost of the item being sold.\n    sale_amount: float\n        The amount of the item being sold.\n        \n    Returns:\n    bool\n        True if the sale has no profit and no loss, False otherwise.\n    '''\n    \n    profit = sale_amount - actual_cost\n    loss = actual_cost - sale_amount\n    \n    if profit == 0 and loss == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    Write a function to check whether the given amount has no profit and no loss\n    \"\"\"\n    if actual_cost >= sale_amount:\n        return \"No Profit and No Loss\"\n    else:\n        return \"No Profit\""
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost >= sale_amount:\n        print(\"Actual cost is greater than or equal to sale amount.\")\n        return True\n    elif actual_cost < sale_amount:\n        print(\"Actual cost is less than sale amount.\")\n        return False\n    else:\n        print(\"Actual cost is equal to sale amount.\")\n        return True"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    if actual_cost > sale_amount:\n        return False\n    elif actual_cost == sale_amount:\n        return True\n    else:\n        profit = sale_amount - actual_cost\n        loss = actual_cost - sale_amount\n\n        if profit > 0 and loss > 0:\n            return False\n        elif profit > 0 and loss == 0:\n            return True\n        elif profit == 0 and loss > 0:\n            return True\n        else:\n            return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost > sale_amount:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    if actual_cost <= sale_amount: \n        print(\"No profit and no loss!\")\n    else: \n        print(\"Profit and loss!\")"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\n    :param v: wind velocity in km/h\n    :param t: temperature in celsius\n    :return: wind chill index rounded to the next integer\n    \"\"\"\n    # convert celsius to fahrenheit\n    t = (t * 9/5) + 32\n    \n    # calculate dew point using water vapor pressure formula\n    # uses the ideal gas law for pressure, and assumes a constant density of air (287 kg/m^3)\n    e = 6.112 * math.exp(17.625 * t / (t + 243.125))\n    dew_point = 243.125 * (1 + e / 6.112) / (1 + e / (243.125 + e / 6.112))\n    \n    # calculate wind chill index\n    wci = 35.74 + 0.6215 * v - 35.75 * math.exp(0.16 * (t - 23)) + 0.4275 * dew_point - 459.67 * math.exp(-0.5625 * (t - 23))\n    \n    # round wind chill index to the nearest integer\n    wci_rounded = math.ceil(wci)\n    \n    return wci_rounded"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n\n    # Calculate the basic formula for wind chill\n    wc = 35.74 + 0.6215 * v - 35.75 * math.exp((17.625 * t) / (t + 243.5))\n\n    # Calculate the temperature difference between the current and target temperature\n    temp_diff = t - 32\n\n    # Calculate the upper limit for the wind chill index\n    upper_limit = 13.12 + 0.6215 * v - 11.37 * math.exp((17.625 * temp_diff) / (temp_diff + 243.5))\n\n    # Calculate the lower limit for the wind chill index\n    lower_limit = 0\n\n    # If the wind chill index is less than or equal to the lower limit, return the lower limit\n    if wc <= lower_limit:\n        return lower_limit\n    # If the wind chill index is greater than or equal to the upper limit, return the upper limit\n    elif wc >= upper_limit:\n        return upper_limit\n    # Otherwise, return the rounded wind chill index\n    else:\n        return round(wc)"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n\n    # Calculate the dew point temperature using the formula dew_point = 243.04 (\u00b0C) + 0.6215 (\u00b0C/km) * v\n    dew_point = round((243.04 + 0.6215 * v) / 1.8)\n\n    # Calculate the wind speed in m/s\n    wind_speed = v * 3.6\n\n    # Calculate the wind chill index using the formula wind_chill = dew_point - 459.67 (\u00b0C/km) * (1 + 0.14 * (t - dew_point) / (dew_point - 32))\n    wind_chill_index = round(dew_point - 459.67 * (1 + 0.14 * (t - dew_point) / (dew_point - 32)) / wind_speed)\n\n    # Return the wind chill index rounded to the nearest integer\n    return wind_chill_index"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # convert temperature to fahrenheit\n    fahrenheit = (t*1.8) + 32\n\n    # calculate the dew point using the formula (equivalent water) - (0.622*(relative humidity))\n    rel_humidity = 0.622*v/t\n\n    # calculate the dew point in fahrenheit\n    dew_point = (17.625*rel_humidity) / (243.12 + rel_humidity) + 32\n\n    # calculate the wind chill in fahrenheit\n    wind_chill_f = fahrenheit - ((17.625/dew_point) * (t - dew_point))\n\n    # calculate the wind chill in celsius\n    wind_chill_c = (wind_chill_f - 32) / 1.8\n\n    # calculate the wind chill index rounded to the next integer\n    wci = math.ceil(wind_chill_c)\n\n    return wci"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \n    Parameters:\n    v (float): The wind velocity in km/h\n    t (float): The temperature in celsius\n    \n    Returns:\n    int: The wind chill index rounded to the next integer\n    '''\n    wchill = round(23.4 * (v / 100) * math.exp((17.27 * t) / (t + 23.4))) - 45.9\n    if wchill < -10:\n        return -10\n    elif wchill > 100:\n        return 100\n    else:\n        return wchill"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def wind_chill(v, t):\n    \"\"\"\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    # Convert temperature from Celsius to Fahrenheit\n    temp_f = (9/5) * t + 32\n    # Calculate the wind speed\n    wind_speed_kmph = v * 1.60934 # convert km/h to m/s\n    # Calculate the heat index\n    heat_index = (0.5 * (temp_f + 21.2 * math.log(wind_speed_kmph) + (0.0065 * temp_f) * (wind_speed_kmph ** 0.16)))\n    # Calculate the wind chill index\n    wind_chill_index = (heat_index - 32) * 5/9\n    # Round the wind chill index to the nearest integer\n    wind_chill_rounded = round(wind_chill_index)\n    return wind_chill_rounded"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Convert temperature to Kelvin\n    T = t + 273.15\n    # Calculate dry bulb temperature\n    Db = 0.5 * v * (1 + 0.14 * (T - 273.15) + 0.02 * (T - 273.15)**2)\n    # Calculate wind chill index\n    Wc = 23.4 * math.log(Db / 10) + 0.6215 * (T - 273.15) - 11.37 * math.log(Db / 10) + 0.3965 * (T - 273.15)**2\n    # Round wind chill index to the nearest integer\n    Wc_int = round(Wc)\n    # Return wind chill index\n    return Wc_int"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    This function calculates the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n\n    if v <= 10:\n        return math.floor(32 + 0.6215 * (t - 273.15) - 11.37 * math.log(v) + 0.3965 * (t - 273.15) ** 2)\n    elif v <= 15:\n        return math.floor(21 + 0.6215 * (t - 273.15) - 11.37 * math.log(v) + 0.3965 * (t - 273.15) ** 2)\n    elif v <= 20:\n        return math.floor(13 + 0.6215 * (t - 273.15) - 11.37 * math.log(v) + 0.3965 * (t - 273.15) ** 2)\n    elif v <= 25:\n        return math.floor(5 + 0.6215 * (t - 273.15) - 11.37 * math.log(v) + 0.3965 * (t - 273.15) ** 2)\n    elif v <= 30:\n        return math.floor(-1 + 0.6215 * (t - 273.15) - 11.37 * math.log(v) + 0.3965 * (t - 273.15) ** 2)\n    elif v <= 35:\n        return math.floor(-7 + 0.6215 * (t - 273.15) - 11.37 * math.log(v) + 0.3965 * (t - 273.15) ** 2)\n    elif v <= 40:\n        return math.floor(-15 + 0.6215 * (t - 273.15) - 11.37 * math.log(v) + 0.3965 * (t - 273.15) ** 2)\n    elif v <= 45:\n        return math.floor(-24 + 0.6215 * (t - 273.15) - 11.37 * math.log(v) + 0.3965 * (t - 273.15) ** 2)\n    else:\n        return math.floor(-32 + 0.6215 * (t - 273.15) - 11.37 * math.log(v) + 0.3965 * (t - 273.15) ** 2)"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    \n    # calculate the dew point temperature\n    dew_point = 243.04 * math.exp((17.67 * t) / (t + 243.04))\n    \n    # calculate the wind speed in m/s\n    wind_speed = v * 1.60934\n    \n    # calculate the wetbulb temperature\n    wet_bulb = dew_point - (0.0065 * (dew_point - 273.15))\n    \n    # calculate the actual temperature\n    actual_temp = wet_bulb + (0.0018 * wind_speed + 0.000125 * (wet_bulb - 273.15))\n    \n    # calculate the wind chill index\n    wind_chill_index = 459.67 * math.exp((17.67 * actual_temp) / (actual_temp + 243.04))\n    \n    # round the wind chill index to the nearest integer\n    wind_chill_rounded = int(wind_chill_index + 0.5)\n    \n    return wind_chill_rounded"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Calculate the wind chill temperature\n    wct = ((13.12 + 0.6215 * t) * (1 + 0.14 * math.exp((11.37 * t) / (237.7 + t)))) / (1 - 0.14 * math.exp((11.37 * t) / (237.7 + t)))\n\n    # Calculate the dew point temperature\n    dp = (wct + 459.67) * math.exp(17.27 * (t - wct) / (237.7 + wct))\n\n    # Calculate the temperature difference\n    td = dp - t\n\n    # Calculate the heat index\n    hi = dp - 0.0065 * td * td - 0.0555 * td + 10.34\n\n    # Calculate the wind chill index\n    wci = 35.74 + 0.6215 * t - 35.75 * td + 0.4275 * td * td - 0.000385 * td * td * td + 0.0008 * td * td * td * td\n\n    # Calculate the wind chill index rounded to the next integer\n    wc = round(wci)\n\n    return wc\n`"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # initialize a variable to keep the sum of the lengths of the names\n    name_sum = 0\n    # loop through each name in the list\n    for name in sample_names:\n        # check if the name starts with a lowercase letter\n        if name[0].islower():\n            # if it does, remove it from the list and continue with the next name\n            sample_names.remove(name)\n            continue\n        # if the name doesn't start with a lowercase letter, add its length to the sum\n        name_sum += len(name)\n    # return the sum of the lengths of the names\n    return name_sum"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        else:\n            total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum_length = 0\n    for name in sample_names:\n        if not name[0].islower():\n            sum_length += len(name)\n    return sum_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    \"\"\"\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    \"\"\"\n    filtered_names = [name for name in sample_names if not name.startswith(name[0].upper())]\n    total_length = sum([len(name) for name in filtered_names])\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    \"\"\"\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    \"\"\"\n    # Remove names starting with a lowercase letter\n    names = [name for name in sample_names if name[0].isupper()]\n    # Calculate the sum of the length of the remaining names\n    total_length = sum(len(name) for name in names)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        sum_length += len(name)\n    return sum_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Create an empty list to store the names that start with a lowercase letter\n    names_to_remove = []\n    # Loop through each name in the sample_names list\n    for name in sample_names:\n        # If the name starts with a lowercase letter, append it to the names_to_remove list\n        if name[0].islower():\n            names_to_remove.append(name)\n    # Create a new list to store the names after removing the names_to_remove list\n    names_to_keep = []\n    # Loop through each name in the sample_names list\n    for name in sample_names:\n        # If the name is not in the names_to_remove list, append it to the names_to_keep list\n        if name not in names_to_remove:\n            names_to_keep.append(name)\n    # Calculate the sum of the lengths of the names in the names_to_keep list\n    total_length = sum([len(name) for name in names_to_keep])\n    # Return the total length\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    names_list = [name for name in sample_names if name[0].isupper()] # filtering names starting with a lowercase letter\n    total_length = sum([len(name) for name in names_list]) # summing the lengths of the names in the list\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            pass\n        else:\n            sum_length += len(name)\n    return sum_length"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\((.*?)\\)')\n    items = pattern.sub('', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # remove the parenthesis from the string\n    items = re.sub('([()])', '', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^)]*\\)')\n    result = pattern.sub('', items)\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^)]*\\)')\n    return pattern.sub('', items)\n"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\((.*?)\\)')\n    items = re.sub(pattern, '', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    pattern = r'\\([^)]*\\)'\n    return re.sub(pattern, '', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\((.*?)\\)'\n    result = re.sub(pattern, '', items)\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Find all occurrences of parentheses\n    pattern = re.compile(r'\\([^)]*\\)')\n    matches = pattern.findall(items)\n    \n    # Loop through matches and remove the parentheses\n    for match in matches:\n        items = items.replace(match, '')\n    \n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    This function takes a string as input and removes all the parenthesis and what is inbetween them.\n    '''\n    # remove all the parenthesis from the string\n    items = re.sub(r'\\(.*?\\)', '', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    items = re.sub(r'\\([^()]*\\)', '', items)\n    return items"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    Find the nth nonagonal number using the formula n*(n+1)/2.\n    \"\"\"\n    if n < 2:\n        return None\n    else:\n        return (n*(n+1)/2)"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n\n    # Initialize variables\n    a = 1\n    b = 4\n\n    # Calculate the nth nonagonal number\n    for i in range(1, n+1):\n        c = a + b\n        print(c, end=' ')\n\n        # Update a and b\n        a = b\n        b = c\n\n    print()"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    nonagonal = n * (n + 1) // 2\n    return nonagonal"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 1 + 4 * (n-2)\n\nn = int(input(\"Enter the value of n: \"))\n\nresult = is_nonagonal(n)\n\nprint(\"The value of nth nonagonal number is:\", result)"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # initialize the count variable to 1\n    count = 1\n    # initialize the nonagonal number variable to 1\n    nonagonal = 1\n    \n    # loop through the range of n numbers\n    for i in range(1, n+1):\n        # add the current count to the nonagonal number\n        nonagonal += count\n        # update the count variable to the next number\n        count += 1\n    \n    # return the nonagonal number\n    return nonagonal"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return n * (n + 1) // 2\n"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    num = 1\n    for i in range(1, n+1):\n        num += i\n    return num"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    def is_pentagonal(num):\n        return 5 * num * (3 * num - 1) ** 2 == num ** 2\n    \n    def is_square(num):\n        return num ** 2 == 2 * (num ** 2 - 2 * num + 1)\n    \n    i = 1\n    while i <= n:\n        if is_pentagonal(i) and is_square(i - 1) and is_square(i + 1):\n            return i\n        i += 1\n    \n    return None"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_nonagonal(n): \n    '''\n    This function takes an integer n as input and returns True if it is a nonagonal number, otherwise it returns False.\n    A nonagonal number is a number that is not a multiple of 6.\n    '''\n\n    # check if n is divisible by 6\n    if n % 6 == 0:\n        return False\n\n    # calculate the nth nonagonal number\n    nth_nonagonal = n * (3 * n - 1) // 2\n\n    # return True if nth nonagonal number is divisible by 6, otherwise False\n    return nth_nonagonal % 6 == 0\n"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 2 * n + 1"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Remove all punctuations from the text\n    text = re.sub(r'[^\\w\\s]', '', text)\n    \n    # Split the text into words\n    words = text.split()\n    \n    # Loop through each word and check if it has 'z' in the middle\n    for i in range(len(words)):\n        if 'z' in words[i]:\n            # If it has 'z' in the middle, replace it with 'zz'\n            words[i] = words[i].replace('z', 'zz')\n    \n    # Join the words back into a string and return the result\n    return''.join(words)"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    This function takes a string as input and checks if it contains 'z', except at the start and end of the word.\n    '''\n    # Split the string into words using regular expressions\n    words = re.findall(r'\\b\\w+\\b', text)\n\n    # Loop through each word and check if it contains 'z'\n    for word in words:\n        if 'z' in word and word.startswith('z') and word.endswith('z'):\n            return True\n\n    # If we get here, no 'z' was found in the middle of a word\n    return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b\\w*[z]\\w*\\b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b[zZ].*\\b'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'(?<!\\w)z(?!\\w)'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'(?<=\\b)[zZ](?=\\b)'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # define a regular expression pattern to match words that start with 'z'\n    pattern = re.compile(r'^z.*z$')\n    # search for all words that match the pattern\n    words = re.findall(pattern, text)\n    # check if there are any words that start with 'z' and end with 'z'\n    if words:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b(?![a-zA-Z])(?:z)[a-zA-Z]*(?:z)(?![a-zA-Z])\\b'\n    matches = re.findall(pattern, text)\n    return True if len(matches) > 0 else False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = re.compile(r'\\b\\w*[zZ]\\w*\\b')\n    match = pattern.search(text)\n\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b[a-zA-Z]+\\b'\n    matches = re.findall(pattern, text)\n    for match in matches:\n        if match[0]!= 'z' and match[-1]!= 'z':\n            return True\n    return False"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    for i in range(k, n):\n        input[i], input[i-k] = input[i-k], input[i]\n    return input[:k] + input[k:n]"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n\n    # Splitting the array into two parts, left and right, based on the given position k\n    left = input[:k]\n    right = input[k:]\n\n    # Using the slicing technique to reverse the left part of the array\n    left = left[::-1]\n\n    # Combining the two parts of the array to get the final reversed array\n    reversed_array = left + right\n\n    return reversed_array"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if k > len(input):\n        return input\n    else:\n        input.reverse()\n        input[:k] = input[:k][::-1]\n        input[k:] = input[k:][::-1]\n        return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Reverse the array upto the given position k\n    for i in range(0, k):\n        temp = input[i]\n        input[i] = input[len(input)-i-1]\n        input[len(input)-i-1] = temp\n\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if k > len(input):\n        print(\"Invalid input. Please enter a valid position.\")\n    else:\n        n = len(input)\n        left = 0\n        right = k - 1\n\n        while left < right:\n            input[left], input[right] = input[right], input[left]\n            left += 1\n            right -= 1\n\n        for i in range(k, n):\n            input[i], input[left] = input[left], input[i]\n            left += 1"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k): \n    \"\"\"\n    This function takes an array and a position k as input and returns the reversed array upto position k.\n    \"\"\"\n    n = len(input)\n    reversed_array = input[n-k:n]\n    for i in range(n-k, -1, -1):\n        if i == n-k:\n            reversed_array[i] = input[i]\n        else:\n            reversed_array[i] = input[n-k-i]\n    return reversed_array"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    for i in range(len(input)):\n        if i < k:\n            input[i] = input[len(input)-1-i]\n        else:\n            input[i] = input[i-k]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k):\n    n = len(input)\n    if k > n:\n        return \"Error: k should be less than or equal to the length of the array\"\n    elif k == 0:\n        return input\n    else:\n        input[0:k] = input[0:k][::-1]\n        return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    # reverse the array upto position k - 1\n    input[:k] = input[:k][::-1]\n    # reverse the remaining elements in the array\n    input[k:] = input[k:][::-1]\n    # return the reversed array\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Reverse the array up to the given position k-1\n    input[:k-1] = input[:k-1][::-1]\n    \n    # Reverse the remaining array elements\n    input[k-1:] = input[k-1:][::-1]\n    \n    return input"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return tuple(test_tup.items() + test_dict.items())"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_dict['key'] = 'value'\n    return (test_tup, test_dict)"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Add the dictionary to the tuple\n    new_tuple = (test_tup, test_dict)\n    # Return the new tuple\n    return new_tuple"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    new_tup = tuple(test_tup)\n    new_tup.update(test_dict)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Add a dictionary to a tuple.\n\n    Args:\n        test_tup (tuple): A tuple of values.\n        test_dict (dict): A dictionary of key-value pairs.\n\n    Returns:\n        A new tuple that contains all the values of the original tuple and the values of the dictionary.\n    \"\"\"\n    return test_tup + tuple(test_dict.values())"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # create a new dictionary with the key-value pairs of the original tuple\n    new_dict = {key:value for key, value in zip(test_tup, test_tup)}\n    # add the new dictionary to the tuple\n    new_tuple = test_tup + (new_dict,)\n    return new_tuple"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    # Convert the dictionary to a tuple\n    test_dict = tuple(test_dict.items())\n    # Add the dictionary to the tuple\n    test_tup += (test_dict,)\n    # Return the updated tuple\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = tuple(test_tup)\n    new_dict = test_dict.copy()\n    new_dict.update(test_tup)\n    return new_dict"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return (test_tup, test_dict)"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    return tuple(test_tup) + tuple(test_dict.items())"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    # Initialize variables for maximum and current paths\n    max_avg = 0\n    current_avg = 0\n    # Initialize variables for current row and current path length\n    current_row = cost[0]\n    current_length = 1\n    # Loop through the matrix and calculate the current average\n    for i in range(1, N):\n        current_avg += current_row[i]\n        current_row.append(0)\n        current_length += 1\n        if i > 0:\n            current_avg -= current_row[i-1]\n        current_row[i] = 0\n    max_avg = max(max_avg, current_avg)\n    # Loop through the matrix again to find the maximum path\n    for j in range(1, N):\n        current_avg = 0\n        current_row = [0] * N\n        current_length = 1\n        for i in range(1, N):\n            current_row[i] = cost[i-1][j]\n            current_avg += current_row[i]\n            current_row[i] = 0\n            current_length += 1\n            if i > 0:\n                current_avg -= current_row[i-1]\n        if current_avg > max_avg:\n            max_avg = current_avg\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # initialize variables\n    N = len(cost)\n    max_avg = 0\n    visited = set()\n    path = []\n    \n    # function to check if a cell is valid to move to\n    def isValid(row, col):\n        return 0 <= row < N and 0 <= col < N and (row, col) not in visited\n    \n    # function to calculate the cost of moving to a cell\n    def getCost(row, col, direction):\n        return cost[row][col] if direction == 'right' else cost[row][N-col-1]\n    \n    # function to find the maximum average of a path\n    def findMaxAvg(row, col):\n        # if we reach the bottom right cell, return the average\n        if row == N-1 and col == N-1:\n            path.append((row, col))\n            visited.add((row, col))\n            return (cost[row][col] + sum(cost[row][i]*(i+1) for i in range(N)) + sum(cost[i][col]*(i+1) for i in range(N))) / (N*N+1)\n        \n        # try to move to the cells in the right direction\n        for i in range(N):\n            if isValid(row+i, col):\n                next_cost = getCost(row+i, col, 'right') + findMaxAvg(row, col+i)\n                if next_cost > max_avg:\n                    max_avg = next_cost\n                    path = [(row+i, col), (row, col+i)]\n                    visited = set([(row+i, col), (row, col+i)])\n        \n        # try to move to the cells in the down direction\n        for i in range(N):\n            if isValid(row+i, col):\n                next_cost = getCost(row+i, col, 'down') + findMaxAvg(row+i, col)\n                if next_cost > max_avg:\n                    max_avg = next_cost\n                    path = [(row+i, col), (row+i, col)]\n                    visited = set([(row+i, col)])\n        \n        # return the maximum average\n        return max_avg\n    \n    # find the maximum average of the path\n    findMaxAvg(0, 0)\n    \n    # return the path and the maximum average\n    return path, max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef maxAverageOfPath(cost):\n    \"\"\"\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost.\n    A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell.\n    We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    \"\"\"\n    # Get dimensions of the matrix\n    N = len(cost)\n    # Initialize variables\n    max_avg = float('-inf')\n    total_cost = 0\n    total_cells = 0\n    # Loop through all possible paths\n    for i in range(N):\n        for j in range(i+1, N):\n            # Initialize variables for current path\n            current_cost = 0\n            current_cells = 0\n            # Loop through all possible directions\n            directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n            for direction in directions:\n                # Get coordinates of the next cell in the current direction\n                next_i = i + direction[0]\n                next_j = j + direction[1]\n                # Check if next cell is within matrix bounds and has a cost\n                if 0 <= next_i < N and 0 <= next_j < N and cost[next_i][next_j] is not None:\n                    # Add cost of the next cell to the current cost\n                    current_cost += cost[next_i][next_j]\n                    # Increment the number of visited cells\n                    current_cells += 1\n            # Calculate the average cost of the current path\n            avg_cost = current_cost / current_cells\n            # Update maximum average found so far\n            if avg_cost > max_avg:\n                max_avg = avg_cost\n            # Update total cost and cells visited in the current path\n            total_cost += avg_cost * current_cells\n            total_cells += current_cells\n    # Return maximum average found\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    # Initialize variables\n    N = len(cost)\n    visited = [[0 for j in range(N)] for i in range(N)]\n    total_cost = 0\n    max_average = float('-inf')\n    \n    # Check all possible paths\n    for i in range(N):\n        for j in range(N):\n            # Base case: last cell visited\n            if i == N-1 and j == N-1:\n                total_cost += cost[i][j]\n                visited[i][j] = 1\n                max_average = max(max_average, total_cost / visited[i][j])\n                continue\n            \n            # Try to extend the path\n            if i < N-1 and visited[i+1][j] == 0:\n                total_cost += cost[i][j] + cost[i+1][j]\n                visited[i][j] = visited[i+1][j] + 1\n                max_average = max(max_average, total_cost / visited[i][j])\n            \n            if j < N-1 and visited[i][j+1] == 0:\n                total_cost += cost[i][j] + cost[i][j+1]\n                visited[i][j] = visited[i][j+1] + 1\n                max_average = max(max_average, total_cost / visited[i][j])\n            \n    return max_average"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    # Initialize variables\n    max_avg = 0\n    max_path = []\n    # Initialize a 2D array to store the visited cells\n    visited = [[False for j in range(n)] for i in range(n)]\n    # Initialize variables to keep track of the total cost and the number of visited cells\n    total_cost = 0\n    visited_cells = 0\n    # Iterate through each cell in the matrix\n    for i in range(n):\n        for j in range(n):\n            # If the cell has not been visited, continue\n            if visited[i][j]:\n                continue\n            # Initialize variables to keep track of the current cost and the path\n            current_cost = cost[i][j]\n            current_path = [[i, j]]\n            # Breadth-first search to find the maximum average\n            while True:\n                # If the current cell has reached the bottom-right cell, break the loop\n                if i == n-1 and j == n-1:\n                    break\n                # Move to the right\n                if not visited[i+1][j]:\n                    visited[i+1][j] = True\n                    current_cost += cost[i+1][j]\n                    current_path.append([i+1, j])\n                    visited_cells += 1\n                # Move to the bottom\n                if not visited[i][j+1]:\n                    visited[i][j+1] = True\n                    current_cost += cost[i][j+1]\n                    current_path.append([i, j+1])\n                    visited_cells += 1\n            # Calculate the average and update the maximum average if necessary\n            avg = current_cost / visited_cells\n            if avg > max_avg:\n                max_avg = avg\n                max_path = current_path\n    # Return the maximum average and the path\n    return max_avg, max_path"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    dp = [[float('-inf')] * N for _ in range(N)]\n    dp[0][0] = cost[0][0]\n    \n    for i in range(1, N):\n        dp[i][0] = max(dp[i-1][0] - cost[i][0], dp[i-1][1] + cost[i][0])\n    \n    for j in range(1, N):\n        dp[0][j] = max(dp[0][j-1] - cost[0][j], dp[1][j] + cost[0][j])\n    \n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = max(dp[i-1][j] - cost[i][j], dp[i][j-1] - cost[i][j], dp[i-1][j-1] + cost[i][j])\n    \n    return dp[N-1][N-1]"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    \"\"\"\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost.\n    A path is defined as a specific sequence of cells that starts from the top-left cell\n    and move only right or down and ends on bottom right cell.\n    We want to find a path with the maximum average over all existing paths.\n    Average is computed as total cost divided by the number of cells visited in the path.\n    \"\"\"\n    N = len(cost)\n    if N == 0:\n        return 0.0\n    # initialize the array to store the visited cells for each path\n    visited = [[0 for j in range(N)] for i in range(N)]\n    # initialize the array to store the total cost for each path\n    path_cost = [[0.0 for j in range(N)] for i in range(N)]\n    # initialize the initial path\n    current_path = [(0, 0)]\n    # initialize the current maximum average\n    max_average = 0.0\n    # initialize the current maximum path cost\n    max_path_cost = 0.0\n    # initialize the current number of visited cells\n    num_visited = 1\n    # loop until all paths have been visited\n    while num_visited < N*N:\n        # find the next move in the current path\n        (row, col) = current_path[-1]\n        if col == N-1:\n            # move down\n            next_move = (row+1, 0)\n        else:\n            # move right\n            next_move = (row, col+1)\n        # check if the next move is valid\n        if 0 <= next_move[0] < N and 0 <= next_move[1] < N:\n            # if it is, update the total cost and visited cells for the next path\n            path_cost[next_move[0]][next_move[1]] += cost[row][col]\n            visited[next_move[0]][next_move[1]] += 1\n            # update the current path and the current maximum average\n            current_path.append(next_move)\n            num_visited += 1\n            # compute the new maximum average and maximum path cost\n            new_max_average = max([path_cost[i][j] / visited[i][j] for i in range(N) for j in range(N) if visited[i][j] > 0])\n            new_max_path_cost = max([path_cost[i][j] for i in range(N) for j in range(N) if visited[i][j] > 0])\n            if new_max_average > max_average:\n                max_average = new_max_average\n                max_path_cost = new_max_path_cost\n    return max_average"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    max_avg = float('-inf')\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                continue\n            if i == 0:\n                path = [cost[i][j]]\n            elif j == 0:\n                path = [cost[i][j]]\n            else:\n                path = [cost[i][j]] + maxAverageOfPath(cost[:i]+cost[i+1:])\n            avg_path = sum(path)/len(path)\n            max_avg = max(max_avg, avg_path)\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    def dfs(i, j, path, current_sum, total_sum, total_cells):\n        if i == n-1 and j == n-1:\n            total_sum += current_sum\n            total_cells += 1\n            path.append((i, j))\n            if total_cells > 1:\n                average = total_sum / total_cells\n                if average > max_average:\n                    max_average = average\n            path.pop()\n            return\n        \n        if i < n and j < n:\n            dfs(i+1, j, path, current_sum+cost[i][j], total_sum, total_cells)\n            dfs(i, j+1, path, current_sum+cost[i][j], total_sum, total_cells)\n    \n    n = len(cost)\n    max_average = 0\n    dfs(0, 0, [], 0, 0, 0)\n    return max_average"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    dp = [[0 for j in range(N)] for i in range(N)]\n    max_avg = 0\n    \n    # Initialize first row and column\n    for i in range(N):\n        dp[0][i] = cost[0][i]\n    for j in range(N):\n        dp[j][0] = cost[j][0]\n        \n    # Compute the rest of the matrix\n    for i in range(1, N):\n        for j in range(1, N):\n            right_cost = cost[i][j] + dp[i-1][j]\n            down_cost = cost[i][j] + dp[i][j-1]\n            max_cost = max(right_cost, down_cost)\n            dp[i][j] = max_cost\n            max_avg = max(max_avg, max_cost)\n            \n    return max_avg"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    result = {}\n    for student, data in students.items():\n        if data[0] > h and data[1] > w:\n            result[student] = data\n    return result"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    # Initialize an empty list to store the filtered students\n    filtered_students = []\n\n    # Iterate over the students dictionary\n    for student, info in students.items():\n        # Extract the student height and weight\n        student_height, student_weight = info\n\n        # Check if the student meets the minimum height and weight criteria\n        if student_height > h and student_weight > w:\n            # If yes, add the student to the filtered students list\n            filtered_students.append(student)\n\n    # Return the filtered students list\n    return filtered_students\n"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_data(students, h, w):\n    \"\"\"\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    \"\"\"\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    # loop through each student in the dictionary\n    for name, data in students.items():\n        # unpack the tuple of height and weight\n        height, weight = data\n        # check if the student has a height and weight above the minimum\n        if height > h and weight > w:\n            print(f\"{name} is above the minimum height of {h} and weight of {w}.\")"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student_name, student_data in students.items():\n        if student_data[0] > h and student_data[1] > w:\n            filtered_students[student_name] = student_data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_data(students, h, w):\n    # create an empty dictionary to store the filtered students\n    filtered_students = {}\n\n    # iterate over the students in the input dictionary\n    for name, data in students.items():\n        height, weight = data\n        # check if the student has a height and weight above the given minimum values\n        if height > h and weight > w:\n            # add the student to the filtered dictionary\n            filtered_students[name] = data\n\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    same_indices = []\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            same_indices.append(i)\n    return same_indices"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    \"\"\"\n    The input is defined as two lists of the same length.\n    Write a function to count indices where the lists have the same values.\n    \"\"\"\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    # Create a dictionary to store the count of each number in nums1\n    count_dict1 = {}\n    for num in nums1:\n        count_dict1[num] = count_dict1.get(num, 0) + 1\n    \n    # Create a dictionary to store the count of each number in nums2\n    count_dict2 = {}\n    for num in nums2:\n        count_dict2[num] = count_dict2.get(num, 0) + 1\n    \n    # Create a list to store the indices where the numbers are the same\n    same_indices = []\n    \n    # Loop through each number in count_dict1\n    for num1 in count_dict1:\n        # Check if the number is also in count_dict2\n        if num1 in count_dict2:\n            # Check if the count of the number in nums1 is the same as the count of the number in nums2\n            if count_dict1[num1] == count_dict2[num1]:\n                # Add the indices where the numbers are the same to the same_indices list\n                for index, num2 in enumerate(nums2):\n                    if num1 == num2:\n                        same_indices.append((nums1.index(num1), index))\n    \n    return same_indices"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if all(eq(nums1[i], nums2[j]) for j in range(len(nums2))):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # Use the built-in `zip` function to compare elements of the two lists\n    pairs_count = sum([1 for pair in zip(nums1, nums2) if pair == pair[::-1]])\n    return pairs_count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # Initialize the count to zero\n    count = 0\n    # Loop through the first list\n    for i in range(len(nums1)):\n        # Check if the current element is equal to the corresponding element in the second list\n        if eq(nums1[i], nums2[i]):\n            # Increment the count if the elements are equal\n            count += 1\n    # Return the count\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    for digit in str(base):\n        total += int(digit) ** power\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Initialize a variable to store the sum\n    sum = 0\n    \n    # Convert the base to a string to iterate over its digits\n    base_str = str(base)\n    \n    # Iterate over each digit of the base and calculate the sum of all digits raised to the power\n    for digit in base_str:\n        digit_int = int(digit)\n        digit_power = digit_int ** power\n        sum += digit_power\n        \n    # Return the sum of all digits raised to the power\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Convert base to a string\n    base_str = str(base)\n    \n    # Initialize a variable to hold the sum of digits\n    sum_digits = 0\n    \n    # Loop through each digit in the base string\n    for digit in base_str:\n        # Convert the digit to an integer\n        digit_int = int(digit)\n        \n        # Add the integer value of the digit to the sum of digits\n        sum_digits += digit_int ** power\n    \n    # Return the sum of digits raised to the power\n    return sum_digits ** (1/power)"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # convert base to a string\n    base_str = str(base)\n    # initialize the sum variable to 0\n    sum_digits = 0\n    # iterate through the string and add the digits to the sum variable\n    for digit in base_str:\n        sum_digits += int(digit)\n    # return the sum multiplied by the power\n    return sum_digits * power"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # convert the base and power to integers\n    base = int(base)\n    power = int(power)\n\n    # initialize the sum variable to zero\n    total = 0\n\n    # loop through each digit of the base and add its value to the total\n    while base > 0:\n        digit = base % 10  # get the last digit of the base\n        total += digit  # add the digit to the total\n        base //= 10  # remove the last digit from the base\n\n    # calculate the sum of all digits to the specified power\n    return total ** power"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    \"\"\"\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    \"\"\"\n    # Convert the base to a string\n    base_str = str(base)\n\n    # Initialize a sum variable\n    sum = 0\n\n    # Iterate over each digit in the base string\n    for digit in base_str:\n        # Convert the digit to an integer\n        digit_int = int(digit)\n\n        # Calculate the sum of the digit raised to the power of the power variable\n        digit_sum = digit_int ** power\n\n        # Add the digit sum to the sum variable\n        sum += digit_sum\n\n    # Return the sum of all digits raised to the power of the power variable\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    for i in range(power):\n        sum += int(base) % 10\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # convert base to string\n    base_str = str(base)\n    # initialize sum to 0\n    sum_digits = 0\n    # iterate through each digit in the base string\n    for digit in base_str:\n        # convert digit to integer and add to sum_digits\n        sum_digits += int(digit)\n    # multiply by power and add to sum_digits\n    sum_digits *= power\n    return sum_digits"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    digits = []\n    while base > 0:\n        digits.append(base % 10)\n        base //= 10\n    total = 0\n    for digit in digits:\n        total += digit ** power\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # initialize the result variable to 0\n    result = 0\n    \n    # loop through each digit of the base\n    for digit in str(base):\n        # convert each digit to an integer and add it to the result variable to get the sum of all digits\n        result += int(digit) ** power\n    \n    # return the result\n    return result"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # use regular expression to find all occurrences of quotation marks \" \" in the string\n    pattern = r'\"([^\"]+)\"'\n    matches = re.findall(pattern, text1)\n    # return list of matched strings\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # define the pattern to match quotation marks\n    pattern = r'\"([^\"]*)\"'\n    \n    # use the pattern to find all the matches in the text\n    matches = re.findall(pattern, text1)\n    \n    # return a list of all the extracted quotations\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]+)\"' # pattern for quotation marks\n    matches = re.findall(pattern, text1) # find all matches using regex pattern\n    return matches # return list of matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n\n    # using regular expressions to extract values between quotation marks\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text1)\n\n    # returning a list of all the matched values\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # define the regular expression pattern to match quotation marks \" \"\n    pattern = r'\"[^\"]*\"'\n    # use the re.findall() function to find all the matches in the input string\n    matches = re.findall(pattern, text1)\n    # return the values between the quotation marks \" \"\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Function to extract values between quotation marks \" \" of the given string.\n    '''\n\n    # Remove all the special characters and convert to lowercase\n    text2 = re.sub('[^a-zA-Z0-9\\s]', '', text1.lower())\n\n    # Split the string by space and quotation marks and get only the values\n    text3 = text2.split('\" ')\n\n    # Get the values between quotation marks\n    text4 = [x for x in text3 if x[0] == x[-1] and x[0] in ['\"', \"'\"]]\n\n    # Combine the values and return the string\n    return''.join(text4)"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # Define the regular expression pattern to match quotation marks\n    pattern = r'\"(.*?)\"'\n    # Use the re.findall() function to find all matches of the pattern in the text\n    matches = re.findall(pattern, text1)\n    # Join the matches into a single string using the join() method\n    extracted_text = \" \".join(matches)\n    # Return the extracted_text\n    return extracted_text"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_quotation(text):\n    \"\"\"\n    Extract values between quotation marks \" \" of the given string.\n    \"\"\"\n    pattern = r'\"([^\"]*)\"'\n    return re.findall(pattern, text)"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_quotation(text):\n    pattern = r'(?<=\\s)\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup)-1):\n        result_tup += (test_tup[i]*test_tup[i+1],)\n    result_tup += (test_tup[-1]*test_tup[0],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    return tuple(t_i * t_j for t_i, t_j in zip(test_tup, test_tup[1:]))"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    t = []\n    for i in range(len(test_tup)-1):\n        t.append(test_tup[i] * test_tup[i+1])\n    return tuple(t)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result_tup = []\n    for i in range(N):\n        result_tup.append(test_tup[i] * test_tup[i+1])\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result_tup = ()\n    for i in range(N):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    t_list = list(test_tup)\n    t_list.pop()\n    for i in range(len(t_list)-1):\n        t_list[i] *= t_list[i+1]\n    return tuple(t_list)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # Initialize an empty tuple to store the result\n    result = ()\n    # Iterate over the elements of the input tuple and multiply each element with the next element\n    for i in range(len(test_tup)-1):\n        result = result + (test_tup[i] * test_tup[i+1],)\n    # Append the last element to the result tuple\n    result = result + (test_tup[-1],)\n    # Return the result tuple\n    return result"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n\n    # initialize an empty tuple to hold the result\n    result = ()\n\n    # loop through each element in the input tuple\n    for i in range(len(test_tup) - 1):\n        # multiply the current element with the next one and append the result to the result tuple\n        result += (test_tup[i] * test_tup[i+1],)\n\n    # return the final result tuple\n    return result"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    result = []\n    for i in range(N):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup)-1):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_list(lst1, lst2):\n    return [a + b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a + b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a + b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    This function takes two lists as input, lst1 and lst2, and returns a new list with the sum of the elements in lst1 and lst2.\n    '''\n    return [lst1[i] + lst2[i] for i in range(len(lst1))]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    This function takes two lists and returns their sum as a list.\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1,lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    sum_lst = []\n    for i in range(len(lst1)):\n        sum_lst.append(lst1[i]+lst2[i])\n    return sum_lst"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Group the list by the first element of each group\n    grouped_nums = groupby(nums)\n    # Remove the group key from the keys of the grouped list\n    grouped_nums = [(k, list(g)) for k, g in grouped_nums]\n    # Join the values of the grouped list into a single list\n    return [num for sublist in grouped_nums for num in sublist[1]]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    \"\"\"\n    Write a function to remove consecutive duplicates of a given list.\n    \"\"\"\n    return [list(g)[0] for k, g in groupby(sorted(nums)) if k == 0]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Group the list by consecutive duplicates\n    grouped_nums = groupby(nums, lambda x: x)\n\n    # Remove the consecutive duplicates and return the result\n    result = []\n    for item in grouped_nums:\n        if len(list(item)) == 1:\n            result.append(item[0])\n        else:\n            result.append(item[0])\n\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    seen = {}\n    result = []\n\n    for num in nums:\n        if num in seen:\n            continue\n        seen[num] = True\n        result.append(num)\n\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n\n    # Group the list by consecutive duplicates\n    grouped = groupby(nums)\n\n    # Remove consecutive duplicates by iterating through the grouped list and appending each group to a new list\n    result = []\n    for group in grouped:\n        if len(list(group)) > 1:\n            result.append(list(group))\n\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    unique_nums = []\n    for i, num in enumerate(nums):\n        if i == 0 or nums[i-1]!= num:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Remove consecutive duplicates of a given list.\n    '''\n    return [num for num, group in groupby(sorted(nums)) if not (group.next() or group.next() is None)]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n\n    # Create a list of tuples with consecutive numbers as a group\n    grouped = list(groupby(enumerate(nums), lambda x: x[0] - x[1]))\n\n    # Remove any tuples where the key is greater than 1 (i.e. consecutive duplicates)\n    result = [(group[0][0], max(group[1])) for group in grouped if len(group) > 1]\n\n    # Convert the list of tuples back to a list\n    return [x[0] for x in result]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    \"\"\"\n    Remove consecutive duplicates of a given list.\n    \"\"\"\n    # Use groupby() to group the list by the same consecutive elements\n    grouped_nums = groupby(nums)\n    # Iterate over the grouped elements and remove consecutive duplicates\n    result = []\n    for key, group in grouped_nums:\n        # If the group is not empty, add it to the result list\n        if group:\n            result.append(list(group)[0])\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    \"\"\"\n    This function takes a list of integers as input and returns a list of consecutive duplicates removed from the input list.\n    \"\"\"\n    # Create a generator object that groups the numbers by their positions\n    grouped_nums = groupby(enumerate(nums), key=lambda x: x[0])\n\n    # Convert the generator object to a list\n    num_list = list(grouped_nums)\n\n    # Initialize a variable to store the consecutive duplicates\n    consecutive_duplicates_list = []\n\n    # Iterate through the list of grouped numbers and keep track of the consecutive duplicates\n    for i, group in num_list:\n        # Check if the group has more than one element\n        if len(list(group)) > 1:\n            # Append the first element to the consecutive duplicates list\n            consecutive_duplicates_list.append(list(group)[0])\n\n    # Return the list of consecutive duplicates\n    return consecutive_duplicates_list"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    lateral_surface_area = math.pi * r**2 * h\n    return lateral_surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    lateral_area = math.pi*(r**2)*h\n    return lateral_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    This function takes two parameters, radius r and height h, and returns the lateral surface area of a cone.\n    '''\n    return math.pi * r ** 2 * h"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = math.pi * (r ** 2 + h ** 2)\n    return area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Find the lateral surface area of a cone using Heron's formula\n    s = (3 * r ** 2 + h ** 2) ** 0.5\n    area = math.pi * r ** 2 * s\n    return area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Compute the volume of the cone\n    vol = math.pi * r**2 * h\n    \n    # Compute the lateral surface area of the cone\n    lateral_area = 2 * r * h\n    \n    return lateral_area, vol"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return 2*math.pi*r*h"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Calculate the lateral surface area of a cone given its radius and height.\n    '''\n    surface_area = math.pi * r * (r + h)\n    return surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # formula to calculate lateral surface area of a cone\n    lateral_surface_area = math.pi * r**2 * h\n    return lateral_surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi*r**2*h"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'[ ]+', ':', text)\n    text = re.sub(r'[,.]', ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    special_chars = r'[\\s.,]'\n    return re.sub(special_chars, ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[\\s,\\.]', ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef replace_specialchar(text):\n    \"\"\"\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    \"\"\"\n    text = re.sub(r'[^\\w\\s]', '', text) # remove special characters\n    text = re.sub(r'\\s+','', text) # replace multiple spaces with one space\n    text = re.sub(r'[^\\w\\s]+', ':', text) # replace remaining special characters with colon\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Use a regular expression to replace all occurrences of spaces, commas, or dots with a colon\n    text = re.sub(r'\\s+|,\\s+|\\.+|:+', ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = re.compile(r'\\s+|,|\\.')\n    return pattern.sub(':', text)\n\ntext = \"This is a sample text with spaces, commas, and dots.\"\nnew_text = replace_specialchar(text)\nprint(new_text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Replace spaces with a colon\n    text = re.sub(r'\\s+', ':', text)\n    # Replace commas with a colon\n    text = re.sub(r',+', ':', text)\n    # Replace dots with a colon\n    text = re.sub(r'\\.$', ':', text)\n    # Replace multiple colons with a single colon\n    text = re.sub(r':+', ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'[^\\w\\s]', '', text)\n    text = text.replace(' ', ':')\n    text = text.replace(',', ':')\n    text = text.replace('.', ':')\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[\\s,.]', ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'\\s|,|\\.', ':', text)\n    return text"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    # loop through the array\n    for i in range(len(A)):\n        # if the current element is equal to x, return the index\n        if A[i] == x:\n            return i"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left, right = 0, len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            # check if x is found at the mid index\n            if mid == 0 or A[mid - 1]!= x:\n                return mid\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left, right = 0, len(A) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            if mid == 0 or A[mid-1]!= x:\n                return mid\n            else:\n                right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return -1 # not found"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    left, right = 0, len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            if mid == 0 or A[mid-1]!= x:\n                return mid\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if A[mid] == x:\n            if mid == 0 or A[mid-1]!= x:\n                return mid\n            else:\n                right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    This function takes in a sorted array and a number x and returns the index of the first occurrence of x in the array.\n    \"\"\"\n    # Initialize the left and right indices\n    left = 0\n    right = len(A) - 1\n    \n    # Loop through the array until the left index is greater than or equal to the right index\n    while left < right:\n        # Find the middle index\n        mid = (left + right) // 2\n        \n        # If the middle element is equal to x, return the middle index\n        if A[mid] == x:\n            return mid\n        \n        # If the middle element is greater than x, update the right index to mid\n        elif A[mid] > x:\n            right = mid - 1\n            \n        # If the middle element is less than x, update the left index to mid + 1\n        else:\n            left = mid + 1\n            \n    # If the loop completes without finding the first occurrence of x, return -1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    This function takes in a sorted array A and a number x as input and returns the index of the first occurrence of x in A.\n    If x is not found in A, it returns -1.\n    \"\"\"\n    # Initialize the left and right pointers of the search range\n    left = 0\n    right = len(A) - 1\n\n    # Loop through the array until the left pointer is greater than the right pointer\n    while left <= right:\n        # Calculate the mid-point of the search range\n        mid = (left + right) // 2\n\n        # If the mid element is equal to x, return its index\n        if A[mid] == x:\n            return mid\n\n        # If the mid element is less than x, update the search range to the right half\n        elif A[mid] < x:\n            left = mid + 1\n\n        # If the mid element is greater than x, update the search range to the left half\n        else:\n            right = mid - 1\n\n    # If x is not found in A, return -1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    i = 0\n    while i < len(A) and A[i] < x:\n        i += 1\n    if i == len(A) or A[i]!= x:\n        return -1\n    else:\n        return i"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    # Initialize variables for the first and last indices\n    first_index = 0\n    last_index = len(A) - 1\n\n    # Binary search to find the first occurrence of x in A\n    while first_index <= last_index:\n        mid_index = (first_index + last_index) // 2\n        if A[mid_index] == x:\n            # If x is found at the midpoint, check if it's also the first occurrence\n            if mid_index == 0 or A[mid_index - 1]!= x:\n                return mid_index\n            # If x is found at the midpoint and the previous element is not equal to x, return midpoint + 1\n            else:\n                return mid_index + 1\n        elif A[mid_index] < x:\n            first_index = mid_index + 1\n        else:\n            last_index = mid_index - 1\n\n    # If x is not found in A, return -1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low = 0\n    high = len(A) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        if A[mid] == x:\n            # If x is found at mid, then check if it is at the left or right of mid\n            if mid == 0 or A[mid - 1] < x:\n                return mid\n            else:\n                high = mid - 1\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    # If x is not found, return -1\n    return -1"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n\n    n = len(arr)\n    subarray_sum = 0\n    result = 0\n\n    for i in range(n):\n        subarray_sum += arr[i]\n        result += subarray_sum * arr[i]\n\n    return result"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    ans = 0\n    for i in range(n):\n        for j in range(i, n):\n            curr_prod = 1\n            for k in range(i, j+1):\n                curr_prod *= arr[k]\n            ans += curr_prod\n    return ans"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    # Initialize the variables\n    n = len(arr)\n    sublist_sum = []\n    max_sum = float('-inf')\n    \n    # Calculate the sum of products of sublists for all subarrays\n    for i in range(1, n+1):\n        temp_sum = 1\n        for j in range(n-i+1):\n            temp_sum *= arr[j]\n        sublist_sum.append(temp_sum)\n        max_sum = max(max_sum, temp_sum)\n    \n    # Calculate the sum of products of sublists for all subarrays\n    for i in range(n-1, -1, -1):\n        temp_sum = 1\n        for j in range(i+1, n):\n            temp_sum *= arr[j]\n        sublist_sum[i] *= temp_sum\n    \n    # Calculate the sum of products of sublists for all subarrays\n    for i in range(1, n+1):\n        temp_sum = sublist_sum[i-1] - sublist_sum[i-2]\n        max_sum = max(max_sum, temp_sum)\n    \n    return max_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    # Create a table to store the products of sublists\n    prod_table = [[0] * (n+1) for i in range(n+1)]\n\n    # Initialize the first row and column of the table\n    for i in range(n+1):\n        prod_table[i][0] = 1\n        prod_table[0][i] = 1\n\n    # Fill the remaining table values\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            prod_table[i][j] = arr[i-1] * prod_table[i-1][j]\n\n    # Find the sum of products of all sublists\n    sum_prod = 0\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            sum_prod += prod_table[i][j]\n\n    return sum_prod"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n\n    # finding sum of products of all sublists\n    n = len(arr)\n    sub_prod = [1] * n\n\n    for i in range(1, n):\n        sub_prod[i] = sub_prod[i-1] * arr[i-1]\n\n    # finding sum of products of all possible sublists\n    sub_sum = 0\n    for i in range(n):\n        sub_sum += sub_prod[i]\n\n    return sub_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    if not arr:\n        return 0\n    elif len(arr) == 1:\n        return arr[0]\n    else:\n        result = 0\n        for i in range(1, len(arr)):\n            result += arr[i] * (i + 1)\n        return result + sum_Of_Subarray_Prod(arr[1:])"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    dp = [0] * n\n    dp[0] = arr[0]\n\n    for i in range(1, n):\n        dp[i] = dp[i - 1] * arr[i]\n\n    sum_prod = 0\n    for i in range(n):\n        sum_prod += dp[i] * arr[i]\n\n    return sum_prod"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    max_sum = 0\n    max_product = 0\n\n    for i in range(n):\n        temp_sum = 1\n        for j in range(i, n):\n            temp_sum *= arr[j]\n            if temp_sum > max_sum:\n                max_sum = temp_sum\n                max_product = 1\n            elif temp_sum == max_sum:\n                max_product *= arr[j]\n\n    return max_sum, max_product"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n\n    def helper(start, end):\n        if start == end:\n            return 1\n\n        if start > end:\n            return 0\n\n        return arr[start] * helper(start+1, end) + helper(start, end-1)\n\n    total = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            total += helper(i, j)\n\n    return total"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    \"\"\"\n    Write a python function to find sum of products of all possible sublists of a given list.\n    \"\"\"\n    n = len(arr)\n    prod = 1\n    result = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            sub_arr = arr[i:j]\n            prod *= 1\n            for k in range(len(sub_arr)):\n                prod *= sub_arr[k]\n            result += prod\n    return result"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Initialize the left and right bits of n\n    left_bit = n & 1\n    right_bit = n >> 1\n    \n    # Toggle the middle bits\n    middle_bit = 1 - left_bit - right_bit\n    \n    # Combine the left and right bits with the middle bits to get the final result\n    result = (left_bit << 1) | middle_bit\n    \n    # Return the final result\n    return result"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    mask = ~(1 << (n % 32))  \n    n = n ^ (mask << (n % 32))  \n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    \"\"\"\n\n    # create an array of binary values of length n\n    binary = [str(n)[i] for i in range(n)]\n\n    # toggle all bits except first and last\n    for i in range(1, len(binary) - 1):\n        if binary[i] == '1':\n            binary[i] = '0'\n        else:\n            binary[i] = '1'\n\n    # convert array back to integer and return\n    return int(''.join(binary), 2)"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Toggle bits of the number except the first and the last bit.\n    https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    \"\"\"\n    # convert the integer to a binary string\n    binary_str = bin(n)[2:]\n    # count the number of bits set to 1 in the binary string\n    num_ones = binary_str.count('1')\n    # set the middle bit to 1\n    middle_bit = '0' if num_ones % 2 == 0 else '1'\n    # create a new binary string with the middle bit toggled\n    new_binary_str = binary_str[:5] + middle_bit + binary_str[6:]\n    # convert the binary string back to an integer\n    new_n = int(new_binary_str, 2)\n    return new_n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    first_bit = n & 1 # get the first bit of the number\n    last_bit = n & (2 ** 31 - 1) # get the last bit of the number\n\n    # toggle bits except first and last bits\n    toggled_number = n ^ first_bit ^ last_bit\n\n    return toggled_number"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit.\n    \"\"\"\n    # first and last bits\n    f = n & 0x55555555 # first 2 bits\n    l = n & 0xAAAAAAAA # last 2 bits\n    \n    # toggle middle bits\n    m = n ^ f ^ l\n    m = m ^ (m >> 1) # toggle middle 4 bits\n    \n    # combine the first and last bits\n    result = f | m | l\n    \n    return result"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit.\n    \"\"\"\n\n    # Create a bitmask that has 1's in the first and last positions, respectively\n    mask = 1 << (n.bit_length() - 1)\n\n    # Get the number with the first and last bits toggled\n    result = n ^ mask\n\n    return result"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Find the position of the first and last bits\n    index1 = binary.index('1', n)\n    index2 = binary.index('1', n, index1+1)\n    \n    # Toggle all bits except the first and last bits\n    n_toggle = n ^ ((1 << (index1+1)) | (1 << index1) | (1 << index2))\n    \n    # Convert the toggled number to decimal\n    n_decimal = int(binary.replace('1', '0', n_toggle), 2)\n    \n    return n_decimal"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    This function takes an integer n as input and returns the integer with the middle bits toggled.\n    For example, if n = 10101010101, then the middle bits will be changed to 01010101010.\n    \"\"\"\n    # Initialize a variable to keep track of the number of bits to toggle\n    middle_bits = 0\n    # Initialize a variable to keep track of the bits to toggle\n    bits_to_toggle = []\n    # Loop through the bits of the number\n    for i in range(1, len(bin(n)[2:])):\n        # If the current bit is not the first or the last bit\n        if i!= 0 and i!= len(bin(n)[2:]) - 1:\n            # Add the current bit to the list of bits to toggle\n            bits_to_toggle.append(i)\n            # Increment the variable to keep track of the number of bits to toggle\n            middle_bits += 1\n    \n    # Toggle the middle bits of the number\n    for i in range(middle_bits):\n        # Loop through the list of bits to toggle and toggle the i-th bit\n        for bit in bits_to_toggle:\n            if bit == i:\n                n ^= 1 << bit\n    \n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_middle_bits(n):\n    # function to toggle bits of the number except the first and the last bit\n    def toggle_bits(num, bit_index):\n        if bit_index == 0:\n            return (num & 0xFFFFFF00)\n        elif bit_index == 23:\n            return (num & 0xFF0000FF)\n        else:\n            return (num ^ (1 << bit_index))\n\n    # calculate the length of the binary representation of the input number\n    num_len = len(bin(n)[2:])\n\n    # loop through the number of bits and toggle each bit except the first and the last bit\n    for bit_index in range(1, num_len - 2):\n        n = toggle_bits(n, bit_index)\n\n    return n\n"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_left(a, x)\n    if index > 0 and a[index - 1] == x:\n        index -= 1\n    return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    low = 0\n    high = len(a) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if a[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return low"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    if index == len(a):\n        return index\n    elif a[index] == x:\n        return index\n    else:\n        return index - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    return index if index!= len(a) and a[index] == x else index + 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # Initialize the left and right pointers for the search range\n    left = 0\n    right = len(a) - 1\n    \n    # Perform the binary search on the search range\n    while left <= right:\n        mid = (left + right) // 2\n        if a[mid] == x:\n            return mid\n        elif a[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    # If the value is not found, return -1 to indicate that it should be inserted at the left of the range\n    return -1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Find the left insertion point for a value in sorted order using the bisect module.\n\n    :param a: the sorted list of values\n    :type a: list\n    :param x: the value to find the insertion point for\n    :type x: int\n    :return: the index of the left insertion point, or -1 if the value is not in the list\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    else:\n        return -1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    if index == len(a) or a[index]!= x:\n        return index\n    else:\n        return index - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # Use bisect to find the left insertion point for the specified value x in the sorted list a\n    index = bisect.bisect_left(a, x)\n    \n    # Return the index if the value is present in the list, otherwise return -1\n    if index!= len(a) and a[index] == x:\n        return index\n    else:\n        return -1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    if index == len(a):\n        return len(a)\n    elif a[index] == x:\n        return index\n    elif a[index] < x:\n        return left_insertion(a[index:], x)\n    else:\n        return left_insertion(a[:index], x)"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_left(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    else:\n        return bisect.bisect_right(a, x)"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pattern = re.compile(regex)\n    if pattern.match(string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re \n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    return re.match(regex, string)"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re \n\ndef check_str(string): \n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.match(regex, string): \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    \"\"\"\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    \"\"\"\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef check_str(string):\n    regex = '^([aeiouAEIOU])'\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re \n\ndef check_str(string): \n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.match(regex, string): \n        print(\"Starting with a vowel\")\n    else: \n        print(\"Not starting with a vowel\")"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Write a function to calculate the geometric sum of n-1.\n    \"\"\"\n    # Base case\n    if n == 1:\n        return 1\n    else:\n        # Recursive case\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Write a function to calculate the geometric sum of n-1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Write a function to calculate the geometric sum of n-1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 0\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits.\n    \"\"\"\n    if n < 1:\n        return -1\n    \n    # find the smallest triangular number that has n digits\n    triangular_num = (int(math.pow(10, n-1)) * (1 + math.sqrt(5))) / 2\n    \n    # find the index of this number\n    index = math.floor(triangular_num/math.sqrt(5)) - 1\n    \n    # check if the triangular number has n digits\n    if len(str(triangular_num)) == n:\n        return index\n    else:\n        # if not, then check if it has (n-1) digits\n        triangular_num -= math.floor(triangular_num/math.sqrt(5))*math.sqrt(5)\n        if len(str(triangular_num)) == n-1:\n            return index\n        else:\n            # if neither, return -1\n            return -1"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # find the square root of n(n+1)/2 using math library\n    root = math.sqrt(n*(n+1)/2)\n\n    # subtract n from the square root\n    triangular_num = int(root) - n\n\n    # return the index of the triangular number\n    return triangular_num"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. \n    https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # find the length of the largest triangular number \n    triangular_length = math.sqrt(5*n + 1) + 1 \n    triangular_length = int(triangular_length) \n    triangular_numbers = [0] * triangular_length \n    triangular_numbers[0] = 1 \n    triangular_numbers[1] = 5 \n\n    # loop through the triangular numbers and find the smallest one with n digits \n    for i in range(2, triangular_length): \n        triangular_numbers[i] = 10**(n-1) * triangular_numbers[i-1] + 5 \n\n    smallest_triangular_number = 10**(n-1) * triangular_numbers[triangular_length-2] + 5 \n\n    # find the index of the smallest triangular number in the list of triangular numbers \n    for i in range(triangular_length-2, -1, -1): \n        if triangular_numbers[i] == smallest_triangular_number: \n            return i "
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n\n    # Initialize the smallest triangular number with n digits to 10^n\n    smallest_triangular = 10**(n)\n\n    # Initialize the smallest triangular number with n-1 digits to 1\n    smallest_triangular_prev = 1\n\n    # Initialize the index to 1\n    index = 1\n\n    # Initialize the count of digits in the smallest triangular number with n digits\n    count = n\n\n    # Loop till the count reaches n\n    while count > 0:\n\n        # Calculate the next smallest triangular number with n-1 digits\n        next_smallest_triangular = smallest_triangular_prev + smallest_triangular\n\n        # Update the smallest triangular number with n-1 digits\n        smallest_triangular_prev = smallest_triangular\n\n        # Update the count of digits in the next smallest triangular number with n-1 digits\n        count -= 1\n\n        # Update the smallest triangular number with n digits\n        smallest_triangular = next_smallest_triangular\n\n        # Update the index of the smallest triangular number with n digits\n        index += 1\n\n    # Return the index of the smallest triangular number with n digits\n    return index\n"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_palindrome(n):\n    return str(n) == str(n)[::-1]\n\ndef count_digit(n):\n    count = 0\n    while n > 0:\n        count += 1\n        n //= 10\n    return count\n\ndef find_Index(n):\n    if n <= 3:\n        return n\n\n    x = 3\n    y = 1\n\n    while count_digit(x) < n:\n        y += x\n        x += 1\n\n    if is_palindrome(x):\n        return x\n    else:\n        return find_Index(n)\n\nn = int(input(\"Enter the number of digits: \"))\nprint(\"The index of smallest triangular number with\", n, \"digits is:\", find_Index(n))"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. \n    '''\n    max_num = 10**(n-1)\n    for i in range(max_num, 0, -1):\n        for j in range(max_num, 0, -1):\n            for k in range(max_num, 0, -1):\n                if i + j + k == 2*max_num:\n                    return (max_num - i, max_num - j, max_num - k)\n    return None\n\nn = int(input(\"Enter the number of digits: \"))\nprint(\"The index of the smallest triangular number with\", n, \"digits is\", find_Index(n))"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits.\n    \"\"\"\n    # Compute the number of digits in n\n    num_digits = len(str(n))\n\n    # Compute the smallest triangular number with n digits\n    triangular_number = int(n * (n + 1) / 2)\n\n    # Initialize an array to store the first n digits of the triangular number\n    first_n_digits = [0] * num_digits\n\n    # Convert the triangular number to a string and store the first n digits in the array\n    triangular_str = str(triangular_number)\n    for i in range(num_digits):\n        first_n_digits[i] = int(triangular_str[i])\n\n    # Compute the index of the smallest triangular number with n digits\n    smallest_index = 0\n    for i in range(1, n):\n        if first_n_digits[i] < first_n_digits[smallest_index]:\n            smallest_index = i\n\n    return smallest_index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    triangular_list = [0]\n    count = 0\n    # Calculate the value of the first triangular number\n    for i in range(1, n + 1):\n        triangular_list.append(math.factorial(n) // math.factorial(i) // math.factorial(n - i))\n    # Find the index of the smallest triangular number\n    for i in range(len(triangular_list)):\n        if triangular_list[i] < triangular_list[count]:\n            count = i\n    return count"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    This function returns the index of the smallest triangular number with n digits.\n    '''\n    # find the maximum possible value of n digits\n    max_val = int(math.log10(10**n))\n\n    # loop through each possible value of n digits\n    for i in range(max_val, -1, -1):\n        # calculate the triangular number with i digits\n        triangular_num = (10**i) * (10**(n-i-1))\n\n        # check if the triangular number is smaller than the next smallest triangular number\n        if triangular_num < (10**(n-1)):\n            return i\n\n    # if no triangular number with n digits is found, return -1\n    return -1"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    min_num = 10**(n-1)\n    triangular_list = []\n    \n    # loop to generate triangular numbers\n    for i in range(min_num, min_num*n + 1):\n        triangular_list.append(i)\n    \n    # find the smallest triangular number with n digits\n    smallest_triangular_num = min(triangular_list)\n    index = triangular_list.index(smallest_triangular_num)\n    \n    return index"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    dict_ = {}\n    for i in range(len(test_tup)):\n        if i%2 == 0:\n            key = test_tup[i]\n            value = test_tup[i+1]\n            dict_[key] = value\n    return dict_"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    d = {}\n    for i in range(0, len(test_tup), 2):\n        d[test_tup[i]] = test_tup[i+1]\n    return d"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n\n    # Create an empty dictionary\n    result = {}\n\n    # Loop through the tuple and add key-value pairs\n    for i in range(0, len(test_tup), 2):\n        result[test_tup[i]] = test_tup[i+1]\n\n    return result"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # Initialize an empty dictionary\n    my_dict = {}\n    # Iterate through the tuple\n    for i in range(len(test_tup)-1):\n        # Add the key-value pair to the dictionary\n        my_dict[test_tup[i]] = test_tup[i+1]\n    # Return the dictionary\n    return my_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    result = {}\n    i = 0\n    while i < len(test_tup):\n        if i % 2 == 0:\n            result[test_tup[i]] = test_tup[i+1]\n        i += 2\n    return result"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup, test_tup[1:]))"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    d = {}\n    for i in range(0, len(test_tup), 2):\n        d[test_tup[i]] = test_tup[i+1]\n    return d"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # initialize an empty dictionary\n    result_dict = {}\n    \n    # iterate over each element in the tuple\n    for i in range(len(test_tup)-1):\n        # add the current element and the next element to the dictionary with the current element as the key\n        result_dict[test_tup[i]] = test_tup[i+1]\n    \n    return result_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    return dict(zip(test_tup[::2], test_tup[1::2]))"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. \n    https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # Create an empty dictionary\n    result = {}\n    # Iterate over the tuple using a for loop\n    for i in range(len(test_tup)-1):\n        # Add the key-value pair to the dictionary\n        result[test_tup[i]] = test_tup[i+1]\n    # Return the dictionary\n    return result"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n\n    # check if the string is empty\n    if len(s) == 0:\n        return True\n\n    # get the first character of the string\n    first_char = s[0]\n\n    # loop through the string and compare each character with the first character\n    for char in s[1:]:\n        if char!= first_char:\n            return False\n\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 1:\n        return True\n    else:\n        return all_Characters_Same(s[1:])"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    This function takes a string as input and returns True if all the characters in the string are the same, and False otherwise.\n    \"\"\"\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Write a python function to check whether all the characters are same or not.\n    \"\"\"\n    if len(s) == 0:\n        return True\n\n    char = s[0]\n    for i in range(1, len(s)):\n        if s[i]!= char:\n            return False\n\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n\n    if len(s) == 0:\n        return True\n\n    if s[0] == s[1]:\n        return all_Characters_Same(s[1:])\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Characters_Same(s):\n    '''\n    This function takes a string as input and returns True if all the characters in the string are the same,\n    and False otherwise.\n    '''\n    if len(s) == 0:\n        return True\n    else:\n        return s[0] == all_Characters_Same(s[1:])"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n\n    # creating a set of characters in the string\n    unique_chars = set(s)\n\n    # checking if the length of the set is 1\n    if len(unique_chars) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # take the first character of the string as base character\n    base_char = s[0]\n    # iterate through the string from the second character\n    for i in range(1, len(s)):\n        # if any two characters are not equal to base character\n        if s[i]!= base_char:\n            # return false\n            return False\n    # return true if all characters are same as base character\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0:\n        return True\n    if s[0] == s[-1]:\n        return all_Characters_Same(s[1:-1])\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    count = 0\n    for char in s:\n        if count == 0:\n            first_char = char\n            count += 1\n        else:\n            if char!= first_char:\n                return False\n    return True"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # Formula for the area of a tetrahedron\n    # A = 1/6 * side^2\n    return 1/6 * side**2"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # Calculate the semi-perimeter and the area of the base\n    s = (side/2)\n    area = math.sqrt(s*(s-side)*(s-side)*(s-side))\n    \n    # Calculate the area of the pyramid\n    a = math.sqrt(3)/4\n    \n    # Calculate the area of the tetrahedron\n    area_tetra = (side*side*side)/(3*a)\n    \n    return area_tetra"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    \"\"\"\n    Write a function to caluclate the area of a tetrahedron.\n    \"\"\"\n    return (1/3) * side * side * side"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (1/6) * side ** 2"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = (side * (side + 1) * (side + 2)) ** 0.5\n    area = (1/6) * s ** 3\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    This function calculates the area of a tetrahedron.\n    '''\n    # calculate the semi-perimeter\n    s = (side ** 2 + side ** 2 + side ** 2 + side ** 2) ** 0.25\n    \n    # calculate the area using Heron's formula\n    area = (s ** 2) * math.sqrt(5)\n    \n    # return the area of the tetrahedron\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return math.sqrt(3)*side**2"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return 0.5 * side ** 2"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return math.sqrt(3) / 4 * side ** 2"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return math.sqrt(3) / 4 * side ** 2"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n\n    :param list: list to be rotated\n    :type list: list\n    :param m: number of items to be rotated\n    :type m: int\n    :return: rotated list\n    :rtype: list\n    \"\"\"\n    n = len(list)\n    if m == 0 or m >= n:\n        return list\n    elif m < 0:\n        return rotate_right(list, n + m)\n    else:\n        # Step 1: Reverse the first half of the list using reverse() method\n        list = list[::-1]\n        # Step 2: Reverse the list from index 0 to m-1 using reverse() method\n        list[:m] = list[:m][::-1]\n        # Step 3: Reverse the rest of the list using reverse() method\n        list[m:] = list[m:][::-1]\n        return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    # Find the length of the list\n    length = len(list)\n    # Initialize the index of the last item in the list\n    last_index = length - 1\n    # Initialize the index of the first item to be rotated\n    start_index = m % length\n    # Swap the first and last items of the list\n    list[0], list[last_index] = list[last_index], list[0]\n    # Move the remaining items to the right by one place\n    for i in range(1, start_index):\n        list[i], list[i + 1] = list[i + 1], list[i]\n    # Return the rotated list\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    # Get the length of the list\n    n = len(list)\n    \n    # Check if the specified number of items to rotate is more than the length of the list\n    if m > n:\n        # Return the original list\n        return list\n    \n    # Get the last item of the list\n    last_item = list[n-1]\n    \n    # Reverse the first m-1 items of the list\n    list[:m-1] = list[n-m:][::-1]\n    \n    # Append the last item to the front of the rotated list\n    list.append(last_item)\n    \n    # Return the rotated list\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    if not isinstance(list, list):\n        return \"Please provide a list\"\n\n    n = len(list)\n    m = m % n\n\n    list = list[m:] + list[:m]\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    m = m % n\n    list.extend(list[:m])\n    list[:m] = []\n    list = list[n-m:] + list[:n-m]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    m = m % n\n    list = list[n - m:] + list[:n - m]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rotate_right(lst, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    return lst[-m:] + lst[:-m]"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    m %= n\n    \n    # swapping elements from the start of the list to the end of the list and then from the end of the list to the start\n    list[:m], list[m:] = list[m:], list[:m]\n    \n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rotate_right(lst, m):\n    \"\"\"\n    Rotates a list by m items to the right.\n    \"\"\"\n    n = len(lst)\n    m = m % n\n    lst.append(lst.pop(0))\n    lst = lst[m:] + lst[:m]\n    return lst"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    m = m % n\n    list[0:m] = list[m:n] + list[0:m]\n    return list"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    none_found = False\n    for item in test_tup:\n        if item is None:\n            none_found = True\n            break\n    return none_found"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    for i in test_tup:\n        if i is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for elem in test_tup:\n        if elem is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    none_val = False\n    for item in test_tup:\n        if item is None:\n            none_val = True\n            break\n    return none_val"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    \"\"\"\n    Write a function to check if the given tuple has any none value or not.\n    \"\"\"\n    for element in test_tup:\n        if element is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    \"\"\"\n    Write a function to check if the given tuple has any none value or not.\n    \"\"\"\n    none_count = 0\n    for item in test_tup:\n        if item is None:\n            none_count += 1\n    return none_count == len(test_tup)"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    def is_divisible_by_digit(num):\n        for digit in str(num):\n            if int(digit) % 2!= 0:\n                return False\n        return True\n\n    return list(filter(lambda x: is_divisible_by_digit(x), range(startnum, endnum+1)))\n"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n\n    def is_divisible_by_digit(n):\n        '''\n        Helper function to check if a number is divisible by every digit.\n        '''\n        def is_divisible_by_single_digit(num):\n            '''\n            Helper function to check if a number is divisible by a single digit.\n            '''\n            return num % 10 == 0\n\n        return all(is_divisible_by_single_digit(num % 10) for num in range(10))\n\n    numbers = [num for num in range(startnum, endnum + 1) if is_divisible_by_digit(num)]\n\n    return numbers"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    def is_divisible_by_digits(num):\n        digits = list(str(num))\n        for digit in digits:\n            if int(digit) not in range(1, 10):\n                return False\n        return True\n    \n    return list(filter(is_divisible_by_digits, range(startnum, endnum + 1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    def is_divisible_by_digits(num):\n        digits = list(str(num))\n        for digit in digits:\n            if int(digit) % 2 == 0:\n                return False\n        return True\n\n    result = list(filter(lambda num: is_divisible_by_digits(num), range(startnum, endnum+1)))\n    return result"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum to endnum where every number is divisible by every digit it contains.\n\n    Args:\n        startnum: int, the starting number of the range.\n        endnum: int, the ending number of the range.\n\n    Returns:\n        list of int, the list of numbers that meet the conditions.\n    \"\"\"\n\n    # Define a function to check if a number is divisible by a given digit\n    is_divisible = lambda num, digit: num % digit == 0\n\n    # Define a function to check if a number contains a given digit\n    has_digit = lambda num, digit: digit in str(num)\n\n    # Define a function to check if a number contains all the digits\n    has_all_digits = lambda num, digits: all(digit in str(num) for digit in digits)\n\n    # Iterate over all the numbers in the range\n    divisible_numbers = []\n    for num in range(startnum, endnum+1):\n        # Check if the number contains all the digits\n        if has_all_digits(num, range(10)):\n            # Check if the number is divisible by every digit\n            if all(is_divisible(num, digit) for digit in range(10)):\n                divisible_numbers.append(num)\n\n    return divisible_numbers"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    def is_divisible_by_digit(num):\n        '''\n        Helper function to check if a given number is divisible by every digit it contains.\n        '''\n        digits = [int(digit) for digit in str(num)]\n        for digit in digits:\n            if digit!= 0:\n                if num % digit!= 0:\n                    return False\n        return True\n    \n    result = [num for num in range(startnum, endnum+1) if is_divisible_by_digit(num)]\n    return result"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    def is_divisible(num):\n        \"\"\"\n        Helper function to check if a number is divisible by all its digits.\n        \"\"\"\n        digits = [int(digit) for digit in str(num)]\n        return all(num % digit == 0 for digit in digits)\n    \n    result = [num for num in range(startnum, endnum+1) if is_divisible(num)]\n    return result"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return list(filter(lambda x: all(int(d) % x == 0 for d in str(x)), range(startnum, endnum + 1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum to endnum where every number is divisible by every digit it contains.\n    '''\n    def is_divisible_by_digits(num):\n        '''\n        Helper function to check if a number is divisible by every digit it contains.\n        '''\n        num_str = str(num)\n        for digit in num_str:\n            if int(digit) % 2 == 0:\n                return True\n        return False\n    \n    return list(filter(is_divisible_by_digits, range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    This function takes two parameters, startnum and endnum, representing the start and end of the range of numbers we want to check.\n    It then generates a list of numbers from startnum to endnum, and checks each number if it is divisible by every digit it contains.\n    If a number meets this condition, it is appended to a new list called divisible_numbers.\n    Finally, divisible_numbers is returned.\n    \"\"\"\n    divisible_numbers = []\n\n    for num in range(startnum, endnum + 1):\n        # Split the number into a list of digits\n        digits = [int(d) for d in str(num)]\n\n        # Check if each digit is divisible by the corresponding number in the list of digits\n        if all(d % digit == 0 for d, digit in zip(digits, digits)):\n            divisible_numbers.append(num)\n\n    return divisible_numbers"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * r**2 * a / 360\n"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    # If the angle is larger than 360 degrees, return None\n    if a > 360:\n        return None\n    else:\n        # Calculate the area of a sector\n        area = math.pi * r**2 * a / 360\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r * r\n        return area\n"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a <= 360:\n        area = math.pi * r * r * (a/360)\n        return area\n    else:\n        return None"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    \n    # Check if angle is within the range 0 to 360 degrees\n    if a > 360:\n        print(\"Angle is larger than 360 degrees.\")\n        return None\n    \n    # Calculate the area of the sector using the formula area = pi * r^2 * sin(a/180*pi)\n    area = math.pi * r**2 * math.sin(a/180*math.pi)\n    \n    # Return the area of the sector\n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r**2 * a / 360\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef sector_area(r, a):\n    \"\"\"\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    \"\"\"\n\n    if a > 360:\n        return None\n    \n    # convert angle to radians\n    theta = math.radians(a)\n    \n    # calculate area of the sector using Heron's formula\n    area = (r**2 * math.sin(theta)) / 3\n    \n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    # Check if angle is larger than 360 degrees\n    if a > 360:\n        print(\"Angle cannot be greater than 360 degrees.\")\n        return None\n    \n    # Calculate area of sector using formula A = r * (sin(a/360*pi) * cos(b/180*pi))\n    a = a/180*math.pi # Convert angle from degrees to radians\n    b = math.pi/2 # Convert angle of sector from degrees to radians\n    A = r * (math.sin(a) * math.cos(b))\n    \n    return A"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * (r**2) * (a/360)\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n\n    area = math.pi*r**2*a/360\n    return area"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    # create a table to store lengths of subsequences\n    L = [[0] * (o+1) for i in range(m+1)]\n\n    # fill the table in bottom-up manner\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, o+1):\n                if X[i-1] == Y[j-1] and Z[k-1] == X[i-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                elif X[i-1] == Y[j-1]:\n                    L[i][j][k] = L[i-1][j-1][k]\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i-1][j-1][k-1])\n\n    # trace the backtrace to get the longest common subsequence\n    i = m\n    j = n\n    k = o\n    lcs = []\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and Z[k-1] == X[i-1]:\n            lcs.append(X[i-1])\n            i -= 1\n            j -= 1\n            k -= 1\n        elif X[i-1] == Y[j-1]:\n            i -= 1\n            j -= 1\n        else:\n            k -= 1\n\n    # reverse the list to get the longest common subsequence in reverse order\n    lcs.reverse()\n    return ''.join(lcs)"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n\n    # Creating a 3D table to store the length of LCS for substrings of X, Y and Z\n    table = [[[0 for j in range(len(Y)+1)] for i in range(len(X)+1)] for k in range(len(Z)+1)]\n\n    # Fill the table using dynamic programming\n    for i in range(1, len(X)+1):\n        for j in range(1, len(Y)+1):\n            for k in range(1, len(Z)+1):\n                if X[i-1] == Y[j-1] and Z[k-1] == X[i-1]:\n                    table[i][j][k] = table[i-1][j-1][k-1] + 1\n                else:\n                    table[i][j][k] = max(table[i-1][j][k], table[i][j-1][k], table[i][j][k-1])\n\n    # Backtracking to find the LCS subsequence\n    lcs = \"\"\n    i, j, k = len(X), len(Y), len(Z)\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and Z[k-1] == X[i-1]:\n            lcs = X[i-1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif table[i-1][j][k] == table[i-1][j][k-1]:\n            i -= 1\n        elif table[i][j-1][k] == table[i][j-1][k-1]:\n            j -= 1\n        else:\n            k -= 1\n\n    # Return the LCS subsequence\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z): \n    \"\"\"\n    Write a function to find the longest common subsequence for the given three string sequence.\n    \"\"\"\n\n    n = len(X)\n    m = len(Y)\n    p = [[0] * (m + 1) for _ in range(n + 1)]\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if X[i - 1] == Y[j - 1]:\n                p[i][j] = p[i - 1][j - 1] + 1\n            else:\n                p[i][j] = max(p[i - 1][j], p[i][j - 1])\n\n    return p[n][m]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z): \n    # Create a 2D table to store the lengths of the LCS of all prefixes of X, Y and Z\n    table = [[0 for j in range(len(Z) + 1)] for i in range(len(X) + 1)]\n    # Fill the table in bottom-up fashion\n    for i in range(1, len(X) + 1):\n        for j in range(1, len(Z) + 1):\n            if X[i - 1] == Z[j - 1]:\n                table[i][j] = table[i - 1][j - 1] + 1\n            else:\n                table[i][j] = max(table[i - 1][j], table[i][j - 1])\n    # Backtrack to find the LCS\n    i = len(X)\n    j = len(Z)\n    lcs = []\n    while i > 0 and j > 0:\n        if X[i - 1] == Z[j - 1]:\n            lcs.append(X[i - 1])\n            i -= 1\n            j -= 1\n        elif table[i - 1][j] > table[i][j - 1]:\n            i -= 1\n        else:\n            j -= 1\n    return ''.join(reversed(lcs))"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    M, N, O = len(X), len(Y), len(Z)\n    #creating a 3D table to store the length of LCS for all prefixes of X, Y and Z\n    lcs = [[[0] * (O+1) for j in range(M+1)] for i in range(N+1)]\n\n    #calculating the length of LCS for all prefixes of X, Y and Z\n    for i in range(1, N+1):\n        for j in range(1, M+1):\n            for k in range(1, O+1):\n                if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n                elif X[i-1] == Y[j-1] or X[i-1] == Z[k-1]:\n                    lcs[i][j][k] = lcs[i-1][j][k]\n                else:\n                    lcs[i][j][k] = max(lcs[i-1][j][k], lcs[i][j-1][k])\n\n    #finding the LCS for the given three strings\n    lcs_result = []\n    i, j, k = N, M, O\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n            lcs_result.append(X[i-1])\n            i, j, k = i-1, j-1, k-1\n        elif X[i-1] == Y[j-1] or X[i-1] == Z[k-1]:\n            i, j, k = i-1, j, k\n        else:\n            i, j, k = i, j-1, k\n    return ''.join(reversed(lcs_result))"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    # Create a 3D table to store lengths of longest common subsequences\n    LCS = [[[0] * (o + 1) for j in range(m + 1)] for i in range(n + 1)]\n\n    # Fill the table in bottom up manner\n    for i in range(n + 1):\n        for j in range(m + 1):\n            for k in range(o + 1):\n                if i == 0 or j == 0 or k == 0:\n                    LCS[i][j][k] = 0\n                elif X[j - 1] == Y[i - 1] and Y[i - 1] == Z[k - 1]:\n                    LCS[i][j][k] = LCS[i - 1][j - 1][k - 1] + 1\n                else:\n                    LCS[i][j][k] = max(LCS[i - 1][j][k], LCS[i][j - 1][k], LCS[i - 1][j][k - 1])\n\n    # Return the length of the longest common subsequence\n    return LCS[n][m][o]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    # Find length of each string\n    n1 = len(X)\n    n2 = len(Y)\n    n3 = len(Z)\n\n    # Create a table to store lengths of subsequences\n    table = [[0 for j in range(n3+1)] for i in range(n1+1)]\n\n    # Fill table in bottom up manner\n    for i in range(1, n1+1):\n        for j in range(1, n2+1):\n            for k in range(1, n3+1):\n                if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    table[i][j][k] = table[i-1][j-1][k-1] + 1\n                else:\n                    table[i][j][k] = max(table[i-1][j][k], table[i][j-1][k], table[i-1][j-1][k])\n\n    # Find the length of the LCS and construct the LCS\n    m = table[n1][n2][n3]\n    lcs = []\n    i, j, k = n1, n2, n3\n    while m!= 0:\n        if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n            lcs.append(X[i-1])\n            i -= 1\n            j -= 1\n            k -= 1\n        elif table[i-1][j][k] == table[i-1][j][k-1]:\n            i -= 1\n        elif table[i][j-1][k] == table[i-1][j][k]:\n            j -= 1\n        else:\n            k -= 1\n\n    # Reverse the LCS and return it\n    lcs.reverse()\n    return ''.join(lcs)"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z):\n    \"\"\"\n    Write a function to find the longest common subsequence for the given three string sequence.\n    \"\"\"\n    n = len(X)\n    m = len(Y)\n    p = [[0] * (m + 1) for i in range(n + 1)]\n\n    # Build LCS matrix in bottom up manner\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if X[i - 1] == Y[j - 1]:\n                p[i][j] = p[i - 1][j - 1] + 1\n            else:\n                p[i][j] = max(p[i - 1][j], p[i][j - 1])\n\n    # Print LCS\n    lcs = \"\"\n    i = n\n    j = m\n    while i > 0 and j > 0:\n        if X[i - 1] == Y[j - 1]:\n            lcs = X[i - 1] + lcs\n            i -= 1\n            j -= 1\n        elif p[i - 1][j] > p[i][j - 1]:\n            i -= 1\n        else:\n            j -= 1\n\n    return lcs[::-1]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z):\n    \"\"\"\n    Write a function to find the longest common subsequence for the given three string sequence.\n    \"\"\"\n    # Create a 3x3 matrix to store the lengths of the LCS of substrings of X, Y, and Z\n    dp = [[0 for j in range(len(Y)+1)] for i in range(len(X)+1)]\n    \n    # Fill the matrix in bottom up manner\n    for i in range(1, len(X)+1):\n        for j in range(1, len(Y)+1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    \n    # Return the length of the LCS of the three sequences\n    return dp[len(X)][len(Y)]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z):\n    \"\"\"\n    Write a function to find the longest common subsequence for the given three string sequence.\n    \"\"\"\n    n = len(X)\n    m = len(Y)\n    p = [[0] * (m + 1) for i in range(n + 1)]\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if X[i - 1] == Y[j - 1]:\n                p[i][j] = p[i - 1][j - 1] + 1\n            else:\n                p[i][j] = max(p[i - 1][j], p[i][j - 1])\n\n    return p[n][m]"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into words\n    words = str1.split()\n    \n    # Loop through the words and capitalize the first letter of each word\n    for i in range(len(words)):\n        # Check if the first letter of the current word is capitalized\n        if words[i][0].isupper():\n            # Capitalize the first letter of the current word\n            words[i] = words[i].capitalize()\n        \n        # Check if the current word has more than one letter\n        if len(words[i]) > 1:\n            # Add a space between the capitalized words\n            words[i] ='' + words[i]\n    \n    # Join the words back into a string and return it\n    return ''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    # Define a regular expression pattern to match capital words\n    pattern = r'\\b[A-Z][a-z]+\\b'\n    # Find all the capital words in the string\n    matches = re.findall(pattern, str1)\n    # Convert the matches to a list of words\n    words = [word.lower() for word in matches]\n    # Join the list of words into a single string, with spaces between them\n    result =''.join(words)\n    # Return the capital words with spaces converted to lowercase\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Define a regular expression to match capital letters and digits\n    pattern = r'\\b\\w+(?<!\\w\\.\\w.)(?=[A-Z]|\\b)'\n    \n    # Replace all occurrences of capital letters and digits with spaces\n    str2 = re.sub(pattern, r'\\1 ', str1)\n    \n    return str2"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # split the string into words\n    words = re.findall(r'\\b\\w+\\b', str1)\n    \n    # loop through the words and check if the first letter is capitalized\n    for i in range(len(words)):\n        if words[i][0].isupper():\n            # if it is, add a space before the word\n            words[i] ='' + words[i]\n    \n    # join the words with spaces\n    return ''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # split the string into words\n    words = re.findall(r'\\b\\w+\\b', str1)\n\n    # capitalize the first letter of each word and join the words with spaces\n    result =''.join([word.capitalize() for word in words])\n\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # split the string into words\n    words = re.findall(r'\\b\\w+\\b', str1)\n    \n    # iterate over the words and replace the first letter of each word with a space\n    for i in range(len(words)):\n        words[i] ='' + words[i]\n    \n    # join the words with spaces and return the result\n    return ''.join(words).strip()"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into words using regular expression\n    words = re.findall(r'\\b\\w+\\b', str1)\n\n    # Iterate over the words and add spaces before capital letters\n    result =''.join([word if word[0].isupper() else word.capitalize() for word in words])\n\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into words\n    words = re.findall(r'\\b\\w+\\b', str1)\n    \n    # Convert the first letter of each word to lowercase and append the rest of the word\n    new_words = []\n    for word in words:\n        new_word = word[0].lower() + word[1:]\n        new_words.append(new_word)\n    \n    # Join the new words with spaces\n    new_str =''.join(new_words)\n    \n    return new_str"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Define regular expression pattern to match words starting with capital letters\n    pattern = r'\\b[A-Z][a-z]+\\b'\n    # Use re.findall() method to find all occurrences of the pattern in the string\n    matches = re.findall(pattern, str1)\n    # Join all matches with spaces and return the result\n    return''.join(matches)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    pattern = r'\\b[A-Z]'\n    words = re.findall(pattern, str1)\n    result = []\n    for word in words:\n        result.append(word +'')\n    return ''.join(result).strip()"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Convert all strings to float values\n    nums_float = [float(num) for num in nums_str]\n\n    # Sort the float values\n    nums_float.sort()\n\n    # Convert the sorted float values back to strings\n    nums_str = [str(num) for num in nums_float]\n\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_list = []\n    for num in nums_str:\n        nums_list.append(int(num))\n    \n    nums_list.sort()\n    \n    return nums_list"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # convert the strings to numbers\n    nums = [float(num) for num in nums_str]\n    \n    # sort the numbers\n    nums.sort()\n    \n    # convert the sorted numbers back to strings\n    nums_str = [str(num) for num in nums]\n    \n    # return the sorted list of strings\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. \n    '''\n    nums_str.sort(key=lambda x: int(x))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    nums_list = []\n    # Convert all strings in the list to numbers\n    for num_str in nums_str:\n        nums_list.append(float(num_str))\n    # Sort the list of numbers using the built-in sorted() function\n    nums_list.sort()\n    # Convert the sorted list back to strings\n    sorted_nums = [str(num) for num in nums_list]\n    return sorted_nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    nums = []\n    for num_str in nums_str:\n        if num_str.isdigit():\n            nums.append(int(num_str))\n    nums.sort()\n    return nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    This function takes a list of strings of numbers and sorts them numerically.\n    '''\n    # convert all strings to numeric values\n    nums = [int(num) for num in nums_str]\n\n    # sort the numeric values using the built-in sorted() function\n    sorted_nums = sorted(nums)\n\n    # convert the sorted numeric values back to strings\n    sorted_nums_str = [str(num) for num in sorted_nums]\n\n    # return the sorted list of strings of numeric values\n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Convert all strings to numeric values\n    nums = [float(num_str) for num_str in nums_str]\n    # Sort the numeric values in ascending order\n    nums.sort()\n    # Convert the sorted numeric values back to strings\n    sorted_nums_str = [str(num) for num in nums]\n    # Return the sorted list of strings\n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = []\n    # Convert all the strings in the list to integers\n    for num_str in nums_str:\n        nums.append(int(num_str))\n    # Sort the list of integers in ascending order\n    nums.sort()\n    # Convert the sorted list back to strings and return it\n    return [str(num) for num in nums]"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key=lambda x: int(x))\n    return nums_str"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # Concatenate the two lists\n    total_list = test_list + test_tup\n    # Return the concatenated list\n    return total_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # Combine the two tuples\n    combined_tuple = tuple(test_list) + tuple(test_tup)\n    # Convert the combined tuple back to a list\n    combined_list = list(combined_tuple)\n    return combined_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    # add the tuple to the list\n    test_list.append(test_tup)\n    # return the updated list\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # Add the tuple to the list\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # Concatenate the two lists and convert to tuple\n    test_list_tup = tuple(test_list + test_tup)\n    return test_list_tup"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for i in test_list:\n        if i in test_tup:\n            test_list.append(i)\n    return test_list"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if len(arr) == 0:\n        return True\n\n    for i in range(1, len(arr)):\n        if arr[i] < arr[0]:\n            return False\n\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # check if the current node is greater than its parent\n    if i > 0 and arr[i] < arr[i//2]:\n        return False\n    \n    # recursively check for the left and right sub-trees\n    return check_min_heap_helper(arr, 2*i + 1) and check_min_heap_helper(arr, 2*i + 2)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not.\n    '''\n    if i < 0:\n        return True\n    \n    if i == 0:\n        return arr[i] <= arr[i+1]\n    \n    return arr[i] <= arr[i+1] and check_min_heap_helper(arr, i-1)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    if i >= 1:\n        if arr[i] > arr[i // 2] or check_min_heap_helper(arr, i // 2):\n            return False\n    return True\n\ndef check_min_heap(arr):\n    n = len(arr)\n    return check_min_heap_helper(arr, n - 1)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # Base case: if i is out of range, then the array is already a min heap\n    if i < 0:\n        return True\n\n    # If the parent node is greater than the current node, then it is not a min heap\n    if arr[i] < arr[(i-1)//2]:\n        return False\n\n    # Recursively call the function on the left and right sub-trees\n    return check_min_heap_helper(arr, i-1)\n\ndef is_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    return check_min_heap_helper(arr, len(arr)-1)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    \n    # Base case\n    if i >= len(arr):\n        return True\n    \n    # If current element is greater than or equal to its children, then the array is not min heap\n    if arr[i] >= arr[2*i+1] and arr[i] >= arr[2*i+2]:\n        return False\n    \n    # Recursively check for left and right children\n    return check_min_heap_helper(arr, 2*i+1) and check_min_heap_helper(arr, 2*i+2)\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    \n    # Return False if the array is empty\n    if len(arr) == 0:\n        return False\n    \n    # Recursively check for min heap property\n    return check_min_heap_helper(arr, 0)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    if i == 0:\n        return True\n    elif arr[i] < arr[i//2]:\n        return False\n    else:\n        return check_min_heap_helper(arr, i//2)\n\ndef check_min_heap(arr):\n    n = len(arr)\n    return check_min_heap_helper(arr, n-1)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    if i >= 0 and i < len(arr) and arr[i] < arr[i + 1]:\n        return False\n    return True\n\ndef check_min_heap(arr):\n    for i in range(len(arr) // 2 - 1, -1, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    \n    if i >= 0:\n        if arr[i] >= arr[(i-1)//2] and arr[i] >= arr[(i-2)//2]:\n            return True\n        else:\n            return False\n    else:\n        return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr) // 2:\n        # base case\n        return True\n    else:\n        # recursive case\n        if arr[i] > arr[2 * i + 1]:\n            # node at index i is greater than its child\n            return False\n        else:\n            # node at index i is less than or equal to its child\n            return check_min_heap_helper(arr, 2 * i + 1)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return jacobsthal_num(n//2) + jacobsthal_num(n//2)\n    else:\n        return jacobsthal_num(n//2) + 2*jacobsthal_num(n//2)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def jacobsthal_num(n):\n    if n < 0:\n        raise ValueError(\"Please enter a positive integer\")\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    else:\n        result = 1\n        for i in range(2, n+1):\n            result *= i\n            result *= (2*n-i)\n        return result"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 2*jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    jacobsthal = [0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, 5461, 10923, 21845, 43691, 87383, 174766, 349533, 699066, 1398133, 2796266, 5592533, 11185066, 22370133, 44740266, 89480533, 178961066, 357922133, 715844266, 1431688533, 2863377066, 5726754133, 11453508266, 22907016533, 45814033066, 91628066133, 183256132266, 366512264533, 733024529066, 1466049058133, 2932098116266, 5864196232533, 11728392465066, 23456784930133, 46913569860266, 93827139720533, 187654279441066, 375308558882133, 750617117764266, 1501234235528533, 3002468471057066, 6004936942114133, 12009873884228266, 24019747768456533, 48039495536913066, 96078991073826133, 192157982147652266, 384315964295304533, 768631928590609066, 1537263857181218133, 3074527714362436266, 6149055428724872533, 12298110857449745066, 24596221714899490133, 49192443429798980266, 98384886859597960533, 196769773719195921066, 3935395474383"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        jacobsthal = 0\n        jacobsthal_prev = 1\n        jacobsthal_next = 1\n        for i in range(2, n+1):\n            jacobsthal_temp = jacobsthal_prev + jacobsthal_next\n            jacobsthal_prev = jacobsthal\n            jacobsthal = jacobsthal_temp\n            jacobsthal_next = jacobsthal_temp\n\n        return jacobsthal"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    jacobsthal = [0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, 5461, 10923, 21845, 43691, 87382, 174763, 349527, 699053, 1398105, 2796211, 5592421, 11184843, 22369685, 44739371, 89478741, 178957482, 357914963, 715829926, 1431659851, 2863319702, 5726639404, 11453278809, 22906557618, 45813115236, 91626230472, 183252460943, 366504921886, 733009843772, 1466019687543, 2932039375087, 5864078750173, 11728157500346, 23456315000692, 46912630001384, 93825260002768, 187650520005536, 375301040011072, 750602080022143, 1501204160044286, 3002408320088571, 6004816640177142, 12009633280354285, 24019266560708570, 48038533121417141, 96077066242834282, 192154132485668565, 384308264971337130, 768616529942674260, 1537233059885348520, 3074466119770697040, 6148932239541394080, 12297864479082788160, 24595728958165576320, 49191457916331152640, 98382915832662305280, 196765831665324610560, 3935316633306492211"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number.\n    https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/\n    0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        num = 1\n        for i in range(2, n+1):\n            num *= (n-i+1)\n        return num"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        j1 = jacobsthal_num(n-1)\n        j2 = 3**(n-1) - 1\n        return j2"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return 2 * jacobsthal_num(n//2)\n    else:\n        return 3 * jacobsthal_num((n-1)//2) + 2\n"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (2 * jacobsthal_num(n-1)) - jacobsthal_num(n-2)"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Sort the list in ascending order of the second element of each tuple (i.e., by ascending second element)\n    sorted_list = sorted(test_list, key=lambda x: x[1])\n    # Initialize the minimum k records to infinity\n    min_k_records = float('inf')\n    # Initialize the minimum index of the minimum k records to -1\n    min_k_index = -1\n    # Loop through the sorted list\n    for i in range(len(sorted_list)):\n        # If the minimum k records has not been updated yet, check if the current record is a valid minimum k record\n        if min_k_index == -1 or sorted_list[i][1] < min_k_records:\n            # Update the minimum k records and minimum index of the current record\n            min_k_records = sorted_list[i][1]\n            min_k_index = i\n            # If the minimum k records has been updated to the current record, break the loop\n            if i == len(sorted_list) - 1 and min_k_index!= -1:\n                break\n    # Return the minimum k records and the index of the minimum k records\n    return min_k_records, min_k_index"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    \n    Args:\n        test_list: List of tuples of the format (id, value)\n        K: Number of records required to be returned\n    \n    Returns:\n        Tuple of the format (id, value) where the value is the minimum k records from test_list.\n    '''\n    \n    # Sort the list by value in ascending order\n    test_list.sort(key=lambda x: x[1])\n    \n    # Initialize minimum k records to None\n    min_k_records = None\n    \n    # Initialize minimum k records value to infinity\n    min_k_value = float('inf')\n    \n    # Iterate over the sorted list\n    for record in test_list:\n        # If the current record value is less than the current minimum k records value\n        if record[1] < min_k_value:\n            # Reset minimum k records and minimum k records value to the current record\n            min_k_records = [record]\n            min_k_value = record[1]\n        # If the current record value is greater than the current minimum k records value\n        elif record[1] == min_k_value:\n            # Append the current record to the list of minimum k records if it is not already in the list\n            if record not in min_k_records:\n                min_k_records.append(record)\n    \n    # If there are less than K minimum k records, return None\n    if len(min_k_records) < K:\n        return None\n    # If there are K or more minimum k records, return the first K records in the list\n    else:\n        return min_k_records[:K]\n"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    min_records = test_list[0]\n    for i in range(1, len(test_list)):\n        if len(test_list[i]) < len(min_records):\n            min_records = test_list[i]\n    \n    min_records = min_records[:K]\n    \n    return min_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    min_val = float('inf')\n    min_k_list = []\n    for i in range(len(test_list)):\n        if len(min_k_list) < K:\n            if min_val > test_list[i][1]:\n                min_val = test_list[i][1]\n                min_k_list = []\n        else:\n            if min_val > test_list[i][1]:\n                min_val = test_list[i][1]\n                min_k_list = [test_list[i]]\n            elif min_val == test_list[i][1]:\n                min_k_list.append(test_list[i])\n    return min_k_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    \n    Args:\n    test_list (list of tuple): a list of tuples representing records.\n    K (int): the number of minimum records to find.\n    \n    Returns:\n    list of tuple: a list of minimum k records.\n    '''\n\n    # sort the list of tuples in ascending order based on the second element of each tuple\n    test_list.sort(key=lambda x: x[1])\n\n    # create an empty list to store the minimum k records\n    min_list = []\n\n    # iterate over the first K elements of the sorted list and add them to the min_list\n    for i in range(K):\n        min_list.append(test_list[i])\n\n    return min_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # create a dictionary to store the frequency of each key in the list\n    freq = {}\n    for key, value in test_list:\n        if key in freq:\n            freq[key] += 1\n        else:\n            freq[key] = 1\n    \n    # sort the keys in the dictionary based on their frequency in descending order\n    sorted_freq = sorted(freq.items(), key=lambda x: x[1], reverse=True)\n    \n    # create a list of keys that will be the minimum k records\n    min_keys = []\n    \n    # loop through the sorted keys and add them to the min_keys list until we have added K keys\n    for i in range(K):\n        min_keys.append(sorted_freq[i][0])\n    \n    # sort the min_keys list in ascending order to get the minimum k records\n    min_keys = sorted(min_keys)\n    \n    # create a new list of tuples from the min_keys list and return it\n    return [(key, value) for key, value in test_list if key in min_keys]"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    test_list = sorted(test_list, key=lambda x: x[1]) # Sort the list based on the second element of each tuple\n    result = []\n    for i in range(len(test_list)):\n        if len(result) == K:\n            break\n        if test_list[i][1] == test_list[-1][1]: # If the second element of the current tuple is equal to the last element of the sorted list, append it to the result list\n            result.append(test_list[i])\n    return result"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list\n    '''\n    test_list = sorted(test_list, key=lambda x: x[1])  # Sorting the list based on second element\n    min_list = []  # Empty list to store minimum k records\n\n    for i in range(len(test_list)):\n        if len(min_list) < K:\n            min_list.append(test_list[i])  # Appending the tuple with minimum value to the list\n        else:\n            if test_list[i][1] < min_list[-1][1]:  # If the value of current tuple is smaller than the minimum value in the list\n                min_list.pop(-1)  # Removing the last element from the list as it is redundant and has the minimum value\n                min_list.append(test_list[i])  # Appending the current tuple to the list with minimum value\n\n    return min_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # sort the list of tuples in ascending order by the first element of each tuple\n    sorted_list = sorted(test_list, key=lambda x: x[0])\n    # initialize minimum k records to be first K elements of the sorted list\n    min_k_records = sorted_list[:K]\n    # initialize minimum number of records to be the same as the first K elements\n    min_num_records = K\n\n    # loop over the sorted list and check if the minimum number of records has been reached\n    for i in range(K, len(sorted_list)):\n        # check if the current record is equal to the minimum number of records\n        if sorted_list[i] == min_num_records:\n            # if it is, update the minimum number of records\n            min_num_records += 1\n            # if the minimum number of records has been reached, update the minimum k records\n            if min_num_records == K:\n                min_k_records.append(sorted_list[i])\n\n    return min_k_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    test_list.sort(key=lambda x: x[1])\n    min_sum = float('inf')\n    min_index = -1\n    \n    for i in range(len(test_list)):\n        if i+K <= len(test_list):\n            sum = sum(x[0] for x in test_list[i:i+K])\n            if sum < min_sum:\n                min_sum = sum\n                min_index = i\n    \n    return test_list[min_index:min_index+K]"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_list = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_list.append(l1[i])\n    return common_list"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index.\n    Write a function to find common elements from three lists. The function should return a list.\n    \"\"\"\n    common = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common.append(l1[i])\n    return common"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index.\n    Write a function to find common elements from three lists. The function should return a list.\n    \"\"\"\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] and l1[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] and l1[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    common = []\n    for i in range(len(l1)):\n        if l1[i] in l2[i] and l1[i] in l3[i]:\n            common.append(l1[i])\n    return common"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    Find the common elements in three lists.\n\n    Parameters:\n    l1, l2, l3 -- lists of elements to compare\n\n    Returns:\n    list -- list of common elements\n    \"\"\"\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_list = []\n    for i in range(len(l1)):\n        if l1[i] in l2[i] and l1[i] in l3[i]:\n            index_list.append(i)\n    return index_list"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2[i] and l1[i] in l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = float('inf')\n    second_smallest = float('inf')\n\n    for number in numbers:\n        if number < smallest:\n            second_smallest = smallest\n            smallest = number\n        elif number < second_smallest and number!= smallest:\n            second_smallest = number\n\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[-2]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    smallest = second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    return second_smallest\n"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    else:\n        return sorted(numbers)[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    \n    sorted_numbers = sorted(numbers)\n    return sorted_numbers[-2]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Write a function to find the second smallest number in a list.\n    \"\"\"\n    smallest = numbers[0]\n    second_smallest = None\n    \n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif second_smallest is None or num < second_smallest:\n            second_smallest = num\n    \n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    \n    smallest = numbers[0]\n    second_smallest = None\n    \n    for number in numbers:\n        if number < smallest:\n            second_smallest = smallest\n            smallest = number\n        elif second_smallest is None or number < second_smallest:\n            second_smallest = number\n            \n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    smallest = numbers[0]\n    second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    return second_smallest if second_smallest!= float('inf') else None"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        raise ValueError('List must have at least two elements.')\n    numbers.sort()\n    return numbers[-2]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = float('inf')\n    second_smallest = float('inf')\n\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n\n    return second_smallest"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a(b)*'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a(?=.*b)'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'ab*(?=\\b)'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(b)*'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a(b)*'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    This function matches a string that has an 'a' followed by one or more 'b's. \n    It uses regular expressions to check for the pattern 'a.*b' in the text.\n    '''\n    pattern = re.compile(r'a.*b')\n    match = pattern.match(text)\n    \n    if match:\n        print(\"Found match!\")\n    else:\n        print(\"No match found.\")"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'ab+'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(0)\n    else:\n        return None"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(b*)'\n    return re.search(pattern, text)"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. \n    '''\n    pattern = r'a[b]+'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. \n    '''\n    pattern = r\"ab+b\"\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n\n    # Initialize a dictionary to store the frequency of characters\n    freq = {}\n\n    # Loop through the string list\n    for string in test_list:\n        # Reverse the string and update the frequency dictionary\n        string = string[::-1]\n        if string in freq:\n            freq[string] += 1\n        else:\n            freq[string] = 1\n\n    # Count the number of pairs of reverse strings\n    count = 0\n    for value in freq.values():\n        count += (value * (value - 1)) // 2\n\n    # Return the count of pairs of reverse strings\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    \"\"\"\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if i < j and test_list[i][::-1] in test_list[j+1:]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] in test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    n = len(test_list)\n    for i in range(n):\n        for j in range(i+1, n):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # Create an empty dictionary to store the count of reverse pairs\n    reverse_pairs = {}\n    # Iterate through each string in the list\n    for string in test_list:\n        # Convert the string to a list of characters\n        char_list = list(string)\n        # Sort the characters of the string in descending order\n        char_list.sort(reverse=True)\n        # Convert the sorted list back to a string\n        sorted_string = ''.join(char_list)\n        # Check if the sorted string is already present in the dictionary\n        if sorted_string in reverse_pairs:\n            # If it is, increment the count of reverse pairs by 1\n            reverse_pairs[sorted_string] += 1\n        else:\n            # If not, add the sorted string as a key with a count of 1 to the dictionary\n            reverse_pairs[sorted_string] = 1\n    # Return the count of reverse pairs\n    return reverse_pairs"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    # Loop through each string in the list\n    for i in range(len(test_list)):\n        # Convert the string to a list of characters and reverse the list\n        string1 = list(test_list[i])[::-1]\n        # Loop through each string in the list\n        for j in range(i+1, len(test_list)):\n            # Convert the string to a list of characters and reverse the list\n            string2 = list(test_list[j])[::-1]\n            # Check if the two lists are equal\n            if string1 == string2:\n                count += 1\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    counts = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in counts:\n            counts[sublist_tuple] += 1\n        else:\n            counts[sublist_tuple] = 1\n    return counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count = {}\n    for item in list1:\n        for sublist in item:\n            if sublist not in count:\n                count[sublist] = 1\n            else:\n                count[sublist] += 1\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # convert all lists to tuples and count their occurrences\n    sublist_count = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in sublist_count:\n            sublist_count[sublist_tuple] += 1\n        else:\n            sublist_count[sublist_tuple] = 1\n    return sublist_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(lst):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Create an empty dictionary\n    sublist_count = {}\n    \n    # Loop through each element of the list\n    for elem in lst:\n        # Convert the element to a tuple and check if it exists in the dictionary\n        if tuple(elem) in sublist_count:\n            # If it exists, increment the count\n            sublist_count[tuple(elem)] += 1\n        else:\n            # If it doesn't exist, add it to the dictionary with a count of 1\n            sublist_count[tuple(elem)] = 1\n            \n    return sublist_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count_dict = {}\n    for i in range(len(list1)):\n        sublist = list1[i]\n        for j in range(i+1, len(list1)):\n            sublist2 = list1[j]\n            if sublist == sublist2:\n                count = count_dict.get(sublist, 0) + 1\n                count_dict[sublist] = count\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublists = {}\n    for item in list1:\n        if type(item) == list:\n            tuple_item = tuple(item)\n            if tuple_item in sublists:\n                sublists[tuple_item] += 1\n            else:\n                sublists[tuple_item] = 1\n    return sublists"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # create an empty dictionary to store counts\n    counts = {}\n    # iterate over each item in the list\n    for item in list1:\n        # convert the item to a tuple\n        item_tuple = tuple(item)\n        # check if the tuple is already in the dictionary\n        if item_tuple in counts:\n            # increment the count for the tuple in the dictionary\n            counts[item_tuple] += 1\n        else:\n            # add the tuple to the dictionary with a count of 1\n            counts[item_tuple] = 1\n    # return the dictionary of counts\n    return counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # create an empty dictionary to store the count of each unique sublist\n    sublist_counts = {}\n\n    # loop through each element in the list1\n    for item in list1:\n        # convert the item to a tuple and check if it is already in the dictionary\n        if tuple(item) in sublist_counts:\n            # if it is, increment the count of the tuple\n            sublist_counts[tuple(item)] += 1\n        else:\n            # if it isn't, add it to the dictionary with a count of 1\n            sublist_counts[tuple(item)] = 1\n\n    # return the dictionary of sublist counts\n    return sublist_counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n\n    # create an empty dictionary to store unique sublists as tuples\n    sublist_counts = {}\n\n    # loop through the original list\n    for item in list1:\n\n        # check if the item is a list\n        if isinstance(item, list):\n\n            # if it is, convert it to a tuple and check if it already exists in the dictionary\n            if item in sublist_counts:\n\n                # if it does, increment its count by 1\n                sublist_counts[item] += 1\n\n            else:\n\n                # if it doesn't, add it to the dictionary with a count of 1\n                sublist_counts[item] = 1\n\n    # return the dictionary of sublist counts\n    return sublist_counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # initialize an empty dictionary\n    sublist_counts = {}\n    \n    # loop through each element in the list\n    for element in list1:\n        # convert the element to a tuple\n        tuple_element = tuple(element)\n        \n        # check if the tuple element is already in the dictionary\n        if tuple_element in sublist_counts:\n            # increment the count by 1\n            sublist_counts[tuple_element] += 1\n        else:\n            # add the tuple element to the dictionary with a count of 1\n            sublist_counts[tuple_element] = 1\n            \n    # return the dictionary of sublist counts\n    return sublist_counts"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    try:\n        float(num)\n        return num.split('.')[-1].isdigit() and len(num.split('.')[-1]) <= 2\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # Check if the input is a string\n    if not isinstance(num, str):\n        return False\n\n    # Check if the number contains any non-numeric characters\n    if any(char not in '0123456789' for char in num):\n        return False\n\n    # Check if the number has more than two digits after the decimal point\n    if '.' in num and len(num.split('.')[1]) > 2:\n        return False\n\n    # Check if the number is a valid float\n    try:\n        float(num)\n    except ValueError:\n        return False\n\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n\n    if '.' in num and len(num.split('.')[1]) > 2:\n        return False\n    else:\n        return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        num = float(num)\n        if round(num, 2) == num:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if '.' in num and len(num.split('.')[1]) > 2:\n        return False\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # Check if the input is a string\n    if not isinstance(num, str):\n        return False\n    \n    # Split the string into a list of characters\n    digits = [int(d) for d in num]\n    \n    # Check if the number has at least two digits\n    if len(digits) < 2:\n        return False\n    \n    # Check if the number has a precision of 2\n    if digits[-1] >= 10:\n        return False\n    \n    # Check if the number is non-negative\n    if digits[0] < 0:\n        return False\n    \n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    if '.' in num:\n        if len(num.split('.')[1]) <= 2:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if '.' in num:\n        for i in num.split('.'):\n            if not i.isdigit():\n                return False\n            if len(i) > 2:\n                return False\n        return True\n    else:\n        return num.isdigit() and len(num) <= 2"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr)!= len(set(arr)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    \"\"\"\n    This function checks whether a list of numbers contains only one distinct element or not.\n    \"\"\"\n    unique_list = set(arr)\n    if len(unique_list) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n\n    # Check if the length of the list is less than 2\n    if len(arr) < 2:\n        return \"The given list has less than 2 elements.\"\n\n    # Initialize a dictionary to store the frequency of each element in the list\n    freq = {}\n\n    # Loop through the list and update the frequency of each element\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # Check if the frequency of each element in the list is equal to 1\n    for num in freq:\n        if freq[num]!= 1:\n            return \"The given list contains at least one element that appears more than once.\"\n\n    # If no element appears more than once, return True\n    return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # check if the list is empty\n    if len(arr) == 0:\n        return True\n    \n    # create a dictionary to store the frequency of each element in the list\n    freq = {}\n    \n    # loop through the list and increment the frequency of each element in the dictionary\n    for num in arr:\n        freq[num] = freq.get(num, 0) + 1\n    \n    # check if the dictionary contains only one distinct element\n    if len(freq)!= len(set(freq)):\n        return False\n    \n    # if all the elements are distinct, return True\n    return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n\n    # Check if the length of the array is 0\n    if len(arr) == 0:\n        return False\n    \n    # Initialize a dictionary to store the elements of the array\n    count_dict = {}\n\n    # Loop through each element of the array\n    for element in arr:\n        # Check if the element is already present in the dictionary\n        if element in count_dict:\n            # If it is, increment its count by 1\n            count_dict[element] += 1\n        else:\n            # If not, add it to the dictionary with a count of 1\n            count_dict[element] = 1\n\n    # Check if all the values in the dictionary are 1\n    for count in count_dict.values():\n        if count!= 1:\n            return False\n\n    # If all the conditions are true, return True\n    return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # create a set to store unique elements of the list\n    unique_set = set(arr)\n    # check if the length of the set is equal to 1\n    if len(unique_set) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] == arr[j]:\n                unique_count += 1\n                break\n    return unique_count == len(arr)-1"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique_flag = True\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] == arr[j]:\n                unique_flag = False\n                break\n        if not unique_flag:\n            break\n    return unique_flag"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 1:\n        return True\n    else:\n        arr.sort()\n        for i in range(len(arr)-1):\n            if arr[i] == arr[i+1]:\n                return False\n        return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n\n    # Convert the list to a set to remove duplicates\n    unique_numbers = set(arr)\n\n    # Check if the length of the set is equal to 1, if yes, return True, else return False\n    if len(unique_numbers) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    \"\"\"\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    \"\"\"\n    if monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum3 in [4, 6, 9, 11]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    \"\"\"\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    \"\"\"\n    if monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum3 in [4, 6, 9, 11]:\n        return False\n    else:\n        return \"Invalid month number\""
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum in [4, 6, 9, 11]:\n        return False\n    elif monthnum in [2]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    This function takes a month number as input and returns True if the month has 30 days, and False otherwise.\n    '''\n    if monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum in [4, 6, 9, 11]:\n        return False\n    else:\n        print(\"Invalid month number\")\n        return None"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 2:\n        return True\n    elif monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        return True\n    elif monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum):\n    if monthnum == 1 or monthnum == 3 or monthnum == 5 or monthnum == 7 or monthnum == 8 or monthnum == 10 or monthnum == 12:\n        return True\n    elif monthnum == 4 or monthnum == 6 or monthnum == 9 or monthnum == 11:\n        return False\n    else:\n        return None"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum == 4 or monthnum == 6 or monthnum == 9 or monthnum == 11:\n        return True\n    elif monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return False\n    else:\n        return check_monthnumber_number(monthnum-1)"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum in [4, 6, 9, 11]:\n        return False\n    else:\n        raise ValueError('Invalid month number. Month numbers must be from 1 to 12.')"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    \n    # Check for leap year\n    leap = False\n    if year % 4 == 0:\n        if year % 100 == 0:\n            if year % 400 == 0:\n                leap = True\n            else:\n                leap = False\n        else:\n            leap = True\n    else:\n        leap = False\n    \n    # Check for months with 30 days\n    if monthnum3 in [4, 6, 9, 11]:\n        return True\n    elif monthnum3 == 2:\n        if leap:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    monthnum = str(monthnum3)\n    if monthnum3 in range(1,13) and len(monthnum) in range(2,3):\n        if monthnum3 in [4, 6, 9, 11]:\n            if monthnum in ['01', '03', '05', '07', '08', '10', '12']:\n                return True\n        elif monthnum3 in [2]:\n            if monthnum in ['02']:\n                return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    Find the minimum difference between any two elements in a given array.\n    \"\"\"\n    min_diff = float('inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(arr[i] - arr[j])\n            if diff < min_diff:\n                min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes in an array and its length as input, and returns the minimum difference between any two elements in the array.\n    \"\"\"\n    # Initialize min_diff variable to the maximum value of integer type\n    min_diff = float('inf')\n\n    # Iterate through the array and for each element, find the difference between it and the next element in the array\n    for i in range(n-1):\n        diff = abs(arr[i+1] - arr[i])\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_min_diff(arr, n):\n    if n < 2:\n        return 0\n\n    min_diff = float('inf')\n    max_elem = float('-inf')\n    min_elem = float('inf')\n\n    for i in range(n):\n        if arr[i] > max_elem:\n            max_elem = arr[i]\n        if arr[i] < min_elem:\n            min_elem = arr[i]\n\n        min_diff = min(min_diff, max_elem - min_elem)\n\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array and a length of the array as input.\n    It finds the minimum difference between any two elements in the array.\n    Returns the minimum difference.\n    \"\"\"\n    min_diff = float('inf')\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            diff = abs(arr[i] - arr[j])\n            if diff < min_diff:\n                min_diff = diff\n\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_min_diff(arr,n): \n    # Find the minimum element in the array\n    min_element = min(arr)\n    \n    # Create a list to store the absolute differences between each element and the minimum element\n    diff_list = []\n    \n    # Loop through the array and calculate the absolute difference between each element and the minimum element\n    for i in range(n):\n        diff = abs(arr[i] - min_element)\n        diff_list.append(diff)\n        \n    # Find the minimum difference between any two elements in the array\n    min_diff = min(diff_list)\n    \n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array and its size n as input and returns the minimum difference between any two elements in the array.\n    \"\"\"\n    min_diff = float('inf')\n    arr.sort()\n    for i in range(n-1):\n        if arr[i+1]-arr[i] < min_diff:\n            min_diff = arr[i+1]-arr[i]\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_min_diff(arr,n):\n    \"\"\"\n    This function takes an array and its size as input and returns the minimum difference between any two elements in the array.\n    \"\"\"\n    # Find the minimum element in the array\n    min_elem = min(arr)\n\n    # Create a dictionary to store the frequency of each element\n    freq = {}\n    for i in range(n):\n        freq[arr[i]] = freq.get(arr[i], 0) + 1\n\n    # Calculate the minimum difference between any two elements in the array\n    min_diff = float('inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(arr[i] - arr[j])\n            if diff < min_diff:\n                min_diff = diff\n\n    # Return the minimum difference between any two elements in the array\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array of n integers as input and returns the minimum difference between any two elements in the array.\n    If all the elements in the array are the same, then return 0.\n    \"\"\"\n\n    min_diff = float('inf')\n    diff = 0\n\n    # Calculate the minimum difference between any two elements in the array\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = arr[i] - arr[j]\n            min_diff = min(min_diff, diff)\n\n    # If all the elements in the array are the same, then return 0\n    if min_diff == float('inf'):\n        return 0\n    else:\n        return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_min_diff(arr, n):\n    '''\n    This function takes an array and its size as input and returns the minimum difference between any two elements in the array.\n    '''\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        if arr[i+1] - arr[i] < min_diff:\n            min_diff = arr[i+1] - arr[i]\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    Find the minimum difference between any two elements in a given array.\n    \"\"\"\n    arr.sort()\n    diff = float('inf')\n    for i in range(n - 1):\n        diff = min(diff, arr[i + 1] - arr[i])\n    return diff"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_ctr(string):\n    '''\n    This function takes a string as input and returns the number of digits in the string.\n    '''\n    count = 0\n    for char in string:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_ctr(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_ctr(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_ctr(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    This function determines whether the input number is a polite number or not.\n    A polite number is a number that is at least 10 times the value of the next polite number, \n    where the next polite number is defined as the smallest number greater than the input number \n    that is a polite number.\n    \"\"\"\n\n    if n < 1:\n        return False\n\n    next_polite_number = math.ceil(n * 10)\n    return next_polite_number > n\n\ndef nth_polite_number(n):\n    \"\"\"\n    This function finds the nth polite number.\n    \"\"\"\n\n    polite_number = 1\n    while not is_polite(polite_number):\n        polite_number += 1\n\n    for i in range(1, n+1):\n        polite_number += 1\n        if is_polite(polite_number):\n            return polite_number\n\n    return None\n\nif __name__ == '__main__':\n    n = 5\n    print(\"The\", n, \"th polite number is\", nth_polite_number(n))"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Returns True if n is the nth polite number, False otherwise.\n    \"\"\"\n    if n < 0:\n        return False\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef nth_polite(n):\n    \"\"\"\n    Returns the nth polite number, or None if it does not exist.\n    \"\"\"\n    for i in range(n+1):\n        if is_polite(i):\n            return i\n    return None\n"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 0: \n        return 0\n    elif n == 1:\n        return 1\n    else:\n        i = 2\n        while i <= n:\n            if i % 3 == 0 or i % 5 == 0:\n                i += 2\n            else:\n                i += 1\n        return i"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # Initialize a variable to keep track of the polite numbers\n    polite_numbers = []\n\n    # Initialize a variable to keep track of the number of polite numbers found so far\n    count = 0\n\n    # Initialize the first polite number to be 1\n    current_number = 1\n\n    # Loop until we have found the nth polite number\n    while count < n:\n\n        # Check if the current number is a polite number\n        if is_prime(current_number):\n\n            # Add the current number to the list of polite numbers\n            polite_numbers.append(current_number)\n\n            # Increment the count of polite numbers found so far\n            count += 1\n\n        # Increment the current polite number by 1\n        current_number += 1\n\n    # Return the nth polite number\n    return polite_numbers[n-1]"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    This function finds the nth polite number.\n\n    Input: An integer n\n\n    Returns: An integer representing the nth polite number.\n\n    Example:\n    >>> is_polite(5)\n    10\n    \"\"\"\n    def nth_polite_number(n):\n        \"\"\"\n        This function calculates the nth polite number using the following formula:\n\n        nth_polite_number = n * (n + 1) / 2 * 0.25\n\n        Input: An integer n\n\n        Returns: An integer representing the nth polite number.\n        \"\"\"\n        return int(math.floor(n * (n + 1) / 2 * 0.25))\n\n    def count_polite_numbers(m, k):\n        \"\"\"\n        This function counts the number of polite numbers less than or equal to k.\n\n        Input: An integer m and an integer k\n\n        Returns: An integer representing the count of polite numbers less than or equal to k.\n        \"\"\"\n        count = 0\n        for i in range(1, k + 1):\n            if nth_polite_number(i) <= m:\n                count += 1\n        return count\n\n    def nth_polite_number_from_count(count):\n        \"\"\"\n        This function finds the nth polite number from the count of polite numbers less than or equal to count.\n\n        Input: An integer count\n\n        Returns: An integer representing the nth polite number.\n        \"\"\"\n        for i in range(1, count + 1):\n            if nth_polite_number(i) == count:\n                return i\n\n    return nth_polite_number_from_count(count_polite_numbers(n, n))\n"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n <= 0:\n        return \"Please enter a positive integer.\"\n\n    polite_numbers = [1]\n    count = 1\n\n    while count < n:\n        temp = polite_numbers[-1] + 1\n        if is_prime(temp):\n            polite_numbers.append(temp)\n            count += 1\n        else:\n            polite_numbers[-1] += 1\n\n    return polite_numbers[-1]\n\ndef is_prime(n):\n    '''\n    A function to check if a number is prime or not.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number.\n    \"\"\"\n    # initialize a, b,..., r\n    a = 1\n    b = 1\n    c = 1\n    d = 1\n    e = 1\n    f = 1\n    g = 1\n    h = 1\n    i = 1\n    j = 1\n    \n    # initialize s\n    s = 0\n    for i in range(2, n+1, 2):\n        s += i\n        \n    # calculate the sum of the first n natural numbers\n    total_sum = (a+b+c+d+e+f+g+h+i+j)\n    \n    # find the value of the nth natural number\n    nth_natural_number = (a+b+c+d+e+f+g+h+i+j) + s\n    \n    # check if nth_natural_number is less than or equal to n\n    if nth_natural_number <= n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number.\n    '''\n    def nth_polite_helper(a, b, c, d):\n        if c >= a:\n            return 0\n        if a == 1:\n            return b - c\n        if c == 1:\n            return b - a\n        if d == 1:\n            return b - a + 1\n        if d == c:\n            return b - a - 1\n        if a < d:\n            return nth_polite_helper(a, b, c + 1, d)\n        else:\n            return nth_polite_helper(a, b, c, d + 1)\n\n    if n <= 0:\n        return -1\n\n    if n == 1:\n        return 1\n\n    if n == 2:\n        return 2\n\n    return nth_polite_helper(1, 2, 3, 4)"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # Check for n=1\n    if n == 1:\n        return True\n    \n    # Initialize variables\n    polite_count = 0\n    prev_number = 1\n    current_number = 2\n    \n    # Iterate until we reach the nth polite number\n    while polite_count < n:\n        # Check if the current number is polite\n        if math.gcd(current_number, prev_number) == 1:\n            polite_count += 1\n        \n        # Update variables\n        prev_number = current_number\n        current_number += 1\n    \n    # Return True if we found the nth polite number, else False\n    if polite_count == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n\n    # create a list of prime numbers up to 10^6\n    primes = []\n    is_prime = [True] * (10**6 + 1)\n    is_prime[0], is_prime[1] = False, False\n    \n    for i in range(2, 10**6 + 1):\n        if is_prime[i]:\n            primes.append(i)\n            for j in range(i*i, 10**6 + 1, i):\n                is_prime[j] = False\n    \n    # find the nth prime number\n    nth_prime = primes[n-1]\n    \n    # loop through numbers from 1 to n and check if they are polite\n    polite = 1\n    for i in range(1, n+1):\n        if is_prime[i]:\n            if i % nth_prime == 0:\n                polite = i\n                break\n    \n    # return the nth polite number\n    return polite"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    n = len(l1)\n    result = []\n    for i in range(n-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    pairs = []\n    n = len(l1)\n    for i in range(n):\n        if i + 1 < n:\n            pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    n = len(l1)\n    result = []\n    for i in range(n - 1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n\n    # initialize an empty list to store the pairs\n    pairs = []\n\n    # iterate through the list using a for loop\n    for i in range(len(l1)-1):\n        # add each pair of consecutive items to the pairs list\n        pairs.append((l1[i], l1[i+1]))\n\n    # return the pairs list\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [(l1[i], l1[i+1]) for i in range(len(l1)-1)]"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists and returns a new list that contains the elements that are present in the first list\n    but not in the second list.\n    \"\"\"\n    diff_list = [x for x in li1 if x not in li2]\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff_list = []\n    for elem in li1:\n        if elem not in li2:\n            diff_list.append(elem)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    # Initialize an empty list to store the difference between the two lists.\n    diff_list = []\n    \n    # Iterate through the first list and check if each element is in the second list.\n    for item in li1:\n        if item not in li2:\n            diff_list.append(item)\n    \n    # Return the difference between the two lists.\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff_list = []\n    for i in li1:\n        if i not in li2:\n            diff_list.append(i)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff_list = []\n    for i in li1:\n        if i not in li2:\n            diff_list.append(i)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff = []\n    for item in li1:\n        if item not in li2:\n            diff.append(item)\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Write a python function to get the difference between two lists.\n    \"\"\"\n    li3 = []\n    for i in li1:\n        if i not in li2:\n            li3.append(i)\n    return li3"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Diff(li1,li2):\n    \"\"\"\n    Write a python function to get the difference between two lists.\n    \"\"\"\n    return [x for x in li1 if x not in li2]"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff = [x for x in li1 if x not in li2]\n    return diff"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    total = 0\n    for i in range(n):\n        total += i ** 4\n    return total"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    i = 1\n    while i <= n:\n        if i % 2!= 0:\n            sum += i ** 4\n        i += 1\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    for i in range(2, n+1, 2):\n        sum_of_squares += i**4\n    return sum_of_squares"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum_of_powers = 0\n    for i in range(2, 2*n+1, 2):\n        sum_of_powers += i**4\n    return sum_of_powers"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    odd_sum = 0\n    for i in range(2, 2*n, 2):\n        odd_sum += i**4\n    return odd_sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n\n    # Initialize the sum variable to zero\n    sum = 0\n\n    # Loop through the first n odd natural numbers\n    for i in range(1, n+1):\n        # Check if the number is odd\n        if i % 2 == 1:\n            # Calculate the fourth power of the number and add it to the sum\n            sum += i ** 4\n\n    # Return the sum\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    # initialize sum of fourth power of odd natural numbers\n    sum_of_fourth_powers = 0\n    \n    # iterate through first n odd natural numbers\n    for i in range(1, n+1, 2):\n        # calculate fourth power of i and add it to sum_of_fourth_powers\n        sum_of_fourth_powers += i ** 4\n        \n    return sum_of_fourth_powers"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    i = 1\n    while i <= n:\n        sum += i ** 4\n        i += 2\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_num_sum(n) : \n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum_of_fourth_powers = 0\n    for i in range(1, n+1, 2):\n        sum_of_fourth_powers += i**4\n    return sum_of_fourth_powers"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    # initializing variables for sum and count\n    total = 0\n    count = 0\n    \n    # iterating through the first n odd natural numbers\n    for i in range(1, n+1, 2):\n        # finding the fourth power of the odd number\n        fourth = i ** 4\n        \n        # updating the total sum if fourth power is odd\n        if fourth % 2 == 1:\n            total += fourth\n        \n        # incrementing the count of odd numbers\n        count += 1\n    \n    # returning the sum of the fourth power of odd numbers\n    return total"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    for i in exp:\n        if i == '(' or i == '{' or i == '[':\n            stack.append(i)\n        elif i == ')' or i == '}' or i == ']':\n            if not stack:\n                return False\n            if i == ')' and stack[-1] == '(':\n                stack.pop()\n            elif i == '}' and stack[-1] == '{':\n                stack.pop()\n            elif i == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in ['(', '[', '{']:\n            stack.append(char)\n        elif char in [')', ']', '}']:\n            if not stack:\n                return False\n            top_char = stack.pop()\n            if char not in [')', ']', '}']:\n                if char not in ['(', '[', '{']:\n                    return False\n                if char == top_char:\n                    continue\n                else:\n                    return False\n    return not stack\n"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n\n    for char in exp:\n        if char.isalnum():  # ignore non-alphanumeric characters\n            stack.append(char)\n        else:\n            if len(stack) == 0 or char not in ('(', ')', '[', ']', '{', '}'):\n                return False\n            if char == ')' and stack[-1]!= '(':\n                return False\n            if char == ']' and stack[-1]!= '[':\n                return False\n            if char == '}' and stack[-1]!= '{':\n                return False\n            stack.pop()\n\n    return len(stack) == 0\n"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    # Create an empty stack\n    stack = []\n\n    # Iterate through the expression\n    for i in range(len(exp)):\n        # Check if the current character is an opening parenthesis\n        if exp[i] == '(':\n            # Push the opening parenthesis onto the stack\n            stack.append(i)\n        # If the current character is a closing parenthesis\n        elif exp[i] == ')':\n            # If the stack is empty, the expression is not balanced\n            if not stack:\n                return False\n            # Pop the opening parenthesis from the stack\n            stack.pop()\n\n    # If the stack is not empty, the expression is not balanced\n    if stack:\n        return False\n    else:\n        return True"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    # convert the expression into a list of characters\n    exp_list = list(exp)\n    # create a queue to store the opening brackets\n    queue = deque()\n    # loop through the expression list\n    for char in exp_list:\n        # if the character is an opening bracket, add it to the queue\n        if char in ['(', '{', '[']:\n            queue.append(char)\n        # if the character is a closing bracket, check if its corresponding opening bracket exists in the queue\n        elif char in [')', '}', ']']:\n            if not queue:\n                return \"Not Balanced\"\n            elif char == ')' and queue[0] == '(':\n                queue.popleft()\n            elif char == '}' and queue[0] == '{':\n                queue.popleft()\n            elif char == ']' and queue[0] == '[':\n                queue.popleft()\n    # if the loop completes without finding any opening brackets, the expression is balanced\n    if not queue:\n        return \"Balanced\"\n    # if the loop completes and the queue is not empty, the expression is not balanced\n    else:\n        return \"Not Balanced\""
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    \"\"\"\n    Write a function to check if the given expression is balanced or not.\n    \"\"\"\n    stack = deque()\n    opening_brackets = {'(', '[', '{'}\n\n    for char in exp:\n        if char in opening_brackets:\n            stack.append(char)\n        elif char == ')' or char == ']' or char == '}':\n            if not stack:\n                return False\n            last_opening_bracket = stack.pop()\n            if char!= opening_brackets[last_opening_bracket]:\n                return False\n\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    \"\"\"\n    This function checks if the given expression is balanced or not.\n    \"\"\"\n    stack = deque()\n    for i in exp:\n        if i in ['(', '[', '{']:\n            stack.append(i)\n        elif i in [')', ']', '}']:\n            if not stack:\n                return False\n            top = stack.pop()\n            if i in ['(', '[', '{']:\n                if top!= i:\n                    return False\n            elif i in [')', ']', '}']:\n                if top!= i:\n                    return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    balance = True\n\n    for char in exp:\n        if char.isalnum():  # ignore non-numeric characters\n            continue\n\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                balance = False\n                break\n            if char == ')' and stack[-1] == '(':\n                stack.pop()\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n            elif char == ']' and stack[-1] == '[':\n                stack.pop()\n\n    return balance"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n\n    for i in exp:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if not stack:\n                return False\n            else:\n                stack.pop()\n\n    if stack:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                return False\n            top = stack.pop()\n            if char == ')' and top!= '(':\n                return False\n            if char == '}' and top!= '{':\n                return False\n            if char == ']' and top!= '[':\n                return False\n    return not stack"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    filtered_words = []\n    for word in words:\n        if len(word)!= K:\n            filtered_words.append(word)\n    return \" \".join(filtered_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    for i in range(len(words)):\n        if len(words[i]) == K:\n            words.pop(i)\n    return \" \".join(words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    return''.join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    for i in range(len(words)):\n        if len(words[i]) == K:\n            words.pop(i)\n    return''.join(words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    return''.join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Remove words with length greater than K from the given string\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word) <= K:\n            result.append(word)\n    # Join the words with spaces and return the result\n    return \" \".join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # split the string into words\n    words = test_str.split()\n\n    # create an empty list to store the words with k length\n    result = []\n\n    # loop through each word in the list\n    for word in words:\n        # check if the length of the word is not equal to K\n        if len(word)!= K:\n            # if the word does not have k length, add it to the result list\n            result.append(word)\n\n    # join the words in the result list into a string and return it\n    return''.join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    words = [word for word in words if len(word)!= K]\n    return''.join(words)"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.finditer(pattern, text)\n    if matches:\n        count = 0\n        for match in matches:\n            count += 1\n            print(\"Occurrence\", count, \":\", match.group())\n            print(\"Position\", match.start(), \"to\", match.end())\n            print()\n    else:\n        print(\"No match found.\")\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # Use the search() method to find all occurrences of the pattern in the text.\n    matches = re.findall(pattern, text)\n    if not matches:\n        return None\n    \n    # Create a list to store the matches and their positions.\n    match_positions = []\n    \n    # Loop through the matches and add them to the list.\n    for match in matches:\n        match_positions.append((match, text.index(match)))\n    \n    # Return the list of matches and their positions.\n    return match_positions"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    try:\n        match = re.search(pattern, text)\n        if match:\n            return match.group(), match.start(), match.end()\n        else:\n            return None\n    except re.error:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # Compile the regular expression pattern\n    pattern = re.compile(pattern)\n    # Find all occurrences of the pattern in the text\n    matches = pattern.findall(text)\n    # Check if there is any match\n    if not matches:\n        return None\n    # Initialize variables to store the occurrence and position of the match\n    occurrence = -1\n    position = -1\n    # Loop through all matches and find the occurrence and position of the first match\n    for i, match in enumerate(matches):\n        if i == 0:\n            occurrence = i + 1\n            position = match.start()\n        else:\n            # If the current match starts after the previous match, increment the occurrence\n            if match.start() > position:\n                occurrence += 1\n                position = match.start()\n    # Return the occurrence and position of the first match\n    return occurrence, position"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    result = re.findall(pattern,text)\n    if result:\n        result.sort(key=lambda x: x.start())\n        return result[0].start(),result[0].end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    \"\"\"\n\n    # Compile the pattern to match the text\n    pattern = re.compile(pattern)\n\n    # Search for the pattern in the text\n    match = pattern.search(text)\n\n    # If there is a match, return the position and occurrence of the substring\n    if match:\n        return match.start(), match.end(), match.group()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # use regex to find all occurrences of the pattern in the text\n    matches = re.findall(pattern,text)\n    \n    # if there are no matches, return None\n    if len(matches) == 0:\n        return None\n    \n    # iterate through the matches and return a tuple of each match and its position in the text\n    for i,match in enumerate(matches):\n        yield match,i"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.findall(pattern,text)\n    if len(matches) == 0:\n        return None\n    else:\n        for match in matches:\n            return match"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern,text)\n    if match:\n        return match.group(),match.start(),match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string.\n    Return None if there is no match.\n    '''\n    try:\n        match = re.search(pattern, text)\n        if match:\n            return match.group(), match.start(), match.end()\n        else:\n            return None\n    except Exception as e:\n        return None"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if not all(nums[i:i+2] % 2 == 1):\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    \"\"\"\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    \"\"\"\n\n    # Loop through each index in the list\n    for i in range(len(nums)):\n        # Check if the current index is odd\n        if i % 2 == 1:\n            # Check if the current index contains an odd number\n            if nums[i] % 2!= 0:\n                return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2 == 0:\n                return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_count = 0\n    for i in range(len(nums)):\n        if i % 2!= 0 and nums[i] % 2!= 0:\n            odd_count += 1\n            if odd_count == 5:\n                break\n    if odd_count == 5:\n        return True\n    else:\n        return False"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if not all(x % 2 == 1 for x in nums[i:]):\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    \"\"\"\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    \"\"\"\n    for i in range(1, len(nums), 2):\n        if len(set([nums[i]])) % 2 == 1:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            continue\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if not all(nums[j] % 2!= 0 for j in range(i-1, -1, -2)):\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns True if every odd index contains odd numbers, False otherwise.\n    \"\"\"\n    count = 0\n    for i in range(len(nums)):\n        if i % 2!= 0:\n            if nums[i] % 2!= 0:\n                count += 1\n    if count == len(nums):\n        return True\n    else:\n        return False"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    count = 0\n    for i in range(len(test_str)):\n        if (i > 0 and test_str[i] == vowels[i-1]) or (i < len(test_str)-1 and test_str[i] == vowels[i+1]):\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i + 1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    \"\"\"\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    \n    # Loop through each character in the string\n    for i in range(len(test_str)):\n        # Check if the character is a vowel\n        if test_str[i] in vowels:\n            # Check if the character has a vowel that is next to it\n            if i > 0 and test_str[i-1] in vowels and i < len(test_str)-1 and test_str[i+1] in vowels:\n                count += 1\n    \n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    \n    for i in range(len(test_str)):\n        for j in range(i+1, len(test_str)+1):\n            if test_str[i] in vowels and test_str[j-1] in vowels:\n                count += 1\n    \n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i] in vowels and (i == 0 or test_str[i-1] in vowels) and (i == len(test_str)-1 or test_str[i+1] in vowels):\n            count += 1\n    return count"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # initialize an empty dictionary to store the elements and their frequency\n    freq_dict = {}\n    # loop through the list and update the frequency of each element in the dictionary\n    for num in arr:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    # initialize a variable to store the sum of non-repeated elements\n    sum_of_non_repeated_elements = 0\n    # loop through the dictionary and add the element with frequency 1 to the sum\n    for num, freq in freq_dict.items():\n        if freq == 1:\n            sum_of_non_repeated_elements += num\n    return sum_of_non_repeated_elements"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # create a set to store unique elements\n    unique_set = set(arr)\n    # convert set to list to sort it\n    sorted_list = sorted(list(unique_set))\n    # initialize the sum variable to 0\n    sum_var = 0\n    # loop through the sorted list and add each element to the sum\n    for num in sorted_list:\n        sum_var += num\n    # return the sum variable\n    return sum_var"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    unique_elements = []\n    for element in arr:\n        if element not in unique_elements:\n            unique_elements.append(element)\n    return sum(unique_elements)"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create an empty set to store unique elements\n    unique_set = set()\n\n    # Iterate through the list and add each element to the set\n    for num in arr:\n        unique_set.add(num)\n\n    # Convert the set back to a list\n    unique_list = list(unique_set)\n\n    # Initialize the sum variable to 0\n    sum = 0\n\n    # Iterate through the list and add each non-repeated element to the sum\n    for num in unique_list:\n        sum += num\n\n    # Return the sum\n    return sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    seen = {}\n    sum = 0\n\n    for num in arr:\n        if num not in seen:\n            seen[num] = True\n            sum += num\n\n    return sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # Create a set to store unique elements of the list\n    unique_set = set(arr)\n    # Initialize a variable to store the sum of non-repeated elements\n    non_repeated_sum = 0\n    # Iterate through the unique set and add their values to the sum\n    for element in unique_set:\n        non_repeated_sum += element\n    # Return the sum\n    return non_repeated_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create an empty dictionary to store the indices of non-repeated elements\n    non_repeated = {}\n    \n    # Loop through the list and add each element to the dictionary with its index\n    for i, num in enumerate(arr):\n        if num not in non_repeated:\n            non_repeated[num] = i\n    \n    # Calculate the sum of non-repeated elements and return it\n    return sum(num for num in non_repeated)"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_sum(arr):\n    \"\"\"\n    This function takes a list as input and returns the sum of all the elements that are not repeated.\n    \"\"\"\n    # Initialize a dictionary to store the elements of the list\n    element_dict = {}\n    # Initialize the sum variable\n    sum_of_non_repeated = 0\n    \n    # Loop through the list\n    for element in arr:\n        # If the element is not already in the dictionary, add it to the dictionary and increment the sum variable\n        if element not in element_dict:\n            element_dict[element] = 1\n            sum_of_non_repeated += element\n        # If the element is already in the dictionary, increment its count in the dictionary\n        else:\n            element_dict[element] += 1\n    \n    # Return the sum of all the elements that are not repeated in the list\n    return sum_of_non_repeated"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n\n    # create a dictionary to keep track of the count of each element in the list\n    count_dict = {}\n\n    # loop through each element in the list\n    for element in arr:\n\n        # check if the element is already in the count dictionary\n        if element in count_dict:\n\n            # increment the count of the element by 1\n            count_dict[element] += 1\n\n        else:\n\n            # add the element to the dictionary with a count of 1\n            count_dict[element] = 1\n\n    # initialize a variable to store the sum of non-repeated elements\n    non_repeated_sum = 0\n\n    # loop through each element in the list again\n    for element in arr:\n\n        # check if the element is already in the count dictionary\n        if element in count_dict and count_dict[element] == 1:\n\n            # add the element to the sum of non-repeated elements\n            non_repeated_sum += element\n\n    # return the sum of non-repeated elements\n    return non_repeated_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # convert the list to set to remove duplicates\n    unique_elements = set(arr)\n    \n    # convert the set back to a list\n    unique_elements = list(unique_elements)\n    \n    # calculate the sum of the unique elements\n    sum_of_unique_elements = sum(unique_elements)\n    \n    return sum_of_unique_elements"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # Group the list by consecutive duplicates\n    grouped = groupby(list1, lambda x, y: x == y)\n    # Pack consecutive duplicates into sublists\n    sublists = [list(group) for _, group in grouped]\n    return sublists"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    \"\"\"\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    \"\"\"\n\n    # Convert the list to a set to remove duplicates\n    set1 = set(list1)\n\n    # Create an iterator of groups of consecutive elements from the set\n    iterator = groupby(set1)\n\n    # Use a list comprehension to convert the iterator to a list of sublists\n    sublist_list = [list(group) for group in iterator]\n\n    return sublist_list"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    \"\"\"\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    \"\"\"\n    result = []\n    current = []\n    for item in list1:\n        if current and current[-1] == item:\n            current.append(item)\n        else:\n            result.append(current)\n            current = [item]\n    result.append(current)\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    return list(map(list, groupby(lst)))"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n\n    # group the list by consecutive duplicates\n    grouped_duplicates = groupby(enumerate(list1), lambda x: x[1] == x[0] + 1)\n\n    # create a sublist for each consecutive duplicate group\n    sublists = [list(g) for k, g in grouped_duplicates]\n\n    # flatten the sublists and return the result\n    return [x for sublist in sublists for x in sublist]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    def group_consecutive_duplicates(iterable):\n        return [list(g) for k, g in groupby(iterable)]\n    \n    return group_consecutive_duplicates(list1)"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return list(groupby(list1))"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n\n    # Create an iterator to iterate over the list\n    iterator = iter(list1)\n\n    # Iterate over the iterator and group consecutive duplicates\n    grouped_list = [(list(group), key) for key, group in groupby(iterator)]\n\n    # Iterate over the grouped list and pack consecutive duplicates into sublists\n    packed_list = []\n    for i, (group, key) in enumerate(grouped_list):\n        if i == 0 or key!= grouped_list[i-1][1]:\n            packed_list.append([list1[key]])\n        else:\n            packed_list[-1].append(list1[key])\n\n    return packed_list"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # Group the list by consecutive duplicates and pack them into sublists\n    return [list(g) for k, g in groupby(enumerate(list1), lambda x: x[0] - x[1])]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for key, group in groupby(list1) if key]"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # create an empty dictionary\n    counts = {}\n    \n    # loop over all sublists in the original list\n    for sublist in list1:\n        # convert the sublist to a tuple and count its occurrences\n        if tuple(sublist) not in counts:\n            counts[tuple(sublist)] = 1\n        else:\n            counts[tuple(sublist)] += 1\n    \n    # return the dictionary of counts\n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublist_dict = {}\n    for item in list1:\n        sublist_tuple = tuple(item)\n        if sublist_tuple in sublist_dict:\n            sublist_dict[sublist_tuple] += 1\n        else:\n            sublist_dict[sublist_tuple] = 1\n    return sublist_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublist_counts = {}\n    for sublist in list1:\n        if tuple(sorted(sublist)) in sublist_counts:\n            sublist_counts[tuple(sorted(sublist))] += 1\n        else:\n            sublist_counts[tuple(sorted(sublist))] = 1\n    return sublist_counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Convert the list to tuples\n    list1 = tuple(list1)\n    # Initialize an empty dictionary\n    count = {}\n    # Loop through each list in the list1\n    for i in list1:\n        # If the tuple is already in the dictionary, increment its count by 1\n        if i in count:\n            count[i] += 1\n        # If the tuple is not in the dictionary, add it with a count of 1\n        else:\n            count[i] = 1\n    # Return the dictionary of counts\n    return count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    unique_sublists_dict = {}\n    for sublist in list1:\n        if sublist not in unique_sublists_dict:\n            unique_sublists_dict[sublist] = 1\n        else:\n            unique_sublists_dict[sublist] += 1\n    return unique_sublists_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Create an empty dictionary\n    count_dict = {}\n    # Iterate over the lists in the input list\n    for sublist in list1:\n        # Convert the sublist to a tuple\n        sublist_tuple = tuple(sublist)\n        # Check if the tuple is already in the dictionary\n        if sublist_tuple in count_dict:\n            # If it is, increment its count\n            count_dict[sublist_tuple] += 1\n        else:\n            # If it's not, add it to the dictionary with a count of 1\n            count_dict[sublist_tuple] = 1\n    # Return the dictionary of counts\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    # Initialize a dictionary to store the counts of each sublist\n    counts = {}\n    # Loop through each sublist in the list\n    for sublist in list1:\n        # Convert the sublist to a tuple and check if it already exists in the dictionary\n        if tuple(sublist) in counts:\n            # If it does, increment its count by 1\n            counts[tuple(sublist)] += 1\n        else:\n            # If it doesn't, add it to the dictionary with a count of 1\n            counts[tuple(sublist)] = 1\n    # Return the dictionary of counts\n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count_dict = {}\n    for item in list1:\n        for subitem in item:\n            if tuple(subitem) in count_dict:\n                count_dict[tuple(subitem)] += 1\n            else:\n                count_dict[tuple(subitem)] = 1\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count_dict = {}\n    for i in range(len(list1)):\n        if list1[i] not in count_dict:\n            count_dict[tuple(list1[i])] = 1\n        else:\n            count_dict[tuple(list1[i])] += 1\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = {}\n    for item in list1:\n        if isinstance(item, list):\n            sublist = tuple(item)\n            if sublist in count:\n                count[sublist] += 1\n            else:\n                count[sublist] = 1\n    return count"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n\n    # create a set of tuples from the given tuple list\n    tuple_set = set(test_list)\n\n    # create a list of tuples from the tuple set\n    tuple_list = list(tuple_set)\n\n    # create a list of sums from the tuple list\n    sum_list = [sum(t) for t in tuple_list]\n\n    # find all combinations of sums using itertools.combinations()\n    combinations_list = list(combinations(sum_list, len(sum_list)))\n\n    # return the final list of combinations\n    return combinations_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Iterate through the given list of tuples\n    for tup in test_list:\n        # Sort the tuple elements in ascending order\n        tup = sorted(tup)\n        # Calculate the sum of the sorted tuple\n        total = sum(tup)\n        # Find all the combinations of the tuple with the total sum\n        comb = combinations(tup, len(tup))\n        # Filter the combinations to get only those with the same total sum as the original tuple\n        filtered_comb = [i for i in comb if sum(i) == total]\n        # Print the filtered combinations\n        print(filtered_comb)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    all_combinations = []\n    for i in range(1, len(test_list)+1):\n        for comb in combinations(test_list, i):\n            all_combinations.append(tuple(comb))\n    return all_combinations"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n\n    # Create a set of tuples to store the unique combinations\n    unique_combinations = set()\n\n    # Iterate through all possible pairs of tuples in the given list\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            # Create a tuple of the sum of the two tuples\n            sum_tuple = tuple(sum(x) for x in combinations(test_list[i], j-i))\n            # Add the tuple to the set of unique combinations\n            unique_combinations.add(sum_tuple)\n\n    # Return the set of unique combinations\n    return unique_combinations"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    def find_combinations_helper(test_list, curr_sum, curr_comb, result):\n        if curr_sum == 0:\n            result.append(tuple(curr_comb))\n            return\n\n        if curr_sum < 0:\n            return\n\n        for tup in test_list:\n            curr_comb.append(tup)\n            find_combinations_helper(test_list, curr_sum - tup[0], curr_comb, result)\n            curr_comb.pop()\n\n    result = []\n    find_combinations_helper(test_list, 0, [], result)\n    return result"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Find the unique tuples in the list\n    unique_tuples = list(set(tuple(sorted(x)) for x in test_list))\n    print(\"Unique tuples:\", unique_tuples)\n\n    # Iterate through all combinations of unique tuples\n    for combination in combinations(unique_tuples, len(unique_tuples)):\n        print(\"Combination:\", combination)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    result = []\n\n    for i in range(1, len(test_list)+1):\n        for j in combinations(test_list, i):\n            if sum(j) == 0:\n                result.append(j)\n\n    return result"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Initialize an empty list to store the combinations\n    combinations_list = []\n\n    # Sort the list in ascending order\n    test_list.sort()\n\n    # Loop through all possible combinations of sums\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)+1):\n            # Add the combination to the list\n            combinations_list.append(tuple(test_list[i:j]))\n\n    # Return the list of combinations\n    return combinations_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n\n    # initialize a set to store unique combinations of sums\n    combinations_set = set()\n\n    # sort the given list of tuples in ascending order\n    test_list.sort()\n\n    # loop through all possible combinations of sums\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            # calculate the sum of the tuples in the current combination\n            current_sum = test_list[i][0] + test_list[j][0]\n\n            # check if the current combination is already in the set\n            if current_sum in combinations_set:\n                continue\n\n            # check if the current combination is present in the test list\n            is_present = False\n            for combo in test_list:\n                if combo in combinations_set:\n                    is_present = True\n                    break\n            if is_present:\n                # add the current combination to the set of combinations\n                combinations_set.add(tuple(sorted(current_sum)))\n\n    # return the set of combinations of sums\n    return combinations_set"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    total_sum = sum(test_list)\n    combinations_list = []\n    for i in range(1, len(test_list)+1):\n        for combo in combinations(test_list, i):\n            current_sum = sum(combo)\n            if current_sum == total_sum:\n                combinations_list.append(combo)\n    return combinations_list"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef count_divisors(n):\n    \"\"\"\n    This function takes an integer n as input and returns a boolean value indicating whether the count of divisors is even or odd.\n    \"\"\"\n    # Find the number of divisors of n\n    divisors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n            if n // i!= i:\n                divisors.append(n // i)\n    divisors.append(n)\n    \n    # Count the number of even and odd divisors\n    count_even_divisors = sum([1 for i in divisors if i % 2 == 0])\n    count_odd_divisors = sum([1 for i in divisors if i % 2!= 0])\n    \n    # Return whether the count of even and odd divisors is even or odd\n    if count_even_divisors == count_odd_divisors:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math \n\ndef count_divisors(n): \n    '''\n    This function takes an integer n as input and returns True if the count of divisors is even and False otherwise. \n    '''\n    # Calculate the number of divisors for n \n    count = 0 \n    for i in range(1, int(math.sqrt(n))+1): \n        if n % i == 0: \n            count += 1 \n    # Check if the count of divisors is even or not \n    if count % 2 == 0: \n        return True \n    else: \n        return False "
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even.\n    https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n            if n // i!= i:\n                divisors.append(n // i)\n    return divisors\n\nn = int(input(\"Enter a number: \"))\ndivisors = count_divisors(n)\ncount_even = 0\nfor divisor in divisors:\n    if divisor % 2 == 0:\n        count_even += 1\nif count_even % 2 == 0:\n    print(f\"{n} has an even number of divisors.\")\nelse:\n    print(f\"{n} has an odd number of divisors.\")"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef count_divisors(n):\n    \"\"\"\n    This function takes a number n as input and returns the count of its divisors.\n    \"\"\"\n    # Initialize count variable to 0\n    count = 0\n    \n    # Calculate the square root of n\n    sqrt_n = math.sqrt(n)\n    \n    # Loop through all integers from 1 to sqrt(n)\n    for i in range(1, int(sqrt_n) + 1):\n        # If n is divisible by i, add 1 to count\n        if n % i == 0:\n            count += 1\n    \n    # Add 1 to count if n is a prime number\n    if n > 1:\n        count += 1\n    \n    return count"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even.\n    '''\n\n    # Count the number of divisors using a loop\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n            if n // i!= i:\n                count += 1\n\n    # Check if the count of divisors is even or odd\n    if count % 2 == 0:\n        print(n, \"has an even number of divisors.\")\n    else:\n        print(n, \"has an odd number of divisors.\")"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_divisors(n):\n    \"\"\"\n    Count the number of divisors of a given number.\n    \"\"\"\n    divisors = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors += 2 if i!= n//i else 1\n    return divisors"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even.\n    '''\n    if n <= 1:\n        return False\n    \n    divisors = []\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n            divisors.append(n // i)\n    \n    if len(divisors) > 0:\n        return all(n % i!= 0 for i in divisors)\n    \n    return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    This function takes an integer n and returns True if the count of divisors is even, False otherwise.\n    '''\n    divisors = [i for i in range(1, int(math.sqrt(n))+1) if n % i == 0]\n    count = len(divisors)\n    return count % 2 == 0"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    if count % 2 == 0:\n        print(f\"The count of divisors of {n} is even.\")\n    else:\n        print(f\"The count of divisors of {n} is odd.\")"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef count_divisors(n):\n    \"\"\"\n    Write a python function to check whether the count of divisors is even.\n    \"\"\"\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n    if n > 1 and count == 0:\n        count = 2\n    return count"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    count = 0\n    sum_odd_len = 0\n    for i in range(n):\n        if i % 2 == 1 and i < n-1:\n            count += 1\n            sum_odd_len += arr[i]\n        elif i % 2 == 1 and i == n-1:\n            count += 1\n            sum_odd_len += arr[i]\n    return sum_odd_len"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    This function takes an array as input and returns the sum of all odd length subarrays in the array.\n    \"\"\"\n    # Initialize the sum variable to 0\n    sum_odd_length_subarrays = 0\n    \n    # Traverse through the array\n    for i in range(len(arr)):\n        # Check if the length of the current subarray is odd\n        if len(arr[i]) % 2 == 1:\n            # Calculate the sum of the current subarray\n            subarray_sum = sum(arr[i])\n            \n            # Add the sum to the sum_odd_length_subarrays\n            sum_odd_length_subarrays += subarray_sum\n            \n    return sum_odd_length_subarrays"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    result = 0\n    for i in range(n-1):\n        for j in range(i+2, n+1, 2):\n            result += arr[j-2]\n    return result"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    count = 0\n    total_sum = 0\n    \n    for i in range(len(arr)):\n        if i == len(arr)-1:\n            count += 1\n            total_sum += arr[i]\n        else:\n            count = 0\n            total_sum = 0\n            \n        if count == 0:\n            continue\n            \n        j = i + 1\n        while j < len(arr):\n            if j == len(arr)-1:\n                if (j - i) % 2 == 1:\n                    total_sum += arr[j]\n                count += 1\n            else:\n                if (j - i) % 2 == 1:\n                    total_sum += arr[j]\n                count += 1\n            j += 1\n            \n    return total_sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum_odd_len_subarrays = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1, 2):\n            if j-i+1 % 2 == 1:\n                sum_odd_len_subarrays += sum(arr[i:j])\n    return sum_odd_len_subarrays"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if i < len(arr) - 1:\n            for j in range(i+2, len(arr)+1, 2):\n                if j > len(arr):\n                    break\n                sum += arr[i:j]\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    sum_odd_length_subarrays = 0\n    for i in range(n-1):\n        if i == 0 or arr[i] % 2!= arr[i-1] % 2:\n            sum_odd_length_subarrays += arr[i]\n    return sum_odd_length_subarrays"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    \"\"\"\n    odd_sum = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1, 2):\n            if j-i+1 % 2!= 0:\n                odd_sum += arr[j-1]\n    return odd_sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    count = 0\n    sum = 0\n    for i in range(n):\n        if i == 0 or arr[i] % 2!= 0:\n            count += 1\n            sum += arr[i]\n        else:\n            count -= 1\n        if count == 0:\n            yield sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    sum_ = 0\n    for i in range(n):\n        if i % 2 == 0:\n            sum_ += arr[i]\n        else:\n            for j in range(i, n, 2):\n                sum_ += arr[j]\n    return sum_"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    This function converts an RGB color to HSV color.\n    It uses the conversion formula:\n    H = (max(R, G, B) - min(R, G, B)) / max(R, G, B)\n    S = 0 if max(R, G, B) = 0 else (max(R, G, B) - min(R, G, B)) / max(R, G, B)\n    V = max(R, G, B)\n    \"\"\"\n    max_rgb = max(r, g, b)\n    min_rgb = min(r, g, b)\n    \n    if max_rgb == min_rgb:\n        h = 0\n        s = 0\n    else:\n        delta = max_rgb - min_rgb\n        h = 60 * (max_rgb - min_rgb) / delta if max_rgb == r else 60 * (max_rgb - min_rgb) / delta + 120\n        \n        if h < 0:\n            h = 0\n        elif h > 360:\n            h = 360\n        \n        s = delta / max_rgb\n    \n    v = max_rgb\n    return h, s, v\n"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n\n    # Get the maximum and minimum values of the RGB values\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n\n    # Calculate the difference between the maximum and minimum values\n    diff = max_value - min_value\n\n    # Calculate the value of the hue based on the RGB values\n    if max_value == r:\n        hue = (g - b) / diff\n    elif max_value == g:\n        hue = 2 + (b - r) / diff\n    else:\n        hue = 4 + (r - g) / diff\n\n    # If the difference between the maximum and minimum values is 0,\n    # then the hue is undefined and set to 0\n    if diff == 0:\n        hue = 0\n\n    # Calculate the value of the saturation based on the RGB values\n    if max_value == 0:\n        saturation = 0\n    else:\n        saturation = diff / max_value\n\n    # Calculate the value of the value (brightness) based on the RGB values\n    value = max_value\n\n    # Convert the HSV values to decimal format\n    hue = round(hue * 60, 2)\n    saturation = round(saturation * 100, 2)\n    value = round(value * 100, 2)\n\n    # Return the HSV values in a tuple\n    return (hue, saturation, value)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color.\n    \"\"\"\n    \n    # Convert RGB to HSV\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmin, cmax = min(r, g, b), max(r, g, b)\n    del_max = cmax - cmin\n    h = 0\n    if del_max == 0:\n        h = 0\n    elif cmax == r:\n        h = ((g-b)/del_max) % 6\n    elif cmax == g:\n        h = (b-r)/del_max + 2\n    elif cmax == b:\n        h = (r-g)/del_max + 4\n    h = h/6\n    \n    s = 0\n    if del_max == 0:\n        s = 0\n    elif del_max == cmin:\n        s = 0\n    else:\n        s = del_max/cmax\n    \n    v = cmax\n    \n    # Convert HSV to RGB\n    r, g, b = 0, 0, 0\n    if h == 0:\n        r, g, b = v, t(v, cmax, cmin), 0\n    elif h == 1:\n        r, g, b = t(cmax, cmin, v), v, 0\n    elif h == 2:\n        r, g, b = 0, v, t(cmax, cmin, v)\n    elif h == 3:\n        r, g, b = t(cmax, cmin, v), 0, v\n    elif h == 4:\n        r, g, b = 0, t(cmax, cmin, v), v\n    elif h == 5:\n        r, g, b = t(cmax, cmin, v), 0, t(cmax, cmin, v)\n    \n    r = r * 255.0\n    g = g * 255.0\n    b = b * 255.0\n    \n    return r, g, b\n\n\ndef t(cmax, cmin, v):\n    \"\"\"\n    Helper function for hsv_to_rgb.\n    \"\"\"\n    return v - cmin\n"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color.\n    \"\"\"\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    delta = max_val - min_val\n\n    if max_val == min_val:\n        h = 0  # achromatic\n    else:\n        if max_val == r:\n            h = (g - b) / delta\n        elif max_val == g:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n\n        h = h / 6  # convert to degrees\n\n    if delta == 0:\n        s = 0\n    else:\n        s = delta / max_val\n\n    v = max_val / 255  # convert to percentage\n\n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    if delta == 0:\n        h = 0\n    else:\n        if cmax == r:\n            h = (g-b)/delta\n        elif cmax == g:\n            h = 2 + (b-r)/delta\n        else:\n            h = 4 + (r-g)/delta\n        if h < 0:\n            h += 6\n        h /= 6\n    \n    if delta == 0:\n        s = 0\n    else:\n        s = delta/cmax\n    \n    v = cmax\n    \n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r = r / 255\n    g = g / 255\n    b = b / 255\n\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n\n    h = 0\n    s = 0\n    v = cmax\n\n    if delta == 0:\n        h = 0\n    elif cmax == r:\n        h = ((g - b) / delta) % 6\n    elif cmax == g:\n        h = (b - r) / delta + 2\n    else:\n        h = (r - g) / delta + 4\n\n    h = h / 6\n\n    if delta == 0:\n        s = 0\n    else:\n        s = delta / (1 - abs(2 * h - 1))\n\n    return (h * 360, s * 100, v * 100)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    This function takes the RGB values of a color as input and returns the HSV values of the color.\n\n    Parameters:\n    r (int): Red value of the color.\n    g (int): Green value of the color.\n    b (int): Blue value of the color.\n\n    Returns:\n    h (int): Hue value of the color.\n    s (int): Saturation value of the color.\n    v (int): Value of the color.\n    \"\"\"\n    # Find the minimum and maximum values among the RGB values\n    min_val = min(r, g, b)\n    max_val = max(r, g, b)\n\n    # Find the delta value between the maximum and minimum values\n    delta = max_val - min_val\n\n    # Calculate the saturation value\n    if max_val == 0:\n        # If the maximum value is 0, then the saturation value is 0\n        s = 0\n    else:\n        s = delta / max_val\n\n    # Calculate the hue value\n    if delta == 0:\n        # If the delta value is 0, then the hue value is 0\n        h = 0\n    elif max_val == r:\n        # Calculate the hue value for the red channel\n        h = 60 * (((g - b) / delta) % 6)\n    elif max_val == g:\n        # Calculate the hue value for the green channel\n        h = 60 * ((b - r) / delta + 2)\n    else:\n        # Calculate the hue value for the blue channel\n        h = 60 * ((r - g) / delta + 4)\n\n    # Convert the hue value to degrees\n    h = h if h < 360 else h - 360\n\n    # Calculate the value value\n    v = max_val\n\n    # Return the HSV values\n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    \"\"\"\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    if delta == 0:\n        h = 0\n        s = 0\n    elif cmax == r:\n        h = 60 * ((g-b)/delta)\n    elif cmax == g:\n        h = 60 * ((b-r)/delta + 2)\n    else:\n        h = 60 * ((r-g)/delta + 4)\n    if h < 0:\n        h += 360\n    hsv = [h, s, v]\n    return hsv"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    This function takes three integers (r, g, b) as input and returns a tuple (h, s, v) where h is the hue angle in degrees, s is the saturation percentage and v is the value percentage.\n\n    The conversion from RGB to HSV color model is done using the following steps:\n\n    1. Convert the RGB values to the linear RGB color space.\n    2. Calculate the maximum and minimum values in the RGB color space.\n    3. Calculate the range of the RGB color space.\n    4. Calculate the hue angle (h).\n    5. Calculate the saturation (s).\n    6. Calculate the value (v).\n\n    Note: The HSV color model uses the angle system with a 0 degree point at the red color, and a 360 degree point at the blue color.\n\n    :param r: Integer between 0 and 255 representing the red color value\n    :param g: Integer between 0 and 255 representing the green color value\n    :param b: Integer between 0 and 255 representing the blue color value\n    :return: Tuple (h, s, v) representing the hue angle, saturation and value in degrees\n    \"\"\"\n\n    r = r / 255  # Convert from 0-255 to 0-1\n    g = g / 255\n    b = b / 255\n\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n    range_value = max_value - min_value\n\n    if max_value == min_value:\n        h = 0  # Red-Green-Blue triangle\n    elif r == max_value:\n        h = ((g - b) / range_value) * 60  # Green-Blue-Red quadrant\n    elif g == max_value:\n        h = ((b - r) / range_value) + 120  # Red-Blue-Green quadrant\n    else:\n        h = ((r - g) / range_value) + 240  # Green-Red-Blue quadrant\n\n    if h < 0:\n        h += 360\n\n    h = round(h)\n\n    s = round((max_value == 0) * 0 + (max_value - min_value) / max_value * 100)\n\n    v = round((max_value * 100) / 255)\n\n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n\n    # Convert r, g, b to floats\n    r, g, b = float(r) / 255, float(g) / 255, float(b) / 255\n\n    # Find the minimum and maximum values of r, g, and b\n    min_val = min(r, g, b)\n    max_val = max(r, g, b)\n\n    # Find the delta between the maximum and minimum values of r, g, and b\n    delta = max_val - min_val\n\n    # Set the h value based on the delta and the r, g, and b values\n    if delta == 0:\n        h = 0\n    elif max_val == r:\n        h = (g - b) / delta\n    elif max_val == g:\n        h = 2 + (b - r) / delta\n    else:\n        h = 4 + (r - g) / delta\n\n    # Set the s value based on the delta and the r, g, and b values\n    if delta == 0:\n        s = 0\n    else:\n        s = delta / max_val\n\n    # Set the v value based on the delta and the r, g, and b values\n    v = max_val\n\n    # Convert the h value from degrees to radians\n    h *= 60\n    h = h % 360\n\n    # Return the hsv values in a list\n    return [int(h), int(s * 255), int(v * 255)]"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_num = 0\n    odd_num = 0\n\n    for num in list1:\n        if num % 2 == 0:\n            even_num += num\n        else:\n            odd_num += num\n\n    if even_num == 0:\n        return odd_num\n    else:\n        return even_num * odd_num"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    Finds the product of the first even and odd numbers in a list.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    product = 1\n\n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n        if even_count > 0 and odd_count > 0:\n            product *= min(num, 2 ** 31 - 1)\n            even_count = 0\n            odd_count = 0\n\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    product = 1\n    for num in list1:\n        if num % 2 == 0:\n            product *= num\n        else:\n            product *= num + 1\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    This function takes a list as input and returns the product of the first even and odd numbers in the list.\n    If there are no even or odd numbers, the function returns None.\n    \"\"\"\n    even_found = False\n    odd_found = False\n    result = 1\n\n    for num in lst:\n        if num % 2 == 0:\n            even_found = True\n            if even_found and odd_found:\n                break\n        elif num % 2!= 0:\n            odd_found = True\n            if even_found and odd_found:\n                break\n\n    if even_found and odd_found:\n        return result * lst[0] * lst[-1]\n    else:\n        return None"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def mul_even_odd(lst):\n    '''\n    This function takes a list as input and returns the product of the first even and odd numbers in the list.\n    '''\n    even = 1\n    odd = 1\n    result = 1\n    \n    for num in lst:\n        if num % 2 == 0:\n            even *= num\n        else:\n            odd *= num\n            \n        result *= (even * odd)\n    \n    return result"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def mul_even_odd(lst):\n    '''\n    This function takes a list as input and returns the product of first even and odd number of the list.\n    '''\n    even_count = 0\n    odd_count = 0\n    product = 1\n    \n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        \n        if even_count > 0 and odd_count > 0:\n            product *= num\n    \n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    This function takes a list as input and returns the product of the first even and first odd number in the list.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    if even_count > 0 and odd_count > 0:\n        return lst[0] * lst[1]\n    else:\n        return \"No even and odd numbers in the list\""
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    This function takes a list as input and returns the product of first even and odd number of the list.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    result = 1\n\n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n            result *= num\n        else:\n            odd_count += 1\n            result *= num\n\n    if even_count == 0 or odd_count == 0:\n        print(\"The list doesn't have even or odd numbers\")\n    else:\n        print(\"The product of first even and odd number is:\", result)\n"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_sum = 0\n    odd_sum = 0\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_sum += num\n        else:\n            odd_sum += num\n    \n    product = even_sum * odd_sum\n    return product\n"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    count = 0\n    result = 1\n    for num in list1:\n        count += 1\n        if num % 2 == 0:\n            result *= num\n        elif num % 2!= 0:\n            result *= num\n        if count == 1:\n            even_num = num\n        elif count == 2:\n            odd_num = num\n        if count == 2:\n            break\n    return result * even_num * odd_num"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # convert tuple string to tuple\n    test_tuple = tuple(test_str.split(','))\n\n    # convert tuple to integer tuple\n    test_int_tuple = tuple(map(int, test_tuple))\n\n    return test_int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n    \"\"\"\n    # Split the string into a list of strings separated by commas\n    list_of_strings = test_str.split(',')\n    \n    # Create a new list to store the converted integers\n    list_of_integers = []\n    \n    # Loop through the list of strings and convert each string to an integer\n    for string in list_of_strings:\n        # Try to convert the string to an integer\n        try:\n            # If conversion is successful, add the integer to the list\n            list_of_integers.append(int(string))\n        except ValueError:\n            # If conversion fails, print an error message and skip the string\n            print(\"Error: Could not convert string '{}' to integer.\".format(string))\n    \n    # Return the list of integers as a tuple\n    return tuple(list_of_integers)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Convert a tuple string to an integer tuple.\n    '''\n    return tuple([int(num) for num in test_str.split(',')])"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(int(i) for i in test_str.replace(\"(\", \"\").replace(\")\", \"\").replace(\",\", \"\").split())"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string into tuples of integers and strings\n    tup_str = tuple(map(int, test_str.split(',')))\n    return tup_str"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    try:\n        test_tuple = eval(test_str)\n        test_list = []\n        for item in test_tuple:\n            if isinstance(item, int):\n                test_list.append(item)\n        return tuple(test_list)\n    except:\n        return \"Invalid input\""
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # split the string into tuple elements\n    tup = tuple(map(int, test_str.split()))\n    return tup"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(map(int, test_str.split(',')))"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    try:\n        # split the tuple string into a list of strings\n        split_list = test_str.split(',')\n        \n        # create an empty tuple\n        int_tuple = ()\n        \n        # loop through each string in the list and convert it to an integer\n        for str_item in split_list:\n            int_item = int(str_item)\n            int_tuple += (int_item,)\n            \n        return int_tuple\n        \n    except ValueError:\n        # if there's an error converting a string to an integer, return None\n        return None"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string by comma and space\n    string_list = test_str.split(', ')\n\n    # Create an empty list to store the integers\n    int_list = []\n\n    # Loop through each string element and convert it to integer if possible\n    for string_elem in string_list:\n        try:\n            int_elem = int(string_elem)\n            int_list.append(int_elem)\n        except ValueError:\n            pass\n\n    # Convert the list of integers to tuple\n    int_tuple = tuple(int_list)\n\n    return int_tuple"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_left(a, x)\n    if index == len(a) or a[index]!= x:\n        # If x is not in a, return the index where it should be inserted\n        return index\n    else:\n        # If x is already in a, return the index where it should be inserted\n        return index + 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def right_insertion(a, x):\n    \"\"\"\n    Given a sorted list a and a value x, find the right insertion point for x in a.\n    \"\"\"\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index == len(a):\n        return len(a)\n    elif index == 0:\n        return 0\n    else:\n        return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index == len(a):\n        index = len(a)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # Bisect module is used to find the right insertion point for the given value in sorted array\n    index = bisect.bisect_right(a, x)\n    # If the given value is greater than the last element of the array\n    if index == len(a):\n        index = 0\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_left(a, x)\n    if index == len(a):\n        return index\n    elif a[index] == x:\n        return index\n    elif a[index] < x:\n        return right_insertion(a[index+1:], x)\n    else:\n        return right_insertion(a[:index], x)"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # bisect.bisect_right() returns the index where a value should be inserted to maintain sorted order.\n    # If x is already present in the list, the returned value will be the index where it should be inserted.\n    # If x is not present in the list, the returned value will be the index where it should be inserted.\n    index = bisect.bisect_right(a, x)\n    # If the index is 0, it means that x is already present in the list.\n    # If the index is equal to the length of the list, it means that x should be appended to the list.\n    if index == 0:\n        return index\n    # If x is greater than the element at index - 1, it means that the element at index - 1 should be moved to the right.\n    elif x > a[index - 1]:\n        return index - 1\n    # If x is less than or equal to the element at index, it means that the element at index should be kept as it is.\n    else:\n        return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    if index < len(a) and a[index] == x:\n        return index\n    else:\n        return bisect.bisect_right(a, x)"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'\\b[aA]\\w{2}b\\w{2}\\b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a+b{3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n\n    pattern = r'a.*b.*b.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b{3}'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None\n"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.*b{3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'ab{3}b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b.*b.*b'\n    match = re.search(pattern, text, flags=re.DOTALL)\n    if match:\n        return 'String contains \"a\" followed by three \"b\"'\n    else:\n        return 'String does not contain \"a\" followed by three \"b\"'"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'ab{3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*?b{3}'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    new_tuple = (test_list, test_str)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tup = (test_str, *test_list)\n    return new_tup"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # convert the list to a tuple\n    new_tuple_list = tuple(test_list)\n    \n    # convert the string to a list\n    new_list = list(test_str)\n    \n    # join the two lists and convert back to a tuple\n    new_tuple = tuple(new_list + new_tuple_list)\n    \n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Create a new tuple from the given string and list.\n\n    Parameters:\n    test_list (list): A list to be included in the new tuple.\n    test_str (str): A string to be included in the new tuple.\n\n    Returns:\n    A new tuple with the elements from the input lists concatenated.\n\n    Example:\n    test_list = [1, 2, 3]\n    test_str = 'hello'\n    new_tuple(test_list, test_str) # Output: (1, 2, 3, 'h', 'e', 'l', 'l', 'o')\n    \"\"\"\n    return (test_list + tuple(test_str))"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # check if test_list is a list and test_str is a string\n    if isinstance(test_list, list) and isinstance(test_str, str):\n        # create a list from test_str\n        test_list = [test_str]\n        # join the list using the string ','\n        new_str = ','.join(test_list)\n        # split the new string into a list and convert it into a tuple\n        new_tuple = tuple(new_str.split(','))\n        return new_tuple\n    else:\n        print(\"Invalid input!\")"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple(test_str) + tuple(test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    # Combine the list and string using the plus operator\n    new_tup = (test_list + test_str)\n    \n    # Return the new tuple\n    return new_tup"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple(test_list + (test_str,))\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_str, *test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Convert the list to a string\n    test_str = str(test_list)\n    \n    # Split the string into a list of characters\n    char_list = list(test_str)\n    \n    # Combine the list of characters with the list of integers\n    combined_list = test_list + char_list\n    \n    # Convert the combined list back to a tuple\n    new_tuple = tuple(combined_list)\n    \n    return new_tuple"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            even_count += 1\n            if even_count == len(nums)//2:\n                return True\n    return False"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_position(nums):\n    even_count = 0\n    for i in range(0, len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2 == 0:\n                even_count += 1\n            else:\n                return False\n    if even_count == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if len(set(nums[i:i+2]))!= 1:\n                return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if not all(num % 2 == 0 for num in nums[i:i+2]):\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    for i in range(len(nums)):\n        if i % 2 == 0 and nums[i] % 2 == 0:\n            even_count += 1\n    return even_count == len(nums)"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 1:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if i % 2 == 0 and nums[i] % 2!= 0:\n            count += 1\n    if count == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    # Initialize a variable to store the result\n    result = True\n\n    # Loop through each index of the list\n    for i in range(len(nums)):\n        # Check if the current index is even\n        if i % 2 == 0:\n            # If it is, check if the current number is even\n            if nums[i] % 2 == 0:\n                # If it is, increment the counter\n                count += 1\n            # If the current number is odd, decrement the counter\n            else:\n                count -= 1\n            # Check if the counter has reached zero\n            if count == 0:\n                # If it has, set the result to False\n                result = False\n                break\n        # If the current index is odd, set the counter back to 0\n        else:\n            count = 0\n    \n    return result"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if sum([True for num in nums[i:] if num % 2 == 0]) % 2 == 0:\n                return True\n        else:\n            if sum([True for num in nums[i:] if num % 2 == 0]) % 2 == 0:\n                return False\n    return False"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    for i in range(len(nums)):\n        if i % 2 == 0 and nums[i] % 2 == 0:\n            even_count += 1\n        if even_count == len(nums) // 2:\n            return True\n    return False"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    new_tup = []\n    for item in test_tup:\n        if type(item)!= tuple:\n            new_tup.append(item)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_list = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            new_list += item\n        else:\n            new_list.append(item)\n    return new_list"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    # Remove nested tuples\n    if type(test_tup[0]) == tuple:\n        return [x for tup in test_tup for x in tup]\n    else:\n        return [x for tup in test_tup for x in tup]"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if type(item)!= tuple:\n            new_tup.append(item)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    nested_tup = []\n    for i in range(len(test_tup)):\n        if type(test_tup[i])!= tuple:\n            nested_tup.append(test_tup[i])\n    return nested_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    return tuple(x for tup in test_tup for x in tup if not isinstance(x, tuple))\n"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n\n    # Check if the input is a tuple\n    if isinstance(test_tup, tuple):\n        # Create an empty list to store the result\n        result_list = []\n        # Loop through each element in the input tuple\n        for element in test_tup:\n            # Check if the element is also a tuple\n            if isinstance(element, tuple):\n                # Recursively call the function\n                result_list.extend(remove_nested(element))\n            else:\n                # Add the element to the result list\n                result_list.append(element)\n        # Return the result list\n        return result_list\n    else:\n        # If the input is not a tuple, return the original input\n        return [test_tup]"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result = []\n    for item in test_tup:\n        if type(item)!= tuple:\n            result.append(item)\n        else:\n            result.append(item[0])\n    return tuple(result)"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return [x for x in test_tup if not isinstance(x, tuple)]"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_list = []\n    for item in test_tup:\n        if type(item) == tuple:\n            new_list.extend(item)\n        else:\n            new_list.append(item)\n    return tuple(new_list)"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_lists(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n\n    count = 0\n    for item in input_list: \n        if type(item) == list: \n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_list(input_list): \n    '''\n    This function takes a list as an input and returns the number of lists in the input list.\n    '''\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes in two arguments: an array and an element x.\n    It returns the last position of the element x in the array arr.\n\n    This function works by using two pointers, one starting at the beginning of the array\n    and one starting at the end. The function compares the element at the starting pointer\n    with the target element x. If they are equal, the function increments the starting pointer\n    until it finds an element that is greater than the target. The function then increments\n    the ending pointer until it finds an element that is less than the target. The function\n    returns the difference between the starting and ending pointers as the last position of\n    the target element x.\n\n    If no such element is found, the function returns -1.\n    \"\"\"\n\n    left = 0\n    right = len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if arr[mid] == x:\n            while mid > 0 and arr[mid-1] == x:\n                mid -= 1\n            return mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last(arr, x):\n    '''\n    This function takes a sorted array and an element as input and returns the last position of the element.\n    If the element is not present in the array, the function will return -1.\n    '''\n    # Initialize left and right pointers to the beginning and end of the array respectively\n    left = 0\n    right = len(arr) - 1\n\n    # Initialize the last position to -1\n    last_position = -1\n\n    # Perform binary search to find the last position of the element\n    while left <= right:\n        mid = left + (right - left) // 2\n\n        # If the element is present at the middle position\n        if arr[mid] == x:\n            # If the element is the last element in the array, update the last position to mid\n            if mid == len(arr) - 1:\n                last_position = mid\n            # If the element is not the last element in the array, perform binary search on the right half of the array\n            else:\n                right = mid - 1\n        # If the element is greater than the element at the middle position\n        elif arr[mid] < x:\n            # Update the left pointer to mid + 1\n            left = mid + 1\n        # If the element is smaller than the element at the middle position\n        else:\n            # Update the right pointer to mid - 1\n            right = mid - 1\n\n    # Return the last position of the element\n    return last_position"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # Initialize the last position as -1\n    last_position = -1\n    \n    # Iterate through the array\n    for i in range(len(arr)):\n        # If the element is equal to x and last_position is still -1\n        if arr[i] == x and last_position == -1:\n            # Set the last position as i\n            last_position = i\n            \n    # Return the last position\n    return last_position"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    i = 0\n    j = len(arr)-1\n    while i <= j:\n        mid = (i+j)//2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] < x:\n            i = mid+1\n        else:\n            j = mid-1\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    n = len(arr)\n    left = 0\n    right = n-1\n\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            right = mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    if left <= n-1 and arr[left] == x:\n        return left\n    elif left <= n-1 and arr[left]!= x:\n        return -1\n    else:\n        return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a Python function to find the last position of an element in a sorted array.\n    \"\"\"\n    left = 0\n    right = len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if arr[mid] == x:\n            if mid == len(arr) - 1 or arr[mid + 1]!= x:\n                return mid\n            else:\n                left = mid + 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return high"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last(arr, x):\n    '''\n    This function takes in a sorted array and an element as input and returns the last position of the element in the array.\n    If the element is not found in the array, it returns -1.\n    '''\n    n = len(arr)\n    # check if x is present in the array\n    for i in range(n):\n        if arr[i] == x:\n            return i\n    # x is not present in the array\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left = 0\n    right = len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if arr[mid] == x:\n            while mid > 0 and arr[mid - 1] == x:\n                mid -= 1\n            return mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # Initialize variables for the array index and last position found\n    i = 0\n    last_index = -1\n\n    # Iterate through the array and find the last position of x\n    while i < len(arr) and arr[i]!= x:\n        if arr[i] > x:\n            last_index = i\n        i += 1\n\n    # Return the last position found\n    return last_index"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'a[^b]*b')\n    match = pattern.search(text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'(?P<start>a)(?P<middle>.*)(?P=start)b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group('middle')\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'(?i)(a\\w+b)'\n    return re.findall(pattern, text)\n"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    return re.findall(pattern, text)"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a[^b]*b'\n    return re.search(pattern, text)"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'\\b[a-zA-Z]+\\b\\s*[a-zA-Z]\\s*b\\b'\n    matches = re.findall(pattern, text, re.IGNORECASE)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a[^b]*b'\n    return re.search(pattern, text)"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for value in dict.values():\n        sum += value\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict.values():\n        sum += item\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict.values():\n        sum += item\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for value in dict.values():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key, value in dict.items():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict:\n        sum += dict[item]\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict.values():\n        sum += item\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for value in dict.values():\n        total += value\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    # taking input from user\n    l = int(input(\"Enter the lower limit of the range: \"))\n    r = int(input(\"Enter the upper limit of the range: \"))\n\n    # initializing the sum variable to zero\n    sum_of_odds = 0\n\n    # iterating through the range of numbers between l and r\n    for i in range(l, r+1):\n        # checking if the number is odd\n        if i % 2!= 0:\n            # adding the odd number to the sum\n            sum_of_odds += i\n\n    # printing the sum of odd numbers between l and r\n    print(\"The sum of odd numbers between {} and {} is {}\".format(l, r, sum_of_odds))"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    # initializing the sum variable to zero\n    sum = 0\n    # iterating through the range of natural numbers from 1 to n\n    for i in range(1, n+1, 2):\n        # adding the current odd number to the sum variable\n        sum += i\n    # returning the sum\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2!= 0:\n            sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_odd(n): \n    '''\n    This function takes in a positive integer n as input and returns the sum of all odd natural numbers within the range [1, n].\n    '''\n\n    # initializing the sum variable \n    sum = 0\n\n    # looping through all the odd numbers between 1 and n \n    for i in range(1, n+1, 2): \n        # adding the current odd number to the sum variable \n        sum += i\n\n    # returning the sum of odd numbers \n    return sum "
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    l, r = int(input(\"Enter the lower limit: \")), int(input(\"Enter the upper limit: \"))\n    odd_sum = 0\n    for i in range(l, r+1):\n        if i % 2!= 0:\n            odd_sum += i\n    print(\"The sum of all odd natural numbers within the given range is:\", odd_sum)\n"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    s = 0\n    for i in range(1, n+1, 2):\n        s += i\n    return s"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l = int(input(\"Enter the lower limit: \"))\n    r = int(input(\"Enter the upper limit: \"))\n\n    sum = 0\n    for i in range(l, r+1):\n        if i%2!= 0:\n            sum += i\n\n    print(\"Sum of all odd natural numbers between\", l, \"and\", r, \"is\", sum)"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l, r = 1, n\n    if l % 2 == 0:\n        l += 1\n    sum = 0\n    for i in range(l, r):\n        if i % 2 == 1:\n            sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    # initialize sum variable to 0\n    sum = 0\n    \n    # loop through range of integers from l to r\n    for i in range(n):\n        # check if current integer is odd\n        if i % 2!= 0:\n            # add it to the sum\n            sum += i\n    \n    # return the sum\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for num in arr:\n        sum += num\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_array(arr):\n    \"\"\"\n    This function finds the sum of an array of numbers using recursion.\n    \"\"\"\n    def _sum(arr, index, total):\n        if index == len(arr):\n            return total\n        return _sum(arr, index+1, total+arr[index])\n\n    return _sum(arr, 0, 0)\n"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_array(arr):\n    \"\"\"\n    Returns the sum of an array.\n    \"\"\"\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_array(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_array(arr):\n    \"\"\"\n    This function takes an array as an argument and returns the sum of the array.\n    \"\"\"\n    total = 0\n    for i in arr:\n        total += i\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    return ((n << d) & 0xffffffff) | ((n >> (32 - d)) & 0xffffffff)"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    # Convert the number to binary string\n    binary_num = bin(n)[2:]\n\n    # Pad the binary string with zeros to the length of d\n    padding = '0' * (d % 32)\n\n    # Reverse the padding\n    padding = padding[::-1]\n\n    # Add the padding to the binary string\n    binary_num = padding + binary_num\n\n    # Convert the binary string back to integer\n    num_rotated = int(binary_num, 2)\n\n    # Return the rotated number\n    return num_rotated"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    mask = (1 << 32) - 1\n    # Calculate the mask to use for left rotation\n    left_shift = (32 - d) % 32\n    # Calculate the number to left rotate\n    left_rotate_num = (n << left_shift) & mask\n    # Calculate the number to right shift\n    right_shift_num = (n >> (d % 32)) & mask\n    # Combine the two numbers to get the final result\n    result = left_rotate_num | right_shift_num\n    return result"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def left_rotate(n, d):\n    # Calculate the left shift amount\n    shift_amount = d % 32\n    \n    # Calculate the right shift amount\n    if d < 0:\n        shift_amount = -shift_amount\n    \n    # Perform the left rotation\n    rotated = n << shift_amount | n >> 32 - shift_amount\n    \n    # Return the rotated number\n    return rotated"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    mask = 0xffffffff << d\n    return ((n << d) | (n & mask)) & 0xffffffff"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = (1 << d) - 1\n    return (n << d) | (n >> (32 - d)) & mask"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = 0xFFFFFFFF\n    return (n << d) | (n & mask)"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    return ((n << d) | (n >> (32 - d))) & 0xFFFFFFFF"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def left_rotate(n,d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = 0xffffffff\n    n = n & mask\n    d = d % 32\n    n = n << d | n >> (32 - d)\n    return n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Convert the binary representation of the input number to a list of bits\n    n_bits = bin(n)[2:].zfill(32)\n    # Convert the binary representation of d to a list of bits\n    d_bits = bin(d)[2:].zfill(5)\n    # Initialize an empty list to store the rotated bits\n    rotated_bits = []\n    # Loop through the bits of the input number\n    for bit in n_bits:\n        # Determine if the current bit is set or not\n        if bit == '1':\n            # Append 1 to the rotated list\n            rotated_bits.append(1)\n        else:\n            # Append 0 to the rotated list\n            rotated_bits.append(0)\n    # Loop through the rotated bits and add them to the result\n    result = []\n    for bit in rotated_bits[::-1]:\n        # Determine if the current bit is set or not\n        if bit == 1:\n            # Add 1 to the result\n            result.append(1)\n        else:\n            # Append 0 to the result\n            result.append(0)\n    # Convert the result list to an integer\n    result = int(''.join(map(str, result)), 2)\n    # Return the rotated number\n    return result"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    \"\"\"\n    Write a function to remove all whitespaces from a string.\n    \"\"\"\n    # use regex to remove all whitespaces from text\n    pattern = re.compile(r'\\s+')\n    text = pattern.sub('', text)\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text)\n"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # Define the regular expression pattern to match all whitespaces\n    pattern = r'\\s+'\n    \n    # Use the `sub()` method to replace all occurrences of whitespaces with an empty string\n    return re.sub(pattern, '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    This function takes a string as input and returns a string with all the whitespaces removed.\n    '''\n    return re.sub('\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    \"\"\"\n    Write a function to remove all whitespaces from a string.\n    \"\"\"\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_three_equal(x, y, z):\n    count = 0\n    for i in range(1, x+1):\n        if i == x or i == y or i == z:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n\n    count = 0\n    if x == y and y == z:\n        count += 1\n    if x == y or y == z or x == z:\n        count += 1\n    if x!= y and y!= z and x!= z:\n        count += 1\n\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    if x == y and x == z:\n        count += 1\n    if y == x and y == z:\n        count += 1\n    if z == x and z == y:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n\n    # initialize a counter variable to store the number of equal numbers\n    count = 0\n\n    # loop through each of the three given integers\n    for num in (x, y, z):\n        # check if the current number is equal to the previous number\n        if num == count:\n            count += 1\n        else:\n            # if the current number is not equal to the previous number, reset the counter to 1\n            count = 1\n\n    # return the final count of equal numbers\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n\n    count = 0\n    for i in range(3):\n        for j in range(3):\n            for k in range(3):\n                if x == y and y == z and z == x:\n                    count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    if x == y and x == z:\n        count += 1\n    if y == x and y == z:\n        count += 1\n    if z == x and z == y:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_three_equal(x,y,z):\n    # create a set of all three numbers\n    all_nums = {x, y, z}\n    # count the number of occurrences of each number in the set\n    num_occurrences = {}\n    for num in all_nums:\n        if num in num_occurrences:\n            num_occurrences[num] += 1\n        else:\n            num_occurrences[num] = 1\n    # count the number of equal numbers\n    equal_count = 0\n    for num in num_occurrences:\n        if num_occurrences[num] == 3:\n            equal_count += 1\n    return equal_count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    if x == y == z:\n        count += 1\n    if x == y!= z:\n        count += 1\n    if x!= y == z:\n        count += 1\n    if x!= y!= z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y and x == z:\n        count += 1\n    if y == x and y == z:\n        count += 1\n    if z == x and z == y:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y and y == z:\n        count += 1\n    if x == y or x == z or y == z:\n        count += 1\n    print(count)"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_rotation(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\n    Parameters:\n    arr: list of integers\n\n    Returns:\n    int: the number of rotations required to generate a sorted array.\n    '''\n\n    n = len(arr)\n    if n == 1:\n        return 0\n\n    # Find the smallest element in the array\n    min_val = arr[0]\n    for i in range(1, n):\n        if arr[i] < min_val:\n            min_val = arr[i]\n\n    # Find the index of the first occurrence of the minimum element\n    first_occurrence = arr.index(min_val)\n\n    # Create a new array where all the elements from the first occurrence to the last index are moved to the beginning of the array\n    new_arr = arr[first_occurrence:] + arr[:first_occurrence]\n\n    # Use binary search to find the number of rotations required to generate a sorted array\n    low = 0\n    high = n - 1\n    count = 0\n\n    while low <= high:\n        mid = (low + high) // 2\n        if is_sorted(new_arr[:mid]):\n            high = mid - 1\n            count += high - low + 1\n        else:\n            low = mid + 1\n\n    return count\n\n\ndef is_sorted(arr):\n    '''\n    Check if the array is sorted in ascending order.\n\n    Parameters:\n    arr: list of integers\n\n    Returns:\n    bool: True if the array is sorted in ascending order, False otherwise.\n    '''\n\n    n = len(arr)\n    for i in range(n - 1):\n        if arr[i] > arr[i + 1]:\n            return False\n    return True\n"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_rotation(arr):\n    \"\"\"\n    Returns the number of rotations required to generate a sorted array.\n\n    :param arr: the unsorted array\n    :return: the number of rotations required\n    \"\"\"\n    n = len(arr)\n    # Find the minimum element in the array\n    min_element = arr[0]\n    for i in range(1, n):\n        if arr[i] < min_element:\n            min_element = arr[i]\n\n    # Find the maximum element in the array\n    max_element = arr[n - 1]\n    for i in range(n - 2, -1, -1):\n        if arr[i] > max_element:\n            max_element = arr[i]\n\n    # Compare the maximum and minimum elements\n    if max_element > min_element:\n        # If the maximum element is greater than the minimum element,\n        # there is no rotation required\n        return 0\n\n    # If the maximum element is less than or equal to the minimum element,\n    # there are two rotations required\n    return 2"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # Check if array is already sorted\n    for i in range(n-1):\n        if arr[i] > arr[i+1]:\n            return 0\n    \n    # If array is not sorted, we need to rotate it to make it sorted\n    # Two pointers approach\n    l, r = 0, n-1\n    count = 0\n    while l < r:\n        if arr[l] <= arr[r]:\n            l += 1\n        else:\n            r -= 1\n        count += r - l\n    return count + n - l"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        if arr[i] > arr[i + 1]:\n            count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_rotation(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    # Check if the array is already sorted\n    if arr == sorted(arr):\n        return 0\n    # Calculate the minimum and maximum values in the array\n    min_val = arr[0]\n    max_val = arr[n-1]\n    # Iterate over the array and check if each element is greater than the minimum value\n    # If an element is greater than the minimum value, we need to rotate the array\n    count = 0\n    for i in range(1, n-1):\n        if arr[i] > min_val:\n            min_val = arr[i]\n            count += 1\n        elif arr[i] < min_val:\n            break\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    if n == 1:\n        return 0\n    \n    for i in range(n):\n        if arr[i] > arr[i+1]:\n            return i\n            \n    return n - 1"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_rotation(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array.\n    '''\n    n = len(arr)\n    if n <= 1:\n        return 0\n    \n    # Iterate through all possible rotations of the array\n    count = 0\n    for i in range(n):\n        # Check if the array is already sorted\n        if all(arr[j] <= arr[j+1] for j in range(n-i-1)):\n            count += 1\n        # Rotate the array by 1 element\n        arr.append(arr.pop(0))\n    \n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_rotation(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    # Check if the array is already sorted or not\n    if arr == sorted(arr):\n        return 0\n    # Check if the array is already sorted in descending order\n    if arr == sorted(arr, reverse=True):\n        return 0\n    \n    # Perform binary search on the array to find the number of rotations required\n    left = 0\n    right = n - 1\n    count = 0\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] > arr[right]:\n            left = mid + 1\n        else:\n            right = mid - 1\n            count += mid\n    return count + 1"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    # check if array is already sorted\n    if arr == sorted(arr):\n        return 0\n    # check if array is already sorted in reverse order\n    if arr == sorted(arr, reverse=True):\n        return n\n    # iterate through the array and check if any element is greater than its neighbor\n    for i in range(n - 1):\n        if arr[i] > arr[i + 1]:\n            count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # Check if array is sorted or not\n    for i in range(n-1):\n        if arr[i] > arr[i+1]:\n            return 0\n    # Traverse the array and find the number of rotations required\n    count = 0\n    for i in range(n//2):\n        if arr[i] > arr[n-i-1]:\n            return 0\n        for j in range(i+1, n-i-1):\n            if arr[i] > arr[j]:\n                return 0\n            if arr[j] < arr[n-i-1]:\n                return 0\n        count += 1\n    # If all the elements in the array are in ascending order, there will be 0 rotations required\n    if count == 0:\n        return 0\n    else:\n        return count"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # return True if n is a perfect square, otherwise return False\n    root = int(n ** 0.5)\n    return root ** 2 == n"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    root = n ** 0.5\n    if root == int(root):\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    if n < 0:\n        return False\n    i = 1\n    while i * i <= n:\n        if i * i == n:\n            return True\n        i += 1\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. \n    This function uses the Babylonian method which is an algorithm to determine whether a given number is a perfect square or not.\n    '''\n    low = 0\n    high = n\n    while low <= high:\n        mid = (low + high) // 2\n        if mid * mid == n:\n            return True\n        elif mid * mid < n:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function checks whether a given number is a perfect square or not.\n    \"\"\"\n    if n < 0:\n        return False\n    elif n == 0 or n == 1:\n        return True\n    else:\n        square = 0\n        while square * square <= n:\n            square += 1\n        return square * square == n"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Check whether the given number is a perfect square or not.\n    \"\"\"\n    i = 1\n    while i * i <= n:\n        if n == i * i:\n            return True\n        i += 1\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # Taking square root of n\n    root = int(n**0.5)\n    # Checking if root is an integer\n    if root**2 == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n <= 0:\n        return False\n    left = 1\n    right = n\n    while left <= right:\n        mid = (left + right) // 2\n        if mid * mid == n:\n            return True\n        elif mid * mid < n:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # Check if the number is negative or zero\n    if n < 0 or n == 0:\n        return False\n    # Find the square root of n\n    sqrt_n = int(n ** 0.5) + 1\n    # Check if the square root is equal to n\n    if sqrt_n ** 2 == n:\n        return True\n    # If not, return False\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n\n    # convert the number to integer and check if it is less than 2\n    if n < 2:\n        return False\n\n    # check if the number is equal to its square root using the formula sqrt(n) = (1 + sqrt(5)) / 2\n    root = int((1 + n ** 0.5) ** 0.5)\n    if root * root == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr: \n        product *= num\n    if product % 2 == 0: \n        return \"Product is even\"\n    else: \n        return \"Product is odd\""
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    \n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    \n    for num in arr:\n        product *= num\n        \n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    This function checks whether the product of numbers in a list is even or not.\n    \"\"\"\n    # initialize the product variable to 1\n    product = 1\n    # loop through the list of numbers\n    for num in arr:\n        # multiply the product by the current number\n        product *= num\n        # if the product becomes odd after multiplying the current number, return False\n        if product % 2!= 0:\n            return False\n    # if the loop completes without finding an odd product, return True\n    return True"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    \n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        print(\"Product is even\")\n    else:\n        print(\"Product is odd\")"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = None\n    for lst in lists:\n        sum_lst = sum(lst)\n        if sum_lst > max_sum:\n            max_sum = sum_lst\n            max_list = lst\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    def helper(lists, current_sum, index):\n        if index == len(lists) - 1:\n            return current_sum\n        else:\n            return max(current_sum + lists[index][index], helper(lists, current_sum, index + 1))\n\n    max_sum = 0\n    max_list = []\n\n    for list in lists:\n        if sum(list) > max_sum:\n            max_sum = sum(list)\n            max_list = list\n\n    return max_list\n"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = []\n    for l in lists:\n        sum_ = sum(l)\n        if sum_ > max_sum:\n            max_sum = sum_\n            max_list = l\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = []\n    for lst in lists:\n        lst_sum = sum(lst)\n        if lst_sum > max_sum:\n            max_sum = lst_sum\n            max_list = lst\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = []\n    for l in lists:\n        sum_l = sum(l)\n        if sum_l > max_sum:\n            max_sum = sum_l\n            max_list = l\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = None\n    for lst in lists:\n        sum_lst = sum(lst)\n        if sum_lst > max_sum:\n            max_sum = sum_lst\n            max_list = lst\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n\n    for i in lists:\n        temp_sum = 0\n        for j in i:\n            temp_sum += j\n        if temp_sum > max_sum:\n            max_sum = temp_sum\n            max_list = i\n\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = []\n\n    for i in lists:\n        current_sum = sum(i)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = i\n\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = []\n    for i in range(len(lists)):\n        temp_sum = sum(lists[i])\n        if temp_sum > max_sum:\n            max_sum = temp_sum\n            max_list = lists[i]\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    max_sum = float('-inf')\n    max_list = []\n\n    for l in lists:\n        for i in range(len(l)):\n            for j in range(i+1, len(l)+1):\n                current_sum = sum(l[i:j])\n                if current_sum > max_sum:\n                    max_sum = current_sum\n                    max_list = l[i:j]\n\n    return max_list"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count = 1\n    max_count = 1\n    start = 0\n\n    for i in range(1, len(test_str)):\n        if test_str[i]!= test_str[start]:\n            if test_str[i].isupper():\n                count += 1\n            else:\n                count = 1\n            if count > max_count:\n                max_count = count\n                start = i\n        else:\n            if test_str[i].isupper():\n                count += 1\n            else:\n                count = 1\n\n    return max_count"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    current_run = 0\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n        else:\n            if current_run > max_run:\n                max_run = current_run\n            current_run = 0\n    if current_run > max_run:\n        max_run = current_run\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    # initialize variables\n    max_run = 0\n    current_run = 0\n    current_char = \"\"\n\n    # iterate over the string\n    for char in test_str:\n        # check if the current character is uppercase\n        if char.isupper():\n            # if it is, increment the current run count\n            current_run += 1\n        else:\n            # if not, check if the current run is longer than the maximum run found so far\n            if current_run > max_run:\n                # if it is, update the maximum run\n                max_run = current_run\n                # and update the current run count\n                current_run = 1\n                # and reset the current character\n                current_char = char\n            else:\n                # if not, reset the current run count\n                current_run = 0\n\n    # check if there is a maximum run of uppercase characters after the end of the string\n    if current_run > max_run:\n        max_run = current_run\n        current_run = 1\n\n    # return the maximum run of uppercase characters\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    # Initialize variables to keep track of the current run of uppercase characters and the maximum run found so far\n    current_run = 0\n    max_run = 0\n    \n    # Loop through each character in the string\n    for char in test_str:\n        # If the character is uppercase, increment the current run count\n        if char.isupper():\n            current_run += 1\n        # If the character is not uppercase, reset the current run count and update the maximum run if necessary\n        else:\n            if current_run > max_run:\n                max_run = current_run\n            current_run = 0\n    \n    # If the current run count is greater than the maximum run, update the maximum run\n    if current_run > max_run:\n        max_run = current_run\n    \n    # Return the maximum run of uppercase characters found\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    \n    # Initialize variables to store run length and current run\n    run_length = 0\n    current_run = ''\n    \n    # Iterate over each character in the string\n    for char in test_str:\n        \n        # If the current character is uppercase, increase the run length\n        if char.isupper():\n            run_length += 1\n        \n        # If the current character is not uppercase, reset the run length to 0\n        else:\n            run_length = 0\n            \n        # If the run length is greater than the current run, update the current run\n        if run_length > len(current_run):\n            current_run = test_str[:run_length]\n    \n    # Return the maximum run of uppercase characters in the string\n    return current_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    count = 0\n    start = 0\n    max_count = 0\n\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            count += 1\n        else:\n            count = 0\n\n        if count > max_count:\n            max_count = count\n            start = i - max_count + 1\n\n    return test_str[start:start+max_count]"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n\n    Args:\n        test_str (str): Input string to analyze.\n\n    Returns:\n        int: Maximum run of uppercase characters.\n    \"\"\"\n    run_length = 0\n    uppercase_count = 0\n    for i, char in enumerate(test_str):\n        if char.isupper():\n            uppercase_count += 1\n        else:\n            if uppercase_count > run_length:\n                run_length = uppercase_count\n            uppercase_count = 0\n    if uppercase_count > run_length:\n        run_length = uppercase_count\n    return run_length"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n\n    # Initialize variables\n    run_length = 0\n    run_start = 0\n\n    # Iterate through the string\n    for i in range(len(test_str)):\n        # If the character is uppercase, increase the run length and reset the start index if the run is longer\n        if test_str[i].isupper():\n            run_length += 1\n            if run_length > run_start:\n                run_start = i\n        else:\n            # If the character is not uppercase, reset the run length and the start index\n            run_length = 0\n            run_start = i\n\n    # Return the maximum run length and its start index\n    return (run_length, run_start)"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    # create a list to store the run of uppercase characters\n    run_list = []\n\n    # iterate through the characters in the string\n    for char in test_str:\n        # if the current character is uppercase and the length of the run list is 0,\n        # add the current character to the run list\n        if char.isupper() and len(run_list) == 0:\n            run_list.append(char)\n        # if the current character is uppercase and the length of the run list is greater than 0,\n        # check if the previous character was also uppercase. If it was, add the current character to the run list.\n        elif char.isupper() and len(run_list) > 0:\n            if run_list[-1].isupper():\n                run_list.append(char)\n        # if the current character is not uppercase and the length of the run list is greater than 0,\n        # add the current character to the run list.\n        elif not char.isupper() and len(run_list) > 0:\n            run_list.append(char)\n\n    # sort the run list in descending order\n    run_list.sort(reverse=True)\n\n    # return the maximum run of uppercase characters\n    return ''.join(run_list)"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    \n    count = 1\n    start = 0\n    max_run = 0\n    \n    for i in range(1, len(test_str)):\n        if test_str[i].isupper():\n            count += 1\n        else:\n            if count > max_run:\n                max_run = count\n                start = i - count + 1\n                \n            count = 1\n            \n    if count > max_run:\n        max_run = count\n        start = len(test_str) - count + 1\n        \n    return max_run, start"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns the first odd number in the list. If the list contains no odd numbers, it returns None.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:  # if the number is odd\n            return num\n    return None  # if the list contains no odd numbers"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    '''\n    This function takes a list of numbers as input and returns the first odd number in the list.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for i in range(len(test_tup)):\n        if test_tup[i] == K:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    \"\"\"\n    Write a function to check if the given tuples contain the k or not.\n    \"\"\"\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if len(tup) == K:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    for i in range(len(test_tup)):\n        if test_tup[i] == K:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    count = 0\n    for tup in test_tup:\n        if tup[1] == K:\n            count += 1\n    if count >= len(test_tup) // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n\n    for tup in test_tup:\n        if tup[1] == K:\n            return True\n\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    \"\"\"\n    Write a function to check if the given tuples contain the k or not.\n    \"\"\"\n    if len(test_tup) == 0 or len(test_tup) < K:\n        return False\n    else:\n        for i in range(K):\n            if test_tup[i] not in test_tup[i+1:]:\n                return False\n        return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    \"\"\"\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    \n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples must have the same length.\")\n        return\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            print(\"The element in the second tuple is not smaller than the corresponding element in the first tuple.\")\n            return"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The two tuples are not of equal length.\")\n        return\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            print(f\"{test_tup1[i]} is greater than {test_tup2[i]}.\")\n            return\n    print(\"All elements in the second tuple are smaller than or equal to their corresponding elements in the first tuple.\")\n    return"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    # Check if the length of the two tuples is equal\n    if len(test_tup1) == len(test_tup2):\n        # Loop through the two tuples and compare each element\n        for i in range(len(test_tup1)):\n            if test_tup1[i] > test_tup2[i]:\n                return False\n        # If all elements of the two tuples are smaller, return True\n        return True\n    else:\n        # If the length of the two tuples is different, return False\n        return False"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"Tuples must have the same length.\"\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    # Check if the length of the tuples is equal\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    \n    # Check if each element of second tuple is smaller than its corresponding element in the first tuple\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same number of elements\")\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    }
]