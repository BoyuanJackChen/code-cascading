[
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Using sets to remove duplicates and compare sets\n    return list(set(test_tup1) & set(test_tup2))"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared.append(element)\n    return shared"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # get the set of elements from both lists\n    common_set = set(test_tup1) & set(test_tup2)\n    # return the list of elements found in both lists\n    return list(common_set)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Create two sets to store the unique elements from each list\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n\n    # Find the intersection of the two sets and return as a list\n    return list(set1.intersection(set2))"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] in test_tup2 and test_tup2[test_tup2.index(test_tup1[i])].startswith(test_tup1[i]):\n            shared_elements.append(test_tup1[i])\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    shared_elements = set1.intersection(set2)\n    return list(shared_elements)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for item in test_tup1:\n        if item in test_tup2:\n            shared_elements.append(item)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Initialize an empty set to hold the shared elements\n    shared_set = set()\n    # Loop through the first tuple\n    for element in test_tup1:\n        # Check if the element is in the second tuple and add it to the shared set if it is\n        if element in test_tup2:\n            shared_set.add(element)\n    # Return the shared set as a list\n    return list(shared_set)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # flatten the two lists to get unique elements\n    flattened_list1 = list(set(test_tup1))\n    flattened_list2 = list(set(test_tup2))\n\n    # compare each element of the flattened lists and check if they are present in both lists\n    shared_elements = []\n    for element in flattened_list1:\n        if element in flattened_list2:\n            shared_elements.append(element)\n\n    return shared_elements"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    # check if number is less than 2\n    if n < 2:\n        return True\n    \n    # check if number is 2 or 3\n    if n == 2 or n == 3:\n        return False\n    \n    # check if number is divisible by 2 or 3\n    if n % 2 == 0 or n % 3 == 0:\n        return True\n    \n    # check if number is divisible by odd numbers from 5 to sqrt(n)\n    for i in range(5, int(math.sqrt(n))+1, 6):\n        if n % i == 0 or n % (i+2) == 0:\n            return True\n        \n    # if none of the above conditions are satisfied, then the number is prime\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function takes an integer n as input and returns True if it is not a prime number, and False otherwise.\n    '''\n\n    if n <= 1:\n        return True\n    elif n == 2:\n        return False\n    else:\n        for i in range(2, int(math.sqrt(n))+1):\n            if n % i == 0:\n                return True\n        return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function takes an integer as input and returns a boolean value indicating whether it's a prime number or not.\n    '''\n    if n < 2:\n        return False\n    \n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    \n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n\n    for i in range(3, int(math.sqrt(n))+1, 2):\n        if n % i == 0:\n            return False\n\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    Write a python function to identify non-prime numbers.\n    \"\"\"\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    Write a python function to identify non-prime numbers.\n    \"\"\"\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function takes an integer n as input and returns True if it's not a prime number, False otherwise.\n    '''\n\n    # Check if n is less than 2\n    if n < 2:\n        return True\n\n    # Check if n is divisible by any number from 2 to sqrt(n)\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef is_prime(n):\n    '''\n    Returns True if n is a prime number, False otherwise.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_not_prime(n):\n    '''\n    Returns True if n is a non-prime number, False otherwise.\n    '''\n    return not is_prime(n)"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n\n    if n <= 1:\n        return False\n    elif n == 2 or n == 3:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(math.sqrt(n))+1, 2):\n            if n % i == 0:\n                return False\n        return True"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        hq.heappush(heap, num)\n        if len(heap) > n:\n            hq.heappop(heap)\n    return heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # convert the list into a heap and return the n largest elements\n    return [hq.heappop(nums) for _ in range(n)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Build a max heap from the list of numbers\n    hq.heapify(nums)\n\n    # Extract the n largest numbers from the heap and return them in descending order\n    return [hq.heappop(nums) for _ in range(n)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Build a min heap of the n largest numbers\n    hq.heapify(nums[:n])\n\n    # Extract and return the n largest numbers from the heap\n    return [hq.heappop(nums) for i in range(n)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums) # convert the list to a min heap\n    largest = []\n    while len(nums) > 0 and len(largest) < n:\n        largest.append(heapq.heappop(nums)) # pop the smallest element and append to the largest list\n    return largest"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    \"\"\"\n    # Convert the list to a min heap and extract the first n largest integers\n    min_heap = nums[:n]\n    hq.heapify(min_heap)\n    for i in range(n, len(nums)):\n        # Extract the smallest element from the heap and replace it with the new element\n        smallest = hq.heappop(min_heap)\n        hq.heappush(min_heap, nums[i])\n        # Add the smallest element back to the heap\n        hq.heappush(min_heap, smallest)\n    # Return the min heap as the largest n largest integers\n    return min_heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    while n > 1:\n        hq.heappop(nums)\n        n -= 1\n    return nums"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    \"\"\"\n    # create a min-heap of size n\n    heap = [-x for x in nums[:n]]\n    hq.heapify(heap)\n    # add the remaining numbers to the heap\n    for num in nums[n:]:\n        # remove the smallest number from the heap\n        heapq.heappop(heap)\n        # add the new number to the heap\n        heapq.heappush(heap, -num)\n    # return the heap\n    return heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Create a max heap of size n\n    max_heap = []\n    for num in nums:\n        heapq.heappush(max_heap, num)\n\n    # Extract the n largest integers and return them in descending order\n    return [heapq.heappop(max_heap) for _ in range(n)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        hq.heappush(heap, num)\n        if len(heap) > n:\n            hq.heappop(heap)\n    return heap"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return True\n    else:\n        return (x & (x - 1)) == 0"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    This function takes an integer x as input and returns True if x is a power of 2, else False.\n    '''\n    if x == 0:\n        return False\n    else:\n        return is_Power_Of_Two(x >> 1) or x & 1"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return True\n    else:\n        if x & (x - 1) == 0:\n            return True\n        else:\n            return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x & (x-1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # Find the number of set bits in x\n    count = 0\n    while x > 0:\n        count += x & 1\n        x >>= 1\n    # Check if count is odd or not\n    if count % 2 == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    count = 0\n    while x!= 0:\n        if x & 1 == 1:\n            count += 1\n        x >>= 1\n    return count == 1"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n    if x & (x - 1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return True\n    elif x & (x-1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    diff = x ^ (x - 1)\n    return diff == 0"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n\n    # Initialize the flag variable\n    is_pow_of_two = False\n\n    # Loop through each bit of the binary representation of x\n    for i in range(32):\n        # Check if the i-th bit of the binary representation of x is set\n        if (x & (1 << i))!= 0:\n            # Check if there is at least one bit that differs from the i-th bit of x\n            if (x & (~(1 << i)))!= 0:\n                is_pow_of_two = True\n                break\n\n    # Return the result\n    return is_pow_of_two"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w{4,}\\b' # matches any word with at least 4 characters\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Use regex to split the text into words\n    words = re.findall(r'\\b\\w+\\b', text.lower())\n    # Filter the words to only those that are at least 4 characters long\n    long_words = [word for word in words if len(word) >= 4]\n    return long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Define the regular expression pattern to match words with at least 4 characters\n    pattern = r'\\b\\w{4,}\\b'\n\n    # Find all words in the string that match the pattern\n    matches = re.findall(pattern, text)\n\n    # Return the list of matched words\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_char_long(text):\n    words = re.findall(r'\\b\\w+\\b', text)\n    return [word for word in words if len(word) >= 4]"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w{4,}\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n\n    # Find all words that are at least 4 characters long\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_char_long(text):\n    words = re.findall(r'\\b\\w{4,}\\b', text.lower())\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall('\\b\\w+\\b', text)\n    long_words = [word for word in words if len(word) >= 4]\n    return long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Split the string into words using regular expressions\n    words = re.findall(r'\\b\\w+\\b', text)\n    \n    # Filter out words with less than 4 characters\n    long_words = [word for word in words if len(word) >= 4]\n    \n    # Return the filtered list of long words\n    return long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text)\n    result = [word for word in words if len(word) >= 4]\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num ** 2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    \"\"\"\n    Write a function to find squares of individual elements in a list.\n    \"\"\"\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num*num)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num*num)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    # Check if the string is a palindrome\n    if str == str[::-1]:\n        return 0\n    \n    # Initialize minimum rotation count to infinity\n    min_rotations = float('inf')\n    \n    # Loop through all possible rotations of the string\n    for i in range(n):\n        # Initialize a new string with the current character removed\n        new_str = str[:i] + str[i+1:]\n        # Check if the new string is a palindrome\n        if new_str == new_str[::-1]:\n            # If it is, calculate the minimum number of rotations\n            num_rotations = (n - i - 1) // 2\n            min_rotations = min(min_rotations, num_rotations)\n    \n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n\n    # Initialize the dictionary to store the frequency of each character\n    freq = {}\n\n    # Loop through the string and update the frequency dictionary\n    for char in str:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n\n    # Find the maximum frequency of each character\n    max_freq = max(freq.values())\n\n    # Initialize the count of rotations to 0\n    count = 0\n\n    # Loop through the frequency dictionary and count the rotations\n    for freq_char in freq:\n        if freq[freq_char] == max_freq:\n            count += 1\n\n    # Return the count of rotations\n    return count"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n\n    # Find the length of the string\n    n = len(str)\n\n    # Initialize two variables to keep track of the minimum number of rotations and the number of rotations required\n    min_rotations = 0\n    rotations = 0\n\n    # While the length of the string is greater than 1, rotate the string\n    while n > 1:\n\n        # Find the midpoint of the string\n        mid = n // 2\n\n        # Compare the first and last characters of the string\n        if str[0]!= str[mid]:\n\n            # If the first and last characters are different, increment the number of rotations\n            rotations += 1\n\n            # Check if the number of rotations is the minimum so far\n            if rotations < min_rotations:\n                min_rotations = rotations\n\n        # If the first and last characters are the same, rotate the string to the right\n        else:\n            str = str[mid:] + str[:mid]\n\n        # Update the length of the string\n        n = len(str)\n\n    # Return the minimum number of rotations\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Rotations(str):\n    \"\"\"\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    \"\"\"\n    n = len(str)\n\n    # Find all permutations of the string\n    perms = []\n    for i in range(n):\n        for j in range(i+1, n+1):\n            perms.append(str[i:j])\n\n    # Sort the permutations by length and lexicographic order\n    perms.sort(key=lambda x: (len(x), x))\n\n    # Find the index of the first rotation\n    first_rot = 0\n    for i in range(1, n+1):\n        if len(perms[i-1])!= i:\n            first_rot = i\n            break\n\n    return first_rot"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # Convert the input string to a list of characters\n    char_list = list(str)\n\n    # Initialize the minimum number of rotations to be the length of the input string\n    min_rotations = len(char_list)\n\n    # Perform a binary search to find the minimum number of rotations\n    left, right = 0, len(char_list) - 1\n    while left <= right:\n        mid = (left + right) // 2\n\n        # If the mid character is in the correct position, the number of rotations required is mid\n        if char_list[mid] == str[mid]:\n            min_rotations = mid\n            right = mid - 1\n\n        # If the mid character is in the wrong position, the number of rotations required is mid + 1\n        elif char_list[mid] < str[mid]:\n            right = mid - 1\n\n        # If the mid character is in the wrong position, the number of rotations required is mid + 1\n        else:\n            left = mid + 1\n\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Rotations(str): \n    \"\"\"\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    \"\"\"\n    # Initialize variables\n    n = len(str)\n    count = 0\n    min_rotations = n\n    \n    # Loop through each character in the string\n    for i in range(n): \n        # Check if the character is the same as the next character\n        if str[i] == str[i+1]: \n            count += 1\n            \n            # If the count is greater than the minimum count, update the minimum count and continue looping\n            if count > min_rotations: \n                min_rotations = count\n                continue\n            \n            # If the count is equal to the minimum count, rotate the string and continue looping\n            else: \n                str = str[i+1:] + str[:i+1]\n                count = 0\n                i = -1 # Reset the loop counter to restart from the beginning of the string\n                \n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    min_rotations = 0\n    max_rotations = 0\n\n    # Find the length of the shortest and longest strings\n    for i in range(n):\n        for j in range(i+1, n):\n            if len(str[i:j+1]) < len(str[min_rotations:max_rotations+1]):\n                min_rotations = j\n            if len(str[i:j+1]) > len(str[min_rotations:max_rotations+1]):\n                max_rotations = j\n\n    # Calculate the minimum number of rotations\n    min_rotations = max(0, min_rotations)\n    min_rotations = min_rotations - 1\n\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Rotations(str):\n    str_dict = {}\n    for char in str:\n        if char in str_dict:\n            str_dict[char] += 1\n        else:\n            str_dict[char] = 1\n            \n    min_rotations = 0\n    for value in str_dict.values():\n        if value == 1:\n            min_rotations += 1\n        else:\n            break\n            \n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n\n    # Creating a dictionary to store the frequency of characters in the string\n    freq = {}\n    for char in str:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n\n    # Sorting the dictionary by frequency in descending order\n    sorted_freq = sorted(freq.items(), key=lambda x: x[1], reverse=True)\n\n    # Counting the number of rotations required to get the same string\n    count = 1\n    prev_char = sorted_freq[0][0]\n    for char in sorted_freq:\n        if char[0] == prev_char:\n            count += 1\n        else:\n            count = 1\n            prev_char = char[0]\n\n    return count"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Rotations(str): \n    n = len(str)\n    # Initialize an empty dictionary to store the frequency of characters in the string\n    freq = {}\n    # Count the frequency of each character in the string\n    for i in range(n):\n        if str[i] in freq:\n            freq[str[i]] += 1\n        else:\n            freq[str[i]] = 1\n    # Find the minimum frequency of each character in the string\n    min_freq = {}\n    for i in freq:\n        if freq[i] in min_freq:\n            min_freq[freq[i]].append(i)\n        else:\n            min_freq[freq[i]] = [i]\n    # Find the minimum number of rotations required to get the same string\n    min_rot = float('inf')\n    for i in min_freq:\n        if i!= min_freq[i][0]:\n            rotations = abs(i - min_freq[i][0])\n            if rotations < min_rot:\n                min_rot = rotations\n    return min_rot"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # check if the given character is present in the string\n    if ch in s:\n        # remove first occurrence of the character\n        s = s.replace(ch,'',1)\n        # remove last occurrence of the character\n        s = s.replace(ch,'',-1)\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # check if the character exists in the string\n    if ch not in s:\n        print(\"The character does not exist in the string.\")\n        return\n\n    # find the index of the first occurrence of the character\n    index = s.find(ch)\n\n    # remove the first occurrence of the character\n    s = s[:index] + s[index+1:]\n\n    # find the index of the last occurrence of the character\n    index2 = s.rfind(ch)\n\n    # remove the last occurrence of the character\n    s = s[:index2] + s[index2+1:]\n\n    print(\"The modified string is:\", s)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = s.replace(ch, \"\") # remove first occurrence of char\n    s = s.replace(ch, \"\", 1) # remove last occurrence of char\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch, '').replace(ch, '', 1)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if s.count(ch) == 0:\n        return s\n    else:\n        return s[1:-1]"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_Occ(s, ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch in s:\n        return s.replace(ch, '', 1) + s.replace(ch, '', -1)\n    else:\n        return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.strip(ch)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # check if the character is present in the string\n    if ch not in s:\n        return \"Character not present in the string\"\n    else:\n        # initialize variables to keep track of the position of the first and last occurrence of the character\n        first_occ = s.find(ch)\n        last_occ = s.rfind(ch)\n        # check if the first and last occurrence are the same\n        if first_occ == last_occ:\n            # remove only the first occurrence\n            s = s[:first_occ] + s[first_occ+1:]\n        else:\n            # remove both occurrences\n            s = s[:first_occ] + s[first_occ+1:last_occ] + s[last_occ+1:]\n        # return the modified string\n        return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n\n    # Remove first occurrence\n    if s.find(ch) == 0:\n        s = s[1:]\n\n    # Remove last occurrence\n    if s.rfind(ch) == len(s)-1:\n        s = s[:len(s)-1]\n\n    return s\n"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_Occ(s, ch):\n    '''\n    This function removes first and last occurrence of a given character from the string.\n    '''\n    # split the string into a list of characters\n    chars = list(s)\n    \n    # find the index of the first occurrence of the character\n    first = chars.index(ch)\n    \n    # remove the first occurrence from the list\n    chars.pop(first)\n    \n    # find the index of the last occurrence of the character\n    last = chars.index(ch)\n    \n    # remove the last occurrence from the list\n    chars.pop(last)\n    \n    # join the list of characters into a string and return it\n    return ''.join(chars)"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    rows = len(M)\n    cols = len(M[0])\n    # create a list to store the sum of each row\n    row_sums = [sum(row) for row in M]\n    # sort the row sums in ascending order\n    row_sums.sort()\n    # create a new matrix with the sorted row sums as the first column\n    sorted_M = [[row_sums[i]] for i in range(rows)]\n    # create a list to store the cumulative sums of the rows\n    cum_sums = [row_sums[0]]\n    for i in range(rows - 1):\n        cum_sums.append(cum_sums[-1] + row_sums[i + 1])\n    # sort the cumulative sums in ascending order\n    cum_sums.sort()\n    # create a new matrix with the sorted cumulative sums as the first row\n    for i in range(rows):\n        sorted_M.insert(i, [cum_sums[i]])\n    # transpose the sorted matrix to obtain the final sorted matrix\n    sorted_M = [sorted_M[j][i] for i in range(cols) for j in range(rows)]\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # get the dimensions of the matrix\n    rows = len(M)\n    cols = len(M[0])\n\n    # create a temporary list to store the sums of each row\n    sums = [0] * rows\n\n    # calculate the sum of each row and store it in the sums list\n    for i in range(rows):\n        for j in range(cols):\n            sums[i] += M[i][j]\n\n    # sort the sums list in ascending order\n    sums.sort()\n\n    # create a new matrix to store the sorted matrix\n    sorted_M = [[0] * cols for _ in range(rows)]\n\n    # fill the sorted matrix with the sorted sums\n    for i in range(rows):\n        for j in range(cols):\n            index = sums.index(sums[i])\n            sorted_M[i][j] = M[i][j]\n            sums.pop(index)\n\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n\n    # Find the sum of each row in the matrix\n    row_sums = [sum(row) for row in M]\n\n    # Sort the matrix based on the sum of rows\n    sorted_M = sorted(M, key=lambda x: row_sums.index(sum(x)))\n\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # calculate the sum of each row\n    row_sums = [sum(row) for row in M]\n    # sort the rows in ascending order\n    sorted_rows = sorted(range(len(M)), key=lambda i: row_sums[i])\n    # rearrange the rows of the matrix according to the sorted indices\n    sorted_M = [[M[j][i] for j in sorted_rows] for i in range(len(M[0]))]\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Create a copy of the matrix for sorting\n    sorted_matrix = M.copy()\n\n    # Sort the matrix in ascending order based on the sum of its rows\n    for i in range(len(sorted_matrix)):\n        for j in range(len(sorted_matrix[i])):\n            # Sort the elements in the current row\n            sorted_matrix[i][j] = sorted(sorted_matrix[i][j])\n\n    return sorted_matrix"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        for j in range(i+1, n):\n            if sum(M[i]) > sum(M[j]):\n                M[i], M[j] = M[j], M[i]"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        # Find the maximum value in the current row\n        max_val = max(M[i])\n        # Initialize the sorted row with the maximum value\n        sorted_row = [max_val] * n\n        # Find the index of the maximum value in the current row and swap it with the first element\n        for j in range(n):\n            if M[i][j] == max_val:\n                sorted_row[j] = M[i][j]\n                M[i][j] = sorted_row[0]\n                break\n        # Shift the remaining elements of the current row one position to the right\n        for j in range(i+1, n):\n            if sorted_row[j-i-1] > M[i][j]:\n                sorted_row[j-i-1], M[i][j] = M[i][j], sorted_row[j-i-1]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # initialize an empty list to store the sorted matrix\n    sorted_M = []\n    \n    # loop through each row of the matrix\n    for row in M:\n        # loop through each element in the row\n        row_sum = 0\n        for element in row:\n            row_sum += element\n        # add the row sum to a list of row sums\n        row_sums.append(row_sum)\n    \n    # loop through the row sums list in ascending order and append the corresponding row to the sorted_M list\n    for row_sum in sorted(row_sums):\n        for i in range(len(M)):\n            if row_sum == row_sums[i]:\n                sorted_M.append(M[i])\n    \n    # return the sorted matrix\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    # loop through each row of the matrix\n    for i in range(n):\n        # find the sum of the row and store it in a variable\n        row_sum = sum(M[i])\n        # loop through each column of the row\n        for j in range(i+1, n):\n            # find the sum of the current column and store it in a variable\n            col_sum = sum(M[j])\n            # compare the sum of the row with the sum of the column and swap the rows if needed\n            if col_sum < row_sum:\n                row_sum, M[i], M[j] = col_sum, M[i], M[j]"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Create a copy of the matrix to avoid modifying the original matrix\n    M = M.copy()\n    # Sort the matrix in ascending order based on the sum of its rows\n    M.sort(key=lambda x: sum(x))\n    return M"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l * b * h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (l * b * h)/3\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l * b * h / 3\n    print(\"The volume of the triangular prism is:\", volume)"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes length of each side of a triangular prism as input parameters.\n    It then calculates the volume of the prism using the formula V = (l * b * h) / 6.\n    '''\n    V = (l * b * h) / 6\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = 0.5 * l * b * h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (1/3) * l * b * h\n"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n\n    # calculate volume of a triangular prism\n    area = 0.5 * l * b\n    volume = area * h\n\n    # print the result\n    print(\"The volume of the triangular prism is\", volume)"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Volume(l,b,h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n\n    # calculate the area of the prism\n    area = 0.5 * l * b\n\n    # calculate the volume of the prism\n    volume = area * h\n\n    # return the volume of the prism\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Volume(l,b,h) :\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = l * b * h # formula for volume\n    print(\"The volume of the triangular prism is:\", V)"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = (1/3)*l*b*h\n    return V"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z][a-z]*_[a-z]+'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'(?<![A-Z])[a-z]+(?![A-Z])_'\n    return bool(re.match(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    # Using regular expression to check if the input string contains sequences of lowercase letters joined with an underscore\n    pattern = r'(?<=[a-z])(?=[A-Z])|(?<=[A-Z])(?=[A-Z][a-z])'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z]+_[a-z]+'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'[a-z_]+'\n    matches = re.findall(pattern, text)\n    if len(matches) > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r\"([a-z])([A-Z]+)\"\n    matches = re.findall(pattern, text)\n    return True if matches else False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'^[a-z]+_[a-z]+$'\n    if re.match(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    # Define a regular expression pattern to match sequences of lowercase letters joined with an underscore\n    pattern = r'\\b[a-z]*_[a-z]*\\b'\n\n    # Use the re.search() function to search for a match in the input text\n    match = re.search(pattern, text)\n\n    # Return true if a match is found, false otherwise\n    return bool(match)"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r\"(?<!\\w)([a-z]{1,}(_[a-z]+)+)\"\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'\\b[a-z]+[_]+[a-z]+\\b'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a\n    return perimeter"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a\n    return perimeter"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a\n    return perimeter"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a\n    return perimeter"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def str_to_list(string): \n    '''\n    This function takes a string as input and returns the list of all characters in the string which are not present in the second string.\n    '''\n    # Initialize an empty list to store the required characters\n    result = []\n    \n    # Loop through each character in the input string\n    for char in string:\n        # If the character is not present in the second string, add it to the result list\n        if char not in second_string:\n            result.append(char)\n    \n    # Return the result list\n    return result"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def str_to_list(string):\n    # initialize an empty list to store the new string\n    new_string = ''\n    # loop through each character in the input string\n    for char in string:\n        # if the character is not present in the second string\n        if char not in second_string:\n            # append the character to the new string\n            new_string += char\n    # return the new string\n    return new_string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    no_of_chars = 256\n    char_set = set(string)\n    result = []\n    for char in string:\n        if char not in char_set:\n            result.append(char)\n    return ''.join(result)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    char_set = set(string)\n    result = []\n    for char in string:\n        if char not in char_set:\n            result.append(char)\n    return result\n"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    char_set = set(string)\n    result = []\n    for char in string:\n        if char not in char_set:\n            result.append(char)\n    return ''.join(result)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list1 = list(string)\n    list2 = list(set(string))\n    list3 = [char for char in list1 if char not in list2]\n    return ''.join(list3)\n"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def str_to_list(string):\n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n    no_of_chars = 256\n    char_set = set(string)\n    if len(char_set) == no_of_chars:\n        return string\n    else:\n        unique_chars = set(string)\n        for char in char_set:\n            if char in unique_chars:\n                unique_chars.remove(char)\n        return ''.join(unique_chars)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def str_to_list(string):\n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n    NO_OF_CHARS = 256\n    char_set = set(string)\n    result = []\n    for char in string:\n        if char not in char_set:\n            result.append(char)\n    return \"\".join(result)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def str_to_list(string):\n    # Convert the string to a list of integers\n    list_string = list(string)\n    \n    # Iterate through the string and remove characters from the first string\n    for i in range(len(list_string)):\n        if list_string[i] in string:\n            list_string.pop(i)\n    \n    # Convert the list back to a string and return it\n    return ''.join(map(chr, list_string))"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list_chars = [chr(i) for i in range(NO_OF_CHARS)]\n    list_string = list(string)\n    for char in list_chars:\n        if char in list_string:\n            list_string.remove(char)\n    return ''.join(list_string)"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # create a set to store unique elements\n    unique_elements = set()\n\n    # iterate over the array and add each element to the set\n    for num in arraynums:\n        unique_elements.add(num)\n\n    # check if the length of the set is equal to the length of the array\n    if len(unique_elements) == len(arraynums):\n        return True\n    else:\n        return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    num_dict = {}\n    for num in arraynums:\n        if num in num_dict:\n            return True\n        else:\n            num_dict[num] = True\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n\n    # Create a set to store the elements in the array\n    unique_nums = set(arraynums)\n\n    # If the length of the set is equal to the length of the array, there are no duplicates\n    if len(unique_nums) == len(arraynums):\n        return False\n    else:\n        return True"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # initialize a set to keep track of unique elements\n    unique_set = set()\n    \n    # iterate through the array\n    for num in arraynums:\n        # if the number is already in the set, it means there is a duplicate\n        if num in unique_set:\n            return True\n        # otherwise, add the number to the set\n        else:\n            unique_set.add(num)\n    \n    # if no duplicates are found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    unique_nums = set(arraynums)\n    if len(unique_nums) == len(arraynums):\n        return False\n    else:\n        return True"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create an empty dictionary to store the indices of each number in the array\n    index_dict = {}\n    \n    # Loop through the array and store the index of each number in the dictionary\n    for index, num in enumerate(arraynums):\n        index_dict[num] = index\n    \n    # Loop through the array again and check if any number has the same index as its value in the dictionary\n    for index, num in enumerate(arraynums):\n        if num in index_dict:\n            return True\n    \n    # If no duplicate is found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    # Create a set to store unique elements of the array\n    unique_set = set(arraynums)\n    # Check if the length of the set is equal to the length of the array\n    if len(unique_set) == len(arraynums):\n        # If yes, return True\n        return True\n    # If no, return False\n    else:\n        return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # create a dictionary to store the count of each element in the array\n    element_count = {}\n    # loop through each element in the array\n    for num in arraynums:\n        # check if the element is already in the dictionary\n        if num in element_count:\n            # if it is, increment its count by 1\n            element_count[num] += 1\n        # if the element is not in the dictionary, add it with a count of 1\n        else:\n            element_count[num] = 1\n    # loop through the dictionary again to check for duplicates\n    for num in arraynums:\n        # if the element is not already in the dictionary\n        if num not in element_count:\n            # check if there is only one occurrence of the element in the array\n            if len(arraynums) == element_count[num]:\n                # if there is, return True as the array contains duplicate elements\n                return True\n    # if no duplicates were found, return False\n    return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_woodall(x):\n    if x % 15 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_woodall(x): \n    '''\n    This function takes an integer x as input and returns True if x is a Woodall number else False.\n    A Woodall number is a positive integer that is a sum of three consecutive odd numbers.\n    For example: 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49.\n    '''\n\n    # list of odd numbers from 1 to x\n    odd_list = [i for i in range(1, x+1, 2)]\n\n    # iterate through the list and check if the sum of 3 consecutive odd numbers is equal to x\n    for i in range(len(odd_list)-2):\n        if odd_list[i] + odd_list[i+1] + odd_list[i+2] == x:\n            return True\n    \n    # if the loop completes without finding a match, return False\n    return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return x % 2 == 0 and x % 5 == 0 and x % 7 == 0"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 1 or x == 2 or x == 5 or x == 10 or x == 20 or x == 50 or x == 100:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    if x == 12 or x == 15 or x == 18 or x == 21:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x > 0 and x % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 3 == 0 and x % 5 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0 and x >= 2 and x <= 25:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 0:\n        return False\n    elif x == 1:\n        return True\n    elif x % 2 == 0 and (x % 3 == 0 or x % 5 == 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0: \n        return \"Woodall\"\n    else: \n        return \"Not Woodall\""
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    return num == 2 * int(str(num)[::-1]) - 1\n"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    return num < (num + int(str(num)[::-1]) - num)"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # Calculate the reverse of the number\n    reverse = 0\n    while num > 0:\n        reverse = reverse * 10 + num % 10\n        num //= 10\n    # Check if the reverse is one less than twice the original number\n    if reverse < 2 * num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return num == (2 * int(str(num)[::-1])) - 1"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    reversed_num = int(str(num)[::-1])\n    if num - reversed_num < 2 * reversed_num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    temp = num\n    \n    while temp > 0:\n        reverse = reverse * 10 + temp % 10\n        temp //= 10\n    \n    if num == reverse - 1:\n        print(f'{num} is one less than twice its reverse.')\n    else:\n        print(f'{num} is not one less than twice its reverse.')"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    temp = num\n    while temp > 0:\n        reverse = (reverse * 10) + (temp % 10)\n        temp //= 10\n    return num == reverse * 2 - 1"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    while num!= 0:\n        digit = num % 10\n        reverse = reverse * 10 + digit\n        num = num // 10\n    return num < 2 * reverse"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    # Reverse the number\n    reverse = 0\n    temp = num\n    while temp > 0:\n        digit = temp % 10\n        reverse = reverse * 10 + digit\n        temp //= 10\n    \n    # Check if the reverse is one less than twice the original number\n    if reverse * 2 - 1 == num:\n        print(\"The given number is one less than twice its reverse.\")\n    else:\n        print(\"The given number is not one less than twice its reverse.\")"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    reverse_num = 0\n    while num > 0:\n        reverse_num = reverse_num * 10 + num % 10\n        num = num // 10\n    \n    return num == reverse_num - 1"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if i!= j:\n                if (arr[i] + arr[j]) > max_num:\n                    max_num = arr[i] + arr[j]\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Max_Num(arr):\n    n = len(arr)\n\n    # Initialize max_num with the first element of the list\n    max_num = arr[0]\n\n    # Loop through the list starting from the second element\n    for i in range(1, n):\n        # Initialize the current digit as the previous element\n        current_digit = arr[i-1]\n\n        # Loop through the remaining digits from the second element onwards\n        for j in range(i, n):\n            # Check if the current digit can be formed with the remaining digits\n            if arr[j] % current_digit == 0:\n                # If yes, update the maximum number with the current digit\n                max_num = max(max_num, current_digit)\n                # Break out of the inner loop for the current digit\n                break\n\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Max_Num(arr):\n    max_num = 0\n    power = 1\n\n    for digit in arr:\n        max_num += digit * power\n        power *= 10\n\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Max_Num(arr):\n    max_num = 0\n    for i in range(len(arr)-1, -1, -1):\n        max_num += arr[i] * (10**(len(arr)-1-i))\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    \"\"\"\n    max_num = 0\n    n = len(arr)\n    for i in range(2, n+1):\n        max_num += (n//i) * (arr[i-2]**(i-1))\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for i in range(len(arr)):\n        max_num = max(max_num, int(arr[i]))\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Max_Num(arr):\n    arr.sort(reverse=True) # Sort the list in descending order\n    max_num = 0\n    for digit in arr: # Iterate through the sorted list\n        max_num += int(digit) # Add the current digit to the max_num\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Max_Num(arr):\n    # Create a dictionary that maps each digit to its value in the list\n    digit_value = {'0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9}\n    # Initialize the result to be 0\n    max_num = 0\n    # Loop through the list of digits\n    for num in arr:\n        # Multiply the current digit by its value and add it to the result\n        max_num = max_num * 10 + digit_value[num]\n    # Return the maximum result\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Max_Num(arr) : \n\n    # Sorting the list of digits in descending order\n    arr.sort(reverse=True)\n\n    # Initializing the maximum number\n    max_num = 0\n\n    # Looping through the sorted list of digits\n    for i in range(len(arr)) : \n\n        # Initializing the current number\n        curr_num = 0\n\n        # Looping through the digits in the current digit group\n        for j in range(arr[i]) : \n\n            # Appending the current digit to the current number\n            curr_num += j\n\n        # Updating the maximum number if the current number is greater than the maximum number\n        if curr_num > max_num : \n            max_num = curr_num\n\n    # Returning the maximum number\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Max_Num(arr):\n    '''\n    This function takes an array of digits as input and returns the largest number that can be formed with those digits.\n    '''\n    max_num = 0\n    for i in range(1, len(arr)+1):\n        max_num = max(max_num, int(''.join(sorted(str(i*x) for x in arr))))\n    return max_num"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x>=0 and y>=0) or (x<0 and y<0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x == 0 and y == 0:\n        return False\n    elif x > 0 and y > 0:\n        return False\n    elif x < 0 and y < 0:\n        return False\n    elif x > 0 and y < 0:\n        return True\n    elif x < 0 and y > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def opposite_Signs(x, y):\n    if x * y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n\n    if x<0 and y<0:\n        return True\n    elif x>0 and y>0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n\n    if x >= 0 and y >= 0:\n        return \"opposite\"\n    elif x < 0 and y < 0:\n        return \"opposite\"\n    else:\n        return \"same\""
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if ((x*y) >= 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    This function takes two integers x and y as input and returns True if x and y have opposite signs, else False.\n    If x and y have the same sign, it returns True.\n    \"\"\"\n    if x > 0 and y < 0 or x < 0 and y > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return (x>0)!= (y>0)"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def opposite_Signs(x,y):\n    '''\n    This function takes two integers as input and returns True if they have opposite signs, False otherwise.\n    '''\n    if (x < 0 and y < 0) or (x > 0 and y > 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x * y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    if n <= 0:\n        return False\n\n    a = 1\n    b = 2\n\n    while b <= n:\n        if n % b == 0:\n            return False\n        a += 1\n        b += 2\n\n    return True"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return 4 * (n**2) + 1"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    for i in range(1, n+1):\n        octagonal = 2*(i*i) - 1\n        if octagonal == n:\n            return True\n        elif octagonal > n:\n            return False\n    return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_octagonal(n):\n    def is_octagonal_helper(num):\n        return (num * (num - 1) * (num - 2) * (num - 3) == 0)\n\n    def octagonal_helper(start, end):\n        result = []\n        for i in range(start, end + 1):\n            result.append(i * (i - 1) * (i - 2) * (i - 3))\n        return result\n\n    octagonal_list = octagonal_helper(1, 1000)\n    return octagonal_list[n - 1]"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    def octagonal(n):\n        return n * (3 * n - 1)\n\n    return octagonal(n)"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 1:\n        return False\n    elif n == 1:\n        return True\n    else:\n        for i in range(1, n):\n            if ((n - i) ** 2 + (i - 1) ** 2)!= ((n - 1) ** 2 + (n - i) ** 2):\n                return False\n        return True"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 1:\n        return False\n    if n == 1:\n        return True\n    if n == 2:\n        return 8\n    return 8 * (2 * n - 1) ** 2 - 2 * n"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 1:\n        return None\n    \n    octagonal_nums = [1]\n    for i in range(2, n+1):\n        octagonal_nums.append(octagonal_nums[-1] + octagonal_nums[-2])\n    \n    return octagonal_nums[-1]"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 1:\n        return \"Invalid input.\"\n    elif n == 1:\n        return 1\n    else:\n        return ((n * (3 * n - 1)) // 2) + 1"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n*n*(13-2*n)"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Create a dictionary to store the counts of substrings\n    substring_count = defaultdict(int)\n\n    # Loop through all possible substrings of s\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            # Check if the sum of digits is equal to the length of the substring\n            substring_sum = sum(int(d) for d in s[i:j+1])\n            if substring_sum == len(s[i:j+1]):\n                # Increment the count of the substring\n                substring_count[s[i:j+1]] += 1\n\n    # Return the count of all substrings\n    return sum(substring_count.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # create a dictionary to store the count of substrings with sum of digits equal to their length\n    count_dict = defaultdict(int)\n    # loop through all possible substrings of length n\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            # calculate the sum of digits in the substring\n            substring = s[i:j]\n            sum_digits = sum(int(digit) for digit in substring)\n            # add the count of substrings with the given sum to the dictionary\n            count_dict[sum_digits] += 1\n    # return the count of substrings with sum of digits equal to their length\n    return sum(count_dict.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n\n    # Initialize a dictionary to store the count of substrings with the sum of digits equal to their length\n    substring_count = defaultdict(int)\n\n    # Loop through all the possible substrings of the input string\n    for i in range(len(s)):\n        for j in range(i, len(s)+1):\n            # Extract the substring from the input string\n            substring = s[i:j]\n            \n            # Check if the sum of digits of the substring is equal to its length\n            digits_sum = sum(int(digit) for digit in substring)\n            if digits_sum == len(substring):\n                # Increment the count of the substring in the dictionary\n                substring_count[substring] += 1\n\n    return sum(substring_count.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    n = len(s)\n    dp = defaultdict(int) # Dictionary to store the prefix sum of digits for each length\n    dp[0] = 1 # Initialize the dictionary for length 0\n    \n    for i in range(n):\n        # Calculate the prefix sum of digits for length i\n        for j in range(i):\n            dp[i] += dp[j] * 10 + ord(s[i]) - ord(s[j])\n        \n        # Iterate over all possible lengths of the substring starting from length i\n        for l in range(i, n+1):\n            # Calculate the sum of digits in the substring\n            substring_sum = sum(int(digit) for digit in s[i:i+l])\n            \n            # If the sum of digits is equal to the length of the substring, increment the count\n            if substring_sum == l:\n                count += dp[l]\n    \n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Create a defaultdict to store the count of substrings with a given sum of digits\n    count_dict = defaultdict(int)\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            # Calculate the sum of digits of the substring\n            substring = s[i:j+1]\n            substring_sum = sum(map(int, substring))\n            # If the sum is equal to the length of the substring, increment the count in the defaultdict\n            if substring_sum == len(substring):\n                count_dict[substring_sum] += 1\n    return count_dict"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Create a dictionary to store the frequency of digits for each character in the string\n    freq = defaultdict(int)\n    for char in s:\n        freq[char] += 1\n\n    # Initialize the count variable to 0\n    count = 0\n\n    # Iterate through all substrings of length 1 to n in the string\n    for i in range(len(s)):\n        # Check if the sum of digits of each substring is equal to its length\n        if sum(freq[char] for char in s[i:i+2]) == len(s[i:i+2]):\n            count += 1\n\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            sub_str = s[i:j]\n            if sum(int(digit) for digit in sub_str) == len(sub_str):\n                count += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n\n    # create a dictionary to store the count of each length substrings\n    count_dict = defaultdict(int)\n\n    # loop through all possible substrings of the given string\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            # check if the sum of digits is equal to the length of the substring\n            if sum(int(c) for c in s[i:j+1]) == j-i+1:\n                # increment the count of the substring in the dictionary\n                count_dict[j-i+1] += 1\n\n    # return the count of the longest substring\n    return max(count_dict.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = defaultdict(int)\n    n = len(s)\n    for i in range(n):\n        for j in range(i, n):\n            count[(i, j)] = sum(map(int, s[i:j+1]))\n    return sum(count.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Create a defaultdict to store the count of substrings\n    count = defaultdict(int)\n\n    # Iterate through all possible substrings\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            # Calculate the sum of digits in the substring\n            substring_sum = sum(int(digit) for digit in s[i:j])\n\n            # If the sum is equal to its length, increment the count in the defaultdict\n            if substring_sum == len(s):\n                count[substring_sum] += 1\n\n    # Return the count of substrings\n    return count"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    Find the smallest number in a list xs.\n    \"\"\"\n    if len(xs) == 0:\n        raise ValueError(\"List is empty\")\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    elif len(xs) == 1:\n        return xs[0]\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    Write a python function to find the smallest number in a list.\n    \"\"\"\n    if not xs:\n        return None\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n\n    # Sort the list of tuples in ascending order based on the first element of each tuple\n    test_list.sort(key=lambda x: x[0])\n\n    # Initialize the maximum difference to be zero\n    max_diff = 0\n\n    # Iterate through the sorted list of tuples\n    for i in range(len(test_list)-1):\n        # Calculate the difference between the current pair and the next pair in the list\n        diff = abs(test_list[i][1] - test_list[i+1][1])\n\n        # Update the maximum difference if the current difference is greater than the maximum difference\n        if diff > max_diff:\n            max_diff = diff\n\n    # Return the maximum difference\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n\n    # Initialize max_diff as the first element in the list\n    max_diff = test_list[0]\n\n    # Loop through the list, comparing adjacent elements and updating max_diff as needed\n    for i in range(len(test_list) - 1):\n        diff = test_list[i + 1] - test_list[i]\n        if diff > max_diff:\n            max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Sort the list in ascending order\n    test_list.sort()\n\n    # Initialize variables to store the maximum difference and the current difference\n    max_diff = 0\n    curr_diff = 0\n\n    # Loop through the list and calculate the difference between the current pair and the next pair\n    for i in range(len(test_list) - 1):\n        curr_diff = abs(test_list[i][0] - test_list[i+1][0]) + abs(test_list[i][1] - test_list[i+1][1])\n\n        # Update the maximum difference if the current difference is greater\n        if curr_diff > max_diff:\n            max_diff = curr_diff\n\n    # Return the maximum difference\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) < 2:\n        return 0\n\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n\n    # Sort the list\n    test_list.sort()\n\n    # Initialize variables\n    max_diff = 0\n    prev_diff = test_list[-1] - test_list[0]\n\n    # Loop through the list\n    for i in range(1, len(test_list)):\n        curr_diff = test_list[i] - test_list[i-1]\n        if curr_diff > max_diff:\n            max_diff = curr_diff\n\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    pairs = [(x, y) for x in test_list for y in test_list if x!= y]  # create a list of unique pairs from the list\n    max_diff = 0\n    for pair in pairs:\n        diff = pair[1] - pair[0]\n        max_diff = max(max_diff, diff)  # find the maximum difference and update the maximum if necessary\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # initialize variables\n    max_diff = 0\n    prev_num = 0\n    curr_num = 0\n\n    # iterate through the list\n    for num in test_list:\n        # check if the current number is greater than the previous number\n        if num > prev_num:\n            # update max_diff if the current number is greater than the previous number\n            max_diff = max(max_diff, num - prev_num)\n        # update the current number\n        curr_num = num\n        # update the previous number\n        prev_num = curr_num\n\n    # return max_diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = test_list[j][0] - test_list[i][0]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0]) + abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_list = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_list"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    Write a function to sort a list of tuples using the second value of each tuple.\n    \"\"\"\n    # Sort the list of tuples based on the second value of each tuple\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    This function takes a list of tuples and sorts them based on the second value of each tuple.\n    '''\n    # Sorting the list based on the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    Write a function to sort a list of tuples using the second value of each tuple.\n    \"\"\"\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    This function takes a list of tuples with subject name and marks as input.\n    It sorts the list of tuples based on the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return 0\n    elif isinstance(data_list[0], list):\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n\n    # Check if the list is empty\n    if not data_list:\n        return 0\n\n    # Recursive case: sum the first element and call the function recursively on the rest of the list\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    flattened_list = []\n    for item in data_list:\n        if isinstance(item, list):\n            flattened_list += recursive_list_sum(item)\n        else:\n            flattened_list.append(item)\n    return flattened_list\n"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten_list(data_list):\n        if isinstance(data_list, list):\n            for item in data_list:\n                flatten_list(item)\n        else:\n            yield data_list\n\n    flattened_list = list(flatten_list(data_list))\n    return sum(flattened_list)\n"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n\n    def flatten_list(data_list):\n        if type(data_list) == list:\n            for item in data_list:\n                flatten_list(item)\n        else:\n            yield data_list\n\n    flattened_list = list(flatten_list(data_list))\n    return sum(flattened_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten_list(data_list):\n        '''\n        Helper function to flatten a nested list.\n        '''\n        result = []\n        for item in data_list:\n            if type(item) == list:\n                result.extend(flatten_list(item))\n            else:\n                result.append(item)\n        return result\n\n    flattened_list = flatten_list(data_list)\n    return sum(flattened_list)\n"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    \"\"\"\n    Write a function to flatten a list and sum all of its elements.\n    \"\"\"\n    if len(data_list) == 1:\n        return data_list[0]\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    \n    def flatten(lst):\n        \"\"\"\n        Helper function to flatten a nested list.\n        \"\"\"\n        result = []\n        for element in lst:\n            if isinstance(element, list):\n                result.extend(flatten(element))\n            else:\n                result.append(element)\n        return result\n    \n    flattened_list = flatten(data_list)\n    return sum(flattened_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not isinstance(data_list, list):\n        return data_list\n    \n    flat_list = []\n    for item in data_list:\n        if isinstance(item, list):\n            flat_list.extend(recursive_list_sum(item))\n        else:\n            flat_list.append(item)\n    \n    return sum(flat_list)"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pos_count(lst):\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list of integers as input and returns the number of positive integers in the list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as input and returns the number of positive numbers in the list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as input and returns the count of positive numbers in the list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pos_count(lst):\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pos_count(lst):\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_number(n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return bell_number(n-1) + bell_number(n-2) + bell_number(n-3)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    if n == 1 or n == 2:\n        return 1\n    else:\n        return 2 * n * bell_number(n - 1)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    # initialize the list of Bell numbers\n    bell = [1]\n    for i in range(2, n+1):\n        bell.append(bell[i-1] + bell[i-2])\n    # count the number of partitions of the set using dynamic programming\n    dp = [0] * (n+1)\n    dp[0] = 1\n    dp[1] = 1\n    for i in range(2, n+1):\n        for j in range(2, i+1):\n            if j == i:\n                dp[i] += dp[j-1]\n            else:\n                dp[i] += dp[j-1] * dp[i-j]\n    return dp[n]"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return bell_number(n//2) + bell_number(n//2)\n    else:\n        return bell_number(n//2) + 2 * bell_number(n//2)\n"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n\n    Parameters:\n    n (int): Number of elements in the set of Bell numbers\n\n    Returns:\n    int: Number of ways to partition the set of Bell numbers\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 4\n    elif n == 4:\n        return 8\n    elif n == 5:\n        return 16\n    elif n == 6:\n        return 32\n    elif n == 7:\n        return 64\n    elif n == 8:\n        return 128\n    elif n == 9:\n        return 256\n    else:\n        return (2 ** n) * (n // 2)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n <= 0:   # base case for empty set\n        return 0\n    if n == 1:   # base case for single element set\n        return 1\n    if n == 2:   # base case for two element set\n        return 2\n    if n == 3:   # base case for three element set\n        return 5\n    if n == 4:   # base case for four element set\n        return 14\n    if n == 5:   # base case for five element set\n        return 42\n\n    # recursive case for all other sets\n    Bell_set = [1, 2, 3, 4, 5]\n    ways = 0\n    for i in range(2, n+1):\n        if i in Bell_set:\n            ways += bell_number(n-i)\n    return ways"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # initialize the number of ways to partition the set of Bell numbers\n    ways = 0\n\n    # loop through the numbers from 0 to n\n    for i in range(n+1):\n        # check if i is a Bell number\n        if (i**2 - 1) % 7 == 0:\n            # if it is, add 1 to the number of ways to partition the set of Bell numbers\n            ways += 1\n\n    # return the number of ways to partition the set of Bell numbers\n    return ways"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    dp = [1] * (n+1)\n    for i in range(2, n+1):\n        for j in range(i):\n            dp[i] += dp[j] * dp[i-j-1]\n    return dp[n]"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_number(n):\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    bell_nums = [1, 1]\n    for i in range(2, n):\n        bell_nums.append(bell_nums[i-1] + bell_nums[i-2])\n    return bell_nums[n-1]"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n\n    # Initialize variables\n    count = 1\n    previous_count = 0\n\n    # Check if n is less than 2\n    if n < 2:\n        return 0\n\n    # Loop through all numbers from 1 to n-1\n    for i in range(1, n):\n        # Calculate the count of ways to partition i using all previous counts\n        current_count = previous_count\n        for j in range(1, i+1):\n            current_count += previous_count\n        # Update the count and previous count\n        count += current_count\n        previous_count = current_count\n\n    # Return the final count\n    return count"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    if n <= 1:\n        return True\n\n    for i in range(n - 1):\n        if A[i] > A[i+1]:\n            return False\n        elif A[i] < A[i+1]:\n            continue\n\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) <= 1:\n        return True\n    \n    for i in range(1, len(A)):\n        if A[i-1] > A[i]:\n            return False\n        elif A[i-1] < A[i]:\n            return True\n    \n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # check if array is empty\n    if len(A) == 0:\n        return True\n    \n    # check if the array is monotonic in ascending order\n    elif all(A[i] <= A[i+1] for i in range(len(A)-1)):\n        return True\n    \n    # check if the array is monotonic in descending order\n    elif all(A[i] >= A[i+1] for i in range(len(A)-1)):\n        return True\n    \n    # if all checks have failed, return False\n    else:\n        return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Monotonic(A):\n    '''\n    This function takes an array A as input and returns True if the array is monotonic (increasing or decreasing) or False otherwise.\n\n    If the array is monotonic, then for any i and j, either i is less than or equal to j or i is greater than or equal to j. \n    For example, if A = [1, 2, 3, 4, 5], then A is monotonic because 1 <= 2, 2 <= 3, 3 <= 4, 4 <= 5, and 5 is not an increasing or decreasing subsequence.\n    '''\n\n    # Check if the array is empty\n    if len(A) == 0:\n        return False\n\n    # Check if the array contains only one element\n    if len(A) == 1:\n        return True\n\n    # Initialize variables\n    prev_val = A[0]\n    for i in range(1, len(A)):\n        curr_val = A[i]\n\n        # Check if the current value is greater than the previous value\n        if curr_val > prev_val:\n            return False\n\n        # Update the previous value\n        prev_val = curr_val\n\n    # If the loop completes, then the array is monotonic\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2:\n        return True\n    elif A[0] < A[1]:\n        return is_Monotonic(A[1:])\n    else:\n        return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) == 1:\n        return True\n    if A[0] >= A[1] and all(A[i] <= A[i+1] for i in range(len(A)-1)):\n        return True\n    if A[0] <= A[1] and all(A[i] >= A[i+1] for i in range(len(A)-1)):\n        return True\n    return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2: \n        return True\n    \n    if A[0] <= A[1]: \n        for i in range(1, len(A)): \n            if A[i] <= A[i-1]: \n                return False\n        return True\n    \n    if A[0] >= A[1]: \n        for i in range(1, len(A)): \n            if A[i] >= A[i-1]: \n                return False\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Monotonic(A):\n    \"\"\"\n    This function checks whether the given array is monotonic or not.\n    \"\"\"\n    if len(A) <= 1:\n        return True\n    for i in range(len(A)-1):\n        if A[i] > A[i+1]:\n            return False\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    \n    # Check if the array is empty or not\n    if len(A) < 2:\n        return True\n    \n    # Initialize a variable to check the direction of increasing/decreasing elements in the array\n    direction = 0\n    \n    # Traverse the array from the first element to the last element\n    for i in range(1, len(A)):\n        # If the current element is less than the previous element, then the array is not monotonic\n        if A[i] < A[i-1]:\n            direction = -1\n            break\n        \n        # If the current element is greater than the previous element, then the array is monotonic\n        elif A[i] > A[i-1]:\n            direction = 1\n            break\n    \n    # If the direction of increasing/decreasing elements is 0, then the array is monotonic\n    if direction == 0:\n        return True\n    \n    # If the direction of increasing/decreasing elements is not 0, then the array is not monotonic\n    else:\n        return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Monotonic(A): \n    for i in range(len(A)-1): \n        if A[i] > A[i+1]: \n            return False\n    return True"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if len(s) > len(l):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n\n    for i in range(len(s)):\n        if s[i] not in l:\n            return False\n\n    return True"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not s:\n        return True\n    if s[0] in l:\n        return is_sublist(l, s[1:])\n    else:\n        return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if not isinstance(l, list) or not isinstance(s, list):\n        raise TypeError(\"Both inputs must be lists.\")\n    \n    if len(s) > len(l):\n        return False\n    \n    for i in range(len(s)-len(l)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    \n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not s:\n        return True\n    if s[0] in l:\n        return is_sublist(l, s[1:])\n    else:\n        return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not s:\n        return True\n    if not l:\n        return False\n    if l[0] == s[0]:\n        return is_sublist(l[1:], s[1:])\n    else:\n        return is_sublist(l[1:], s)"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    # Convert sublist to set to remove duplicates\n    sublist_set = set(s)\n    # Convert list to set to remove duplicates\n    list_set = set(l)\n    # Check if sublist is present in list\n    if sublist_set <= list_set:\n        return True\n    else:\n        return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    if len(s) > len(l):\n        return False\n    i = 0\n    for j in range(len(l)-len(s)+1):\n        if l[j:j+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"\n    # Loop through each tuple in the input list\n    for tup in Input:\n        # Check if the tuple has equal length\n        if len(tup)!= len(set(tup)):\n            # If not, return False\n            return False\n    \n    # If all the tuples have equal length, return True\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    lengths = [len(x) for x in Input]\n    return len(lengths) == len(set(lengths))"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    equal_length = True\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            equal_length = False\n            break\n    return equal_length"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    for tuple in Input:\n        if len(tuple)!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # Loop through the input list\n    for i in Input:\n        # Check if all the tuples have the same length\n        if len(i)!= len(Input[0]):\n            return False\n\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    for i in Input:\n        if len(i)!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n\n    # initialize a variable to store the status of all tuples\n    status = []\n\n    # loop through each tuple in the list\n    for i in Input:\n        # if the length of the tuple is different than the first tuple, set the status to False\n        if len(i)!= len(Input[0]):\n            status.append(False)\n        else:\n            status.append(True)\n\n    # loop through the status list and return True if all tuples have the same length, else return False\n    for i in status:\n        if i == False:\n            return False\n    else:\n        return True\n"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # Initialize an empty list to store the tuples with equal length\n    equal_tuples = []\n\n    # Iterate over the given tuples\n    for i in Input:\n        # Check if the tuple has equal length\n        if len(i) == len(Input[0]):\n            # If it has, add it to the list of equal tuples\n            equal_tuples.append(i)\n        else:\n            # If it doesn't, return False\n            return False\n\n    # If we've made it this far, all the tuples have equal length\n    return True"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    swapped = True\n    \n    while gap > 1 or swapped:\n        if swapped:\n            swapped = False\n        \n        for i in range(gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n        \n        gap = int(gap/1.3)"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    # Initialize the gap and limit variables\n    gap = len(nums)\n    limit = 1\n\n    # Keep swapping until the gap is no longer reduced\n    while gap > 1 or limit < len(nums):\n        # Decrease the limit by half if the gap is reduced\n        limit = gap\n        # Increase the gap by 1\n        gap = int(gap / 1.3)\n\n        # Perform the sorting\n        swapped = False\n        for i in range(len(nums)-limit):\n            if nums[i] > nums[i+limit]:\n                nums[i], nums[i+limit] = nums[i+limit], nums[i]\n                swapped = True\n\n        # If no swaps were made, the gap is reduced and the limit is decreased\n        if not swapped:\n            limit = int(limit / 1.3)\n\n        # If the limit is reduced to 1, the sorting is complete\n        if limit == 1:\n            break"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Sorts a list of elements using the comb sort algorithm.\n    \"\"\"\n    n = len(nums)\n    swapped = True\n    gap = n // 2\n    while swapped:\n        swapped = False\n        for i in range(gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n        gap = (gap + 1) // 2\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    min_val = min(nums)\n    gap = n\n    swapped = True\n    while swapped:\n        swapped = False\n        for i in range(gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n        gap = int(gap / 1.3)\n        if gap < min_val:\n            gap = min_val\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb Sort algorithm.\n\n    This algorithm works by repeatedly sorting a sublist of the list, until the sublist is sorted.\n    The sublist is found by choosing a random element from the list, and placing it in its correct\n    position.\n\n    This algorithm has a time complexity of O(n^2) and is efficient for large lists, but may not be\n    as efficient for small lists.\n\n    Example usage:\n    nums = [64, 34, 25, 12, 22, 11, 90]\n    comb_sort(nums)\n    print(nums)\n    '''\n\n    swapped = True\n    while swapped:\n        swapped = False\n        n = len(nums)\n        for i in range(n):\n            rand_index = random.randint(0, n - 1)\n            if nums[i] > nums[rand_index]:\n                nums[i], nums[rand_index] = nums[rand_index], nums[i]\n                swapped = True\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    n = len(nums)\n    gap = n\n    swapped = True\n    while swapped:\n        swapped = False\n        for i in range(gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n        if not swapped:\n            break\n        gap //= 1\n        if gap < 1:\n            gap = 1\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb Sort algorithm.\n    '''\n    # initialize variables\n    n = len(nums)\n    min_val = nums[0]\n    i = 1\n\n    while i < n:\n        # calculate the jth element of the sequence\n        j = n - i\n        if j >= i:\n            min_val = nums[j]\n            for k in range(j):\n                if nums[k] > min_val:\n                    min_val = nums[k]\n            nums[j], nums[i] = nums[i], nums[j]\n            i = 1\n            min_val = nums[0]\n        else:\n            min_val = nums[0]\n            i += 1\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb sort algorithm.\n    '''\n    n = len(nums)\n    k = 1\n    max_swaps = 0\n    \n    while k <= n//2:\n        swaps = 0\n        for i in range(n-k):\n            if nums[i] > nums[i+k]:\n                nums[i], nums[i+k] = nums[i+k], nums[i]\n                swaps += 1\n        \n        max_swaps = max(max_swaps, swaps)\n        k *= 3\n        \n    print(\"Sorted list is:\", nums)\n    return nums, max_swaps"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    swapped = True\n    \n    while swapped:\n        swapped = False\n        gap = n\n        \n        while gap > 1:\n            gap = gap // 10\n            \n            for i in range(gap, n):\n                if nums[i] < nums[i-gap]:\n                    nums[i], nums[i-gap] = nums[i-gap], nums[i]\n                    swapped = True\n                    \n        n = gap"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb Sort algorithm.\n    '''\n    swapped = True\n    n = len(nums)\n    while swapped:\n        swapped = False\n        for i in range(1, n):\n            if nums[i] < nums[i - 1]:\n                nums[i], nums[i - 1] = nums[i - 1], nums[i]\n                swapped = True\n        n -= 1\n    return nums"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Function to check whether the given number can be represented as the difference of two squares or not\n    def check_square(num):\n        # Find the square of the number\n        square = num ** 2\n        \n        # Check whether the square can be represented as the difference of two squares or not\n        if square == num:\n            return True\n        elif square - num == num:\n            return True\n        else:\n            return False\n    \n    # Check whether the given number can be represented as the difference of two squares or not\n    if check_square(n):\n        # If it can, find the difference of the square and the number\n        diff_sq = n - (n ** 2)\n        \n        # Check whether the difference can be represented as the difference of two squares or not\n        if check_square(diff_sq):\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # check if n is a perfect square\n    def is_perfect_square(num):\n        return num == int(num ** 0.5 + 0.5) ** 2\n\n    # check if n can be represented as the difference of two squares\n    def is_square_diff(n):\n        i = 0\n        square = n\n        while i <= n:\n            square += i\n            i += 1\n            if is_perfect_square(square) and is_perfect_square(n - square):\n                return True\n        return False\n\n    # check if n is divisible by 4\n    if n % 4 == 0:\n        return False\n\n    # check if n can be represented as the difference of two squares\n    if is_square_diff(n):\n        return True\n\n    # check if n can be represented as the sum of two squares\n    i = 0\n    square = n\n    while i <= n:\n        square += i\n        i += 1\n        if is_perfect_square(square) and is_perfect_square(n - square):\n            return True\n\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    def is_square(num):\n        return num == int(num**0.5)**2\n    \n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if i**2 + j**2 == n and is_square(i) and is_square(j):\n                return True\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dif_Square(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    \"\"\"\n    # check if the given number is odd\n    if n % 2 == 0:\n        return False\n    # check if the given number is a perfect square\n    i = 1\n    while i*i <= n:\n        if i*i == n:\n            return True\n        i += 1\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n < 0:\n        return False\n\n    # Find the square root of the number\n    sqrt = n ** 0.5\n\n    # Check if the difference between the square and its square root is within the range of the square root\n    if int(sqrt) ** 2 < n:\n        return False\n\n    # Check if the square of the difference between the square and its square root is within the range of the square root\n    if int(sqrt) ** 2 - n > 0:\n        return True\n\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Convert the given number to a list of digits\n    num_list = [int(digit) for digit in str(n)]\n    \n    # Sort the list of digits in ascending order\n    num_list = sorted(num_list)\n    \n    # Take the sum of squares of the first and last elements of the sorted list\n    first_sum = sum([int(digit)**2 for digit in num_list[:1]])\n    last_sum = sum([int(digit)**2 for digit in num_list[-1:]])\n    \n    # Check if the sum of squares of the first and last elements of the sorted list is equal to the given number\n    return first_sum == last_sum"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Calculate the square of the number\n    num_square = n * n\n    # Check whether the square of the number is divisible by 4\n    if num_square % 4 == 0:\n        # Calculate the difference of the square of the number and 2^4\n        dif_square = (num_square - (num_square // 4) * 4)\n        # Check whether the difference of the square of the number and 2^4 is divisible by 2\n        if dif_square % 2 == 0:\n            return True\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dif_Square(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    \"\"\"\n    # Get the square of the given number\n    square = n ** 2\n\n    # Check if the square is divisible by 4\n    if square % 4 == 0:\n        # Get the difference of the square and 4\n        diff = square - 4\n        # Check if the difference is a square\n        return diff ** 2 == square\n    else:\n        # If the square is not divisible by 4, it cannot be represented as the difference of two squares\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n\n    # initialize the variables for the difference of squares\n    a = 0\n    b = 0\n\n    # loop through the digits of the given number\n    for digit in str(n):\n        # add the digit to a and b if it's even\n        if int(digit) % 2 == 0:\n            a += int(digit)\n            b += int(digit)\n        else:\n            # subtract the odd digit from a and b\n            a += int(digit)\n            b += int(digit)\n\n    # check if the difference of squares is a square\n    if a ** 2 == b ** 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dif_Square(n):\n    \"\"\"\n    This function takes a positive integer as input and returns True if it can be represented as the difference of two squares,\n    and False otherwise.\n    \"\"\"\n    # calculate the square of the number\n    square = n**2\n    \n    # check if the square of the number is divisible by 2\n    if square % 2 == 0:\n        # calculate the difference between the square and the square of the square\n        diff = square - (square**2)\n        \n        # check if the difference is greater than or equal to the input number\n        if diff >= n:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    pattern_index = 0\n    for color in colors:\n        if color == patterns[pattern_index]:\n            pattern_index += 1\n        if pattern_index == len(patterns):\n            return True\n    return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Write a function to check whether it follows the sequence given in the patterns array.\n    \"\"\"\n    if len(colors)!= len(patterns):\n        return False\n    \n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n    \n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # Initialize a variable to store the current pattern\n    current_pattern = patterns[0]\n    # Initialize a variable to store the current color\n    current_color = colors[0]\n    \n    # Iterate through the colors array\n    for i in range(1, len(colors)):\n        # Check if the current color matches the current pattern\n        if colors[i]!= current_color:\n            # If not, return False\n            return False\n        # If the current color matches the current pattern, update the current color and continue iterating\n        current_color = colors[i]\n    \n    # If we've reached the end of the colors array without finding a mismatch, return True\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):\n    n = len(colors)\n    count = [0] * n\n\n    for pattern in patterns:\n        for i in range(len(pattern)):\n            count[pattern.index(colors[i])] += 1\n\n    for i in range(n):\n        if count[i] > 0 and count[i]!= patterns.count(colors[i]):\n            return False\n\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(patterns)!= len(colors):\n        return False\n    \n    # check for consecutive patterns\n    for i in range(len(patterns)):\n        if patterns[i]!= patterns[i+1]:\n            return False\n    \n    # check for repeated patterns\n    for pattern in patterns:\n        if colors.count(pattern)!= 1:\n            return False\n    \n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Write a function to check whether it follows the sequence given in the patterns array.\n    \"\"\"\n\n    # Check if the length of colors and patterns are equal\n    if len(colors)!= len(patterns):\n        return False\n\n    # Loop through the colors and patterns\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n\n    # If we've made it this far, it means the colors and patterns are the same\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    n = len(colors)\n    for i in range(n-1):\n        if patterns[i]!= patterns[i+1]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Check whether it follows the sequence given in the patterns array.\n    \"\"\"\n    # Check if the length of colors and patterns are same\n    if len(colors)!= len(patterns):\n        return False\n    \n    # Convert patterns array to list to make it easier to access colors\n    patterns_list = [pattern for pattern in patterns]\n    \n    # Check if colors follow the sequence\n    for i in range(len(colors)):\n        # If the next color is not the same as the current color\n        if colors[i]!= patterns_list[i]:\n            return False\n        \n    # If all the colors are the same as the current color, return True\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):\n    for i in range(len(colors)-1):\n        if colors[i]!= colors[i+1]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n\n    Input:\n        - colors: a list of strings representing the colors of the shapes\n        - patterns: a list of strings representing the patterns of the shapes\n\n    Output:\n        - True if it follows the sequence given in the patterns array, False otherwise\n    '''\n\n    # Initialize the variables\n    current_pattern = \"\"\n    count = 0\n\n    # Loop through the patterns array\n    for pattern in patterns:\n\n        # Check if the current pattern is the same as the previous pattern\n        if pattern == current_pattern:\n            count += 1\n\n        # If the count is greater than 0, then there is a repeated pattern\n        if count > 0:\n            return False\n\n        # Update the current pattern\n        current_pattern = pattern\n\n        # Reset the count to 0 if the current pattern is different from the previous pattern\n        if count == 0:\n            count = 1\n\n    # If the loop completes without returning False, then it follows the sequence given in the patterns array\n    return True\n"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    divisible_tuples = []\n    for tup in test_list:\n        if all(elem % K == 0 for elem in tup):\n            divisible_tuples.append(tup)\n    return divisible_tuples"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    tuples_found = []\n    for i, tup in enumerate(test_list):\n        is_valid = True\n        for j in tup:\n            if j % K!= 0:\n                is_valid = False\n                break\n        if is_valid:\n            tuples_found.append(tup)\n    return tuples_found"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    tuples_list = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if all(num % K == 0 for num in test_list[i] + test_list[j]):\n                tuples_list.append((test_list[i], test_list[j]))\n    return tuples_list"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    result = []\n    for tup in test_list:\n        if all(elem % K == 0 for elem in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    tuples_list = []\n    for tup in test_list:\n        if all(num % K == 0 for num in tup):\n            tuples_list.append(tup)\n    return tuples_list"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if all(x % K == 0 for x in test_list[i] + test_list[j]):\n                result.append(test_list[i] + test_list[j])\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n\n    # Create a set to store the indices of elements which are divisible by K\n    divisible_indices = set()\n\n    # Iterate through the tuples in the list\n    for i in range(len(test_list)):\n        # Check if all elements in the tuple are divisible by K\n        if all(test_list[i][j] % K == 0 for j in range(len(test_list[i]))):\n            # Add the index of the tuple to the set of divisible indices\n            divisible_indices.add(i)\n\n    # Create a new list of tuples which have all elements divisible by K\n    result = [test_list[i] for i in divisible_indices]\n\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    result = []\n    for tup in test_list:\n        if all(elem % K == 0 for elem in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    filtered_tuples = []\n    \n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            filtered_tuples.append(tup)\n            \n    return filtered_tuples"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n\n    # convert the number to a string to be able to split it into digits\n    n_str = str(n)\n\n    # split the number into digits\n    digits = [int(d) for d in n_str]\n\n    # check if all digits are divisible by 11\n    is_divisible = True\n    for d in digits:\n        if d % 11!= 0:\n            is_divisible = False\n            break\n\n    return is_divisible"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Diff(n):\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Diff(n):\n    if n%11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True \n    else: \n        return False "
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Diff(n):\n    \"\"\"\n    Write a python function to find whether a number is divisible by 11.\n    \"\"\"\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0: \n        return True\n    else:\n        return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    # convert string to list of characters\n    s = list(s)\n    # iterate over list of characters\n    for i in range(len(s)):\n        # check if current character is a letter\n        if s[i].isalpha():\n            # get the length of the current word\n            word_len = len(s[i:])\n            # check if the length of the word is odd\n            if word_len % 2!= 0:\n                # print the word\n                print(s[i:])"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 1:\n            return True\n    return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    # split the string into a list of words\n    words = s.split()\n    # initialize a counter variable\n    count = 0\n    # iterate through each word in the list\n    for word in words:\n        # check the length of the word\n        if len(word) % 2 == 1:\n            count += 1\n    # return True if the count is odd, False otherwise\n    if count % 2 == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    for word in s.split():\n        if len(word) % 2 == 1:\n            print(word)"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def word_len(s):\n    \"\"\"\n    This function takes a string as input and returns True if the length of the word is odd and False otherwise.\n    \"\"\"\n    # Split the string into words\n    words = s.split()\n    # Iterate through each word in the string\n    for word in words:\n        # Check if the length of the word is odd\n        if len(word) % 2 == 1:\n            return True\n    # If the loop completes without returning True, the length of all words is even\n    return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def word_len(s):\n    words = s.split()\n    for word in words:\n        if len(word) % 2!= 0:\n            print(word, \"is odd length\")\n        else:\n            print(word, \"is even length\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    # split the string into a list of words\n    words = s.split()\n    \n    # iterate over each word and check its length\n    for word in words:\n        if len(word) % 2 == 1:\n            return True\n    \n    # if no odd word was found, return False\n    return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def word_len(s):\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 0:\n            print(\"The length of the word is even.\")\n        else:\n            print(\"The length of the word is odd.\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def word_len(s):\n    words = s.split()\n    for word in words:\n        if len(word) % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def word_len(s): \n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 1:\n            return True\n    return False"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Initialize variables\n    a = 1\n    b = 0\n    c = 0\n    d = 0\n    count = 0\n\n    # Calculate the first term\n    term = 1\n\n    # Loop until we reach the nth term\n    while count < n:\n        # Increment the count\n        count += 1\n\n        # Calculate the next term\n        term = 4 * a * b * c * d // (b * (b + 1) * (c + 1) * (d + 1))\n\n        # Increment a, b, c, and d by 1\n        a += 1\n        b += 1\n        c += 1\n        d += 1\n\n    # Return the nth term\n    return term"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    tn = (0 + 1 + 3 + 6) * (n-1)\n    return tn"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Convert n to integer\n    n = int(n)\n\n    # Initialize the sum of tetrahedral numbers\n    sum_tetra = 0\n\n    # Loop through numbers from 1 to n-1\n    for i in range(1, n):\n        # Calculate the sum of squares of the remaining numbers\n        square_sum = (n - i) ** 2 * (i + 1) ** 2\n\n        # Add the sum to the running sum\n        sum_tetra += square_sum\n\n    # Return the final sum of tetrahedral numbers\n    return sum_tetra"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    if n < 1:\n        return \"Invalid input. n must be a positive integer.\"\n    elif n == 1:\n        return 0\n    else:\n        return (n * (n + 1) * (2 * n + 1)) // 6"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Define the base cases\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 8\n    elif n == 4:\n        return 24\n\n    # Use a loop to calculate the tetrahedral number\n    total = 0\n    for i in range(5, n+1):\n        total += 4 * (i - 1)\n    return total"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    t = 1\n    for i in range(n):\n        t *= 4\n    return t"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    This function computes the nth tetrahedral number using the formula:\n    \n    T(n) = n(n+1)(n+2)(n+3) / 6\n    \n    This formula is derived from the formula for the number of factorials:\n    \n    F(n) = n! = 1 * 2 * 3 *... * n\n    \n    Using this formula, we can calculate T(n) as follows:\n    \n    T(n) = n(n+1)(n+2)(n+3) / 6 = (n*(n+1)*(n+2)*(n+3)) / 6 = n! * (3*n+1) / 2\n    \n    Substituting this formula into the given expression, we get:\n    \n    T(n) = n * (n+1) * (n+2) * (n+3) / 6 = n * (n+1) * (n+2) * (n+3) / 6 * (3*n+1) / 2\n    \n    Simplifying the numerator:\n    \n    T(n) = n * (n+1) * (n+2) * (n+3) / 6 = n * (n+1) * (n+2) * (n+3) / 6 * (3*n+1) / 2 = n * (n+1) * (n+2) * (n+3) * (3*n+1)\n    \n    Removing the denominator:\n    \n    T(n) = n * (n+1) * (n+2) * (n+3) = (n * (n+1) * (n+2) * (n+3)) * (3*n+1)\n    \n    Simplifying the numerator:\n    \n    T(n) = n * (n+1) * (n+2) * (n+3) = n * (n+1) * (n+2) * (n+3) * (3*n+1)\n    \n    Substituting the numerator back into the denominator, we get:\n    \n    T(n) = n * (n+1) * (n+2) * (n+3) = n * (n+1) * (n+2) * (n+3) * (3*n+1) = n^3 * (n+1) * (n+2) * (n+3)\n    \n    Removing the second factor:\n    \n    T(n) = n * (n+1) * (n+2) * (n+3) = n * (n+1) * (n+2) * (n+3) * (3*n+1)\n    \n    Dividing by 6:\n    \n    T(n) = n * (n+1) * (n+2) * (n+3) / 6 = n * (n+1) * (n+2) * (n+3) / 6 * (3*n+1)\n    \n    This formula gives the nth tetrahedral number using the same formula as for factorials.\n    \"\"\"\n    \n    return n * (n+1) * (n+2) * (n+3) * (3*n+1) / 6"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n\n    # Initialize the first four terms of the series\n    a = 1\n    b = 4\n    c = 6\n    d = 8\n\n    # Initialize the sum of the series\n    sum_ = a + b + c + d\n\n    # Use the formula for the nth term of the series to find the nth tetrahedral number\n    for i in range(2, n+1):\n        # Compute the sum of the previous four terms\n        sum_ += 4*i*a + 6*i*b + 8*i*c + 10*i*d\n\n        # Update the values of the variables used in the formula for the next term\n        a = b\n        b = c\n        c = d\n        d = 12*i*d - 18*i*c + 6*i*b + 10*i*a\n    \n    # Return the nth tetrahedral number\n    return sum_"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return (n*(3*n-1))//2"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tetrahedral_number(n):\n    # 1^4 = 1\n    # 2^4 = 16\n    # 3^4 = 81\n    # 4^4 = 64\n    \n    # Define the terms of the tetrahedral sequence\n    terms = [1, 16, 81, 64]\n    \n    # Calculate the nth term\n    nth_term = terms[n-1]\n    \n    # Return the nth term\n    return nth_term"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_sphere(r):\n    \"\"\"\n    Write a function to find the volume of a sphere.\n    \"\"\"\n    volume = (4/3) * math.pi * (r ** 3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    This function takes a radius r (in meters) and returns the volume of a sphere with that radius.\n    '''\n    vol = (4/3) * math.pi * (r**3)\n    return vol"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3 * math.pi * r**3"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*(r**3)"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3) * math.pi * r**3\n    return V\n"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * (r**3)"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * r**3"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * r**3"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_sphere(r):\n    \"\"\"\n    Write a function to find the volume of a sphere.\n    \"\"\"\n    vol = (4/3) * math.pi * (r ** 3)\n    return vol"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = math.pi\n    volume = (4/3) * pi * r**3\n    return volume"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    total = 0\n    for char in strr:\n        total += ord(char)\n    return chr((total % 26) + 97)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum = 0\n    for i in range(len(strr)):\n        sum += ord(strr[i])\n    return chr((sum % 26) + ord('A'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char_sum = 0\n    for char in strr:\n        char_sum += ord(char) % 26\n    return chr(char_sum % 26 + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    char = 0\n    for char_ in strr:\n        char += ord(char_)\n    return chr((char % 26) + ord('a'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    char = 0\n    for i in strr:\n        char += ord(i)\n    return chr((char % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_sum = 0\n    for char in strr:\n        ascii_sum += ord(char)\n    return chr((ascii_sum % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Char(strr):\n    char = \"\"\n    for i in range(len(strr)):\n        char += chr(((ord(strr[i]) + ord('A')) % 26) + ord('A'))\n    return char"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Char(strr):  \n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    ascii_value = 0\n    for char in strr:\n        ascii_value += ord(char)\n    result = chr((ascii_value % 26) + ord('A'))\n    return result"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char_val = 0\n    for char in strr:\n        char_val += ord(char)\n    return chr(((char_val % 26) + 65) % 26 + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_value = 0\n    for i in strr:\n        ascii_value += ord(i)\n    return chr((ascii_value % 26) + 65)\n"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1, 1]\n    for i in range(2, n):\n        next_num = (sequence[i - 1] + sequence[i - 2]) % 2\n        sequence.append(next_num)\n    return sequence[-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [0, 1]\n    for i in range(2, n):\n        sequence.append(2*sequence[-1] - sequence[-2])\n    return sequence[-1]\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The\", n, \"th number in the newman conway sequence is:\", sequence(n))"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return sequence(n-1) + sequence(n-2) + 2*sequence(n-1)"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [2]\n    for i in range(1, n):\n        if i % 2 == 0:\n            sequence.append(sequence[-1] * 2)\n        else:\n            sequence.append(3 * sequence[-1])\n    return sequence[n-1]\n"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1, 1]\n    for i in range(2, n):\n        if i % 2 == 0:\n            sequence.append(sequence[-1] + sequence[-2])\n        else:\n            sequence.append(3 * sequence[-1] - sequence[-2])\n    return sequence[-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequence(n):\n    if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n\n    sequence = [1]\n    for i in range(2, n + 1):\n        sequence.append(3 * sequence[i - 1] - sequence[i - 2])\n\n    return sequence[n]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequence(n):\n    sequence = [1, 1, 2, 1, 4, 1, 8, 1, 16, 1, 32, 1, 64, 1, 128, 1, 256, 1, 512, 1]\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [1]\n    for i in range(n):\n        new_sequence = [x + y for x, y in zip(sequence, sequence[1:])]\n        sequence = new_sequence\n    return sequence[-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequence(n): \n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [0]\n    for i in range(1, n+1):\n        sequence.append(sequence[-1] + sequence[-2])\n    return sequence[-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    if n <= 0:\n        return \"Please enter a positive integer.\"\n    elif n == 1:\n        return 1\n    else:\n        result = sequence(n-1)\n        if result == 1:\n            return 1\n        else:\n            return 0"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return (4/3) * math.pi * r**3\n"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = 4 * math.pi * r**2\n    return area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = (4/3) * math.pi * r ** 3\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r ** 2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r * r\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = 4 * math.pi * r**2\n    return area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    This function takes in the radius of a sphere and returns the surface area of the sphere.\n    '''\n    return 4 * math.pi * r ** 2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    This function calculates the surface area of a sphere using the formulae:\n    Area = 4 * \u03c0 * r^2\n    and\n    Volume = (4/3) * \u03c0 * r^3\n    \n    Args:\n        r (float): radius of the sphere\n    \n    Returns:\n        float: surface area of the sphere\n    '''\n    return (4 * math.pi * r**2)\n"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    \"\"\"\n    This function calculates the surface area of a sphere using the formula:\n    surface area = 4*pi*(radius^2)\n    \"\"\"\n\n    return 4 * math.pi * (r ** 2)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    def centered_hexagonal(n):\n        '''\n        Write a recursive function to find nth centered hexagonal number.\n        '''\n        if n == 1:\n            return 1\n        else:\n            return 6 * centered_hexagonal(n - 1) + 1\n    \n    return centered_hexagonal(n)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    a = 1\n    b = 6\n    for i in range(1, n+1):\n        print((a+b)**(i//2)*((-1)**(i%2)*(2*i-1))/(i+1))\n        a += b\n        b += 2"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    if n < 1:\n        return \"Invalid input\"\n    \n    # Initialize variables\n    a = 1\n    b = 1\n    c = 0\n    \n    # Calculate centered hexagonal number\n    while a < 2**n:\n        b = a + (2**n - 1)\n        a += 2*b\n    \n    return b"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    This function takes an integer n as input and returns the nth centered hexagonal number.\n    The centered hexagonal number is the number which is centered in a hexagonal grid with odd side lengths.\n    For example, the first centered hexagonal number is 1, the second centered hexagonal number is 7,\n    and the nth centered hexagonal number is 6n^2 - 5n + 1.\n    '''\n    \n    # Initialize variables\n    m = 1  # Initialize the variable m to 1\n    num = 1  # Initialize the variable num to 1\n    \n    # Iterate n-1 times\n    for i in range(1, n):\n        # Update the variable m\n        m += 2\n        \n        # Calculate the value of num using the formula: num = 6m^2 - 5m + 1\n        num = 6*m**2 - 5*m + 1\n    \n    return num"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find the nth centered hexagonal number.\n    \n    Args:\n    n (int): the index of the centered hexagonal number\n    \n    Returns:\n    int: the centered hexagonal number\n    '''\n    \n    # convert n to base 2\n    n_binary = bin(n)[2:]\n    \n    # convert base 2 to decimal\n    n_decimal = int(n_binary, 2)\n    \n    # compute the centered hexagonal number\n    chex_n = n_decimal * (n_decimal + 1) // 2\n    \n    return chex_n"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return n * (n * (2 * n - 1) // 2)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    a, b, c = 1, 1, 1\n    for i in range(1, n+1):\n        a, b, c = b, c, 3*a - b\n        print(a)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return int(3*n**2 - 1)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n < 1:\n        return 0\n    \n    # Base case: n=1\n    if n == 1:\n        return 1\n    \n    # Initialize variables\n    numerator = n\n    denominator = 1\n    hexagonal_number = 0\n    \n    # Iterate till n\n    while numerator > 0:\n        # Calculate next numerator and denominator\n        next_numerator = numerator - denominator\n        next_denominator = denominator + 1\n        \n        # Update hexagonal number\n        hexagonal_number = hexagonal_number + (next_numerator/next_denominator)\n        \n        # Update numerator and denominator\n        numerator = next_numerator\n        denominator = next_denominator\n    \n    return hexagonal_number"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    num = n + 1\n    centered_hex = 3 * num * num - 1\n    return centered_hex"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merges three dictionaries into a single dictionary.\n    \"\"\"\n    # Create an empty dictionary to store the merged dictionary.\n    merged_dict = {}\n\n    # Iterate through each key in the first dictionary.\n    for key in dict1:\n        # If the key is not in the merged dictionary, add it.\n        if key not in merged_dict:\n            merged_dict[key] = dict1[key]\n        # If the key is already in the merged dictionary, append the values from the other dictionaries.\n        else:\n            merged_dict[key] = merged_dict[key] + dict1[key] + dict2[key] + dict3[key]\n\n    # Return the merged dictionary.\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = ct.ChainMap(dict1,dict2,dict3)\n    return dict(merged_dict)"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    return dict(merged_dict)"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    This function takes in three dictionaries as input and returns a merged dictionary.\n    The function merges the three dictionaries by iterating over their keys and values,\n    and adding the key-value pairs to a new dictionary.\n    '''\n    merged_dict = {}\n    for key, value in dict1.items():\n        merged_dict[key] = value\n    for key, value in dict2.items():\n        merged_dict[key] = value\n    for key, value in dict3.items():\n        merged_dict[key] = value\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = dict1.copy()\n    for key, value in dict2.items():\n        merged_dict[key] = value\n    for key, value in dict3.items():\n        merged_dict[key] = value\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # combine the three dictionaries into a single dictionary\n    combined_dict = dict1.copy()\n    combined_dict.update(dict2)\n    combined_dict.update(dict3)\n    \n    # convert the combined dictionary to a set so that duplicates can be removed\n    combined_set = set(combined_dict.items())\n    \n    # convert the set back to a dictionary\n    merged_dict = dict(combined_set)\n    \n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single dictionary.\n\n    Args:\n    - dict1: A dictionary\n    - dict2: A dictionary\n    - dict3: A dictionary\n\n    Returns:\n    - A single dictionary containing all the key-value pairs from dict1, dict2, and dict3\n    \"\"\"\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    return dict(merged_dict)"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # create an empty dictionary to store the merged dictionaries\n    merged_dict = {}\n    # loop through the three dictionaries and merge their values into the merged_dict\n    for key, value in dict1.items():\n        merged_dict[key] = value\n    for key, value in dict2.items():\n        merged_dict[key] = value\n    for key, value in dict3.items():\n        merged_dict[key] = value\n    return merged_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def freq_count(lst):\n    \"\"\"\n    Given a list, returns the frequency of all the elements in the list, \n    returned as a dictionary.\n    \"\"\"\n    freq = collections.defaultdict(int)\n    for item in lst:\n        freq[item] += 1\n    return dict(freq)"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections\n\ndef freq_count(lst):\n    freq = collections.defaultdict(int)\n    for item in lst:\n        freq[item] += 1\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections\n\ndef freq_count(list1):\n    \"\"\"\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    \"\"\"\n    # Create an empty dictionary to store the frequency of each element\n    freq_dict = {}\n    # Loop through the list and update the frequency dictionary\n    for elem in list1:\n        if elem in freq_dict:\n            freq_dict[elem] += 1\n        else:\n            freq_dict[elem] = 1\n    # Return the dictionary of frequency of each element\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for element in list1:\n        if element in freq_dict:\n            freq_dict[element] += 1\n        else:\n            freq_dict[element] = 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def freq_count(lst):\n    freq = collections.Counter(lst)\n    return dict(freq)"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.defaultdict(int)\n    for elem in list1:\n        freq_dict[elem] += 1\n    return dict(freq_dict)"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # Create an empty dictionary to store the frequency of each element\n    freq_dict = collections.defaultdict(int)\n    # Loop through the list and update the frequency of each element in the dictionary\n    for elem in list1:\n        freq_dict[elem] += 1\n    # Return the dictionary containing the frequency of each element in the list\n    return dict(freq_dict)"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return dict(freq)"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections\n\ndef freq_count(list1):\n    \"\"\"\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    \"\"\"\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return dict(freq)"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smallest = float('inf')\n    for num in range(1, N+1):\n        if num < smallest:\n            smallest = num\n    return smallest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n    n_list = list(range(1, N+1))\n    n_sorted = sorted(n_list)\n    closest = n_sorted[0]\n    diff = abs(N - closest)\n    for num in n_sorted[1:]:\n        if abs(N - num) < diff:\n            closest = num\n            diff = abs(N - closest)\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    numbers = []\n    for i in range(1, N+1):\n        numbers.append(i)\n    smallest = min(numbers)\n    closest = None\n    for num in numbers:\n        if num > smallest and (closest is None or num - smallest < closest):\n            closest = num - smallest\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smaller = N\n    for num in range(N, 0, -1):\n        if num % 2 == 0:\n            smaller = min(smaller, num)\n        else:\n            smaller = max(smaller, num)\n    return smaller"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def closest_num(N):\n    def find_closest_smaller(n):\n        min_num = n\n        max_num = n\n        for i in range(n):\n            if i == n - 1:\n                min_num = i + 1\n            if i == 0:\n                max_num = i - 1\n            if abs(i - n) < abs(min_num - n):\n                min_num = i + 1\n            if abs(i - n) > abs(max_num - n):\n                max_num = i - 1\n        return min_num\n\n    return find_closest_smaller(N)"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def closest_num(N):\n    smallest = N\n    smallest_diff = abs(N - 1)\n    smallest_diff_found = False\n    for i in range(1, N):\n        diff = abs(i - N)\n        if diff < smallest_diff or (diff == smallest_diff and i < smallest):\n            smallest = i\n            smallest_diff = diff\n            smallest_diff_found = True\n    if smallest_diff_found:\n        return smallest\n    else:\n        return N"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    min_num = float('inf')\n    for i in range(N-1):\n        if N-i < min_num:\n            min_num = N-i\n    return min_num\n"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    nums = []\n    for i in range(1, N+1):\n        nums.append(i)\n    min_diff = float('inf')\n    closest_num = 0\n    for num in nums:\n        diff = abs(num - N)\n        if diff < min_diff:\n            min_diff = diff\n            closest_num = num\n    return closest_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    n = int(input(\"Enter a number: \"))\n    smallest = n\n    diff = abs(n-smallest)\n    for i in range(n, 0, -1):\n        if abs(i-n) < diff:\n            smallest = i\n            diff = abs(i-n)\n    print(\"The closest smaller number is:\", smallest)"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def closest_num(N):\n    # Create a list of numbers from 0 to N\n    nums = list(range(N+1))\n    # Sort the list in ascending order\n    nums.sort()\n    # If the smallest number is the largest number, it's the smallest number itself\n    if nums[0] == N:\n        return N\n    # If the smallest number is not the largest number, return the next smallest number\n    return nums[1]"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def len_log(list1):\n    \"\"\"\n    Write a python function to find the length of the longest word in a list of strings.\n    \"\"\"\n    longest_word = ''\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_length = 0\n    for i in list1:\n        if len(i) > max_length:\n            max_length = len(i)\n    return max_length"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def len_log(list1):\n    \"\"\"\n    Write a python function to find the length of the longest word.\n    \"\"\"\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n\n    max_len = 0\n    longest_word = \"\"\n\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n            longest_word = word\n\n    return longest_word"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = ''\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n    \"\"\"\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for string in str1:\n        if sub_str in string:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for string in str1:\n        if sub_str in string:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n    \"\"\"\n    if isinstance(str1, list) and isinstance(sub_str, list):\n        for s in str1:\n            if sub_str in s:\n                return True\n    else:\n        if sub_str in str1:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if isinstance(str1, str) and isinstance(sub_str, str):\n        for word in str1.split():\n            if sub_str in word:\n                return True\n        return False\n    else:\n        print(\"Both the input strings must be of type string.\")"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for item in str1:\n        if sub_str in item:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for item in str1:\n        if sub_str in item:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(len(str1)-len(sub_str)+1):\n        if str1[i:i+len(sub_str)] == sub_str:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n\n    Parameters:\n    str1 (str): The string to search in.\n    sub_str (str): The substring to search for.\n\n    Returns:\n    bool: True if the string is present as a substring in the list, else False.\n    \"\"\"\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0: \n        return False\n    else: \n        for i in range(3, int(n**0.5)+1, 2): \n            if n % i == 0: \n                return False\n        return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    return (n % 2!= 0) and (n % 10!= 0)"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n\n    if n < 5:\n        return False\n    \n    for i in range(1, n):\n        if n % i == 0:\n            return False\n    \n    return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return False\n    elif n % 2 == 1 and n > 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0: # n is even\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n == 0:\n        return False\n    elif n % 2 == 0:\n        for i in range(3, int(n**0.5) + 1, 2):\n            if n % i == 0:\n                return False\n        return True\n    else:\n        for i in range(5, int(n**0.5) + 1, 2):\n            if n % i == 0:\n                return False\n        return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        print(n, \"is an even number.\")\n        return True\n    else:\n        print(n, \"is an odd number.\")\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n == 0: \n        return False\n    elif n == 1 or n == -1: \n        return True\n    else: \n        return is_undulating(n//2)"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power(a, b):\n    \"\"\"\n    Write a function to calculate the value of 'a' to the power 'b'.\n    \"\"\"\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power(a, b):\n    \"\"\"\n    Calculates the value of a to the power b.\n\n    Parameters:\n    a (float): The base number to raise to the power of b.\n    b (int): The exponent to raise a to.\n\n    Returns:\n    float: The result of a raised to the power of b.\n\n    \"\"\"\n    result = 1.0\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    \"\"\"\n    # Use the built-in sorted() function to sort the list in ascending order based on the second value of the tuples\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    # Return the first value of the first tuple (i.e., the first element of the first tuple)\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(0, 1))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    \"\"\"\n    minimum_index = None\n    minimum_value = float('inf')\n    for i, item in enumerate(test_list):\n        if item[1] < minimum_value:\n            minimum_index = i\n            minimum_value = item[1]\n    return minimum_index"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    # Sort the list of tuples by the second value (itemgetter(1)) using the itemgetter function from the operator module\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    \n    # Return the index of the first tuple in the sorted list\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    # sort the list by the second value in ascending order\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    # return the index of the first element in the sorted list\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    \"\"\"\n    # Sort the list in ascending order of the second element of each tuple\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    # Return the first element of the first tuple in the sorted list\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Sort the list by the second value in ascending order\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    # Return the first value of the smallest tuple\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return sorted(test_list, key=itemgetter(1))[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return sorted(test_list, key=itemgetter(1))[0][0]"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = float('inf')\n    for i in lst:\n        if len(i) < min_len:\n            min_len = len(i)\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = float('inf') #initializing minimum length as infinity\n    for sub_lst in lst:\n        if len(sub_lst) < min_len:\n            min_len = len(sub_lst)\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n\n    # Initialize minimum length to the length of the first list\n    min_len = len(lst[0])\n\n    # Loop through each list in the list of lists\n    for lst_i in lst:\n        # Update the minimum length if the length of the current list is shorter\n        if len(lst_i) < min_len:\n            min_len = len(lst_i)\n\n    # Return the minimum length found\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):\n    '''\n    This function takes a list of lists as input and returns the length of the smallest list in the list.\n    '''\n    min_length = len(lst[0])\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the smallest list in a list of lists.\n    \"\"\"\n    min_length = len(lst[0])\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = lst[0][0]\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if min_len > len(lst[i][j]):\n                min_len = len(lst[i][j])\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n\n    min_length = 1000\n    min_list = None\n\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_list = sublist\n\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = float('inf') # Initialize minimum length to infinity\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n    return min_len"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisor(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    if n == 1:\n        return 1\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            count += 1\n            if i!= n // i:\n                count += 1\n    if n > 1:\n        count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 1\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            count += 1\n    if n > 1:\n        count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    This function takes an integer as input and returns the number of divisors of that integer.\n    '''\n    divisors = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors += 1\n    return divisors"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # create an empty dictionary to store the frequency of each element\n    freq = {}\n    # loop through each element in the flattened list\n    for item in list1:\n        # check if the element is already in the dictionary\n        if item in freq:\n            # increment the frequency of the element by 1\n            freq[item] += 1\n        else:\n            # if the element is not in the dictionary, add it with a frequency of 1\n            freq[item] = 1\n    # return the dictionary containing the frequency of each element\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    flat_list = [item for sublist in list1 for item in sublist]\n    freq_dict = {}\n    for item in flat_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n    freq_dict = {}\n    for item in list1:\n        if type(item) == list:\n            for subitem in item:\n                if subitem in freq_dict:\n                    freq_dict[subitem] += 1\n                else:\n                    freq_dict[subitem] = 1\n        else:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        for subitem in item:\n            if subitem in freq_dict:\n                freq_dict[subitem] += 1\n            else:\n                freq_dict[subitem] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n\n    # Create an empty dictionary to store the frequency of each element\n    freq_dict = {}\n\n    # Loop through each element in the flattened list\n    for item in list1:\n        # Check if the element is already in the dictionary\n        if item in freq_dict:\n            # Increment the count of the element in the dictionary\n            freq_dict[item] += 1\n        else:\n            # Add the element to the dictionary with a count of 1\n            freq_dict[item] = 1\n\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Create an empty dictionary to store the frequency of each element\n    freq = {}\n    \n    # Use a loop to iterate over each element in the flattened list\n    for item in list1:\n        # Check if the element is already in the dictionary, if not, add it with frequency 1\n        if item not in freq:\n            freq[item] = 1\n        # If the element is already in the dictionary, increment its frequency by 1\n        else:\n            freq[item] += 1\n    \n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if item not in freq_dict:\n            freq_dict[item] = 1\n        else:\n            freq_dict[item] += 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Create a dictionary to store the frequency of each element\n    freq = {}\n    \n    # Loop through each element in the flattened list of lists\n    for element in list1:\n        # Check if the element is already a key in the dictionary\n        if element in freq:\n            # If it is, increment its value by 1\n            freq[element] += 1\n        else:\n            # If it's not, add it to the dictionary with a value of 1\n            freq[element] = 1\n    \n    # Return the dictionary containing the frequency of each element\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for elem in list1:\n        if elem not in freq_dict:\n            freq_dict[elem] = 1\n        else:\n            freq_dict[elem] += 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Create an empty dictionary to store the frequency of each element\n    freq = {}\n    \n    # Loop through each element in the list\n    for element in list1:\n        # If the element is not in the dictionary, add it with a frequency of 1\n        if element not in freq:\n            freq[element] = 1\n        # If the element is already in the dictionary, increment its frequency\n        else:\n            freq[element] += 1\n    \n    return freq"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    # multiply all the numbers in the list\n    result = 1\n    for num in numbers:\n        result *= num\n    \n    # divide by the length of the list\n    result /= len(numbers)\n    \n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result\n"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result //= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for number in numbers:\n        product *= number\n    return product / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for num in numbers:\n        total *= num\n    result = total / len(numbers)\n    return result"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    # initialize an empty string to store the binary equivalent\n    binary_num = \"\"\n    \n    # loop through each digit in the decimal number\n    for digit in str(n):\n        # convert each digit to binary using integer division and bitwise operations\n        binary_digit = str(bin(int(digit)))[2:]\n        \n        # pad each binary digit with a leading zero if necessary\n        if len(binary_digit) == 1:\n            binary_digit = \"0\" + binary_digit\n        \n        # append the binary digit to the binary_num string\n        binary_num += binary_digit\n    \n    # remove any leading zeros from the binary_num string\n    while binary_num.startswith(\"0\"):\n        binary_num = binary_num[1:]\n    \n    return binary_num"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    # initialize an empty string to store the binary equivalent\n    binary = ''\n    # loop through each bit of the decimal number\n    while n > 0:\n        # extract the last bit of the decimal number\n        bit = n % 2\n        # add it to the beginning of the binary string\n        binary = str(bit) + binary\n        # remove the last bit from the decimal number\n        n //= 2\n    # return the binary string\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    # Base case: if n is 0, return 0\n    if n == 0:\n        return \"0\"\n    \n    # Convert n to a list of digits\n    num_list = [int(d) for d in str(n)]\n    \n    # Iterate through the digits, adding each digit to a binary string\n    binary_string = \"\"\n    for digit in num_list:\n        binary_digit = \"\"\n        while digit > 0:\n            binary_digit += str(digit % 2)\n            digit //= 2\n        binary_string += binary_digit\n    \n    # Remove leading zeros from the binary string\n    while binary_string.startswith(\"0\"):\n        binary_string = binary_string[1:]\n    \n    # Reverse the binary string\n    binary_string = binary_string[::-1]\n    \n    return binary_string"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n\n    # initialize an empty string to store the binary equivalent\n    binary = \"\"\n\n    # iterate over each digit of the decimal number and convert it to binary\n    while n > 0:\n        remainder = n % 2\n        binary = str(remainder) + binary\n        n = n // 2\n\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def decimal_to_binary(n):\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    \n    # Convert decimal to binary using recursion\n    def convert(num, binary=''):\n        if num == 0:\n            return binary\n        else:\n            remainder = num % 2\n            binary = str(remainder) + binary\n            return convert(num // 2, binary)\n    \n    # Convert the decimal number to binary\n    binary_number = convert(n)\n    \n    # Remove leading zeros\n    binary_number = binary_number.lstrip('0')\n    \n    # Convert the binary number to string\n    binary_number = ''.join(binary_number)\n    \n    return binary_number"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    # Convert decimal to binary using bitwise operations\n    binary = bin(n)[2:]\n    # Add leading zeros to the binary string until it has exactly 32 digits\n    binary = '0'*(32-len(binary)) + binary\n    # Remove leading zeros and convert to string\n    return str(int(binary, 2))"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def decimal_to_binary(n):\n    # initialize an empty string to store the binary equivalent\n    binary_string = \"\"\n    # loop until n is equal to 0\n    while n > 0:\n        # append the last digit of n to the binary_string\n        binary_string = str(n % 2) + binary_string\n        # remove the last digit from n\n        n //= 2\n    # reverse the binary_string to get the original order\n    return binary_string[::-1]"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Remove all non-digit characters from the input number\n    num = ''.join(filter(str.isdigit, str(num)))\n    \n    # Remove all leading zeros from the number\n    while num[0] == '0':\n        num = num[1:]\n    \n    # Convert the number to an integer\n    num = int(num)\n    \n    # Check if the number is already a palindrome\n    if num == int(str(num)[::-1]):\n        return num\n    \n    # Check all possible palindromes\n    for i in range(10**len(str(num))):\n        palindrome = str(i) + str(i)[::-1]\n        if palindrome < str(num) and palindrome < int(palindrome):\n            return int(palindrome)\n    \n    # If no palindrome is found, the next smallest palindrome is the smallest number greater than the input number\n    return num + 1"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    largest_palindrome = 0\n    for i in range(10**9, 10**9+1):\n        if i % 10 == 0:\n            if i <= 1000000000:\n                largest_palindrome = i\n        elif (i+1) % 10 == 0:\n            if i+1 <= 1000000000:\n                largest_palindrome = i+1\n        else:\n            if (i+1) % 100 == 0:\n                if i+100 <= 1000000000:\n                    largest_palindrome = i+100\n            elif (i+10) % 100 == 0:\n                if i+10 <= 1000000000:\n                    largest_palindrome = i+10\n            else:\n                if (i+10) % 10 == 0:\n                    largest_palindrome = i+10\n    return largest_palindrome - num"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Convert the input to a string\n    num_str = str(num)\n\n    # Check if the number is negative or has more than 9 digits\n    if num_str[0] == '-' or len(num_str) > 9:\n        sys.exit(\"Error: Invalid input.\")\n\n    # If the number has less than 9 digits, add leading zeros\n    if len(num_str) < 9:\n        num_str = '0' * (9 - len(num_str)) + num_str\n\n    # Create a list of all possible permutations of the digits\n    perm_list = []\n    for i in range(9):\n        for j in range(i + 1, 9):\n            for k in range(j + 1, 10):\n                perm_list.append(str(i) + str(j) + str(k))\n\n    # Find the largest permutation that is smaller than the input number\n    max_perm = ''\n    for p in perm_list:\n        if int(p) < int(num_str):\n            max_perm = p\n            break\n\n    # If no such permutation exists, return the input number\n    if max_perm == '':\n        return num\n\n    # Calculate the next smallest palindrome by concatenating the largest permutation and the input number\n    next_num = int(max_perm) * 100 + num\n    return next_num"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import sys\n\ndef is_palindrome(num):\n    '''\n    This function checks whether a given integer is palindrome or not.\n    '''\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    '''\n    This function finds the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if is_palindrome(num+1):\n        return num+1\n    else:\n        return next_smallest_palindrome(num+1)\n\ndef main():\n    if len(sys.argv)!= 2:\n        print(\"Usage: python next_smallest_palindrome.py <integer>\")\n        sys.exit(1)\n    num = int(sys.argv[1])\n    print(\"The next smallest palindrome of\", num, \"is\", next_smallest_palindrome(num))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_palindrome(n):\n    \"\"\"\n    Check if a given number is a palindrome.\n    \"\"\"\n    return str(n) == str(n)[::-1]\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Find the next smallest palindrome of a specified integer.\n    \"\"\"\n    # Convert the input number to a string and reverse it\n    reverse_str = str(num)[::-1]\n    \n    # Check if the reversed string is a palindrome\n    if is_palindrome(int(reverse_str)):\n        # If it is, find the next smallest palindrome\n        while not is_palindrome(int(reverse_str) + 1):\n            reverse_str = str(int(reverse_str) + 1)[::-1]\n        \n        # Convert the reversed string back to an integer and return it\n        return int(reverse_str)\n    \n    # If the reversed string is not a palindrome, return the original number\n    return num"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import sys\n\ndef is_palindrome(num):\n    '''\n    Check if a given number is a palindrome.\n    '''\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    while True:\n        if is_palindrome(num + 1):\n            return num + 1\n        else:\n            num += 1\n\ndef main():\n    if len(sys.argv)!= 2:\n        print(\"Usage: python next_smallest_palindrome.py <integer>\")\n        sys.exit(1)\n    num = int(sys.argv[1])\n    print(\"Next smallest palindrome:\", next_smallest_palindrome(num))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # check if the number is already a palindrome\n    if num == int(str(num)[::-1]):\n        return num + 1\n    \n    # find the smallest palindrome number greater than the given number\n    # using the formula for the next smallest palindrome: 9999 + 9999 = 199989\n    # since we are only considering palindromes, we can ignore the 0's at the beginning and end of the number\n    max_palindrome = 1000000000 - (1000000000 - num)\n    \n    # loop through all the numbers from 1 to the maximum palindrome to find the next smallest palindrome\n    for i in range(1, max_palindrome + 1):\n        next_num = str(num) + str(i)\n        \n        # check if the number is a palindrome\n        if int(next_num[::-1]) == num:\n            return int(next_num)"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import sys\n\ndef is_palindrome(num):\n    '''\n    Helper function to check if a given integer is a palindrome.\n    '''\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    prev_smallest = -sys.maxsize - 1\n    next_prev_smallest = -sys.maxsize - 2\n    \n    while True:\n        next_num = num + 1\n        if is_palindrome(next_num):\n            return next_num\n        \n        if is_palindrome(next_num) and next_num > prev_smallest:\n            return next_num\n        \n        if is_palindrome(next_num) and next_num > next_prev_smallest:\n            return next_num\n        \n        prev_smallest = next_num\n        next_prev_smallest = next_num"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # get the list of digits of the input number\n    num_str = str(num)\n    digits = [int(d) for d in num_str]\n    \n    # reverse the digits and add 1 to each digit\n    for i in range(len(digits)):\n        digits[i] += 1\n    \n    # convert the list of digits back to an integer\n    next_num = int(''.join(str(d) for d in digits))\n    \n    # check if the next number is a palindrome\n    is_palindrome = True\n    for i in range(len(num_str) // 2):\n        if num_str[i]!= num_str[-1 - i]:\n            is_palindrome = False\n            break\n    \n    # if the next number is a palindrome, return it; otherwise, return the original number\n    if is_palindrome:\n        return next_num\n    else:\n        return num"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Convert integer to string\n    num_str = str(num)\n\n    # Find the length of the integer\n    num_length = len(num_str)\n\n    # Initialize a flag to keep track of whether the current number is a palindrome or not\n    is_palindrome = True\n\n    # Iterate through the digits of the number\n    for i in range(num_length - 1):\n        # If the current digit is not equal to the last digit, then the number is not a palindrome\n        if num_str[i]!= num_str[num_length - i - 1]:\n            is_palindrome = False\n            break\n\n    # If the current number is a palindrome, then increment it by 1 and check if it's a palindrome again\n    if is_palindrome:\n        num += 1\n        is_palindrome = True\n\n        for i in range(num_length - 1):\n            if num_str[i]!= num_str[num_length - i - 1]:\n                is_palindrome = False\n                break\n\n        # If the current number is not a palindrome, decrement it by 1 and check if it's a palindrome again\n        if not is_palindrome:\n            num -= 1\n            is_palindrome = True\n\n            for i in range(num_length - 1):\n                if num_str[i]!= num_str[num_length - i - 1]:\n                    is_palindrome = False\n                    break\n\n    # If the current number is not a palindrome, increment it by 1 and check if it's a palindrome again\n    if not is_palindrome:\n        num += 1\n        is_palindrome = True\n\n        for i in range(num_length - 1):\n            if num_str[i]!= num_str[num_length - i - 1]:\n                is_palindrome = False\n                break\n\n    # Convert the integer back to a string and return it\n    return int(num_str)"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Check if the array is empty or not\n    if len(arr) == 0:\n        return None\n\n    # If the array has only one element, return it\n    if len(arr) == 1:\n        return arr[0]\n\n    # Divide the array into two halves\n    mid = len(arr) // 2\n    left_half = arr[:mid]\n    right_half = arr[mid:]\n\n    # Recursively find the kth element in the left half\n    if k <= len(left_half):\n        return kth_element(left_half, k)\n    # Recursively find the kth element in the right half\n    else:\n        return kth_element(right_half, k - len(left_half) - 1)"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr):\n        return \"Invalid index\"\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Find the length of the array\n    n = len(arr)\n    \n    # If k is less than or equal to 0 or greater than the length of the array, return None\n    if k <= 0 or k > n:\n        return None\n    \n    # If k is equal to 1, return the first element in the array\n    if k == 1:\n        return arr[0]\n    \n    # If k is greater than 1, split the array into two halves\n    mid = n // 2\n    left_half = arr[:mid]\n    right_half = arr[mid:]\n    \n    # Recursively call the function on the left half and right half to find the kth element in each half\n    left_kth_element = kth_element(left_half, k)\n    right_kth_element = kth_element(right_half, k - mid)\n    \n    # If the kth element in the left half is smaller than the kth element in the right half,\n    # return the kth element in the left half\n    if left_kth_element is not None and right_kth_element is not None and left_kth_element < right_kth_element:\n        return left_kth_element\n    \n    # If the kth element in the left half is greater than the kth element in the right half,\n    # return the kth element in the right half\n    elif left_kth_element is not None and right_kth_element is not None and left_kth_element > right_kth_element:\n        return right_kth_element\n    \n    # If the kth element in the left half is None or the kth element in the right half is None,\n    # return None\n    else:\n        return None"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr):\n        return None\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr):\n        return None\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr):\n        return None\n    \n    for i in range(len(arr)):\n        if i == k - 1:\n            return arr[i]\n        elif arr[i] > arr[k - 1]:\n            return arr[i]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        return \"Invalid input\"\n    elif k == 1:\n        return arr[0]\n    else:\n        left = 1\n        right = len(arr)\n        while left <= right:\n            mid = (left + right) // 2\n            if mid == k - 1:\n                return arr[mid]\n            elif mid < k - 1:\n                left = mid + 1\n            else:\n                right = mid - 1"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr):\n        return None\n    else:\n        return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Check if the array is empty or has only one element\n    if len(arr) == 0 or len(arr) == 1:\n        return arr[0]\n    \n    # Divide the array into two halves\n    mid = len(arr) // 2\n    left = arr[:mid]\n    right = arr[mid:]\n    \n    # Recursively find the kth element in the left half\n    if k < mid + 1:\n        return kth_element(left, k)\n    else:\n        # Recursively find the kth element in the right half\n        return kth_element(right, k - mid - 1)"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    This function takes two arguments: the array and the kth element to find.\n    It returns the kth element from the array.\n    '''\n    if k < 1 or k > len(arr):\n        return 'Invalid input. k must be between 1 and the length of the array.'\n    else:\n        return arr[k-1]"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    camel_case = ''\n    for word in words:\n        camel_case += word.capitalize()\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(word.title().split('_'))"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    camel_case = \"\"\n    for i in range(len(word)):\n        if i == 0:\n            camel_case += word[i].lower()\n        elif word[i-1].isupper():\n            camel_case += word[i].upper()\n        else:\n            camel_case += word[i].lower()\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    camel = ''\n    for char in word:\n        if char.isupper():\n            if camel:\n                camel = camel + '_'\n            camel = camel + char.lower()\n        else:\n            camel = camel + char\n    return camel"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    # Convert the snake case word to a list of words\n    words = word.split(\"_\")\n    \n    # Capitalize the first letter of each word and join them with underscore\n    camel_case_word = words[0]\n    for i in range(1, len(words)):\n        camel_case_word += words[i].capitalize()\n        \n    return camel_case_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    return ''.join(x.capitalize() if i > 0 else x.lower() for i, x in enumerate(word.split('_')))\n"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(word.title().split('_'))"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Convert the first character to lowercase\n    first_char = word[0].lower()\n    \n    # Convert the rest of the characters to uppercase\n    rest_of_chars = word[1:]\n    rest_of_chars = ''.join([char.upper() for char in rest_of_chars])\n    \n    # Combine the first character and rest of the characters\n    camel_case_word = first_char + rest_of_chars\n    \n    return camel_case_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Convert a snake case string to camel case string.\n    '''\n    return ''.join([word[:i] + word[i].upper() + word[i+1:] for i in range(len(word)-1) if word[i] == '_'])"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    # split the word into words using snake_case\n    words = word.split('_')\n    # convert the first word to uppercase and join the rest of the words together with camelCase\n    return words[0].capitalize() + ''.join(word[i].capitalize() for i in range(1, len(word)))"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == m:\n        return n\n    else:\n        return 2 * eulerian_num(n, m-1) - eulerian_num(n-1, m)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def eulerian_num(n, m): \n    \"\"\"\n    Write a function to find the Eulerian number a(n, m).\n    \"\"\"\n    # Initialize the matrix A and B\n    A = [[0 for j in range(m+1)] for i in range(n+1)]\n    B = [[0 for j in range(m+1)] for i in range(n+1)]\n\n    # Fill the matrix A with the values of A(n, m)\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if j <= i:\n                A[i][j] = i + 1\n            else:\n                A[i][j] = A[i-1][j] + 1\n\n    # Fill the matrix B with the values of B(n, m)\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if j <= i:\n                B[i][j] = 0\n            else:\n                B[i][j] = B[i-1][j]\n\n    # Calculate the Eulerian number a(n, m) by finding the maximum value in the matrix B\n    max_val = max(sum(row) for row in B)\n\n    return max_val"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # initialize variables\n    a = 1\n    b = 1\n    c = 1\n    x = 1\n    y = 1\n    \n    # calculate a(n, m)\n    while x <= n:\n        while y <= m:\n            if a % b == 0 and b % c == 0 and c % a == 0:\n                a = a * x * y // gcd(x, y)\n            else:\n                a = a * x * y\n            x += 1\n        y += 1\n        a = 1\n        b = 1\n        c = 1\n    \n    # return the value of a(n, m)\n    return a\n\ndef gcd(x, y):\n    if y == 0:\n        return x\n    else:\n        return gcd(y, x % y)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    a = 1\n    b = 1\n    for i in range(1, n + 1):\n        a, b = b, (a + b) * (m + i)\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    Write a function to find the Eulerian number a(n, m).\n\n    Parameters:\n    n - Integer, the number of rows in the matrix.\n    m - Integer, the number of columns in the matrix.\n\n    Returns:\n    Integer, the Eulerian number a(n, m).\n\n    \"\"\"\n    # create a list of lists to represent the matrix\n    matrix = [[0 for j in range(m)] for i in range(n)]\n\n    # fill the matrix with random integers between 1 and 5\n    for i in range(n):\n        for j in range(m):\n            matrix[i][j] = (1 + i) * (1 + j)\n\n    # check if the matrix is Eulerian\n    for i in range(n):\n        if matrix[i][0]!= 1 or matrix[i][-1]!= n * m:\n            return -1\n\n    # if the matrix is Eulerian, calculate the Eulerian number\n    a = 0\n    for i in range(n):\n        a += (matrix[i][0] - 1) * (matrix[i][-1] - 1)\n\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n\n    # To find the Eulerian number a(n, m) we need to use the following formula:\n    # a(n, m) = n! / (m! * (n - m)!)\n    # \n    # Let's break down the formula:\n    # n! = n * (n-1) * (n-2) *... * 2 * 1\n    # m! = m * (m-1) * (m-2) *... * 2 * 1\n    # a(n, m) = n * m\n    # \n    # Therefore, the Eulerian number a(n, m) = n * m.\n\n    # Here's the Python code to find the Eulerian number a(n, m) using the above formula:\n    numerator = 1\n    for i in range(1, n+1):\n        numerator *= i\n\n    denominator = 1\n    for i in range(m, n+1):\n        denominator *= i\n\n    return numerator / denominator"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    for i in range(1, n+1):\n        if m % i == 0:\n            a = n // i\n            b = m // i\n            break\n    else:\n        return 'There is no common factor for n and m.'\n    return a ** b"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Initialize a(1, 1) to 1\n    a = 1\n\n    # Iterate from 2 to n\n    for i in range(2, n + 1):\n        # Calculate a(i, j) by multiplying a(i-1, j) and a(i-1, j-1)\n        for j in range(1, m + 1):\n            a = (a * (i - 1)) % m\n\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def eulerian_num(n, m): \n    '''\n    This function returns the Eulerian number a(n, m).\n    \n    The Eulerian number is a(n, m) = 1 + 2 +... + n^m - 1\n    \n    We can compute this using a formula for binomial coefficients:\n    \n    a(n, m) = binomial(n, m) = n! / (m! * (n - m)!)\n    \n    This is because if we have a(n, m) terms, then we have n^m terms.\n    \n    The first term is always 1, so we don't need to include it in the sum.\n    The last term is (n^m - 1) / (m - 1), so we can compute this as follows:\n    \n    (n^m - 1) / (m - 1) = n * (n - 1) * (n - 2) *... * (1) / (1 * 2 *... * m)\n    = (n * (n - 1) * (n - 2) *... * (n - m + 1)) / (m * (m - 1) * (m - 2) *... * (m - n + 1))\n    \n    Therefore, we can compute the Eulerian number as follows:\n    \n    a(n, m) = n * (n - 1) * (n - 2) *... * (n - m + 1) / (m * (m - 1) * (m - 2) *... * (m - n + 1))\n    \n    This simplifies to:\n    \n    a(n, m) = n * sum(1, m, 1, n) / m\n    \n    Therefore, we can implement the function as follows:\n    '''\n    \n    # Compute the sum of m terms\n    sum_terms = sum([1] * m, 1)\n    \n    # Compute the denominator\n    denominator = 1\n    for i in range(m, 0, -1):\n        denominator *= i\n    \n    # Compute the numerator\n    numerator = n * sum_terms\n    \n    # Compute the Eulerian number\n    eulerian = numerator / denominator\n    \n    return eulerian"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n + eulerian_num(n-1, m)"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Loop through each sublist in the input list\n    for sublist in input_list:\n        # Use the sort() method to sort the sublist in ascending order\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Loop through each sublist in the input_list\n    for sublist in input_list:\n        # Use the sorted() function to sort the sublist in ascending order\n        sorted_sublist = sorted(sublist)\n        # Assign the sorted sublist back to the original sublist\n        input_list[input_list.index(sublist)] = sorted_sublist\n    # Return the modified input_list\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i, sublist in enumerate(input_list):\n        input_list[i] = sorted(sublist)\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for element in lst:\n        if element == True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count(lst):\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count(lst):\n    count = 0\n    for item in lst:\n        if type(item) == bool and item is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if type(i) == bool:\n            if i:\n                count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if isinstance(i, bool):\n            if i:\n                count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count(lst):\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count\n"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Append the list to the tuples\n    new_list = test_list + test_tup\n    return new_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Append the list to the tuple\n    test_tup = test_tup + test_list\n    \n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Check if the input is a list or tuple\n    if type(test_list) == list and type(test_tup) == tuple:\n        # Append the list to the tuple\n        test_tup = test_tup + test_list\n        # Return the modified tuple\n        return test_tup\n    else:\n        # If the input is not a valid type, raise an error\n        raise TypeError('Invalid input types.')"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    new_list = list(test_list)\n    new_list.extend(test_tup)\n    return tuple(new_list)"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n\n    Parameters:\n    test_list (list): The list to append to the given tuple.\n    test_tup (tuple): The tuple to which the given list should be appended.\n\n    Returns:\n    The appended tuple.\n    \"\"\"\n    test_tup += tuple(test_list)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Convert the lists to tuples\n    test_tup = tuple(test_tup)\n    \n    # Add the lists to the tuples\n    test_tup += tuple(test_list)\n    \n    # Return the modified tuples\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Append the given list to the given tuple\n    test_tup = tuple(test_list + test_tup)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Concatenate the lists and tuples\n    result = test_list + tuple(test_tup)\n    # Return the result\n    return result"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # create a new tuple with the elements of the list and the elements of the tuple\n    new_tup = (test_list[0], *test_list[1:], *test_tup)\n    return new_tup"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    # Merge the three lists using heapq.merge function\n    merged_list = heapq.merge(num1, num2, num3)\n    \n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    # Merge two lists into a single sorted list\n    merged = heapq.merge(heapq.merge(num1, num2), num3)\n    \n    # Sort the merged list\n    return sorted(merged)"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Merge the three lists into a single sorted list\n    sorted_list = sorted(num1 + num2 + num3)\n    \n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    \n    # Step 1: Merge the three sorted lists into one\n    merged_list = merge_lists(num1, num2, num3)\n    \n    # Step 2: Sort the merged list using heapify()\n    heapq.heapify(merged_list)\n    \n    # Step 3: Extract the elements from the heap and return them\n    return [heapq.heappop(merged_list) for i in range(len(merged_list))]\n\ndef merge_lists(num1, num2, num3):\n    '''\n    Merge three sorted lists into one.\n    '''\n    merged_list = []\n    i, j, k = 0, 0, 0\n    \n    # Compare the elements of the three lists and add them to merged_list\n    while i < len(num1) and j < len(num2) and k < len(num3):\n        if num1[i] < num2[j]:\n            if num3[k] < num1[i]:\n                merged_list.append(num1[i])\n                i += 1\n            else:\n                merged_list.append(num3[k])\n                k += 1\n        elif num1[i] > num2[j]:\n            if num3[k] < num2[j]:\n                merged_list.append(num2[j])\n                j += 1\n            else:\n                merged_list.append(num3[k])\n                k += 1\n        else:\n            if num3[k] < num1[i]:\n                merged_list.append(num1[i])\n                i += 1\n            else:\n                merged_list.append(num3[k])\n                k += 1\n    \n    # Append the remaining elements of the list\n    while i < len(num1):\n        merged_list.append(num1[i])\n        i += 1\n    while j < len(num2):\n        merged_list.append(num2[j])\n        j += 1\n    while k < len(num3):\n        merged_list.append(num3[k])\n        k += 1\n        \n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Combine the three lists into a single list\n    combined_list = num1 + num2 + num3\n\n    # Sort the combined list\n    sorted_list = sorted(combined_list)\n\n    # Return the sorted list\n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def merge_sorted_list(num1, num2, num3):\n    # create a list of all input numbers\n    nums = [num1, num2, num3]\n    \n    # initialize two empty lists for left and right halves of the input lists\n    left = []\n    right = []\n    \n    # iterate over the input lists\n    for num in nums:\n        # divide the number into two halves\n        half = len(num) // 2\n        # append the left half to the left list\n        left.extend(num[:half])\n        # append the right half to the right list\n        right.extend(num[half:])\n    \n    # initialize a new list to hold the merged result\n    merged = []\n    \n    # iterate over the left and right halves\n    while left and right:\n        # if the left number is smaller, add it to the merged list and remove it from the left list\n        if left[0] < right[0]:\n            merged.append(left[0])\n            left = left[1:]\n        # otherwise, add the right number to the merged list and remove it from the right list\n        else:\n            merged.append(right[0])\n            right = right[1:]\n    \n    # add any remaining numbers from the left or right lists to the merged list\n    merged.extend(left)\n    merged.extend(right)\n    \n    return merged"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    # Concatenate the three lists\n    merged_list = num1 + num2 + num3\n    \n    # Use heapq to sort the merged list\n    heapq.heapify(merged_list)\n    \n    # Return the sorted list\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Merge the three lists into a single list\n    merged_list = num1 + num2 + num3\n    \n    # Sort the merged list\n    heapq.heapify(merged_list)\n    \n    # Return the sorted list\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Merge three sorted lists into a single sorted list.\n    '''\n    result = []\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n\n    while num1 and num2 and num3:\n        if num1[0] < num2[0] or (num1[0] == num2[0] and num1[1] < num2[1]):\n            result.append(heapq.heappop(num1))\n        else:\n            result.append(heapq.heappop(num2))\n\n    result.extend(heapq.heappop(num1) + heapq.heappop(num2) + heapq.heappop(num3))\n\n    return result"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    # merge the three lists\n    sorted_list = heapq.merge(num1, num2, num3)\n    \n    return sorted_list"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # initialize count variable to 0\n    count = 0\n    # convert the input string to a list of binary digits\n    binary_digits = list(bin(int(s))[2:])\n    # iterate n times\n    for i in range(n):\n        # rotate the binary digits list by 1 position to the right\n        binary_digits.insert(0, binary_digits.pop())\n        # iterate through the list and count the number of odd digits\n        for digit in binary_digits:\n            if int(digit) % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_Equivalent(s, n):\n    if len(s) == 1:\n        return 0\n    else:\n        result = 0\n        for i in range(n):\n            s = s[::-1]\n        for i in range(len(s)):\n            if int(s[i]) % 2 == 1:\n                result += 1\n        return result"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_Equivalent(s, n):\n    if len(s) == 1:\n        return 0\n    else:\n        count = 0\n        temp = s[0]\n        for i in range(n):\n            if temp == '1':\n                count += 1\n            temp = s[i+1] if i+1 < len(s) else s[0]\n        return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n\n    # convert binary string to list\n    s_list = [int(i) for i in list(s)]\n\n    # rotate the list n number of times\n    for i in range(n):\n        s_list = s_list[1:] + [0]\n\n    # count the number of odd values in the rotated list\n    count = 0\n    for i in s_list:\n        if i % 2!= 0:\n            count += 1\n\n    return count\n"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_Equivalent(s, n):\n    # Convert the binary string to a list of bits\n    binary_list = [int(bit) for bit in s]\n    \n    # Initialize the count to 0\n    count = 0\n    \n    # Loop through the list n times\n    for i in range(n):\n        # Reverse the list of bits\n        binary_list.reverse()\n        \n        # Initialize the running count to 0\n        running_count = 0\n        \n        # Loop through the list of bits\n        for bit in binary_list:\n            # Add 1 to the running count if the bit is odd\n            if bit % 2!= 0:\n                running_count += 1\n        \n        # Add the running count to the overall count\n        count += running_count\n    \n    # Return the final count\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_Equivalent(s, n):\n    s = s[::-1]\n    count = 0\n    for i in range(n):\n        if s[i] == '1':\n            count += 1\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_Equivalent(s,n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count = 0\n    for i in range(n):\n        if int(s[:1], 2) % 2 == 1:\n            count += 1\n        s = s[1:] + s[0]\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # Convert binary string to a list of integers\n    s = list(map(int, s))\n\n    # Find the length of the list\n    n = len(s)\n\n    # Initialize the count variable\n    count = 0\n\n    # Perform n rotations\n    for i in range(n):\n        if s[i] % 2!= 0:\n            count += 1\n        # Rotate the list by 1\n        s.append(s.pop(0))\n\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_Equivalent(s, n):\n    # Convert the input string to binary\n    binary_str = bin(int(s, 10))[2:]\n    # Get the length of the binary string\n    length = len(binary_str)\n    # Initialize a variable to store the count of odd numbers\n    odd_count = 0\n    # Loop n times\n    for i in range(n):\n        # Reverse the binary string\n        rev_binary_str = binary_str[::-1]\n        # Initialize a variable to store the count of odd numbers in the reversed binary string\n        rev_odd_count = 0\n        # Loop through the reversed binary string\n        for j in range(length):\n            # Check if the current bit is odd\n            if rev_binary_str[j] == '1':\n                rev_odd_count += 1\n        # If the count of odd numbers in the reversed binary string is greater than or equal to the count of odd numbers in the original binary string, increment the count of odd numbers\n        if rev_odd_count >= odd_count:\n            odd_count += rev_odd_count\n    # Return the count of odd numbers with an odd value when rotating the binary string the given number of times\n    return odd_count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_Equivalent(s, n):\n    count = 0\n    for i in range(n):\n        s = ''.join(reversed(s))\n    for i in range(len(s)):\n        if s[i] % 2!= 0:\n            count += 1\n    return count"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = set()\n\n    for sublist in nestedlist:\n        for element in sublist:\n            if element not in common_elements:\n                common_elements.add(element)\n\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    if len(nestedlist) == 1:\n        return nestedlist[0]\n    else:\n        common = []\n        for i in nestedlist:\n            if i in common:\n                common.remove(i)\n            else:\n                common.append(i)\n        return common_in_nested_lists(common)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Initialize an empty set to store common elements\n    common_set = set()\n\n    # Loop through each nested list in the main list\n    for lst in nestedlist:\n        # Loop through each element in the nested list\n        for elem in lst:\n            # If the element is not already in the set, add it\n            if elem not in common_set:\n                common_set.add(elem)\n\n    # Return the common set as a list\n    return list(common_set)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    common_elements = set()\n    for sublist in nestedlist:\n        for element in sublist:\n            common_elements.add(element)\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n\n    # Helper function to check if two lists have common elements\n    def common_elements(list1, list2):\n        return list(set(list1) & set(list2))\n\n    # Initialize an empty list to store the common elements\n    common = []\n\n    # Iterate over each sublist in the nested list\n    for sublist in nestedlist:\n        # Check if the sublist has any elements\n        if sublist:\n            # Check if there are any common elements in the sublist\n            if common_elements(sublist, common):\n                # Add the common elements to the common list\n                common.extend(common_elements(sublist, common))\n\n    # Return the common list\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Create an empty set to store the common elements\n    common = set()\n    # Loop through the nested lists\n    for sublist in nestedlist:\n        # Loop through the sublist and add the common elements to the set\n        common.update(set(sublist))\n    # Convert the set to a list and return it\n    return list(common)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = set()\n    for sublist in nestedlist:\n        common_elements = common_elements.intersection(set(sublist))\n    return list(common_elements)\n"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n\n    # Initialize a set to store the unique elements of the first list\n    unique_elements = set(nestedlist[0])\n\n    # Loop through the rest of the lists\n    for i in range(1, len(nestedlist)):\n        # Convert the current list to set to remove duplicates\n        list_set = set(nestedlist[i])\n        # Find the intersection of the two sets\n        intersection = list_set.intersection(unique_elements)\n        # Add the common elements to the set of unique elements\n        unique_elements.update(intersection)\n\n    # Convert the set back to a list and return it\n    return list(unique_elements)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_list = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            for k in range(len(common_list)):\n                if nestedlist[i][j] == common_list[k]:\n                    break\n            else:\n                common_list.append(nestedlist[i][j])\n    return common_list"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(i+1, len(nestedlist)):\n            common = set(nestedlist[i]) & set(nestedlist[j])\n            if common:\n                common_elements.append(list(common))\n    return common_elements"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n\n    Args:\n        text (str): The string to check for integer value.\n\n    Returns:\n        bool: True if the string represents an integer, False otherwise.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in range(len(list1)):\n        if not list1[i]:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if len(list1) == 0:\n        return True\n    for i in list1:\n        if not i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if len(i)!= 0:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n\n    for item in list1:\n        if item!= {}:\n            return False\n\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if not i:\n            return True\n    return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if len(i) > 0:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if len(i)!= 0:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dictionary in list1:\n        if dictionary:\n            return False\n    return True"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Use a loop to sum all the elements of the tuple\n    total = 0\n    for num in nums:\n        total += num\n    \n    # Return the total sum as an integer\n    return int(total)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    This function takes a tuple of positive integers and returns the sum of the integers.\n    '''\n    sum = 0\n    for num in nums:\n        sum += num\n    return sum"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    total = 0\n    for num in nums:\n        total += num\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Convert the tuple to a list\n    nums_list = list(nums)\n    # Initialize the sum variable to 0\n    sum_of_nums = 0\n    # Iterate through the list of numbers\n    for num in nums_list:\n        # Add each number to the sum variable\n        sum_of_nums += num\n    # Return the sum of all the numbers\n    return sum_of_nums"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result += num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    # Convert the tuple to a list\n    nums_list = list(nums)\n    # Initialize the sum of the list elements as 0\n    total = 0\n    # Iterate over each element in the list and add it to the total\n    for num in nums_list:\n        total += num\n    # Return the total as the final result\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Initialize the sum variable with the first element of the tuple\n    sum = nums[0]\n\n    # Iterate through the tuple and add each element to the sum variable\n    for num in nums:\n        sum += num\n\n    # Return the final sum\n    return sum"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    total = 0\n    for num in nums:\n        total = total * 10 + num\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Convert the tuple to a list\n    nums = list(nums)\n    # Initialize the variable to store the sum\n    total = 0\n    # Loop through the list and add each element to the total\n    for num in nums:\n        total += num\n    # Return the total as an integer\n    return int(total)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # initialize the sum variable to 0\n    total = 0\n    \n    # iterate over the tuple using a for loop\n    for num in nums:\n        # check if the number is a positive integer\n        if num > 0:\n            # add the number to the total\n            total += num\n    \n    # return the total sum\n    return total"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for row in test_list:\n        for element in row:\n            if isinstance(element, int) or isinstance(element, float):\n                continue\n            elif isinstance(element, str):\n                try:\n                    element = float(element)\n                except ValueError:\n                    pass\n            test_list[row.index(row[0])][test_list[row.index(row[0])].index(element)] = element\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], (int, float)):\n                test_list[i][j] = float(test_list[i][j])"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    result = []\n    for sublist in test_list:\n        for element in sublist:\n            if isinstance(element, (int, float)):\n                result.append(element)\n            elif isinstance(element, str):\n                try:\n                    float(element)\n                    result.append(float(element))\n                except ValueError:\n                    result.append(None)\n            else:\n                result.append(None)\n    return result"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    new_list = []\n    for sublist in test_list:\n        for element in sublist:\n            try:\n                new_element = float(element)\n                new_list.append(new_element)\n            except ValueError:\n                pass #Ignore non-convertible elements\n    return new_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    result = []\n    for item in test_list:\n        try:\n            result.append(float(item))\n        except ValueError:\n            pass\n    return result"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i, row in enumerate(test_list):\n        for j, element in enumerate(row):\n            try:\n                float(element)\n                test_list[i][j] = float(element)\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for sub_list in test_list:\n        for element in sub_list:\n            try:\n                float(element)\n            except ValueError:\n                pass\n            else:\n                sub_list[test_list.index(sub_list)] = float(element)"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_list(string):\n    # split the string on whitespace\n    words = string.split()\n    # convert each word to a list of characters\n    words = [list(word) for word in words]\n    return words"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_list(string):\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    n = len(arr)\n    for i in range(n-1):\n        if arr[i] == arr[i+1]:\n            return arr[i]\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    # initialize a dictionary to store the indices of the elements that appear only once\n    count = {}\n\n    # iterate over the array and count the number of occurrences of each element\n    for i in range(len(arr)):\n        if arr[i] in count:\n            count[arr[i]] += 1\n        else:\n            count[arr[i]] = 1\n\n    # iterate over the dictionary and return the key that appears only once\n    for key, value in count.items():\n        if value == 1:\n            return key"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Initialize the count variable to 0\n    count = 0\n    \n    # Iterate through the array\n    for i in range(len(arr)):\n        # If the element at the current index is not equal to the next element, increment the count\n        if arr[i]!= arr[i+1]:\n            count += 1\n        \n        # If we've gone through the entire array and haven't found an element that appears only once, return None\n        if count == len(arr):\n            return None\n    \n    # If we've made it this far, return the element that appears only once\n    return arr[count]"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    for i in range(len(arr)):\n        if i == 0 or arr[i]!= arr[i-1]:\n            if i == len(arr)-1 or arr[i+1]!= arr[i]:\n                return arr[i]"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    for i in range(len(arr)):\n        if arr[i]!= arr[i+1]:\n            return arr[i]\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def search(arr):\n    # Initialize a dictionary to store the count of each element in the array\n    count = {}\n    for num in arr:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n\n    # Iterate through the dictionary and find the element that appears only once\n    for key, value in count.items():\n        if value == 1:\n            return key"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    count = {}\n    for i in arr:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n    for i in arr:\n        if count[i] == 1:\n            return i"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def search(arr):\n    if len(arr) == 1:\n        return arr[0]\n    if arr[0] == arr[1]:\n        return search(arr[2:])\n    else:\n        return search(arr[1:])"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    \n    for i in range(len(arr)):\n        if arr[i] == arr[i+1]:\n            return arr[i]"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    for i in range(n):\n        if i > 0 and arr[i] == arr[i-1]:\n            continue\n        else:\n            for j in range(i+1, n):\n                if arr[j] == arr[i]:\n                    return arr[i]"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = -1\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i] * list1[j])\n            max_product = max(max_product, product)\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = -float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n\n    # initialize variables\n    max_product = 0\n    max_product_tuple = []\n\n    # loop through the list of tuples\n    for i in range(len(list1)):\n        # loop through the remaining tuples in the list\n        for j in range(i+1, len(list1)):\n            # calculate the absolute difference between the numbers in each pair of tuples\n            diff = abs(list1[i][0]-list1[j][0]) + abs(list1[i][1]-list1[j][1])\n            # update the maximum absolute product if the new difference is greater\n            if diff > max_product:\n                max_product = diff\n                # create a list of tuples containing the indices of the numbers in each pair\n                max_product_tuple = [(i,j), (j,i)]\n\n    # return the maximum absolute product and the indices of the numbers in each pair of tuples\n    return max_product, max_product_tuple"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n\n    max_abs_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n            max_abs_product = max(max_abs_product, product)\n\n    return max_abs_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    This function takes a list of tuples as input and returns the maximum absolute product between pairs of numbers\n    in those tuples.\n    \"\"\"\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n    max_product = -1e9\n    for i in range(len(list1)):\n        for j in range(i + 1, len(list1)):\n            product = max(abs(list1[i][0] * list1[j][1]), abs(list1[i][1] * list1[j][0]))\n            max_product = max(max_product, product)\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            temp = abs(list1[i][0] * list1[j][1])\n            if temp > max_product:\n                max_product = temp\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    # initialize variables to store the maximum absolute product and the maximum product\n    max_abs_prod = float('-inf')\n    max_prod = float('-inf')\n    \n    # iterate through the list of tuples\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # find the absolute difference between the numbers in the pair\n            diff = abs(list1[i][0] - list1[j][0]) + abs(list1[i][1] - list1[j][1])\n            \n            # update the maximum absolute product if the absolute difference is greater\n            if diff > max_abs_prod:\n                max_abs_prod = diff\n            \n            # update the maximum product if the product of the numbers in the pair is greater\n            prod = list1[i][0] * list1[j][0] + list1[i][1] * list1[j][1]\n            if prod > max_prod:\n                max_prod = prod\n    \n    # return the maximum absolute product\n    return max_abs_prod"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_amicable_number(n):\n    '''\n    Checks if a number is an amicable number.\n    '''\n    sum_divisors = sum([i for i in range(1, n+1) if n % i == 0])\n    return sum_divisors == n\n\ndef sum_amicable_numbers(limit):\n    '''\n    Sums all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = [i for i in range(1, limit+1) if is_amicable_number(i)]\n    return sum(amicable_numbers)\n\ndef main():\n    limit = int(input(\"Enter a number to find the sum of amicable numbers: \"))\n    result = sum_amicable_numbers(limit)\n    print(\"The sum of amicable numbers from 1 to\", limit, \"is:\", result)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for num in range(1, limit+1):\n        if num == sum_of_proper_divisors(num):\n            amicable_numbers.append(num)\n    return sum(amicable_numbers)\n\ndef sum_of_proper_divisors(num):\n    '''\n    Write a function to calculate the sum of all proper divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, int(num**0.5)+1):\n        if num % i == 0:\n            divisors.append(i)\n            if i!= num // i:\n                divisors.append(num // i)\n    return sum(divisors)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_amicable(n):\n    \"\"\"\n    Returns True if n is an amicable number, False otherwise.\n    \"\"\"\n    s = sum(divisors(n))\n    return s == n and n!= s\n\ndef divisors(n):\n    \"\"\"\n    Returns a list of all positive integers that divide n, including n itself.\n    \"\"\"\n    divs = []\n    d = 1\n    while d*d <= n:\n        if n % d:\n            d += 1\n        else:\n            n //= d\n            divs.append(d)\n    if n > 1:\n        divs.append(n)\n    return divs\n\ndef amicable_numbers_sum(limit):\n    \"\"\"\n    Returns the sum of all amicable numbers from 1 to limit.\n    \"\"\"\n    amicable_numbers = []\n    for i in range(1, limit+1):\n        if is_amicable(i):\n            amicable_numbers.append(i)\n    return sum(amicable_numbers)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n\n    # Function to check if a number is amicable or not\n    def is_amicable(num):\n        if num == 1:\n            return False\n\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n\n        return True\n\n    # Initialize sum variable to 0\n    amicable_sum = 0\n\n    # Iterate from 1 to limit\n    for num in range(1, limit + 1):\n        # Check if num is amicable\n        if is_amicable(num):\n            # Add num to amicable_sum if it's amicable\n            amicable_sum += num\n\n    return amicable_sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for i in range(1, limit+1):\n        if i == sum_of_proper_divisors(i):\n            amicable_numbers.append(i)\n    return sum(amicable_numbers)\n\ndef sum_of_proper_divisors(n):\n    '''\n    Write a function to sum of proper divisors of a specified number.\n    '''\n    divisors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_amicable_numbers(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    amicable_numbers = []\n    for i in range(1, limit + 1):\n        if is_amicable(i):\n            amicable_numbers.append(i)\n    return sum(amicable_numbers)\n\n\ndef is_amicable(n):\n    \"\"\"\n    Check if a number is amicable or not.\n    \"\"\"\n    if n < 2:\n        return False\n    sum_of_squares = 0\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            sum_of_squares += i**2 + n**2\n    return sum_of_squares == n**2\n"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_sum = 0\n    for num in range(1, limit + 1):\n        if num!= 1:\n            if num == sum_of_its_divisors(num):\n                amicable_sum += num\n    return amicable_sum\n\ndef sum_of_its_divisors(num):\n    '''\n    Write a function to calculate the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, int(num**0.5) + 1):\n        if num % i == 0:\n            divisors.append(i)\n            if i!= num // i:\n                divisors.append(num // i)\n    return sum(divisors)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_amicable(num):\n    '''\n    Check if a number is amicable.\n    '''\n    if num < 12:\n        return False\n    \n    divisors = [i for i in range(1, int(num**0.5)+1) if num % i == 0]\n    return len(divisors) == 2 and num!= sum(divisors)\n\ndef sum_amicable_numbers(limit):\n    '''\n    Sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = [num for num in range(1, limit+1) if is_amicable(num)]\n    return sum(amicable_numbers)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_amicable_numbers(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    # create a list to store amicable numbers\n    amicable = []\n    # iterate from 2 to the limit (exclusive)\n    for num in range(2, limit):\n        # check if the current number is amicable\n        if is_amicable(num):\n            # add the number to the list of amicable numbers\n            amicable.append(num)\n    # return the sum of all the amicable numbers\n    return sum(amicable)\n\ndef is_amicable(num):\n    \"\"\"\n    Check if a number is amicable.\n    \"\"\"\n    # check if the number is divisible by any number between 1 and the square root of the number\n    for i in range(1, int(num**0.5)+1):\n        if num % i == 0 and num/i!= i:\n            return False\n    return True"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for num in range(1, limit+1):\n        if num in amicable_numbers:\n            continue\n        is_amicable = True\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                is_amicable = False\n                break\n        if is_amicable:\n            amicable_numbers.append(num)\n    return sum(amicable_numbers)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    This function takes in two complex numbers a and b and returns their angle in degrees.\n    '''\n    angle = cmath.phase(a + b) * 180 / cmath.pi\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a + b * 1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a+b*1j)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(complex(a,b))\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return angle\n"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a + b*1j)\n    return angle\n"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a + b*1j)\n    angle = round(angle.real, 2)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a + b*1j)\n    return angle"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            if '0' in string[i:j] and '1' in string[i:j]:\n                diff = abs(string[i:j].count('0') - string[i:j].count('1'))\n                if diff > max_diff:\n                    max_diff = diff\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_length(string):\n    max_diff = 0\n    n = len(string)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if string[i] == '0' and string[j] == '1':\n                diff = abs(j-i)\n                if diff > max_diff:\n                    max_diff = diff\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count_0 = count_1 = 0\n    max_diff = 0\n    \n    for char in string: \n        if char == '0': \n            count_0 += 1\n            if count_1 > 0: \n                diff = count_1 - count_0\n                max_diff = max(max_diff, diff)\n        elif char == '1': \n            count_1 += 1\n            if count_0 > 0: \n                diff = count_0 - count_1\n                max_diff = max(max_diff, diff)\n    \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_length(string):\n    zero_count = 0\n    one_count = 0\n    max_diff = 0\n\n    for i in range(len(string)):\n        if string[i] == '0':\n            zero_count += 1\n        else:\n            one_count += 1\n\n        diff = abs(zero_count - one_count)\n        max_diff = max(max_diff, diff)\n\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    for i in range(len(string)):\n        count_0 = 0\n        count_1 = 0\n        for j in range(i, len(string)):\n            if string[j] == '0':\n                count_0 += 1\n            else:\n                count_1 += 1\n            diff = abs(count_0 - count_1)\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    n = len(string)\n    dp = [[0]*(n+1) for _ in range(n+1)]\n\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if string[i] == '1':\n                dp[i+1][j] = dp[i][j-1]\n            else:\n                dp[i+1][j] = max(dp[i][j], dp[i+1][j-1])\n\n    return dp[0][n]"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # Initialize the maximum difference to be 0\n    max_diff = 0\n    \n    # Loop through each sub-string of the string\n    for i in range(len(string)):\n        # Calculate the number of 0s and 1s in this sub-string\n        count_0s = string.count('0', i, len(string))\n        count_1s = string.count('1', i, len(string))\n        \n        # Calculate the difference between the number of 0s and 1s in this sub-string\n        diff = count_0s - count_1s\n        \n        # Update the maximum difference if this sub-string has a greater difference\n        if diff > max_diff:\n            max_diff = diff\n            \n    # Return the maximum difference\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    # Initialize variables\n    max_diff = 0\n    count_0 = 0\n    count_1 = 0\n    # Iterate over each character in the string\n    for char in string:\n        # If the character is a 0, increment the count of 0s\n        if char == '0':\n            count_0 += 1\n        # Otherwise, increment the count of 1s\n        else:\n            count_1 += 1\n        # Update the maximum difference\n        diff = abs(count_0 - count_1)\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_length(string):\n    # Initialize variables to keep track of the number of 0s and 1s\n    zero_count = 0\n    one_count = 0\n\n    # Loop through each character in the binary string\n    for char in string:\n        # If the character is a 0, increment the zero_count\n        if char == '0':\n            zero_count += 1\n        # If the character is a 1, increment the one_count\n        elif char == '1':\n            one_count += 1\n        # If the character is neither a 0 nor a 1, reset the zero_count and one_count to 0\n        else:\n            zero_count = 0\n            one_count = 0\n\n        # If the difference between the zero_count and one_count is greater than the current maximum difference, update the maximum difference\n        current_diff = abs(zero_count - one_count)\n        if current_diff > max_diff:\n            max_diff = current_diff\n\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_length(string):\n    max_diff = 0\n    count_zero = 0\n    count_one = 0\n    \n    for char in string:\n        if char == '0':\n            count_zero += 1\n        else:\n            count_one += 1\n            \n        diff = count_one - count_zero\n        max_diff = max(max_diff, diff)\n        \n    return max_diff"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_common_divisors(a, b):\n    \"\"\"\n    This function will find the sum of common divisors of two given numbers.\n    \"\"\"\n\n    # Initialize variables to store sum and common divisors\n    sum_cd = 0\n    common_divisors = []\n\n    # Loop through all numbers from 1 to a and b (inclusive)\n    for i in range(1, min(a, b) + 1):\n        # Check if i is a common divisor of a and b\n        if a % i == 0 and b % i == 0:\n            # If it is, add it to the sum and list of common divisors\n            sum_cd += i\n            common_divisors.append(i)\n\n    # Return the sum of common divisors\n    return sum_cd, common_divisors"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    common_divisors = []\n    for i in range(1, b + 1):\n        if a % i == 0 and b % i == 0:\n            common_divisors.append(i)\n    return sum(common_divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # find the greatest common divisor of a and b using Euclid's algorithm\n    def gcd(a, b):\n        if b == 0:\n            return a\n        else:\n            return gcd(b, a % b)\n\n    # find the common divisors of a and b using the formula for the sum of divisors\n    def common_divisors(a, b):\n        common_divisor_sum = 0\n        for i in range(1, min(a, b)+1):\n            if a % i == 0 and b % i == 0:\n                common_divisor_sum += i\n        return common_divisor_sum\n\n    # calculate the sum of common divisors of a and b\n    result = common_divisors(a, b) - gcd(a, b)\n\n    return result"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # Initialize variables for sum and count of common divisors\n    sum_cd = 0\n    count_cd = 0\n\n    # Loop through all numbers between 1 and the smaller number\n    for i in range(1, min(a, b) + 1):\n        # Check if i is a common divisor of both a and b\n        if a % i == 0 and b % i == 0:\n            # If it is, add i to the sum and increment the count\n            sum_cd += i\n            count_cd += 1\n\n    # Return the sum of common divisors\n    return sum_cd"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # Find the common divisor of a and b\n    divisor = find_common_divisor(a, b)\n\n    # Calculate the sum of divisors\n    sum_divisors = sum_divisors_of_common_divisor(a, b, divisor)\n\n    return sum_divisors\n\n\ndef find_common_divisor(a, b):\n    \"\"\"\n    Find the common divisor of two given numbers.\n    \"\"\"\n    # Check if a is greater than b\n    if a > b:\n        a, b = b, a\n\n    # Initialize the variables to keep track of the common divisor\n    divisor = 1\n    count = 0\n\n    # Iterate through the numbers from a to b\n    for i in range(a, b + 1):\n        # If i is a divisor of both a and b, add it to the divisor and increment the count\n        if i % a == 0 and i % b == 0:\n            divisor = i\n            count += 1\n\n    # Return the common divisor\n    return divisor\n\n\ndef sum_divisors_of_common_divisor(a, b, divisor):\n    \"\"\"\n    Calculate the sum of divisors of a and b that are divisors of the common divisor.\n    \"\"\"\n    # Initialize the sum of divisors\n    sum_divisors = 0\n\n    # Iterate through the numbers from a to b\n    for i in range(a, b + 1):\n        # If i is a divisor of both a and b and is not a divisor of the common divisor, add it to the sum of divisors\n        if i % a == 0 and i % b == 0 and i % divisor!= 0:\n            sum_divisors += i\n\n    return sum_divisors"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_common_divisors(a, b):\n    \"\"\"\n    Find the sum of the common divisors of two given numbers.\n\n    :param a: An integer.\n    :param b: An integer.\n    :return: An integer.\n    \"\"\"\n    common_divisors = []\n\n    # Find the GCD of the two numbers.\n    gcd = gcd(a, b)\n\n    # Iterate over all numbers from 1 to the GCD.\n    for i in range(1, gcd + 1):\n        # Check if i is a common divisor of a and b.\n        if i % a == 0 and i % b == 0:\n            common_divisors.append(i)\n\n    # Calculate the sum of the common divisors.\n    total_sum = sum(common_divisors)\n\n    return total_sum"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # Function to find the sum of common divisors of two numbers\n    def common_divisor(num1, num2):\n        divisors = []\n        for i in range(1, num1+1):\n            if (num1 % i == 0) and (num2 % i == 0):\n                divisors.append(i)\n        return sum(divisors)\n    \n    # Finding the sum of common divisors of two given numbers\n    result = common_divisor(a,b)\n    print(\"The sum of common divisors of\", a, \"and\", b, \"is\", result)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n\n    # Finding common divisors of a and b\n    divisors = [i for i in range(1, max(a, b)+1) if a % i == 0 or b % i == 0]\n\n    # Summing the common divisors\n    result = sum(divisors)\n\n    # Returning the sum of common divisors\n    return result"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_divisor(a, b):\n    '''\n    This function calculates the common divisor of two numbers a and b.\n    '''\n    while b:\n        a, b = b, a % b\n    return a\n\ndef sum_of_common_divisors(a, b):\n    '''\n    This function calculates the sum of common divisors of two numbers a and b.\n    '''\n    return sum(common_divisor(a, b), common_divisor(b, a))"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum(a,b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # List of common divisors\n    common = []\n    # Loop through all numbers from 1 to the smaller of the two numbers\n    for i in range(1, min(a,b)+1):\n        # Check if the number is a divisor of both numbers\n        if a % i == 0 and b % i == 0:\n            common.append(i)\n    # Find the sum of the common divisors\n    sum_common = sum(common)\n    return sum_common"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    for i in range(y):\n        result += x\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers.\n    \"\"\"\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    product = 0\n    while y!= 0:\n        if y & 1:\n            product += x\n        x <<= 1\n        y >>= 1\n    return product"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    for i in range(y):\n        result += x\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    while y!= 0:\n        carry = x & y\n        result = result + carry\n        x = x ^ y\n        y = carry << 1\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result\n\nprint(multiply_int(5, 3)) # Output: 15"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    while y!= 0:\n        if y & 1: # if y is odd\n            result += x # add x to result\n        x <<= 1 # shift x left by 1 bit\n        y >>= 1 # shift y right by 1 bit\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n    \"\"\"\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Given a list of words and an integer n, returns a list of words that are longer than n characters.\n    \"\"\"\n    long_words_list = []\n    for word in words:\n        if len(word) > n:\n            long_words_list.append(word)\n    return long_words_list"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def long_words(n, str):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n    \"\"\"\n    words = str.split() # split the string into words\n    long_words = [word for word in words if len(word) > n] # filter out words that are longer than n characters\n    return long_words # return the filtered list of words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    # Split the given string into a list of words\n    words = str.split()\n\n    # Create an empty list to store the words that are longer than n characters\n    long_words = []\n\n    # Iterate over each word in the list of words\n    for word in words:\n        # If the length of the word is greater than n characters, add it to the long_words list\n        if len(word) > n:\n            long_words.append(word)\n\n    # Return the long_words list\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n\n    # Split the string into words\n    words = str.split()\n\n    # Create an empty list to store the long words\n    long_words_list = []\n\n    # Loop through each word in the list\n    for word in words:\n        # Check if the length of the word is greater than n\n        if len(word) > n:\n            # Add the word to the long_words_list\n            long_words_list.append(word)\n\n    # Return the list of long words\n    return long_words_list"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n    \"\"\"\n    return [word for word in words if len(word) > n]"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Given a list of words, return a list of words that are longer than n characters.\n    \"\"\"\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def long_words(n, str):\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    # create a dictionary to store the row and column sums\n    sums = {}\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[i])):\n            # calculate the sum of the row and column\n            row_sum = sum(my_matrix[i][j:]) + sum(my_matrix[j][i:])\n            col_sum = sum(my_matrix[k][j] for k in range(len(my_matrix)))\n            # add the sums to a dictionary\n            sums[(i,j)] = row_sum + col_sum\n    # check if the sums match any row, column, or diagonal\n    for i in range(len(my_matrix)):\n        if any(sums[(i,j)] in my_matrix[i][j:] for j in range(len(my_matrix[i]))) or any(sums[(i,j)] in my_matrix[j][i:] for j in range(len(my_matrix))):\n            return False\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    # check that the matrix is a 3x3 square\n    if len(my_matrix)!= 3 or len(my_matrix[0])!= 3:\n        return False\n    \n    # calculate the sum of the rows and columns\n    row_sum = sum(my_matrix[i] for i in range(3))\n    col_sum = sum(my_matrix[j] for j in range(3))\n    \n    # check that the row and column sums are equal\n    if row_sum!= col_sum:\n        return False\n    \n    # calculate the sum of the diagonal and reverse diagonal\n    diagonal_sum = my_matrix[0][0] + my_matrix[1][1] + my_matrix[2][2]\n    reverse_diagonal_sum = my_matrix[2][0] + my_matrix[1][1] + my_matrix[0][2]\n    \n    # check that the diagonal and reverse diagonal sums are equal\n    if diagonal_sum!= reverse_diagonal_sum:\n        return False\n    \n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    \"\"\"\n    Write a function to calculate whether the matrix is a magic square.\n    \"\"\"\n    # Check if the matrix has the same number of rows and columns as the square root of the number of elements\n    if len(my_matrix)!= int(len(my_matrix)**0.5):\n        return False\n\n    # Check if the matrix is a magic square by checking the sum of each row and column\n    for i in range(len(my_matrix)):\n        row_sum = sum(my_matrix[i])\n        col_sum = sum([my_matrix[j][i] for j in range(len(my_matrix))])\n        if row_sum!= col_sum:\n            return False\n\n    # Check if the matrix is a magic square by checking the diagonal elements\n    diagonal_sum = sum(my_matrix[i][i] for i in range(len(my_matrix)))\n    if diagonal_sum!= len(my_matrix)**2:\n        return False\n\n    # If we make it this far, then the matrix is a magic square\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    \"\"\"\n    Write a function to calculate whether the matrix is a magic square.\n    \"\"\"\n\n    # Check if the matrix is square\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n\n    # Initialize the sum of the row and column sums\n    row_sum = 0\n    col_sum = 0\n\n    # Check if the matrix is a magic square\n    for i in range(len(my_matrix)):\n        row_sum += my_matrix[i][i]\n        col_sum += my_matrix[i][len(my_matrix[0]) - 1 - i]\n\n    # Check if the sum of the row and column sums is equal to the sum of the matrix\n    if row_sum == col_sum == sum(sum(row) for row in my_matrix):\n        return True\n\n    # If the matrix is not a magic square, return False\n    return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n\n    # Check if the matrix is a square matrix\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n\n    # Initialize variables to keep track of the row sums and column sums\n    row_sums = [0] * len(my_matrix)\n    col_sums = [0] * len(my_matrix[0])\n\n    # Loop through the matrix and calculate the row and column sums\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[0])):\n            row_sums[i] += my_matrix[i][j]\n            col_sums[j] += my_matrix[i][j]\n\n    # Check if the row and column sums match the first number in each row and column\n    for i in range(len(row_sums)):\n        if row_sums[i]!= my_matrix[i][0] or col_sums[i]!= my_matrix[0][i]:\n            return False\n\n    # Check if the row and column sums match the last number in each row and column\n    for i in range(len(my_matrix) - 1, -1, -1):\n        for j in range(len(my_matrix[0]) - 1, -1, -1):\n            if row_sums[i]!= my_matrix[i][j] or col_sums[j]!= my_matrix[0][j]:\n                return False\n\n    # If the matrix passes all the checks, return True\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    # Check if the matrix is a square matrix\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n\n    # Check if each row and each column contains the same values\n    for row in my_matrix:\n        if len(set(row))!= len(row):\n            return False\n\n    # Check if the matrix is a magic square\n    magic_sum = 0\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[0])):\n            magic_sum += my_matrix[i][j]\n            if magic_sum - (len(my_matrix) * len(my_matrix[0])) * (i+1) - (j+1) < 0:\n                return False\n            magic_sum -= my_matrix[i][j]\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    n = len(my_matrix)\n    # Check if the matrix is a square matrix\n    if n!= len(set(my_matrix)):\n        return False\n    # Check if the elements in each row are distinct\n    for i in range(n):\n        if len(set(my_matrix[i]))!= n:\n            return False\n    # Check if the elements in each column are distinct\n    for j in range(n):\n        col = [row[j] for row in my_matrix]\n        if len(set(col))!= n:\n            return False\n    # Check if the main diagonal is equal to the secondary diagonal\n    diag = [my_matrix[i][i] for i in range(n)]\n    if set(diag)!= set(diag[::-1]):\n        return False\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    # check if the matrix is a square matrix\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n\n    # check if all the rows, columns, and diagonals are magic squares\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[0])):\n            # check if the element at (i,j) is not equal to the sum of the row, column, and diagonal\n            if my_matrix[i][j]!= i + j + sum(my_matrix[:i] + [row for row in my_matrix[i+1:]]):\n                return False\n\n    # if we made it this far, the matrix is a magic square\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    # Define the magic square value\n    magic_square = 15\n\n    # Initialize a variable to store the number of rows and columns\n    num_rows = len(my_matrix)\n    num_cols = len(my_matrix[0])\n\n    # Initialize a variable to store the total sum of each row and column\n    row_sums = [0] * num_rows\n    col_sums = [0] * num_cols\n\n    # Loop over each element in the matrix\n    for i in range(num_rows):\n        for j in range(num_cols):\n            # Check if the current element is a magic square element\n            if my_matrix[i][j] == magic_square:\n                # Update the row and column sums\n                row_sums[i] += magic_square\n                col_sums[j] += magic_square\n\n    # Check if all the row and column sums add up to the magic square value\n    for sum in row_sums:\n        if sum!= magic_square:\n            return False\n    for sum in col_sums:\n        if sum!= magic_square:\n            return False\n\n    # Check if any element in the matrix is equal to the magic square value\n    for row in my_matrix:\n        for elem in row:\n            if elem == magic_square:\n                return False\n\n    # If all the checks pass, the matrix is a magic square\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # check if all elements in the matrix are distinct\n    distinct = True\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix)):\n            if my_matrix[i][j]!= j+1:\n                distinct = False\n                break\n        if not distinct:\n            break\n    \n    # check if the sum of the diagonal elements is equal to the sum of the non-diagonal elements\n    diagonal_sum = 0\n    for i in range(len(my_matrix)):\n        diagonal_sum += my_matrix[i][i]\n    for i in range(len(my_matrix)):\n        diagonal_sum -= my_matrix[i][len(my_matrix)-1-i]\n    if diagonal_sum!= 0:\n        return False\n    \n    # check if the product of the sum of the diagonal elements and the product of the non-diagonal elements is equal to the sum of the elements in the matrix\n    square_sum = sum([sum(row) for row in my_matrix])\n    sum_diagonal = 0\n    for i in range(len(my_matrix)):\n        sum_diagonal += my_matrix[i][i]\n    product_diagonal = sum_diagonal * len(my_matrix)\n    product_non_diagonal = 0\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix)):\n            if i!= j:\n                product_non_diagonal += my_matrix[i][j]\n    if square_sum == product_diagonal + product_non_diagonal:\n        return True\n    else:\n        return False"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    max_freq = 0\n    max_item = None\n\n    for num in nums:\n        freq_dict[num] += 1\n        if freq_dict[num] > max_freq:\n            max_freq = freq_dict[num]\n            max_item = num\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    counts = defaultdict(int)\n    for num in nums:\n        counts[num] += 1\n\n    max_num = None\n    max_count = 0\n    for num, count in counts.items():\n        if count > max_count:\n            max_num = num\n            max_count = count\n\n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Create a defaultdict to store the frequency of each item\n    freq_dict = defaultdict(int)\n\n    # Iterate through the list and update the frequency of each item in the defaultdict\n    for num in nums:\n        freq_dict[num] += 1\n\n    # Find the item with maximum frequency and return it\n    max_freq = 0\n    max_item = None\n    for item, freq in freq_dict.items():\n        if freq > max_freq:\n            max_freq = freq\n            max_item = item\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    max_freq = 0\n    max_item = None\n    \n    for num in nums:\n        freq[num] += 1\n        \n        if freq[num] > max_freq:\n            max_freq = freq[num]\n            max_item = num\n            \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    counts = defaultdict(int)\n    max_count = 0\n    max_item = None\n\n    for num in nums:\n        counts[num] += 1\n        if counts[num] > max_count:\n            max_count = counts[num]\n            max_item = num\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    max_freq = 0\n    max_item = None\n    for num in nums:\n        freq[num] += 1\n        if freq[num] > max_freq:\n            max_freq = freq[num]\n            max_item = num\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n\n    # Create a dictionary to store the frequency of each item\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n\n    # Find the item with maximum frequency\n    max_item = max(freq_dict, key=freq_dict.get)\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n\n    # Create a dictionary to store the count of each item in the list\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n\n    # Find the item with maximum frequency\n    max_freq = max(freq_dict.values())\n    max_item = None\n    for item, count in freq_dict.items():\n        if count == max_freq:\n            max_item = item\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    # create a defaultdict to store the frequency of each item\n    freq = defaultdict(int)\n\n    # iterate over the list of numbers\n    for num in nums:\n        # increment the frequency of the current item\n        freq[num] += 1\n\n    # find the item with maximum frequency\n    max_freq = max(freq.values())\n\n    # find all the items with the same maximum frequency\n    max_items = [num for num, f in freq.items() if f == max_freq]\n\n    # return the item with maximum frequency\n    return max_items[0]"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    \"\"\"\n    Write a function to find the item with maximum frequency in a given list.\n    \"\"\"\n    freq_dict = defaultdict(int)\n    max_freq = 0\n    max_item = None\n\n    # Iterate through the list and update the frequency dictionary and max frequency\n    for num in nums:\n        freq_dict[num] += 1\n        if freq_dict[num] > max_freq:\n            max_freq = freq_dict[num]\n            max_item = num\n\n    return max_item"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiouAEIOU'\n    new_str = ''\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] in vowels:\n            new_str += str1[i]\n    return new_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    new_str = ''\n    for char in str1:\n        if char not in vowels:\n            new_str += char\n    return new_str[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiouAEIOU'\n    vowel_pattern = re.compile('[aeiouAEIOU]')\n    reversed_str = vowel_pattern.sub('', str1)\n    reversed_str = reversed_str[::-1]\n    return reversed_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    result = []\n    for char in str1:\n        if char not in vowels:\n            result.append(char)\n    result.reverse()\n    return ''.join(result)"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] not in vowels:\n            result += str1[i]\n    return result"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    result = []\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] in vowels:\n            result.append(str1[i])\n        else:\n            result.append(str1[i])\n    return ''.join(result)"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    str1 = list(str1)\n    i = 0\n    j = len(str1) - 1\n    while i < j:\n        while i < j and str1[i] not in vowels:\n            i += 1\n        while i < j and str1[j] not in vowels:\n            j -= 1\n        str1[i], str1[j] = str1[j], str1[i]\n        i += 1\n        j -= 1\n    return ''.join(str1)"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    result = ''\n    for i in range(len(str1) - 1, -1, -1):\n        if str1[i] not in vowels:\n            result += str1[i]\n    return result"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    str2 = ''\n    for char in str1:\n        if char.lower() in vowels:\n            str2 = char + str2\n    return str2[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for char in str1:\n        if char.lower() not in vowels:\n            result = char + result\n    return result"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tup_string(tup):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # Check if the input is a tuple\n    if not isinstance(tup1, tuple):\n        raise TypeError(\"Input is not a tuple!\")\n    \n    # Convert the tuple to a string\n    string_tup = str(tup1)\n    \n    # Return the string\n    return string_tup"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    string = ''\n    for element in tup1:\n        string += str(element) + ', '\n    string = string[:-2]  # remove the last two characters (\", \")\n    return string"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # Convert the tuple to a string using join() method\n    return ','.join(str(x) for x in tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum\n"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(x for x in nums if x < 0)"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    sum_negative = 0\n    for num in nums:\n        if num < 0:\n            sum_negative += num\n    return sum_negative"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum([num for num in nums if num < 0])"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    return sum([num for num in nums if num < 0])"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def hexagonal_num(n): \n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    if n == 1: \n        return 1 \n    else: \n        return 6*n*(n-1) // 5 + 1 "
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    hex_num = (2*n*n - 1) // 2\n    return hex_num"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    return (2 * n - 1) ** 2"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # The first hexagonal number is 1\n    hexagonal = 1\n    # Loop through the range of numbers from 1 to n\n    for i in range(1, n+1):\n        # Square the current hexagon number\n        hexagon = hexagonal ** 2\n        # Add the hexagon number to the running total\n        total += hexagon\n        # Increment the hexagon number by 6 (to get the next hexagon)\n        hexagonal += 6\n    # Return the total of all hexagonal numbers up to n\n    return total"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    return 1 + 6 * n * n"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * ((3 * n) - 1) // 2"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # first hexagonal number is 1\n    if n == 1:\n        return 1\n    \n    # calculate the square root of n\n    sqrt_n = n ** 0.5\n    \n    # calculate the number of rows needed for n hexagonal numbers\n    rows = 1 + int(sqrt_n)\n    \n    # calculate the number of columns needed for n hexagonal numbers\n    cols = 2 * rows - 1\n    \n    # calculate the hexagonal number for each row and column\n    hex_num = rows + cols\n    \n    # return the nth hexagonal number\n    return hex_num"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # Initialize variables\n    current_num = 1\n    num = 1\n\n    # Loop until the desired number of hexagonal numbers is reached\n    while num <= n:\n        # Print the current hexagonal number\n        print(current_num)\n\n        # Move to the next hexagonal number\n        current_num += 2*num\n        num += 1"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # initializing variables\n    a = 1\n    b = 1\n    c = 0\n    # calculating the nth hexagonal number\n    for i in range(1, n+1):\n        c = (a**2 + b**2 + 3*c)/2\n        a = b\n        b = c\n    # returning the nth hexagonal number\n    return a"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = array('i', [0] * len(nums))\n    for num in nums:\n        if num == 0:\n            zero_count[nums.index(num)] += 1\n    non_zero_count = sum(zero_count)\n    ratio = non_zero_count / len(nums)\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = array('i', [0]*len(nums))\n    for num in nums:\n        if num == 0:\n            zero_count[nums.index(num)] += 1\n    \n    non_zero_count = sum(zero_count)\n    ratio = non_zero_count / len(nums)\n    \n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = array('i', [1 if x == 0 else 0 for x in nums])\n    zeros = sum(count[:])\n    nonzeros = sum(count[1:])\n    return zeros / nonzeros"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n\n    # convert the array to a list to count the number of zeroes\n    lst = list(nums)\n    zero_count = lst.count(0)\n\n    # calculate the total number of elements in the array\n    total_count = len(nums)\n\n    # calculate the ratio of zeroes to non-zeroes\n    zero_ratio = float(zero_count) / total_count\n\n    # return the ratio of zeroes to non-zeroes\n    return zero_ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # Convert the input array to a mutable array of integers\n    mutable_nums = array('i', nums)\n\n    # Initialize a variable to store the count of non-zeroes\n    count_non_zeroes = 0\n\n    # Iterate over each element in the mutable array\n    for i in range(len(mutable_nums)):\n        # Check if the element is zero\n        if mutable_nums[i] == 0:\n            # Increment the count of non-zeroes\n            count_non_zeroes += 1\n\n    # Calculate the ratio of non-zeroes to all elements in the array\n    non_zero_ratio = count_non_zeroes / len(mutable_nums)\n\n    return non_zero_ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = array('i', [0]*len(nums))\n    \n    for num in nums:\n        if num == 0:\n            zero_count[nums.index(num)] += 1\n    \n    zero_ratio = sum(zero_count)/len(nums)\n    return zero_ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # Use an array to store the count of non-zeroes and zeroes\n    arr = array('i', [0]*len(nums))\n    # Iterate through the array and update the counts\n    for num in nums:\n        if num == 0:\n            arr[0] += 1\n        else:\n            arr[1] += 1\n    # Calculate the ratio of zeroes to non-zeroes\n    ratio = arr[0] / arr[1]\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\n\ndef zero_count(nums):\n    # Convert the input array to a Python list\n    nums = list(nums)\n    # Initialize the count of zeroes and non-zeroes to 0\n    count_zero = 0\n    count_non_zero = 0\n    # Loop through the list and count the number of zeroes and non-zeroes\n    for num in nums:\n        if num == 0:\n            count_zero += 1\n        else:\n            count_non_zero += 1\n    # Calculate the ratio of zeroes to non-zeroes\n    ratio = count_zero / count_non_zero if count_non_zero!= 0 else 0\n    # Return the ratio as a float\n    return round(ratio, 3)"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n\n    # Count the number of zeroes and non-zeroes\n    zero_count = nums.count(0)\n    non_zero_count = len(nums) - zero_count\n\n    # Calculate the ratio\n    if non_zero_count == 0:\n        ratio = 0\n    else:\n        ratio = zero_count / non_zero_count\n\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # Initialize two arrays: one for non-zeroes, the other for zeroes\n    non_zeroes = array('i')\n    zeros = array('i')\n\n    # Iterate through the input array and add to the appropriate array\n    for num in nums:\n        if num!= 0:\n            non_zeroes.append(num)\n        else:\n            zeros.append(num)\n\n    # Calculate the ratio of non-zeroes to total numbers\n    ratio = non_zeroes.count(0) / len(nums)\n\n    # Return the ratio as a float\n    return ratio"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    # initialize a counter variable to keep track of the number of non-zero powers of 2\n    count = 0\n    # initialize a variable to keep track of the remainder of the division by 2\n    remainder = n\n\n    # loop until the remainder is 0\n    while remainder!= 0:\n        # check if the remainder is a power of 2\n        if remainder % 2 == 0:\n            # increment the count if the remainder is a power of 2\n            count += 1\n        # divide the remainder by 2 to remove the last bit\n        remainder = remainder // 2\n\n    # check if the count is a power of 2\n    if count == 0:\n        return False\n    elif count == 1:\n        return True\n    elif count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n    # check if the number is zero or one\n    if n == 0 or n == 1:\n        return True\n\n    # check if the number can be written as a sum of powers of 2\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            # check if the number can be written as a sum of powers of 2 up to the square root of n\n            if n % (2 * i) == 0:\n                return True\n            else:\n                # check if the number can be written as a sum of powers of 2 up to the square root of n and starting from the next power of 2\n                for j in range(i + i, int(n**0.5) + 1, i):\n                    if n % j == 0:\n                        return True\n    \n    # if the number cannot be written as a sum of powers of 2, return False\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Initialize variables to store power count and sum of powers\n    power_count = 0\n    sum_of_powers = 0\n    \n    # Loop through each power of 2 from 1 to n\n    while n > 0:\n        # If the current bit of n is 1, add it to the sum of powers\n        if n % 2 == 1:\n            sum_of_powers += 2 ** power_count\n        \n        # Update the power count\n        power_count += 1\n        \n        # Divide n by 2 to get the next bit of n\n        n = n // 2\n    \n    # If the sum of powers is equal to the given number, it can be represented as sum of powers of 2\n    if sum_of_powers == n:\n        print(f\"The given number {n} can be represented as sum of non-zero powers of 2.\")\n    else:\n        print(f\"The given number {n} cannot be represented as sum of non-zero powers of 2.\")"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n    # check if the number is zero\n    if n == 0:\n        return True\n\n    # check if the number is a power of 2\n    if n & (n-1) == 0:\n        return True\n\n    # check if the number is a sum of powers of 2\n    i = 1\n    while i <= n:\n        if n & i == i:\n            j = 1\n            while j <= i:\n                if i & (1<<j)!= 0:\n                    n -= i\n                j += 1\n            if n == 0:\n                return True\n        i *= 2\n\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # check if n is even or not\n    if n % 2 == 0: \n        return False\n\n    # check if the sum of the first and second powers of 2 is less than or equal to n\n    if 2**(int(log2(n))+1) <= n: \n        return True\n    else: \n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0: \n        return True \n    elif n % 2 == 0: \n        return is_Sum_Of_Powers_Of_Two(n//2) and (n//2!= 0)\n    else: \n        return is_Sum_Of_Powers_Of_Two((n-1)//2) and ((n-1)//2!= 0)"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    # Initialize a counter variable to count the number of powers of 2 in the number\n    count = 0\n\n    # Loop through all the bits of the number and check if each bit is 1\n    for i in range(31):\n        if n & (1 << i):\n            count += 1\n\n    # If the count of 1's is equal to the total number of bits in the number, then the number can be represented as sum of non-zero powers of 2\n    if count == 32:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return True\n    elif n == 1:\n        return True\n    elif n % 2 == 0:\n        return is_Sum_Of_Powers_Of_Two(n//2)\n    else:\n        if n == 3:\n            return True\n        elif n == 4:\n            return True\n        elif n == 5:\n            return True\n        elif n == 6:\n            return True\n        elif n == 7:\n            return True\n        elif n == 8:\n            return True\n        elif n == 9:\n            return True\n        elif n == 10:\n            return True\n        elif n == 11:\n            return True\n        elif n == 12:\n            return True\n        elif n == 13:\n            return True\n        elif n == 14:\n            return True\n        elif n == 15:\n            return True\n        elif n == 16:\n            return True\n        elif n == 17:\n            return True\n        elif n == 18:\n            return True\n        elif n == 19:\n            return True\n        elif n == 20:\n            return True\n        elif n == 21:\n            return True\n        elif n == 22:\n            return True\n        elif n == 23:\n            return True\n        elif n == 24:\n            return True\n        elif n == 25:\n            return True\n        elif n == 26:\n            return True\n        elif n == 27:\n            return True\n        elif n == 28:\n            return True\n        elif n == 29:\n            return True\n        elif n == 30:\n            return True\n        elif n == 31:\n            return True\n        elif n == 32:\n            return True\n        elif n == 33:\n            return True\n        elif n == 34:\n            return True\n        elif n == 35:\n            return True\n        elif n == 36:\n            return True\n        elif n == 37:\n            return True\n        elif n == 38:\n            return True\n        elif n == 39:\n            return True\n        elif n == 40:\n            return True\n        elif n == 41:\n            return True\n        elif n == 42:\n            return True\n        elif n == 43:\n            return True\n        elif n == 44:\n            return True\n        elif n == 45:\n            return True\n        elif n == 46:\n            return True\n        elif n == 47:\n            return True\n        elif n == 48:\n            return True\n        elif n == 49:\n            return True\n        elif n == 50:\n            return True\n        elif n == 51:\n            return True\n        elif n == 52:\n            return True\n        elif n == 53:\n            return True\n        elif n == 54:\n            return True\n        elif n == 55:\n            return True\n        elif n == 56:\n            return True\n        elif n == 57:\n            return True\n        elif n == 58:\n            return True\n        elif n == 59:\n            return True\n        elif n == 60:\n            return True\n        elif n == 61:\n            return True\n        elif n == 62:\n            return True\n        elif n == 63:\n            return True\n        elif n == 64:\n            return True\n        elif n == 65:\n            return True\n        elif n == 66:\n            return True\n        elif n == 67:\n            return True\n        elif n == 68:\n            return True\n        elif n == 69:\n            return True\n        elif n == 70:\n            return True\n        elif n == 71:\n            return True\n        elif n == 72:\n            return True\n        elif n == 73:\n            return True\n        elif n == 74:\n            return True\n        elif n == 75:\n            return True\n        elif n == 76:\n            return True\n        elif n == 77:\n            return True\n        elif n == 78:\n            return True\n        elif n == 79:\n            return True\n        elif n == 80:\n            return True\n        elif n == 81:\n            return True\n        elif n == 82:\n            return True\n        elif n == 83:\n            return True\n        elif n == 84:\n            return True\n        elif n == 85:\n            return True\n        elif n"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return True\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            if is_Sum_Of_Powers_Of_Two(n//i):\n                return True\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n    # Check if the number is odd or not\n    if n % 2 == 1:\n        return False\n    \n    # Initialize a variable to store the sum of powers of 2\n    power_sum = 0\n    \n    # Traverse from 2 to the square root of the given number\n    for i in range(2, int(n**0.5)+1):\n        # Check if the given number can be represented as sum of powers of 2\n        if n % i == 0:\n            # If yes, add the powers of 2 to the sum\n            power_sum += i\n            power_sum += n // i\n    \n    # If the sum of powers of 2 is less than the given number, then it is not possible to represent it as sum of powers of 2\n    if power_sum < n:\n        return False\n    \n    # If the sum of powers of 2 is equal to the given number, then it is possible to represent it as sum of powers of 2\n    else:\n        return True"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14159 * r"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r # using the formula pi*r\n    return circumference\n"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    pi = 3.14159 # approximation of pi\n    circumference = 2 * pi * r # calculate the circumference of the circle\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    # calculate the circumference of the circle\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    pi = 3.14\n    circumference = 2 * pi * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    \"\"\"\n    Write a function to find the circumference of a circle.\n    \"\"\"\n    return 2 * 3.14 * r"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    \"\"\"\n    Write a function to find the circumference of a circle.\n\n    Args:\n    r (float): The radius of the circle.\n\n    Returns:\n    float: The circumference of the circle.\n    \"\"\"\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for sublist in test_list:\n        flattened_list.extend(sublist)\n    return flattened_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    flattened = [num for sublist in test_list for num in sublist]\n    return set(flattened)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n    \"\"\"\n    flat_list = []\n    for sublist in test_list:\n        for item in sublist:\n            flat_list.append(item)\n    return set(flat_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for item in test_list:\n        if isinstance(item, list):\n            flattened_list.extend(item)\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    flat_list = []\n    for sublist in test_list:\n        flat_list.extend(sublist)\n    return set(flat_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = [item for sublist in test_list for item in sublist]\n    return set(flattened_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return set(sum(test_list, []))"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = [item for sublist in test_list for item in sublist]\n    return flattened_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    # Define an empty list to hold the numbers\n    result = []\n    # Loop through each list in the input list\n    for sublist in test_list:\n        # Loop through each element in the sublist and add it to the result list\n        for item in sublist:\n            result.append(item)\n    # Return the result list\n    return result"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = []\n    for sublist in test_list:\n        for item in sublist:\n            result.append(item)\n    return result"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    # Bubble sort\n    for i in range(n):\n        for j in range(n-i-1):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n    # The above bubble sort implementation has a time complexity of O(n^2), which is not optimal for large arrays.\n    # We can improve it by using the pancake sort algorithm.\n    # The idea is to start with a sorted array and then swap adjacent elements if they are not in the correct order.\n    # We repeat this process until the array is sorted in decreasing order.\n    # This algorithm has a time complexity of O(n^2) in the worst case, and O(n) in the best case.\n    # We can modify the algorithm to handle duplicate elements by keeping track of the last occurrence of each element.\n    # This will allow us to swap the adjacent elements only if they are in the same column.\n    # We can also modify the algorithm to handle negative elements by swapping adjacent elements with opposite signs.\n    # We can also modify the algorithm to handle floating point numbers by comparing the absolute values of the numbers.\n    # Finally, we can modify the algorithm to handle strings by converting them to integers first.\n    # We can also modify the algorithm to handle tuples by converting them to lists first.\n    # We can also modify the algorithm to handle any other type of data by comparing the elements directly.\n    # Overall, the pancake sort algorithm is a more efficient sorting algorithm for large arrays.\n    # It has a time complexity of O(n^2) in the worst case and O(n) in the best case.\n    for i in range(n-1, 0, -1):\n        # Find the maximum element in the current column\n        max_index = i\n        for j in range(i):\n            if nums[j] < nums[max_index]:\n                max_index = j\n        # Swap the maximum element with the first element of the current column\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n        # Reverse the subarray from 0 to i-1\n        nums[i:] = nums[i:][::-1]\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    \n    # Initialize the maximum index to the last element in the list\n    max_index = len(nums) - 1\n    \n    # While the maximum index is greater than 0\n    while max_index > 0:\n        # Find the index of the maximum element in the current sublist\n        max_index_in_sublist = 0\n        for i in range(1, max_index+1):\n            if nums[i] > nums[max_index_in_sublist]:\n                max_index_in_sublist = i\n        \n        # Swap the maximum element with the first element of the sublist\n        nums[max_index], nums[max_index_in_sublist] = nums[max_index_in_sublist], nums[max_index]\n        \n        # Decrement the maximum index to find the next largest element\n        max_index -= 1\n    \n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    # reverse the list\n    nums = nums[::-1]\n    # create a list of numbers from 1 to n\n    pancakes = [i for i in range(1, n+1)]\n    # iterate through the list of pancakes\n    for i in range(n-1):\n        # find the index of the smallest pancake in the list\n        min_index = pancakes.index(min(pancakes))\n        # swap the smallest pancake with the current pancake\n        nums[i], nums[min_index] = nums[min_index], nums[i]\n        # remove the smallest pancake from the list\n        pancakes.pop(min_index)\n    # return the sorted list\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Step 1: Calculate the maximum size of a pancake\n    max_size = len(nums)\n    for i in range(1, len(nums)):\n        if nums[i] < nums[max_size - i]:\n            max_size = i\n\n    # Step 2: Iterate through the list and perform pancake sorting\n    for i in range(len(nums) - 1, 0, -1):\n        # If the i-th element is greater than the maximum element, swap them\n        if nums[i] > nums[max_size]:\n            nums[i], nums[max_size] = nums[max_size], nums[i]\n            max_size -= 1\n"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Step 1: Build the remaining array\n    remaining = [nums[i] for i in range(len(nums))]\n\n    # Step 2: Sort the remaining array\n    while True:\n        # Find the largest element in the remaining array\n        max_index = 0\n        for i in range(1, len(remaining)):\n            if remaining[i] > remaining[max_index]:\n                max_index = i\n\n        # If there are no more elements to sort, we're done\n        if max_index == 0:\n            break\n\n        # Swap the elements at the two largest indices\n        remaining[max_index], remaining[0] = remaining[0], remaining[max_index]\n\n        # Reverse the part of the remaining array that was swapped\n        if max_index > 1:\n            remaining[:max_index] = remaining[:max_index][::-1]\n            remaining[max_index:] = remaining[max_index:][::-1]\n\n    # Step 3: Return the sorted array\n    return remaining"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n-1, 0, -1):\n        # Find the largest element in the first i elements\n        max_idx = i-1\n        for j in range(i):\n            if nums[j] > nums[max_idx]:\n                max_idx = j\n        # Swap the largest element with the first element\n        nums[i-1], nums[max_idx] = nums[max_idx], nums[i-1]\n        # Print the sorted array\n        print(nums)"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    # initialize variables\n    n = len(nums)\n    # create a copy of the list to avoid modifying the original\n    nums_copy = nums[:]\n\n    # loop through the list from largest to smallest element\n    for i in range(n, 0, -1):\n        # find the largest element in the range of size i\n        max_idx = 0\n        for j in range(i):\n            if nums_copy[j] > nums_copy[max_idx]:\n                max_idx = j\n        # swap the largest element with the i-th element\n        nums_copy[i - 1], nums_copy[max_idx] = nums_copy[max_idx], nums_copy[i - 1]\n\n    return nums_copy"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # initialize the length of the list\n    n = len(nums)\n    # loop until the length of the list is 1\n    while n > 1:\n        # loop through the list until the length of the list is 1\n        for i in range(n-1):\n            # swap the elements at index i and i+1 if they are in the wrong order\n            if nums[i] > nums[i+1]:\n                nums[i], nums[i+1] = nums[i+1], nums[i]\n        # decrement the length of the list\n        n -= 1\n    # return the sorted list\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n-1, 0, -1):\n        for j in range(i):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def sort_by_pancake(arr, k):\n        # Start with the largest element\n        largest = arr[k]\n        i = k - 1\n        while i >= 0:\n            # Move the smallest element to the end\n            arr[i + 1] = arr[i]\n            i -= 1\n        arr[0] = largest\n\n        # Now perform the same for the remaining elements\n        for i in range(k - 1, 0, -1):\n            largest = arr[i]\n            j = i - 1\n            while j >= 0:\n                # Move the largest element to the end\n                arr[j + 1] = arr[j]\n                j -= 1\n            arr[0] = largest\n\n        return arr\n\n    # Sort the list in ascending order\n    nums.sort()\n\n    # Perform the pancake sort algorithm\n    for i in range(len(nums)):\n        if nums[i]!= nums[-(i + 1)]:\n            nums = sort_by_pancake(nums, len(nums) - i)\n            break\n\n    return nums"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Count number items that are identical in the same position of three given lists.\n\n    Args:\n    - list1 (list): List 1\n    - list2 (list): List 2\n    - list3 (list): List 3\n\n    Returns:\n    - int: Number of items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            if list1[i] == list3[i]:\n                count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n\n    count = 0 \n    for i in Input: \n        if isinstance(i, list): \n            count += 1 \n\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lists(Input):\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lists(Input):\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr):\n    \"\"\"\n    Find the maximum absolute difference between any two elements in a given array.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr):\n    \"\"\"\n    Write a python function to find the maximum difference between any two elements in a given array.\n    \"\"\"\n    if len(arr) <= 1:\n        return 0\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    This function takes an array as input and finds the maximum absolute difference between any two elements in the array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr):\n    \"\"\"\n    Write a python function to find the maximum difference between any two elements in a given array.\n    \"\"\"\n\n    max_diff = 0\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    \n    # Loop through each element in the array\n    for i in range(len(arr)):\n        # Loop through the remaining elements in the array\n        for j in range(i+1, len(arr)):\n            # Calculate the absolute difference between the two elements\n            diff = abs(arr[i] - arr[j])\n            \n            # Update the maximum difference if the current difference is greater\n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr):\n    max_diff = float('-inf')\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            max_diff = max(max_diff, diff)\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr):\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            max_diff = max(max_diff, diff)\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            diff = abs(arr[j] - arr[i])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr):\n    \"\"\"\n    Find the maximum absolute difference between any two elements in an array.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    \n    # Check if a, b, and n are integers\n    if not all(isinstance(i, int) for i in (a, b, n)):\n        return None\n    \n    # Check if a and b are both non-zero\n    if a == 0 or b == 0:\n        return None\n    \n    # Initialize variables to keep track of current value of x and y\n    x = 0\n    y = 0\n    \n    # Initialize counter to keep track of number of iterations\n    count = 0\n    \n    # Initialize the limit of iterations\n    limit = int(n**0.5)\n    \n    # Iterate until x and y have a valid value\n    while count < limit:\n        # Calculate the new value of x\n        x = (b*x**2) + a\n        \n        # Calculate the new value of y\n        y = (b*y**2) - n\n        \n        # Increment the counter\n        count += 1\n        \n        # Check if x and y have a valid value\n        if x!= 0 and y!= 0:\n            # Return the tuple (x, y) if they satisfy the equation\n            return (x, y)\n    \n    # If no valid values of x and y are found after a certain number of iterations, return None\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n\n    # check if ax + by = n for all positive integers x and y\n    for x in range(1, b // a + 1):\n        y = b // a - x\n        if a * x + b * y == n:\n            return (x, y)\n\n    # no solution exists\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # check if n can be expressed as a multiple of a and b\n    if n % a!= 0 or n % b!= 0:\n        return None\n    \n    # find the coefficients of the form ax + by\n    x = n / b\n    y = -n / a\n    \n    # check if the solution satisfies the given conditions\n    if x % a == 0 and x % b == 0:\n        return (int(x), int(y))\n    elif x % a!= 0 and x % b == 0:\n        return (int(x), int(y))\n    elif x % a == 0 and x % b!= 0:\n        return (int(x), int(y))\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if a*i + b*j == n:\n                return (i, j)\n\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    \"\"\"\n    for i in range(1, n//2+1):\n        x = i\n        y = n - x\n        if a*x + b*y == n:\n            return (x, y)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(-1000, 1001):\n        for y in range(-1000, 1001):\n            if x*a + y*b == n:\n                return (x, y)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Check if a and b are zero\n    if a == 0 or b == 0:\n        return None\n    \n    # Check if n is equal to 0\n    if n == 0:\n        return (0, 0)\n    \n    # Calculate d and y (b in this case)\n    d = b ** 2 - 4 * a * n\n    \n    # Check if there is a solution\n    if d < 0:\n        return None\n    \n    # Calculate x and y (x and y in this case)\n    x = (-b + d ** 0.5) / (2 * a)\n    y = (-b - d ** 0.5) / (2 * a)\n    \n    # Return the solution as a tuple\n    return (int(x), int(y))"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n//b+1):\n        if (a*x + b*n//b - n) % b == 0:\n            return (x, n//b)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Check if there exists a solution by checking if the first term is equal to n/a and the second term is equal to n/b\n    if n % a == 0 and n % b == 0:\n        x = n // a\n        y = n // b\n        return (x, y)\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    if b == 0:  # This is a linear equation in one variable\n        x = -n / a\n        return (x,)\n    else:\n        # This is a quadratic equation\n        discriminant = b**2 - 4*a*n\n        if discriminant < 0:  # There is no real solution to this equation\n            return None\n        elif discriminant == 0:  # There is one real solution to this equation\n            x = -b / (2*a)\n            return (x,)\n        else:  # There are two real solutions to this equation\n            x1 = (-b + discriminant**0.5) / (2*a)\n            x2 = (-b - discriminant**0.5) / (2*a)\n            return (x1, x2)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # Set a new list to store the remaining elements\n    result = []\n    # Loop through the first list\n    for i in list1:\n        # If the element is not present in the second list, add it to the result list\n        if i not in list2:\n            result.append(i)\n    return result"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            list1.pop(i)\n            i -= 1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    # convert the two lists to sets to remove duplicates\n    set1 = set(list1)\n    set2 = set(list2)\n    # remove all elements present in set2 from set1\n    set1.difference_update(set2)\n    # convert set1 back to a list and return it\n    return list(set1)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # Create a set to store the elements present in the second list\n    list2_set = set(list2)\n    \n    # Iterate through the first list\n    for elem in list1:\n        # If the element is present in the second list, remove it from the list\n        if elem in list2_set:\n            list1.remove(elem)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    for item in list1:\n        if item in list2:\n            list1.remove(item)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list1:\n        if element in list2:\n            list1.remove(element)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # create a set of elements in list2 to check for presence in list1\n    set_list2 = set(list2)\n    # loop through list1 and remove any element that is present in list2\n    for i in range(len(list1)):\n        if list1[i] in set_list2:\n            list1.remove(list1[i])\n    # return the modified list1\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n\n    # Convert the lists to sets for faster set operations\n    list1 = set(list1)\n    list2 = set(list2)\n\n    # Remove the elements present in list2 from list1\n    list1 -= list2\n\n    # Convert the updated list1 back to a list and return it\n    return list(list1)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list2:\n        if i in list1:\n            list1.remove(i)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list1:\n        if element in list2:\n            list1.remove(element)"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    i = 0\n    while n - 2*i >= 0:\n        sum += n - 2*i\n        i += 1\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    total = 0\n    for i in range(n // 2):\n        total += (n - 2 * i)\n    return total"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    for i in range(n//2):\n        total += n - 2*i\n    return total"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum_series = 0\n    for i in range(n//2):\n        sum_series += n - 2*i\n    return sum_series"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n < 2:\n        return 0\n    sum_of_series = 0\n    i = 0\n    while i < n // 2:\n        sum_of_series += (n - 2 * i)\n        i += 1\n    return sum_of_series"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return sum((n - 2*i) for i in range(n // 2 + 1))"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum_ = 0\n    for i in range(n // 2):\n        sum_ += (n - 2*i)\n    return sum_"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    i = 0\n    while n - 2*i >= 0:\n        sum += n - 2*i\n        i += 1\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    # initialize a variable to store the sum\n    total = 0\n    # loop through each number from 0 to n // 2\n    for i in range(n // 2):\n        # add (n-2*i) to the total variable\n        total += n - 2 * i\n    # return the total\n    return total"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n//2):\n        sum += n - 2*i\n    return sum"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n\n    # calculate the semi-perimeter of the polygon\n    sp = 2 * s * tan(pi/l)\n\n    # calculate the area of the polygon using Heron's formula\n    area = sp * (s+2*l-2) / 6\n\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    # calculate the circumference of the polygon\n    circumference = 2*pi*s\n    # calculate the number of sides\n    num_sides = l\n    # calculate the area of each side\n    side_area = circumference/num_sides\n    # calculate the area of the polygon\n    area = 0.5*(side_area**2)*tan(pi/num_sides)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # calculate the area of the polygon using Heron's formula\n    # area = 0.5 * s * l * tan(pi / 3)\n    area = 0.5 * s * l * tan(pi/3)\n\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(1, l + 1):\n        area += s * tan(pi/l)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n\n    # Calculate the area using Heron's formula\n    area = (s * (s - l) * (s - l - tan(pi / l) * tan(pi / l))) ** 0.5\n\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Calculate the area of a regular polygon using Heron's formula\n    area = (s*(s-l)**0.5)*(l*(l-s)**0.5)\n    # Return the calculated area\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += s * tan(pi/l)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    #calculate the area of the polygon by using the formula:\n    #A = (1/2) * s * (sin(pi/l))\n    #where's' is the length of one side of the polygon, 'l' is the number of sides, and pi is the mathematical constant pi.\n    area = (0.5 * s * (tan(pi/l)))\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Calculate the value of the sine of the first angle\n    sin_first_angle = sin(pi/l)\n    # Calculate the value of the sine of the last angle\n    sin_last_angle = sin((2*pi)/l)\n    # Calculate the area of the polygon using the formula for area of a regular polygon\n    area = s * (sin_last_angle - sin_first_angle) / 2\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n\n    # Calculate the semi-perimeter and the area of the polygon using formula:\n    # Area = 1/2 * s * tan(pi/n) where n is the number of sides of the polygon\n    # s is the length of one side and tan(pi/n) is the tangent of the angle between x axis and nth side of the polygon\n    \n    semi_perimeter = 2*s\n    area = semi_perimeter * tan(pi/l)\n    \n    return area"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Calculate the sum of the divisors of n\n    div_sum = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            div_sum += i + n // i\n    return div_sum == n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    \n    # Calculate the sum of divisors of n \n    sum_divisors = sum(range(1, int(math.sqrt(n))+1))\n    \n    # Calculate the sum of divisors of n-1 \n    sum_divisors_n1 = sum(range(1, n))\n    \n    # Check if the sum of divisors of n and n-1 are same \n    if sum_divisors == sum_divisors_n1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    \n    # Calculate the sum of the divisors of n\n    divs = []\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            divs.append(i)\n            if i!= n//i:\n                divs.append(n//i)\n    \n    # Check if the sum of the divisors is equal to n\n    if sum(divs) == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Calculate the sum of divisors of n \n    div_sum = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            div_sum += i\n    \n    # Check if the sum of divisors is same for both integers \n    if div_sum == sum([i for i in range(1, n+1)]) or div_sum == sum([i for i in range(n, 1, -1)]):\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Calculate the sum of the divisors of n\n    div_sum = sum(set(int(x) for x in str(n)))\n    # Calculate the sum of the integers from 1 to n\n    int_sum = sum(range(1, n+1))\n    # Check if the sum of the divisors and the integers is equal\n    if div_sum == int_sum:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    for i in range(1, n):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef div_sum(n):\n    \"\"\"\n    Determine if the sum of the divisors of two integers are the same.\n    \"\"\"\n    # Calculate the sum of divisors of n using Euclid's algorithm\n    def sum_divisors(n):\n        \"\"\"\n        Helper function to calculate the sum of divisors of n using Euclid's algorithm.\n        \"\"\"\n        if n < 2:\n            return 0\n        s = 1\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                s += i + n // i\n        if n > 2:\n            s += n\n        return s\n\n    # Calculate the sum of divisors of m using the same algorithm as n\n    def sum_divisors_m(m):\n        \"\"\"\n        Helper function to calculate the sum of divisors of m using the same algorithm as n.\n        \"\"\"\n        return sum_divisors(m) - sum_divisors(n - m)\n\n    # Calculate the sum of divisors of the product of n and m using the same algorithm as n\n    def sum_divisors_product(n, m):\n        \"\"\"\n        Helper function to calculate the sum of divisors of the product of n and m using the same algorithm as n.\n        \"\"\"\n        return sum_divisors_m(n) + sum_divisors_m(m)\n\n    # Check if the sum of the divisors of the product of n and m are equal to the sum of the divisors of n and m\n    if sum_divisors_product(n, m) == sum_divisors_product(m, n):\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # function to check if the sum of the divisors of two numbers is same or not\n    def same_sum(a, b): \n        return sum(set(divisors(a))) == sum(set(divisors(b)))\n    # function to find the divisors of a number \n    def divisors(n): \n        return [i for i in range(1, int(math.sqrt(n))+1) if n % i == 0] if n > 1 else []\n    \n    # function to check if the given integer has the same sum of divisors as the sum of the divisors of itself\n    if same_sum(n, sum(divisors(n))): \n        print(f\"{n} has the same sum of divisors as the sum of its divisors.\")\n    else: \n        print(f\"{n} does not have the same sum of divisors as the sum of its divisors.\")"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Calculate the sum of the divisors of n \n    divisor_sum = sum(range(1, int(math.sqrt(n))+1))\n    # Check if the sum of the divisors of n is equal to n \n    if divisor_sum == n: \n        return True\n    else: \n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    This function takes an integer n as input and determines if the sum of its divisors is the same as n.\n    If the sum of divisors is the same as n, then the function returns True, otherwise it returns False.\n    '''\n    \n    # calculate sum of divisors\n    div_sum = sum([i for i in range(1, n+1) if n % i == 0])\n    \n    # check if sum of divisors is same as n\n    if div_sum == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_char_position(str1):\n    \"\"\"\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    \"\"\"\n    # create a dictionary to store the position of each character in the English alphabet\n    position_dict = {chr(i).lower():i for i in range(ord('a'), ord('z')+1)}\n\n    # initialize a counter for each character in the English alphabet\n    counts = {chr(i).lower():0 for i in range(ord('a'), ord('z')+1)}\n\n    # loop through each character in the input string\n    for char in str1:\n        # check if the character is in the position_dict\n        if char.lower() in position_dict.keys():\n            # check if the character at the same position in the input string is the same as the character in the position_dict\n            if char.lower() == position_dict[char.lower()]:\n                # increment the count for the character in the input string\n                counts[char.lower()] += 1\n\n    # return the count for each character in the English alphabet\n    return counts"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(26):\n        if str1.lower() == chr(i+97).lower():\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1.lower().find(str1[i].lower())!= -1:\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    count = 0\n    \n    # loop through each character in the string\n    for char in str1: \n        # check if the character is a letter in the alphabet\n        if char.lower() in alphabet: \n            # find the position of the character in the alphabet\n            pos = alphabet.index(char.lower()) \n            # check if the character is at the same position in the alphabet as any other character in the string\n            if pos == 0 or str1[pos-1].lower()!= alphabet[pos-1]:\n                count += 1\n    \n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Convert the string to lowercase\n    str1 = str1.lower()\n    # Initialize a dictionary to store the count of characters at each position in the string\n    char_count = {}\n    # Loop through each character in the string\n    for char in str1:\n        # Check if the character is a letter (case insensitive)\n        if char.isalpha():\n            # Get the position of the character in the alphabet (0 to 25)\n            position = ord(char) - 96\n            # If the character is already in the dictionary, increment its count\n            if position in char_count:\n                char_count[position] += 1\n            # If the character is not in the dictionary, add it with a count of 1\n            else:\n                char_count[position] = 1\n    # Return the count of characters at each position in the string\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n\n    # Convert the string to lowercase\n    str1 = str1.lower()\n\n    # Create a dictionary to store the count of each character\n    char_count = {}\n\n    # Iterate over the string\n    for char in str1:\n        # If the character is in the dictionary, increment its count\n        if char in char_count:\n            char_count[char] += 1\n        # If the character is not in the dictionary, add it with a count of 1\n        else:\n            char_count[char] = 1\n\n    # Iterate over the English alphabet\n    for i in range(ord('a'), ord('z') + 1):\n        # If the character at the current index in the alphabet is in the dictionary, increment its count\n        if chr(i) in char_count:\n            char_count[chr(i)] += 1\n        # If the character at the current index in the alphabet is not in the dictionary, add it with a count of 1\n        else:\n            char_count[chr(i)] = 1\n\n    # Calculate the count of characters that occur at the same position in the English alphabet\n    same_position_count = 0\n    for char, count in char_count.items():\n        if count == char_count[chr(i)]:\n            same_position_count += 1\n\n    # Return the total count of characters\n    return same_position_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_char_position(str1):\n    \"\"\"\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    \"\"\"\n    # Create a dictionary to store the character counts for each position in the English alphabet\n    char_count = {'A': 0, 'B': 0, 'C': 0, 'D': 0, 'E': 0, 'F': 0, 'G': 0, 'H': 0, 'I': 0, 'J': 0, 'K': 0, 'L': 0, 'M': 0, 'N': 0, 'O': 0, 'P': 0, 'Q': 0, 'R': 0, 'S': 0, 'T': 0, 'U': 0, 'V': 0, 'W': 0, 'X': 0, 'Y': 0, 'Z': 0}\n    # Convert the input string to uppercase for case insensitivity\n    str1 = str1.upper()\n    # Loop through each character in the input string\n    for char in str1:\n        # If the character is in the dictionary, increment the count for the corresponding position\n        if char in char_count:\n            char_count[char] += 1\n    # Return the character counts\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_char_position(str1):\n    count = 0\n    for char in str1:\n        if char.lower() in 'abcdefghijklmnopqrstuvwxyz':\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_char_position(str1):\n    # initialize an empty dictionary to store the count of each character\n    count_dict = {}\n    \n    # loop through each character in the string\n    for char in str1:\n        # convert the character to lowercase to make the comparison case insensitive\n        char = char.lower()\n        \n        # if the character is in the dictionary, increment its count by 1\n        if char in count_dict:\n            count_dict[char] += 1\n        # otherwise, add the character to the dictionary with a count of 1\n        else:\n            count_dict[char] = 1\n            \n    # loop through the dictionary and print out the count of each character at the same position in the English alphabet\n    for key, value in count_dict.items():\n        if value == 1:\n            print(f\"{key}: {value}\")"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n\n    # Convert the string to lowercase\n    str1 = str1.lower()\n\n    # Initialize a dictionary to store the position of each character\n    char_position = {}\n\n    # Loop over the string\n    for i in range(len(str1)):\n        # Check if the character is in the dictionary\n        if str1[i] in char_position:\n            # If it is, increment the count\n            char_position[str1[i]] += 1\n        else:\n            # If it isn't, add it to the dictionary with a count of 1\n            char_position[str1[i]] = 1\n\n    # Initialize the count to zero\n    count = 0\n\n    # Loop over the positions in the dictionary\n    for i in range(26):\n        # Check if the position is in the dictionary\n        if i + 1 in char_position:\n            # If it is, add the count to the total count\n            count += char_position[i + 1]\n\n    # Return the total count\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_even_pair(A): \n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] + A[j] % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_even_pair(A):\n    even_count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                even_count += 1\n    return even_count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_even_pair(A): \n    # Create an empty dictionary to store the counts\n    count = {} \n    # Iterate through the list\n    for i in A: \n        # Find the XOR of the current number and its complement\n        xor = i ^ (1 - i) \n        # If the XOR is even and has a count, increment the count\n        if xor % 2 == 0 and xor in count: \n            count[xor] += 1 \n        # If the XOR is even and not in the count, add the pair to the count\n        elif xor % 2 == 0: \n            count[xor] = 1 \n    # Return the count of even XORs\n    return sum(count.values())"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_even_pair(A): \n    # initialize count to 0 \n    count = 0 \n\n    # loop through all pairs of integers in the list A \n    for i in range(len(A)): \n        for j in range(i+1, len(A)): \n            # xor the current pair and the integers at indices i and j \n            xor = A[i] ^ A[j] \n\n            # if the xor is even, increment the count \n            if xor % 2 == 0: \n                count += 1\n\n    # return the count of even pairs \n    return count "
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def next_power_of_2(n):\n    '''\n    This function returns the smallest power of 2 greater than or equal to a given number n.\n    '''\n    # Find the binary representation of n\n    binary_representation = bin(n)[2:]\n    # Count the number of 0s in the binary representation\n    zero_count = binary_representation.count('0')\n    # Add 1 to the power of 2 to the power of 2 raised to the power of zero_count\n    return 2 ** zero_count"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Returns the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    if n == 0:\n        return 1\n    return 2 ** (n - 1).bit_length()"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Binary exponentiation algorithm\n    power = 1\n    while power < n:\n        power <<= 1\n\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    while True:\n        n = n | (n >> 1)  # set bit i to 1 if bit i-1 is 0, and then shift all bits to the right by 1\n        n = n | (n >> 2)  # set bit i to 1 if bit i-2 is 0, and then shift all bits to the right by 2\n        n = n | (n >> 4)  # set bit i to 1 if bit i-4 is 0, and then shift all bits to the right by 4\n        n = n | (n >> 8)  # set bit i to 1 if bit i-8 is 0, and then shift all bits to the right by 8\n        n = n | (n >> 16)  # set bit i to 1 if bit i-16 is 0, and then shift all bits to the right by 16\n        if n >= n:  # if the value of n has changed, then the smallest power of 2 greater than or equal to n has been found\n            return n"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # initialize the power of 2 that is greater than or equal to n\n    power = 1\n    while power < n:\n        power *= 2\n    \n    # return the power of 2\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    elif n & (n - 1) == 0:\n        return n\n    else:\n        return 2 * next_power_of_2(n >> 1)"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def next_power_of_2(n): \n    \"\"\"\n    This function takes an integer n as input and returns the smallest power of 2\n    greater than or equal to n.\n    \"\"\"\n    # Initialize the value of the power of 2\n    power = 1\n    \n    # Loop until the power is greater than or equal to the square root of n\n    while power * power <= n:\n        # Increment the power of 2\n        power *= 2\n    \n    # Return the power of 2\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return 2**((n-1).bit_length())"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n\n    # This function uses binary exponentiation to find the next power of 2 greater than or equal to n\n    def power_of_two(x):\n        return 1 if x == 0 else 2 ** (x - 1)\n\n    # Binary exponentiation algorithm\n    x = 0\n    while n > 1:\n        x += 1\n        n >>= 1\n\n    return 1 << x"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n\n    # check if the number is already a power of 2\n    if n & (n-1) == 0: \n        return n\n\n    # set the initial guess\n    guess = 1\n\n    # loop until the guess is a power of 2\n    while guess < n: \n        guess <<= 1\n\n    # return the final guess\n    return guess"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency(a,x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0 \n    for i in a: \n        if i == x: \n            count += 1 \n    return count "
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a: \n        if i == x: \n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency(lst, x):\n    count = 0\n    for i in lst:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency(a, x): \n    '''\n    This function takes in a list and a number x and returns the number of occurrences of x in the list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency(a,x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i-1]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n\n    # initialize sum to 0\n    total = 0\n\n    # iterate through the list and add the values at indices m to n to the sum\n    for i in range(m, n+1):\n        total += list1[i]\n\n    # return the final sum\n    return total"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i-1]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    total = 0\n    for i in range(m, n+1):\n        if i in list1:\n            total += i\n    return total"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total = 0\n    for i in range(m, n+1):\n        if i in list1:\n            total += i\n    return total"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # create a new list to store the sum of numbers in the given range\n    result = []\n    # loop through the list from the minimum to the maximum index\n    for i in range(m, n+1):\n        # if the current index is within the range of the list, add the number to the new list\n        if i >= 0 and i < len(list1):\n            result.append(list1[i])\n    # return the sum of all numbers in the new list\n    return sum(result)"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # Check if the indices are valid\n    if m < 0 or n > len(list1) or m > n:\n        return \"Invalid indices\"\n    else:\n        # Initialize the sum variable\n        sum_range = 0\n        # Loop through the range and add the numbers to the sum\n        for i in range(m, n+1):\n            sum_range += list1[i]\n        return sum_range"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a\n    "
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # Calculate the length of the perimeter\n    perimeter = 5 * a\n\n    # Return the result\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a\n\ndef main():\n    a = float(input(\"Enter the length of the sides of the pentagon: \"))\n    perimeter = perimeter_pentagon(a)\n    print(\"The perimeter of the pentagon is:\", perimeter)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter\n"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # calculate the length of the side of the pentagon\n    side = a * 5 / 4\n\n    # calculate the number of sides of the pentagon\n    num_sides = 5\n\n    # calculate the perimeter of the pentagon\n    perimeter = num_sides * side\n\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # Calculate the length of each side of the pentagon\n    side_length = 2*a\n    \n    # Calculate the number of sides of the pentagon\n    num_sides = 5\n    \n    # Calculate the perimeter of the pentagon using the formula:\n    # perimeter = (1/5) * (side_length^2)\n    perimeter = (1/5) * (side_length**2)\n    \n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter\n"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurance of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in s:\n        if i =='s' and s[i-1] == 't' and s[i-2] == 'd':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    count = 0\n    n = len(s)\n    i = 0\n    \n    while i < n:\n        if s[i:i+3] =='std':\n            count += 1\n        i += 1\n    \n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] =='std':\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    index = s.find('std')\n    while index!= -1:\n        count += 1\n        index = s.find('std', index + 1)\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurance of the string'std' in a given string.\n    '''\n    count = 0\n    index = 0\n    while index!= -1:\n        index = s.find('std', index)\n        if index!= -1:\n            count += 1\n            index += 3\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    count = 0\n    for i in range(len(s)):\n        if'std' in s[i:]:\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurances of the string'std' in a given string.\n    '''\n    count = 0\n    index = s.find('std')\n    while index!= -1:\n        count += 1\n        index = s.find('std', index + 3)\n    return count"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    first_type = type(test_tuple[0])\n    for elem in test_tuple:\n        if type(elem)!= first_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    data_type = type(test_tuple[0])\n    for item in test_tuple:\n        if type(item)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0]) # first element of tuple\n    for i in range(1, len(test_tuple)):\n        if type(test_tuple[i])!= data_type: # check if element has different data type from first element\n            return False # if not, return False\n    return True # if all elements have same data type, return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    first_element = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element)!= first_element:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    This function takes a tuple as input and returns True if all the elements in the tuple have the same data type.\n    '''\n    type_list = []\n    for element in test_tuple:\n        type_list.append(type(element))\n\n    if len(set(type_list)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # Check if the tuple is not empty\n    if not test_tuple:\n        return True\n    \n    # Initialize a variable to keep track of the first element's data type\n    first_element_type = type(test_tuple[0])\n    \n    # Loop through all the elements in the tuple\n    for element in test_tuple:\n        # Check if the element's data type is the same as the first element's data type\n        if type(element)!= first_element_type:\n            return False\n    \n    # If all elements have the same data type, return True\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    type_set = set()\n    for element in test_tuple:\n        type_set.add(type(element))\n    return len(type_set) == 1"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    data_type = type(test_tuple[0])\n    for item in test_tuple:\n        if type(item)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # get the first element of the tuple\n    first_elem = test_tuple[0]\n    # loop through the tuple and check the data type of each element\n    for elem in test_tuple:\n        if type(elem)!= type(first_elem):\n            return False\n    # if all the elements have same data type, return True\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # check if the tuple is empty\n    if len(test_tuple) == 0:\n        return True\n    # check the first element of the tuple\n    if isinstance(test_tuple[0], type(test_tuple[1])):\n        # check if all the remaining elements have same data type\n        for i in range(1, len(test_tuple)):\n            if not isinstance(test_tuple[i], type(test_tuple[0])):\n                return False\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n\n    count = 0\n    i = 0\n    while i < n:\n        if arr[i] == x:\n            count += 1\n            i += 1\n        elif arr[i] < x:\n            i += 1\n        else:\n            while i > 0 and arr[i-1] == x:\n                count -= 1\n                i -= 1\n\n    if count > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count > n // 2"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n\n    # initialize count and majority count variables to 0\n    count = 0\n    majority_count = 0\n\n    # loop through the array\n    for i in range(n):\n        # if current element is equal to x, increment count\n        if arr[i] == x:\n            count += 1\n\n        # if count becomes greater than n/2, increment majority count\n        if count > n // 2:\n            majority_count += 1\n\n        # if majority count becomes greater than 0, decrement count and break out of loop\n        if majority_count > 0:\n            count -= 1\n            break\n\n    # if majority_count is greater than 0, return True\n    if majority_count > 0:\n        return True\n    # otherwise, return False\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Set_Bits(n):\n    \"\"\"\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    \"\"\"\n    count = 0\n    while n:\n        if n & 1:\n            count += 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n!= 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n\n    count = 0\n\n    # Loop through the binary representation of n and count the number of set bits\n    while n:\n        count += n & 1\n        n >>= 1\n\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n!= 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Remove characters with odd index values from a given string.\n\n    Parameters:\n    str (str): A string to remove the odd index values from.\n\n    Returns:\n    str: The modified string with odd index values removed.\n    \"\"\"\n    odd_values_list = []\n    for i in range(len(str)):\n        if i % 2 == 0:\n            odd_values_list.append(str[i])\n    return \"\".join(odd_values_list)"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    # Initialize an empty string to store the even index values\n    even_index_values = \"\"\n    # Iterate through the string using a for loop\n    for i in range(len(str)):\n        # If the index value is odd, append the character to the even_index_values string\n        if i % 2!= 0:\n            even_index_values += str[i]\n    # Return the even_index_values string\n    return even_index_values"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_values_string(string):\n    new_string = \"\"\n    for i in range(len(string)):\n        if i % 2 == 0:\n            new_string += string[i]\n    return new_string"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    result = ''\n    for i in range(len(str)):\n        if i % 2 == 1:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = ''\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_values_string(string):\n    new_string = \"\"\n    for i, char in enumerate(string):\n        if i % 2!= 0:\n            new_string += char\n    return new_string"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n\n    :param str: a string to remove odd index values\n    :return: a new string with odd index values removed\n    \"\"\"\n    new_str = ''\n    for i in range(len(str)):\n        if i % 2!= 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2!= 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    '''\n    This function takes a string as input and returns a new string where all characters which have odd index values are removed.\n    '''\n    result = ''\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Write a function to find the minimum of three numbers.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_of_three(a,b,c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    # initializing minimum variable to first number\n    minimum = a\n\n    # checking if second number is smaller\n    if b < minimum:\n        minimum = b\n\n    # checking if third number is smaller\n    if c < minimum:\n        minimum = c\n\n    # returning minimum value\n    return minimum"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_of_three(a, b, c):\n    '''\n    This function takes in three numbers as input and returns the minimum of the three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c: \n        return a \n    elif b < a and b < c: \n        return b \n    else: \n        return c"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    This function takes three arguments:\n    1. n: an integer representing the size of the range (2^n is the largest possible value)\n    2. l: an integer representing the lower bound of the range\n    3. r: an integer representing the upper bound of the range\n    \n    It returns True if all the bits in the given range are set, otherwise it returns False.\n    \"\"\"\n    mask = (1 << n) - 1\n    for i in range(l, r + 1):\n        if (i & mask)!= mask:\n            return False\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Convert the integers to binary strings\n    num_binary = bin(n)[2:]\n    range_binary = bin(l)[2:]\n    # If the length of the binary strings is less than 32, pad the binary strings with zeros to make them 32 bits long\n    if len(num_binary) < 32:\n        num_binary = '0'*(32-len(num_binary)) + num_binary\n    if len(range_binary) < 32:\n        range_binary = '0'*(32-len(range_binary)) + range_binary\n    # Compare the binary strings and return whether all the bits are unset or not\n    if num_binary == range_binary:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n\n    count = 0\n    for i in range(l, r + 1):\n        if n & (1 << i):\n            count += 1\n\n    if count == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Initialize a variable to store the count of unset bits in the given range\n    count = 0\n    \n    # Loop through the bits from l to r\n    for i in range(l, r+1):\n        # If the bit is set, increment the count by 1\n        if n & (1 << i):\n            count += 1\n        \n        # If the count becomes greater than or equal to the number of bits set, then return False as the bits are unset\n        if count >= len(bin(n)[2:].zfill(r-l+1)):\n            return False\n    \n    # If the loop completes without returning False, then all the bits are set in the given range and the function returns True\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    # Calculate the total number of bits in the given range\n    total_bits = r - l + 1\n    \n    # Initialize a boolean variable to keep track of whether all the bits are set or not\n    all_bits_set = True\n    \n    # Iterate through all the bits in the given range and check whether they are set or not\n    for i in range(l, r+1):\n        # Calculate the bit value based on the bit position\n        bit_value = (n >> i) & 1\n        \n        # If the bit is unset, set all_bits_set to False\n        if bit_value == 0:\n            all_bits_set = False\n            break\n            \n    # Return the value of all_bits_set\n    return all_bits_set"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    This function takes in three parameters: n, l, and r.\n    n: an integer representing the number of bits in the given range.\n    l: an integer representing the lower limit of the range.\n    r: an integer representing the upper limit of the range.\n\n    This function checks whether all the bits are unset in the given range or not.\n    It returns True if all the bits are unset in the given range, and False otherwise.\n    \"\"\"\n\n    # Initialize a boolean variable to keep track of whether all the bits are unset or not\n    all_unset = True\n\n    # Loop through each bit in the given range\n    for i in range(l, r+1):\n\n        # Check if the bit is set or unset\n        if n & (1 << i):\n            all_unset = False\n\n    # Return the result\n    return all_unset"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n\n    # Initialize all the bits as 0 initially\n    all_bits = 0\n\n    # Loop through each bit in the range\n    for i in range(l, r + 1):\n\n        # Set the corresponding bit in the all_bits variable\n        all_bits |= (1 << i)\n\n    # Check if all the bits are set in the given range\n    if all_bits == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n\n    # Get the number of bits in the given range\n    num_bits = r - l + 1\n\n    # Get the number of set bits in the given range\n    num_set_bits = 0\n    for i in range(l, r + 1):\n        num_set_bits += bin(i).count('1')\n\n    # Compare the number of set bits with the number of bits in the given range\n    if num_set_bits == num_bits:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # create a string of 0's and 1's with length n+1\n    binary_str = ''.join(['0' for i in range(n+1)])\n\n    # iterate over each bit from l to r in binary form and set the corresponding bit in binary_str\n    for i in range(l, r+1):\n        # convert i to binary form and convert it to string\n        binary_bit = '{:0{}b}'.format(i, len(str(i)))\n\n        # set the corresponding bit in binary_str\n        binary_str[i-l] = binary_bit\n\n    # check if all the bits in binary_str are 1's\n    all_bits_set = True\n    for bit in binary_str:\n        if bit!= '1':\n            all_bits_set = False\n            break\n\n    return all_bits_set"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if r > 32:\n        return \"Range should be less than or equal to 32.\"\n    count = 0\n    for i in range(l, r + 1):\n        if (n & (1 << i))!= 0:\n            count += 1\n            if count > 1:\n                return \"Not all the bits are unset in the given range.\"\n    return \"All the bits are unset in the given range.\""
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n\n    # create two empty lists to store negative and positive elements\n    neg_list = []\n    pos_list = []\n\n    # iterate through the array\n    for num in arr:\n        # if the element is negative, add it to the negative list\n        if num < 0:\n            neg_list.append(num)\n        # if the element is positive, add it to the positive list\n        elif num > 0:\n            pos_list.append(num)\n\n    # concatenate the negative and positive lists\n    combined_list = neg_list + pos_list\n\n    # shuffle the combined list\n    shuffled_list = list(combined_list)\n    random.shuffle(shuffled_list)\n\n    # split the shuffled list into two parts\n    first_part = shuffled_list[:n]\n    second_part = shuffled_list[n:]\n\n    # create two empty lists to store the re-arranged elements\n    rearranged_neg_list = []\n    rearranged_pos_list = []\n\n    # iterate through the first part of the shuffled list\n    for num in first_part:\n        # if the number is negative, add it to the negative list\n        if num < 0:\n            rearranged_neg_list.append(num)\n        # if the number is positive, add it to the positive list\n        else:\n            rearranged_pos_list.append(num)\n\n    # iterate through the second part of the shuffled list\n    for num in second_part:\n        # if the number is negative, add it to the negative list\n        if num < 0:\n            rearranged_neg_list.append(num)\n        # if the number is positive, add it to the positive list\n        else:\n            rearranged_pos_list.append(num)\n\n    # return the re-arranged array\n    return rearranged_neg_list + rearranged_pos_list"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n\n    # Sort the array in descending order\n    arr.sort(reverse=True)\n\n    # Iterate through the array and re-arrange the first n elements\n    for i in range(n):\n        if arr[i] < 0:\n            arr[i], arr[n] = arr[n], arr[i]\n        else:\n            n -= 1\n\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n\n    # Initialize variables to keep track of the current negative and positive elements\n    neg_count = 0\n    pos_count = 0\n\n    # Iterate through the array, keeping track of the negative and positive elements\n    for num in arr:\n        if num < 0:\n            neg_count += 1\n        else:\n            pos_count += 1\n\n    # Initialize variables to keep track of the current position of the negative and positive elements\n    neg_pos = 0\n    pos_neg = n\n\n    # Iterate through the array again, swapping negative and positive elements as required\n    for i in range(n):\n        if arr[i] < 0:\n            # If the current element is negative, move it to the end of the negative group\n            arr[neg_pos] = arr[i]\n            neg_pos += 1\n        else:\n            # If the current element is positive, move it to the end of the positive group\n            arr[pos_neg] = arr[i]\n            pos_neg += 1\n\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # first, count the number of negative and positive elements in the array\n    neg_count = 0\n    pos_count = 0\n    for num in arr[:n]:\n        if num < 0:\n            neg_count += 1\n        else:\n            pos_count += 1\n    \n    # now, swap the negative elements with the first n negative elements and the positive elements with the remaining elements\n    for i in range(n):\n        if i < neg_count:\n            arr[i], arr[neg_count + i] = arr[neg_count + i], arr[i]\n        elif i >= neg_count:\n            arr[i], arr[pos_count - 1 - i + neg_count] = arr[pos_count - 1 - i + neg_count], arr[i]\n    \n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n\n    # initialize two pointers i and j to 0\n    i = j = 0\n\n    # traverse the array from index 0 to n-1\n    while j < n:\n\n        # if the current element is positive\n        if arr[j] > 0:\n\n            # move the current element to its correct position\n            arr[i], arr[j] = arr[j], arr[i]\n\n            # increment i by 1\n            i += 1\n\n            # increment j by 1\n            j += 1\n\n        # if the current element is negative\n        else:\n\n            # if the current element is the first negative element\n            if i == j:\n\n                # increment j by 1\n                j += 1\n\n            # if the current element is not the first negative element\n            else:\n\n                # move the current element to its correct position\n                arr[i], arr[j] = arr[j], arr[i]\n\n                # increment i by 1\n                i += 1\n\n                # increment j by 1\n                j += 1\n\n    # print the final sorted array\n    print(\"Sorted array is:\", arr)"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Initialize two empty lists to store negative and positive elements\n    neg = []\n    pos = []\n    \n    # Iterate through the array\n    for i in range(n):\n        # If the current element is negative, append it to the negative list\n        if arr[i] < 0:\n            neg.append(arr[i])\n        # If the current element is positive, append it to the positive list\n        else:\n            pos.append(arr[i])\n            \n    # Iterate through the array again and append the remaining elements to the appropriate list\n    for i in range(n, len(arr)):\n        if arr[i] < 0:\n            neg.append(arr[i])\n        else:\n            pos.append(arr[i])\n            \n    # Combine the negative and positive lists into one array\n    result = neg + pos\n    \n    # Return the resulting array\n    return result"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # create two lists to store the negative and positive elements\n    neg_list = []\n    pos_list = []\n    \n    # iterate over the array\n    for elem in arr:\n        if elem < 0:\n            neg_list.append(elem)\n        else:\n            pos_list.append(elem)\n    \n    # concatenate the two lists in ascending order\n    sorted_list = neg_list + pos_list\n    sorted_list.sort()\n    \n    # create a new array with the first n elements of the sorted list\n    new_arr = sorted_list[:n]\n    \n    # return the new array\n    return new_arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # initialize variables for keeping track of negative and positive elements\n    neg = []\n    pos = []\n    # loop through the array and append negative and positive elements to the appropriate lists\n    for num in arr:\n        if num < 0:\n            neg.append(num)\n        else:\n            pos.append(num)\n    # append the negative elements to the beginning of the array and the positive elements to the end\n    arr[:n] = neg\n    arr[n:] = pos\n    # return the modified array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Initialize two pointers, left and right, to the first and last indices of the array, respectively\n    left = 0\n    right = len(arr) - 1\n    \n    # Iterate through the array until the right pointer reaches n-1\n    while left < right:\n        \n        # If the element at the left pointer is negative\n        if arr[left] < 0:\n            \n            # If the element at the right pointer is negative or positive and smaller than the left element\n            if arr[right] < 0 or (arr[right] > 0 and arr[right] < arr[left]):\n                \n                # Swap the elements at the left and right pointers\n                arr[left], arr[right] = arr[right], arr[left]\n                \n            # Move the right pointer to the left of the negative element\n            right -= 1\n            \n        # If the element at the left pointer is positive\n        elif arr[left] > 0:\n            \n            # If the element at the right pointer is positive or negative and larger than the left element\n            if arr[right] > 0 or (arr[right] < 0 and arr[right] > arr[left]):\n                \n                # Swap the elements at the left and right pointers\n                arr[left], arr[right] = arr[right], arr[left]\n                \n            # Move the left pointer to the right of the positive element\n            left += 1\n            \n    # Return the modified array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    # initialize two empty lists to hold the negative and positive elements respectively\n    neg_list = []\n    pos_list = []\n    # loop through the array and append the negative elements to the negative list, and positive elements to the positive list\n    for num in arr:\n        if num < 0:\n            neg_list.append(num)\n        else:\n            pos_list.append(num)\n    # loop through the negative list and append the first n elements to the start of the positive list, preserving the relative order among negative and positive elements\n    for i in range(n):\n        pos_list.append(neg_list.pop(0))\n    # return the modified array\n    return pos_list"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_blank(str1,char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    new_str = str1.replace(\" \",char)\n    return new_str"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return ''.join([char if char!='' else '' for char in str1])"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_blank(str1, char):\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    str1 = str1.replace(\" \", char)\n    return str1"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ', char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_blank(str1, char):\n    '''\n    This function takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_blank(str1,char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_blank(str1,char):\n    return str1.replace(\" \",char)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # use heapify to sort the list in descending order\n    heapq.heapify(list1)\n    # use heappop to extract n largest items from the list and return them as a new list\n    return [heapq.heappop(list1) for _ in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Convert the list to a heap\n    heap = []\n    for num in list1:\n        heapq.heappush(heap, num)\n    \n    # Extract the n largest items from the heap\n    result = []\n    for _ in range(n):\n        result.append(heapq.heappop(heap))\n    \n    return result"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Create a min heap of size n and add the first n items from the list\n    min_heap = []\n    for item in list1[:n]:\n        heapq.heappush(min_heap, item)\n    \n    # Add the remaining items to the heap\n    for item in list1[n:]:\n        heapq.heappushpop(min_heap, item)\n        \n    # Return the sorted list of the n largest items\n    return sorted(min_heap)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for num in list1:\n        heapq.heappush(heap, num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for item in list1:\n        heapq.heappush(heap,item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return list(heap)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for i in list1:\n        heapq.heappush(heap, i)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return [heapq.heappop(heap) for i in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Create a min heap from the first n elements of the list\n    heap = heapq.nsmallest(n, list1)\n    # Remove the smallest element from the heap and add the next smallest element\n    for i in range(n, len(list1)):\n        heapq.heappushpop(heap, -list1[i])\n    # Convert the min heap to a list and return it\n    return [heapq.heappop(heap) for _ in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Use a min heap to store the n largest numbers in the list\n    heap = []\n    for num in list1:\n        heapq.heappush(heap, num)\n        # If the heap has more than n elements, pop the smallest one\n        if len(heap) > n:\n            heapq.heappop(heap)\n    # Return the list of the n largest numbers\n    return list(heap)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # convert the list into a set to remove duplicates\n    unique_list = list(set(list1))\n    # sort the set in descending order using heapq\n    heapq.heapify(unique_list)\n    # extract the top n elements from the heap\n    top_n_elements = heapq.nlargest(n,unique_list)\n    # convert the list back into a set to remove duplicates\n    top_n_unique_elements = set(top_n_elements)\n    # convert the set back into a list\n    top_n_list = sorted(list(top_n_unique_elements))\n    # return the top n elements as a list\n    return top_n_list"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n, list1)"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lateralsuface_cylinder(r, h):\n    \"\"\"\n    This function calculates the lateral surface area of a cylinder.\n\n    Args:\n    r (float): radius of the cylinder.\n    h (float): height of the cylinder.\n\n    Returns:\n    float: lateral surface area of the cylinder.\n    \"\"\"\n    # Calculating the surface area of the cylinder.\n    surface_area = 2 * r * h\n    \n    # Returning the surface area.\n    return surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Formula for lateral surface area of a cylinder\n    lateral_surface_area = 2 * (r ** 2 + h) * 3.14159\n    # Return the lateral surface area\n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateral_area = (2 * r * h) + (2 * r * h * 0.5)\n    return lateral_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2 * 3.14 * r * r + 2 * 3.14 * r * h + 2 * 3.14 * h * h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Calculating the lateral surface area of the cylinder\n    surface_area = 2 * r * h * pi\n    return surface_area\n"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateral_surface_area_cylinder(r, h):\n    '''\n    This function takes the radius of the cylinder and its height as input parameters and returns the lateral surface area of the cylinder.\n    '''\n    lateral_surface_area = 2 * r * h + 2 * r * r * 3.14159265359\n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n\n    # Calculate the lateral surface area of the cylinder using the formula:\n    # lateral surface area = 2 * pi * r * (h/2)\n    lateral_surface_area = 2 * 3.14159 * r * (h/2)\n\n    # Return the lateral surface area:\n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r,h):\n    \"\"\"\n    Write a function to find the lateral surface area of a cylinder.\n    \"\"\"\n    # Formula for lateral surface area of a cylinder\n    # LSA = 2 * pi * r * h\n    # where pi = 3.14159\n    pi = 3.14159\n    LSA = 2 * pi * r * h\n    return LSA"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateral_surface_area = 2 * r * h\n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return math.pi * r**2 * h"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l ** 3\n    return volume\n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    while n % 2 == 0:\n        n = n >> 1  # Divide by 2 to remove the even bit\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    while n!= 0: \n        if n & 1 == 0: # check if the least significant bit is 0 \n            n |= 1 # set the least significant bit to 1 \n        n >>= 1 # shift the number to the right by 1 bit \n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # initialize a variable to store the even bits of n\n    even_bits = 0\n    \n    # loop through each bit in n\n    for i in range(32):\n        # if the current bit is even, set it to 1\n        if n & (1 << i):\n            even_bits |= (1 << i)\n    \n    # return the number with even bits set to 1\n    return even_bits"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize a variable to store the result\n    result = 0\n    # Loop through each bit of the given number\n    for i in range(32):\n        # Check if the current bit is even\n        if n & (1 << i):\n            # Set the corresponding bit of the result to 1\n            result |= (1 << i)\n    # Return the result\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_bit_set_number(n): \n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    n = bin(n)[2:].zfill(32) # Convert the given number to binary format and add zeros to make it 32 bits long\n    odd_bits = [] # List to store the even bits\n    for i in range(len(n)): # Iterate over each bit in the binary representation\n        if int(n[i]) % 2 == 1: # Check if the bit is odd\n            odd_bits.append(int(n[i])) # If it is, append it to the list\n    for bit in odd_bits: # Iterate over each even bit\n        for i in range(len(n)): # Iterate over each bit in the binary representation\n            if i == bit: # Check if the bit index matches the even bit index\n                n[i] = '1' # Set the bit to 1\n    n = int(n, 2) # Convert the binary representation back to an integer\n    return n # Return the updated number"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize a variable to store the result\n    result = 0\n    # Iterate over each bit of the input number\n    for i in range(32):\n        # Check if the current bit is even\n        if n & (1 << i):\n            # Set the current bit to 1 in the result\n            result |= (1 << i)\n    # Return the result\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize an empty string to store the result\n    result = ''\n\n    # Loop through each bit of the number\n    for bit in bin(n)[2:]: \n        # If the bit is even, set it to 1\n        if int(bit) == 0: \n            result += '0' \n        else: \n            result += '1' \n    \n    # Convert the result string to an integer\n    result = int(result, 2)\n\n    # Return the result\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize the result variable to 0\n    result = 0\n    # Loop through each bit of the input number\n    for i in range(32):\n        # Check if the current bit is even\n        if n & (1 << i)!= 0:\n            # If it is, set the corresponding bit in the result variable to 1\n            result |= (1 << i)\n    # Return the result\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_bit_set_number(n):\n    # Initialize the result to zero\n    result = 0\n    \n    # Iterate over the bits in the binary representation of n\n    for i in range(32):\n        # Check if the current bit is even\n        if (n & (1 << i)) > 0:\n            # Set the corresponding bit in the result to 1\n            result |= (1 << i)\n    \n    # Return the result\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    even_bits = n & 0x55555555 # get the even bits of n using bitwise AND operator with 0x55555555\n    return even_bits | (n ^ even_bits) # set all even bits to 1 and set all odd bits to 0 using bitwise OR operator\n"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Convert the list of tuples to a set to eliminate duplicates\n    unique_set = set(test_list)\n    # Convert the set back to a list to count its occurrences\n    count_list = list(Counter(unique_set).items())\n    # Create a dictionary to store the counts\n    count_dict = {}\n    # Fill the dictionary with the counts\n    for tup, count in count_list:\n        count_dict[tup] = count\n    # Return the dictionary of counts\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = {}\n    for item in test_list:\n        if item in count_dict:\n            count_dict[item] += 1\n        else:\n            count_dict[item] = 1\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # convert the list to a set to remove duplicates\n    unique_tuples = set(test_list)\n    # convert the set back to a list so that we can sort it alphabetically\n    unique_tuples = sorted(list(unique_tuples))\n    # create a dictionary to store the counts\n    count_dict = {}\n    # loop through the list of tuples\n    for tup in unique_tuples:\n        # if the tuple is in the list, increment its count in the dictionary\n        if tup in test_list:\n            count_dict[tup] = count_dict.get(tup, 0) + 1\n    # return the dictionary of counts\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = Counter()\n    for tup in test_list:\n        count_dict[tup] += 1\n    return dict(count_dict)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    \"\"\"\n    counter = Counter(test_list)\n    return dict(counter)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # create a dictionary to store the occurrences of tuples\n    occurrences = {}\n\n    # loop over the test_list and count the occurrences of each tuple\n    for tup in test_list:\n        if tup in occurrences:\n            occurrences[tup] += 1\n        else:\n            occurrences[tup] = 1\n\n    return occurrences"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # create a dictionary to store the count of each tuple\n    count_dict = {}\n    \n    # iterate over the test list\n    for item in test_list:\n        # add the tuple to the count_dict\n        if item not in count_dict:\n            count_dict[item] = 1\n        else:\n            count_dict[item] += 1\n    \n    # return the count_dict\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef check_occurrences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter(test_list)\n    return dict(counter)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    unique_tuples = set(test_list) # convert the list to a set to get unique tuples\n    count_dict = {} # create an empty dictionary to store the count of each unique tuple\n    \n    for tup in unique_tuples:\n        count_dict[tup] = test_list.count(tup) # use the count() method to count the number of occurrences of each tuple\n        \n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter()\n    for item in test_list:\n        counter[item] += 1\n    return dict(counter)"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_of_substrings(str):\n    \"\"\"\n    Write a python function to count the number of non-empty substrings of a given string.\n    \"\"\"\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef number_of_substrings(str):\n    # Use the re.findall() function to find all non-empty substrings of the given string\n    substrings = re.findall(r'\\w+', str)\n\n    # Return the length of the list of substrings\n    return len(substrings)"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            substr = str[i:j]\n            if substr and substr!= str:\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_of_substrings(str): \n    # Initialize count variable to 0\n    count = 0\n\n    # Loop through each character in the string\n    for i in range(len(str)): \n        # Loop through each subsequent character in the string\n        for j in range(i+1, len(str)+1): \n            # Check if the substring is non-empty and add it to the count variable\n            if str[i:j]!= '':\n                count += 1\n\n    # Return the count of non-empty substrings\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_of_substrings(string):\n    '''\n    This function counts the number of non-empty substrings of a given string.\n    '''\n\n    # initialize count to zero\n    count = 0\n\n    # loop through each character in the string\n    for i in range(len(string)):\n        # loop through each character in the substring starting from i\n        for j in range(i, len(string)):\n            # check if substring is non-empty\n            if string[j]!='':\n                # increment count\n                count += 1\n\n    # return count\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if str[i:j].strip():\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    n = len(str)\n    for i in range(n):\n        for j in range(i, n+1):\n            substring = str[i:j]\n            if substring:\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    n = len(str)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            substring = str[i:j]\n            if substring:\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n\n    # Initialize a variable to count the number of non-empty substrings\n    count = 0\n    \n    # Loop through each character in the string\n    for i in range(len(str)):\n        \n        # If the character is not a space or an uppercase letter,\n        # count a non-empty substring starting from this character\n        if str[i] not in [' ', str[i].upper()]:\n            count += 1\n        \n        # If the character is a space or an uppercase letter,\n        # move to the next character\n        else:\n            i += 1\n    \n    # Return the count of non-empty substrings\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m, n):\n    def is_valid(seq):\n        if len(seq)!= n:\n            return False\n        for i in range(len(seq)):\n            if seq[i] < 2 * (seq[i - 1] if i > 0 else 0) or seq[i] > m:\n                return False\n        return True\n\n    seq = []\n    total_count = 0\n    for i in range(2, m + 1):\n        if is_valid([i]):\n            seq.append(i)\n            if len(seq) == n:\n                total_count += 1\n                seq = []\n\n    return total_count\n"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m,n):\n    count = 0\n    for i in range(2,m+1):\n        if i >= 2*n:\n            count += (m-1)//i\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m, n):\n    # Initialize variables\n    total = 0\n    i = j = 0\n    \n    # Iterate through all possible combinations of n elements\n    while i < m:\n        j = 0\n        while j <= i:\n            if 2*j <= n and 2*j <= i:\n                total += 1\n            j += 1\n        i += 1\n        \n    return total"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m, n):\n    # initialize variables\n    count = 0\n    prev_num = 0\n    total_count = 0\n    \n    # loop through all possible numbers from 1 to m\n    for num in range(1, m+1):\n        # check if the number is within the range\n        if num >= 2*prev_num and num <= m:\n            # add to the count if it's within the range\n            count += 1\n            \n            # check if the count is equal to n\n            if count == n:\n                # add to the total count\n                total_count += 1\n                count = 0\n                prev_num = num\n                \n    # return the total count\n    return total_count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m, n):\n    total_sequences = 0\n    current_sequence = 0\n    current_number = 2 * n\n\n    while current_number <= m:\n        if current_number % 2 == 0 and current_number > 2 * current_sequence:\n            current_sequence += 1\n            total_sequences += 1\n        current_number += 1\n\n    return total_sequences\n"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    total_sequences = 0\n    previous_element = 1\n    for i in range(n):\n        current_element = previous_element + 2 * previous_element\n        while current_element <= m:\n            previous_element = current_element\n            current_element = previous_element + 2 * previous_element\n        total_sequences += 1\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m, n):\n    # base case\n    if n == 1:\n        return 1\n    # recursive case\n    else:\n        count = 0\n        for i in range(2, m + 1):\n            if i >= 2 * max(2 * i - n, 2):\n                count += get_total_number_of_sequences(i, n - 1)\n        return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m, n):\n    total = 0\n    for i in range(2, m):\n        if i >= 2*i <= m:\n            total += 1\n    return total"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m, n): \n    \"\"\"\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n\n    # Initialize a dictionary to store the count of each sequence\n    sequence_count = {}\n\n    # Check if m and n are positive integers\n    if not isinstance(m, int) or not isinstance(n, int) or m <= 0 or n <= 0:\n        return \"Error: m and n must be positive integers.\"\n\n    # If n is 1, the number of sequences is the number of possible values of m\n    if n == 1:\n        sequence_count[1] = 1\n\n    # If n is greater than 1, initialize the count of the first sequence with m\n    sequence_count[1] = 1\n\n    # Check for all possible values of m\n    for i in range(2, m + 1):\n\n        # If m is less than or equal to twice the previous value, the number of sequences for that value of m and n is 0\n        if i <= 2 * (m - 1):\n            sequence_count[i] = 0\n\n        # If m is greater than twice the previous value, the number of sequences for that value of m and n is the number of possible sequences for m-2 and n-1\n        else:\n            sequence_count[i] = sequence_count[i - 2] * (m - 2)\n\n    # Return the count of the last sequence\n    return sequence_count[m]"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m, n):\n    count = 0\n    for i in range(m):\n        if m % i == 0:\n            count += m // i\n    count *= n\n    return count"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    # Get the length of the list1 and list2\n    length1 = len(list1)\n    length2 = len(list2)\n\n    # Check if the length of list1 is greater than list2\n    if length1 > length2:\n        # Replace the last element of list1 with the elements of list2\n        for i in range(length1 - length2, length1):\n            list1[i] = list2[i % length2]\n    else:\n        # Replace the last element of list1 with the elements of list2\n        for i in range(length2 - length1, length2):\n            list1[i] = list2[i % length1]\n\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    for i in range(len(list1)-1, -1, -1):\n        list1[i] = list2[0]\n        list2.pop(0)\n"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.pop(-1)\n    list1.extend(list2)\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2[::-1]"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # Get the length of the first list\n    length = len(list1)\n    # Get the index of the last element of the first list\n    last_index = length - 1\n    # Add the elements of the second list to the first list\n    for element in list2:\n        list1.append(element)\n    # Remove the last element of the first list\n    del list1[last_index]\n    # Return the modified first list\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1) == 0:\n        return []\n\n    list1[-1:] = list2\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # Get the length of the first list\n    length = len(list1)\n    \n    # Loop through the first list from the second to the last element\n    for i in range(length-1, -1, -1):\n        # Replace the last element of the first list with the elements of the second list\n        list1[i] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1) > len(list2):\n        list1.pop()\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Define a helper function to check if a number is a perfect square\n    def is_perfect_square(num):\n        sqrt_num = int(math.sqrt(num))\n        return sqrt_num * sqrt_num == num\n\n    # Initialize a variable to keep track of the last perfect square\n    last_perfect_square = None\n    \n    # Initialize a variable to keep track of the square root of the given number\n    sqrt_N = int(math.sqrt(N))\n    \n    # Check if the given number is a perfect square\n    if is_perfect_square(N):\n        # The number is already a perfect square\n        return N\n    \n    # Check if the given number is a prime\n    if N % 2 == 1:\n        # The number is not prime, so find the next prime\n        for num in range(sqrt_N, 0, -1):\n            if num % 2 == 1:\n                # The number is a prime\n                last_perfect_square = num\n                break\n        \n        # Check if we found a prime\n        if last_perfect_square is None:\n            # We didn't find a prime, so return None\n            return None\n        \n        # Calculate the next perfect square by adding 1 to the last perfect square\n        next_perfect_square = last_perfect_square + 1\n        \n    else:\n        # The number is prime, so find the next odd prime\n        for num in range(sqrt_N, 0, -1):\n            if num % 2!= 1:\n                # The number is an odd prime\n                last_perfect_square = num\n                break\n        \n        # Check if we found an odd prime\n        if last_perfect_square is None:\n            # We didn't find an odd prime, so return None\n            return None\n        \n        # Calculate the next perfect square by subtracting 1 from the last perfect square\n        next_perfect_square = last_perfect_square - 1\n    \n    # Check if the next perfect square is a perfect square\n    while not is_perfect_square(next_perfect_square):\n        # The next perfect square is not a perfect square, so decrement it\n        next_perfect_square -= 1\n    \n    # Return the next perfect square\n    return next_perfect_square"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    # Function to find the square root of a number\n    def sqrt(num):\n        return int(math.sqrt(num))\n\n    # Find the square root of N\n    sqrt_N = sqrt(N)\n\n    # Calculate the next perfect square\n    next_sqrt_N = sqrt(sqrt_N + 1) * 2\n\n    # Check if the next perfect square is greater than N\n    if next_sqrt_N > N:\n        # Return the next perfect square\n        return next_sqrt_N\n    else:\n        # Return the largest perfect square less than N\n        return sqrt(N - 1) * 2"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    while True:\n        N += 1\n        x = int(math.sqrt(N))\n        if math.isqrt(x*x) == x:\n            return x"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math  \n  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Initialize variables\n    i = 1\n    while True:\n        next_square = int(math.sqrt(i)) ** 2\n        if next_square > N:\n            return next_square\n        i += 1"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    def is_perfect_square(num):\n        return num == int(num**0.5)**2\n    \n    def next_square(num):\n        return int(math.sqrt(num))**2 + 1\n        \n    if is_perfect_square(N):\n        return next_square(N)\n    else:\n        return next_Perfect_Square(N)"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    i = N+1\n    while True:\n        if i*i > N:\n            return i\n        i += 1\n"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    This function finds the next perfect square greater than a given number N.\n    The algorithm used is the Newton-Raphson method.\n    '''\n    sqrt_N = int(math.sqrt(N))\n    x = sqrt_N\n    while True:\n        y = int(x**2)\n        if y > N:\n            break\n        x += 1\n    return y"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    # Function to find the square root of a number\n    def sqrt_iterative(x):\n        y = x\n        while True:\n            y = (y + x / y) / 2\n            if abs(y - x) < 0.0000001:\n                return y\n            x = y\n\n    # Function to check if a number is a perfect square\n    def is_perfect_square(n):\n        return sqrt_iterative(n) == int(sqrt_iterative(n))\n\n    # Find the largest perfect square less than or equal to N\n    largest_ps = int(sqrt_iterative(N))\n    while is_perfect_square(largest_ps) == False:\n        largest_ps -= 1\n\n    # Find the next perfect square greater than largest_ps\n    next_ps = largest_ps + 1\n    while is_perfect_square(next_ps) == False:\n        next_ps += 1\n\n    return next_ps"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    sqrt_N = math.sqrt(N)\n    if sqrt_N.is_integer():\n        return int(sqrt_N) + 1\n    else:\n        return int(math.ceil(sqrt_N)) + 1"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    # Check if given number is a perfect square\n    if math.isqrt(N) * math.isqrt(N) == N:\n        return N\n    \n    # Find the largest perfect square less than or equal to N\n    for i in range(int(math.sqrt(N)), 0, -1):\n        if math.isqrt(i) * math.isqrt(i) <= N:\n            break\n    \n    # Find the next perfect square greater than i\n    next_i = i + 1\n    while True:\n        if next_i * next_i <= N:\n            return next_i * next_i\n        else:\n            next_i += 1"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    n = len(arr)\n    if n < 2:\n        return 0\n    \n    # Initialize variables for the maximum sum and the current sum\n    max_sum = arr[0]\n    current_sum = arr[0]\n    \n    # Traverse the array and update the maximum sum and current sum\n    for i in range(1, n):\n        if arr[i] < arr[i-1]:\n            # If the current number is less than the previous number, then the subsequence is decreasing\n            current_sum += arr[i]\n        else:\n            # If the current number is greater than or equal to the previous number, then the subsequence is increasing\n            current_sum = arr[i]\n        \n        max_sum = max(max_sum, current_sum)\n    \n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    \n    # Initialize the sum and max_sum variables\n    sum = 0\n    max_sum = float('-inf')\n    \n    # Iterate through the array\n    for i in range(len(arr)):\n        \n        # Check if the current element is decreasing\n        if arr[i] < arr[i-1]:\n            \n            # Add the previous sum to the sum\n            sum += arr[i-1]\n            \n            # Update the max_sum if the current sum is greater than the max_sum\n            if sum > max_sum:\n                max_sum = sum\n    \n    # Return the maximum sum of a bitonic subsequence\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array,\n    where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    # Check if the array is empty\n    if len(arr) == 0:\n        return 0\n    \n    # Initialize variables to store the maximum sum of increasing and decreasing subsequences\n    max_sum_increasing = arr[0]\n    max_sum_decreasing = arr[0]\n    \n    # Initialize variables to store the sum of increasing and decreasing subsequences\n    sum_increasing = arr[0]\n    sum_decreasing = arr[0]\n    \n    # Iterate over the array\n    for i in range(1, len(arr)):\n        # Check if the current element is increasing or decreasing\n        if arr[i] > arr[i-1]:\n            # Update the maximum sum of increasing subsequence\n            max_sum_increasing = max(max_sum_increasing + arr[i], arr[i])\n            # Update the sum of increasing subsequence\n            sum_increasing += arr[i]\n        else:\n            # Update the maximum sum of decreasing subsequence\n            max_sum_decreasing = max(max_sum_decreasing + arr[i], arr[i])\n            # Update the sum of decreasing subsequence\n            sum_decreasing += arr[i]\n            \n    # Return the maximum sum of any bitonic subsequence\n    return max(max_sum_increasing, max_sum_decreasing)"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum(arr):\n    n = len(arr)\n\n    if n < 3:\n        return 0\n\n    # check if all elements are equal\n    if arr[0] == arr[1] == arr[2]:\n        return 0\n\n    # check for decreasing sequence\n    if arr[0] < arr[1] and arr[1] < arr[2]:\n        if arr[2] > arr[0] + arr[1]:\n            return arr[0] + arr[1]\n        else:\n            return arr[0]\n    else:\n        # check for increasing sequence\n        if arr[1] > arr[0] and arr[0] < arr[2]:\n            if arr[2] > arr[1] + arr[0]:\n                return arr[1] + arr[0]\n            else:\n                return arr[1]\n        else:\n            # check for increasing decreasing sequence\n            if arr[0] > arr[1] and arr[1] < arr[2]:\n                if arr[2] > arr[0] + arr[1]:\n                    return arr[0] + arr[1]\n                else:\n                    return arr[0]\n            else:\n                # check for decreasing increasing sequence\n                if arr[2] > arr[0] and arr[0] < arr[1]:\n                    if arr[2] > arr[2] + arr[0]:\n                        return arr[2] + arr[0]\n                    else:\n                        return arr[2]\n                else:\n                    return 0"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n\n    # Find the minimum element in the array\n    min_elem = arr[0]\n    for i in range(1, n):\n        if arr[i] < min_elem:\n            min_elem = arr[i]\n\n    # Calculate the maximum sum of increasing subsequence\n    max_sum_increasing = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            sub_array = arr[i:j+1]\n            if sub_array[0] < sub_array[-1]:\n                sub_sum = sum(sub_array)\n                if sub_sum > max_sum_increasing:\n                    max_sum_increasing = sub_sum\n\n    # Calculate the maximum sum of decreasing subsequence\n    max_sum_decreasing = 0\n    for i in range(n-1, -1, -1):\n        for j in range(i-1, -1, -1):\n            sub_array = arr[i:j+1]\n            if sub_array[0] > sub_array[-1]:\n                sub_sum = sum(sub_array)\n                if sub_sum > max_sum_decreasing:\n                    max_sum_decreasing = sub_sum\n\n    return max(max_sum_increasing, max_sum_decreasing)"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # Initialize variables to store the maximum sum and its subsequence\n    max_sum = float('-inf')\n    max_subseq = []\n\n    # Loop through the array\n    for i in range(len(arr)):\n        # Check if the current element is increasing or decreasing\n        if i == 0 or arr[i] > arr[i-1]:\n            # If it's increasing, check if the current sum is greater than the maximum sum so far\n            if i == 0:\n                max_sum = sum(arr)\n            elif sum(arr[:i+1]) > max_sum:\n                max_sum = sum(arr[:i+1])\n                max_subseq = arr[:i+1]\n        else:\n            # If it's decreasing, check if the current sum is less than the maximum sum so far\n            if i == 0:\n                max_sum = sum(arr)\n            elif sum(arr[:i+1]) < max_sum:\n                max_sum = sum(arr[:i+1])\n                max_subseq = arr[:i+1]\n\n    # Return the maximum sum of the bitonic subsequence\n    return max_sum, max_subseq"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    dp = [0] * n\n\n    # Initialize the first row\n    for i in range(1, n):\n        if arr[i] > arr[i-1]:\n            dp[i] = dp[i-1] + arr[i]\n        else:\n            dp[i] = arr[i]\n\n    # Fill in the rest of the rows\n    for i in range(2, n):\n        if arr[i] > arr[i-1]:\n            dp[i] = max(dp[i-1], dp[i-2] + arr[i])\n        else:\n            dp[i] = max(dp[i-1], dp[i-2])\n\n    # Find the maximum sum\n    max_sum = dp[n-1]\n\n    # Initialize the last row\n    for i in range(n-2, -1, -1):\n        if arr[i] > arr[i+1]:\n            dp[i] = dp[i+1] + arr[i]\n        else:\n            dp[i] = arr[i]\n\n    # Fill in the rest of the rows\n    for i in range(n-3, -1, -1):\n        if arr[i] > arr[i+1]:\n            dp[i] = max(dp[i+1], dp[i+2] + arr[i])\n        else:\n            dp[i] = max(dp[i+1], dp[i+2])\n\n    # Find the maximum sum of the last row\n    max_sum = max(max_sum, dp[0])\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    n = len(arr)\n    if n < 3:\n        return 0\n    \n    # Initialize variables\n    current_sum = 0\n    max_sum = float('-inf')\n    current_level = 0\n    \n    # Iterate through the array\n    for i in range(1, n):\n        # Determine the current level\n        if arr[i-1] > arr[i]:\n            current_level = 1\n        elif arr[i-1] < arr[i]:\n            current_level = -1\n        else:\n            current_level = 0\n        \n        # Update the current sum\n        current_sum += arr[i]\n        \n        # Update the maximum sum\n        if current_level!= 0:\n            if current_sum > max_sum:\n                max_sum = current_sum\n    \n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    if n < 3:\n        return max(arr)\n\n    # Initialize variables to keep track of the current subsequence and the maximum sum seen so far\n    curr_sum = arr[0]\n    max_sum = curr_sum\n\n    # Iterate through the array starting from the second element\n    for i in range(1, n):\n        # If the current element is greater than the next element, add it to the current subsequence\n        if arr[i] > arr[i + 1]:\n            curr_sum += arr[i]\n        # If the current element is less than or equal to the next element, subtract it from the current subsequence\n        else:\n            curr_sum -= arr[i + 1]\n\n        # Update the maximum sum seen so far if the current subsequence is greater than the maximum sum seen so far\n        max_sum = max(max_sum, curr_sum)\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum(arr): \n    '''\n    This function takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    if arr[0] < arr[1]:\n        bitonic = True\n        sum_increasing = arr[0] + arr[1]\n    else:\n        bitonic = False\n        sum_decreasing = arr[0] + arr[1]\n    for i in range(2, n):\n        if bitonic:\n            if arr[i] >= arr[i-1]:\n                sum_increasing += arr[i]\n            else:\n                bitonic = False\n                sum_decreasing = sum_increasing + arr[i]\n        else:\n            if arr[i] <= arr[i-1]:\n                sum_decreasing += arr[i]\n            else:\n                bitonic = True\n                sum_increasing = sum_decreasing + arr[i]\n    if bitonic:\n        return sum_increasing\n    else:\n        return sum_decreasing"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Write a function for computing square roots using the babylonian method.\n    \"\"\"\n    start = 0\n    end = 10\n    precision = 0.0000001\n    iterations = 0\n    \n    while abs(start*start - number) > precision:\n        iterations += 1\n        if start*start < number:\n            start = (start + number/start) / 2\n        else:\n            end = (start + number/start) / 2\n            \n    return end, iterations"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = 1\n    y = number\n    while y > x:\n        x = (x + y) / 2\n        y = number / x\n    return x"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = 1.0\n    y = number\n    while y > 0.001:\n        x_prev = x\n        x = x - (number/x)\n        y_prev = y\n        y = y - (number/y)\n    return x"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x0 = 1\n    x1 = number // x0\n    x2 = x1 * x0\n    while abs(x1 - x0) > 1e-6:\n        x0 = x1\n        x1 = x2\n        x2 = x1 * x0\n    return x2"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # initialize the variables\n    guess = number/2\n    approx = guess\n    \n    # iterate until the difference between the guess and the approximation is less than a certain tolerance\n    while abs(approx-guess) > 0.001:\n        # calculate the new approximation\n        approx = (guess + number/guess) / 2\n        \n        # update the guess\n        guess = approx\n    \n    # return the approximation\n    return approx"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n\n    # Initialize variables\n    guess = number / 2\n    prev_guess = guess\n    \n    # Iterate until the difference between the previous guess and the current guess is less than or equal to 0.00001\n    while abs(prev_guess - guess) > 0.00001:\n        # Update the previous guess\n        prev_guess = guess\n        \n        # Update the guess by the babylonian method\n        guess = (guess + number / guess) / 2\n        \n    # Return the final guess\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    epsilon = 0.00001  # threshold for when the difference between square roots is less than epsilon\n    \n    # Use Newton's method to find the square root of the number\n    guess = number / 2  # guess the square root by dividing by 2\n    while True:\n        # Compute the square of the guess\n        square = guess**2\n        \n        # Check if the difference between the square root and the guess is less than epsilon\n        if abs(guess**2 - number) < epsilon:\n            return guess\n        \n        # Compute the difference between the square root and the guess\n        diff = square - number\n        \n        # If the difference is negative, the square root is closer to the square root\n        if diff < 0:\n            guess -= diff / guess  # adjust the guess\n        else:\n            guess += diff / guess  # adjust the guess\n        \n        # Limit the number of iterations to prevent infinite loops\n        if abs(guess - number) < epsilon:\n            return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n\n    # check if input is a float or integer\n    if isinstance(number, (int, float)):\n        # initialize variables\n        guess = number/2\n        epsilon = 0.001\n        i = 0\n\n        # iterate until tolerance is reached\n        while abs(guess**2 - number) >= epsilon:\n            i += 1\n            guess = (number/guess) + (guess/number)\n\n        # return the square root\n        return guess\n\n    # if input is not a float or integer, raise a TypeError\n    else:\n        raise TypeError('Input must be a float or integer.')"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n\n    # initialize variables\n    x_n = 1\n    x_n_plus_1 = 0.5 * x_n\n    x_n_plus_2 = 0.5 * (x_n_plus_1 + number / x_n_plus_1)\n    count = 0\n\n    # iterate until the difference between the squares of x_n and x_n_plus_2 is smaller than a small error\n    while abs(x_n_plus_2 * x_n_plus_2 - number) > 0.000001:\n        x_n = x_n_plus_2\n        x_n_plus_1 = 0.5 * x_n\n        x_n_plus_2 = 0.5 * (x_n_plus_1 + number / x_n_plus_1)\n        count += 1\n\n    # return the value of x_n after the loop is complete\n    return x_n, count"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # Initial estimate\n    x = number/2\n    \n    # Iterate until we find the root\n    while True:\n        # Compute the next estimate\n        x_new = (x + number/x)/2\n        \n        # Check if the difference between the two estimates is too small\n        if abs(x_new - x) < 1e-10:\n            return x_new\n        \n        # Update the current estimate\n        x = x_new"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lps(str):\n    n = len(str)\n    # Create a 2D array to store lengths of subsequences\n    lps_table = [[0 for j in range(n)] for i in range(n)]\n    # Initialize base cases\n    for i in range(n):\n        lps_table[i][i] = 1\n    # Fill the table using dynamic programming\n    for i in range(1, n):\n        for j in range(i):\n            if str[i] == str[j]:\n                lps_table[i][j] = lps_table[j][i-1] + 1\n            else:\n                lps_table[i][j] = max(lps_table[i][j-1], lps_table[j][i])\n    # Return the length of the longest palindromic subsequence\n    return lps_table[n-1][0]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_palindrome(s):\n    return s == s[::-1]\n\ndef longest_palindrome(s):\n    n = len(s)\n    if n == 1 or n == 2:\n        return 1\n    \n    dp = [[False] * n for _ in range(n)]\n    max_length = 1\n    start = 0\n    for i in range(n):\n        dp[i][i] = True\n        if i < n-1 and s[i] == s[i+1]:\n            dp[i][i+1] = True\n            start = i\n            max_length = 2\n    \n    for length in range(3, n+1):\n        for i in range(n-length+1):\n            j = i+length-1\n            if s[i] == s[j] and dp[i+1][j-1]:\n                dp[i][j] = True\n                if length > max_length:\n                    max_length = length\n                    start = i\n    \n    return max_length\n\ndef lps(s):\n    return longest_palindrome(s)"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lps(str):\n    n = len(str)\n    # Initialize two pointers, one for odd-length palindromes and one for even-length palindromes\n    even_ptr, odd_ptr = 0, 0\n    max_length = 1\n    \n    # Check if the first and last characters are same or not\n    if str[0] == str[n-1]:\n        max_length = 2\n        even_ptr += 1\n    \n    # Move the pointers towards the center of the string\n    while even_ptr < n-1 and odd_ptr < n-1:\n        if str[even_ptr] == str[odd_ptr]:\n            max_length = 2\n            even_ptr += 1\n            odd_ptr += 1\n        elif str[even_ptr] < str[odd_ptr]:\n            max_length = 2\n            even_ptr += 1\n        else:\n            max_length = 2\n            odd_ptr += 1\n    \n    # Move the pointers towards the center of the string if the last character is different\n    if str[even_ptr]!= str[odd_ptr]:\n        max_length = 2\n        if str[even_ptr] < str[odd_ptr]:\n            even_ptr += 1\n        else:\n            odd_ptr += 1\n    \n    # Move the pointers towards the center of the string if the even-length palindrome is odd\n    while even_ptr < n-1 and odd_ptr < n-1:\n        if str[even_ptr] == str[odd_ptr]:\n            max_length = 2\n            even_ptr += 1\n            odd_ptr += 1\n        elif str[even_ptr] < str[odd_ptr]:\n            max_length = 2\n            even_ptr += 1\n        else:\n            max_length = 2\n            odd_ptr += 1\n    \n    return max_length"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lps(str):\n    # Create a 2D array to store the lengths of longest palindromic subsequences of all substrings\n    lengths = [[0] * len(str) for _ in range(len(str))]\n\n    # Initialize the first row and column with 0\n    for i in range(len(str)):\n        lengths[i][i] = 1\n\n    # Fill the rest of the array using dynamic programming\n    for i in range(1, len(str)):\n        for j in range(i):\n            if str[i] == str[j]:\n                lengths[i][j] = lengths[i-1][j-1] + 2\n            else:\n                lengths[i][j] = max(lengths[i-1][j], lengths[i][j-1])\n\n    # Return the length of the longest palindromic subsequence\n    return lengths[-1][-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lps(str):\n    n = len(str)\n    dp = [1] * n\n\n    for i in range(1, n):\n        # If the characters are equal, then we can extend the palindrome centered at i by 1\n        if str[i] == str[i - 1]:\n            dp[i] = dp[i - 1] + 2\n\n        # If the characters are not equal, then we need to check for the longest palindrome centered at i - 1 and i.\n        else:\n            # If the palindrome centered at i - 1 is longer than the palindrome centered at i, then we can extend the palindrome centered at i by 1\n            if i > dp[i - 2] + 1:\n                dp[i] = dp[i - 2] + 2\n\n            # If the palindrome centered at i - 1 is shorter than the palindrome centered at i, then we can extend the palindrome centered at i by 2\n            else:\n                dp[i] = dp[i - 1] + 2\n\n    return dp[-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lps(str):\n    \"\"\"\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    n = len(str)\n    # create a 2D table to store the length of palindromic subsequences\n    # the ith row and jth column stores the length of the longest palindromic subsequence ending at i-th character\n    dp = [[0 for j in range(n)] for i in range(n)]\n    # base case: all characters are palindromic\n    dp[0][0] = 1\n    # fill the table using dynamic programming\n    for i in range(1, n):\n        for j in range(1, n):\n            if str[i] == str[j]:\n                dp[i][j] = dp[i-1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[n-1][n-1]\n"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str) \n    # Initialize length of longest palindrome subsequence and start and end indices of the longest palindrome subsequence \n    max_length = 1 \n    start = 0 \n    end = 0 \n\n    # Loop through all possible starting points \n    for i in range(n): \n        # Initialize two pointers at the same index and then move the pointer towards the center \n        left = i \n        right = i \n\n        # Check for odd length palindromes \n        while left >= 0 and right < n and str[left] == str[right]: \n            if right - left + 1 > max_length: \n                max_length = right - left + 1 \n                start = left \n                end = right \n            left -= 1 \n            right += 1 \n\n        # Check for even length palindromes \n        left = i \n        right = i + 1 \n\n        while left >= 0 and right < n and str[left] == str[right]: \n            if right - left + 1 > max_length: \n                max_length = right - left + 1 \n                start = left \n                end = right \n            left -= 1 \n            right += 1 \n\n    # Return the length of the longest palindromic subsequence \n    return max_length "
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lps(str):\n    n = len(str)\n    # create a 2D array to store lengths of longest palindromic subsequence for all prefixes of length i\n    lps_matrix = [[0 for _ in range(n)] for _ in range(n)]\n    # base case: all prefixes have length 1\n    for i in range(n):\n        lps_matrix[i][i] = 1\n    # fill the LPS matrix using dynamic programming approach\n    for length in range(2, n+1):\n        for start in range(n-length+1):\n            end = start + length - 1\n            # check if the substring is a palindrome\n            if str[start] == str[end]:\n                # if yes, update the LPS length\n                lps_matrix[start][end] = lps_matrix[start+1][end-1] + 2\n            else:\n                # if no, update the LPS length by considering only the middle character\n                lps_matrix[start][end] = max(lps_matrix[start+1][end], lps_matrix[start][end-1])\n    # find the length of the longest palindromic subsequence in the given string\n    return lps_matrix[0][n-1]\n"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_palindrome(s):\n    \"\"\"\n    Helper function to check if a string is a palindrome.\n    \"\"\"\n    return s == s[::-1]\n\ndef lps(s):\n    \"\"\"\n    Finds the length of the longest palindromic subsequence in a given string.\n    \"\"\"\n    n = len(s)\n    lps_lengths = [0] * n\n\n    # Find the length of the longest palindromic subsequence for odd length strings\n    for i in range(n):\n        if is_palindrome(s[i:i+2]):\n            lps_lengths[i] = 2\n        else:\n            lps_lengths[i] = 1\n\n    # Find the length of the longest palindromic subsequence for even length strings\n    for i in range(n-2, -1, -1):\n        if i > 0 and is_palindrome(s[i:i+2]):\n            lps_lengths[i] = lps_lengths[i+2] + 2\n        elif i == 0 or is_palindrome(s[i-1:i+1]):\n            lps_lengths[i] = 2\n        else:\n            lps_lengths[i] = 1\n\n    return max(lps_lengths)"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    if n == 0:\n        return 0\n    \n    # Initialize the result and start index variables\n    result = 1\n    start_index = 0\n    \n    # Loop through the string\n    for i in range(1, n):\n        # If the current character is equal to the previous character, extend the longest palindromic subsequence\n        if str[i] == str[i-1]:\n            result += 1\n        else:\n            # If the current character is not equal to the previous character, reset the result and start index\n            result = 1\n            start_index = i\n        \n        # Update the result and start index if the current result is greater than the previous result\n        if result > result_prev:\n            result_prev = result\n            start_index_prev = start_index\n    \n    return result_prev"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (1/n) + (1/n**2) + (1/n**3) +... + (1/n**(n-1))"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return sum([1/i for i in range(1, n)])"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 0\n    else:\n        return 1 / (1/n + harmonic_sum(n-1))"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 1\n    for i in range(n-1):\n        harmonic_sum += 1/i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 0\n    else:\n        return n * (1/n + harmonic_sum(n-1))"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return 1 / (n + 1) + harmonic_sum(n - 1)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 1 / (1 - 1/n)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n < 1:\n        print(\"Invalid input. Please enter a positive integer.\")\n        return\n    \n    harmonic_sum = 0\n    for i in range(1, n):\n        harmonic_sum += 1/i\n    \n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 1 / (1 / (2 * (n-1) + 1)) + harmonic_sum(n-1)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (1/n) + harmonic_sum(n-1)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Create an empty dictionary to store the frequency of each element in the arrays\n    freq = {}\n    \n    # Iterate through the first array and add the frequency of each element to the dictionary\n    for num in array_nums1:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    \n    # Iterate through the second array and check if the frequency of each element is present in the dictionary\n    result = []\n    for num in array_nums2:\n        if num in freq and freq[num] > 0:\n            result.append(num)\n            freq[num] -= 1\n    \n    return result"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    This function takes two arrays as input and returns their intersection.\n    \"\"\"\n    # Initialize an empty list to store the intersection\n    intersection = []\n    \n    # Loop through each element in the first array\n    for num in array_nums1:\n        # Check if the element is present in the second array\n        if num in array_nums2:\n            # If it is, add it to the intersection list\n            intersection.append(num)\n    \n    # Return the intersection list\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Convert arrays to sets to remove duplicates\n    set_nums1 = set(array_nums1)\n    set_nums2 = set(array_nums2)\n\n    # Find the intersection of the two sets\n    intersection = set_nums1.intersection(set_nums2)\n\n    # Convert the intersection back to a list and return it\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # creating a set to store unique elements of the first array\n    unique_set_nums1 = set(array_nums1)\n    # creating an empty set to store common elements of the first array and the second array\n    common_set_nums2 = set()\n    # iterating through the elements of the second array\n    for element in array_nums2:\n        # checking if the element is present in the set of unique elements of the first array\n        if element in unique_set_nums1:\n            # adding the element to the set of common elements of the first array and the second array\n            common_set_nums2.add(element)\n    # returning the list of common elements\n    return list(common_set_nums2)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Create a dictionary to store the elements of array_nums1 and their indices\n    dict_nums1 = {}\n    for i,num in enumerate(array_nums1):\n        dict_nums1[num] = i\n\n    # Iterate through array_nums2 and find the elements in the dictionary\n    intersection = []\n    for num in array_nums2:\n        if num in dict_nums1:\n            intersection.append(array_nums1[num])\n            del dict_nums1[num]\n\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # create two dictionaries to store the elements of the arrays\n    dict_nums1 = {}\n    dict_nums2 = {}\n\n    # populate the dictionaries with the elements of the arrays\n    for num in array_nums1:\n        if num not in dict_nums1:\n            dict_nums1[num] = True\n    \n    for num in array_nums2:\n        if num not in dict_nums2:\n            dict_nums2[num] = True\n    \n    # find the intersection of the dictionaries\n    intersection = set(dict_nums1.keys()) & set(dict_nums2.keys())\n    \n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Find the intersection of two arrays.\n    \"\"\"\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n    intersection = set1.intersection(set2)\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # First, remove duplicates from array_nums1 and array_nums2\n    array_nums1 = list(set(array_nums1))\n    array_nums2 = list(set(array_nums2))\n\n    # Then, find the intersection of the two arrays\n    intersection = [num for num in array_nums1 if num in array_nums2]\n\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_X(tup, x):\n    count = 0\n    for element in tup:\n        if element == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_X(tup, x):\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for elem in tup:\n        if elem == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_X(tup, x): \n    count = 0\n    for item in tup: \n        if item == x: \n            count += 1\n    return count "
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for elem in tup: \n        if elem == x: \n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0 \n    for i in tup: \n        if i == x: \n            count += 1 \n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for i in range(len(list)):\n        if i == 0:\n            list.insert(0, element)\n        else:\n            list.insert(i, element)\n    return list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    # Iterate through the list\n    for i in range(1, len(list)):\n        # Insert the element at the start of the list\n        list.insert(0, element)\n    return list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def insert_element(lst, elem):\n    \"\"\"\n    This function takes a list and an element as input and returns the list with the element inserted before each element in the original list.\n    \"\"\"\n    return [elem] + lst"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    for i in range(len(list)):\n        list.insert(i, element)\n    return list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list,\n    and returns the resulting list.\n    \"\"\"\n    # Create a new list with the element inserted before each element in the original list\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.append(list[i])\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.append(list[i])\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    for i in range(len(list)):\n        list.insert(i, element)\n    return list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list,\n    and returns the resulting list.\n    \"\"\"\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.append(list[i])\n    return new_list"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_coordinates = []\n    for num in numbers:\n        polar_coordinates.append(cmath.polar(num))\n    return polar_coordinates"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        r = num.real\n        phi = cmath.phase(num)\n        print(\"({:.2f}, {:.2f})\".format(r, phi))"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for num in numbers:\n        r = abs(num)\n        theta = cmath.phase(num)\n        result.append((r, theta))\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for number in numbers:\n        # extract real and imaginary parts of the complex number\n        real, imag = cmath.polar(number)\n        # calculate the magnitude of the complex number\n        magnitude = abs(number)\n        # calculate the angle of the complex number\n        angle = cmath.phase(number)\n        # print the polar coordinates of the complex number\n        print(f\"({real}, {imag}) with magnitude {magnitude} and angle {angle}\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_list = []\n    for num in numbers:\n        # convert to polar coordinates\n        angle = cmath.phase(num)\n        mag = abs(num)\n        polar_list.append((mag, angle))\n    return polar_list"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n\n    # iterate through each number in the list\n    for num in numbers:\n\n        # convert the number to a complex number\n        if isinstance(num, int) or isinstance(num, float):\n            c = complex(num, 0)\n        elif isinstance(num, complex):\n            c = num\n        else:\n            print(\"Error: Invalid input type.\")\n            return\n\n        # convert the complex number to polar coordinates\n        r = abs(c)\n        theta = cmath.phase(c)\n\n        # print the polar coordinate\n        print(f\"Polar coordinate for {c} is {r} at angle {theta} rad\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_coords = []\n    for num in numbers:\n        magnitude = cmath.sqrt(num.real**2 + num.imag**2)\n        angle = cmath.phase(num)\n        polar_coords.append((magnitude, angle))\n    return polar_coords"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    Write a python function to convert complex numbers to polar coordinates.\n\n    Args:\n    numbers (list of complex): a list of complex numbers to be converted.\n\n    Returns:\n    polar_coordinates (list of tuples): a list of tuples containing the\n    complex number in polar coordinates.\n    \"\"\"\n    polar_coordinates = []\n    for num in numbers:\n        real, imag = num.real, num.imag\n        magnitude = cmath.sqrt(real ** 2 + imag ** 2)\n        angle = cmath.phase(num)\n        polar_coordinates.append((magnitude, angle))\n    return polar_coordinates"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    complex_numbers = [cmath.exp(cmath.pi*i/180) for i in numbers]\n    polar_coordinates = [(c.real**2 + c.imag**2)**0.5, 180*cmath.degrees(cmath.arg(c))]\n    return [polar_coordinates, complex_numbers]"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_coordinates = []\n    for number in numbers:\n        complex_num = complex(number[0], number[1])\n        polar_coordinate = cmath.polar(complex_num)\n        polar_coordinates.append(polar_coordinate)\n    return polar_coordinates"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_integer(lst):\n    count = 0\n    for num in lst:\n        if type(num) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_integer(list1):\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if type(element) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_integer(lst):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in lst:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_integer(lst):\n    count = 0\n    for item in lst:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # Generate all possible combinations with repetition using itertools.combinations_with_replacement\n    combinations = list(combinations_with_replacement(l, n))\n    \n    # Create a list with a tuple for each combination\n    combined_list = []\n    for combination in combinations:\n        combined_list.append((combination))\n    \n    return combined_list"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combos = list(combinations_with_replacement(l, n))\n    return [tuple(comb) for comb in combos]\n"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(lst, n):\n    '''\n    Generate all combinations (with repetition) of the elements of the list and return a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(lst, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n\n    # Generate all combinations of length n using combinations_with_replacement function\n    combs = list(combinations_with_replacement(l, n))\n\n    # Convert each combination to a tuple and return as list\n    return [tuple(comb) for comb in combs]"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Generate all combinations (with repetition) of the elements of the list l and return a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # Initialize an empty list to store the tuples\n    comb_list = []\n    # Generate all combinations (with repetition) of the elements of the list\n    for comb in combinations_with_replacement(l, n):\n        # Add each combination to the list\n        comb_list.append(tuple(comb))\n    return comb_list"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    num = 2\n    while num <= n:\n        is_prime = True\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n        num += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    # Initialize a counter variable to keep track of the number of prime numbers\n    count = 0\n    # Loop through each number from 2 to n-1\n    for i in range(2, n):\n        # If the number is prime, increment the counter\n        if all(i % j!= 0 for j in range(2, int(i**0.5)+1)):\n            count += 1\n    # Return the final count\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n\n    # Create a boolean list of size n+1 and initialize all values as True\n    is_prime = [True] * (n+1)\n\n    # Iterate through all numbers from 2 to n\n    for i in range(2, int(n**0.5)+1):\n        # If i is prime, mark all multiples of i as non-prime\n        if is_prime[i]:\n            for j in range(i**2, n+1, i):\n                is_prime[j] = False\n\n    # Count the number of prime numbers less than n\n    count = 0\n    for i in range(2, n+1):\n        if is_prime[i]:\n            count += 1\n\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_prime(n):\n    '''\n    This function takes in a number and returns True if it is prime, False otherwise.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    '''\n    This function takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_prime(num):\n    '''\n    Write a helper function to check if a number is prime or not.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        if all(i % j!= 0 for j in range(2, int(i**0.5)+1)):\n            count += 1\n    return count\n"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_numbers(a, b):\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_numbers(a, b):\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_numbers(a,b):\n    return (b,a)\n\nprint(swap_numbers(5,7)) # Output: (7, 5)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_numbers(a,b):\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_numbers(a, b):\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_val = 0\n    max_tuple = None\n\n    for tup in [test_tup1, test_tup2]:\n        max_val = max(max_val, max(tup))\n        max_tuple = tup if max_val == max(tup) else max_tuple\n\n    return max_tuple"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1[0] > test_tup2[0]:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n\n    if len(test_tup1) > len(test_tup2):\n        return test_tup1\n    elif len(test_tup1) < len(test_tup2):\n        return test_tup2\n    else:\n        return test_tup1"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Check if the length of the tuples is same\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The length of the two tuples are not same.\")\n        return\n    # Maximize the elements of the two tuples\n    max_tup = tuple(max(x, y) for x, y in zip(test_tup1, test_tup2))\n    # Return the max_tup\n    return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n\n    # get the maximum element from each tuple\n    max_val1 = max(test_tup1)\n    max_val2 = max(test_tup2)\n\n    # get the minimum element from each tuple\n    min_val1 = min(test_tup1)\n    min_val2 = min(test_tup2)\n\n    # compare the maximum elements\n    if max_val1 > max_val2:\n        # if max_val1 is greater than max_val2, swap the two elements\n        return (max_val1, min_val2)\n    else:\n        # if max_val1 is less than or equal to max_val2, return the tuple as it is\n        return (max_val1, max_val2)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = (0, 0)\n    if test_tup1 > test_tup2:\n        max_tup = test_tup1\n    else:\n        max_tup = test_tup2\n    return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    \n    # Find the maximum value in each tuple\n    max1 = max(test_tup1)\n    max2 = max(test_tup2)\n    \n    # Create a new tuple with the maximum value in each tuple\n    max_tuple = (max1, max2)\n    \n    return max_tuple"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Check if the length of the two tuples are the same\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The two tuples must have the same length.\")\n        return\n    \n    # Create a list of tuples to store the elements of the two tuples\n    tup_list = [(i, j) for i in test_tup1 for j in test_tup2]\n    \n    # Sort the list of tuples in descending order of the element values\n    sorted_tup_list = sorted(tup_list, key=lambda x: x[1], reverse=True)\n    \n    # Create a new tuple containing the maximum element values from the two tuples\n    max_tup = tuple(x[0] for x in sorted_tup_list)\n    \n    # Return the maximum tuple\n    return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n    \"\"\"\n    # Check if the input tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        return None\n    \n    # Sort the two tuples in descending order\n    max_tup = max(test_tup1, test_tup2, key=len)\n    \n    return max_tup"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    # Define a list of prime numbers less than or equal to 2^64\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n\n    # Find the nth newman\u2013shanks\u2013williams prime number\n    for i in range(n):\n        if i % 2 == 1:\n            j = 1\n        else:\n            j = 0\n        for prime in primes:\n            if j % prime == 0:\n                break\n            j += 1\n        else:\n            return prime"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Define a function to check if a number is a newman-shanks-williams prime\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n    \n    # Define the function to find the nth newman-shanks-williams prime\n    def nth_newman_prime(n):\n        # Find the highest newman-shanks-williams prime number\n        highest_prime = 29\n        # Initialize the count of newman-shanks-williams primes to 0\n        count = 0\n        \n        # Loop through all numbers starting from 3\n        for i in range(3, highest_prime+1):\n            # Check if the current number is a newman-shanks-williams prime\n            if is_prime(i):\n                count += 1\n                # Check if the count reaches n\n                if count == n:\n                    return i\n        # If n is not found, return -1\n        return -1\n    \n    # Call the nth_newman_prime function with n as an argument\n    return nth_newman_prime(n)"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n <= 0:\n        return \"Please enter a positive integer.\"\n\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                return False\n        return True\n\n    def newman_shanks_williams_prime(count):\n        i = 1\n        while True:\n            if is_prime(i) and is_prime(2*i+1):\n                count += 1\n                if count == n:\n                    return i\n            i += 1\n\n    return newman_shanks_williams_prime(0)"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 1:\n        return 2\n    else:\n        p = 3\n        while True:\n            if all(i % p!= 0 for i in range(2, int(p**0.5) + 1)):\n                return p\n            p += 2"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def newman_prime(n): \n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    # Initialize a flag variable to True\n    flag = True\n    \n    # Check if the input is valid\n    if n < 1:\n        raise ValueError(\"Input should be a positive integer.\")\n    \n    # Initialize a list to store the prime numbers\n    primes = []\n    \n    # Loop through the numbers from 2 to n-1\n    for i in range(2, n):\n        \n        # Check if i is a prime number\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        \n        # If i is a prime number, add it to the list\n        if is_prime:\n            primes.append(i)\n            \n    # Check if the list has n elements\n    if len(primes)!= n:\n        raise ValueError(\"The list of prime numbers does not have n elements.\")\n    \n    # Return the nth prime number\n    return primes[n-1]"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth Newman-Shanks-Williams prime number.\n\n    Parameters:\n    n (int): The index of the prime number to find.\n\n    Returns:\n    int: The nth Newman-Shanks-Williams prime number.\n    \"\"\"\n    # Start with the first prime number\n    p = 2\n\n    # Iterate until we find the nth prime number\n    while n > 0:\n        # Check if p is a prime number\n        is_prime = True\n        for i in range(2, int(p**0.5)+1):\n            if p % i == 0:\n                is_prime = False\n                break\n        # If p is a prime number, increment its count\n        if is_prime:\n            n -= 1\n        p += 1\n\n    return p"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Initialize count and prime list\n    count = 0\n    prime_list = []\n\n    # Check if n is 1 or 2\n    if n == 1 or n == 2:\n        return n\n\n    # Loop through all numbers up to n\n    for i in range(2, n + 1):\n        # If i is prime, add it to prime list and increment count\n        if is_prime(i):\n            prime_list.append(i)\n            count += 1\n            # If we have found the nth prime number, return it\n            if count == n:\n                return prime_list[-1]\n\ndef is_prime(n):\n    '''\n    Write a function to check if a number is prime.\n    '''\n    # Check if n is less than 2\n    if n < 2:\n        return False\n\n    # Check if n is 2\n    if n == 2:\n        return True\n\n    # Check if n is even\n    if n % 2 == 0:\n        return False\n\n    # Loop through all numbers up to the square root of n\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n\n    # If we made it through all the loops without finding a divisor, n is prime\n    return True"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def newman_prime(n): \n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    # Define the sequence of prime numbers\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]\n    \n    # Loop through the primes to find the nth newman-shanks-williams prime\n    for prime in primes:\n        if prime**2 > n:\n            break\n        count = 0\n        # Loop through all primes up to the square root of n\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                count += 1\n                if count > 2:\n                    break\n        # If no factors exceed 2, it's a newman-shanks-williams prime\n        if count == 0:\n            return prime\n    # If the loop completes without finding a newman-shanks-williams prime, return None\n    return None"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n\n    # Initialize a list to store the prime numbers found so far\n    prime_list = []\n\n    # Initialize two variables for the sum of the first and last digits of the composite number\n    a = 0\n    b = 1\n\n    # Iterate n times\n    for i in range(n):\n\n        # Calculate the composite number using the formula: c = a * 10^i + b\n        c = a * 10 ** i + b\n\n        # Check if the composite number is prime using the Sieve of Eratosthenes algorithm\n        is_prime = True\n        for j in range(2, int(c ** 0.5) + 1):\n            if c % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            prime_list.append(c)\n\n        # Update a and b for the next iteration\n        a = b\n        b = 10 * b + 1\n\n    # Return the nth newman\u2013shanks\u2013williams prime number\n    return prime_list[n - 1]"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    # Initialize variables for counting number of prime numbers\n    count = 0\n    # Initialize variables for counting number of even numbers\n    even_count = 0\n    \n    # Initialize variables for counting number of digits of the nth prime number\n    num_digits = 0\n    \n    # Initialize variables for counting number of digits of the nth even number\n    even_num_digits = 0\n    \n    # Initialize variables for counting number of digits of the nth newman prime number\n    newman_prime_num_digits = 0\n    \n    # Initialize variables for counting number of digits of the nth newman prime number\n    newman_even_prime_num_digits = 0\n    \n    # Initialize variables for counting number of digits of the nth newman prime number\n    williams_prime_num_digits = 0\n    \n    # Initialize variables for counting number of digits of the nth newman prime number\n    williams_even_prime_num_digits = 0\n    \n    # Initialize variables for counting number of digits of the nth newman prime number\n    newman_williams_prime_num_digits = 0\n    \n    # Initialize variables for counting number of digits of the nth newman prime number\n    newman_williams_even_prime_num_digits = 0\n    \n    # Initialize variables for counting number of digits of the nth newman prime number\n    newman_even_williams_prime_num_digits = 0\n    \n    # Initialize variables for counting number of digits of the nth newman prime number\n    newman_even_williams_even_prime_num_digits = 0\n    \n    # Initialize variables for counting number of digits of the nth newman prime number\n    williams_even_newman_prime_num_digits = 0\n    \n    # Initialize variables for counting number of digits of the nth newman prime number\n    williams_even_newman_even_prime_num_digits = 0\n    \n    # Initialize variables for counting number of digits of the nth newman prime number\n    newman_williams_even_prime_num_digits = 0\n    \n    # Initialize variables for counting number of digits of the nth newman prime number\n    newman_williams_even_even_prime_num_digits = 0\n    \n    # Initialize variables for counting number of digits of the nth newman prime number\n    newman_williams_even_even_even_prime_num_digits = 0\n    \n    # Initialize variables for counting number of digits of the nth newman prime number\n    newman_even_williams_even_even_prime_num_digits = 0\n    \n    # Initialize variables for counting number of digits of the nth newman prime number\n    newman_even_williams_even_even_even_prime_num_digits = 0\n    \n    # Initialize variables for counting number of digits of the nth newman prime number\n    williams_even_newman_even_even_prime_num_digits = 0\n    \n    # Initialize variables for counting number of digits of the nth newman prime number\n    williams_even_newman_even_even_even_prime_num_digits = 0\n    \n    # Initialize variables for counting number of digits of the nth newman prime number\n    newman_williams_even_even_williams_prime_num_digits = 0\n    \n    # Initialize variables for counting number of digits of the nth newman prime number\n    newman_williams_even_even_williams_even_prime_num_digits = 0\n    \n    # Initialize variables for counting number of digits of the nth newman prime number\n    newman_even_williams_even_even_williams_prime_num_digits = 0\n    \n    # Initialize variables for counting number of digits of the nth newman prime number\n    newman_even_williams_even_even_williams_even_prime_num_digits = 0\n    \n    # Initialize variables for counting number of digits of the nth newman prime number\n    williams_even_newman_even_even_williams_prime_num_digits = 0\n    \n    # Initialize variables for counting number of digits of the nth newman prime number\n    williams_even_newman_even_even_williams_even_prime_num_digits = 0\n    \n    # Initialize variables for counting number of digits of the nth newman prime number\n    newman_williams_even_even_even_williams_prime_num_digits = 0\n    \n    # Initialize variables for"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n\n    # Check if both tuples have the same number of elements\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Both tuples must have the same number of elements.\")\n        return None\n\n    # Perform element-wise division operation across the tuples\n    result_tup = tuple([x / y for x, y in zip(test_tup1, test_tup2)])\n\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Loop through the tuples and perform element-wise division\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Check if both input tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Both input tuples must have the same length.\")\n        return\n    \n    # Perform element-wise division operation\n    result_tup = tuple(a / b for a, b in zip(test_tup1, test_tup2))\n    \n    # Print the result tuple\n    print(\"Resulting tuple:\", result_tup)"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # check if input tuples are not empty\n    if not test_tup1 or not test_tup2:\n        print(\"Error: Both input tuples must be non-empty\")\n        return None\n    \n    # check if input tuples have same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Both input tuples must have the same length\")\n        return None\n    \n    # perform element-wise division operation\n    result_tup = tuple(a / b for a, b in zip(test_tup1, test_tup2))\n    \n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        try:\n            result_tup += (test_tup1[i] / test_tup2[i],)\n        except ZeroDivisionError:\n            result_tup += (float('inf'),)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple(x / y for x, y in zip(test_tup1, test_tup2))"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Check if the length of both tuples is equal\n    if len(test_tup1) == len(test_tup2):\n        # Loop through each element of the tuples and perform element-wise division\n        result_tup = ()\n        for i in range(len(test_tup1)):\n            # Perform element-wise division\n            result_tup += (test_tup1[i] / test_tup2[i],)\n        return result_tup\n    else:\n        return \"Error: The length of both tuples should be equal.\""
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] / test_tup2[i])\n    return result"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    first_part = list1[:L]\n    second_part = list1[L:]\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if L >= len(list1):\n        return (list1, [])\n    else:\n        return (list1[:L], list1[L:])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    \"\"\"\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    \"\"\"\n    # split list1 into two parts with length L\n    list1_part1 = list1[:L]\n    list1_part2 = list1[L:]\n    \n    # return the resulting lists as a tuple\n    return (list1_part1, list1_part2)\n"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # create empty lists to hold the two parts\n    part1 = []\n    part2 = []\n\n    # loop through the list and add each element to either part1 or part2\n    for element in list1:\n        if len(part1) < L:\n            part1.append(element)\n        else:\n            part2.append(element)\n\n    # convert the two parts to lists and return them in a tuple\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_two_parts(lst, L):\n    '''\n    This function takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Get the length of the list\n    N = len(lst)\n    \n    # Check if L is less than or equal to 0 or greater than N\n    if L <= 0 or L > N:\n        raise ValueError(\"L should be a positive integer less than or equal to the length of the list.\")\n    \n    # Check if the length of the first part is equal to L\n    if N % L == 0:\n        first_part = lst[:L]\n        second_part = lst[L:]\n    else:\n        first_part = lst[:N//L*(L-1)]\n        second_part = lst[N//L*(L-1):]\n    \n    # Return the two parts as a tuple\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    list2 = []\n    for i in range(len(list1)):\n        if i < L:\n            list2.append(list1[i])\n        else:\n            break\n    return (list1[:L], list2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    list1 = list1.copy() # make a copy of the original list in case it is modified by the function\n    n = len(list1)\n    if n <= L:\n        return list1, []\n    else:\n        return list1[:L], list1[L:]"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Use slicing to split the list into two parts\n    part1 = list1[:L]\n    part2 = list1[L:]\n\n    # Return the two parts in a tuple\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Convert the list into a set to ensure that each element appears only once\n    list1 = set(list1)\n    \n    # Split the set into two parts where the length of the first part is L\n    first_part = list(list1)[:L]\n    second_part = list(list1)[L:]\n    \n    # Convert the first and second parts back into lists\n    first_part = list(first_part)\n    second_part = list(second_part)\n    \n    # Return the resulting lists in a tuple\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    first_part = list1[:L]\n    second_part = list1[L:]\n    return first_part, second_part"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_age_yrs = h_age * 7\n    return dog_age_yrs"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # Calculate age in dog's years\n    dog_age = (12 * 365) / 7\n    \n    # Calculate age in human years\n    human_age = 12\n    \n    # Calculate the difference between the two ages\n    diff_age = dog_age - human_age\n    \n    # Print the result\n    print(\"Dog's age in dog's years:\", dog_age)\n    print(\"Dog's age in human years:\", human_age)\n    print(\"Difference between dog's and human ages:\", diff_age)"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    days_per_year = 365\n    dog_years = h_age * days_per_year\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    # convert human years to dog years\n    dog_years = h_age * 7\n    # calculate age in dog years\n    dog_age = dog_years / 365\n    # round the result and return\n    return round(dog_age, 2)"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n    \"\"\"\n    return 7 * h_age"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n    \"\"\"\n    dog_years = h_age * 7\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    years_in_dog_years = 7 # assuming a dog is 7 years old per year\n    dog_age = h_age * years_in_dog_years\n    return dog_age\n"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n\n    Args:\n    h_age (int): The height of the dog in inches.\n\n    Returns:\n    int: The age of the dog in dog years.\n    \"\"\"\n    dog_years = h_age * 7 * 0.25\n    return int(dog_years)"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n\n    # Calculate the dog's age in dog's years\n    dog_age_years = h_age / 120\n\n    # Print the dog's age in dog's years\n    print(\"The dog's age in dog's years is:\", dog_age_years)"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # initialize an empty list to store the resulting lists\n    result = []\n    # loop through the input list and split it for every nth element\n    for i in range(0, len(S), step):\n        # use the slice notation to create a copy of the original list from the current index to the end\n        result.append(S[i:])\n    # return the resulting list\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    split_list = []\n    for i in range(0, len(S), step):\n        split_list.append(S[i:i+step])\n    return split_list"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    n = len(S)\n    # initialize the result list with an empty list\n    result = []\n    # loop through the list and append every nth element to a new list in the result list\n    for i in range(0, n, step):\n        result.append(S[i:i+step])\n    # return the result list\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if step <= 0:\n        raise ValueError('The step must be a positive integer.')\n    \n    if len(S) % step!= 0:\n        raise ValueError('The length of the input list must be a multiple of the step.')\n    \n    return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    S_split = []\n    n_split = len(S) // step\n    for i in range(n_split):\n        S_split.append(S[i*step:i*step+step])\n    return S_split"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    # create an empty list to hold the resulting lists\n    result = []\n    # loop through the list, splitting it every n elements\n    for i in range(0, len(S), step):\n        # create a new list with the current slice\n        sublist = S[i:i+step]\n        # add the sublist to the result list\n        result.append(sublist)\n    return result"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    area = 6 * l ** 2\n    print(\"The lateral surface area of a cube with a side length of\", l, \"is\", area)\n"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l*l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l*l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    \"\"\"\n    Write a function to find the lateral surface area of a cube given its side length.\n    \"\"\"\n    return 6 * l * l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    s = 6 * l**2 # side length\n    return 2 * s # lateral surface area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_of_squares = 0\n    i = 1\n    while i <= n:\n        sum_of_squares += i**2\n        i += 2\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_squares = 0  \n    for i in range(2, n+1, 2):  \n        sum_squares += i*i  \n    return sum_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):  \n        sum += i*i  \n\n    return sum  "
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    total = 0  \n    for i in range(n+1):  \n        total += i*i  \n    return total  "
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n\n    #initialize sum variable\n    sum = 0\n\n    #iterate n times\n    for i in range(1, n+1, 2):\n        #add the square of i to sum\n        sum += i**2\n\n    #return sum\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    for i in range(1, n+1, 2):\n        sum_of_squares += i*i\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    # initialize sum variable to 0\n    sum = 0\n    \n    # iterate through the first n odd numbers\n    for i in range(1, n+1, 2):\n        # add the square of the current odd number to the sum variable\n        sum += i ** 2\n    \n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0  \n    for i in range(1, n+1, 2):  \n        sum += i*i  \n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_of_squares = 0\n    count = 1\n    while count <= n:\n        sum_of_squares += count**2\n        count += 2\n    return sum_of_squares"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    i = 1\n    while i <= n:\n        print(\"*\" * i)\n        i += 1"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    # create a string with n asterisks\n    star_num = \"*\" * n\n    \n    # print the string\n    print(star_num)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_star_num(n): \n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    # Initialize the number of stars to 0\n    stars = 0\n    # Loop through each digit in the number and add the appropriate number of stars to the total\n    for digit in str(n):\n        if int(digit) > 0:\n            stars += int(digit)\n    # Return the total number of stars\n    return stars"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    # Initialize the variable to hold the star number\n    star_num = 1\n\n    # Loop through the range of numbers from 1 to n\n    for i in range(1, n+1): \n        # Add the current value to the star number\n        star_num *= i\n\n    # Return the star number\n    return star_num"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    # initialize variables\n    i = 1\n    j = 1\n    star_num = 0\n    # loop until n stars have been printed\n    while i <= n:\n        # loop until j spaces have been printed\n        while j > 0:\n            # print a space\n            print(' ', end='')\n            j -= 1\n        # loop until i stars have been printed\n        while i > 0:\n            # print a star\n            print('*', end='')\n            i -= 1\n        # increment the number of stars printed\n        star_num += 1\n        # print a new line\n        print()\n        i += 1\n        j += 2\n    # return the value of the star_num variable\n    return star_num"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_star_num(n):\n    '''\n    This function will take an integer n and return then'th star number.\n    '''\n    # initialize a variable to hold the number of stars\n    count = 1\n    \n    # loop through the numbers from 1 to n\n    for i in range(1, n+1):\n        # print the number of stars\n        print('*' * count)\n        # increment the count variable\n        count += 1"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    if n < 1 or n > 20:\n        print(\"Invalid input. Please enter a number between 1 and 20.\")\n        return\n    \n    # Define the first two star numbers\n    first_star = 1\n    second_star = 1\n    \n    # Calculate the nth star number\n    for i in range(2, n):\n        # Calculate the sum of the previous two star numbers\n        sum_of_stars = first_star + second_star\n        \n        # Update the first and second star numbers for the next iteration\n        first_star = second_star\n        second_star = sum_of_stars\n    \n    # Print the nth star number\n    print(\"The\", n, \"star number is:\", second_star)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    count = 1\n    for i in range(n):\n        count *= 2\n    return count"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    # initialize variables\n    count = 1\n    result = 1\n    # loop through n-1 times to calculate the result\n    for i in range(n-1):\n        result = result + count\n        count = count + 2\n    # return the result\n    return result"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_star_num(n):\n    # Initialize the counter variable\n    count = 1\n    \n    # Loop through the numbers from 1 to n\n    for i in range(1, n+1):\n        # Print the current number followed by an asterisk\n        print(count, end=' ')\n        \n        # Increment the counter variable\n        count += 1\n        \n    # Print a newline character to move to the next line\n    print()"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    ascii_value = ord(k)\n    return ascii_value"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    # get the ascii value of the character\n    ascii_value = ord(k)\n    # return the ascii value\n    return ascii_value"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    This function takes a character k as input and returns the ascii value of that character.\n    '''\n    k = ord(k)\n    return k"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    \"\"\"\n    Write a function to find the ascii value of a character.\n    \"\"\"\n    if type(k)!= str:\n        return None\n    try:\n        return ord(k)\n    except:\n        return None"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if len(k)!= 1:\n        return \"Invalid input.\"\n    else:\n        return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    \"\"\"\n    Write a function to find the ascii value of a character.\n    \"\"\"\n    return ord(k)"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):  \n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    even_sum = 0\n    even_index_sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            even_sum += arr[i]\n            even_index_sum += i\n    \n    return even_sum + even_index_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            if i % 2 == 0:\n                even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):  \n    \"\"\"\n    This function takes a list as input and finds the sum of even numbers at even positions.\n    \"\"\"\n    sum = 0  \n    for i in range(len(arr)):  \n        if i % 2 == 0:  \n            if arr[i] % 2 == 0:  \n                sum += arr[i]  \n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    even_count = 0\n\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            if i % 2 == 0:\n                sum += arr[i]\n                even_count += 1\n\n    if even_count == 0:\n        return \"No even numbers found.\"\n    else:\n        return \"The sum of even numbers at even positions is:\", sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum\n"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):\n    sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n\n    # Initialize variables to store the sum and even index\n    even_sum = 0\n    even_index = 0\n\n    # Loop through the array\n    for i in range(len(arr)):\n        # Check if the element is even and at an even index\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            # Add the element to the sum\n            even_sum += arr[i]\n            # If the index is greater than the even index, update the even index\n            if i > even_index:\n                even_index = i\n\n    # Return the sum of even numbers at even positions\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    even_index = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n            if even_index % 2 == 0:\n                sum += arr[i]\n                even_index += 1\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i ** 5\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum_of_even_numbers = 0\n    for i in range(2, n+1, 2):\n        sum_of_even_numbers += i ** 5\n    return sum_of_even_numbers"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum_of_evens = 0\n    for i in range(1, n+1):\n        sum_of_evens += i**5\n    return sum_of_evens"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_Power_Sum(n): \n    # initialize the sum variable to 0\n    total = 0 \n    # loop through the even numbers from 2 to n \n    for i in range(2, n+1, 2): \n        # calculate the power of the number using the exponentiation operator ** \n        power = i ** 5 \n        # add the power to the total sum \n        total += power \n    # return the total sum \n    return total "
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_Power_Sum(n):\n    '''\n    This function takes in an integer n and returns the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    return sum([i ** 5 for i in range(2, n+1, 2)])"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum = 0\n    i = 0\n    while i <= n:\n        if i**5 % 2 == 0:\n            sum += i\n        i += 1\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    even_natural_numbers = []\n    for i in range(2, n+1):\n        if i % 2 == 0:\n            even_natural_numbers.append(i)\n    sum_even_natural_numbers = sum([i**5 for i in even_natural_numbers])\n    return sum_even_natural_numbers"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    i = 2\n    while i <= n:\n        if i**5 % 2 == 0:\n            sum += i\n        i += 1\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, 2*n, 2): # iterate through even natural numbers from 2 to 2n\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    This function takes an integer `n` and returns the sum of the first `n` even natural numbers that are raised to the fifth power.\n    \"\"\"\n    result = 0\n    for i in range(n):\n        result += i**5\n    return result"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_list)):\n        rear_list.append(test_list[i][-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    \"\"\"\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    \"\"\"\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_list)):\n        rear_list.append(test_list[i][-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_elements = []\n    for tuple in test_list:\n        rear_elements.append(tuple[-1])\n    return rear_elements"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tuple_item in test_list:\n        rear_list.append(tuple_item[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_elements = []\n    for i in test_list:\n        rear_elements.append(i[1])\n    return rear_elements"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tuple_ in test_list:\n        rear_list.append(tuple_[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        if i == len(test_list) - 1:\n            result.append(test_list[i][1])\n        else:\n            result.append(test_list[i][0])\n    return result"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # initialize an empty list to store the result\n    result = []\n\n    # iterate through the tuples\n    for i in range(len(test_tup1)):\n        # if the index is the same, add the difference between the elements of the two tuples\n        if i == len(test_tup2) - 1:\n            result.append(test_tup1[i] - test_tup2[i])\n        else:\n            result.append(test_tup1[i] - test_tup2[i])\n            result.append(test_tup1[i] - test_tup2[i+1])\n\n    return result"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    \"\"\"\n\n    # Check if the length of the two tuples are equal\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples must have the same length.\")\n        return\n\n    # Iterate over the tuples and subtract the elements with the same index\n    for i in range(len(test_tup1)):\n        test_tup1[i] -= test_tup2[i]\n\n    # Return the modified tuple\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = []\n    for i in range(len(test_tup1)):\n        if i in test_tup2:\n            result_tup.append(test_tup1[i] - test_tup2[test_tup2.index(i)])\n        else:\n            result_tup.append(test_tup1[i])\n    return tuple(result_tup)"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return result"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        if i < len(test_tup2):\n            result_tup += (test_tup1[i] - test_tup2[i],)\n        else:\n            result_tup += (test_tup1[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    sub_tup = []\n    for i in range(len(test_tup1)):\n        sub_tup.append(test_tup1[i] - test_tup2[i])\n    return sub_tup"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum_even_binomial_coeff = 0\n    for i in range(2, n+1):\n        binomial_coeff = math.comb(n, i)\n        if i % 2 == 0:\n            sum_even_binomial_coeff += binomial_coeff\n    return sum_even_binomial_coeff"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n): \n    '''\n    This function takes in a positive integer n and returns the sum of even index binomial coefficients.\n    '''\n    \n    # Initialize a variable to store the sum of even index binomial coefficients\n    even_sum = 0\n    \n    # Iterate through all the numbers from 1 to n\n    for i in range(1, n+1):\n        \n        # Calculate the even index binomial coefficient of i\n        even_coeff = math.comb(n, i)\n        \n        # Check if the even index binomial coefficient is even\n        if even_coeff % 2 == 0:\n            \n            # Add the even index binomial coefficient to the sum\n            even_sum += even_coeff\n            \n    return even_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # initialize variables\n    coeff_sum = 0\n    even_coeff = 1\n\n    # loop through even indices of the numbers from 2 to n\n    for i in range(2, n+1, 2):\n        # calculate the binomial coefficient of i and j\n        j = 0\n        for k in range(i, n+1):\n            if k % 2 == 0:\n                j += 1\n        coeff = math.comb(n, j)\n\n        # add the even binomial coefficient to the sum\n        if i % 2 == 0:\n            coeff_sum += coeff\n\n        # update even_coeff to the next even number\n        even_coeff += 2\n\n    # return the sum of even binomial coefficients\n    return coeff_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_binomial_Coeff_Sum(n):\n    '''\n    This function takes a positive integer n as input and calculates the sum of the even index binomial coefficients.\n    '''\n    # Initialize variables\n    even_sum = 0\n    # Loop through numbers 0 to n-1\n    for i in range(n):\n        # Calculate the binomial coefficient\n        binomial = math.comb(n, i)\n        # Check if the index is even\n        if i % 2 == 0:\n            even_sum += binomial\n    # Return the sum\n    return even_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum_even = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            sum_even += math.factorial(i) // math.factorial(2*i-1)\n    return sum_even"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n\n    # Initialize the sum variable\n    sum = 0\n\n    # Loop through the values of n\n    for i in range(1, n+1):\n\n        # Calculate the even index binomial coefficient\n        even_coeff = math.comb(i, 2)\n\n        # If the even index binomial coefficient is even, add it to the sum variable\n        if even_coeff % 2 == 0:\n            sum += even_coeff\n\n    # Return the sum of even index binomial coefficients\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    even_sum = 0\n    for i in range(1, n+1, 2):\n        even_sum += math.comb(n, i)\n    return even_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n\n    # Initialize variables\n    sum_even_binomial_coeffs = 0\n\n    # Calculate the sum of even index binomial coefficients\n    for i in range(2, n+1):\n        binomial_coeff = math.comb(n, i)\n        if i % 2 == 0:\n            sum_even_binomial_coeffs += binomial_coeff\n\n    return sum_even_binomial_coeffs"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # Initialize variables for even index binomial coefficients\n    even_binomial = [0, 2]\n\n    # Iterate over odd index binomial coefficients\n    for i in range(2, n+1):\n        # Calculate the even index binomial coefficient\n        even_binomial.append(even_binomial[i-1] + even_binomial[i-2])\n\n    # Initialize variables for sum of even index binomial coefficients\n    even_sum = 0\n\n    # Calculate the sum of even index binomial coefficients\n    for i in range(0, n+1, 2):\n        even_sum += even_binomial[i]\n\n    return even_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    # initialize sum of even binomial coefficients to zero\n    even_sum = 0\n    # calculate sum of even index binomial coefficients using a loop\n    for i in range(0, n+1, 2):\n        # calculate binomial coefficient using math.comb() function\n        even_sum += math.comb(n, i)\n    # return sum of even binomial coefficients\n    return even_sum"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = 3.14*(r**2)*h\n    return vol"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = 3.14 * r**2 * h\n    return vol"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    V = 3.14*r**2*h\n    return V"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    v = (3.14159265359 * r**2 * h) / 3.0\n    return v"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    # Using formula for volume of cylinder\n    V = (1/3) * pi * r * r * h\n    return V"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14*(r**2)*h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14159 * r**2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (1/3) * 3.14 * r**2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    \"\"\"\n    vol = 3.14 * r * r * h\n    return vol"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14 * r**2 * h\n    return volume"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    result = {}\n    for key, value in dict.items():\n        if value >= n:\n            result[key] = value\n    return result"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_filter(dict, n):\n    # Filter the dictionary to only include entries with values greater than or equal to n\n    filtered_dict = {k: v for k, v in dict.items() if v >= n}\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key,value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for key,value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {key: value for key, value in dict.items() if value >= n}\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {k:v for k, v in dict.items() if v >= n}\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_filter(dict,n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {key: value for key, value in dict.items() if value >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_filter(dict, n):\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        else:\n            count += 1\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i]!= test_tup[i-1]:\n            break\n        count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        elif test_tup[i] < test_tup[i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        if test_tup[i]!= test_tup[i-1]:\n            count += 1\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            break\n        elif test_tup[i-1]!= test_tup[i]:\n            count += 1\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            count += 1\n        elif test_tup[i] == test_tup[i-1]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            count += 1\n        elif test_tup[i]!= test_tup[i-1]:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        else:\n            if test_tup[i]!= test_tup[i-1]:\n                break\n            else:\n                count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        elif test_tup[i]!= test_tup[i-1]:\n            count += 1\n            if count == 1:\n                return count\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i+1]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n <= 0:\n        return \"Invalid input. Please enter a positive integer.\"\n    elif n == 1:\n        return 1\n    else:\n        decagonal = 1\n        for i in range(1, n):\n            decagonal += (2*i-1)*(i*i+1)\n        return decagonal"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal = 1\n    for i in range(1, n+1):\n        decagonal += (4*i*i - 6*i + 1)\n    return decagonal"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Initialize the first two numbers in the sequence\n    a = 1\n    b = 6\n\n    # Loop through each number in the sequence\n    for i in range(n):\n        # Add the previous two numbers in the sequence\n        c = a + b\n\n        # Increment the values of a and b for the next iteration\n        a = b\n        b = c\n\n        # Print the current number in the sequence\n        print(c, end=' ')"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    def decagonal_number(n):\n        return (n * (3*n-1)) // 2\n    \n    return decagonal_number(n)\n"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Base case\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    # Recursive case\n    else:\n        return n + is_num_decagonal(n-1)"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal_num = 1\n    for i in range(1, n+1):\n        decagonal_num += (i * (2 * i - 1)) / 2\n    return decagonal_num"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n\n    # Define a helper function to find the sum of the first n terms of the sequence\n    def sum_terms(n):\n        return (n * (n + 1)) // 2\n\n    # Find the sum of the first 10 terms of the sequence\n    sum_first_10 = sum_terms(10)\n\n    # Calculate the nth term of the sequence\n    nth_term = sum_first_10 - sum_terms(n - 10)\n\n    # Return the nth term of the sequence\n    return nth_term"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n\n    # Initialize a counter variable to keep track of the number of squares in the decagonal triangle\n    counter = 1\n\n    # Calculate the nth decagonal number\n    nth_decagonal = (4 * (counter * (counter + 1) + 1) ** 2) // 2\n\n    # Check if the nth decagonal number is equal to the input number\n    if nth_decagonal == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # calculate the sum of the squares of the decagonal numbers up to n\n    decagonal_sum = sum([i*i for i in range(1,n+1)])\n    \n    # check if the sum is a palindrome\n    is_palindrome = str(decagonal_sum) == str(decagonal_sum)[::-1]\n    \n    return is_palindrome"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # First check if n is even\n    if n % 2 == 0:\n        return False\n\n    # Initialize variables to calculate the decagonal number\n    k = 1\n    j = 1\n    l = 1\n    num = 0\n\n    # Calculate the decagonal number\n    while k <= n:\n        num = l * (2 * j - 1)\n        l = k\n        j += 1\n        k += 1\n\n    # Check if the decagonal number is odd or even\n    if num % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    # Loop through the array\n    for i in range(len(dlist)):\n        # If the current element matches the search item, return the index position and True\n        if dlist[i] == item:\n            return (True, i)\n    # If no match is found, return False and -1\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # convert the list to a set to check for duplicates\n    test_set = set(test_list)\n    # check if the length of the set is equal to the length of the list\n    return len(test_set) == len(test_list)"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Write a python function to check if the elements of a given list are unique or not.\n    \"\"\"\n    if len(set(test_list)) == len(test_list):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    test_set = set(test_list)\n    if len(test_set) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    seen = set()\n    return all(x not in seen and seen.add(x) for x in test_list)"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Write a python function to check if the elements of a given list are unique or not.\n    \"\"\"\n    unique = set()\n    for element in test_list:\n        if element in unique:\n            return False\n        unique.add(element)\n    return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Write a python function to check if the elements of a given list are unique or not.\n    \"\"\"\n    return len(test_list) == len(set(test_list))"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Write a python function to check if the elements of a given list are unique or not.\n    \"\"\"\n    return len(test_list) == len(set(test_list))"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"The two lists should have the same length.\")\n        return None\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n        \n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two lists must have the same length\")\n\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [num1 - num2 for num1, num2 in zip(nums1, nums2)]"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('Both lists must have the same length.')\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('Both lists must have the same length')\n    return [nums1[i] - nums2[i] for i in range(len(nums1))]"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('Both lists must have the same length')\n    return [a - b for a, b in zip(nums1, nums2)]"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Subtracts two lists element-wise.\n\n    Args:\n        nums1 (list): A list of numbers.\n        nums2 (list): A list of numbers.\n\n    Returns:\n        list: A list of numbers with the elements of `nums1` subtracted from the elements of `nums2`.\n    \"\"\"\n    return [x - y for x, y in zip(nums1, nums2)]"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n\n    for i in range(len(nums1)):\n        nums1[i] -= nums2[i]\n\n    return nums1"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq_dict = {}\n    for digit in str(n):\n        freq_dict[digit] = freq_dict.get(digit, 0) + 1\n\n    for digit, freq in freq_dict.items():\n        if freq > n // 10 or freq < n % 10:\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    freq = [0]*10 # initialize frequency list with 0 for each digit\n\n    # loop through each digit in the integer\n    for d in str(n):\n        freq[int(d)] += 1 # increment frequency count for the digit\n\n    # loop through the frequency list and check if frequency of each digit is less than or equal to the digit itself\n    for f in freq:\n        if f > 1 and f > n % f:\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def validate(n): \n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    \n    # Get the frequency of each digit in the number\n    freq = {}\n    for digit in str(n):\n        freq[digit] = freq.get(digit, 0) + 1\n    \n    # Check if the frequency of each digit is less than or equal to the digit itself\n    for digit, count in freq.items():\n        if count > digit:\n            return False\n    \n    # If all digits have the same frequency, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = {}\n    for i in range(10):\n        freq[i] = 0\n    for i in range(len(str(n))):\n        freq[int(str(n)[i])] += 1\n    for i in range(10):\n        if freq[i] > 0 and freq[i] > i:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = {}\n    for digit in str(n):\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n    for digit in freq:\n        if freq[digit] > n:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def validate(n):\n    # Convert the integer to a string\n    string_num = str(n)\n\n    # Create a dictionary to store the frequency of digits\n    digit_freq = {}\n\n    # Iterate through each digit in the string\n    for digit in string_num:\n        # If the digit is already in the dictionary, increment its frequency\n        if digit in digit_freq:\n            digit_freq[digit] += 1\n        # Otherwise, add it to the dictionary with a frequency of 1\n        else:\n            digit_freq[digit] = 1\n\n    # Iterate through each digit in the dictionary\n    for digit in digit_freq:\n        # Calculate the frequency of digits less than or equal to the current digit\n        freq = sum(1 for freq in digit_freq.values() if freq <= int(digit))\n\n        # If the frequency is less than or equal to the current digit itself, return False\n        if freq <= int(digit):\n            return False\n\n    # If no digit has a frequency greater than the digit itself, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = {}\n    for digit in str(n):\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n\n    for digit in freq:\n        if freq[digit] > int(digit):\n            return False\n    \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digits = []\n    for i in range(10):\n        digits.append(0)\n    for i in range(len(str(n))):\n        digit = int(str(n)[i])\n        digits[digit] += 1\n    for i in range(10):\n        if digits[i] > 1:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def validate(n):\n    count = {}\n    for digit in str(n):\n        if digit in count:\n            count[digit] += 1\n        else:\n            count[digit] = 1\n\n    for digit in count:\n        if count[digit] > digit:\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = {}\n    for digit in str(n):\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n    for digit in freq:\n        if freq[digit] > digit:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    if len(list) == 0:\n        return True\n    elif list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return all(item == element for item in list)"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    else:\n        return list[0] == element and check_element(list[1:], element)"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n\n    for item in list:\n        if item!= element:\n            return False\n    \n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_element(lst, element):\n    '''\n    This function takes a list and an element as input and returns a boolean value indicating whether all items in the list are equal to the given element.\n    '''\n    for item in lst:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    return all(item == element for item in list)"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 1:\n        return True\n    elif list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_element(lst, elem):\n    \"\"\"\n    This function takes in a list and an element as input and checks whether all items in the list are equal to the given element.\n\n    Args:\n        lst (list): The list of items to be checked.\n        elem (any): The element to be checked.\n\n    Returns:\n        bool: True if all items in the list are equal to the given element, False otherwise.\n    \"\"\"\n\n    for item in lst:\n        if item!= elem:\n            return False\n    return True"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'a.*b.{2,3}')\n    match = pattern.match(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'(?i)ab{2,3}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'\\ba(?:b{2,3}){0,1}\\b'\n    match = re.search(pattern, text)\n    return match is not None"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a(b){2,3}'\n    match = re.search(pattern, text)\n    return match is not None"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a[b]{2,3}'\n    return re.search(pattern, text)"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a(b){2,3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a.*(b{2,3}).*'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = re.compile(r'(?<=[^ab])a(?=[ab]{2,3})')\n    return pattern.search(text)"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a(?=b{2,3})'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a.*b.*'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = float('-inf')\n    modified_array = [a] * k\n    \n    # Calculate the sum of the first k elements of the modified array\n    for i in range(k):\n        modified_array[i] = a\n    \n    # Iterate through the original array and calculate the sum of each contiguous subarray\n    for i in range(n):\n        current_sum = 0\n        for j in range(i, min(i + k, n)):\n            current_sum += a[j]\n        if current_sum > max_sum:\n            max_sum = current_sum\n    \n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    # Initialize variables for the sum of the original array, and the sum of the repeated array\n    original_sum = 0\n    repeated_sum = 0\n    \n    # Loop through the original array\n    for i in range(n):\n        original_sum += a[i]\n    \n    # Loop through the repeated array k times\n    for i in range(k):\n        repeated_sum += original_sum\n    \n    # Calculate the maximum sum of the repeated array\n    max_repeated_sum = repeated_sum\n    \n    # Calculate the sum of the original array and the difference between the sum of the repeated array and the maximum sum\n    repeated_sum = original_sum + (k * (original_sum - max_repeated_sum))\n    \n    # Return the maximum sum of the repeated array\n    return max_repeated_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Initialize a variable to store the maximum sum \n    max_sum = float('-inf')\n\n    # Loop through all possible starting positions for the repeated array \n    for i in range(n-k):\n        # Initialize a variable to store the current sum of the repeated array \n        current_sum = a[i]\n\n        # Loop through all possible ending positions for the repeated array \n        for j in range(i, i+k):\n            # Check if the current ending position is within the bounds of the original array \n            if j < n:\n                # Add the current element to the current sum of the repeated array \n                current_sum += a[j]\n\n        # Update the maximum sum if the current sum is greater \n        if current_sum > max_sum:\n            max_sum = current_sum\n\n    # Return the maximum sum \n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    max_sum = float('-inf')\n    current_sum = 0\n    count = 0\n\n    for i in range(n):\n        if i < k:\n            current_sum += a[i]\n        else:\n            current_sum -= a[i % n]\n\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    # Initialize variables\n    max_sum = float('-inf')\n    current_sum = sum(a[:n])\n    max_sum = current_sum\n    \n    # Repeat the array k times\n    for i in range(k):\n        current_sum += a[n-1]\n        if current_sum > max_sum:\n            max_sum = current_sum\n    \n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Initialize variables for maximum subarray sum and current subarray sum\n    max_sum = float('-inf')\n    curr_sum = 0\n\n    # Iterate through the array and update the current sum\n    for i in range(n):\n        curr_sum += a[i]\n        # If the current sum is greater than the maximum sum, update the maximum sum\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n\n    # Repeat the process for k times\n    for i in range(k):\n        curr_sum = 0\n        for j in range(n):\n            curr_sum += a[j]\n            if curr_sum > max_sum:\n                max_sum = curr_sum\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Initialize the maximum sum and the current sum\n    max_sum = float('-inf')\n    curr_sum = 0\n\n    # Iterate through the array\n    for i in range(n):\n        # Add the element to the current sum\n        curr_sum += a[i]\n\n        # If the current sum is greater than the maximum sum, update the maximum sum\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n\n        # If the current sum is greater than the maximum sum and the current index is less than k, repeat the current element\n        if curr_sum > max_sum and i < k-1:\n            curr_sum = a[i]\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Initialize a variable to store the maximum sub-array sum\n    max_sum = float('-inf')\n\n    # Repeat the array k times and calculate the sum of each repeated sub-array\n    for i in range(k):\n        arr = a * (i + 1)\n        sum_arr = sum(arr)\n        max_sum = max(max_sum, sum_arr)\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # create a new array of length n * k\n    new_array = [0] * (n * k)\n\n    # fill the new array with the values of the given array\n    for i in range(n):\n        new_array[i] = a[i]\n\n    # repeat the given array k times\n    for i in range(k-1):\n        new_array[n+i] = a[0]\n\n    # initialize variables to store the maximum sum and the current sum\n    max_sum = float('-inf')\n    current_sum = 0\n\n    # iterate over the new array\n    for i in range(n * k):\n        # add the value at index i to the current sum\n        current_sum += new_array[i]\n\n        # if the current sum is greater than the maximum sum so far, update the maximum sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n        # if the current sum is negative, reset it to zero\n        elif current_sum < 0:\n            current_sum = 0\n\n    # return the maximum sum\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    # Initialize variables\n    max_sum = float('-inf')\n    current_sum = 0\n    max_subarray = []\n    \n    # Loop through all possible starting positions of the subarray\n    for i in range(n):\n        # Add the current element to the subarray\n        current_sum += a[i]\n        \n        # If the subarray is equal to the given array k times\n        if current_sum == k * a[i]:\n            # Update the maximum sum and the subarray\n            if current_sum > max_sum:\n                max_sum = current_sum\n                max_subarray = [i]\n            elif current_sum == max_sum:\n                max_subarray.append(i)\n        \n        # If the subarray is longer than the given array k times\n        elif current_sum > k * a[i]:\n            # Update the maximum sum and the subarray\n            if current_sum > max_sum:\n                max_sum = current_sum\n                max_subarray = [i]\n            elif current_sum == max_sum:\n                max_subarray.append(i)\n                \n    # Return the maximum sum and the subarray\n    return max_sum, max_subarray"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 2\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    #initialize variables\n    sum = 0\n    num = 2\n    \n    #loop n times and calculate sum of squares\n    for i in range(n):\n        sum += num*num\n        num += 2\n        \n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    # initialize the sum to 0\n    sum = 0\n    # loop through the first n even natural numbers\n    for i in range(2, n+1, 2):\n        # add the square of i to the sum\n        sum += i*i\n    # return the sum\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum_squares = 0\n    count = 0\n    \n    while count < n:\n        if count % 2 == 0:\n            sum_squares += count ** 2\n        count += 1\n    \n    return sum_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(2, n+1, 2):\n        sum_of_squares += i*i\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    # initialize sum variable to zero\n    sum = 0\n\n    # loop through first n even natural numbers\n    for i in range(2, n+1, 2):\n        # calculate square of current even natural number\n        square = i*i\n        # add square to sum\n        sum += square\n\n    # return the sum of squares of first n even natural numbers\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    count = 0\n    \n    while count < n:\n        count += 1\n        if count % 2 == 0:\n            sum_of_squares += count ** 2\n    \n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(2, n + 1, 2):\n        sum += i ** 2\n    return sum"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_list = []\n    for sublist in list1:\n        if len(sublist) > len(max_list):\n            max_list = sublist\n    return max_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    lengths = []\n    for sublist in list1:\n        lengths.append(max(len(s) for s in sublist))\n    return lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for sublist in list1:\n        if len(sublist) > len(max_length_list):\n            max_length_list = sublist\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for sublist in list1:\n        max_lengths.append(max(len(sublist), len(max_lengths) and max_lengths[-1]))\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_list = []\n    for sublist in list1:\n        if len(sublist) > len(max_list):\n            max_list = sublist\n    return max_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_list = []\n    for lst in list1:\n        if len(lst) > len(max_list):\n            max_list = lst\n    return max_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for lst in list1:\n        if len(lst) > len(max_length_list):\n            max_length_list = lst\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length(list1):\n    max_length_list = []\n    for lst in list1:\n        if len(lst) > len(max_length_list):\n            max_length_list = lst\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    # Initialize variables to store the maximum length and its corresponding list\n    max_len = 0\n    max_list = []\n\n    # Loop through each list in the input list\n    for lst in list1:\n        # Find the length of the current list and compare it to the current maximum length\n        len_lst = len(lst)\n        if len_lst > max_len:\n            # If the length is greater than the maximum length, update the maximum length and its corresponding list\n            max_len = len_lst\n            max_list = lst\n\n    # Return the maximum length and its corresponding list\n    return max_len, max_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for sublist in list1:\n        if len(sublist) > max(max_length_list):\n            max_length_list = [len(sublist)]\n        elif len(sublist) == max(max_length_list):\n            max_length_list.append(len(sublist))\n    return max_length_list"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n\n    # Initialize a 2D array to store the number of ways of painting the fence.\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n\n    # Base case: If there is only one post, then it can be painted with any color.\n    for i in range(1, n + 1):\n        dp[i][1] = 1\n\n    # Recursive case: For each position i, consider the number of ways of painting the fence with i-1 posts and k-1 colors.\n    for i in range(2, n + 1):\n        for j in range(1, k + 1):\n            if i <= 2:\n                # If there are only two posts, there is only one way of painting the fence.\n                dp[i][j] = 1\n            else:\n                # If there are more than two posts, consider the number of ways of painting the fence with i-1 posts and k-1 colors.\n                # And also, consider the number of ways of painting the fence with i-2 posts and k colors if adjacent posts have the same color.\n                dp[i][j] = dp[i - 1][j] + dp[i - 2][j - 1] if dp[i - 2][j - 1] > 0 else 0\n\n    # Return the number of ways of painting the fence.\n    return dp[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n\n    # Initialize an empty dictionary to store the count of ways for each fence\n    fence_count = {}\n\n    # Initialize the first fence with 1 post and k colors\n    fence_count[1] = k\n\n    # Iterate through the remaining fences\n    for i in range(2, n+1):\n        # Initialize a list to store the colors in the current fence\n        colors = []\n\n        # Iterate through the previous fences and find the colors that are adjacent to the current fence\n        for j in range(i-1):\n            if i-1-j-1 <= 1:\n                colors.append(fence_count[i-1-j-1])\n\n        # Check if there are at most 2 adjacent posts with the same color in the previous fence\n        if len(colors) <= 2:\n            # Increment the count of ways for the current fence\n            fence_count[i] = fence_count[i-1] + 1\n        else:\n            # Increment the count of ways for the current fence\n            fence_count[i] = fence_count[i-1]\n\n        # Update the colors in the previous fence to include the current color\n        for j in range(i-1):\n            if i-1-j-1 <= 1:\n                colors[j] = colors[j] + 1\n                fence_count[i-1-j-1] = fence_count[i-1] + colors[j]\n\n    return fence_count[n]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k):\n    \"\"\"\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    \"\"\"\n\n    # Initialize a 2D array to store the number of ways of painting the fence\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n\n    # Base case\n    dp[0][0] = 1\n\n    # Fill the array using dynamic programming\n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            if i == 1:\n                dp[i][j] = 1\n            elif j == 1:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = (dp[i - 1][j] + dp[i][j - 1]) % 1000000007\n\n    # Return the number of ways of painting the fence\n    return dp[n][k]\n"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k):\n    if n == 1:\n        return 1\n    dp = [[0] * (k+1) for _ in range(n+1)]\n    for i in range(2, n+1):\n        for j in range(1, k+1):\n            dp[i][j] = dp[i-1][j] + dp[i][j-1]\n    return dp[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    \n    # Initialize an array to store the count of ways for each color\n    count = [0] * k\n    \n    # Initialize the count of ways to 1 for each color\n    for i in range(k):\n        count[i] = 1\n    \n    # Initialize the count of ways to 1 for each adjacent pair of colors\n    for i in range(n):\n        count[i] = 1\n    \n    # Initialize the count of ways to 0 for the last post\n    count[n-1] = 0\n    \n    # Initialize the count of ways to 0 for the second-to-last post\n    count[n-2] = 0\n    \n    # Initialize the count of ways to 0 for the last post and second-to-last post\n    count[n-2] = 0\n    \n    # Loop through the remaining n-4 posts\n    for i in range(n-4):\n        # Check if the current and next adjacent colors are the same\n        if count[i] == count[i+2]:\n            # If they are the same, increment the count of ways for that color and reset the count of ways for the previous colors\n            count[i] += 1\n            for j in range(i, i+2):\n                count[j] = 0\n        # If the current and next adjacent colors are different, decrement the count of ways for the previous colors and reset the count of ways for the current and next colors\n        else:\n            count[i] -= 1\n            count[i+2] -= 1\n    \n    # Return the count of ways for the last color\n    return count[n-4]\n"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k):\n    if k == 1:\n        return n\n    elif n == 1:\n        return 1\n    else:\n        return (n * (n - 1) * count_no_of_ways(n - 1, k)) // (k - 1)"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k):\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n\n    for i in range(n + 1):\n        for j in range(1, k + 1):\n            if i == 0 or j == 1:\n                dp[i][j] = 1\n            elif j == 2:\n                dp[i][j] = dp[i][j - 1] + dp[i - 1][j - 1]\n            else:\n                dp[i][j] = dp[i][j - 2] + dp[i - 1][j - 2] + dp[i - 2][j - 2]\n\n    return dp[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n\n    # Create a 2D array to store the number of ways to paint the fence\n    ways = [[0 for x in range(k+1)] for y in range(n+1)]\n\n    # Base cases\n    ways[0][0] = 1\n    ways[0][1] = 0\n\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            ways[i][j] = ways[i-1][j] + ways[i-1][j-1]\n\n    # Return the number of ways to paint the fence\n    return ways[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # create a dictionary to store the count of each color\n    color_count = {}\n    # initialize the count of each color to 0\n    for i in range(k):\n        color_count[i] = 0\n\n    # loop through the number of posts and increment the count of adjacent posts with the same color\n    for i in range(n):\n        if color_count[i % k] < 2:\n            color_count[i % k] += 1\n\n    # find the count of each color in the dictionary\n    total_count = 0\n    for count in color_count.values():\n        total_count += count\n\n    # return the number of ways\n    return 2 * total_count"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n < 2:\n        return 0\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    else:\n        return count_no_of_ways(n-2, k) + count_no_of_ways(n-3, k)\n\nn = int(input(\"Enter the number of posts: \"))\nk = int(input(\"Enter the number of colors: \"))\n\nprint(\"Number of ways:\", count_no_of_ways(n, k))"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    # Calculate the quotient of n/m using integer division and rounding down to the nearest integer\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n\n    quotient = n // m\n\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find(n, m):\n    \"\"\"\n    This function takes two integer numbers as input and returns the quotient of those numbers,\n    rounded down to the nearest integer.\n    \"\"\"\n    # check if m is 0, in which case quotient is infinity\n    if m == 0:\n        return float('inf')\n\n    # use the Euclidean algorithm to calculate quotient\n    # q = (a*b) // gcd(a, b)\n    a, b = abs(n), abs(m)\n    while b!= 0:\n        a, b = b, a % b\n    quotient = a // abs(m)\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    # Calculate quotient\n    quotient = int(n / m)\n    # Round down to the nearest integer\n    quotient = quotient - quotient % 1\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    q = n // m\n    return q"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find(n,m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    # Calculate the quotient using integer division operator //\n    quotient = n // m\n    # Check if the remainder is 0\n    if quotient * m == n:\n        # If the remainder is 0, return quotient rounded down to the nearest integer\n        return quotient\n    else:\n        # If the remainder is not 0, return quotient rounded down to the nearest integer plus 1\n        return quotient + 1"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w*w + h*h)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Calculating the square of half the perimeter\n    s = (w + h + math.sqrt(w**2 + h**2)) / 2\n    \n    # Returning the third side of the right angled triangle\n    return math.sqrt(s**2 - (w**2 + h**2))"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # calculate the semi-perimeter of the triangle\n    s = (w + h) / 2\n    # calculate the square root of the semi-perimeter\n    semi_perimeter_root = math.sqrt(s)\n    # calculate the third side of the triangle\n    third_side = semi_perimeter_root * math.tan(math.pi / 6)\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # calculate the square root of the sum of the squares of the lengths of the two sides\n    square_root_of_sum = math.sqrt((w**2) + (h**2))\n    # calculate the third side of the right angled triangle using the square root of the sum\n    third_side = square_root_of_sum * math.sin(math.radians(60))\n    # return the value of the third side\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    third_side = math.sqrt(w**2 + h**2)\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    \"\"\"\n    Write a function to find the third side of a right angled triangle.\n    \"\"\"\n    return math.sqrt(w**2 + h**2)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    \n    # Finding the semi-perimeter of the right angled triangle\n    s = (w+h)/2\n    \n    # Using the Pythagorean theorem to find the third side of the triangle\n    third_side = math.sqrt(s*(s-w)*(s-h))\n    \n    return third_side\n"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # calculate the length of the hypotenuse\n    hypotenuse = math.sqrt(w**2 + h**2)\n    # calculate the angle of the triangle\n    angle = math.degrees(math.acos((w**2 + h**2 - hypotenuse**2) / (2*w*hypotenuse)))\n    # find the length of the other side\n    other_side = hypotenuse * math.sin(math.radians(angle))\n    return other_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    This function takes the width and height of a right angled triangle as input\n    and returns the third side.\n    '''\n    s = (w**2 + h**2)**0.5\n    return math.sqrt(s**2 - w**2)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = (w + h) / 2\n    return math.sqrt(s * (s - w) * (s - h))"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = None\n    for val in listval:\n        if max_val is None or val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_value = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_value:\n            max_value = listval[i]\n    return max_value"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_val(lst):\n    \"\"\"\n    This function takes in a list and returns the maximum value in the list.\n    \"\"\"\n    if len(lst) == 0:\n        return None\n    max_val = lst[0]\n    for num in lst:\n        if num > max_val:\n            max_val = num\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_num = None\n    for val in listval:\n        if max_num is None or val > max_num:\n            max_num = val\n    return max_num"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        raise ValueError(\"The list is empty.\")\n    else:\n        max_val = listval[0]\n        for val in listval:\n            if val > max_val:\n                max_val = val\n        return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    else:\n        max_val = listval[0]\n        for item in listval[1:]:\n            if item > max_val:\n                max_val = item\n        return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # Initialize maximum value to be the first element of the list\n    max_val = listval[0]\n\n    # Loop through the list and compare each element with the current maximum value\n    for val in listval:\n        if val > max_val:\n            max_val = val\n\n    # Return the maximum value found in the list\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    maxval = None\n    for value in listval:\n        if maxval is None:\n            maxval = value\n        elif value > maxval:\n            maxval = value\n    return maxval"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    total = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            total += i\n    return total"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors_sum += i\n    return divisors_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    div_sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr): \n    n = len(arr) \n    inv_count = 0 \n    \n    # Sort the array in non-decreasing order \n    for i in range(n): \n        for j in range(i+1, n): \n            if arr[i] > arr[j]: \n                arr[i], arr[j] = arr[j], arr[i] \n                inv_count += n - i - 1 \n                break \n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    # create a function to swap two elements in the array\n    def swap(arr, i, j): \n        arr[i], arr[j] = arr[j], arr[i]\n\n    # create a function to partition the array around a pivot element\n    def partition(arr, low, high): \n        pivot = arr[high] # selecting the last element as pivot\n        i = low - 1 # index of smaller element\n\n        for j in range(low, high): \n            if arr[j] < pivot: \n                i += 1 \n                swap(arr, i, j)\n\n        swap(arr, i+1, high) # swapping the pivot with the element at its correct position\n        return i+1\n\n    # create a function to count inversions in a sub-array\n    def count_inversions(arr, low, high): \n        if low < high: \n            # find the pivot element\n            pivot_index = partition(arr, low, high)\n\n            # count inversions in left and right sub-arrays\n            left_count = count_inversions(arr, low, pivot_index-1)\n            right_count = count_inversions(arr, pivot_index+1, high)\n\n            # count inversions between the left and right sub-arrays\n            inversion_count = 0\n            i = low\n            j = pivot_index+1\n\n            while i <= pivot_index and j <= high: \n                if arr[i] > arr[j]: \n                    inversion_count += pivot_index - i + 1\n                    i += 1\n                j += 1\n\n            return left_count + right_count + inversion_count\n\n    # call the count_inversions function\n    return count_inversions(arr, 0, len(arr)-1)"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr):\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize variables for the inversion count and the current and last indices\n    inv_count = 0\n    curr_index = 0\n    last_index = len(arr) - 1\n\n    # Loop through the array, comparing each element with the next one, and incrementing the inversion count if necessary\n    while curr_index < last_index:\n        if arr[curr_index] > arr[last_index]:\n            inv_count += last_index - curr_index\n            curr_index += 1\n        else:\n            last_index -= 1\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n\n    # Initialize variables for counting inversions and temporary arrays\n    inv_count = 0\n    temp_arr = []\n\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Traverse the array and count inversions\n    for i in range(len(arr)):\n        j = i + 1\n        while j < len(arr):\n            if arr[i] > arr[j]:\n                inv_count += len(arr) - j\n                temp_arr.append(arr[j])\n                j += 1\n            else:\n                j += 1\n\n    # Append the remaining elements of the array to the temporary array\n    temp_arr.extend(arr[i:])\n\n    # Return the final count of inversions\n    return inv_count, temp_arr"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    # sort the array in non-decreasing order\n    arr.sort()\n\n    # initialize variables to store inversions and index\n    inv_count = 0\n    left = 0\n    right = len(arr) - 1\n\n    # iterate over the sorted array and count inversions\n    while left < right:\n        if arr[left] <= arr[right]:\n            left += 1\n        else:\n            right -= 1\n            inv_count += right - left + 1\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n\n    # Initialize two pointers, one for each side of the array\n    left = 0\n    right = len(arr) - 1\n\n    # Iterate through the array from both sides\n    while left < right:\n\n        # Find the largest element on the left side\n        max_index = left\n\n        # Iterate through the right side of the array\n        for i in range(left, right):\n\n            # If the current element is greater than the max element, update the max element index\n            if arr[i] > arr[max_index]:\n                max_index = i\n\n        # Swap the current element with the max element on the left side\n        arr[left], arr[max_index] = arr[max_index], arr[left]\n\n        # Count the number of inversions and update the pointers\n        inv_count = (right - left) // 2\n        left += inv_count\n        right -= inv_count\n\n    # Return the final inversion count\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    # Counting inversions using merge sort\n    inv_count = merge_sort(arr, 0, n-1)\n    return inv_count\n\n\ndef merge_sort(arr, low, high):\n    if low < high:\n        mid = (low + high) // 2\n        merge_sort(arr, low, mid)\n        merge_sort(arr, mid+1, high)\n        inv_count = merge(arr, low, mid, high)\n        return inv_count\n    else:\n        return 0\n\n\ndef merge(arr, low, mid, high):\n    i = low\n    j = mid+1\n    inv_count = 0\n    inv_index = low\n    left = arr[low:mid+1]\n    right = arr[mid+1:high+1]\n\n    while i <= mid and j <= high:\n        if left[i] <= right[j]:\n            arr[inv_index] = left[i]\n            i += 1\n        else:\n            inv_count += mid - i + 1\n            arr[inv_index] = right[j]\n            j += 1\n        inv_index += 1\n\n    while i <= mid:\n        arr[inv_index] = left[i]\n        i += 1\n        inv_index += 1\n\n    while j <= high:\n        arr[inv_index] = right[j]\n        j += 1\n        inv_index += 1\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    inv_count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n            # swapping elements\n            arr[i],arr[j] = arr[j],arr[i]\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr) \n    inv_count = 0\n  \n    # sort the array in ascending order\n    for i in range(n): \n        for j in range(i+1, n): \n            if arr[i] > arr[j]: \n                arr[i], arr[j] = arr[j], arr[i] \n                inv_count += n - i - 1 \n    return inv_count "
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inv_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def flatten_list(lst):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_lst = []\n    for item in lst:\n        if type(item) == list:\n            flat_lst.extend(flatten_list(item))\n        else:\n            flat_lst.append(item)\n    return flat_lst"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for item in list1:\n        if type(item) == list:\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for element in list1:\n        if type(element) == list:\n            flattened_list.extend(flatten_list(element))\n        else:\n            flattened_list.append(element)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    A function to flatten a given nested list structure.\n\n    Parameters:\n    lst (list): A nested list structure.\n\n    Returns:\n    list: A flattened list structure.\n    \"\"\"\n    result = []\n    for item in lst:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    result = []\n    for item in lst:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    This function takes a nested list as input and returns a flattened list.\n    \"\"\"\n    flat_list = []\n    for item in lst:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for element in list1:\n        if isinstance(element, list):\n            flattened_list.extend(flatten_list(element))\n        else:\n            flattened_list.append(element)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n\n    Parameters:\n    list1 (list): A nested list to be flattened.\n\n    Returns:\n    list: A flattened list with all the elements from the original list.\n    \"\"\"\n    flat_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def flatten_list(lst):\n    '''\n    Flatten a nested list into a single list.\n    '''\n    flat_list = []\n    for item in lst:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a dictionary to store the maximum aggregate for each type of item\n    max_aggs = defaultdict(int)\n\n    # Iterate through the list of tuples\n    for item, agg in stdata:\n        # Update the maximum aggregate for the given item\n        max_aggs[item] = max(max_aggs[item], agg)\n\n    # Find the maximum aggregate across all items\n    max_agg = max(max_aggs.values())\n\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n\n    # creating a dictionary to store the maximum aggregate for each transaction\n    max_agg = defaultdict(int)\n\n    # iterating over the list of transactions\n    for trans in stdata:\n\n        # calculating the maximum aggregate for each transaction\n        max_agg[trans[0]] = max(max_agg[trans[0]], trans[1])\n\n    # returning the maximum aggregate for all transactions\n    return max(max_agg.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n\n    # Initialize a defaultdict to store the minimum aggregate for each month\n    month_min = defaultdict(int)\n\n    # Loop through the list of tuples\n    for month, amount in stdata:\n        # Add the amount to the minimum aggregate for the month\n        month_min[month] += amount\n\n    # Initialize a variable to store the maximum aggregate\n    max_agg = 0\n\n    # Loop through the minimum aggregate dictionary and compare the maximum aggregate with each month's aggregate\n    for agg in month_min.values():\n        if agg > max_agg:\n            max_agg = agg\n\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    agg_map = defaultdict(int)\n    max_sum = 0\n\n    for item in stdata:\n        agg_map[item[0]] += item[1]\n\n    for val in agg_map.values():\n        max_sum = max(max_sum, val)\n\n    return max_sum"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n\n    # create a dictionary to store the frequency of each item in the list\n    freq = defaultdict(int)\n\n    # iterate through the list of tuples and update the frequency count\n    for item, freq in stdata:\n        freq += 1\n\n    # find the maximum frequency count and return it as the maximum aggregate\n    return max(freq.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    agg_dict = defaultdict(int)\n    for item in stdata:\n        name, value = item\n        agg_dict[name] += value\n    max_value = 0\n    max_name = \"\"\n    for name, value in agg_dict.items():\n        if value > max_value:\n            max_value = value\n            max_name = name\n    return max_name"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    This function takes a list of tuples as input and calculates the maximum aggregate from the list.\n    '''\n\n    # Create a defaultdict to store the count of each item\n    item_count = defaultdict(int)\n\n    # Iterate over the list of tuples\n    for item, quantity in stdata:\n        # Increment the count of the item in the defaultdict\n        item_count[item] += quantity\n\n    # Calculate the maximum aggregate\n    max_aggregate = max(item_count.values())\n\n    return max_aggregate"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_dict = defaultdict(int)\n    for st, value in stdata:\n        max_dict[st] += value\n    return max(max_dict.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    This function takes a list of tuples (item_name, item_price, item_quantity) as input and returns the maximum aggregate.\n    The function first creates a dictionary to store the quantity of each item.\n    Then, it iterates through the list of tuples and updates the quantity of each item in the dictionary.\n    Finally, it calculates the maximum aggregate by finding the maximum value in the dictionary.\n    '''\n\n    # create a dictionary to store the quantity of each item\n    items = defaultdict(int)\n\n    # iterate through the list of tuples and update the quantity of each item in the dictionary\n    for item in stdata:\n        items[item[0]] += item[2]\n\n    # calculate the maximum aggregate by finding the maximum value in the dictionary\n    max_agg = max(items.values())\n\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_dict = defaultdict(int)\n    for i in stdata:\n        max_dict[i[0]] = max(max_dict[i[0]], i[1])\n    max_agg = max(max_dict.values())\n    return max_agg"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_binary_seq(n): \n    '''\n    This function takes an integer n as input and returns the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        binary_seq = bin(i)[2:].zfill(2*n)\n        if int(binary_seq[:n]) + int(binary_seq[-n:]) == 2**n:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_binary_seq(n): \n    count = 0\n    for i in range(2**n-1, -1, -1):\n        if i & (i+1) == 0:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        if i % 2 == 0:\n            sum = 0\n            for j in range(n):\n                sum += i % 2\n                i //= 2\n            if i % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        first_bits = bin(i)[2:].zfill(n)\n        last_bits = bin(i)[-n:].zfill(n)\n        if int(first_bits) == int(last_bits):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        bits = bin(i)[2:]\n        if int(bits[:n]) == int(bits[-n:]):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**n):\n        for j in range(2**n):\n            if i ^ j == (2**n) - 1:\n                count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_binary_seq(n):\n    \"\"\"\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    \"\"\"\n    # Define the sum function to calculate the sum of first n bits and last n bits\n    def sum_bits(n, bits):\n        return sum(int(bit) for bit in bits[-n:]) + sum(int(bit) for bit in bits[:-n])\n    \n    # Initialize the count variable to 0\n    count = 0\n    \n    # Iterate over all possible binary strings of length 2n\n    for i in range(2**n):\n        # Convert the binary string to a list of bits\n        bits = [str(i)[j] for j in range(n)]\n        \n        # Calculate the sum of first n bits\n        first_sum = sum_bits(n, bits)\n        \n        # Iterate over all possible binary strings of length n\n        for j in range(2**n):\n            # Convert the binary string to a list of bits\n            bits2 = [str(j)[k] for k in range(n)]\n            \n            # Calculate the sum of last n bits\n            last_sum = sum_bits(n, bits2)\n            \n            # If the first and last sums are equal, increment the count variable\n            if first_sum == last_sum:\n                count += 1\n    \n    # Return the count of binary sequences\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    \n    # Initialize variables for sum of first n bits and sum of last n bits\n    first_sum = 0\n    last_sum = 0\n    \n    # Initialize count variable\n    count = 0\n    \n    # Initialize the first n bits of binary sequence\n    seq = [0] * n\n    \n    # Iterate over all possible binary sequences of length 2n\n    for i in range(2**n):\n        # Extract the current binary sequence from the integer\n        bin_seq = format(i, '0' + str(n) + 'b')\n        \n        # Extract the first n bits and sum them\n        first = int(bin_seq[:n], 2)\n        first_sum += first\n        \n        # Extract the last n bits and sum them\n        last = int(bin_seq[n:], 2)\n        last_sum += last\n        \n        # Check if the sum of first n bits is same as sum of last n bits\n        if first_sum == last_sum:\n            # Increment the count if the condition is satisfied\n            count += 1\n    \n    # Return the count of binary sequences\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # Generate all prime numbers up to n\n    primes = [True] * (n+1)\n    primes[0] = primes[1] = False\n    for i in range(2, int(n**0.5)+1):\n        if primes[i]:\n            for j in range(i*i, n+1, i):\n                primes[j] = False\n    primes = [i for i in range(n+1) if primes[i]]\n\n    # Count the number of binary sequences of length 2n such that their sums are the same\n    count = 0\n    for i in primes:\n        for j in primes:\n            if i+j == 2*n:\n                count += 1\n\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0 \n    for i in range(2 ** n): \n        sum1 = 0 \n        for j in range(i): \n            sum1 += (j % 2) * (2 ** j) \n        sum2 = i * sum1 \n        if sum1 == sum2: \n            count += 1 \n    return count"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth += 1\n            depth += dict_depth(d[key])\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth = max(depth, dict_depth(value) + 1)\n        elif isinstance(value, list):\n            for item in value:\n                if isinstance(item, dict):\n                    depth = max(depth, dict_depth(item) + 1)\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # initialize depth to zero\n    depth = 0\n\n    # iterate through the dictionary keys\n    for key in d:\n        # if the value is another dictionary, recursively call the function\n        if isinstance(d[key], dict):\n            # increment the depth by 1\n            depth += 1\n            # call the function recursively with the value\n            dict_depth(d[key])\n\n    # return the depth of the dictionary\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        max_depth = 1\n        for key in d:\n            depth = 1 + dict_depth(d[key])\n            max_depth = max(max_depth, depth)\n        return max_depth\n    else:\n        return 0"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    stack = [d]\n    depth = 0\n    while stack:\n        current_dict = stack.pop()\n        for key in current_dict.keys():\n            if isinstance(current_dict[key], dict):\n                stack.append(current_dict[key])\n        depth += 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        depth = 1 + max(dict_depth(v) for v in d.values())\n    else:\n        depth = 0\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + max(dict_depth(v) for v in d.values())\n    else:\n        return 0"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        max_depth = 0\n        for key, value in d.items():\n            depth = 1 + dict_depth(value)\n            if depth > max_depth:\n                max_depth = depth\n        return max_depth\n    else:\n        return 0"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth += 1\n            depth = max(depth, dict_depth(d[key]))\n    return depth + 1"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n\n    max_depth = 0\n    for key in d:\n        current_depth = 1 + dict_depth(d[key])\n        max_depth = max(max_depth, current_depth)\n\n    return max_depth"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes an array, a list of ranges, and the number of rotations to apply to each range.\n    It returns the element at the given index after all rotations have been applied.\n    \"\"\"\n    # Initialize a variable to store the element at the index\n    element = None\n\n    # Iterate through the ranges and rotations, applying them to the array and the element at the index\n    for range_i, rotation_i in zip(ranges, rotations):\n        # Apply the range and rotation to the array\n        arr = range_i(arr)\n        if element is None:\n            element = arr[index]\n        else:\n            element = arr[index]\n\n    # Return the element at the index\n    return element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    This function takes an array, a list of ranges, a list of rotations, and an index.\n    The function then finds the element at the given index after applying the specified rotations.\n    '''\n\n    # calculate the total number of rotations required\n    total_rotations = sum(rotations)\n\n    # iterate through the rotations\n    for rotation in rotations:\n        # calculate the new starting index\n        new_index = (index + rotation) % len(arr)\n\n        # check if the new index is within the range of the array\n        if new_index >= len(arr):\n            new_index = new_index % len(arr)\n\n        # find the element at the new index\n        element = arr[new_index]\n\n        # check if the element is within the range specified in the range list\n        if element >= ranges[0][0] and element <= ranges[0][1]:\n            return element\n\n    # if the element was not found after all rotations, return None\n    return None"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    Find the element at a given index after a series of rotations.\n\n    Parameters:\n        arr (list): The list of elements to be rotated.\n        ranges (list): A list of tuples, where each tuple contains the range of elements to be rotated.\n        rotations (int): The number of rotations to perform.\n        index (int): The index of the element to find after the rotations.\n\n    Returns:\n        The element at the specified index after the rotations.\n    \"\"\"\n    result = arr[0]\n    for i in range(rotations):\n        range_start, range_end = ranges[i]\n        if index >= range_start and index <= range_end:\n            index = index - range_start + range_start\n        else:\n            index = index - range_end + range_start\n    return result"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    n = len(arr)\n    k = rotations % n\n\n    # Rearrange the array elements after k rotations\n    arr = arr[k:] + arr[:k]\n\n    # Find the element at index 'index' after k rotations\n    for i in range(n):\n        if i == index:\n            return arr[i]\n        if i == n - 1 and index > n - k:\n            return None\n        if index >= n - k and index < k:\n            return arr[i]\n        if index < n - k:\n            return arr[index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes an array, a list of ranges, the number of rotations, and an index as input.\n    It finds the element at the given index after the number of rotations.\n\n    Args:\n    arr (list): The array of integers.\n    ranges (list): A list of tuples where each tuple contains the lower and upper bounds of a range of integers.\n    rotations (int): The number of rotations required to get to the element at the given index.\n    index (int): The index at which the element needs to be found.\n\n    Returns:\n    int: The element at the given index after the number of rotations.\n    \"\"\"\n    n = len(arr)\n    k = n - 1\n    \n    # Sort the array based on the index and the element at the index\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                arr[i], arr[j] = arr[j], arr[i]\n            if arr[i] == arr[j]:\n                if i < j:\n                    if arr[i] == index:\n                        return arr[i]\n                else:\n                    if arr[j] == index:\n                        return arr[j]\n            \n    # Calculate the index of the element after the number of rotations\n    rotations = rotations % n\n    if rotations == 0:\n        return arr[k]\n    else:\n        return arr[(index - 1) % n + rotations]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes an array, ranges, rotations, and index as input\n    and returns the element at the given index after rotations.\n    \"\"\"\n    arr_len = len(arr)\n    for i in range(rotations):\n        for j in range(arr_len):\n            k = (j + ranges[j]) % arr_len\n            arr[j], arr[k] = arr[k], arr[j]\n    return arr[index % arr_len]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n\n    Parameters:\n    arr (list): the list of elements to search through\n    ranges (list): the list of ranges to consider for each rotation\n    rotations (int): the number of rotations to perform\n    index (int): the index to search for\n\n    Returns:\n    The element at the given index after the number of rotations.\n    '''\n\n    # initialize variables for the search\n    start = 0\n    end = len(arr)-1\n\n    # iterate over the rotations and perform the search\n    for i in range(rotations) :\n\n        # get the current range to consider\n        range_index = i % len(ranges)\n        range_start = ranges[range_index][0]\n        range_end = ranges[range_index][1]\n\n        # update the search boundaries\n        if i < rotations // 2 :\n            start = range_start\n            end = range_end\n        else :\n            start = range_end\n            end = range_start\n\n        # find the element at the given index after the rotation\n        elem = arr[start:end+1].index(arr[index])\n\n        # update the index for the next search\n        if i < rotations // 2 :\n            start = elem\n        else :\n            end = elem\n\n    # return the element at the final index\n    return arr[start]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes in an array, a list of ranges, and a list of rotations.\n    It returns the element at a given index after rotating the array by the given number of rotations.\n    \"\"\"\n\n    # Define the maximum and minimum values for each range\n    max_range = max(ranges)\n    min_range = min(ranges)\n\n    # Calculate the index for each rotation\n    index_list = []\n    for i in range(len(rotations)):\n        if i == 0:\n            index_list.append(index)\n        else:\n            index_list.append((index + rotations[i-1]) % len(arr))\n\n    # Calculate the element at each index\n    element_list = []\n    for i in range(len(rotations)):\n        if i == 0:\n            element_list.append(arr[index])\n        else:\n            element_list.append(arr[index_list[i]])\n\n    # Find the element at the final index\n    final_index = (index + rotations[-1]) % len(arr)\n    final_element = arr[final_index]\n\n    # Calculate the rotation to get the element back to its original index\n    rotation = rotations[rotations.index(final_index)]\n\n    return final_element, rotation"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n\n    Parameters:\n    arr: List of elements\n    ranges: List of tuples containing the ranges of the elements in the array\n    rotations: Number of rotations to perform\n    index: Index of the element to be found\n\n    Returns:\n    Returns the element at the given index after rotations.\n    '''\n\n    # Find the range of the element at the given index\n    element_range = ranges[index]\n\n    # Compute the indices of the first and last elements in the element_range\n    first_index = element_range[0]\n    last_index = element_range[1]\n\n    # Perform the required rotations and find the index of the element\n    if rotations % 2 == 0:\n        new_index = first_index + (last_index - first_index) // 2 + rotations // 2\n    else:\n        new_index = (first_index + last_index) // 2 + rotations // 2\n\n    # Find the element at the new index\n    new_element = arr[new_index]\n\n    return new_element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    This function takes three arguments:\n    1. arr: a list of integers\n    2. ranges: a list of tuples that specify the ranges of possible rotations\n    3. rotations: the number of rotations that need to be performed\n    4. index: the index of the element to be found\n\n    This function returns the element at the given index after performing the given number of rotations.\n    '''\n\n    for i in range(rotations):\n        # Generate a random permutation of the list using Fisher-Yates algorithm\n        n = len(arr)\n        for j in range(n-1, 0, -1):\n            swap_index = random.randint(0, j)\n            arr[j], arr[swap_index] = arr[swap_index], arr[j]\n\n    # Find the element at the given index after rotating the list\n    element = arr[index]\n\n    return element"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p\\w*$')\n    for word in words:\n        if pattern.match(word):\n            return word, words[words.index(word) + 1]\n    return None, None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p\\w*$')\n    for word in words:\n        if pattern.match(word):\n            return word"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n\n    # Regular expression to match words starting with letter 'p'\n    pattern = re.compile(r'p\\w+')\n\n    # Find all words starting with letter 'p' in the list of words\n    matches = pattern.findall(words)\n\n    # Check if there are two words starting with letter 'p' in the list of words\n    if len(matches) == 2:\n        return matches[0], matches[1]\n    else:\n        return \"No words starting with letter 'p' found in the list of words.\""
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n\n    # regular expression pattern for starting with 'p'\n    pattern = r'^p\\w+'\n\n    # loop through each word in the list\n    for word in words:\n        # check if the word matches the pattern\n        if re.match(pattern, word):\n            # split the word into a list of characters\n            chars = list(word)\n            # find the index of the first 'p' in the list of characters\n            index = chars.index('p')\n            # extract the first two characters (starting with 'p') from the list of characters\n            first_two = chars[index:index+2]\n            # convert the list of characters back to a string and return the result\n            return ''.join(first_two)\n\n    # if no words starting with 'p' are found, return an empty string\n    return ''"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # use regex to find words starting with letter 'p'\n    pattern = r'(?<=^p)([a-zA-Z]+)'\n    matches = re.findall(pattern,''.join(words))\n    \n    # return two words starting with letter 'p'\n    return matches[:2]\n"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'\\b[Pp]\\w+\\b')\n    matches = pattern.findall(words)\n    if len(matches) >= 2:\n        return matches[:2]\n    else:\n        return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile('^p\\w+')\n    result = []\n    for word in words:\n        if pattern.match(word):\n            result.append(word)\n            if len(result) == 2:\n                break\n    return result"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = re.findall(r'\\b\\w*p\\w*',''.join(words))\n    if len(p_words) == 2:\n        return p_words[0], p_words[1]\n    else:\n        return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # Use a regular expression to match words that start with 'p'\n    pattern = r'\\bp\\w+\\b'\n    # Use findall() method to find all matches in the list\n    matches = re.findall(pattern,''.join(words))\n    # Return the two words that start with 'p'\n    return [matches[0].split()[0], matches[1].split()[0]]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # Define the regular expression pattern for matching words starting with letter 'p'\n    pattern = r'\\b[Pp]h[aeiou]\\w*\\b'\n\n    # Use the re.findall() method to find all the words in the list that match the given pattern\n    matches = re.findall(pattern,''.join(words))\n\n    # Return two random words from the list\n    return matches[0], matches[1]"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    max_sum = float('-inf')  # initialize maximum sum as negative infinity\n    max_length = 0  # initialize maximum length as 0\n    \n    # check if k is greater than i, if yes then skip the kth element\n    if k > index:\n        k = index + 1\n    \n    for i in range(index + 1, k + 1):\n        # check if the current sum is greater than the current maximum sum\n        if i > 0 and a[i - 1] >= a[i]:\n            temp_sum = a[i - 1] + a[i]\n        else:\n            temp_sum = a[i]\n        if temp_sum > max_sum:\n            max_sum = temp_sum\n            max_length = i\n    \n    return max_sum, max_length"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if index == n:\n        return 0, []\n    \n    if index > 0 and a[index] <= a[index - 1]:\n        max_sum, max_seq = max_sum_increasing_subseq(a, n, index - 1, k)\n        return max_sum, max_seq\n    \n    if a[index] > a[k - 1] and index + 1 <= n and a[index] > a[index + 1]:\n        max_sum, max_seq = max_sum_increasing_subseq(a, n, index + 1, k)\n        return max_sum + a[index], [a[index]] + max_seq\n    \n    if a[index] > a[k - 1] and index + 1 <= n and a[index] < a[index + 1]:\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n\n    return max_sum_increasing_subseq(a, n, index + 1, k)"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    # Initialize the maximum sum of increasing subsequence as -infinity\n    max_sum = float('-inf')\n    # Initialize a list to store the maximum sum of increasing subsequence for each prefix up to the ith index\n    max_sum_prefix = [0] * (n + 1)\n    # Initialize a list to store the starting index of each increasing subsequence for each prefix up to the ith index\n    start_index = [0] * (n + 1)\n\n    # Calculate the maximum sum of increasing subsequence for each prefix\n    for i in range(1, n + 1):\n        # If the ith element is less than or equal to k, then we can add the ith element to the prefix and continue\n        if a[i - 1] <= k:\n            max_sum_prefix[i] = max_sum_prefix[i - 1] + a[i - 1]\n            start_index[i] = index\n            # Update the maximum sum of increasing subsequence if it is greater than the current maximum sum\n            max_sum = max(max_sum, max_sum_prefix[i])\n        # If the ith element is greater than k, then we can either remove the last element from the prefix or add the ith element to the prefix\n        else:\n            max_sum_prefix[i] = max(max_sum_prefix[i - 1], max_sum_prefix[i - 2] + a[i - 1])\n            start_index[i] = min(start_index[i - 1], start_index[i - 2])\n            # Update the maximum sum of increasing subsequence if it is greater than the current maximum sum\n            max_sum = max(max_sum, max_sum_prefix[i])\n\n    # Initialize the maximum sum of increasing subsequence for the prefix up to the kth index\n    max_sum_k = 0\n    # Find the maximum sum of increasing subsequence for the prefix up to the kth index\n    for i in range(index, k + 1):\n        max_sum_k = max(max_sum_k, max_sum_prefix[i])\n\n    # Find the index of the maximum sum of increasing subsequence for the prefix up to the kth index\n    max_sum_k_index = start_index[k]\n\n    return max_sum_k, max_sum_k_index"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    This function finds the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    \n    if k > index:\n        return float('-inf')\n    \n    max_sum = float('-inf')\n    \n    for i in range(index, k + 1):\n        if i == index:\n            max_sum = max(max_sum, a[i])\n        else:\n            max_sum = max(max_sum, max_sum_increasing_subseq(a, n, i + 1, k) + a[i])\n            \n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    # Initialize variables for the maximum sum of increasing subsequence and the length of the subsequence\n    max_sum = float('-inf')\n    curr_sum = 0\n    curr_len = 0\n    \n    # Check if the kth element is not present in the array\n    if k > n:\n        return 0\n    \n    # Traverse through the array starting from index and add the elements to the current subsequence and calculate their sum and length\n    for i in range(index, n):\n        curr_sum += a[i]\n        curr_len += 1\n        \n        # If the sum of the subsequence including the current element is greater than the maximum sum, update the variables\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            curr_sum = 0\n            curr_len = 1\n            \n        # If the sum of the subsequence including the current element is equal to the maximum sum and the length of the subsequence is greater than or equal to k, update the variables\n        elif curr_sum == max_sum and curr_len >= k:\n            max_sum = curr_sum\n            curr_sum = 0\n            curr_len = 1\n            \n    # Return the maximum sum of increasing subsequence\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    \"\"\"\n    if k > index:\n        raise ValueError(\"k must be greater than index\")\n\n    if index == 0:\n        return a[index]\n\n    # Initialize the maximum sum and current sum variables\n    max_sum = max_sum_before = float('-inf')\n    current_sum = 0\n\n    # Iterate through the elements from index 0 to k-1\n    for i in range(index, k):\n        # Update the current sum\n        current_sum = max(a[i], current_sum + a[i])\n        # Update the maximum sum if the current sum is greater\n        max_sum = max(max_sum, current_sum)\n        # Update the maximum sum before k if the current sum is greater\n        max_sum_before = max(max_sum_before, current_sum)\n\n    return max_sum_before"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if index == n:\n        return 0\n    if a[index] >= a[k]:\n        return max_sum_increasing_subseq(a, n, index + 1, k) + a[index]\n    else:\n        return max_sum_increasing_subseq(a, n, index + 1, k)"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if index == n:\n        return 0\n    \n    if a[index] <= a[k]:\n        return max(a[index] + max_sum_increasing_subseq(a, n, index+1, k), max_sum_increasing_subseq(a, n, index+1, k))\n    else:\n        return max_sum_increasing_subseq(a, n, index+1, k)"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    dp = [[0] * (n+1) for _ in range(n+1)]\n    max_sum = 0\n\n    # Base case:\n    for i in range(1, n+1):\n        dp[i][i] = a[i-1]\n\n    # Fill the table:\n    for i in range(1, n+1):\n        for j in range(1, i+1):\n            if i == j:\n                dp[i][j] = a[j-1]\n            else:\n                dp[i][j] = max(dp[i][j], a[j-1] + dp[i+1][j])\n\n    # Find the maximum sum of increasing subsequence:\n    for i in range(1, n+1):\n        for j in range(i, n+1):\n            if j < index:\n                break\n            if k > i:\n                break\n            if dp[i][j] > max_sum:\n                max_sum = dp[i][j]\n\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    This function takes a list of integers a, the length of the list n, the index at which we want to find the maximum increasing subsequence (0 <= index < n), and a given kth element which is after i, i.e., k > i.\n    It returns the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i.\n    '''\n\n    # Initialize the max sum to 0\n    max_sum = 0\n\n    # Initialize the current sum to the first element of the list\n    current_sum = a[0]\n\n    # Initialize the current subsequence to the first element of the list\n    current_subseq = [a[0]]\n\n    # Loop through the remaining elements of the list\n    for i in range(1, n):\n\n        # If the current element is greater than the kth element\n        if a[i] > k:\n\n            # Calculate the maximum sum of increasing subsequence from the current prefix to i\n            current_sum = max(current_sum, current_subseq[-1] + a[i])\n\n            # If the current sum is greater than the maximum sum of increasing subsequence from the beginning of the list to i\n            if current_sum > max_sum:\n\n                # Update the maximum sum of increasing subsequence from the beginning of the list to i\n                max_sum = current_sum\n\n                # Update the current subsequence to the current prefix to i\n                current_subseq = [a[i]]\n\n        # If the current element is not greater than the kth element\n        else:\n\n            # Update the current subsequence to the current prefix to i\n            current_subseq.append(a[i])\n\n    # If the maximum sum of increasing subsequence from the beginning of the list to the kth element is greater than the maximum sum of increasing subsequence from the beginning of the list to index\n    if max_sum > max_sum_increasing_subseq(a, n, 0, k):\n\n        # Update the maximum sum of increasing subsequence from the beginning of the list to index\n        max_sum = max_sum_increasing_subseq(a, n, 0, k)\n\n        # Update the current subsequence to the current prefix to index\n        current_subseq = [a[i] for i in range(n)]\n\n    return max_sum, current_subseq\n"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n\n    new_tuplex = deepcopy(tuplex)\n\n    for i in range(m):\n        new_tuplex = new_tuplex[0:n]\n\n    return new_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Check if the given tuple is valid or not\n    if len(tuplex) < m or len(tuplex) > n:\n        return None\n\n    # Get a copy of the given tuple to not modify the original\n    new_tuplex = deepcopy(tuplex)\n\n    # Get the first m elements of the new tuple\n    first_m_elements = new_tuplex[:m]\n\n    # Get the last n-m elements of the new tuple\n    last_n_m_elements = new_tuplex[-n:]\n\n    # Create a colon of the first m elements and last n-m elements\n    colon_elements = []\n    for i in range(m):\n        colon_elements.append(first_m_elements[i])\n        colon_elements.append(\":\")\n    for i in range(n-m):\n        colon_elements.append(last_n_m_elements[i])\n\n    # Convert the colon_elements list to a colon string\n    colon_string = \"\".join(colon_elements)\n\n    return colon_string"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n\n    Parameters:\n        tuplex (tuple): the tuple whose colon is required.\n        m (int): the number of elements in the colon.\n        n (int): the number of elements in the tuple.\n\n    Returns:\n        tuple: the colon of the tuple.\n    '''\n\n    # Check if the tuple is empty\n    if n == 0:\n        return ()\n\n    # Check if the tuple has only one element\n    elif n == 1:\n        return (tuplex[0],)\n\n    # If the tuple has more than one element, create a colon of length m\n    else:\n        colon = ()\n        for i in range(m):\n            index = i % n\n            colon += (tuplex[index],)\n\n        return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Make a deepcopy of the tuple so that we don't modify the original\n    colontup = deepcopy(tuplex)\n\n    # Iterate over the tuple and add the appropriate number of elements to the colon\n    for i in range(m):\n        for j in range(n):\n            colontup = colontup[:j] + (i,) + colontup[j+1:]\n\n    return colontup"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n\n    Args:\n        tuplex (tuple): A tuple with at least m elements.\n        m (int): The number of elements to be included in the colon.\n        n (int): The number of elements to be included after the colon.\n\n    Returns:\n        A tuple with m elements and n elements after the colon.\n    '''\n    # make a deep copy of the input tuple\n    tuplex_copy = deepcopy(tuplex)\n\n    # get the number of elements in the original tuple\n    length = len(tuplex_copy)\n\n    # get the number of elements to be included in the colon\n    colon_length = min(m, length)\n\n    # get the number of elements to be included after the colon\n    after_colon_length = length - colon_length\n\n    # get the index of the last element to be included in the colon\n    colon_index = length - 1 - colon_length\n\n    # set the elements in the colon\n    for i in range(colon_length):\n        tuplex_copy[i] = tuplex_copy[colon_index]\n        colon_index -= 1\n\n    # set the elements after the colon\n    for i in range(after_colon_length):\n        tuplex_copy[m - 1 + i] = tuplex_copy[length - 1 - i]\n\n    # return the coloned tuple\n    return tuplex_copy"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Create a copy of the tuple\n    tuplex_copy = deepcopy(tuplex)\n    \n    # Loop through each element of the tuple\n    for i in range(len(tuplex_copy)):\n        # Get the current element\n        current_element = tuplex_copy[i]\n        \n        # If the current element is not a string, convert it to a string\n        if not isinstance(current_element, str):\n            current_element = str(current_element)\n        \n        # Split the current element into a list of its characters\n        current_list = list(current_element)\n        \n        # Loop through each character of the list\n        for j in range(len(current_list)):\n            # Get the current character\n            current_char = current_list[j]\n            \n            # If the current character is a colon, convert it to the requested number of spaces\n            if current_char == ':':\n                current_list[j] ='' * n\n        \n        # Join the list back into a string\n        current_element = ''.join(current_list)\n        \n        # Set the current element to the updated string\n        tuplex_copy[i] = current_element\n    \n    # Join the tuple elements back into a string\n    colon_string = ':'.join(tuplex_copy)\n    \n    # Return the colon string\n    return colon_string"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    col = deepcopy(tuplex)\n    for i in range(m):\n        col[i] = i\n    return col"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    result = []\n    for i in range(m):\n        for j in range(n):\n            result.append(tuplex[i*n+j])\n    return result"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    row = []\n    for i in range(m):\n        row.append(deepcopy(tuplex[i]))\n    return tuple(row)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Write a function to get a colon of a tuple.\n    \"\"\"\n    for i in range(m):\n        for j in range(n):\n            if j == 0:\n                tuplex[i] = (tuplex[i][0],) + tuplex[i][1:]\n            else:\n                tuplex[i] += (tuplex[i][j-1],)\n    return tuplex"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # initialize variables\n    max_product = float('-inf')\n    largest_product = float('-inf')\n    largest_product_index = -1\n    largest_product_index1 = -1\n    largest_product_index2 = -1\n    \n    # loop through each combination of factors\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            # calculate the product of the two factors\n            product = nums1[i] * nums2[j]\n            # check if the product is larger than the current maximum product\n            if product > max_product:\n                max_product = product\n                largest_product = nums1[i] * nums2[j]\n                largest_product_index = i\n                largest_product_index1 = i\n                largest_product_index2 = j\n    \n    # return the specified number of largest products\n    return [largest_product] + [nums1[largest_product_index1]] + [nums2[largest_product_index2]] + [max_product]"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n\n    # Find the maximum product of two numbers\n    def max_product(a, b):\n        return max(a, b) * min(a, b)\n\n    # Find the maximum product of three numbers\n    def max_product_of_three(a, b, c):\n        return max(max(a, b), c) * min(a, b)\n\n    # Initialize the maximum products found so far\n    max_product_of_one = max_product_of_three(nums1[0], nums1[1], nums1[2])\n    max_product_of_two = max_product_of_three(nums2[0], nums2[1], nums2[2])\n    max_product_of_three = max_product(nums1[0], nums2[0])\n\n    # Iterate over the remaining elements and update the maximum products\n    for i in range(3, N):\n        product_of_one = max_product_of_one * nums1[i]\n        product_of_two = max_product_of_two * nums2[i]\n        product_of_three = max_product(product_of_one, product_of_two)\n        if product_of_three > max_product_of_three:\n            max_product_of_one = product_of_one\n            max_product_of_two = product_of_two\n            max_product_of_three = product_of_three\n\n    # Return the maximum product of three numbers\n    return max_product_of_three"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Find the maximum product for each list\n    max1 = max(nums1)\n    max2 = max(nums2)\n    # Calculate the product of the first N elements of each list\n    product1 = nums1[0] * nums1[1] * nums1[2] *... * nums1[N-1]\n    product2 = nums2[0] * nums2[1] * nums2[2] *... * nums2[N-1]\n    # Calculate the largest product for each factor\n    largest_product1 = max(product1, product2)\n    largest_product2 = max(max1 * max2, max2 * max1)\n    # Return the product of the two largest products\n    return largest_product1 * largest_product2"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    \n    # Initialize the maximum value for the product to be found\n    max_product = float('-inf')\n    \n    # Initialize the maximum product index\n    max_index = 0\n    \n    # Initialize the first product and its index\n    product1 = 1\n    index1 = 0\n    \n    # Initialize the second product and its index\n    product2 = 1\n    index2 = 0\n    \n    # Loop through the lists of numbers\n    for i in range(N):\n        \n        # Calculate the product of the current two numbers\n        product = nums1[i] * nums2[i]\n        \n        # If the current product is greater than the previous maximum, update the maximum and its index\n        if product > max_product:\n            max_product = product\n            max_index = i\n        \n        # If the current product is greater than the current product for the first list, update the first product and its index\n        if product > product1:\n            product1 = product\n            index1 = i\n        \n        # If the current product is greater than the current product for the second list, update the second product and its index\n        if product > product2:\n            product2 = product\n            index2 = i\n            \n    # Return the maximum product and its indices for the two lists\n    return max_product, max_index, index1, index2"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    largest_products = []\n    for i in range(N):\n        product = max(nums1[i], nums2[i])\n        for j in range(i+1, N):\n            product *= max(nums1[j], nums2[j])\n        largest_products.append(product)\n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    products = []\n    for i in range(N):\n        product1 = 1\n        product2 = 1\n        if nums1[i] > nums2[i]:\n            product1 = nums1[i]\n            product2 = nums2[i]\n        else:\n            product2 = nums1[i]\n            product1 = nums2[i]\n        for j in range(i+1, N):\n            product = product1 * product2\n            if nums1[j] > nums2[j]:\n                product1 = product\n                product2 = nums1[j]\n            else:\n                product2 = product\n                product1 = nums2[j]\n        products.append(product1 * product2)\n    return products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if N > len(nums1) or N > len(nums2):\n        return \"Error: N is greater than the length of the largest list.\"\n    products = []\n    for i in range(N):\n        product = nums1[i] * nums2[i]\n        if product > 0:\n            products.append(product)\n    return max(products)"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    largest_product1 = 0\n    largest_product2 = 0\n    for i in range(N):\n        factor1 = nums1[i]\n        factor2 = nums2[i]\n        product1 = factor1 * factor2\n        if product1 > largest_product1:\n            largest_product1 = product1\n        product2 = factor2 * factor1\n        if product2 > largest_product2:\n            largest_product2 = product2\n    return largest_product1, largest_product2"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the two input lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Initialize variables to store the largest products\n    largest_product1 = largest_product2 = float('-inf')\n\n    # Loop through the selected factors\n    for i in range(N):\n        # Find the product of the largest factor in each list\n        product1 = nums1[-1] * nums2[-1]\n\n        # Update the largest products if the current product is larger\n        if product1 > largest_product1:\n            largest_product1 = product1\n\n        # Find the product of the second largest factor in each list\n        product2 = nums1[-2] * nums2[-2]\n\n        # Update the largest products if the current product is larger\n        if product2 > largest_product2:\n            largest_product2 = product2\n\n    # Return the two largest products\n    return largest_product1, largest_product2"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    max_product = float('-inf')\n    max_product_set = set()\n\n    # Get the largest product of any number from nums1 and nums2\n    for num1 in nums1:\n        for num2 in nums2:\n            product = num1 * num2\n            if product > max_product and product not in max_product_set:\n                max_product = product\n                max_product_set.add(product)\n\n    # Get the largest product of the selected number(s) from nums1 and nums2\n    selected_numbers = []\n    for num1 in nums1:\n        for num2 in nums2:\n            product = num1 * num2\n            if product == max_product:\n                selected_numbers.append((num1, num2))\n                if len(selected_numbers) == N:\n                    break\n\n    # Return the largest N products\n    return selected_numbers"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        print(\"The maximum number is:\", a)\n    else:\n        print(\"The maximum number is:\", b)"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Find the maximum of two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    This function converts a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Write a function to convert a given string to a tuple of characters.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Write a function to convert a given string to a tuple of characters.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    This function takes a string as input and returns a tuple of its characters.\n    '''\n    # Convert the string to a list of characters\n    char_list = list(str1)\n    # Convert the list to a tuple\n    tuple_char = tuple(char_list)\n    # Return the tuple\n    return tuple_char"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize the result to 0\n    result = 0\n    # Initialize the position of the unset bit to 0\n    unset_bit_pos = 0\n    # Iterate through the bits of the given number\n    for bit in bin(n)[2:]:\n        # If the bit is 0, set the position of the unset bit to the current position\n        if bit == '0':\n            unset_bit_pos = result\n        # If the bit is 1, set the result to the sum of the current position and the unset position\n        else:\n            result = result + unset_bit_pos\n        # Add 1 to the position of the unset bit\n        unset_bit_pos = unset_bit_pos + 1\n    # Set the left most unset bit to 1\n    result = result + 1\n    # Return the result\n    return result"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # count the number of unset bits in n\n    unset_bits = 0\n    while n:\n        n &= n - 1\n        unset_bits += 1\n    # set the leftmost unset bit to 1\n    return n | (1 << unset_bits)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n):\n    # Convert binary representation of n to a list of binary digits\n    n_digits = [int(digit) for digit in bin(n)[2:]]\n    # Initialize the leftmost unset bit to 1\n    leftmost_unset_bit = 1\n    # Iterate through the binary digits in reverse order\n    for i in range(len(n_digits)-1, -1, -1):\n        # If the bit is set to 1, move on to the next digit\n        if n_digits[i] == 1:\n            break\n        # Otherwise, increment the leftmost unset bit and move on to the next digit\n        leftmost_unset_bit <<= 1\n    # Return the leftmost unset bit\n    return leftmost_unset_bit"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    This function sets the leftmost unset bit in a given number n.\n\n    Args:\n    n (int): The number whose leftmost unset bit needs to be set.\n\n    Returns:\n    int: The number with the leftmost unset bit set.\n    \"\"\"\n\n    # Initialize the bitmask with all bits set to 1\n    bitmask = 0b1111111111111111111111111111111\n\n    # Loop through each bit from the least significant bit to the most significant bit\n    for i in range(1, 32):\n\n        # Check if the current bit is set to 1\n        if n & (1 << (31 - i)):\n\n            # Set the bit in the bitmask to 0\n            bitmask |= (1 << (31 - i))\n\n            # Set the current bit to 0 to unset the bit\n            n &= ~(1 << (31 - i))\n\n            # Break out of the loop\n            break\n\n    # Return the modified number with the leftmost unset bit set\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Convert the binary representation of n to a list of digits\n    bin_rep = [int(digit) for digit in bin(n)[2:]]\n    # Initialize the index of the left most unset bit to -1\n    left_most_unset_bit_index = -1\n    # Iterate through the list of digits from right to left\n    for i in range(len(bin_rep) - 1, -1, -1):\n        if bin_rep[i] == 1:\n            # If the digit is 1, it means that the left most unset bit is at index i\n            left_most_unset_bit_index = i\n            # Exit the loop as we have found the left most unset bit\n            break\n    # Check if the left most unset bit is at index 0\n    if left_most_unset_bit_index == 0:\n        # If it is at index 0, there is no unset bit to set\n        return n\n    else:\n        # Set the left most unset bit to 1\n        bin_rep[left_most_unset_bit_index] = 1\n        # Convert the list of digits back to a binary string\n        bin_str = ''.join(str(digit) for digit in bin_rep)\n        # Convert the binary string back to an integer\n        new_n = int(bin_str, 2)\n        return new_n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n\n    # Convert the binary representation of n into a list of digits\n    binary_representation = bin(n)[2:]\n\n    # Find the index of the leftmost unset bit by iterating through the list of digits\n    index = 0\n    while index < len(binary_representation) and binary_representation[index] == '0':\n        index += 1\n\n    # If there are no unset bits, return n unchanged\n    if index == len(binary_representation):\n        return n\n\n    # Convert the binary representation of n into a list of digits without the leftmost unset bit\n    binary_representation = binary_representation[:index]\n\n    # Convert the binary representation of n back into an integer and return it\n    return int(binary_representation, 2)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    for i in range(32):\n        if (n >> i) & 1 == 0:\n            n = n | (1 << i)\n            break\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n): \n    \"\"\"\n    Write a python function to set the left most unset bit.\n    \"\"\"\n    # Initialize the leftmost unset bit to 1\n    bit = 1\n    \n    # Loop while the leftmost unset bit is set\n    while (n & bit) == bit:\n        bit <<= 1\n        \n    # Set the leftmost unset bit to 1\n    n |= bit\n    \n    return n\n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    This function sets the left most unset bit in a given integer n.\n    The function returns the modified integer.\n    '''\n\n    # Find the length of the binary representation of n\n    bit_length = len(bin(n)[2:])\n\n    # Set the leftmost unset bit to 1\n    n |= (1 << bit_length) - 1\n\n    # Return the modified integer\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    This function sets the left most unset bit in a given number.\n    \"\"\"\n\n    # Convert the given number to binary and reverse it\n    binary_str = bin(n)[2:].zfill(32)\n    binary_str_reversed = binary_str[::-1]\n\n    # Iterate through each bit position and check if it is unset\n    for i in range(32):\n        if binary_str_reversed[i] == '0':\n            # If the bit is unset, set it to 1 and break the loop\n            binary_str_reversed = binary_str_reversed[:i] + '1' + binary_str_reversed[i+1:]\n            break\n\n    # Convert the reversed binary string back to an integer and return it\n    return int(binary_str_reversed, 2)"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (1/3) * math.pi * (r**2) * h"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    #calculating volume using formula of the cone\n    vol = (1/3) * math.pi * r**2 * h\n    return vol\n"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi * r**2 * h\n    return volume\n"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_cone(r, h):\n    \"\"\"\n    This function calculates the volume of a cone with given radius and height.\n\n    Args:\n    r (float): radius of the cone\n    h (float): height of the cone\n\n    Returns:\n    float: volume of the cone\n\n    \"\"\"\n    volume = (1/3) * math.pi * r * r * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    # Define the volume of the cone\n    V = (1/3)*math.pi*r*r*h\n    \n    # Return the volume of the cone\n    return V"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_cone(r, h):\n    \"\"\"\n    This function takes two arguments, r and h, which represent the radius and height of a cone respectively.\n    The function returns the volume of the cone.\n    \"\"\"\n    return math.pi * r**2 * h / 3"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function calculates the volume of a cone given the radius r and height h.\n    '''\n    volume = (1/3) * math.pi * (r**2) * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    area = math.pi * r**2\n    volume = area * h / 3\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3) * math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_cone(r, h):\n    \"\"\"\n    This function calculates the volume of a cone.\n    \"\"\"\n    volume = (1/3) * math.pi * r * r * h\n    return volume"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    while n % 2 == 0:\n        n = n // 2\n    return n"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # initialize the highest power of 2 to be 1 (since 1 is already a power of 2)\n    highest = 1\n    # loop through the numbers from 2 to n-1\n    for i in range(2, n):\n        # if the current number is a power of 2, check if it's greater than the current highest\n        if i == 2**highest:\n            highest += 1\n    # return the highest power of 2\n    return highest"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # initialize maximum power of 2 to 0\n    max_power_of_2 = 0\n\n    # loop until maximum power of 2 is greater than n\n    while n > 1:\n        # increment power of 2 by 1\n        n = n >> 1\n\n        # update maximum power of 2 if current power of 2 is greater\n        if n > max_power_of_2:\n            max_power_of_2 = n\n\n    return max_power_of_2"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n\n    # Initialize a variable to store the highest power of 2\n    highest_power = 1\n\n    # Loop through the values from 1 to n\n    for i in range(1, n+1):\n        # Check if the current value is a power of 2\n        if i == 1:\n            continue\n        elif i % 2 == 0:\n            # If it is, check if the value is greater than the current highest power\n            if i > highest_power:\n                highest_power = i\n\n    # Return the highest power of 2 less than or equal to n\n    return highest_power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n <= 0:\n        return 0\n    \n    power = 1\n    while power * 2 <= n:\n        power *= 2\n        \n    return power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    # initialize a variable to keep track of the highest power of 2 that is less than or equal to n\n    highest = 0\n    # loop through all powers of 2 from 1 to the square root of n\n    for i in range(1, int(n**0.5)+1):\n        # if the power of 2 is less than or equal to n, update the highest value\n        if i <= n:\n            highest = i\n    # return the highest power of 2 that is less than or equal to n\n    return highest"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    while n > 0:\n        n = n >> 1\n    return n"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    # Initialize a variable to keep track of the highest power of 2\n    highest_power = 1\n    \n    # Loop through each power of 2 from 2 up to n\n    for power in range(2, n+1):\n        # If the power is greater than the current highest power, update highest_power\n        if power > highest_power:\n            highest_power = power\n    \n    # Return the highest power of 2 less than or equal to n\n    return highest_power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n): \n    '''\n    This function finds the highest power of 2 that is less than or equal to n.\n    '''\n\n    # Initialize variables\n    power = 1\n    highest_power = 1\n\n    # Loop until the power of 2 is less than or equal to n\n    while power <= n:\n        power <<= 1\n        highest_power = power\n\n    return highest_power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    while n > 1:\n        n = n >> 1\n    return n"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0: \n        return 2\n    elif n == 1: \n        return 1\n    else: \n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0: \n        return 2 \n    elif n == 1: \n        return 1\n    else: \n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n    \n    if n == 1:\n        return 2\n    \n    if n == 2:\n        return 1\n    \n    # initialize variables\n    a, b = 2, 1\n    \n    # calculate and return nth lucas number\n    for i in range(3, n+1):\n        c = a + b\n        a = b\n        b = c\n    \n    return b"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0: \n        return 2\n    elif n == 1: \n        return 1\n    else: \n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    lucas_sequence = [2, 1]\n    for _ in range(n-2):\n        lucas_sequence.append(lucas_sequence[-1] + lucas_sequence[-2])\n    return lucas_sequence[n-1]"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        lucas = find_lucas(n-1)\n        return (lucas**2) + lucas\n\nn = int(input(\"Enter the value of n: \"))\nprint(f\"The {n}th lucas number is: {find_lucas(n)}\")"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    lucas = [0, 2] # initialize the list with the first two numbers of the sequence\n    for i in range(2, n+1): # loop through the sequence up to the nth number\n        lucas.append(lucas[i-1] + lucas[i-2]) # calculate the next number in the sequence\n    return lucas[n] # return the nth number in the sequence"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(x) for x in list_]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i, element in enumerate(list_):\n        list_[i] = string.format(element)"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [format(x, string) for x in list_]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    formatted_list = []\n    for item in list_:\n        formatted_list.append(string % item)\n    return formatted_list"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    \n    Args:\n        l1 (list): List of values to be converted to dictionary.\n        l2 (list): List of keys to be used for the dictionary.\n        l3 (list): List of values to be used for the keys.\n    \n    Returns:\n        dictionary: Nested dictionary with elements from l1 as keys and elements from l2 as values.\n    \n    Examples:\n        l1 = [1, 2, 3]\n        l2 = ['a', 'b', 'c']\n        l3 = ['one', 'two', 'three']\n        result = convert_list_dictionary(l1, l2, l3)\n        print(result)\n    '''\n\n    # Create a dictionary to store the converted data\n    result = {}\n    \n    # Iterate over the lists and create the nested dictionary\n    for i in range(len(l1)):\n        result[l2[i]] = l3[i]\n    \n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # create an empty dictionary to store the data\n    data = {}\n    # loop through each list\n    for i in range(len(l1)):\n        # loop through each item in the list\n        for j in range(len(l1[i])):\n            # get the current item from the lists\n            current_item = l1[i][j]\n            # check if the current item is already in the dictionary\n            if current_item in data:\n                # if it is, add the current list as a new key to the dictionary\n                data[current_item].append(l2[i][j])\n            else:\n                # if it isn't, create a new key in the dictionary with the current list as its value\n                data[current_item] = [l2[i][j]]\n    # loop through each list in the third list\n    for item in l3:\n        # loop through each item in the list\n        for j in range(len(item)):\n            # get the current item from the lists\n            current_item = item[j]\n            # check if the current item is already in the dictionary\n            if current_item in data:\n                # if it is, add the current list as a new key to the dictionary\n                data[current_item].append(item)\n            else:\n                # if it isn't, create a new key in the dictionary with the current list as its value\n                data[current_item] = [item]\n    # return the resulting dictionary\n    return data"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Creating empty dictionary to store the nested dictionaries\n    nested_dict = {}\n    # Iterating through each list\n    for i in range(len(l1)):\n        # Iterating through each item in the list\n        for j in range(len(l1[i])):\n            # Getting the key of the nested dictionary based on the first list\n            key = l1[i][j]\n            # Creating a nested dictionary if it does not exist\n            if key not in nested_dict:\n                nested_dict[key] = {}\n            # Adding the value of the list to the nested dictionary\n            nested_dict[key][l2[i][j]] = l3[i][j]\n    # Returning the nested dictionary\n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n    result = {}\n\n    for i in range(len(l1)):\n        result[l1[i]] = l2[i]\n\n    for i in range(len(l1), len(l1) + len(l2)):\n        result[l3[i-len(l1)]] = l3[i]\n\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Create empty dictionary\n    nested_dict = {}\n    \n    # Iterate through each list and append the elements to the dictionary\n    for i, lst in enumerate([l1, l2, l3]):\n        for j in range(len(lst)):\n            # Add the key-value pair to the nested dictionary\n            nested_dict[lst[j]] = i\n    \n    # Return the nested dictionary\n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d = {}\n    for i, item in enumerate(l1):\n        d[item] = {l2[i]: l3[i]}\n    return d"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \n    Parameters:\n    l1 (list): list of elements to be converted to dictionary\n    l2 (list): list of elements to be converted to dictionary\n    l3 (list): list of elements to be converted to dictionary\n    \n    Returns:\n    dict: nested dictionary with elements from the input lists\n    \"\"\"\n    # Create an empty dictionary to store the converted elements\n    result = {}\n    # Loop through each list and add each element as key-value pair to the result dictionary\n    for i in range(len(l1)):\n        result[l1[i]] = l2[i]\n    for i in range(len(l1)):\n        result[l1[i]] = result[l1[i]] + [l3[i]]\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d = {}\n    for i in range(len(l1)):\n        d[l1[i]] = {l2[i]: l3[i]}\n    return d"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n\n    # Create an empty dictionary to store the data\n    data = {}\n\n    # Loop through each list\n    for i in range(len(l1)):\n        # Convert the i-th list item to a key in the data dictionary\n        key = str(l1[i])\n\n        # Check if the key already exists in the data dictionary\n        if key in data:\n            # If it does, add the i-th list item to the value of that key in the data dictionary\n            data[key].append(l2[i])\n        else:\n            # If it doesn't, create a new key-value pair in the data dictionary with the i-th list item as its value\n            data[key] = [l2[i]]\n\n    # Loop through each list\n    for i in range(len(l3)):\n        # Convert the i-th list item to a key in the data dictionary\n        key = str(l3[i])\n\n        # Check if the key already exists in the data dictionary\n        if key in data:\n            # If it does, add the i-th list item to the value of that key in the data dictionary\n            data[key].append(l3[i])\n        else:\n            # If it doesn't, create a new key-value pair in the data dictionary with the i-th list item as its value\n            data[key] = [l3[i]]\n\n    # Return the final data dictionary\n    return data"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Use a list comprehension to create a list of dictionaries\n    nested_list = [{'name': i} for i in l1]\n    nested_list.extend([{'age': j} for j in l2])\n    nested_list.extend([{'city': k} for k in l3])\n    return nested_list"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    \n    def f(n):\n        if n == 1:\n            return 1\n        elif n == 2:\n            return 2\n        else:\n            return n*f(n-1)\n    \n    return f(n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_max_sum(n):\n    if n <= 0:\n        return 0\n    \n    # base case: return 0 for n = 0 or 1\n    if n == 1:\n        return 0\n    \n    # recursive case: calculate f(n/2), f(n/3), f(n/4), f(n/5) recursively\n    f2 = get_max_sum(n//2)\n    f3 = get_max_sum(n//3)\n    f4 = get_max_sum(n//4)\n    f5 = get_max_sum(n//5)\n    \n    # calculate the maximum sum of the four sums by using the given equation\n    max_sum = max(f2 + f3 + f4 + f5, n)\n    \n    return max_sum"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n    else:\n        return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 1:\n        return n\n    else:\n        return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # Recursive function to find the maximum sum of the given number using the given equation\n    def find_max_sum(n):\n        if n == 1:\n            return 1\n        else:\n            return max(find_max_sum(n/2) + find_max_sum(n/3) + find_max_sum(n/4) + find_max_sum(n/5), n)\n    \n    # Call the recursive function to find the maximum sum\n    max_sum = find_max_sum(n)\n    return max_sum"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n    else:\n        return max((get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5)) + n, n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 1:\n        return n\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # base cases\n    if n == 1:\n        return n\n    elif n == 2:\n        return n * 2\n    elif n == 3:\n        return n * 3\n    elif n == 4:\n        return n * 4\n    elif n == 5:\n        return n * 5\n\n    # recursive case\n    else:\n        return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n\n    # Base case\n    if n == 1:\n        return 1\n    \n    # Recursive case\n    else:\n        return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n    else:\n        return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5) + n, get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5))"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    \n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    \n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    lengths = []\n    for item in input_list:\n        lengths.append(len(str(item)))\n    return input_list[lengths.index(max(lengths))]"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    longest_list = []\n\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            longest_list = [item]\n        elif len(item) == max_length:\n            longest_list.append(item)\n\n    return longest_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    \n    for i in range(len(input_list)):\n        if len(input_list[i]) > max_length:\n            max_length = len(input_list[i])\n            max_list = input_list[i]\n            \n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n    return max_length"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    \"\"\"\n    Write a function to find the list with maximum length.\n    \"\"\"\n    max_length = 0\n    max_list = None\n\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = item\n\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_list = i\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = len(input_list[0])\n    max_list = input_list[0]\n    \n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = item\n    \n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = len(input_list[0])\n    max_list = input_list[0]\n\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_list = i\n\n    return max_list"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # convert the tuple to a set to remove duplicates\n    test_set = set(test_tup)\n    # check if the set is empty (no duplicates)\n    if len(test_set) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(set(test_tup)) == len(test_tup)"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # Convert tuple to set to remove duplicates and check if it is empty\n    return len(set(test_tup)) == len(test_tup)"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # create a set to keep track of the elements in the tuple\n    seen = set()\n    # loop through the tuple and add each element to the set\n    for elem in test_tup:\n        if elem in seen:\n            return False\n        else:\n            seen.add(elem)\n    return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    seen = set()\n    for elem in test_tup:\n        if elem in seen:\n            return False\n        seen.add(elem)\n    return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # convert the tuple to a set to remove duplicates\n    unique_set = set(test_tup)\n    # check if the set is empty, which means all elements are unique\n    return bool(len(unique_set))"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # Convert the tuple into a set to remove duplicates\n    unique_tup = set(test_tup)\n\n    # Check if the length of the set is equal to the length of the tuple\n    if len(unique_tup) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Write a python function to find the first non-repeated character in a given string.\n\n    Args:\n        str1 (str): A string to search for the first non-repeating character.\n\n    Returns:\n        str: The first non-repeating character in the string, or an empty string if no non-repeating character is found.\n\n    \"\"\"\n    # Create a dictionary to store the count of each character in the string\n    char_count = {}\n\n    # Loop through each character in the string and update the count in the dictionary\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    # Loop through the string again and find the first non-repeating character\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n\n    # If no non-repeating character is found, return an empty string\n    return \"\""
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n\n    # find the first non-repeated character\n    for char in freq:\n        if freq[char] == 1:\n            return char\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    char_set = {}\n    for char in str1:\n        if char in char_set:\n            return char\n        else:\n            char_set[char] = True\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    # Create an empty dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    # Find the first character that appears only once in the string\n    for char in freq:\n        if freq[char] == 1:\n            return char\n    \n    # If no character appears only once, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # create an empty dictionary to store the characters and their frequency\n    freq = {}\n    # loop through the string and count the frequency of each character\n    for char in str1:\n        freq[char] = freq.get(char, 0) + 1\n    # loop through the string again and find the first character with a frequency of 1\n    for char in str1:\n        if freq[char] == 1:\n            return char\n    # if no character has a frequency of 1, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    # create a dictionary to store characters and their frequency\n    char_freq = {}\n    \n    # loop through the string\n    for char in str1:\n        # check if the character is already in the dictionary\n        if char in char_freq:\n            # if it is, increment its frequency\n            char_freq[char] += 1\n        else:\n            # if it's not, add it to the dictionary with a frequency of 1\n            char_freq[char] = 1\n    \n    # find the first character that appears more than once\n    for char in char_freq:\n        if char_freq[char] > 1:\n            return char\n    \n    # if there are no characters that appear more than once, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    This function takes a string as input and returns the first non-repeating character in the string.\n    \"\"\"\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    first_non_repeating = None\n    for char in str1:\n        if char_count[char] == 1:\n            first_non_repeating = char\n            break\n\n    return first_non_repeating"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in char_count:\n        if char_count[char] == 1:\n            return char\n    \n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    This function takes a string as input and returns the first non-repeating character in the string.\n    \"\"\"\n\n    # Convert the string to a list to easily check for duplicates\n    str_list = list(str1)\n\n    # Loop through the list and keep track of the index of the first non-repeating character\n    first_non_rep_index = -1\n    for i in range(len(str_list)):\n        if str_list[i] not in str_list[:i]:\n            first_non_rep_index = i\n            break\n\n    # Convert the index back to a character and return it\n    if first_non_rep_index == -1:\n        return None\n    else:\n        return str_list[first_non_rep_index]"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_non_repeating_character(string):\n    char_count = {}\n    for char in string:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    for char in string:\n        if char_count[char] == 1:\n            return char\n\n    return None"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    \n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    pattern = re.compile(regex)\n    if pattern.match(string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef check_char(string):\n    # define the regular expression pattern to match the start and end of the string\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    # use re.match() to check if the string matches the pattern\n    match = re.match(regex, string)\n    # if the match is None, the string does not start and end with the same character\n    if match is None:\n        return False\n    # otherwise, the string starts and ends with the same character\n    else:\n        return True"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    pattern = re.compile(regex)\n    result = pattern.match(string)\n\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    \n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    \"\"\"\n    Write a function to check whether the given string starts and ends with the same character or not.\n    \"\"\"\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import random\n\ndef quickselect(arr, k):\n    if len(arr) == 1:\n        return arr[0]\n    pivot = random.choice(arr)\n    lows = [el for el in arr if el < pivot]\n    highs = [el for el in arr if el > pivot]\n    pivots = [el for el in arr if el == pivot]\n    if k < len(lows):\n        return quickselect(lows, k)\n    elif k < len(lows) + len(pivots):\n        return pivots[0]\n    else:\n        return quickselect(highs, k - len(lows) - len(pivots))\n\ndef median_numbers(a, b, c):\n    sorted_arr = sorted([a, b, c])\n    mid = len(sorted_arr) // 2\n    return quickselect(sorted_arr, mid)"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numbers = [a, b, c]\n    numbers.sort()\n    mid = len(numbers) // 2\n    if len(numbers) % 2 == 0:\n        return (numbers[mid - 1] + numbers[mid]) / 2\n    else:\n        return numbers[mid]"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_numbers(a, b, c):\n    # Sort the three numbers in ascending order\n    a, b, c = sorted([a, b, c])\n    \n    # Calculate the median\n    median = (a + b + c) / 3\n    \n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    This function takes three numbers as arguments and returns their median.\n    \"\"\"\n    # Sort the three numbers in ascending order\n    numbers = sorted([a, b, c])\n\n    # Get the length of the numbers list\n    length = len(numbers)\n\n    # Calculate the median\n    if length % 2 == 0:  # If the length of the list is even\n        median = (numbers[length // 2 - 1] + numbers[length // 2]) / 2\n    else:  # If the length of the list is odd\n        median = numbers[length // 2]\n\n    # Return the median value\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    # Sort the three numbers in ascending order\n    sorted_list = sorted([a, b, c])\n    \n    # Determine the median based on the length of the list\n    if len(sorted_list) % 2 == 0:\n        # If the length of the list is even, take the average of the two middle numbers\n        median = (sorted_list[len(sorted_list)//2-1] + sorted_list[len(sorted_list)//2]) / 2\n    else:\n        # If the length of the list is odd, take the middle number\n        median = sorted_list[len(sorted_list)//2]\n    \n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the given numbers in ascending order\n    a_sorted = sorted([a, b, c])\n    b_sorted = sorted([a, b, c])\n    c_sorted = sorted([a, b, c])\n\n    # Get the length of the sorted array\n    n = len(a_sorted)\n\n    # Calculate the median\n    if n % 2 == 0:\n        median = (a_sorted[n//2 - 1] + a_sorted[n//2]) / 2\n    else:\n        median = a_sorted[n//2]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_numbers(a,b,c):\n    '''\n    This function takes three numbers as input and finds the median of those numbers.\n    '''\n    # Sort the numbers in ascending order\n    nums = sorted([a,b,c])\n\n    # Calculate the length of the array\n    n = len(nums)\n\n    # If the length of the array is odd, then the median is the middle number\n    if n % 2 == 1:\n        median = nums[n//2]\n    # If the length of the array is even, then the median is the average of the two middle numbers\n    else:\n        median = (nums[n//2-1] + nums[n//2]) / 2\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    a_median = (a + b + abs(a - b))/2\n    b_median = (b + c + abs(b - c))/2\n    c_median = (a + c + abs(a - c))/2\n\n    if a_median > b_median and a_median > c_median:\n        median = a_median\n    elif b_median > a_median and b_median > c_median:\n        median = b_median\n    else:\n        median = c_median\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_numbers(a,b,c):\n    '''\n    This function takes three numbers as input and returns their median.\n    '''\n    # Sort the three numbers in ascending order\n    sorted_nums = sorted([a,b,c])\n    \n    # Find the middle index of the sorted list\n    middle_index = len(sorted_nums) // 2\n    \n    # If the length of the list is odd, the median is the middle number\n    if len(sorted_nums) % 2 == 1:\n        median = sorted_nums[middle_index]\n    # If the length of the list is even, the median is the average of the two middle numbers\n    else:\n        median = (sorted_nums[middle_index-1] + sorted_nums[middle_index]) / 2\n    \n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the three numbers in ascending order\n    num_list = sorted([a, b, c])\n\n    # Get the length of the list\n    length = len(num_list)\n\n    # If the length of the list is odd, return the middle number\n    if length % 2 == 1:\n        return num_list[length//2]\n\n    # If the length of the list is even, return the average of the two middle numbers\n    else:\n        middle1 = length//2 - 1\n        middle2 = length//2\n        return (num_list[middle1] + num_list[middle2])/2"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum([int(digit) for num in nums for digit in str(num)])"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum = 0\n    for num in nums:\n        sum += sum_of_digits(num)\n    return sum\n\n\ndef sum_of_digits(n):\n    '''\n    Write a helper function to compute the sum of digits of a given number.\n    '''\n    return sum(int(digit) for digit in str(n))\n"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # Loop through each number in the list\n    for num in nums:\n        # Convert the number to a string\n        num_str = str(num)\n        # Loop through each character in the string\n        for char in num_str:\n            # Convert the character to an integer\n            digit = int(char)\n            # Add the integer to a running total\n            total += digit\n    # Return the total\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    digit_sum = 0\n    for num in nums:\n        digit_sum += sum([int(digit) for digit in str(num)])\n    return digit_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    digit_sum = 0\n    for num in nums:\n        temp_sum = 0\n        while num > 0:\n            temp_sum += num % 10\n            num //= 10\n        digit_sum += temp_sum\n    return digit_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        num_str = str(num)\n        num_sum = sum(int(digit) for digit in num_str)\n        result.append(num_sum)\n    return result"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    Write a function to compute the sum of digits of each number of a given list.\n    \"\"\"\n    # Initialize a list to store the sum of digits for each number in the input list\n    digit_sums = []\n\n    # Loop through each number in the input list\n    for num in nums:\n        # Convert the number to a string and split it into a list of digits\n        digit_list = [int(digit) for digit in str(num)]\n        # Compute the sum of digits in the number\n        digit_sum = sum(digit_list)\n        # Append the sum to the list of digit sums\n        digit_sums.append(digit_sum)\n\n    # Return the list of digit sums\n    return digit_sums"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total += sum(int(digit) for digit in str(num))\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum(int(digit) for num in nums for digit in str(num))"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    Write a function to compute the sum of digits of each number of a given list.\n    \"\"\"\n    total_sum = 0\n    for num in nums:\n        total_sum += sum(int(digit) for digit in str(num))\n    return total_sum"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = 0\n    \n    for i in range(len(test_tup1)):\n        xor_result ^= test_tup1[i] ^ test_tup2[i]\n        \n    return xor_result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = 0\n    for i in range(len(test_tup1)):\n        xor_result ^= test_tup1[i] ^ test_tup2[i]\n    return xor_result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    \"\"\"\n    Perform the mathematical bitwise xor operation across the given tuples.\n\n    Args:\n        test_tup1 (tuple): A tuple of integers or floats.\n        test_tup2 (tuple): A tuple of integers or floats.\n\n    Returns:\n        tuple: The result of the mathematical bitwise xor operation across the given tuples.\n    \"\"\"\n    result_tup = ()\n    for i in range(max(len(test_tup1), len(test_tup2))):\n        if i < len(test_tup1) and i < len(test_tup2):\n            result_tup += (test_tup1[i] ^ test_tup2[i],)\n        elif i < len(test_tup1):\n            result_tup += (test_tup1[i],)\n        else:\n            result_tup += (test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Initialize variables for the sum and product of the tuples\n    sum_of_tuples = 0\n    product_of_tuples = 1\n    \n    # Iterate through the tuples and perform bitwise xor operation on each pair of values\n    for i in range(len(test_tup1)):\n        sum_of_tuples = sum_of_tuples ^ test_tup1[i]\n        product_of_tuples = product_of_tuples ^ test_tup2[i]\n    \n    # Return the resultant tuple as the output\n    return (sum_of_tuples, product_of_tuples)"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must have the same length to perform bitwise xor operation.\")\n\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] ^ test_tup2[i],)\n\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # check if the input tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two input tuples must have the same length.\")\n    \n    # create a new tuple to hold the results\n    result_tup = ()\n    \n    # loop through the tuples and perform the bitwise xor operation\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] ^ test_tup2[i],)\n    \n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = []\n    for i in range(min(len(test_tup1), len(test_tup2))):\n        result.append(test_tup1[i] ^ test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # iterate through the tuples\n    for i in range(len(test_tup1)):\n        # perform the bitwise xor operation and assign the result to the corresponding element of the result tuple\n        test_tup1[i] = test_tup1[i] ^ test_tup2[i]\n    # return the result tuple\n    return test_tup1"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Iterate over the tuples and perform bitwise xor operation\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] ^ test_tup2[i]\n    # Return the resultant tuple\n    return test_tup1"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Initialize the result tuple with the same length as the input tuples\n    result_tup = (0,) * len(test_tup1)\n    # Iterate over the input tuples\n    for i in range(len(test_tup1)):\n        # Perform the bitwise xor operation between the corresponding elements of the input tuples\n        result_tup[i] = test_tup1[i] ^ test_tup2[i]\n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    freq_dict = {}\n    for item in test_list:\n        if (item[0], item[1]) in freq_dict:\n            freq_dict[(item[0], item[1])] += 1\n        else:\n            freq_dict[(item[0], item[1])] = 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for tup in test_list:\n        if tup not in freq_dict:\n            freq_dict[tup] = 1\n        else:\n            freq_dict[tup] += 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set()\n    for item in test_list:\n        unique_tuples.add(tuple(item))\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for item in test_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    unique_tuples = set(tuple(sorted(x)) for x in test_list)\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # create a set to store unique tuples\n    unique_tuples = set()\n\n    # iterate through the list\n    for i in range(len(test_list)):\n        # extract the tuple from the list\n        tup = tuple(test_list[i])\n        # add the tuple to the set\n        unique_tuples.add(tup)\n\n    # return the number of unique tuples in the set\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n\n    freq_dict = {}\n    for item in test_list:\n        if item not in freq_dict:\n            freq_dict[item] = 1\n        else:\n            freq_dict[item] += 1\n\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for item in test_list:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    # create a set to store unique tuples\n    unique_tuples = set()\n    # iterate over the list of tuples\n    for tuple_ in test_list:\n        # add the tuple to the set if it's not already there\n        if tuple_ not in unique_tuples:\n            unique_tuples.add(tuple_)\n    # return the length of the set (number of unique tuples)\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    This function takes a list as input and returns a dictionary where the keys are tuples from the list and the values are the frequency of the tuple in the list.\n\n    Example:\n    >>> extract_freq([1,2,3,2,3,1,2])\n    {((1, 2, 3), 2): 2, ((2, 3), 1): 2, ((3), 2): 2, ((1), 2): 2}\n    \"\"\"\n\n    freq_dict = {}\n\n    for item in test_list:\n        freq_dict[tuple(set(item))] = freq_dict.get(tuple(set(item)), 0) + 1\n\n    return freq_dict"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # initialize an empty list to store the result\n    result_list = []\n\n    # loop through each element in the first tuple\n    for i in range(len(test_tup1)):\n        # initialize a variable to store the sum of the corresponding elements in both tuples\n        sum_of_elements = 0\n\n        # loop through each element in the second tuple\n        for j in range(len(test_tup2[i])):\n            # add the corresponding elements of the two tuples and store the result in a variable\n            sum_of_elements += test_tup1[i][j] + test_tup2[i][j]\n\n        # append the sum to the result list\n        result_list.append(sum_of_elements)\n\n    # return the result list as a tuple\n    return tuple(result_list)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] + test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_list = []\n    for i in range(len(test_tup1)):\n        result_list.append(test_tup1[i] + test_tup2[i])\n    return result_list\n"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] + test_tup2[i])\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # initialize an empty list to store the sum of elements of the two tuples\n    result = []\n    # loop through each tuple element\n    for i in range(len(test_tup1)):\n        # add the elements at each index in the two tuples\n        result.append(test_tup1[i] + test_tup2[i])\n    # return the resulting list\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Tuple lengths do not match!\")\n    \n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] + test_tup2[i],)\n    \n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] + test_tup2[i])\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Initialize the result tuple with length of the larger tuple\n    result_tup = [0] * max(len(test_tup1), len(test_tup2))\n\n    # Iterate through the tuple elements and add the corresponding elements of the two tuples\n    for i in range(len(test_tup1)):\n        result_tup[i] = test_tup1[i] + test_tup2[i]\n\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup1[i])):\n            test_tup1[i][j] += test_tup2[i][j]\n    return test_tup1"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        tup1_elem = test_tup1[i]\n        tup2_elem = test_tup2[i]\n        result.append(tup1_elem + tup2_elem)\n    return result"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def minimum(a,b):\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def minimum(a,b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def minimum(a,b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return a if a < b else b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    for element in tuplex:\n        if element in tuple1:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n\n    # Check if the given element exists in the tuple\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for element in tuple1:\n        if element in tuplex:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n\n    if tuplex in tuple1:\n        print(\"The element exists in the tuple.\")\n    else:\n        print(\"The element does not exist in the tuple.\")"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1: \n        return True \n    else: \n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        print(f\"{tuplex} exists in the tuple.\")\n    else:\n        print(f\"{tuplex} does not exist in the tuple.\")"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Check whether an element exists within a tuple.\n\n    :param tuplex: the tuple to search in\n    :type tuplex: tuple\n    :param tuple1: the element to search for\n    :type tuple1: any\n    :return: True if the element is found in the tuple, False otherwise\n    :rtype: bool\n    \"\"\"\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for element in tuplex:\n        if element in tuple1:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for element in tuplex:\n        if element in tuple1:\n            return True\n    return False"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Parity(x): \n    '''\n    This function takes an integer as input and returns True if the parity of the input number is odd, and False otherwise.\n    '''\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    # calculate the parity of x\n    parity = (x % 2) # remainder when x is divided by 2\n    # check if parity is odd or even\n    if parity == 1:\n        return \"Odd\"\n    else:\n        return \"Even\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return \"The parity of {} is even.\".format(x)\n    else:\n        return \"The parity of {} is odd.\".format(x)"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    \n    # Check if the number is negative or not\n    if x < 0:\n        return 'The number is negative.'\n    \n    # Check if the number is even or not\n    if x % 2 == 0:\n        return 'The number is even.'\n    \n    # If the number is odd, check its parity\n    else:\n        if x % 4 == 0:\n            return 'The number is a multiple of 4.'\n        elif x % 2 == 1:\n            return 'The number is odd.'\n        else:\n            return 'The number is not a multiple of 4 and odd.'"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n\n    # initialize a variable to store the parity\n    parity = 0\n    \n    # loop through each digit in the number\n    for digit in str(x):\n        # convert the digit to an integer\n        digit = int(digit)\n        # add 1 if the digit is odd and 0 if it's even\n        parity += digit * 2\n        \n    # if the parity is odd, return True, otherwise False\n    if parity % 2!= 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0: \n        print(x, \"is even\")\n        return \"even\"\n    else: \n        print(x, \"is odd\")\n        return \"odd\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Parity(x):\n    \"\"\"\n    Write a python function to find whether the parity of a given number is odd.\n    \"\"\"\n    parity = 0\n\n    if x < 0:\n        x = -x\n        parity = 1\n\n    while x > 0:\n        x //= 2\n        parity ^= 1\n\n    return parity"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Parity(x): \n    '''\n    This function takes a single argument, x, which is the number for which we want to determine its parity.\n    The function returns a boolean value, True if x is odd, and False if x is even.\n    '''\n    if x%2!= 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x%2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\""
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    # Convert the given number to a list of digits\n    num_list = [int(digit) for digit in str(n)]\n\n    # Sort the list of digits in descending order\n    num_list.sort(reverse=True)\n\n    # Convert the list of digits back to a number\n    next_bigger = int(''.join(str(digit) for digit in num_list))\n\n    return next_bigger"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Convert the given number to a string\n    num_str = str(n)\n    \n    # Initialize a variable to keep track of the maximum value\n    max_val = 0\n    \n    # Loop through each digit of the number\n    for digit in num_str:\n        # Convert the digit to an integer\n        digit_int = int(digit)\n        \n        # Add the integer to the maximum value if the current digit is greater\n        if digit_int > max_val:\n            max_val = digit_int\n    \n    # Add one to the maximum value and convert it back to a string\n    next_bigger_str = str(max_val+1)\n    \n    # Convert the number to a list of digits\n    num_list = list(num_str)\n    \n    # Loop through each digit in the list and swap it with the next bigger digit if necessary\n    for i in range(len(num_list)):\n        if num_list[i] < next_bigger_str[i]:\n            temp = num_list[i]\n            num_list[i] = next_bigger_str[i]\n            next_bigger_str[i] = temp\n    \n    # Convert the list of digits back to a string and return it\n    return ''.join(num_list)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    def next_palindrome(num):\n        while True:\n            num += 1\n            if is_palindrome(num):\n                break\n        return num\n\n    digits = [int(d) for d in str(n)]\n    max_digit = max(digits)\n    min_digit = min(digits)\n    new_digits = []\n\n    # rearrange digits\n    for d in digits:\n        if d < max_digit:\n            new_digits.append(next_palindrome(d))\n        else:\n            new_digits.append(d)\n\n    # pad with zeros if necessary\n    while len(new_digits) < len(str(n)):\n        new_digits.append(0)\n\n    # convert to a number again\n    return int(''.join(str(d) for d in new_digits))"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    # convert the input number to a string\n    num = str(n)\n    # create a list of the digits of the input number\n    digits = [int(d) for d in num]\n    # sort the list in descending order\n    sorted_digits = sorted(digits, reverse=True)\n    # join the sorted digits into a string\n    sorted_num = ''.join(str(d) for d in sorted_digits)\n    # convert the sorted string back to an integer\n    next_num = int(sorted_num)\n    # return the next bigger number\n    return next_num"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    if n > 999999999:\n        # rearrange the digits of the original number to create the next bigger number\n        while n > 999999999:\n            n *= 10\n            n //= 1000000000\n        # convert the rearranged digits back to an integer\n        n = int(str(n)[::-1])\n    return n"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    \n    # create a list of digits from the given number\n    digits = [int(digit) for digit in str(n)]\n    \n    # find the index of the largest digit\n    max_index = digits.index(max(digits))\n    \n    # reverse the digits to the left of the largest digit\n    digits[:max_index+1] = digits[:max_index+1][::-1]\n    \n    # reverse the digits to the right of the largest digit\n    digits[max_index+1:] = digits[max_index+1:][::-1]\n    \n    # reverse the whole list\n    digits = digits[::-1]\n    \n    # convert the list back to a number and return it\n    return int(''.join(map(str, digits)))"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    digits = []\n    while n > 0:\n        digits.append(n % 10)\n        n = n // 10\n\n    for i in range(len(digits)):\n        for j in range(i+1, len(digits)):\n            if digits[i] > digits[j]:\n                digits[i], digits[j] = digits[j], digits[i]\n                break\n\n    result = 0\n    for digit in digits:\n        result = result * 10 + digit\n\n    return result + 1"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    # Convert the input number to a list of digits\n    digits = [int(digit) for digit in str(n)]\n\n    # Find the largest digit in the list\n    largest = max(digits)\n\n    # Find the index of the largest digit\n    index = digits.index(largest)\n\n    # Create a list of digits to the left of the largest digit\n    left = digits[:index]\n\n    # Create a list of digits to the right of the largest digit\n    right = digits[index+1:]\n\n    # Find the smallest digit in the right list\n    smallest = min(right)\n\n    # Find the index of the smallest digit in the right list\n    smallest_index = right.index(smallest)\n\n    # Rearrange the digits to the left and right lists such that the smallest digit is to the left and the largest digit is to the right\n    if smallest_index < index:\n        # Move the smallest digit to the left of the largest digit\n        left.append(smallest)\n        left.append(largest)\n        right = right[:smallest_index] + right[smallest_index+1:]\n    else:\n        # Move the smallest digit to the right of the largest digit\n        right.append(smallest)\n        right.append(largest)\n        left = left[:smallest_index] + left[smallest_index+1:]\n\n    # Convert the left and right lists of digits back to a number\n    result = int(''.join(str(digit) for digit in left + right))\n\n    # Return the result\n    return result"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    num_str = str(n)\n    num_list = list(num_str)\n    digits = len(num_list)\n    result = []\n\n    for i in range(digits):\n        max_digit = int(num_list[i])\n        min_digit = int(num_list[-(i+1)])\n        max_digit += min_digit\n        result.append(max_digit)\n\n    result_str = ''.join(map(str, result))\n    return int(result_str)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    \n    # Convert the input number to a string\n    num_str = str(n)\n    \n    # Reverse the string\n    num_str = num_str[::-1]\n    \n    # Create a list of integers from the reversed string\n    num_list = [int(digit) for digit in num_str]\n    \n    # Iterate over the digits of the reversed string\n    for i in range(len(num_list)):\n        # Check if the current digit is greater than 9\n        if num_list[i] > 9:\n            # Set the current digit to 0 and add 9 to the next digit\n            num_list[i] = 0\n            num_list[i+1] += 1\n    \n    # Convert the list of integers back to a string\n    num_str = ''.join([str(digit) for digit in num_list])\n    \n    # Convert the reversed string back to an integer and return it\n    return int(num_str[::-1])"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a min heap to store the smallest pairs\n    min_heap = []\n\n    # Iterate through each element of the first array\n    for num1 in nums1:\n        # Create a new list for each element of the second array\n        num2_set = set()\n        # Iterate through each element of the second array\n        for num2 in nums2:\n            # Check if the sum of the two elements is less than k\n            if num1 + num2 < k:\n                # If it is, add the pair to the min heap\n                heapq.heappush(min_heap, (num1 + num2, (num1, num2)))\n                # If the min heap has more than k elements, remove the smallest element\n                if len(min_heap) > k:\n                    heapq.heappop(min_heap)\n\n    # Initialize an empty list to store the k smallest pairs\n    result = []\n\n    # Iterate through the min heap and add the elements to the result list\n    while min_heap:\n        curr_pair = heapq.heappop(min_heap)\n        result.append(curr_pair)\n\n    # Sort the result list in ascending order\n    result.sort()\n\n    # Return the k smallest pairs\n    return result[:k]"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n    \n    # Create a min-heap to store the pairs\n    heap = []\n    \n    # Iterate through the first array\n    for num1 in nums1:\n        # Iterate through the second array\n        for num2 in nums2:\n            # Add the pair (num1, num2) to the heap if its value is less than the smallest value in the heap\n            if len(heap) < k or (len(heap) == k and num1 + num2 < heap[0][1]):\n                heapq.heappush(heap, (num1 + num2, (num1, num2)))\n    \n    # Extract the k smallest pairs from the heap and return them\n    return [heapq.heappop(heap) for _ in range(k)]"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n    # Create a set to store the elements of nums2\n    set2 = set(nums2)\n    # Create a min heap to store the smallest k elements of nums2\n    min_heap = []\n    \n    for num1 in nums1:\n        # If the size of the min heap is less than k, add the current element of nums1 to it.\n        if len(min_heap) < k:\n            heapq.heappush(min_heap, num1)\n        # If the size of the min heap is greater than or equal to k, compare the current element of nums1 with the smallest element of min_heap.\n        else:\n            # If the current element of nums1 is smaller than the smallest element of min_heap, pop the smallest element of min_heap and add the current element of nums1 to it.\n            if num1 < min_heap[0]:\n                heapq.heappop(min_heap)\n                heapq.heappush(min_heap, num1)\n            # If the current element of nums1 is greater than or equal to the smallest element of min_heap, do nothing.\n            else:\n                continue\n        \n        # Create a set to store the pairs of elements from nums1 and nums2\n        pair_set = set()\n        # Iterate through the min heap to find pairs of elements from nums1 and nums2\n        for num2 in min_heap:\n            # If the element of nums2 is in the set, add the pair (num1, num2) to the pair_set.\n            if num2 in set2:\n                pair_set.add((num1, num2))\n        \n        # Iterate through the pair_set to find the k smallest pairs of elements from nums1 and nums2\n        for pair in pair_set:\n            if len(min_heap) < k:\n                heapq.heappush(min_heap, pair[0])\n            elif pair[0] < min_heap[0]:\n                heapq.heappop(min_heap)\n                heapq.heappush(min_heap, pair[0])\n            \n            if pair[1] < min_heap[0]:\n                heapq.heappop(min_heap)\n                heapq.heappush(min_heap, pair[1])\n            \n            if len(min_heap) == k:\n                yield pair"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # create a min heap with the first array elements\n    min_heap = []\n    for num in nums1:\n        heapq.heappush(min_heap, num)\n    \n    # initialize the result list\n    result = []\n    \n    # loop until we have found k smallest pairs\n    while len(result) < k:\n        # pop the smallest element from the min heap\n        smallest = heapq.heappop(min_heap)\n        \n        # loop through the second array and check if we have found k smallest pairs\n        for num in nums2:\n            if smallest + num < num:\n                break\n            else:\n                # add the pair to the result list\n                heapq.heappush(min_heap, num)\n                result.append((smallest, num))\n                # remove the pair from the second array to avoid duplicates\n                nums2.remove(num)\n                k -= 1\n                if k == 0:\n                    return result\n                \n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a min heap with the smallest element from each array as the root\n    min_heap1 = [(nums1[0], 0)]\n    min_heap2 = [(nums2[0], 0)]\n    \n    # Create a list to store the result\n    result = []\n    \n    # Initialize the counter for the number of pairs found\n    count = 0\n    \n    # Loop until the number of pairs found is equal to k\n    while count < k:\n        # Find the minimum element from each array in the min heap\n        min1, index1 = heapq.heappop(min_heap1)\n        min2, index2 = heapq.heappop(min_heap2)\n        \n        # Check if the sum of the indices is greater than or equal to k\n        if index1 + index2 >= k:\n            break\n        \n        # Add the pair of elements from the first array and the second array to the result list\n        result.append((min1, min2))\n        \n        # Add the indices of the smallest elements from each array to the heap\n        if index1 + 1 < len(nums1):\n            heapq.heappush(min_heap1, (nums1[index1 + 1], index1 + 1))\n        if index2 + 1 < len(nums2):\n            heapq.heappush(min_heap2, (nums2[index2 + 1], index2 + 1))\n        \n        # Increment the counter for the number of pairs found\n        count += 1\n    \n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Sort the two arrays in ascending order\n    nums1.sort()\n    nums2.sort()\n    \n    # Create a min heap of size k and initialize it with the first element of both arrays\n    min_heap = [(nums1[0], nums2[0])]\n    \n    # Initialize variables for counting pairs\n    count = 0\n    \n    # Iterate until we have found k number of smallest pairs\n    while k > 0:\n        # Pop the minimum element from the heap and increment the count\n        num1, num2 = heapq.heappop(min_heap)\n        count += 1\n        k -= 1\n        \n        # If there are more elements in the first array, push the next element of the first array and the current element of the second array as a new element to the heap\n        if num1 < nums1[-1]:\n            heapq.heappush(min_heap, (num1+nums1[-1], num2))\n        # If there are more elements in the second array, push the current element of the first array and the next element of the second array as a new element to the heap\n        if num2 < nums2[-1]:\n            heapq.heappush(min_heap, (num1, num2+nums2[-1]))\n    \n    # Return the count of pairs\n    return count"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n    # Convert the input arrays to sets to remove duplicates\n    nums1 = set(nums1)\n    nums2 = set(nums2)\n\n    # Find the intersection of the two sets\n    intersection = nums1.intersection(nums2)\n\n    # Sort the intersection in descending order\n    sorted_intersection = sorted(intersection, reverse=True)\n\n    # Initialize the min-heap to store the k smallest pairs\n    min_heap = []\n\n    # Iterate over the intersection and add the smallest elements to the heap\n    for num in sorted_intersection:\n        heapq.heappush(min_heap, (num, nums1.index(num), nums2.index(num)))\n\n        # If the heap has more than k elements, remove the smallest element from it\n        if len(min_heap) > k:\n            heapq.heappop(min_heap)\n\n    # Initialize a list to store the k smallest pairs\n    result = []\n\n    # Iterate over the min-heap and add the smallest k elements to the result list\n    for i in range(k):\n        pair = heapq.heappop(min_heap)\n        result.append([pair[1], pair[2]])\n\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    heapq.heapify(heap)\n    \n    # Insert the first element of each array into the heap\n    heapq.heappush(heap, (nums1[0], 0))\n    heapq.heappush(heap, (nums2[0], 1))\n    \n    # Traverse the heap and insert the next pair into the heap\n    result = []\n    while k > 0:\n        smallest = heapq.heappop(heap)\n        k -= 1\n        if k == 0:\n            result.append((smallest[1], smallest[0]))\n        else:\n            heapq.heappush(heap, (smallest[0], smallest[1]))\n            heapq.heappush(heap, (smallest[1], smallest[0]))\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    for num in nums1:\n        heapq.heappush(heap, (-num, -1))\n    for num in nums2:\n        if heapq.heappop(heap)[0] <= num:\n            heapq.heappush(heap, (num, -1))\n        else:\n            break\n    return heapq.nsmallest(k, heap)\n"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pairs = []\n    min_heap = []\n    heapq.heapify(min_heap)\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len(min_heap) < k:\n                if nums1[i] + nums2[j] < nums1[i] + nums2[j+1]:\n                    heapq.heappush(min_heap, -nums1[i] + nums2[j])\n            else:\n                if nums1[i] + nums2[j] < -heapq.heappop(min_heap):\n                    heapq.heappush(min_heap, -nums1[i] + nums2[j])\n                    heapq.heappush(min_heap, -heapq.heappop(min_heap))\n            pairs.append((nums1[i], nums2[j]))\n            if len(pairs) == k:\n                break\n    return pairs"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n\n    # Initialize the minimum product to infinity\n    min_product = float('inf')\n\n    # Loop through each tuple in the list\n    for tup in list1:\n        # Loop through each other tuple in the list to find the minimum product\n        for other_tup in list1:\n            # Check if the current tuple contains the other tuple\n            if tup[0] == other_tup[1] and tup[1] == other_tup[0]:\n                # If it does, calculate the product and update the minimum product if necessary\n                product = tup[0] * tup[1]\n                if product < min_product:\n                    min_product = product\n\n    # Return the minimum product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n\n    # Initialize variables to store the minimum and maximum values of the pairs of tuples\n    min_product = float('inf')\n    max_product = float('-inf')\n\n    # Iterate through the list of tuples and find the minimum and maximum values of the pairs of tuples\n    for tup in list1:\n        tup_product = tup[0] * tup[1]\n        if tup_product < min_product:\n            min_product = tup_product\n        if tup_product > max_product:\n            max_product = tup_product\n\n    # Calculate the minimum product as the product of the minimum and maximum values\n    min_product = min_product * max_product\n\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i + 1, len(list1)):\n            product = list1[i][0] * list1[j][0]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n\n    # Sort the list of tuples in ascending order\n    list1.sort(key=lambda x: x[0]*x[1])\n\n    # Initialize the minimum product as infinity\n    min_product = float('inf')\n\n    # Iterate through the sorted list of tuples\n    for i in range(len(list1)):\n        # Calculate the product of the first element and the current tuple\n        product_1 = list1[i][0]\n        # Calculate the product of the second element and the current tuple\n        product_2 = list1[i][1]\n        # Calculate the product of the first and second elements of the current tuple\n        product_3 = list1[i][0]*list1[i][1]\n        # Calculate the new minimum product\n        min_product = min(min_product, product_1*product_2*product_3)\n\n    # Return the minimum product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Initialize variables\n    min_product = float('inf')\n    product_list = []\n\n    # Loop through the list of tuples\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # Calculate the product of the two tuples\n            product = list1[i][0]*list1[j][1]\n            \n            # If the product is less than the current minimum, update the minimum and add the pair of tuples to the product_list\n            if product < min_product:\n                min_product = product\n                product_list = [(list1[i], list1[j])]\n            # If the product is equal to the current minimum, add the pair of tuples to the product_list\n            elif product == min_product:\n                product_list.append((list1[i], list1[j]))\n\n    # Return the minimum product and the list of pairs of tuples that contributed to it\n    return min_product, product_list"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][1] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Initialize variables\n    min_product = float('inf')\n    result = []\n\n    # Iterate through the list of tuples\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # Calculate the product of the elements in the pair\n            product = list1[i][0] * list1[j][1]\n\n            # Check if the product is less than the current minimum product\n            if product < min_product:\n                # Update the minimum product and the result\n                min_product = product\n                result = [list1[i], list1[j]]\n\n    # Return the result as a tuple\n    return tuple(result)"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # Check if the list is empty\n    if not listval:\n        return None\n    \n    # Find the minimum value in the list\n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    \n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = None\n    for value in listval:\n        if min_val is None or value < min_val:\n            min_val = value\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    This function takes a list of mixed values and returns the minimum value in the list.\n    '''\n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # Initialize the minimum value to be the first element in the list\n    min_val = listval[0]\n\n    # Loop through the remaining elements in the list\n    for i in range(1, len(listval)):\n        # If the current element is less than the minimum value, update the minimum value\n        if listval[i] < min_val:\n            min_val = listval[i]\n\n    # Return the minimum value\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_val(listval):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n\n    Parameters:\n    listval: a list of mixed data types\n\n    Returns:\n    minimum value in the list\n    \"\"\"\n\n    # initialize the minimum value to be the first element of the list\n    min_val = listval[0]\n\n    # iterate over the remaining elements of the list\n    for i in range(1, len(listval)):\n        # if the current element is less than the minimum value, update the minimum value\n        if listval[i] < min_val:\n            min_val = listval[i]\n\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # Initialize a variable to store the minimum value\n    min_val = listval[0]\n    # Iterate over the list and update the minimum value if a smaller value is found\n    for val in listval:\n        if val < min_val:\n            min_val = val\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_val(listval):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n    \"\"\"\n    # iterate over the list and find the minimum value\n    min_num = float('inf')\n    for item in listval:\n        if item < min_num:\n            min_num = item\n    return min_num"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_val(lst):\n    '''\n    This function takes a list as input and returns the minimum value present in the list.\n    '''\n    # Using the built-in min() function to find the minimum value\n    return min(lst)"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n\n    # Convert the snake case string to a regular expression pattern\n    pattern = re.compile(r'_(.)?')\n\n    # Split the word into individual words\n    words = word.split('_')\n\n    # Convert the first word to camel case\n    words[0] = words[0].upper()\n\n    # Convert the remaining words to camel case\n    for i in range(1, len(words)):\n        words[i] = pattern.sub(lambda m: m.group(1).upper() if m.group(1) else '', words[i])\n\n    # Join the words into a camel case string\n    return ''.join(words)"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    words = re.findall(r'(?<=[a-z0-9])_(?=[a-z0-9])', word)\n    camel_case = ''.join(word.title() for word in words)\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Convert the snake case to camel case\n    camel_case = re.sub(r'_(.)', lambda m: m.group(1).upper(), word)\n    # Remove the first character if it is a number\n    if camel_case[0].isdigit():\n        camel_case = camel_case[1:]\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef snake_to_camel(word):\n    # convert the word to snake case\n    snake_case = re.sub('([a-z])([A-Z])', r'\\1_\\2', word)\n\n    # capitalize the first letter of each word\n    camel_case = re.sub('([a-z])', lambda x: x.group(1).upper(), snake_case)\n\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef snake_to_camel(word):\n    \"\"\"\n    Write a function to convert the given snake case string to camel case string.\n    \"\"\"\n    # convert snake case to camel case\n    camel_case = re.sub(r'_(.)', lambda x: x.group(1).upper(), word)\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    camel_case = re.sub(r'_([a-z])', lambda match: match.group(1).upper(), word)\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the word into words using snake case pattern\n    word_list = re.findall(r'\\b\\w+\\b', word)\n    \n    # Capitalize the first word\n    camel_word = word_list[0].capitalize()\n    \n    # Convert the remaining words to camel case\n    for i in range(1, len(word_list)):\n        camel_word += word_list[i].capitalize()\n    \n    return camel_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef snake_to_camel(word):\n    # Split the word into a list of words\n    words = re.findall(r'\\w+', word)\n    # Capitalize the first letter of each word\n    camel_case_words = [word.capitalize() for word in words]\n    # Join the capitalized words with underscores\n    camel_case_word = ''.join(camel_case_words)\n    return camel_case_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    pattern = re.compile(r'_(.?)')\n    return pattern.sub(lambda m: m.group(1).upper(), word)"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Convert snake case to camel case\n    camel_case_word = ''.join([word[0].lower(), word[1:]])\n    # Remove underscores\n    camel_case_word = re.sub('__', '', camel_case_word)\n    # Remove digits\n    camel_case_word = re.sub('([0-9])', '', camel_case_word)\n    return camel_case_word"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Remove odd numbers from a given list.\n    \"\"\"\n    result = []\n    for num in l:\n        if num % 2 == 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    new_list = []\n    for i in l:\n        if i % 2 == 0:\n            new_list.append(i)\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    odd_numbers = []\n    for num in l:\n        if num % 2!= 0:\n            odd_numbers.append(num)\n    return odd_numbers"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1][0]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n < 0 or n >= len(list1):\n        return None\n    else:\n        return list1[n]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_nth_element(lst, n):\n    \"\"\"\n    This function extracts the nth element from a given list of tuples.\n\n    Args:\n    lst: A list of tuples.\n    n: An integer specifying the index of the element to extract.\n\n    Returns:\n    A tuple containing the nth element from the given list of tuples.\n    \"\"\"\n    return lst[n]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if isinstance(list1, list):\n        if isinstance(list1[0], tuple):\n            if isinstance(n, int):\n                if n >= 1 and n <= len(list1):\n                    return list1[n-1]\n                else:\n                    print(\"Invalid input. Please enter a positive integer between 1 and the length of the list.\")\n            else:\n                print(\"Invalid input. Please enter an integer.\")\n        else:\n            print(\"Invalid input. Please enter a list of tuples.\")\n    else:\n        print(\"Invalid input. Please enter a list.\")"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1][0]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    This function takes a list of tuples and an integer n as input, and returns the nth element from the list of tuples.\n    '''\n    return list1[n-1][1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1] # extracting the nth element from the list"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    try:\n        return list1[n-1]\n    except IndexError:\n        return None"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    This function checks whether any value in a sequence exists in another sequence or not.\n    \"\"\"\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def overlapping(list1, list2):\n    '''\n    This function takes two lists as input and returns True if any value in the first list exists in the second list and False otherwise.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def overlapping(list1, list2):\n    '''\n    This function checks whether any value in a sequence exists in another sequence or not.\n\n    Args:\n        list1 (list): A sequence of values to be checked for overlap.\n        list2 (list): A sequence of values to be checked for overlap with list1.\n\n    Returns:\n        bool: True if any value in list1 exists in list2 and vice versa, False otherwise.\n    '''\n    for value in list1:\n        if value in list2:\n            return True\n    for value in list2:\n        if value in list1:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    This function takes in two lists and checks if any value in list1 exists in list2 or not.\n    \"\"\"\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for value in list1:\n        if value in list2:\n            print(value, \"is overlapping in both lists.\")\n    for value in list2:\n        if value in list1:\n            print(value, \"is overlapping in both lists.\")"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def overlapping(list1, list2):\n    '''\n    This function takes two lists as input and returns True if there is a common element between the two lists and False otherwise.\n    '''\n    for elem in list1:\n        if elem in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n\n    :param list1: A list of values.\n    :param list2: Another list of values.\n    :return: True if any value exists in both lists, False otherwise.\n    \"\"\"\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product_pair = (-1, -1)\n    min_product_pair = (-1, -1)\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i]*arr[j]\n            if product > max_product_pair[0]:\n                max_product_pair = (product, arr[i])\n                min_product_pair = (product, arr[j])\n            elif product > max_product_pair[1]:\n                max_product_pair = (product, arr[j])\n            if product < min_product_pair[0]:\n                min_product_pair = (product, arr[i])\n            elif product < min_product_pair[1]:\n                min_product_pair = (product, arr[j])\n    return max_product_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_pair = (arr[0], arr[1])\n    for i in range(2, len(arr)):\n        curr_pair = (max(arr[i-1], arr[i]) * min(arr[i-1], arr[i]), max(arr[i-2], arr[i]) * min(arr[i-2], arr[i]))\n        if curr_pair[0] > max_pair[0]:\n            max_pair = curr_pair\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Product(arr):\n    max_product = 0\n    max_pair = (0, 0)\n\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = (arr[i], arr[j])\n\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Product(arr):\n    \"\"\"\n    Write a python function to find a pair with highest product from a given array of integers.\n    \"\"\"\n    arr.sort()  # Sort the array in ascending order\n    \n    max_product = arr[0] * arr[1]  # Find the product of the first two elements\n    second_max_product = arr[1] * arr[-1]  # Find the product of the second and last elements\n    \n    return second_max_product if max_product > second_max_product else max_product  # Return the larger of the two products as the answer"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Product(arr):\n    max1, max2 = float('-inf'), float('-inf')\n    min1, min2 = float('inf'), float('inf')\n    \n    for num in arr:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n            \n        if num < min1:\n            min2 = min1\n            min1 = num\n        elif num < min2:\n            min2 = num\n            \n    return (max1 * max2, min1 * min2)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Product(arr):\n    # find the maximum value in the array\n    max_val = max(arr)\n    \n    # initialize two variables to store the minimum and maximum values found so far\n    min_val = arr[0]\n    max_prod = arr[0] * arr[1]\n    \n    # loop through the rest of the array\n    for i in range(2, len(arr)):\n        # calculate the product of the current value and the maximum value found so far\n        curr_val = arr[i] * max_val\n        # update the minimum and maximum values as needed\n        min_val = min(curr_val, min_val)\n        max_val = max(curr_val, max_val)\n        # update the maximum product if needed\n        max_prod = max(max_prod, curr_val)\n        \n    # return the pair with the maximum product\n    return (arr.index(max_prod), max_prod)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n\n    # Initialize max_product and max_pair with first elements of array\n    max_product = arr[0] * arr[1]\n    max_pair = (arr[0], arr[1])\n\n    # Loop through array elements from second to last\n    for i in range(2, len(arr)):\n        # Update max_product if current element times previous element is greater\n        if arr[i] * max_pair[0] > max_product:\n            max_product = arr[i] * max_pair[0]\n            max_pair = (arr[i], max_pair[0])\n        # Update max_product if current element times previous element is greater\n        if arr[i] * max_pair[1] > max_product:\n            max_product = arr[i] * max_pair[1]\n            max_pair = (max_pair[1], arr[i])\n\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Product(arr):\n    \"\"\"\n    Write a python function to find a pair with highest product from a given array of integers.\n    \"\"\"\n    max1 = max2 = arr[0]\n    min1 = min2 = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n\n        if arr[i] < min1:\n            min2 = min1\n            min1 = arr[i]\n        elif arr[i] < min2:\n            min2 = arr[i]\n\n    return max(max1 * min2, max2 * min1)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    # Initialize maximum and minimum values for the first element\n    max1 = arr[0]\n    min1 = arr[0]\n    # Initialize maximum and minimum values for the second element\n    max2 = arr[1]\n    min2 = arr[1]\n    \n    # Loop through the array\n    for i in range(2, len(arr)):\n        # Update maximum and minimum values for the first element\n        if arr[i] > max1:\n            max1 = arr[i]\n        elif arr[i] < min1:\n            min1 = arr[i]\n        \n        # Update maximum and minimum values for the second element\n        if arr[i] > max2:\n            max2 = arr[i]\n        elif arr[i] < min2:\n            min2 = arr[i]\n        \n        # Check if the product of the two largest values is greater than the product of the two smallest values\n        if max1*max2 > min1*min2:\n            return (max1, min1)\n    \n    # Return the pair with the highest product\n    return (max1, max2)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Product(arr): \n    max_pair = (-float('inf'), -float('inf'))\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if i!= j:\n                product = arr[i] * arr[j]\n                if product > max_pair[0]:\n                    max_pair = (product, (arr[i], arr[j]))\n    return max_pair"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    Write a function to find common first element in given list of tuple.\n    \"\"\"\n    for i in range(len(Input)):\n        for j in range(i+1, len(Input)):\n            if Input[i][0] == Input[j][0]:\n                print(\"Common element: \", Input[i][0])\n                break"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    Write a function to find common first element in given list of tuple.\n    \"\"\"\n    common_first = []\n    for i in range(len(Input)):\n        for j in range(i+1, len(Input)):\n            if Input[i][0] == Input[j][0]:\n                common_first.append(Input[i][0])\n                break\n    return common_first"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    Write a function to find common first element in given list of tuple.\n    \"\"\"\n    common_element = []\n    for i in range(len(Input)):\n        common_element = list(set(Input[i][0]) & set(common_element))\n    return common_element\n"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    Write a function to find common first element in given list of tuple.\n    \"\"\"\n    common_tuple = None\n    for tup in Input:\n        if not common_tuple:\n            common_tuple = tup\n        elif tup[0] == common_tuple[0]:\n            common_tuple = tup\n    return common_tuple"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def group_tuples(Input):\n    '''\n    This function takes a list of tuples as input and returns a dictionary of tuples grouped by the common first element of the tuples.\n    '''\n    group_dict = {}\n\n    # Loop through the input list and group the tuples by their common first element\n    for item in Input:\n        group_dict[item[0]] = group_dict.get(item[0], []) + [item]\n\n    # Return the dictionary of grouped tuples\n    return group_dict"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def group_tuples(Input):\n    common_tuple = None\n    common_count = 0\n    for i in Input:\n        if len(i) > common_count:\n            common_tuple = i\n            common_count = len(i)\n    return common_tuple"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_element = None\n    for i in range(len(Input)):\n        for j in range(len(Input)):\n            if i!= j:\n                if Input[i][0] == Input[j][0] and (common_element is None or Input[i][0] < common_element):\n                    common_element = Input[i][0]\n    return common_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    count = {}\n    for i in Input:\n        if i[0] in count:\n            count[i[0]] += 1\n        else:\n            count[i[0]] = 1\n    common = []\n    for i in count:\n        if count[i] == max(count.values()):\n            common.append(i)\n    return common"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def group_tuples(Input): \n    '''\n    This function takes a list of tuples as input and returns the group of tuples that have the same first element.\n    '''\n    first_elements = set() # set to store unique first elements\n\n    # iterate through the list of tuples\n    for tup in Input:\n        first_elements.add(tup[0]) # add the first element of the tuple to the set\n\n    # create a new list of tuples with only the tuples that have the same first element\n    result = [(tup[0], tup) for tup in Input if tup[0] in first_elements]\n\n    return result"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def group_tuples(Input): \n    '''\n    This function takes a list of tuples as input and returns a list of lists containing unique common elements in each tuple.\n    '''\n    common_elements = []\n\n    for i in Input:\n        current_tuple = list(i)\n        for j in range(len(current_tuple)):\n            if j!= 0 and current_tuple[j] == current_tuple[0]:\n                current_tuple.pop(j)\n                break\n        common_elements.append(tuple(current_tuple))\n\n    return common_elements"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max(lst): \n    '''\n    This function takes a list as input and returns the element of the list \n    having maximum length.\n    '''\n    max_len = 0 \n    max_elem = None \n    \n    for elem in lst: \n        if len(elem) > max_len: \n            max_len = len(elem) \n            max_elem = elem \n            \n    return max_elem "
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max(lst):\n    '''\n    This function takes a list as an argument and returns the element of the list with the maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    \n    for i in range(len(lst)):\n        if len(str(lst[i])) > max_length:\n            max_length = len(str(lst[i]))\n            max_element = lst[i]\n    \n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0 \n    max_elem = None \n    for elem in lst: \n        if len(elem) > max_len: \n            max_len = len(elem) \n            max_elem = elem \n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_val = None\n    \n    for i in lst:\n        if len(str(i)) > max_len:\n            max_len = len(str(i))\n            max_val = i\n    \n    return max_val"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = max(len(x) for x in lst)\n    max_element = [x for x in lst if len(x) == max_len][0]\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = ''\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for i in lst:\n        if len(i) > max_len:\n            max_len = len(i)\n            max_elem = i\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_element = None\n    for element in lst:\n        if len(element) > max_len:\n            max_len = len(element)\n            max_element = element\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0 \n    max_ele = None \n    for i in lst: \n        if len(i) > max_len: \n            max_len = len(i) \n            max_ele = i \n    return max_ele "
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    result = total * len(list1)\n    print(result)"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    total_sum *= len(list1)\n    print(total_sum)"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for i in list1:\n        total_sum += round(i)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    total = 0\n    for num in list1:\n        total += round(num)\n    print(total * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n\n    # Round every number in the list using the round() function and store it in a new list\n    rounded_list = [round(num) for num in list1]\n\n    # Calculate the sum of the rounded numbers and store it in a variable\n    total_sum = sum(rounded_list)\n\n    # Print the total sum multiplied by the length of the list\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for number in list1:\n        total_sum += round(number)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_Sum(n):\n    '''\n    This function takes an integer n as input and returns the cube sum of the first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n    count = 0\n    while count < n:\n        num = count * 2\n        cube_sum += num ** 3\n        count += 1\n    return cube_sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    sum_cube = 0\n    count = 0\n    for i in range(2, n+1, 2):\n        sum_cube += i ** 3\n        count += 1\n    return sum_cube, count"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    sum_of_cubes = 0\n    for i in range(n):\n        sum_of_cubes += i*i*i\n    return sum_of_cubes"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    even_natural_numbers = [i for i in range(2, 101, 2)]\n    even_natural_numbers_cube_sum = sum([x**3 for x in even_natural_numbers])\n    return even_natural_numbers_cube_sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Calculate the sum of the cubes of the first n even natural numbers.\n\n    Args:\n    n (int): the number of even natural numbers to include in the sum.\n\n    Returns:\n    int: the sum of the cubes of the first n even natural numbers.\n    \"\"\"\n    result = 0\n    for i in range(2, n+1, 2):\n        result += i*i*i\n    return result"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i*i\n    return sum"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ', '.join(str(x) for x in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup):\n    \"\"\"\n    Write a function to concatenate each element of tuple by the delimiter.\n    \"\"\"\n    delimiter = \" \"\n    concatenated_str = \"\"\n    for item in test_tup:\n        concatenated_str += str(item) + delimiter\n    return concatenated_str[:-len(delimiter)]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = ''\n    for i in test_tup:\n        result += str(i)\n    return result"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return \", \".join(str(elem) for elem in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return''.join(str(elem) for elem in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return \"\".join(str(item) for item in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter =''\n    concatenated_string = ''\n    for i in test_tup:\n        concatenated_string += str(i) + delimiter\n    return concatenated_string[:-len(delimiter)]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = \"\"\n    for element in test_tup:\n        result += str(element)\n    return result\n"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return '-'.join(test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    This function takes a tuple as input and concatenates each element by the delimiter.\n    '''\n    delimiter = '|'\n    result = ''\n    for i in test_tup:\n        result += str(i) + delimiter\n    return result[:-1]"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i*i*i\n    average = sum/n\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    average = sum/n\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):\n    \"\"\"\n    Write a python function to find the average of cubes of first n natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    average = sum / (n * (n+1) / 2)\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n\n    # initialize the sum to 0\n    total = 0\n\n    # loop through the first n natural numbers\n    for i in range(n):\n        # compute the cube of the current number\n        cube = i ** 3\n\n        # add the cube to the sum\n        total += cube\n\n    # compute the average and return it\n    return total / n"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n\n    # Calculate the average of cubes of first n natural numbers\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n\n    # Find the average of cubes\n    average_of_cubes = sum_of_cubes/n\n\n    # Print the average of cubes\n    print(\"The average of cubes of first\", n, \"natural numbers is:\", average_of_cubes)"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    #initialize sum and count variables\n    sum_cube = 0\n    count = 0\n    #iterate through n numbers and calculate cube and sum\n    for i in range(n):\n        cube = i**3\n        sum_cube += cube\n        count += 1\n    #calculate average of cubes\n    avg_cube = sum_cube/count\n    #return result\n    return avg_cube"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0\n    count = 0\n    \n    for i in range(1, n+1):\n        total += i**3\n        count += 1\n        \n    if count!= 0:\n        average = total / count\n    else:\n        average = 0\n        \n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0  \n    for i in range(1, n+1):  \n        sum += i**3  \n    return sum/n  "
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n\n    # initialize variables\n    sum = 0\n\n    # loop through first n natural numbers\n    for i in range(1, n+1):\n\n        # calculate the cube of i\n        cube = i ** 3\n\n        # add the cube to the sum\n        sum += cube\n\n    # calculate the average\n    average = sum / n\n\n    # return the average\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_cubes = 0\n    for i in range(1, n+1):\n        sum_cubes += i**3\n    average_cubes = sum_cubes/n\n    return average_cubes"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for i, string in enumerate(test_tuple):\n        if i == len(test_tuple) - 1:\n            rear_list.append(string)\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_indices = []\n    for i in range(len(test_tuple)):\n        if i == len(test_tuple)-1:\n            rear_indices.append(i)\n        elif len(test_tuple[i]) == len(test_tuple[i+1]):\n            rear_indices.append(i)\n    return rear_indices"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_tuple)):\n        rear_list.append(test_tuple[i][-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_tuple)):\n        rear_list.append(test_tuple[i][-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = []\n    for string in test_tuple:\n        rear_elements.append(string[-1])\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for item in test_tuple:\n        rear_list.append(item[-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_indices = []\n    for i, element in enumerate(test_tuple):\n        if i == len(test_tuple) - 1:\n            rear_indices.append(i)\n        else:\n            pass\n    rear_list = []\n    for i, index in enumerate(rear_indices):\n        rear_list.append(test_tuple[index])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_tuple)):\n        rear_list.append(test_tuple[i][-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    extracted_rear = []\n    for string in test_tuple:\n        extracted_rear.append(string[-1])\n    return extracted_rear"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for item in test_tuple:\n        rear_list.append(item[-1])\n    return rear_list"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x):\n    \"\"\"\n    Write a function to count the number of sublists containing a particular element.\n    \"\"\"\n\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x): \n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1: \n        if x in sublist: \n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_element_in_list(lst, x):\n    count = 0\n    for sublist in lst:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    This function takes a list of numbers as input and returns a new list containing only the odd numbers from the original list.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return list(filter(lambda x: x%2!=0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers from a list of numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define the regular expression pattern to match the input date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    \n    # Use the re.sub() function to replace the matched pattern with the desired output format\n    output_date = re.sub(pattern, r'\\2-\\1-\\3', dt)\n    \n    return output_date"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define regular expression pattern to match yyyy-mm-dd format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n\n    # Use regex.sub() method to replace all matches of pattern in dt with a formatted string\n    dt_formatted = re.sub(pattern, r'\\3-\\2-\\1', dt)\n\n    return dt_formatted"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define the pattern for matching the date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n\n    # Match the pattern with the input date and extract the groups\n    match = re.match(pattern, dt)\n    year, month, day = match.groups()\n\n    # Reverse the order of the groups and join them with dashes\n    new_date = day + '-' + month + '-' + year\n\n    # Return the new date in dd-mm-yyyy format\n    return new_date"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # define a regular expression pattern to match yyyy-mm-dd format\n    pattern = r'\\d{4}-\\d{2}-\\d{2}'\n    # use the re.sub() method to replace the pattern with dd-mm-yyyy format\n    return re.sub(pattern, r'\\3-\\2-\\1', dt)"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Use regex to match yyyy-mm-dd format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    # Use sub to replace yyyy-mm-dd with dd-mm-yyyy\n    dt = re.sub(pattern, r'\\3-\\2-\\1', dt)\n    return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    result = re.sub(pattern, r'\\2-\\1-\\3', dt)\n    return result"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    new_format = r'\\2-\\1-\\3'\n    return re.sub(pattern, new_format, dt)"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # define a regular expression pattern to match yyyy-mm-dd format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    # use re.sub() to replace the pattern with a new string in the input date string\n    new_dt = re.sub(pattern, r'\\3-\\2-\\1', dt)\n    return new_dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # define the date pattern\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    # use regex to extract the components of the date string\n    match = re.match(pattern, dt)\n    if match:\n        year = match.group(1)\n        month = match.group(2)\n        day = match.group(3)\n        # convert the date components to the desired format\n        formatted_date = f\"{day}-{month}-{year}\"\n        return formatted_date\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define the regular expression pattern to match yyyy-mm-dd format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n\n    # Use the re.sub() method to replace the pattern with the desired format\n    dt_new = re.sub(pattern, r'\\3-\\2-\\1', dt)\n\n    return dt_new"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n\n    # Find the maximum value in the list\n    max_val = my_list[0]\n    for i in my_list[1:]:\n        if i > max_val:\n            max_val = i\n\n    # Create a gap sequence with decreasing lengths\n    gap = max_val // 2\n    while gap > 0:\n        for i in range(len(my_list)):\n            j = i\n            while j >= gap and my_list[j-gap] > my_list[j]:\n                my_list[j], my_list[j-gap] = my_list[j-gap], my_list[j]\n                j -= gap\n        gap //= 2\n\n    # Insertion sort for smaller subarrays\n    for i in range(len(my_list)):\n        key = my_list[i]\n        j = i - 1\n        while j >= 0 and my_list[j] > key:\n            my_list[j+1] = my_list[j]\n            j -= 1\n        my_list[j+1] = key\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap = gap // 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n\n    gap = len(my_list) // 2\n\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            key = my_list[i]\n            j = i\n            while j >= gap and key < my_list[j-gap]:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = key\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n\n    n = len(my_list)\n    gap = n//2\n\n    while gap > 0:\n        for i in range(gap, n):\n            j = i\n            while j >= gap and my_list[j] < my_list[j-gap]:\n                temp = my_list[j]\n                my_list[j] = my_list[j-gap]\n                my_list[j-gap] = temp\n                j -= gap\n        gap = gap//2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and temp < my_list[j-gap]:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n\n    n = len(my_list)\n\n    # Do gaps of increasing lengths\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            # Insert i at its correct position in sorted range\n            j = i\n            while j >= gap and my_list[j] > my_list[j - gap]:\n                my_list[j], my_list[j - gap] = my_list[j - gap], my_list[j]\n                j -= gap\n            # Keep track of the position where i was inserted\n            my_list[j], my_list[i] = my_list[i], my_list[j]\n        gap //= 2"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    # step size\n    h = 1\n    # while h <= n // 3:\n    while h < n // 3:\n        h = 3 * h + 1\n    # end while\n    while h >= 1:\n        # insertion sort for h-sorted sublist\n        for i in range(h, n):\n            key = my_list[i]\n            j = i\n            while j >= h and my_list[j-h] > key:\n                my_list[j] = my_list[j-h]\n                j -= h\n            my_list[j] = key\n        # end for\n        h //= 3\n    # end while\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    # Find the length of the array\n    n = len(my_list)\n    # Initialize gap\n    gap = n // 2\n    # Iterate until gap is 1\n    while gap > 0:\n        # Iterate over each gap\n        for i in range(gap, n):\n            # Swap elements if they are not in the correct order\n            j = i\n            while j >= gap and my_list[j] > my_list[j - gap]:\n                # Swap the elements\n                temp = my_list[j]\n                my_list[j] = my_list[j - gap]\n                my_list[j - gap] = temp\n                j -= gap\n        # Decrease the gap\n        gap //= 2\n    return my_list"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] & test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(x1 and x2 for x1, x2 in zip(test_tup1, test_tup2))"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = ()\n    for i in range(len(test_tup1)):\n        and_tup += (test_tup1[i] & test_tup2[i],)\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] & test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length.\")\n    return tuple(x & y for x, y in zip(test_tup1, test_tup2))"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (i and j for i, j in zip(test_tup1, test_tup2))"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length.\")\n    result_tup = tuple(x1 & x2 for x1, x2 in zip(test_tup1, test_tup2))\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(zip(*(map(bool, zip(*test_tup1, *test_tup2))))))"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] & test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] & test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    root = (-b + (b**2 - 4*a*c)**0.5) / (2*a)\n    return root"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    # Calculate the discriminant\n    discriminant = b**2 - 4*a*c\n\n    # If the discriminant is less than zero, the parabola has no real roots\n    if discriminant < 0:\n        return None\n\n    # If the discriminant is zero, the parabola has two real roots\n    elif discriminant == 0:\n        root1 = -b / (2*a)\n        root2 = -b / (2*a)\n        return root1, root2\n\n    # If the discriminant is greater than zero, the parabola has one real root\n    else:\n        root = -b / (2*a)\n        return root"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant > 0:\n        return (-b + (b**2 - discriminant) ** 0.5)/(2*a)\n    elif discriminant == 0:\n        return (-b)/(2*a)\n    else:\n        return \"No real roots\""
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # formula for directrix of parabola\n    x_directrix = (-b + (b**2 - 4*a*c)**0.5)/(2*a)\n    \n    return x_directrix"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x1 = (-b + (b**2 - 4*a*c)**0.5) / (2*a)\n    x2 = (-b - (b**2 - 4*a*c)**0.5) / (2*a)\n    return x1, x2"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c):\n    \"\"\"\n    Write a function to find the directrix of a parabola.\n    \"\"\"\n    delta = b**2 - 4*a*c\n    if delta > 0:\n        x1 = (-b + delta**0.5)/(2*a)\n        x2 = (-b - delta**0.5)/(2*a)\n        return x1, x2\n    elif delta == 0:\n        x = -b/(2*a)\n        return x\n    else:\n        return \"There are no real solutions.\""
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    x1 = (-b + discriminant**0.5) / (2*a)\n    x2 = (-b - discriminant**0.5) / (2*a)\n    return x1, x2\n"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    This function finds the directrix of a parabola given its coefficients a, b, and c.\n    The directrix is the point where the line through the origin and the parabola intersects.\n    '''\n    \n    # Find the quadratic equation for the parabola\n    quadratic_equation = (-b + (b**2 - 4*a*c)**0.5) / (2*a)\n    \n    # Find the intersection of the parabola with the x-axis\n    x = quadratic_equation\n    \n    # Find the intersection of the parabola with the y-axis\n    y = (-b + quadratic_equation) / a\n    \n    # Find the slope of the line that passes through the origin and the directrix\n    slope = (3*a*b - 4*a*c) / (b**2)\n    \n    # Find the y-intercept of the line that passes through the origin and the directrix\n    y_intercept = -(slope * x) + quadratic_equation\n    \n    # Return the directrix as a tuple of x and y coordinates\n    return (x, y)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant > 0: \n        x = (-b + discriminant**0.5)/(2*a)\n        y = (-b - discriminant**0.5)/(2*a)\n        return \"The directrix is:\", x\n    elif discriminant == 0:\n        x = -b/(2*a)\n        return \"The directrix is:\", x\n    else:\n        return \"The directrix is: None\""
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    \n    if discriminant > 0:\n        root1 = (-b + math.sqrt(discriminant)) / (2*a)\n        root2 = (-b - math.sqrt(discriminant)) / (2*a)\n    elif discriminant == 0:\n        root1 = -b / (2*a)\n        root2 = root1\n    else:\n        root1 = None\n        root2 = None\n    \n    return root1, root2"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1)!= len(list2):\n        return False\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # Create a set to store the elements of list2\n    set2 = set(list2)\n    # Iterate over the elements of list1\n    for element in list1:\n        # If the element is in set2, it means there is a common element\n        if element in set2:\n            return True\n    # If no common element is found, return False\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    for elem in list1:\n        if elem in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n\n    # Checking if both lists are not empty\n    if not list1 or not list2:\n        return False\n\n    # Sorting the lists\n    list1.sort()\n    list2.sort()\n\n    # Looping through the lists and checking if there's a common element\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            return True\n\n    # If no common element is found, return False\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common_elements = []\n    for element in list1:\n        if element in list2:\n            common_elements.append(element)\n    for element in list2:\n        if element in list1:\n            common_elements.append(element)\n    return len(common_elements) > 0"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common_list = []\n    for i in list1:\n        if i in list2 and i not in common_list:\n            common_list.append(i)\n    if len(common_list) > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    # Initialize a set to store the common elements of the two lists\n    common = set()\n\n    # Iterate over each element of the first list\n    for element in list1:\n        # If the element is also in the second list, add it to the common set\n        if element in list2:\n            common.add(element)\n\n    # If the common set is not empty, return True\n    if common:\n        return True\n    else:\n        return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    # Use a set to eliminate duplicates from both lists\n    set1 = set(list1)\n    set2 = set(list2)\n    # Check if any element in the intersection of the two sets is in both lists\n    return any(elem in set1 and elem in set2 for elem in set1.intersection(set2))"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the area of the trapezium\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n\n    # Calculate the height of the upper half of the trapezium\n    height_upper = 0.5 * area\n\n    # Calculate the height of the lower half of the trapezium\n    height_lower = area - height_upper\n\n    # Calculate the length of the trapezium\n    length = 0.5 * (base1 + base2)\n\n    # Calculate the area of the upper half of the trapezium\n    area_upper = 0.5 * length * height_upper\n\n    # Calculate the area of the lower half of the trapezium\n    area_lower = 0.5 * length * height_lower\n\n    # Calculate the area of the trapezium inscribed in a circle\n    area_circle = 2 * area_upper + 2 * area_lower\n\n    # Calculate the radius of the circle\n    radius = 0.5 * length\n\n    # Calculate the area of the circle\n    area_circle_half = area_circle / 2\n\n    # Calculate the center of the circle\n    x_center = length / 2\n    y_center = 0\n\n    # Calculate the distance from the center of the circle to the bottom of the upper half of the trapezium\n    distance_upper = (0.5 * area_upper - area_circle_half) / (height_upper * math.sqrt(2))\n\n    # Calculate the distance from the center of the circle to the top of the lower half of the trapezium\n    distance_lower = (0.5 * area_lower - area_circle_half) / (height_lower * math.sqrt(2))\n\n    # Calculate the angle of the triangle with the circle\n    angle = math.acos((area_circle_half / area_circle) * ((height_upper ** 2) + (height_lower ** 2) - (distance_upper ** 2) - (distance_lower ** 2)) / (2 * height_upper * height_lower))\n\n    # Calculate the length of the midpoint of the trapezium\n    midpoint = 0.5 * (base1 + base2)\n\n    # Calculate the coordinates of the midpoint of the trapezium on the circle\n    x_mid = midpoint + distance_upper * math.sin(angle)\n    y_mid = distance_upper * math.cos(angle)\n\n    # Calculate the length of the median of the trapezium\n    median = (x_mid - x_center) ** 2 + (y_mid - y_center) ** 2\n\n    # Calculate the median length of the trapezium\n    median_length = math.sqrt(median)\n\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Find the length of the hypotenuse\n    hypotenuse = (base1 + base2) / 2\n    \n    # Find the area of the trapezium\n    area = height * base1\n    \n    # Calculate the length of the top half of the trapezium\n    top_half = area / (2 * hypotenuse)\n    \n    # Calculate the length of the bottom half of the trapezium\n    bottom_half = area / (2 * (hypotenuse ** 2))\n    \n    # Calculate the median of the two halves\n    median = (top_half + bottom_half) / 2\n    \n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    area = 0.5 * base1 * base2\n    mid_base = (base1 + base2) / 2\n    mid_height = (height / 2) * 2\n    \n    if area >= mid_height * mid_base:\n        lower_base = mid_base\n        upper_base = base2\n    else:\n        lower_base = base1\n        upper_base = mid_base\n    \n    return 0.5 * (upper_base + lower_base)"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n    # Calculate the area of the trapezium\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n\n    # Calculate the perimeter of the trapezium\n    perimeter = 2 * (base1 + base2 + height)\n\n    # Calculate the semi-perimeter\n    semi_perimeter = perimeter / 2\n\n    # Calculate the angle between the two bases\n    angle = 2 * (0.5 * math.sqrt(area) / perimeter)\n\n    # Calculate the length of the base that is perpendicular to the base that is shorter\n    if base1 > base2:\n        shorter_base = base1\n        longer_base = base2\n    else:\n        shorter_base = base2\n        longer_base = base1\n\n    # Calculate the length of the base that is shorter than the other base\n    if shorter_base > height:\n        shorter_length = shorter_base\n        longer_length = longer_base - shorter_base\n    else:\n        shorter_length = longer_base - shorter_base\n        longer_length = shorter_base\n\n    # Calculate the distance between the two bases\n    base_distance = longer_length / 2\n\n    # Calculate the distance between the two sides of the trapezium\n    trapezium_distance = 0.5 * (shorter_length + base_distance)\n\n    # Calculate the length of the two sides of the trapezium\n    if angle > math.pi / 4:\n        # Trapezium is in the shape of an octagon\n        trapezium_base1_length = 0.5 * trapezium_distance * math.tan(angle / 2)\n        trapezium_base2_length = trapezium_distance - trapezium_base1_length\n    else:\n        # Trapezium is in the shape of a triangle\n        trapezium_base1_length = 0.5 * trapezium_distance * (1 + math.tan(angle) / math.tan(math.pi / 4))\n        trapezium_base2_length = trapezium_distance - trapezium_base1_length\n\n    # Calculate the length of the base that is longer than the other base\n    if longer_base > height:\n        longer_base_length = longer_base\n        shorter_base_length = shorter_base - longer_base\n    else:\n        longer_base_length = shorter_base - longer_base\n        shorter_base_length = longer_base\n\n    # Calculate the area of the two bases\n    base1_area = longer_base_length * height\n    base2_area = shorter_base_length * height\n\n    # Calculate the length of the two bases\n    base1_length = math.sqrt(base1_area)\n    base2_length = math.sqrt(base2_area)\n\n    # Calculate the length of the two sides of the base with the shortest length\n    if shorter_base_length > base2_length:\n        base1_length = base1_length - base2_length\n        base2_length = base1_length + base2_length\n    else:\n        base2_length = base2_length - shorter_base_length\n        base1_length = base2_length + shorter_base_length\n\n    # Calculate the distance between the two bases\n    base_distance = 0.5 * (base1_length + base2_length)\n\n    # Calculate the length of the trapezium\n    trapezium_length = 0.5 * base_distance * (1 + math.tan(angle) / math.tan(math.pi / 4))\n\n    # Calculate the length of the base that is shorter than the other base\n    if shorter_base_length > height:\n        shorter_base_length = shorter_base_length\n        longer_base_length = longer_base - shorter_base_length\n    else:\n        shorter_base_length = longer_base - shorter_base_length\n        longer_base_length = shorter_base_length\n\n    # Calculate the area of the two bases\n    base1_area = longer_base_length * height\n    base2_area = shorter_base_length * height\n\n    # Calculate the length of the two bases\n    base1_length = math.sqrt(base1_area)\n    base2_length = math.sqrt(base2_area)\n\n    "
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n    area = 0.5 * (base1 + base2) * height\n    median_base = (area - height) / 2\n    return median_base\n"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n\n    # calculate the length of the base\n    base = 0.5 * (base1 + base2)\n\n    # calculate the length of the top and bottom half\n    half_height = height / 2\n\n    # calculate the area of the top and bottom half\n    area1 = base1 * half_height\n    area2 = base2 * half_height\n\n    # calculate the area of the trapezium\n    area = 0.5 * (area1 + area2)\n\n    # calculate the length of the trapezium\n    trapezium_length = 0.5 * (base * (area1 + area2))\n\n    return trapezium_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    half_height = height / 2.0\n    base1_area = base1 * height\n    base2_area = base2 * height\n    total_area = (base1_area + base2_area)\n    area_sum = (base1_area + base2_area) + (base1_area + base2_area)\n    median_area = area_sum / 2.0\n    area_difference = (base1_area - base2_area) ** 2\n    area_difference = area_difference / 12\n    area_difference = math.sqrt(area_difference)\n    median_length = median_area * 2 + area_difference\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n    # Calculate the area of the trapezium\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n\n    # Calculate the area of each half of the trapezium\n    half_height = height / 2\n    half_area_1 = 0.5 * base1 * half_height\n    half_area_2 = 0.5 * base2 * half_height\n\n    # Sum the areas and divide by two to get the total area\n    total_area = half_area_1 + half_area_2\n\n    # Calculate the length of the trapezium\n    length = area / total_area\n\n    # Find the midpoint of the trapezium and its corresponding half-lengths\n    midpoint = 0.5 * (base1 + base2)\n    half_base1 = 0.5 * base1\n    half_base2 = 0.5 * base2\n\n    # Determine the median based on the length of the longest half of the trapezium\n    if length > midpoint:\n        return half_base1\n    else:\n        return half_base2"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n\n    Parameters:\n    base1 (int): Base length of the first half of the trapezium.\n    base2 (int): Base length of the second half of the trapezium.\n    height (int): Height of the trapezium.\n\n    Returns:\n    float: The median length of the trapezium.\n    '''\n\n    # Calculate the length of the trapezium\n    trapezium_length = (base1 + base2) * height\n\n    # Calculate the length of the shorter half of the trapezium\n    shorter_half_length = min(base1, base2) * height\n\n    # Calculate the median of the two halves of the trapezium\n    median = (trapezium_length + shorter_half_length) / 2\n\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n    # Calculate the length of the left trapezium\n    left_length = (base1 + base2) / 2\n\n    # Calculate the length of the right trapezium\n    right_length = height - (base1 + base2) / 2\n\n    # Find the median of the two trapeziums\n    median = (left_length + right_length) / 2\n\n    return median"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater = False\n    for element in arr:\n        if element > number:\n            greater = True\n            break\n    return greater"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    # Iterate through the array and compare each element with the entered number\n    for element in arr:\n        if element > number:\n            return True\n    # If the loop completes without finding a greater element, return False\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for num in arr:\n        if num > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for num in arr:\n        if num > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    This function takes an array and a number as input and returns True if the number is greater than\n    any of the elements in the array and False otherwise.\n    \"\"\"\n    for element in arr:\n        if element > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    \"\"\"\n    greater_than = False\n    \n    for i in range(len(arr)):\n        if arr[i] > number:\n            greater_than = True\n            break\n    \n    return greater_than"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.b+'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'ab+'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.*b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r\"a(b)*\"\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.*b'\n    return re.search(pattern, text)"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r\"a[^b]*b\"\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a\\w*b\\w*'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.*b'\n    return re.search(pattern, text)"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # converting the number to string to get the last digit\n    return int(str(n)[-1])"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit(n):\n    '''\n    This function takes a number as input and returns the last digit of the number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit(n):\n    \"\"\"\n    This function takes a number as input and returns the last digit of the number.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 10:\n        return n\n    else:\n        return last_Digit(n // 10)"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit(n):\n    '''\n    This function takes an integer as input and returns the last digit of the number.\n    '''\n    # Dividing the number by 10 and storing the remainder in the variable last_digit\n    last_digit = n % 10\n    return last_digit"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # Convert the number to string to get the last character\n    last_char = str(n)[-1]\n    # Convert the last character to integer and return it\n    return int(last_char)"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit(n):\n    '''\n    This function takes a number as input and returns the last digit of that number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # check if the input is an integer\n    if not isinstance(n, int):\n        raise TypeError('Input must be an integer.')\n    # check if the input is positive\n    if n < 0:\n        raise ValueError('Input must be a positive integer.')\n    # extract the last digit of the number and return it\n    return n % 10"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    This function takes a list as input and returns the negative numbers in the list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    This function takes a list of numbers as input and returns a list of negative numbers.\n    \"\"\"\n    negative_list = []\n    for num in list1:\n        if num < 0:\n            negative_list.append(num)\n    return negative_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    Write a python function to return the negative numbers in a list.\n    \"\"\"\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    Write a python function to return the negative numbers in a list.\n    \"\"\"\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    # create an empty list to store negative numbers\n    neg_list = []\n    # loop through each element of the list\n    for num in list1:\n        # check if the number is negative\n        if num < 0:\n            # if it is, add it to the neg_list\n            neg_list.append(num)\n    # return the neg_list\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_num_list = []\n    for num in list1:\n        if num < 0:\n            neg_num_list.append(num)\n    return neg_num_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    Write a python function to return the negative numbers in a list.\n    \"\"\"\n    neg_list = []\n    for i in list1:\n        if i < 0:\n            neg_list.append(i)\n    return neg_list"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    result = ''\n    for char in str1:\n        if int(char) % 2 == 0:\n            result += char\n    return result"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    odd_chars = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])\n    new_str = []\n    for char in str1:\n        if char not in odd_chars:\n            new_str.append(char)\n    return ''.join(new_str)"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    result = \"\"\n    for char in str1:\n        if char.isalpha():\n            if int(char) % 2 == 0:\n                result += char\n    return result"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if char.isalnum():\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    result = \"\"\n    for char in str1:\n        if int(char) % 2 == 0:\n            result += char\n    return result"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # Create an empty string to store the new string\n    new_str = \"\"\n    # Loop through each character in the original string\n    for char in str1:\n        # Check if the character is odd\n        if char % 2!= 0:\n            # If it is, append it to the new string\n            new_str += char\n    # Return the new string\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(string):\n    \"\"\"\n    This function takes a string as input and removes all the odd characters from it.\n    \"\"\"\n    return ''.join([char for char in string if int(char) % 2 == 0])"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    new_str = \"\"\n    for char in str1:\n        if char.isalpha():\n            if int(char) % 2!= 0:\n                new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for i in str1:\n        if int(i) % 2 == 0:\n            new_str += i\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # create an empty list to store the even characters\n    even_chars = []\n    # iterate through each character in the string\n    for char in str1:\n        # if the character is even, append it to the even_chars list\n        if char % 2 == 0:\n            even_chars.append(char)\n    # convert the even_chars list to a string and return it\n    return ''.join(even_chars)"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i], test_list[j]) in test_list or (test_list[j], test_list[i]) in test_list:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] > test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if tuple(test_list[i]) == tuple(test_list[j]) or tuple(test_list[j]) == tuple(test_list[i]):\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n\n    # Create a dictionary to store the frequency of each tuple\n    freq_dict = {}\n\n    # Iterate through the list of tuples\n    for i in range(len(test_list)):\n        # Get the current tuple\n        curr_tuple = test_list[i]\n\n        # Check if the current tuple exists in the dictionary\n        if curr_tuple in freq_dict:\n            # Increment the frequency of the current tuple by 1\n            freq_dict[curr_tuple] += 1\n        else:\n            # If the current tuple is not in the dictionary, add it with a frequency of 1\n            freq_dict[curr_tuple] = 1\n\n    # Count the number of bidirectional tuple pairs\n    bidirectional_count = 0\n    for i in range(len(test_list)):\n        # Get the current tuple\n        curr_tuple = test_list[i]\n\n        # Check if the current tuple exists in the dictionary\n        if curr_tuple in freq_dict:\n            # Check if the current tuple and the tuple at the next index are both in the dictionary\n            if i + 1 < len(test_list):\n                next_tuple = test_list[i+1]\n                if next_tuple in freq_dict:\n                    # If both tuples are in the dictionary, increment the bidirectional count\n                    bidirectional_count += 1\n\n    # Return the number of bidirectional tuple pairs\n    return bidirectional_count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Write a function to count bidirectional tuple pairs.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    count = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    bidirectional_count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][0] == test_list[j][1]) and (test_list[i][1] == test_list[j][0]):\n                bidirectional_count += 1\n    return bidirectional_count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Write a function to count bidirectional tuple pairs.\n\n    Args:\n    test_list (list): a list of tuples\n\n    Returns:\n    int: the number of bidirectional tuple pairs in the list\n    \"\"\"\n    count = 0\n    for pair in test_list:\n        if pair[0] == pair[1]:\n            count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][1] or test_list[j][0] == test_list[i][1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[j][0] == test_list[i][1]:\n                count += 1\n    return count"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    Write a function to join a list of multiple integers into a single integer.\n    \"\"\"\n    n = 1\n    for i in L:\n        n *= i\n    return n"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if len(L) == 1:\n        return L[0]\n    else:\n        return L[0] * multiple_to_single(L[1:])"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    Write a function to join a list of multiple integers into a single integer.\n    \"\"\"\n    # Initialize a variable to store the result\n    result = 0\n    \n    # Loop through each element of the list\n    for num in L:\n        # If the element is a multiple of 3, add 3 to the result\n        if num % 3 == 0:\n            result += num\n    \n    # Return the result\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 1\n    for i in L:\n        result *= i\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    total = 1\n    for num in L:\n        total *= num\n    return total"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    single = 1\n    for num in L:\n        single *= num\n    return single"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        result += num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 1\n    for num in L:\n        result *= num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 1\n    for num in L:\n        result *= num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    Write a function to join a list of multiple integers into a single integer.\n    \"\"\"\n    if len(L) == 1:\n        return L[0]\n    else:\n        return L[0] + multiple_to_single(L[1:])"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # find all adverbs in the sentence using regular expression\n    pattern = re.compile(r'\\b(a|an|the|above|below|beside|besides|across|beside|beside|beside|below|below|below|below|behind|behind|behind|behind|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|below|"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverb_position(text):\n    \"\"\"\n    Write a function to find the first adverb and their positions in a given sentence.\n    \"\"\"\n    adverb_pattern = re.compile(r'\\b(adverb)\\b', re.IGNORECASE)\n    adverbs = []\n    adverb_positions = []\n\n    # Find all adverbs in the text\n    for match in adverb_pattern.finditer(text):\n        adverbs.append(match.group(1))\n        adverb_positions.append(match.start())\n\n    # If there are no adverbs, return an empty list\n    if not adverbs:\n        return []\n\n    # Sort the adverbs by their position in the sentence\n    adverbs.sort(key=lambda x: adverb_positions.index(adverb_positions.index(x)))\n\n    # Return the first adverb and its position\n    return adverbs[0], adverb_positions[0]"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # define regular expression pattern to match adverbs\n    pattern = r'\\b([a-z]+)([A-Z]|[a-z]+)\\b'\n\n    # find all matches of the pattern in the input text\n    matches = re.findall(pattern, text)\n\n    # check if any adverbs are found\n    if len(matches) == 0:\n        return None\n\n    # extract the first adverb and its position from the matches list\n    first_adverb = matches[0][0]\n    position = matches[0][1]\n\n    # return the list of adverbs and their positions\n    return [(first_adverb, position)]"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define regular expression pattern for finding adverbs\n    pattern = r'\\b(a(lso)?|an|also|but|for|how|if|in|into|is|it|no|nor|not|of|on|once|only|or|so|than|that|the|then|there|these|they|this|to|was|were|will|with)\\b'\n\n    # Find all matches of the pattern in the given text\n    matches = re.findall(pattern, text)\n\n    # Check if any adverbs were found\n    if not matches:\n        return None\n\n    # Find the position of the first adverb in the sentence\n    first_adverb_index = text.lower().index(matches[0].lower())\n\n    # Return the list of adverbs and their positions\n    return [(matches[0], first_adverb_index)]"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Remove all the special characters from the text\n    text = re.sub(r'[^\\w\\s]','',text)\n    \n    # Split the text into words\n    words = text.split()\n    \n    # Initialize a list to store the positions of the adverbs\n    adverb_positions = []\n    \n    # Initialize a variable to keep track of the current index\n    index = 0\n    \n    # Loop through each word in the sentence\n    while index < len(words):\n        # Check if the current word is an adverb\n        if re.match(r'\\b(?:in|to|for|with|about|above|below|beside|behind|along|around|at|before|behind|behind|beneath|beside|between|beyond|between|below|beneath|beside|between|beyond|below|beneath|beside|between|beyond|below|beneath|beside|between|beyond|below|beneath|beside|between|beyond|below|beneath|beside|between|beyond|below|beneath|beside|between|beyond|below|beneath|beside|between|beyond|below|beneath|beside|between|beyond|below|beneath|beside|between|beyond|below|beneath|beside|between|beyond|below|beneath|beside|between|beyond|below|beneath|beside|between|beyond|below|beneath|beside|between|beyond|below|beneath|beside|between|beyond|below|beneath|beside|between|beyond|below|beneath|beside|between|beyond|below|beneath|beside|between|beyond|below|beneath|beside|between|beyond|below|beneath|beside|between|beyond|below|beneath|beside|between|beyond|below|beneath|beside|between|beyond|below|beneath|beside|between|beyond|below|beneath|beside|between|beyond|below|beneath|beside|between|beyond|below|beneath|beside|between|beyond|below|beneath|beside|between|beyond|below|beneath|beside|between|beyond|below|beneath|beside|between|beyond|below|beneath|beside|between|beyond|below|beneath|beside|between|beyond|below|beneath|beside|between|beyond|below|beneath|beside|between|beyond|below|beneath|beside|between|beyond|below|beneath|beside|between|beyond|below|beneath|beside|between|beyond|below|beneath|beside|between|beyond|below|beneath|beside|between|beyond|below|beneath|beside|between|beyond|below|beneath|beside|between|beyond|below|beneath|beside|between|beyond|below|beneath|beside|between|beyond|below|beneath|beside|between|beyond|below|beneath|beside|between|beyond|below|beneath|beside|between|beyond|below|beneath|beside|between|beyond|below|beneath|beside|between|beyond|below|beneath|beside|between|beyond|below|beneath|beside|between|beyond|below|beneath|beside|between|beyond|below|beneath|beside|between|beyond|below|beneath|beside|between|beyond|below|beneath|beside|between|beyond|below|beneath|beside|between|beyond|below|beneath|beside|between|beyond|below|beneath|beside|between|beyond|below|beneath|beside|between|beyond|below|beneath|beside|between|beyond|below|beneath|beside|between|beyond|below|beneath|beside|between|beyond|below|beneath|beside|between|beyond|below|beneath|beside|between|beyond|below|beneath|beside|between|beyond"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverb_position(text):\n    # Define regex pattern for adverbs\n    pattern = re.compile(r'\\b([a-z]+)([a-z]*)\\b', re.IGNORECASE)\n\n    # Find all matches with the pattern\n    matches = pattern.finditer(text)\n\n    # Initialize variables to store adverb and positions\n    adverb = ''\n    adverb_pos = []\n\n    # Iterate through matches and store adverb and positions\n    for match in matches:\n        adverb = match.group(1)\n        if match.group(2) == '':\n            adverb_pos.append((match.start(0), match.end(0)))\n        else:\n            adverb_pos.append((match.start(0), match.start(1)))\n\n    return adverb_pos"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverb_position(text):\n    \"\"\"\n    Write a function to find the first adverb and their positions in a given sentence.\n    \"\"\"\n    adverbs = ['well', 'good', 'well', 'well', 'good','very', 'well', 'well', 'well','very', 'well', 'well', 'well', 'well', 'well']\n    adverb_positions = []\n    pattern = re.compile(r'\\b(' + '|'.join(adverbs) + r')\\b')\n\n    matches = pattern.finditer(text)\n\n    for match in matches:\n        adverb = match.group()\n        position = text.find(adverb)\n        adverb_positions.append((adverb, position))\n\n    return adverb_positions"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define a regular expression pattern for finding adverbs\n    pattern = r\"\\b(?:to|of|in|for|on|with|at|by|on|about|through|under|above|below|across|behind|behind|above|below|over|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|against|again"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define a regular expression pattern for adverbs\n    pattern = r'\\b(really|hardly|almost|actually|just)\\b'\n    \n    # Use re.finditer() to iterate over all non-overlapping matches of the pattern in the text\n    matches = re.finditer(pattern, text)\n    \n    # Initialize a dictionary to store the adverbs and their positions\n    adverbs = {}\n    \n    # Iterate over all matches and add the adverb to the dictionary with its position as its key\n    for match in matches:\n        adverb = match.group(1)\n        position = match.start()\n        \n        if adverb in adverbs:\n            if position < adverbs[adverb]:\n                adverbs[adverb] = position\n        else:\n            adverbs[adverb] = position\n    \n    # Sort the adverbs by their positions and return a list of adverbs and their positions\n    sorted_adverbs = sorted(adverbs.items(), key=lambda x: x[1])\n    \n    return sorted_adverbs"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverb_position(text):\n    # define a regular expression pattern to match adverbs\n    pattern = r'\\b\\w*adv\\w*\\b'\n\n    # find all the occurrences of adverbs using the pattern\n    matches = re.findall(pattern, text)\n\n    # create a dictionary to store the position of each adverb\n    adverb_positions = {}\n\n    # iterate through all the matches and add their positions to the dictionary\n    for match in matches:\n        position = text.find(match)\n        adverb_positions[match] = position\n\n    return adverb_positions"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    \"\"\"\n    Write a function to find the surface area of a cube of a given size.\n    \"\"\"\n    return 6 * l * l"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    \"\"\"\n    Write a function to find the surface area of a cube of a given size.\n    \"\"\"\n    # calculate the surface area of the cube\n    surface_area = 6 * (l ** 2)\n\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l * l # sides * length * length\n    print(\"The surface area of the cube is:\", surface_area)\n"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    area = 6 * l * l  # cube formula\n    surface_area = 2 * area  # square formula\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2\n"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = l**2 * 6\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    \"\"\"\n    Write a function to find the surface area of a cube of a given size.\n    \"\"\"\n    area = 6 * l * l  # formula for surface area of a cube\n    volume = l * l * l  # formula for volume of a cube\n    surface_area = 2 * area  # formula for surface area of a sphere\n    return surface_area"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    neg_count = 0\n    for num in nums:\n        if num > 0:\n            pos_count += 1\n        elif num < 0:\n            neg_count += 1\n    return pos_count / (pos_count + neg_count)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_count = 0\n    positive_array = array('i', [])\n\n    for num in nums:\n        if num > 0:\n            positive_count += 1\n            positive_array.append(num)\n\n    if positive_count == 0:\n        print(\"There are no positive numbers in the array.\")\n    else:\n        print(\"There are\", positive_count, \"positive numbers in the array.\")\n        print(\"The positive numbers in the array are:\", positive_array)\n        print(\"The ration of positive numbers in the array is:\", round(positive_count / len(nums), 2))"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_count = 0\n    for num in nums:\n        if num > 0:\n            positive_count += 1\n    return positive_count / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_nums = []\n    negative_nums = []\n    \n    for num in nums:\n        if num > 0:\n            positive_nums.append(num)\n        else:\n            negative_nums.append(num)\n    \n    if positive_nums == []:\n        return 0\n    else:\n        return len(positive_nums) / (len(positive_nums) + len(negative_nums))"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_nums = array('i')\n    neg_nums = array('i')\n\n    for num in nums:\n        if num > 0:\n            pos_nums.append(num)\n        else:\n            neg_nums.append(num)\n\n    pos_count = len(pos_nums)\n    neg_count = len(neg_nums)\n\n    if pos_count == 0:\n        return 0\n\n    pos_ratio = pos_count / (pos_count + neg_count)\n\n    return pos_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positives = 0\n    negatives = 0\n    zeroes = 0\n    \n    for num in nums:\n        if num > 0:\n            positives += 1\n        elif num < 0:\n            negatives += 1\n        else:\n            zeroes += 1\n    \n    return positives / (positives + negatives + zeroes)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    arr = array('i', nums)  # convert the array to integers array\n    pos_count = 0\n    for num in arr:\n        if num > 0:\n            pos_count += 1\n    pos_ratio = pos_count / len(arr)\n    return pos_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_count = 0\n    total = len(nums)\n    for num in nums:\n        if num > 0:\n            positive_count += 1\n    positive_ratio = positive_count/total\n    print(\"The positive number count in the array is: \", positive_count)\n    print(\"The positive number ratio in the array is: \", positive_ratio)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    total = len(nums)\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / total"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_count = 0\n    for num in nums:\n        if num > 0:\n            positive_count += 1\n    return positive_count / len(nums)"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_neg(list1):\n    '''\n    This function takes a list as input and returns the largest negative number in the list.\n    '''\n    largest = list1[0]  # Assume the first element in the list is the largest negative number\n    \n    # Iterate through the list starting from the second element\n    for num in list1[1:]:\n        if num < 0 and num > largest:\n            largest = num\n            \n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_neg(lst):\n    \"\"\"\n    Returns the largest negative number from a given list.\n    \"\"\"\n    largest = lst[0]\n    for num in lst:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    This function takes a list as input and returns the largest negative number in the list.\n    \"\"\"\n    largest = None  # initialize the largest variable to None\n    \n    # loop through the list and find the largest negative number\n    for num in list1:\n        if num < 0 and (largest is None or num > largest):\n            largest = num\n            \n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_neg(lst):\n    '''\n    This function takes a list as input and returns the largest negative number from the list.\n    '''\n    max_num = lst[0]\n    for num in lst:\n        if num < 0 and num > max_num:\n            max_num = num\n    return max_num"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    largest_neg = list1[0]\n    for num in list1:\n        if num < 0 and num > largest_neg:\n            largest_neg = num\n    return largest_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_num = -float('inf')  # initialize the maximum negative number as negative infinity\n    for num in list1: \n        if num < 0 and num > max_num: \n            max_num = num  # update the maximum negative number if a new negative number is found\n    return max_num"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_num = list1[0]\n    for num in list1:\n        if num < 0 and num > max_num:\n            max_num = num\n    return max_num"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    # Initialize largest negative number to be the first element of the list\n    largest = list1[0]\n    # Loop through the rest of the list\n    for num in list1:\n        # If the current number is negative, update the largest variable\n        if num < 0:\n            largest = num\n    # Return the largest negative number\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_neg(lst):\n    largest_num = lst[0]\n    for num in lst:\n        if num < 0 and num > largest_num:\n            largest_num = num\n    return largest_num"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    # initialize largest negative number to be first element of list\n    largest = list1[0]\n    # loop through list and compare each element to largest negative number\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    # return largest negative number\n    return largest"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # Initialize a new list to store the trimmed tuples\n    trimmed_list = []\n    # Loop through each tuple in the given list\n    for t in test_list:\n        # Check if the length of the tuple is greater than or equal to k\n        if len(t) >= K:\n            # If the length of the tuple is greater than or equal to k, trim the tuple by k using slicing\n            trimmed_tuple = tuple(t[:K])\n            # Append the trimmed tuple to the new list of trimmed tuples\n            trimmed_list.append(trimmed_tuple)\n    # Return the new list of trimmed tuples\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    \"\"\"\n    Write a function to trim each tuple by k in the given tuple list.\n    \"\"\"\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if j + K >= len(test_list[i]):\n                break\n            test_list[i] = test_list[i][:j + K]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        if len(test_list[i]) > K:\n            test_list[i] = test_list[i][:K]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        if len(tup) > K:\n            tup = tup[:K]\n        trimmed_list.append(tup)\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        if len(test_list[i]) > K:\n            test_list[i] = test_list[i][:K]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for tup in test_list:\n        result.append(tup[K:])\n    return result"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        if len(tup) > K:\n            tup = tup[:K]\n        trimmed_list.append(tup)\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for item in test_list:\n        if len(item) <= K:\n            trimmed_list.append(item)\n        else:\n            trimmed_list.append(tuple(item[:K]))\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    \"\"\"\n    Write a function to trim each tuple by k in the given tuple list.\n    \"\"\"\n    # Loop through each tuple in the list\n    for tup in test_list:\n        # Use slicing to remove the first K elements of the tuple\n        tup = tup[K:]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    \"\"\"\n    Write a function to trim each tuple by k in the given tuple list.\n    \"\"\"\n    # loop through each tuple in the list\n    for i in range(len(test_list)):\n        # loop through each element in the tuple and check if the value is smaller than k\n        for j in range(len(test_list[i])):\n            if test_list[i][j] < K:\n                # if the value is smaller than k, replace it with 0\n                test_list[i][j] = 0\n    return test_list"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # Get the length of the tuples\n    tup1_length = len(test_tup1)\n    tup2_length = len(test_tup2)\n\n    # Check if the length of the two tuples are equal\n    if tup1_length!= tup2_length:\n        print(\"The length of the two tuples are not equal!\")\n        return\n\n    # Perform index wise multiplication\n    result_tup = ()\n    for i in range(tup1_length):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n\n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(lst)\n    result = {}\n    for item in tup:\n        if item in count:\n            if item in result:\n                result[item] += 1\n            else:\n                result[item] = 1\n    return result"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    c = Counter(tup) \n    for i in lst: \n        if i in c: \n            c[i] += 1 \n    return c "
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # Create a Counter object from the tuple elements\n    counter = Counter(tup)\n    # Create a dictionary to store the result\n    result = {}\n    # Iterate over the list and update the result dictionary\n    for item in lst:\n        counter[item] -= 1\n        if counter[item] > 0:\n            result[item] = counter[item]\n    return result"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    \"\"\"\n    This function takes in two arguments:\n    1. tup - a tuple\n    2. lst - a list\n    \n    It uses the Counter class from the collections module to count the occurrence of each element in the list in the tuple.\n    \"\"\"\n    counter = Counter(tup)\n    return {key: counter[key] for key in lst}"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # convert tuple to set to remove duplicates\n    tup = set(tup)\n    # create a dictionary with keys as elements in list and values as count of that element in the tuple\n    count_dict = Counter(lst)\n    # create a new tuple with keys as elements in list and values as count of that element in the tuple\n    result = tuple((k, count_dict[k]) for k in count_dict if k in tup)\n    return result"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # Taking the elements of tuple and making them into a set to remove duplicates\n    elements_set = set(tup)\n\n    # Iterating through the elements of the set and checking if it exists in the list\n    count_dict = {}\n    for element in elements_set:\n        if element in lst:\n            count_dict[element] = count_dict.get(element, 0) + 1\n\n    # Converting the dictionary into a list of tuples and returning the result\n    return list(count_dict.items())\n"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n\n    # Create a Counter object to store the count of each element in the tuple\n    count_obj = Counter(tup)\n\n    # Loop through the list and increment the count of each element in the Counter object\n    for element in lst:\n        count_obj[element] += 1\n\n    # Return the dictionary of the count of each element in the tuple\n    return dict(count_obj)"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurrence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(lst)\n    counts = []\n    \n    for elem in tup:\n        if elem in count_dict:\n            counts.append(count_dict[elem])\n        else:\n            counts.append(0)\n            \n    return counts"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    counter = Counter(lst)\n    return {k:counter[k] for k in counter}"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n\n    # Count the occurrence of each element in the list in the tuple \n    counts = Counter(tup) \n\n    # Calculate the total number of elements in the list \n    total_count = len(lst) \n\n    # Find the percentage of occurrence for each element in the list in the tuple \n    percentages = [(counts[i] * 100) / total_count for i in lst] \n\n    # Return a dictionary with the element and its percentage of occurrence in the list in the tuple \n    return dict(zip(lst, percentages))"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [x**3 for x in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_numbers = [3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]\n    return sum(perrin_numbers[:n])"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    total = 0\n    p = 3\n    while n > 0:\n        total += p**n\n        n -= 1\n    return total"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Calculate the sum of Perrin numbers up to n.\n\n    Parameters:\n    n (int): upper limit of the range of Perrin numbers to calculate\n\n    Returns:\n    int: sum of Perrin numbers up to n\n    \"\"\"\n    perrin_sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            perrin_sum += i\n    return perrin_sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    perrin_numbers = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024]\n    result = 0\n    for i in range(n):\n        result += perrin_numbers[i]\n    return result"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += 1/i\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum_perrin = 0\n    for i in range(1, n+1):\n        if i % 2!= 0:\n            sum_perrin += i\n    return sum_perrin"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    p = 1\n    sum = 0\n    for i in range(1, n+1):\n        sum += (i * p * p)\n        p = (p * 2) % 257\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += (i * (i + 1) * i) / 6\n    return sum"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    This function takes a list of strings and the size of each string to be extracted.\n    It returns a list of extracted strings.\n    \"\"\"\n    extracted_strings = []\n    for string in str_list:\n        if len(string) > size:\n            extracted_strings.append(string[:size])\n        else:\n            extracted_strings.append(string)\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of string values and an integer as input and returns a list of \n    strings of specified size.\n    \n    Parameters:\n        str_list (list): a list of string values.\n        size (int): the desired size of each string in the list.\n        \n    Returns:\n        list: a list of strings of specified size.\n    '''\n    extracted_strings = []\n    for i in range(0, len(str_list), size):\n        extracted_strings.append(' '.join(str_list[i:i+size]))\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_string(str_list, size):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    string_list = []\n    for i in range(0, len(str_list), size):\n        string_list.append(str_list[i:i+size])\n    return string_list"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function extracts specified size of strings from a given list of string values.\n    '''\n    extracted_list = []\n    for i in range(len(str_list)):\n        if len(str_list[i]) >= size:\n            extracted_list.append(str_list[i])\n    return extracted_list"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    extracted_strings = []\n    for string in l:\n        if len(string) >= l:\n            extracted_strings.append(string[:l])\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    res = []\n    for s in l:\n        if len(s) >= l:\n            res.append(s[:l])\n    return res"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of string values and the desired size of the extracted strings.\n    It returns a list of extracted strings.\n    '''\n    extracted_strings = []\n    for s in str_list:\n        extracted_strings.append(s[:size])\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_string(str_list, size):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n\n    Parameters:\n        str_list (list): A list of string values to extract strings from.\n        size (int): The size of the string to extract.\n\n    Returns:\n        list: A list of extracted strings.\n    '''\n    result = []\n    for string in str_list:\n        result.append(string[:size])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function extracts a specified number of strings from a given list of strings.\n    '''\n    # Create an empty list to store the extracted strings\n    extracted_str = []\n    \n    # Iterate through the list of strings\n    for string in str_list:\n        # Check if the length of the current string is greater than or equal to the specified size\n        if len(string) >= size:\n            # Append the current string to the extracted list\n            extracted_str.append(string)\n            \n    # Return the extracted strings\n    return extracted_str"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for s in l:\n        if len(s) == l:\n            result.append(s)\n    return result"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub('\\s+','', text).strip()"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub('\\s+','', text1)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Use the re.sub() method to remove all whitespaces from the string\n    return re.sub(r'\\s+', '', text1)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Use regular expression to remove all whitespaces from the string\n    text2 = re.sub(r'\\s+', '', text1)\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+','', text1)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    # Use regular expression to remove whitespaces from the string\n    text2 = re.sub(r'\\s+', '', text1)\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+','', text1)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub('\\s+','', text1)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # use regular expression to remove all whitespaces\n    text1 = re.sub(r'\\s+','', text1)\n    # remove leading and trailing whitespaces\n    text1 = text1.strip()\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    \"\"\"\n    Removes all whitespaces from the given string.\n\n    Parameters:\n    text (str): The string from which all whitespaces should be removed.\n\n    Returns:\n    str: The string with all whitespaces removed.\n    \"\"\"\n    # use regex to remove all whitespaces\n    pattern = r'\\s+'\n    text = re.sub(pattern,'', text)\n    return text"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    \"\"\"\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n\n    Args:\n    actual_cost (float): Actual cost of the item being sold.\n    sale_amount (float): Amount of the item being sold.\n\n    Returns:\n    float: Loss amount on the sale, if any.\n    \"\"\"\n    if sale_amount < actual_cost:\n        loss_amount = sale_amount - actual_cost\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    \"\"\"\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    \"\"\"\n    if actual_cost < sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 2,
        "answer": ""
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost,sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss_percentage = (actual_cost - sale_amount)/actual_cost*100\n    if loss_percentage > 10:\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost < sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    \"\"\"\n    This function calculates the loss amount on a sale if the given amount is less than the actual cost.\n    Otherwise, it returns 0.\n    \"\"\"\n    if sale_amount < actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost < sale_amount:\n        loss_amount = actual_cost - sale_amount\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        loss_amount = actual_cost - sale_amount\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost,sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost:\n        loss_amount = actual_cost - sale_amount\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    even_factors = []\n    \n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                even_factors.append(i)\n    \n    sum_of_even_factors = sum(even_factors)\n    \n    return sum_of_even_factors"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    even_sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if n % i == 0 and i % 2 == 0:\n                even_sum += i\n    return even_sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef sumOfFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    even_factors = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and n % (i*2) == 0:\n            even_factors += i + n//i\n            even_factors += i + n//(i*2)\n    return even_factors"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n%i == 0:\n            if i%2 == 0:\n                sum += i\n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef sumofFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n\n    # loop through all even factors of n and add them to a variable called sum\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1, 2):\n        if n % i == 0:\n            sum += i\n\n    # return the sum of all even factors of n\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef sumofFactors(n): \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1): \n        if n % i == 0 and i % 2 == 0: \n            sum += i \n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef sumofFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    even_factors = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n%i == 0 and i%2 == 0:\n            even_factors += i\n    return even_factors\n\nprint(sumofFactors(20)) # Output: 20"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef sumofFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    even_factors = []\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and n % i == 0:\n            even_factors.append(i)\n            even_factors.append(n//i)\n    return sum(even_factors)"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w+z\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b[a-zA-Z]+z\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b(z)\\w+\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b(z)\\w+\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+\\w*[zZ]\\w*\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b\\w*[zZ]\\w*\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # define a regular expression pattern for finding words containing 'z'\n    pattern = r'\\b[a-zA-Z]+z\\b'\n    \n    # use the re.search() method to search for the pattern in the text\n    match = re.search(pattern, text)\n    \n    # check if a match was found and return the result\n    if match:\n        return match.group()\n    else:\n        return 'No matches found.'"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b[a-zA-Z0-9]+\\b'\n    match_obj = re.findall(pattern, text)\n    return match_obj"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+\\b'\n    return re.findall(pattern, text)"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b[a-zA-Z]+z\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    \"\"\"\n    Write a function to check whether the given month number contains 31 days or not.\n    \"\"\"\n    # Convert the month number to an integer\n    monthnum = int(monthnum2)\n\n    # Check if the month number is in the range of 1 to 12\n    if monthnum < 1 or monthnum > 12:\n        raise ValueError(\"Month number must be between 1 and 12.\")\n\n    # Check if the month number contains 31 days\n    if monthnum in (4, 6, 9, 11):\n        return True\n    elif monthnum in (1, 3, 5, 7, 8, 10, 12):\n        return False\n    else:\n        raise ValueError(\"Invalid month number.\")"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    if monthnum2 % 100 == 0 and monthnum2 % 400 == 0:\n        return \"Leap year\"\n    elif monthnum2 % 4 == 0:\n        return \"Leap year\"\n    else:\n        return \"Not a leap year\"\n\nmonthnum = 2\n\nif monthnum % 100 == 0 and monthnum % 400 == 0:\n    print(monthnum, \"is a leap year\")\nelif monthnum % 4 == 0:\n    print(monthnum, \"is a leap year\")\nelse:\n    print(monthnum, \"is not a leap year\")"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in range(1, 13):\n        if monthnum2 % 2 == 0:\n            if monthnum2 == 2:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    if monthnum2 in ['1', '3', '5', '7', '8', '10', '12']:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if len(monthnum2) == 2 and monthnum2[0] == '0':\n        monthnum2 = '0' + monthnum2\n    try:\n        monthnum = int(monthnum2)\n        if monthnum < 1 or monthnum > 12:\n            return 'Invalid Month Number'\n        elif monthnum == 2:\n            if monthnum2[1] == '2':\n                return '31'\n            else:\n                return '28' if monthnum2[1] == '0' or monthnum2[1] == '1' else '29'\n        elif monthnum == 4 or monthnum == 6 or monthnum == 9 or monthnum == 11:\n            return '30'\n        else:\n            return '31'\n    except ValueError:\n        return 'Invalid Month Number'"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in ['01', '03', '05', '07', '08', '10', '12']:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    monthnum = str(monthnum2)\n    if monthnum.endswith('31'):\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    \"\"\"\n    Write a function to check whether the given month number contains 31 days or not.\n    \"\"\"\n    monthnum = int(monthnum2)\n    \n    # Check if the month number is between 1 and 12 inclusive\n    if monthnum < 1 or monthnum > 12:\n        print(\"Month number is not valid.\")\n        return False\n    \n    # Check if the month has 31 days\n    days_in_month = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if monthnum == 2 and (year % 4 == 0 and (year % 100!= 0 or year % 400 == 0)):\n        days_in_month[2] = 29\n    else:\n        days_in_month[2] = 28\n    \n    if monthnum in days_in_month:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 2:\n        if (year % 4 == 0 and year % 100!= 0) or (year % 400 == 0):\n            return True\n        else:\n            return False\n    else:\n        return True"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum):\n    if monthnum in [4, 6, 9, 11]:\n        return True\n    elif monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return False\n    else:\n        raise ValueError(\"Invalid month number\")"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # Loop through each string in the list\n    for i in range(len(stringlist)):\n        # Reverse the string and store it back in the list\n        stringlist[i] = stringlist[i][::-1]\n    # Return the modified list\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    \"\"\"\n    Write a function to reverse each string in a given list of string values.\n    \"\"\"\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    # initialize variables to store minimum length and sublist\n    min_length = float('inf')\n    min_sublist = []\n    \n    # loop through the list\n    for sublist in lst:\n        # calculate the length of the sublist\n        length = len(sublist)\n        \n        # check if the length is less than the current minimum length\n        if length < min_length:\n            # update the minimum length and sublist\n            min_length = length\n            min_sublist = sublist\n    \n    # return the sublist with the minimum length\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf')\n    min_sublist = []\n\n    for i in range(len(lst)): \n        for j in range(i+1, len(lst)+1): \n            sublist = lst[i:j]\n            if len(sublist) < min_len:\n                min_len = len(sublist)\n                min_sublist = sublist\n\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    # Initialize variables\n    min_len = float('inf') # minimum length found so far\n    min_sublist = None # sublist with minimum length\n    \n    # Loop through the list\n    for i in range(len(lst)):\n        sublist = lst[i:] # create a sublist starting from index i\n        \n        # Check if the sublist has a smaller length than the current minimum\n        if len(sublist) < min_len:\n            min_len = len(sublist) # update the minimum length\n            min_sublist = sublist # update the sublist with minimum length\n    \n    # Return the sublist with minimum length\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = float('inf')\n    min_sublist = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            sublist = lst[i:j]\n            if len(sublist) < min_length:\n                min_length = len(sublist)\n                min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min(lst): \n    \"\"\"\n    Write a python function to find the sublist having minimum length.\n    \"\"\"\n    min_sublist = lst\n    min_length = len(lst)\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if len(lst[i:j+1]) < min_length:\n                min_sublist = lst[i:j+1]\n                min_length = len(lst[i:j+1])\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min(lst): \n    '''\n    This function takes a list as input and returns the sublist having the minimum length.\n    '''\n    \n    # initialize the minimum sublist and its length\n    min_sublist = []\n    min_length = len(lst)\n    \n    # loop through the list\n    for i in range(len(lst)):\n        \n        # create a new sublist by taking a slice from the original list\n        sublist = lst[i:i+10]\n        \n        # check if the length of the sublist is less than the current minimum length\n        if len(sublist) < min_length:\n            \n            # update the minimum sublist and its length\n            min_sublist = sublist\n            min_length = len(sublist)\n    \n    # return the minimum sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min(lst):\n    min_len = float('inf')\n    min_sublist = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            sublist = lst[i:j+1]\n            if len(sublist) < min_len:\n                min_len = len(sublist)\n                min_sublist = sublist\n    return min_sublist\n"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = float('inf')\n    min_sublist = []\n\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if len(lst[i:j+1]) < min_length:\n                min_length = len(lst[i:j+1])\n                min_sublist = lst[i:j+1]\n\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    #initialize a variable to store the minimum length\n    min_len = len(lst[0])\n    \n    #loop through the list and find the minimum length sublist\n    for i in range(len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n            min_lst = lst[i]\n\n    #return the minimum length sublist\n    return min_lst"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = float('inf')\n    min_sublist = []\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rectangle_area(length, breadth):\n    '''\n    This function takes the length and breadth of a rectangle as input\n    and returns the area of the rectangle.\n    '''\n    area = length * breadth\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rectangle_area(l,b):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    area = l*b\n    print(\"The area of the rectangle is:\", area)"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    print(\"The area of the rectangle is:\", area)"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rectangle_area(length,breadth):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return length * breadth"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rectangle_area(l,b):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    return l*b"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # split the string into substrings\n    substrings = re.findall('[A-Z]+', str1)\n\n    # loop through the substrings and remove them from the original string\n    for substring in substrings:\n        str1 = re.sub(substring, '', str1)\n\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = r'\\b[A-Z][a-z]+\\b'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # create a pattern to match uppercase substrings\n    pattern = re.compile('[A-Z]+')\n    \n    # find all matches in the string\n    matches = pattern.findall(str1)\n    \n    # loop through each match and replace it with an empty string\n    for match in matches:\n        str1 = str1.replace(match, '')\n    \n    # return the modified string\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Define a regular expression pattern to match uppercase letters\n    pattern = re.compile('[A-Z]+')\n    # Find all uppercase substrings in the string\n    matches = pattern.findall(str1)\n    # Iterate over the matches and remove each substring from the string\n    for match in matches:\n        str1 = str1.replace(match, '')\n    # Return the updated string\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Define a regular expression pattern to match uppercase substrings\n    pattern = r'(?i)[A-Z]+'\n\n    # Use the re.sub() method to replace all uppercase substrings with an empty string\n    result = re.sub(pattern, '', str1)\n\n    return result"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Define a regular expression pattern to match uppercase letters\n    pattern = re.compile('[A-Z]+')\n    # Replace all uppercase letters in the string with an empty string\n    str2 = pattern.sub('', str1)\n    # Return the modified string\n    return str2"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = r'[A-Z]+'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    uppercase_pattern = re.compile('[A-Z]+')\n    uppercase_matches = uppercase_pattern.findall(str1)\n    for match in uppercase_matches:\n        str1 = str1.replace(match, '')\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Define a pattern to match uppercase substrings\n    pattern = r'[A-Z]+'\n    # Use the pattern to find all uppercase substrings in the string\n    matches = re.findall(pattern, str1)\n    # Remove all uppercase substrings from the string\n    result = ''.join([char for char in str1 if char not in matches])\n    return result"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_uppercase(string):\n    '''\n    This function takes a string as input and removes all uppercase substrings from it.\n    '''\n    return re.sub('[A-Z]', '', string)"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Extract(lst): \n    '''\n    This function takes a list as input and returns a new list that contains the first element of each sublist.\n    '''\n    new_lst = []\n    for i in lst: \n        new_lst.append(i[0]) \n    return new_lst "
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        if isinstance(sublist, list):\n            result.append(sublist[0])\n        else:\n            result.append(sublist)\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Extract(lst):\n    '''\n    This function takes a list of lists as input and returns a list of the first element of each sublist.\n    '''\n    first_elements = []\n    for sublist in lst:\n        first_elements.append(sublist[0])\n    return first_elements"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        if isinstance(sublist, list):\n            result.append(sublist[0])\n        else:\n            result.append(sublist)\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    # create an empty list to hold the extracted elements\n    extracted = []\n    # loop through each sublist in the original list\n    for sublist in lst:\n        # if the sublist is not empty\n        if sublist:\n            # add the first element of the sublist to the extracted list\n            extracted.append(sublist[0])\n    return extracted"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        if sublist: # Check if sublist is not empty\n            result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    new_lst = []\n    for i in lst:\n        new_lst.append(i[0])\n    return new_lst"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    # create an empty list to store the extracted elements\n    extracted = []\n\n    # loop through each sublist in the input list\n    for sublist in lst: \n        # if the sublist is not empty, extract the first element and append it to the extracted list\n        if sublist: \n            extracted.append(sublist[0]) \n\n    return extracted"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        if len(sublist) > 0:\n            result.append(sublist[0])\n    return result"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        if str[i].isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    \"\"\"\n    Write a python function to count the upper case characters in a given string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_count = 0\n    for char in str:\n        if char.isupper():\n            upper_count += 1\n    return upper_count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    \"\"\"\n    Write a python function to count the upper case characters in a given string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    # initialize variables\n    upper_count = 0\n    # loop through the string\n    for char in str:\n        # check if the character is uppercase\n        if char.isupper():\n            # increment the counter if the character is uppercase\n            upper_count += 1\n    # return the count of uppercase characters\n    return upper_count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    \"\"\"\n    Write a function to find all possible combinations of the elements of a given list.\n    \"\"\"\n    n = len(list1)\n    for i in range(n):\n        for j in range(i+1, n):\n            print(list1[i], list1[j], end=' ')"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combinations = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            combinations.append(list1[i:j])\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # Initialize variables for the number of elements in the list and the size of the combinations\n    n = len(list1)\n    size = 2 ** n\n    \n    # Initialize an empty list to store the combinations\n    combinations = []\n    \n    # Iterate through all possible combinations of the elements in the list\n    for i in range(1, size+1):\n        # Convert the current combination into a set to remove duplicates and convert it back to a list\n        combination = sorted(list(set(bin(i)[2:].zfill(n))))\n        # Append the current combination to the list of combinations\n        combinations.append(combination)\n    \n    # Return the list of combinations\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    \"\"\"\n    Write a function to find all possible combinations of the elements of a given list.\n    \"\"\"\n    from itertools import combinations\n\n    # Check if the input list is empty\n    if len(list1) == 0:\n        return []\n\n    # Find all possible combinations of the elements of the list\n    return list(combinations(list1, len(list1)))"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 0:\n        return []\n\n    def helper(combination, current, remaining):\n        if len(combination) == len(list1):\n            result.append(combination[:])\n            return\n\n        for i in range(current, len(remaining)):\n            helper(combination + [remaining[i]], i, remaining[:i] + remaining[i+1:])\n\n    result = []\n    remaining = list1.copy()\n    helper([], 0, remaining)\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    list1.sort()\n    result = []\n    for i in range(1, len(list1)+1):\n        for j in range(len(list1)-i+1):\n            result.append(list1[j:j+i])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    n = len(list1)\n    for i in range(2**n):\n        temp = []\n        for j in range(n):\n            if i & (1 << j):\n                temp.append(list1[j])\n        if len(temp) == n:\n            result.append(temp)\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    n = len(list1)\n    for i in range(1, n + 1):\n        for j in range(n, n - i + 1, -1):\n            yield list1[j:j+i]"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n\n    # Initialize an empty list to store the combinations\n    combinations = []\n\n    # Loop through each element of the list\n    for i in range(len(list1)):\n        # Loop through each possible starting position\n        for j in range(len(list1)):\n            # If j is less than i, we have found a valid combination\n            if j < i:\n                # Create a list of the elements in the combination\n                combination = list1[j:i+1]\n                # Append the combination to the list of combinations\n                combinations.append(combination)\n\n    # Return the list of combinations\n    return combinations"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    if not arr:\n        return 0\n\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(max_ending_here * arr[i], arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    max_ending_here = 1\n    min_ending_here = 1\n\n    for i in range(len(arr)):\n        if arr[i] > 0:\n            max_ending_here = max(arr[i], max_ending_here * arr[i])\n            min_ending_here = min(arr[i], min_ending_here * arr[i])\n        else:\n            max_ending_here = max(arr[i], max_ending_here * arr[i])\n            min_ending_here = min(arr[i], min_ending_here * arr[i])\n\n        if max_ending_here > max_product:\n            max_product = max_ending_here\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    This function takes an array as input and returns the maximum product subarray of the array.\n    \"\"\"\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    '''\n    This function takes an array as input and returns the maximum product subarray.\n    '''\n    max_product = float('-inf')\n    current_product = 1\n    \n    for num in arr:\n        if num < 0:\n            current_product = 1\n            \n        current_product *= num\n        \n        if current_product > max_product:\n            max_product = current_product\n            \n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    max_product = float('-inf')\n    max_ending_here = 1\n    min_ending_here = 1\n\n    for num in arr:\n        max_ending_here = max(num, max_ending_here * num)\n        min_ending_here = min(num, min_ending_here * num)\n\n        if max_ending_here < 0:\n            max_ending_here = 1\n            min_ending_here = 1\n\n        if max_product < max_ending_here:\n            max_product = max_ending_here\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    max_product = float('-inf')\n    current_product = 1\n    \n    for num in arr:\n        current_product = max(num, current_product*num)\n        max_product = max(max_product, current_product)\n        \n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    max_so_far = arr[0]\n    max_ending_here = 1\n    min_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n\n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    n = len(arr)\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n\n    for i in range(1, n):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    max_ending_here = 1\n    min_ending_here = 1\n\n    for num in arr:\n        if num < 0:\n            temp = max_ending_here\n            max_ending_here = min_ending_here\n            min_ending_here = temp\n        \n        max_ending_here = max(max_ending_here * num, num)\n        min_ending_here = min(min_ending_here * num, num)\n        \n        max_product = max(max_product, max_ending_here)\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    if not arr:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = []\n    for i in dict.values():\n        values.append(i)\n\n    if len(set(values)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    value = None\n    \n    # iterate through the dictionary\n    for i in dict.values():\n        # check if there is any value in the dictionary\n        if value is None:\n            value = i\n        # if there is any value in the dictionary, check if it is same as the current value\n        elif i!= value:\n            return False\n    \n    # if all values are same, return True\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    count = {}\n    for i in dict.values():\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n    if len(count) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    \"\"\"\n    Write a function to check if all values are same in a dictionary.\n    \"\"\"\n    count = 0\n    for val in dict.values():\n        if count == 0:\n            first_val = val\n            count += 1\n        else:\n            if first_val!= val:\n                return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    value = None\n    for i in dict:\n        if value is None:\n            value = dict[i]\n        elif value!= dict[i]:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    count = 0\n    for val in dict.values():\n        if val == n:\n            count += 1\n            if count == len(dict):\n                return True\n    return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    \"\"\"\n    Check if all values are same in a dictionary.\n\n    Args:\n        dict (dict): Dictionary to check.\n        n (int): Number of values to check.\n\n    Returns:\n        bool: True if all values are same, False otherwise.\n    \"\"\"\n    values = []\n    for i in range(n):\n        if i in dict:\n            values.append(dict[i])\n        else:\n            return False\n    return all(values)"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    \"\"\"\n    This function takes a dictionary and a number n as input and returns True if all values in the dictionary are same,\n    else it returns False.\n    \"\"\"\n\n    # Get all the values in the dictionary\n    values = list(dict.values())\n\n    # Check if all values are same\n    if len(set(values)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if not isinstance(dict, dict):\n        raise TypeError(\"Argument must be a dictionary\")\n\n    values = list(dict.values())\n    if len(values)!= 1:\n        return False\n\n    for value in values:\n        if value!= n:\n            return False\n\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) == 0:\n        return False\n    \n    for key in dict:\n        if dict[key]!= dict[key]:\n            return False\n    \n    return True"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key: value for key, value in dict1.items() if value is not None and value!= ''}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v!= ''}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for key, value in dict1.items():\n        if value is not None and value!= '':\n            dict1[key] = value\n    return dict1"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for key, value in dict1.items():\n        if value:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    # Initialize an empty dictionary to store the items that are not empty\n    new_dict = {}\n    # Iterate over the items in the dictionary\n    for key, value in dict1.items():\n        # If the value is not empty, add it to the new dictionary\n        if value!= \"\":\n            new_dict[key] = value\n    # Return the new dictionary\n    return new_dict"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key: value for key, value in dict1.items() if value is not None}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key: value for key, value in dict1.items() if value}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k:v for k, v in dict1.items() if v}"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product(arr):\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n\n    for i in range(1, n):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n <= 1:   # if array has less than or equal to one element, return 0\n        return 0\n    \n    # Create a list of increasing subsequences of the given array\n    subseqs = [[] for _ in range(n)]\n    for i in range(n):\n        subseqs[i].append(arr[i])\n        for j in range(i+1, n):\n            subseqs[i].append(arr[j])\n    \n    # Initialize two variables to store the maximum and minimum products\n    max_product = 0\n    min_product = 1\n    \n    # Iterate through all subsequences and find the maximum and minimum products\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                subseq = subseqs[i] + subseqs[j] + subseqs[k]\n                subseq.sort()\n                product = 1\n                for num in subseq:\n                    product *= num\n                max_product = max(max_product, product)\n                min_product = min(min_product, product)\n    \n    return max_product * min_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\n    Args:\n    arr (list): A list of integers representing the array.\n\n    Returns:\n    int: The maximum product formed by multiplying numbers of an increasing subsequence of the array.\n    \"\"\"\n\n    # Find the length of the array\n    n = len(arr)\n\n    # Initialize the maximum product and the current product\n    max_product = arr[0]\n    current_product = arr[0]\n\n    # Loop through the array starting from index 1\n    for i in range(1, n):\n\n        # If the current element is greater than the maximum product, update the maximum product and reset the current product\n        if arr[i] > max_product:\n            max_product = arr[i]\n            current_product = arr[i]\n\n        # If the current element is greater than the current product and less than the maximum product, update the current product\n        elif arr[i] > current_product:\n            current_product = arr[i]\n\n    # Return the maximum product\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product(arr):\n    n = len(arr)\n    max_so_far = max_ending_here = arr[0]\n    \n    for i in range(1, n):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    \n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    n = len(arr)\n    max_ending_here = arr[0]\n    min_so_far = arr[0]\n    max_product = arr[0]\n\n    for i in range(1, n):\n        if arr[i] > max_ending_here:\n            max_ending_here = arr[i]\n            min_so_far = min(min_so_far, max_ending_here)\n        elif arr[i] < min_so_far:\n            min_so_far = arr[i]\n            max_ending_here = max(max_ending_here, min_so_far)\n        else:\n            min_so_far = min(min_so_far, max_ending_here)\n\n        max_product = max(max_product, max_ending_here * min_so_far)\n\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    n = len(arr)\n    if n == 0:\n        return 0\n    \n    # Initialize variables for left and right pointers\n    left = 0\n    right = n - 1\n    \n    # Initialize maximum product and variables for current subarray\n    max_product = arr[0]\n    curr_product = arr[0]\n    min_val = arr[0]\n    \n    # Traverse through the array and update the left and right pointers\n    while left < right:\n        # Update maximum product if the current element is greater than the minimum value of the subarray\n        if arr[right] > min_val:\n            max_product = max(max_product, curr_product * arr[right])\n            # Update minimum value of the subarray\n            min_val = min(min_val, arr[right])\n        # Update current product if the current element is less than the maximum value of the subarray\n        elif arr[right] < min_val:\n            curr_product = min(curr_product, arr[right])\n        # If the current element is equal to the minimum value of the subarray, move the left pointer to the right\n        else:\n            left += 1\n        \n        # Update maximum product if the current element is greater than the minimum value of the subarray\n        if arr[left] > min_val:\n            max_product = max(max_product, curr_product * arr[left])\n            # Update minimum value of the subarray\n            min_val = min(min_val, arr[left])\n        # Update current product if the current element is less than the maximum value of the subarray\n        elif arr[left] < min_val:\n            curr_product = min(curr_product, arr[left])\n        # If the current element is equal to the minimum value of the subarray, move the right pointer to the left\n        else:\n            right -= 1\n    \n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    # Initialize max_product as the first element of the array\n    max_product = arr[0]\n    # Initialize variables to keep track of the maximum product and the start index of the current subsequence\n    max_so_far = arr[0]\n    start = 0\n    \n    # Iterate through the array starting from the second element\n    for i in range(1, n):\n        # If the current element is greater than the start element of the current subsequence\n        if arr[i] > arr[start]:\n            # If the product of the current element and the maximum product of the current subsequence is greater than the maximum product of all previous subsequences, update the maximum product\n            if max_product * arr[i] > max_so_far:\n                max_product = max_product * arr[i]\n                start = i\n        # If the current element is less than the start element of the current subsequence\n        else:\n            # If the product of the current element and the maximum product of the current subsequence is greater than the maximum product of all previous subsequences, update the maximum product and start index\n            if max_product * arr[i] > max_so_far:\n                max_product = max_product * arr[i]\n                start = i\n    \n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product(arr):\n    \"\"\"\n    This function takes an array of integers as input and returns the maximum product of \n    the elements in the increasing subsequence.\n\n    Args:\n    arr (list): A list of integers representing the input array.\n\n    Returns:\n    int: The maximum product of the elements in the increasing subsequence.\n    \"\"\"\n    # Initialize the maximum product and the current subsequence product\n    max_product = arr[0]\n    current_subsequence_product = arr[0]\n\n    # Loop through the array from the second element\n    for i in range(1, len(arr)):\n        # Check if the current element is greater than the current subsequence product\n        if arr[i] > current_subsequence_product:\n            # Update the maximum product and the current subsequence product\n            max_product = current_subsequence_product\n            current_subsequence_product = arr[i]\n        # Check if the current element is less than the current subsequence product\n        elif arr[i] < current_subsequence_product:\n            # Update the current subsequence product\n            current_subsequence_product = current_subsequence_product * arr[i]\n        # Check if the current element is equal to the current subsequence product\n        else:\n            # Update the current subsequence product by multiplying with the next element\n            current_subsequence_product = current_subsequence_product * arr[i + 1]\n\n    # Return the maximum product\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    if not arr:\n        return 0\n\n    # Find the maximum subsequence ending at each index\n    max_so_far = max_ending_here = arr[0]\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product(arr):\n    if len(arr) == 0:\n        return 0\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n    if len(test_tup) < 2:\n        return None\n    \n    result = 0\n    \n    for i in range(len(test_tup)-1):\n        result += test_tup[i+1]\n    \n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Initialize the sum to 0\n    sum = 0\n    # Traverse the list starting from index 1 (i.e., the second element)\n    for i in range(1, len(test_tup)):\n        # Add the current element with the element at the next index (i+1)\n        sum += test_tup[i]\n    # Return the sum of all pairwise additions\n    return sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # initialize variables\n    count = 0\n    current_sum = 0\n    next_sum = 0\n    \n    # loop through the tuple and add the pairwise values\n    for i in range(len(test_tup) - 1):\n        count += 1\n        current_sum += test_tup[i]\n        next_sum += test_tup[i+1]\n        \n        # check if the current and next sum are equal, if so, return the count of pairs\n        if current_sum == next_sum:\n            return count\n    \n    # if no pairs are found, return 0\n    return 0"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    count = len(test_tup) - 1\n    if count % 2 == 0:\n        sum_list = [(test_tup[i] + test_tup[i+1]) for i in range(count//2)]\n        return sum_list\n    else:\n        sum_list = [(test_tup[i] + test_tup[i+1]) for i in range((count//2)+1)]\n        return sum_list[0] + sum_list[-1]"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return None\n    \n    pairwise_sum = 0\n    for i in range(len(test_tup)-1):\n        pairwise_sum += test_tup[i] + test_tup[i+1]\n    \n    return pairwise_sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = 0\n    for i in range(len(test_tup)-1):\n        result += test_tup[i] + test_tup[i+1]\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    num_elements = len(test_tup)\n    if num_elements < 2:\n        print(\"Tuple must have at least two elements.\")\n        return None\n    else:\n        result = []\n        for i in range(num_elements-1):\n            result.append(test_tup[i] + test_tup[i+1])\n        return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n    n = len(test_tup)\n    total = 0\n    for i in range(n-1):\n        total += test_tup[i] + test_tup[i+1]\n    return total"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    neighboring_sum = sum(test_tup[1:])\n    return neighboring_sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n\n    if len(test_tup) <= 1:\n        return 0\n\n    if len(test_tup) == 2:\n        return test_tup[0] + test_tup[1]\n\n    return (test_tup[0] + test_tup[1]) + add_pairwise(test_tup[2:])\n"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_remainder(arr, n):\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_remainder(arr, n): \n    '''\n    This function takes in an array and an integer n and returns the result of multiplying the array \n    elements modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_remainder(arr, n):\n    '''\n    This function takes two parameters: \n    - arr: a list of integers\n    - n: an integer\n    \n    The function finds the product of the array multiplication modulo n.\n    \n    The function first initializes a variable called 'product' to 1. Then, it iterates through the \n    array using a for loop. For each element in the array, it multiplies it with the 'product' \n    variable and adds it to a variable called'sum'. Finally, it divides the'sum' variable by \n    n and sets the 'product' variable to the remainder.\n    \n    The function returns the final value of the 'product' variable.\n    '''\n    \n    product = 1\n    sum = 0\n    for i in arr:\n        sum += i * product\n        product = sum % n\n    \n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_remainder(arr, n): \n    '''\n    This function takes in an array and an integer n, and returns the product of the \n    array multiplication modulo n.\n    '''\n    # initialize the result variable to 1\n    result = 1\n\n    # loop through the array\n    for i in arr:\n        # multiply the result by the current element and modulo n\n        result = (result * i) % n\n\n    # return the result\n    return result"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    total = 1\n    for num in arr:\n        total = (total * num) % n\n    return total"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_remainder(arr, n): \n    '''\n    This function takes an array and a number n as inputs and returns the remainder when the array is multiplied together.\n    '''\n    product = 1 \n    for num in arr: \n        product *= num \n    return product % n "
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_remainder(arr, n): \n    '''\n    This function takes an array of integers arr and an integer n as input. It returns the product of the array modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    \n    for i in range(len(l)-1): \n        if l[i] == l[i+1]+1: \n            return True\n    \n    return False\n"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] == l[i+1]+1:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) < 2:\n        return False\n    for i in range(len(l)-1):\n        if l[i] == l[i+1]+1:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1): \n        if l[i]+1 == l[i+1]: \n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) < 2:\n        return False\n\n    for i in range(len(l)-1):\n        if l[i+1] - l[i]!= 1:\n            return False\n\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) < 2:\n        return False\n    for i in range(len(l) - 1):\n        if l[i] + 1 == l[i+1]:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l) - 1):\n        if l[i] + 1 == l[i+1]:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i+1] == l[i] + 1:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] == l[i+1]:\n            return False\n    return True"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n\n    # Create a set from the first list and then check if each element is in the second list\n    set1 = set(test_list1)\n    common_elements = set1.intersection(set(test_list2))\n\n    return tuple(common_elements)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Initialize a set to store the common elements of the two list\n    common_elements = set()\n    \n    # Loop through both list and find the common elements\n    for element in test_list1:\n        if element in test_list2 and element not in common_elements:\n            common_elements.add(element)\n    \n    # Convert the set back to a tuple\n    result = tuple(common_elements)\n    \n    return result"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n\n    # Use set() to remove duplicate elements in list1\n    list1_set = set(test_list1)\n\n    # Iterate through list2 and check if each element is in list1_set\n    for element in test_list2:\n        if element in list1_set:\n            # If element is in list1_set, add it to result_set\n            result_set.add(element)\n\n    # Convert result_set to a list and return it\n    return list(result_set)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    intersection_set = set1.intersection(set2)\n    intersection_list = list(intersection_set)\n    return intersection_list"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Convert the given tuple list into sets to ensure unique elements and order doesn't matter\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n\n    # Find the intersection of elements in the two sets\n    intersection = set1.intersection(set2)\n\n    # Convert the intersection set back into a list and return it\n    return list(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # convert lists to sets to remove duplicates\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n\n    # find the intersection of the two sets\n    intersection = set1.intersection(set2)\n\n    # convert the intersection back to a list and return it\n    return list(intersection)\n"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    result = []\n    for t1 in test_list1:\n        for t2 in test_list2:\n            if t1 == t2:\n                result.append(t1)\n    return tuple(result)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    common_tuples = []\n    for tuple1 in test_list1:\n        for tuple2 in test_list2:\n            if tuple1 == tuple2:\n                common_tuples.append(tuple1)\n    return common_tuples"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Find the tuple intersection of elements in the given tuple list irrespective of their order.\n\n    Args:\n        test_list1 (list of tuples): The first tuple list to be compared.\n        test_list2 (list of tuples): The second tuple list to be compared.\n\n    Returns:\n        list: The tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # Create a set of tuples from the first list to remove duplicates\n    set_list1 = set(test_list1)\n    # Create a set of tuples from the second list to remove duplicates\n    set_list2 = set(test_list2)\n    # Find the intersection of the two sets and convert it back to a list of tuples\n    intersection = list(set_list1.intersection(set_list2))\n    return intersection"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    intersection = []\n    for i in test_list1:\n        if i in test_list2:\n            intersection.append(i)\n    return intersection"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)\n"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    new_str = \"\"\n    for i in str1:\n        if i == ch:\n            new_str += newch\n        else:\n            new_str += i\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # Initialize an empty string to hold the modified string\n    modified_str = \"\"\n    # Iterate over each character in the input string\n    for i in range(len(str1)):\n        # If the current character is equal to the specified character, replace it with the new character\n        if str1[i] == ch:\n            modified_str += newch\n        # Otherwise, add the current character to the modified string\n        else:\n            modified_str += str1[i]\n    # Return the modified string\n    return modified_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Replace a character with another character in a string.\n\n    :param str1: The string to search in.\n    :param ch: The character to search for.\n    :param newch: The character to replace the found character with.\n    :return: The modified string.\n    \"\"\"\n    return str1.replace(ch, newch)"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # Create a Counter object from the dictionary\n    counter = Counter(dict1)\n    # Sort the Counter object by value\n    sorted_counter = counter.most_common()\n    # Return the sorted dictionary\n    return dict(sorted_counter)"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = Counter(dict1).most_common()\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    counter = Counter(dict1)\n    sorted_counter = counter.most_common()\n    sorted_dict = {}\n    \n    for key, value in sorted_counter:\n        sorted_dict[key] = value\n    \n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    sorted_dict = Counter(dict1)\n    sorted_dict = dict(sorted_dict.most_common())\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    counter = Counter(dict1)\n    sorted_dict = dict(sorted(counter.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    sorted_dict = Counter(dict1).most_common()\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    \"\"\"\n    Write a function to sort a dictionary by value.\n    \"\"\"\n    # Convert the dictionary to a Counter object to use Counter's sort_items() method\n    counter = Counter(dict1)\n    \n    # Sort the items in the Counter object by value in descending order\n    sorted_counter = counter.most_common(None)\n    \n    # Create a new dictionary with the sorted items\n    sorted_dict = dict(sorted_counter)\n    \n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # Counter object to count the number of times each element appears in the dictionary\n    count = Counter(dict1)\n\n    # Sort the dictionary based on the values in descending order\n    sorted_dict = dict(sorted(count.items(), key=lambda item: item[1], reverse=True))\n\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    sorted_dict = dict(sorted(dict1.items(), key=lambda item: item[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # find the largest and smallest value in the array\n    largest = nums[0]\n    smallest = nums[0]\n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    # calculate the sum of the largest and smallest values\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_num = nums[0]\n    min_num = nums[0]\n    for num in nums:\n        if num > max_num:\n            max_num = num\n        if num < min_num:\n            min_num = num\n    return max_num + min_num"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # find the largest and smallest values in the array\n    largest = max(nums)\n    smallest = min(nums)\n    \n    # return the sum of the largest and smallest values\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) < 2:\n        return None\n    \n    # Find the smallest and largest values in the array\n    smallest = float('inf')\n    largest = float('-inf')\n    for num in nums:\n        if num < smallest:\n            smallest = num\n        if num > largest:\n            largest = num\n    \n    # Return the sum of the largest and smallest values\n    return smallest + largest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = max(nums)\n    smallest = min(nums)\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) <= 1:\n        return nums[0] if len(nums) == 1 else 0\n\n    # find the minimum and maximum values\n    min_val = float('inf')\n    max_val = float('-inf')\n    for num in nums:\n        if num < min_val:\n            min_val = num\n        if num > max_val:\n            max_val = num\n\n    return min_val + max_val\n"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) < 2:\n        return None\n    \n    smallest = float('inf')\n    largest = float('-inf')\n    \n    for num in nums:\n        if num < smallest:\n            smallest = num\n        if num > largest:\n            largest = num\n    \n    return smallest + largest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) < 2:\n        return None\n    \n    # Find the largest and smallest values in the array\n    largest = nums[0]\n    smallest = nums[0]\n    for num in nums:\n        if num > largest:\n            largest = num\n        if num < smallest:\n            smallest = num\n    \n    # Calculate the sum of the largest and smallest values\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num + min_num"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if not nums:\n        return None\n    max_val = max(nums)\n    min_val = min(nums)\n    return max_val + min_val"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_lower(string):\n    \"\"\"\n    Write a python function to convert the given string to lower case.\n    \"\"\"\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_lower(string):\n    return string.lower()"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = r'\\b[a-z]+\\b' # pattern to match lowercase substrings\n    return re.sub(pattern, '', str1) # remove the matched substrings using re.sub() function"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    This function takes a string as input and removes all lowercase substrings from it.\n    '''\n    str1 = re.sub(r'[^A-Z]+', '', str1.lower())\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Split the given string into a list of substrings\n    substrings = str1.split()\n\n    # Initialize an empty list to store the modified substrings\n    modified_substrings = []\n\n    # Iterate through each substring in the list\n    for substring in substrings:\n        # Check if the substring is all lowercase\n        if substring.islower():\n            # If the substring is lowercase, continue to the next one\n            continue\n        # If the substring is not lowercase, add it to the modified substrings list\n        else:\n            modified_substrings.append(substring)\n\n    # Join the modified substrings into a new string and return it\n    return''.join(modified_substrings)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_lowercase(string):\n    '''\n    This function removes all lowercase substrings from a given string.\n    '''\n    pattern = re.compile(r'[a-z]+')\n    return pattern.sub('', string)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_lowercase(string):\n    '''\n    This function takes a string as input and removes all the lowercase substrings present in it.\n    '''\n    # Create a regular expression pattern to match lowercase substrings\n    pattern = re.compile(r'[a-z]+')\n    # Use findall() method to find all the matches in the string\n    matches = pattern.findall(string)\n    # Loop through all the matches and remove them from the string\n    for match in matches:\n        string = string.replace(match, '')\n    # Return the modified string\n    return string"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Compile the regular expression pattern for lowercase substrings\n    pattern = re.compile(r'\\b\\w*[a-z]\\w*\\b')\n    \n    # Find all the lowercase substrings in the string\n    matches = pattern.findall(str1)\n    \n    # Remove all the matches from the string\n    for match in matches:\n        str1 = str1.replace(match, '')\n    \n    # Return the modified string\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    \"\"\"\n    Write a function to remove lowercase substrings from a given string.\n\n    Args:\n        str1 (str): A string containing lowercase substrings\n\n    Returns:\n        str: The original string with lowercase substrings removed.\n    \"\"\"\n    # Define a regular expression pattern for finding lowercase substrings\n    pattern = r'[a-z]+'\n\n    # Use the re.findall() function to find all lowercase substrings in the string\n    lowercase_substrings = re.findall(pattern, str1)\n\n    # Loop through each lowercase substring and replace it with an empty string\n    for substring in lowercase_substrings:\n        str1 = str1.replace(substring, '')\n\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_lowercase(string):\n    # Define a regular expression pattern to match lowercase substrings\n    pattern = r'\\b[a-z]+\\b'\n\n    # Use the re.findall() function to find all substrings that match the pattern\n    matches = re.findall(pattern, string)\n\n    # Use the join() method to concatenate the matches with spaces in between\n    result =''.join(matches)\n\n    return result"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # define the regular expression pattern to match lowercase substrings\n    pattern = r'([a-z]+)'\n\n    # use the re.findall() method to find all substrings that match the pattern\n    matches = re.findall(pattern, str1)\n\n    # join the matches into a single string\n    result = ''.join(matches)\n\n    # return the result\n    return result"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Use regular expressions to match lowercase substrings\n    pattern = r'[a-z]+'\n    # Use the sub() function to remove the matched substrings from the string\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # Convert the number to a string\n    num_str = str(n)\n    # Use slicing to get the first character of the string\n    first_char = num_str[0]\n    # Convert the first character to an integer\n    first_digit = int(first_char)\n    # Return the first digit\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    first_digit = str(n)[0]\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    first_digit = n % 10\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes a number as input and returns the first digit of the number.\n    \"\"\"\n    # taking the first digit of the number and returning it\n    return n // 10"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes a positive integer as an argument and returns the first digit of that integer.\n    \"\"\"\n    return n // 10"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n // 10"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes a number as input and returns the first digit of the number.\n    \"\"\"\n    # extract the first digit of the number using string slicing\n    first_digit = str(n)[0]\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return int(str(n)[0])"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes a number as input and returns the first digit of the number.\n    \"\"\"\n    if n<10:\n        return n\n    else:\n        return first_Digit(n//10)"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_numbers = []\n    for number in list:\n        if number % 2!= 0:\n            odd_numbers.append(number)\n    return odd_numbers\n"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function which takes a list of integers and only returns the odd ones.\n    \"\"\"\n    odd_list = []\n    for num in list:\n        if num % 2 == 1:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(list):\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n\n    odd_list = []\n\n    for i in list:\n        if i % 2!= 0:\n            odd_list.append(i)\n\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    # create an empty list to store the odd numbers\n    odd_list = []\n\n    # loop through the list and check if each number is odd\n    for number in list:\n        if number % 2!= 0:\n            # if the number is odd, add it to the odd_list\n            odd_list.append(number)\n\n    # return the odd_list\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    This function takes a list of integers and returns only the odd numbers in the list.\n    '''\n    result = []\n    for num in list:\n        if num % 2!= 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n\n    # initialize an empty list to store the odd numbers\n    odd_list = []\n\n    # loop through each number in the list\n    for num in list:\n        # if the number is odd, add it to the odd_list\n        if num % 2!= 0:\n            odd_list.append(num)\n\n    # return the odd_list\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Calculate the sum of cubes of the first n natural numbers\n    sum_cubes = sum([i**3 for i in range(1, n+1)])\n    \n    # Calculate the sum of the first n natural numbers\n    sum_natural = sum(range(1, n+1))\n    \n    # Calculate the difference between the two sums\n    difference = sum_cubes - sum_natural\n    \n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Find the sum of cubes of the first n natural numbers\n    cube_sum = sum([i**3 for i in range(n+1)])\n    # Find the sum of the first n natural numbers\n    sum_of_numbers = sum(range(n+1))\n    # Return the difference\n    return cube_sum - sum_of_numbers"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_cubes = 0\n    sum_numbers = 0\n    for i in range(1, n+1):\n        sum_cubes += i ** 3\n        sum_numbers += i\n    return abs(sum_cubes - sum_numbers)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def difference(n):\n    \"\"\"\n    This function takes an integer as input and returns the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_of_natural_numbers = sum(range(1, n+1))\n    return sum_of_cubes - sum_of_natural_numbers"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_natural = sum(range(1, n+1))\n    return abs(sum_cubes - sum_natural)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # Find the sum of cubes of the first n natural numbers\n    sum_cubes = sum(x**3 for x in range(1, n+1))\n    \n    # Find the sum of the first n natural numbers\n    sum_numbers = sum(range(1, n+1))\n    \n    # Return the difference\n    return sum_cubes - sum_numbers"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    cubes = []\n    for i in range(1, n+1):\n        cubes.append(i**3)\n    total_cubes = sum(cubes)\n    \n    # calculate sum of first n natural numbers\n    total_natural = sum(range(1, n+1))\n    \n    # calculate the difference between the two sums\n    diff = total_cubes - total_natural\n    \n    return diff"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = 0\n    sum_natural = 0\n    for i in range(1, n+1):\n        sum_cubes += i ** 3\n        sum_natural += i\n    return abs(sum_cubes - sum_natural)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n\n    # sum of cubes of the first n natural numbers\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n\n    # sum of the first n natural numbers\n    sum_of_natural_numbers = sum([i for i in range(1, n+1)])\n\n    # difference between sum of cubes and sum of natural numbers\n    difference = abs(sum_of_cubes - sum_of_natural_numbers)\n\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_natural = sum(range(1, n+1))\n    return abs(sum_cubes - sum_natural)"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor_val = A[i] ^ A[j]\n            if xor_val % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    This function takes two lists A and N and returns the number of pairs whose xor value is odd.\n    '''\n\n    # Create a list to store the xor of each element in A with all other elements in A\n    xor_list = [0] * N\n    for i in range(N):\n        xor_list[i] = A[i] ^ A[i] ^ A[i]\n\n    # Initialize a counter variable to keep track of the number of odd xor values\n    count = 0\n\n    # Iterate through the xor_list and check if each element is odd\n    for i in range(N):\n        if xor_list[i] % 2!= 0:\n            count += 1\n\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A,N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        xor_value = A[i]\n        for j in range(i+1,N):\n            xor_value ^= A[j]\n            if xor_value % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor_value = A[i] ^ A[j]\n            if xor_value % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor = A[i] ^ A[j]\n            if xor % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+2, N):\n            xor_value = A[i] ^ A[j]\n            if xor_value % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if A[i] ^ A[j] % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor = A[i] ^ A[j]\n            if xor % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            xor_val = A[i] ^ A[j]\n            if xor_val % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A,N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if (A[i] ^ A[j]) % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n    \"\"\"\n    return ''.join([chr(ord(char) ^ 32) if char.isalpha() else char for char in string])"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = ''\n    for char in string:\n        if char.isupper():\n            new_string += char.lower()\n        elif char.islower():\n            new_string += char.upper()\n        else:\n            new_string += char\n    return new_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = \"\"\n    for char in string:\n        if char.isupper():\n            new_string += char.lower()\n        else:\n            new_string += char.upper()\n    return new_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    result = \"\"\n    for char in string:\n        if char.isupper():\n            result += char.lower()\n        else:\n            result += char.upper()\n    return result"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(chr(ord(c) ^ 32) if c.isupper() else chr(ord(c) ^ 32) for c in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(c.lower() if c.isupper() else c.upper() for c in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join([c.lower() if c.isupper() else c.upper() for c in string])"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n    \"\"\"\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(c.upper() if c.islower() else c.lower() for c in string)"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n    diff = n1 - n2\n    \n    # Convert the difference to a list of digits\n    diff_list = [int(digit) for digit in str(abs(diff))]\n    \n    # Calculate the sum of the per-digit difference\n    sum_diff = sum(diff_list)\n    \n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n\n    # Remove any leading zeros from the integers\n    while n1 and n1[0] == '0':\n        n1 = n1[1:]\n    while n2 and n2[0] == '0':\n        n2 = n2[1:]\n\n    # Convert the integers to lists of digits\n    n1_list = list(map(int, list(str(n1))))\n    n2_list = list(map(int, list(str(n2))))\n\n    # Calculate the distance between the two lists of digits\n    digit_distance = 0\n    for i in range(len(n1_list)):\n        digit_distance += abs(n1_list[i] - n2_list[i])\n\n    # Return the sum of the per-digit differences\n    return digit_distance"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    # convert the numbers to strings and split them into lists of digits\n    n1_str = str(n1)\n    n2_str = str(n2)\n    n1_list = [int(d) for d in n1_str]\n    n2_list = [int(d) for d in n2_str]\n\n    # find the absolute difference between the two numbers\n    diff = abs(n1 - n2)\n\n    # find the sum of the per-digit differences\n    sum_diff = 0\n    for digit in diff:\n        sum_diff += digit * digit\n\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # convert the numbers to lists of digits\n    digit_list1 = [int(digit) for digit in str(n1)]\n    digit_list2 = [int(digit) for digit in str(n2)]\n    \n    # calculate the difference between the two lists of digits\n    difference = [abs(digit_list1[i] - digit_list2[i]) for i in range(len(digit_list1))]\n    \n    # calculate the sum of the per-digit differences\n    sum_difference = sum(difference)\n    \n    return sum_difference"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Get the digits of n1 and n2\n    d1 = [int(digit) for digit in str(n1)]\n    d2 = [int(digit) for digit in str(n2)]\n    \n    # Find the per-digit difference between the two digits\n    diff = [[abs(d1[i]-d2[i]) for i in range(len(d1))] for j in range(len(d2))]\n    \n    # Calculate the sum of the per-digit difference\n    total_diff = sum(diff[0]) + sum(diff[1]) + sum(diff[2]) + sum(diff[3]) + sum(diff[4]) + sum(diff[5]) + sum(diff[6]) + sum(diff[7])\n    \n    return total_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n    num1 = abs(n1)\n    num2 = abs(n2)\n    \n    # Initialize a list to store the differences\n    diff_list = []\n    \n    # Iterate through each digit of the two numbers\n    for i in range(max(len(str(num1)), len(str(num2)))):\n        # Extract the i-th digit from both numbers\n        digit1 = int(str(num1)[i])\n        digit2 = int(str(num2)[i])\n        \n        # Find the difference between the digits\n        diff = digit1 - digit2\n        \n        # Add the difference to the list of differences\n        diff_list.append(diff)\n    \n    # Calculate the sum of the differences\n    sum_diff = sum(diff_list)\n    \n    # Return the sum of the differences\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n\n    Parameters:\n    n1 (int): An integer.\n    n2 (int): An integer.\n\n    Returns:\n    (int): The sum of the per-digit differences between n1 and n2.\n    \"\"\"\n    # Convert the integers to strings and split them into lists of digits\n    s1 = str(n1)\n    s2 = str(n2)\n    digits1 = [int(d) for d in s1]\n    digits2 = [int(d) for d in s2]\n\n    # Find the number of digits in the larger integer\n    max_digits = max(len(digits1), len(digits2))\n\n    # Initialize the sum variable to 0\n    sum_diff = 0\n\n    # Loop through each digit in both integers\n    for i in range(max_digits):\n        # If both digits are the same, skip to the next one\n        if digits1[i] == digits2[i]:\n            continue\n\n        # Calculate the per-digit difference between the digits\n        diff = abs(digits1[i] - digits2[i])\n\n        # Add the difference to the sum\n        sum_diff += diff\n\n    # Return the sum of the per-digit differences\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # convert the integers to lists of digits\n    num1 = list(map(int, str(n1)))\n    num2 = list(map(int, str(n2)))\n\n    # calculate the per-digit difference\n    diff = [0] * len(num1)\n    for i in range(len(num1)):\n        diff[i] = abs(num1[i] - num2[i])\n\n    # sum the differences\n    total_diff = sum(diff)\n\n    return total_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert both numbers to lists of digits\n    num1 = [int(d) for d in str(n1)]\n    num2 = [int(d) for d in str(n2)]\n\n    # Initialize the sum of differences to 0\n    sum_diff = 0\n\n    # Iterate over the digits of the first number\n    for i in range(len(num1)):\n        # Calculate the difference between the corresponding digits of the numbers\n        diff = abs(num1[i] - num2[i])\n\n        # Add the difference to the sum of differences\n        sum_diff += diff\n\n    # Return the sum of differences\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    count = 0\n    for i in range(10):\n        count += abs(n1 % 10 - n2 % 10)\n        n1 //= 10\n        n2 //= 10\n    return count"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = a[0]\n    current_sum = 0\n    for i in range(1, size):\n        current_sum = max(a[i], current_sum + a[i])\n        max_sum = max(max_sum, current_sum)\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size <= 0:\n        return 0\n    \n    max_sum = float('-inf')\n    curr_sum = 0\n    start = 0\n\n    for i in range(size):\n        curr_sum += a[i]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            start = i\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    \"\"\"\n\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if i > 0 and current_sum < 0:\n            current_sum = 0\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    This function takes a list of integers as input and an integer as the size of the window.\n    It returns the sum of the largest contiguous sublist in the window.\n\n    Example:\n    max_sub_array_sum([1, -2, 3, 10, -4, 7, 2, -5], 3) # Output: 16\n    '''\n    if size > len(a):\n        return None\n\n    max_so_far = float('-inf')\n    max_ending_here = 0\n\n    for i in range(size):\n        max_ending_here += a[i]\n        max_so_far = max(max_so_far, max_ending_here)\n        if i >= len(a) - size:\n            max_ending_here -= a[i - len(a) + size]\n\n    return max_so_far"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = a[0]\n    current_sum = a[0]\n    \n    for i in range(1, size):\n        current_sum = max(a[i], current_sum + a[i])\n        max_sum = max(max_sum, current_sum)\n        \n    return max_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    current_sum = 0\n    max_sum = float('-inf')\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    current_sum = 0\n    max_sum = float('-inf')\n    for i in range(size):\n        current_sum += a[i]\n        max_sum = max(max_sum, current_sum)\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size > len(a):\n        return 0\n\n    max_sum = float('-inf')\n    current_sum = 0\n\n    for i in range(size):\n        current_sum += a[i]\n        max_sum = max(max_sum, current_sum)\n        if current_sum < 0:\n            current_sum = 0\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far = float('-inf')\n    max_ending_here = 0\n    for i in range(size):\n        max_ending_here += a[i]\n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n        if i > 0 and max_ending_here < 0:\n            max_ending_here = 0\n    return max_so_far"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    curr_sum = 0\n    start = 0\n    for i in range(len(a)):\n        curr_sum += a[i]\n        if i >= size - 1:\n            if curr_sum > max_sum:\n                max_sum = curr_sum\n            curr_sum -= a[start]\n            start += 1\n    return max_sum"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # Create a set to store unique elements from both tuples\n    unique_elements = set(test_tup1 + test_tup2)\n\n    # Sort the unique elements in ascending order\n    sorted_unique_elements = sorted(unique_elements)\n\n    # Output the sorted unique elements\n    print(sorted_unique_elements)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Create a set to store the union of the two tuples\n    union_set = set(test_tup1 + test_tup2)\n    \n    # Convert the set back to a tuple and sort it\n    union_tuple = tuple(sorted(union_set))\n    \n    # Print the union of the two tuples\n    print(union_tuple)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Union of the two tuples\n    union = test_tup1 + test_tup2\n\n    # Remove duplicate elements and sort the union in ascending order\n    unique_union = sorted(list(set(union)))\n\n    return unique_union"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # find the union of the two tuples\n    union_set = set(test_tup1) | set(test_tup2)\n    \n    # convert the set to a list and sort it\n    sorted_union = sorted(union_set)\n    \n    # output the sorted union\n    print(sorted_union)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Using set to find the union of the two tuples and convert it to a list\n    union_list = sorted(list(set(test_tup1) | set(test_tup2)))\n\n    # Using list comprehension to find the elements that are not in both tuples\n    diff_list = [x for x in test_tup1 if x not in test_tup2] + [x for x in test_tup2 if x not in test_tup1]\n\n    # Printing the union list and the list of elements that are not in both tuples\n    print(\"Union of the elements in sorted order:\", union_list)\n    print(\"Elements that are not in both tuples:\", diff_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_set = set(test_tup1) | set(test_tup2)\n    sorted_union = sorted(list(union_set))\n    print(sorted_union)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union = test_tup1 + test_tup2\n    union_sorted = sorted(union)\n    return union_sorted\n"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # find the union of the two tuples\n    union = test_tup1 + test_tup2\n    \n    # remove duplicates from the union\n    unique_union = list(set(union))\n    \n    # sort the unique union in ascending order\n    unique_union.sort()\n    \n    # print the unique union\n    print(unique_union)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # Get the union of the two lists using set()\n    union_set = set(test_tup1) | set(test_tup2)\n\n    # Convert the set back to a list and sort it\n    union_list = sorted(list(union_set))\n\n    # Print the union list\n    print(union_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Combine the two tuples into a single tuple\n    combined_tup = test_tup1 + test_tup2\n\n    # Find the unique elements in the combined tuple\n    unique_tup = tuple(set(combined_tup))\n\n    # Sort the unique elements in ascending order\n    sorted_tup = sorted(unique_tup)\n\n    # Output the sorted unique elements\n    print(sorted_tup)"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            if lst[j] > lst[i]:\n                max_length = max(max_length, j - i + 1)\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    longest_sublist = [0] * len(lst[0])\n\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if longest_sublist[j] < lst[i][j]:\n                longest_sublist[j] = lst[i][j]\n\n    return max(longest_sublist)"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0  # initializing the variable to keep track of the maximum length of the sublists\n    curr_len = 0  # initializing the variable to keep track of the length of the current sublist\n\n    for i in lst:\n        curr_len += 1  # incrementing the length of the current sublist\n\n        # checking if the length of the current sublist exceeds the maximum length\n        if curr_len > max_len:\n            max_len = curr_len\n\n        # resetting the length of the current sublist\n        if i in lst[curr_len:]:\n            curr_len = 0\n\n    # returning the maximum length of the sublists\n    return max_len"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    # initialize variables\n    length = 0\n    max_length = 0\n    sublists = []\n\n    # iterate through list of sublists\n    for i in range(len(lst)):\n        # initialize variables for each sublist\n        current_length = 0\n        current_sublist = []\n\n        # iterate through list of elements in sublist\n        for j in range(i, len(lst)):\n            # add element to sublist\n            current_sublist.append(lst[j])\n            # increment current length\n            current_length += 1\n            # check if current sublist is longer than previous longest\n            if current_length > max_length:\n                max_length = current_length\n                length = current_length\n\n    return length\n"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the longest sublists.\n    \"\"\"\n    max_length = 0\n    current_length = 0\n    sublists = []\n    for i in range(len(lst)):\n        if lst[i] == \"(\":\n            sublists.append(i)\n            current_length = 0\n        else:\n            current_length += 1\n            if current_length > max_length:\n                max_length = current_length\n            if current_length > 1 and lst[i-1] == \")\":\n                sublists.pop()\n                current_length = 0\n            elif i == len(lst)-1:\n                current_length = 0\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0  \n    for i in range(len(lst)):  \n        for j in range(i+1, len(lst)+1):  \n            sublist = lst[i:j]  \n            if len(sublist) > max_len:  \n                max_len = len(sublist)  \n    return max_len  "
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n\n    # Initialize maximum length to zero\n    max_length = 0\n\n    # Loop through each sublist in the list\n    for i in range(len(lst)):\n\n        # Initialize length of current sublist to zero\n        length = 0\n\n        # Loop through each element in the sublist\n        for j in range(i, len(lst)):\n\n            # If the element is not None, add one to the length\n            if lst[j] is not None:\n                length += 1\n\n            # If the length of the current sublist is greater than the maximum length, update it\n            if length > max_length:\n                max_length = length\n\n    # Return the maximum length of any sublist\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n\n    max_len = 0\n    curr_len = 0\n\n    for i in range(len(lst)):\n        curr_len += 1\n        if i < len(lst) - 1 and lst[i] == lst[i+1]:\n            curr_len -= 1\n        if curr_len > max_len:\n            max_len = curr_len\n\n    return max_len"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n\n    max_len = 0\n    curr_len = 0\n\n    for i in range(len(lst)):\n        if i == 0 or lst[i]!= lst[i-1]:\n            curr_len = 1\n            for j in range(i+1, len(lst)):\n                if lst[j] == lst[i]:\n                    curr_len += 1\n                else:\n                    break\n            if curr_len > max_len:\n                max_len = curr_len\n\n    return max_len"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        sublist = lst[i:]\n        if max_length < len(sublist):\n            max_length = len(sublist)\n    return max_length"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    values = re.findall(pattern, text)\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    This function takes a string as input and returns a list of all values between quotation marks.\n    '''\n    pattern = r'\"([^\"]+)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    This function will extract values between quotation marks from a string.\n    '''\n\n    # Define a regular expression pattern to match values between quotation marks\n    pattern = r'(?<!\\\\)\"[^\"]*\"'\n\n    # Use the pattern to find all matches in the text\n    matches = re.findall(pattern, text)\n\n    # Return the list of extracted values\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # define the regular expression pattern for extracting values\n    pattern = r'\"([^\"]*)\"'\n    # use the regular expression to find all occurrences of the pattern in the string\n    matches = re.findall(pattern, text)\n    # return a list of all values between quotation marks\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    This function takes a string as input and returns a list of values found between quotation marks.\n    '''\n    # Define a regular expression pattern to match quotation marks\n    pattern = r'(?<=\")(.*?)(?=\")'\n    # Use the re.findall() method to extract all values between quotation marks\n    values = re.findall(pattern, text)\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    This function takes a string as input and extracts values between quotation marks.\n    '''\n    pattern = r'\"[^\"]+\"|\\d+'\n    values = re.findall(pattern, text)\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'\"(.*?)\"'\n    return re.findall(pattern, text)"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"([^\"]*)\"'  # pattern to match quoted values\n    values = re.findall(pattern, text)  # extract all values using the pattern\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    This function extracts values between quotation marks from a string.\n    '''\n    pattern = r'\"(.*?)\"'\n    return re.findall(pattern, text)"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Pairs(arr,n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    This function takes a list of integers and returns the count of possible unordered pairs where both elements are unequal.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    # initialize count to 0\n    count = 0\n    # iterate through the list\n    for i in range(n):\n        # iterate through the list again starting from index i+1\n        for j in range(i+1, n):\n            # if both elements are not equal, increment the count by 1\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Pairs(arr, n):\n    '''\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Pairs(arr, n): \n    count = 0\n    for i in range(n): \n        for j in range(i+1, n): \n            count += arr[i]*arr[j]\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split(word):\n    \"\"\"\n    Write a python function to split a string into characters.\n    \"\"\"\n    result = []\n    for char in word:\n        result.append(char)\n    return result"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split(word):\n    \"\"\"\n    Write a python function to split a string into characters.\n\n    Parameters:\n    word (str): The string to be split into characters.\n\n    Returns:\n    list: A list of characters from the input string.\n    \"\"\"\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    # split the string into a list of characters\n    char_list = list(word)\n    # print the list of characters\n    print(char_list)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    sum = 0\n    while n > 0:\n        digit = n % 10\n        sum += digit\n        n //= 10\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum(int(digit) for digit in str(n))"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Get the digits of the number\n    digits = [int(digit) for digit in str(n)]\n    # Initialize a variable to store the sum of digits\n    total_sum = 0\n    # Iterate through the digits and add them to the total sum\n    for digit in digits:\n        total_sum += digit\n    # Return the total sum\n    return total_sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Convert the integer to a string\n    digits_str = str(n)\n    # Initialize a variable to hold the sum of digits\n    total = 0\n    # Loop through the digits of the string and add them to the total\n    for digit in digits_str:\n        total += int(digit)\n    # Return the total sum of digits\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n > 0:\n        digit = n % 10\n        sum += digit\n        n //= 10\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    while n > 0:\n        sum = sum + n % 10\n        n = n // 10\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n //= 10\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Initialize the sum to zero\n    total = 0\n    \n    # Loop through each digit of the number\n    while n > 0:\n        # Extract the last digit of the number\n        digit = n % 10\n        \n        # Add the digit to the total\n        total += digit\n        \n        # Remove the last digit of the number\n        n = n // 10\n    \n    # Return the total sum of digits\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Initialize the sum to zero\n    total = 0\n    # Convert the integer to a string\n    num_str = str(n)\n    # Iterate through each digit in the string\n    for digit in num_str:\n        # Convert the digit to an integer and add it to the sum\n        total += int(digit)\n    # Return the sum\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Convert the input number to a string\n    num_str = str(n)\n    # Initialize a variable to store the sum of the digits\n    sum = 0\n    # Loop through each digit in the string\n    for digit in num_str:\n        # Convert the current digit to an integer and add it to the sum\n        sum += int(digit)\n    # Return the sum of the digits\n    return sum"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Check whether a list is sorted or not.\n\n    Args:\n        list1 (list): A list of integers.\n\n    Returns:\n        bool: True if the list is sorted, False otherwise.\n    \"\"\"\n\n    # Check if the list is empty\n    if len(list1) <= 1:\n        return True\n\n    # Check if the first element is smaller than the second one\n    if list1[0] > list1[1]:\n        return False\n\n    # Recursively check the remaining elements\n    for i in range(2, len(list1)):\n        if list1[i] < list1[i-1]:\n            return False\n\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    n = len(list1)\n    for i in range(1, n):\n        if list1[i] < list1[i-1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def issort_list(lst):\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n    \"\"\"\n    if len(lst) <= 1:\n        return True\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) <= 1:\n        return True\n    \n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    \n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n    \"\"\"\n    n = len(list1)\n    for i in range(n-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n\n    # Check if the list is empty\n    if len(list1) == 0:\n        return True\n\n    # Check if the list has only one element\n    elif len(list1) == 1:\n        return True\n\n    # Check if the list is sorted in ascending order\n    else:\n        if list1[0] < list1[1]:\n            for i in range(1, len(list1)-1):\n                if list1[i] < list1[i-1] or list1[i] > list1[i+1]:\n                    return False\n            return True\n        else:\n            return False"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def issort_list(lst):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    # iterate over the list and check if each element is smaller than the next one\n    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n    \"\"\"\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{}] * length"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_list(length):\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{}] * length"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Iterate through each sublist in the list of lists\n    for sublist in list1:\n        # Sort the sublist in ascending order\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            list1[i][j] = sorted(list1[i][j])\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            list1[i][j] = sorted(list1[i][j])\n    return list1"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    # Use a set to keep track of unique numbers\n    unique_nums = set()\n    for num in nums:\n        # Convert the number to a string and add it to the set\n        unique_nums.add(str(num))\n    # Convert the set back to a list\n    unique_nums = list(unique_nums)\n    # Return the list of unique numbers\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Remove duplicate numbers from a given number of lists.\n    \"\"\"\n    # Create a set to store unique elements\n    unique_nums = set()\n\n    # Iterate over the lists of numbers and add unique elements to the set\n    for num_list in nums:\n        for num in num_list:\n            if num not in unique_nums:\n                unique_nums.add(num)\n\n    # Convert the set back to a list and return it\n    return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n\n    # create a set to remove duplicates\n    unique_nums = set()\n\n    # loop through each list in the input list and add the unique numbers to the set\n    for lst in nums:\n        for num in lst:\n            unique_nums.add(num)\n\n    # convert the set back to a list and return it\n    return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    # convert the lists into sets to remove duplicates\n    unique_nums = set([num for sublist in nums for num in sublist])\n    return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    if len(unique_nums) == 2:\n        return unique_nums[0], unique_nums[1]\n    else:\n        return None"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Remove duplicate numbers from a given list of numbers.\n    \"\"\"\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num_list in nums:\n        for num in num_list:\n            if num not in unique_nums:\n                unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    num_set = set()\n    result = []\n    \n    for num in nums:\n        if num not in num_set:\n            num_set.add(num)\n            result.append(num)\n    \n    return result"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    unique_nums = set()\n    result = []\n\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.add(num)\n            result.append(num)\n\n    return result"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    unique_numbers = list(set(list_data)) # Remove duplicates\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    unique_numbers = set(list_data)\n    product = 1\n\n    for number in unique_numbers:\n        product *= number\n\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    unique_nums = set(list_data)\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = set(list_data) # Convert the list to a set to remove duplicates\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_nums = []\n    for num in list_data:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    # Create a set of the unique numbers in the list\n    unique_numbers = set(list_data)\n\n    # Calculate the product of the unique numbers\n    product = 1\n    for number in unique_numbers:\n        product *= number\n\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list = []\n    for num in list_data:\n        if num not in unique_list:\n            unique_list.append(num)\n    \n    product = 1\n    for num in unique_list:\n        product *= num\n    \n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    # Remove duplicates from the list\n    unique_list = list(set(list_data))\n    # Calculate the product of the unique numbers\n    product = 1\n    for num in unique_list:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list = list(set(list_data))\n    product = 1\n    for num in unique_list:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    unique_numbers = []\n    for num in list_data:\n        if num not in unique_numbers:\n            unique_numbers.append(num)\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = 2 * 3.14 * r * r\n    return area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * math.pi * r * h"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Formula for surface area of a cylinder\n    surface_area = 2*pi*r**2 + 2*pi*h + 2*pi*(r**2 + h)\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Formula for surface area of a cylinder\n    # surface area = 2 * pi * r * h\n    return 2 * 3.14159 * r * h"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = 2 * pi * r * h\n    print(\"The surface area of the cylinder is\", surface_area)"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * 3.14159 * r**2 + 2 * 3.14159 * h * r + 2 * 3.14159 * h**2"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Finding the semi-perimeter of the cylinder\n    S = 2 * r * h\n    \n    # Calculating the surface area of the cylinder\n    A = 2 * r * h * 3.14\n    \n    # Returning the surface area of the cylinder\n    return A"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Formula for surface area of a cylinder\n    surface_area = 2 * 3.14 * r * h\n    \n    # Return the surface area of the cylinder\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = 2 * 3.14 * r**2 + 2 * 3.14 * r * h + 2 * 3.14 * h**2\n    return area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    \"\"\"\n    Write a function to find the surface area of a cylinder.\n\n    Args:\n        r (float): radius of the cylinder.\n        h (float): height of the cylinder.\n\n    Returns:\n        float: the surface area of the cylinder.\n    \"\"\"\n    return 2*math.pi*(r**2 + h**2)"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n\n    # Convert the lists to sets to remove duplicates\n    A = set(A)\n    B = set(B)\n\n    # Check if all elements in B are in A\n    for b in B:\n        if b not in A:\n            return False\n\n    return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sub_Array(A,B):\n    # check if B is a sublist of A\n    if B in A:\n        return True\n    else:\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if not A or not B:\n        return False\n\n    i=0\n    j=0\n    k=0\n    n=len(A)\n    m=len(B)\n\n    while j<n:\n        if A[j]==B[k]:\n            k+=1\n            if k==m:\n                return True\n        else:\n            k=0\n        j+=1\n\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n\n    # Check if B is a sublist of A\n    if len(B) <= len(A): \n        for i in range(len(B)): \n            if B[i] in A and B[i] == A[i]: \n                A.remove(B[i]) \n        if len(A) == 0: \n            return True\n        else: \n            return False\n    else: \n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sub_Array(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(B) > len(A):\n        return False\n    for i in range(len(A)-len(B)+1):\n        if A[i:i+len(B)] == B:\n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(B) > len(A): \n        return False \n    for i in range(len(A)): \n        if B[0] == A[i]: \n            if len(B) == 1: \n                return True \n            elif B[1:] == A[i+1:]: \n                return True \n            else: \n                return is_Sub_Array(A[i+1:],B[1:]) \n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B):\n    # Check if the length of A is greater than B\n    if len(A) > len(B):\n        return False\n    \n    # Initialize two pointers, one at the beginning of A and another at the beginning of B\n    i = 0\n    j = 0\n    \n    # Loop through A until the two pointers meet\n    while i < len(A):\n        if A[i] == B[j]:\n            i += 1\n            j += 1\n        else:\n            j = 0\n        \n        # If the pointers meet, the A list is a sublist of B\n        if j == len(B):\n            return True\n    \n    # If the loop completes without finding a match, the A list is not a sublist of B\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sub_Array(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    # check if both lists are empty\n    if not A and not B:\n        return True\n    # check if length of A is greater than length of B\n    elif len(A) > len(B):\n        return False\n    # check if B is a sublist of A\n    else:\n        for i in range(len(A)):\n            if A[i] in B:\n                return True\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) > len(B): \n        return False\n    for i in range(len(B)): \n        if A[i] in B: \n            for j in range(i,len(B)): \n                if A[j] == B[j]: \n                    if j == len(B)-1: \n                        return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sub_Array(A, B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n\n    if len(A) > len(B):\n        return False\n\n    for i in range(len(A)):\n        if A[i] not in B:\n            return False\n\n    return True"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    return int(factorial % 10)"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n\n    # convert the input number to string\n    num_str = str(n)\n\n    # find the last digit of the factorial\n    last_digit = int(num_str[-1])\n\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    This function takes a number as input and returns the last digit of its factorial.\n    '''\n    if n < 0: \n        return -1 \n    else: \n        factorial = 1\n        while n > 0: \n            factorial *= n \n            n -= 1 \n        return factorial % 10"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Initialize variable to store the last digit of the factorial\n    last_digit = 0\n    # Initialize variable to store the current factorial\n    factorial = 1\n    # Loop through each digit in the number\n    for i in range(len(str(n))):\n        # Multiply the factorial by the current digit value\n        factorial *= int(str(n)[i])\n        # Append the last digit of the factorial to the list\n        last_digit = int(str(factorial)[-1])\n    # Return the last digit of the factorial\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    Write a python function to find the last digit in factorial of a given number.\n    \"\"\"\n    # Initialize a variable to store the factorial\n    factorial = 1\n    \n    # Loop through the numbers from 1 to n (inclusive)\n    for i in range(1, n+1):\n        # Multiply the factorial by i\n        factorial *= i\n    \n    # Calculate the last digit of the factorial\n    last_digit = factorial % 10\n    \n    # Return the last digit\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    This function takes a number as input and returns the last digit of the factorial of that number.\n    '''\n    # Check if the input is a positive integer\n    if not isinstance(n, int) or n < 0:\n        return \"Invalid input. Please enter a positive integer.\"\n    \n    # Find the factorial of the input number\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    \n    # Extract the last digit of the factorial\n    last_digit = int(factorial % 10)\n    \n    # Return the last digit\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    This function takes a positive integer as input and returns the last digit in its factorial.\n    '''\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    \n    return factorial % 10"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    num = n\n    while num > 0:\n        factorial *= num\n        num //= 10\n    last_digit = factorial % 10\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    while n > 0:\n        factorial = factorial*n\n        n = n - 1\n    last_digit = factorial % 10\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n): \n    \"\"\"\n    Write a python function to find the last digit in factorial of a given number.\n    \"\"\"\n    num = 0\n    while n > 0: \n        num += n % 10\n        n //= 10\n    return num "
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n\n    Parameters:\n        list1: list\n            A list of integers.\n        list2: list\n            A list of integers.\n        list3: list\n            A list of integers.\n\n    Returns:\n        list: A flat list of integers, interleaved with the input lists.\n\n    Example:\n        >>> interleave_lists([1,2], [3,4], [5,6,7])\n        [1, 3, 2, 4, 5, 6, 7]\n    \"\"\"\n    # Initialize an empty list to store the interleaved list.\n    interleaved_list = []\n\n    # Iterate through each list and add its elements to the interleaved list in the correct order.\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Check if all lists have the same length\n    if len(list1)!= len(list2)!= len(list3):\n        return None\n    # Create a new empty list to store the interleaved list\n    interleaved = []\n    # Loop through each element in the first list\n    for i in range(len(list1)):\n        # Append the first element of each list to the interleaved list\n        interleaved.append(list1[i])\n        # Append the second element of the third list to the interleaved list\n        interleaved.append(list3[i])\n        # Append the third element of the second list to the interleaved list\n        interleaved.append(list2[i])\n    return interleaved"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    result = []\n    i = 0\n    j = 0\n    k = 0\n\n    while i < len(list1) and j < len(list2) and k < len(list3):\n        result.append(list1[i])\n        result.append(list2[j])\n        result.append(list3[k])\n        i += 1\n        j += 1\n        k += 1\n\n    while i < len(list1) and j < len(list2):\n        result.append(list1[i])\n        result.append(list2[j])\n        i += 1\n        j += 1\n\n    while i < len(list1) and k < len(list3):\n        result.append(list1[i])\n        result.append(list3[k])\n        i += 1\n        k += 1\n\n    while j < len(list2) and k < len(list3):\n        result.append(list2[j])\n        result.append(list3[k])\n        j += 1\n        k += 1\n\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # find the length of the lists\n    length = len(list1)\n    # create a new empty list to store the interleaved list\n    interleaved_list = []\n    # loop through the first list, adding each element to the new list\n    for item in list1:\n        interleaved_list.append(item)\n    # loop through the second list, adding each element to the new list\n    for item in list2:\n        interleaved_list.append(item)\n    # loop through the third list, adding each element to the new list\n    for item in list3:\n        interleaved_list.append(item)\n    # return the interleaved list\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # initialize an empty list to store the interleaved list\n    interleaved_list = []\n    # loop through each element in the first list\n    for i in range(len(list1)):\n        # add the element from the first list to the interleaved list\n        interleaved_list.append(list1[i])\n        # add the element from the second list to the interleaved list\n        interleaved_list.append(list2[i])\n        # add the element from the third list to the interleaved list\n        interleaved_list.append(list3[i])\n    # return the interleaved list\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Get the lengths of the input lists\n    len1 = len(list1)\n    len2 = len(list2)\n    len3 = len(list3)\n    # Calculate the total length of the output list\n    total_len = len1 + len2 + len3\n    # Initialize an empty list to store the output\n    output = []\n    # Iterate over the input lists and append the elements to the output list\n    for i in range(len1):\n        output.append(list1[i])\n    for j in range(len2):\n        output.append(list2[j])\n    for k in range(len3):\n        output.append(list3[k])\n    # Return the flattened output list\n    return output"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n\n    Args:\n    list1 (list): A list of integers.\n    list2 (list): A list of integers.\n    list3 (list): A list of integers.\n\n    Returns:\n    list: A single flat list of integers that is the interleaved combination of the input lists.\n\n    Raises:\n    ValueError: If the input lists have different lengths.\n    \"\"\"\n\n    # Check if all input lists have the same length\n    if len(list1)!= len(list2) or len(list2)!= len(list3):\n        raise ValueError(\"All input lists must have the same length.\")\n\n    # Initialize an empty list to store the interleaved list\n    interleaved_list = []\n\n    # Iterate over each element of the input lists\n    for i in range(len(list1)):\n        # Append the i-th element of list1, list2, and list3 to the interleaved list\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    if len(list1)!= len(list2) or len(list1)!= len(list3):\n        return \"Lists must have the same length.\"\n    \n    flat_list = []\n    for i in range(len(list1)):\n        flat_list.append(list1[i])\n        flat_list.append(list2[i])\n        flat_list.append(list3[i])\n    return flat_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    result = []\n    index1 = 0\n    index2 = 0\n    index3 = 0\n    while index1 < len(list1) and index2 < len(list2) and index3 < len(list3):\n        result.append(list1[index1])\n        result.append(list2[index2])\n        result.append(list3[index3])\n        index1 += 1\n        index2 += 1\n        index3 += 1\n    return result"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the dissimilar elements in the given two tuples.\n    \"\"\"\n\n    # Create a set of all elements in both tuples\n    all_elements = set(test_tup1).union(set(test_tup2))\n\n    # Create a set of all elements in only one of the tuples\n    diff_elements = set(test_tup1).symmetric_difference(set(test_tup2))\n\n    # Find the dissimilar elements in the two sets\n    dissimilar_elements = all_elements.difference(diff_elements)\n\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Initialize empty lists to store dissimilar elements\n    dissimilar_list1 = []\n    dissimilar_list2 = []\n    \n    # Iterate through the elements of each tuple and compare them\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list1.append(test_tup1[i])\n            dissimilar_list2.append(test_tup2[i])\n            \n    # Print the dissimilar elements\n    print(\"Dissimilar elements in the first tuple: \", dissimilar_list1)\n    print(\"Dissimilar elements in the second tuple: \", dissimilar_list2)"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the dissimilar elements in the given two tuples.\n    \"\"\"\n    dissimilar_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Find the dissimilar elements in the given two tuples.\n    \"\"\"\n    dissimilar = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar.append(test_tup1[i])\n    return dissimilar"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples as input and returns a list of all the elements in test_tup1 that are not present in test_tup2.\n    \"\"\"\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    return list(set1.difference(set2))"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Create a set of the elements in both tuples\n    combined_set = set(test_tup1 + test_tup2)\n\n    # Create a dictionary to store the count of each element in each tuple\n    count_dict = {}\n    for tup in [test_tup1, test_tup2]:\n        for elem in tup:\n            if elem in count_dict:\n                count_dict[elem] += 1\n            else:\n                count_dict[elem] = 1\n\n    # Create a set of the elements in the combined set that are not in the count dictionary\n    dissimilar_set = combined_set - set(count_dict.keys())\n\n    # Return the dissimilar set as a list\n    return list(dissimilar_set)"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar.append(test_tup1[i])\n    return dissimilar"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # initialize an empty set to store dissimilar elements\n    dissimilar_set = set()\n    # loop through each element in the first tuple\n    for element in test_tup1:\n        # check if the element is in the second tuple\n        if element not in test_tup2:\n            # add the element to the dissimilar set\n            dissimilar_set.add(element)\n    # return the dissimilar set\n    return dissimilar_set"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    common_elements = set(test_tup1) & set(test_tup2)\n    dissimilar_elements = set(test_tup1) - set(test_tup2) - common_elements\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = []\n    for item in test_tup1:\n        if item not in test_tup2:\n            dissimilar.append(item)\n    return dissimilar"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n\n    # Initialize a new empty list to store the even elements\n    even_list = []\n\n    # Iterate over each element in the nested tuple\n    for element in test_tuple:\n        # Check if the element is even using the function even_fnc\n        if even_fnc(element):\n            # If the element is even, append it to the even_list\n            even_list.append(element)\n\n    # Return the even_list as the final output\n    return even_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for item in test_tuple:\n        if isinstance(item, (tuple, list)):\n            result.append(even_ele(item, even_fnc))\n        elif even_fnc(item):\n            result.append(item)\n    return result"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for i in test_tuple:\n        if type(i) == tuple:\n            new_tuple.extend(even_ele(i, even_fnc))\n        elif even_fnc(i):\n            new_tuple.append(i)\n    return new_tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            new_tuple.append(even_fnc(item))\n        elif isinstance(item, list):\n            new_tuple.append([even_fnc(subitem) for subitem in item])\n        else:\n            new_tuple.append(item)\n    return new_tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    def is_even(num):\n        '''\n        Helper function to check if a number is even.\n        '''\n        if num % 2 == 0:\n            return True\n        else:\n            return False\n\n    def remove_uneven(lst):\n        '''\n        Helper function to remove all uneven elements from the given list.\n        '''\n        return [x for x in lst if is_even(x)]\n\n    nested_tuple = test_tuple\n    uneven_list = remove_uneven(nested_tuple)\n    result_tuple = tuple(uneven_list)\n    return result_tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc):\n    \"\"\"\n    Write a function to remove uneven elements in the nested mixed tuple.\n    \"\"\"\n    odd_elements = []\n    even_elements = []\n    for element in test_tuple:\n        if even_fnc(element):\n            even_elements.append(element)\n        else:\n            odd_elements.append(element)\n    return odd_elements + even_elements"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    for i in range(len(test_tuple)):\n        if isinstance(test_tuple[i], tuple):\n            even_ele(test_tuple[i], even_fnc)\n        else:\n            if even_fnc(test_tuple[i]):\n                if isinstance(test_tuple[i], list):\n                    test_tuple[i] = [x for x in test_tuple[i] if even_fnc(x)]\n                else:\n                    test_tuple[i] = even_fnc(test_tuple[i])\n    return test_tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            result.extend(even_ele(item, even_fnc))\n        elif isinstance(item, list):\n            result.extend([x for x in item if even_fnc(x)])\n        else:\n            if even_fnc(item):\n                result.append(item)\n    return result"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc):\n    \"\"\"\n    Write a function to remove uneven elements in the nested mixed tuple.\n    \"\"\"\n    # Create an empty list to store even elements\n    even_list = []\n    # Loop through each element in the tuple\n    for elem in test_tuple:\n        # If the element is even, append it to the even_list\n        if even_fnc(elem):\n            even_list.append(elem)\n    # Return the even_list\n    return even_list\n\ndef is_even(num):\n    \"\"\"\n    Define a function to check if a number is even.\n    \"\"\"\n    return num % 2 == 0"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc):\n    \"\"\"\n    Write a function to remove uneven elements in the nested mixed tuple.\n    \"\"\"\n    new_tuple = []\n    for item in test_tuple:\n        if even_fnc(item):\n            new_tuple.append(item)\n    return new_tuple"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surface_Area(b,s):\n    \"\"\"\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    \"\"\"\n    # calculate the area of the base\n    area_base = b*b\n    # calculate the area of the side of the pyramid\n    area_side = b*s\n    # calculate the area of the top of the pyramid\n    area_top = (b+s)*s/2\n    # calculate the total surface area of the pyramid\n    surface_area = area_base + area_side + area_top\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 6*b*s"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    surface = 4*b*s + 6*b*b + 2*s*s\n    return surface"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (b*s + b*s + b*s) / 2"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Find the base area\n    base_area = b*s\n    \n    # Find the height\n    height = s/2\n    \n    # Calculate the surface area of the pyramid\n    surface_area = 6*(base_area + (base_area*height))\n    \n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (b*s)**2"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = b * s * 3 # formula for surface area of a square pyramid\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surface_Area(b, s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 2 * b * s + 6 * b * b + 2 * b * b + 6 * s * s + 2 * s * s"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (b * s) + (b * s) + (b * s) + (s * b * s) + (s * b * s) + (s * b * s)\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = 2*(b*s) + 6*s + 6*b\n    print(\"The surface area of the square pyramid is:\", area)"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    if len(dict1) == 0:\n        print(\"The dictionary is empty\")\n    else:\n        print(\"The dictionary is not empty\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    \"\"\"\n    Write a function to check if a dictionary is empty\n    \"\"\"\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not any(dict1.values()):\n        print(\"The dictionary is empty\")\n    else:\n        print(\"The dictionary is not empty\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        print(\"The dictionary is empty.\")\n    else:\n        print(\"The dictionary is not empty.\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        print(\"The dictionary is empty\")\n    else:\n        print(\"The dictionary is not empty\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    if not dict1:\n        print(\"The dictionary is empty.\")\n    else:\n        print(\"The dictionary is not empty.\")"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def catalan_number(num):\n    \"\"\"\n    Write a function which returns nth catalan number.\n    \"\"\"\n    catalan = 1\n    for i in range(1, num+1):\n        catalan = catalan * (num - i + 1) / i\n    return catalan\n"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def catalan_number(num):\n    '''\n    This function calculates nth catalan number using recursion.\n    '''\n    if num == 1:\n        return 1\n    elif num == 2:\n        return 1\n    else:\n        return catalan_number(num-1) + catalan_number(num-2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Write a function which returns the nth Catalan number.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return catalan_number(n-1) + catalan_number(n-2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def catalan_number(n):\n    \"\"\"\n    This function returns the nth Catalan number using the formula:\n\n    C(n,k) = binomial(2n,n-k) / (1-1/k^2)\n              = binomial(2n,n-k) * factorial(n-k) / (k*factorial(k))\n\n    This implementation uses the math module to perform the calculations.\n    \"\"\"\n    import math\n\n    def binomial(n, k):\n        \"\"\"\n        Returns the binomial coefficient using the formula:\n\n        binomial(n,k) = n! / (k! * (n-k)!)\n\n        This implementation uses the math module to perform the calculations.\n        \"\"\"\n        return math.factorial(n) // (math.factorial(k) * math.factorial(n - k))\n\n    def factorial(n):\n        \"\"\"\n        Returns the factorial of n using the formula:\n\n        factorial(n) = n * (n-1) * (n-2) *... * 2 * 1\n\n        This implementation uses the math module to perform the calculations.\n        \"\"\"\n        return math.factorial(n)\n\n    return binomial(2*n, n) / (1 - 1/factorial(n)**2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def catalan_number(n):\n    '''\n    This function returns the nth Catalan number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return 2 * catalan_number(n-1) + catalan_number(n-2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number using dynamic programming.\n\n    Args:\n    n (int): the index of the Catalan number to calculate.\n\n    Returns:\n    int: the nth Catalan number.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return (2 * catalan_number(n//2)) // (n+1)\n    else:\n        return (4 * catalan_number(n//2)) // (n+1)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    n = num\n    catalan = 1\n    for i in range(1, n + 1):\n        catalan = (2 * (n - i + 1)) / (i * (i + 1))\n        catalan = catalan * catalan\n    return catalan\n"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns nth Catalan number.\n    \"\"\"\n    n_choose_r = 1\n    for i in range(1, n+1):\n        n_choose_r *= i\n        n_choose_r //= i + 1\n    return n_choose_r"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the n-th Catalan number using a recursive formula.\n    \"\"\"\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return catalan_number(n-1) * (4*n-2) // (n+1)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    else:\n        return catalan_number(num - 1) * (2 * num + 1) // (num + 1)"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\bly\\b'\n    matches = re.findall(pattern, text)\n    for match in matches:\n        adverb = match\n        index = text.index(match)\n        print(f\"Adverb found at index {index}: {adverb}\")\n\ntext = \"Here is a sentence with a good adverb ending with ly, but also a bad one ending with 10ly.\"\nfind_adverbs(text)"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define the regex pattern to match adverbs\n    pattern = r'\\b(\\w+ly)\\b'\n    # Use the re.findall() method to find all matches of the pattern in the text\n    matches = re.findall(pattern, text)\n    # Loop through each match and return the position of the first adverb ending with ly\n    for match in matches:\n        return matches.index(match)"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define the regular expression pattern to match adverbs ending with \"ly\"\n    pattern = r'\\b(\\w+ly)\\b'\n\n    # Use the re.findall() method to find all the occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n\n    # Initialize an empty list to store the adverb positions and their corresponding word lengths\n    positions = []\n\n    # Loop through the matches and extract the positions and their corresponding word lengths\n    for match in matches:\n        # Extract the position and word length of the match\n        pos = text.find(match)\n        length = len(match)\n\n        # Append the position and word length to the positions list\n        positions.append((pos, length))\n\n    # Sort the positions list based on their word lengths in descending order\n    positions.sort(key=lambda x: x[1], reverse=True)\n\n    # Return the positions list\n    return positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define a regular expression pattern for finding adverbs ending with \"ly\"\n    pattern = r'\\b[a-z]*ly\\b'\n\n    # Use the re.findall() method to find all occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n\n    # Iterate over the matches and print the adverb and its positions in the text\n    for match in matches:\n        # Split the match at the \"ly\" ending and store the first part in a variable\n        adverb = match.split('ly')[0]\n        # Find the position of the adverb in the text\n        position = text.find(adverb)\n        # Print the adverb and its position\n        print(f\"{adverb} found at position {position}\")"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverbs(text):\n    # Find all occurrences of the adverb ending with ly\n    matches = re.findall(r'\\b(\\w*)ly\\b', text)\n\n    # Sort the matches by starting position in the text\n    sorted_matches = sorted(matches, key=lambda x: text.find(x))\n\n    # Iterate over the sorted matches and print each one with its starting position\n    for match in sorted_matches:\n        start_pos = text.find(match)\n        print(f'Adverb starting at position {start_pos}: {match}')"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # define regex pattern for finding adverbs ending with ly\n    pattern = r'\\b(ly|like|well)\\b'\n    # use regex.search() method to find the first match in the text\n    match = re.search(pattern, text)\n    if match:\n        # print the matched string and its position\n        print(match.group(), match.start())\n    else:\n        # print a message if no match is found\n        print(\"No adverbs found.\")"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define a regular expression pattern to match adverbs ending with ly\n    pattern = r'\\b(really|amazing|great|good|well|well done|amazed|good job|awsome|amazing)\\s*ly\\b'\n\n    # Use the re.findall() function to find all non-overlapping matches of the pattern in the text\n    matches = re.findall(pattern, text)\n\n    # Create a list of tuples containing the matched adverb and its starting position in the text\n    adverbs = [(match, text.find(match)) for match in matches]\n\n    return adverbs"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\bly\\b'\n    matches = re.findall(pattern, text)\n    adverbs = []\n\n    for match in matches:\n        start_pos = text.find(match)\n        end_pos = start_pos + len(match)\n        adverbs.append((match, start_pos, end_pos))\n\n    return adverbs"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverbs(text):\n    pattern = r'\\b\\w*ly\\b'\n    match = re.search(pattern, text)\n\n    if match:\n        pos = match.start()\n        end = match.end()\n        return pos, end\n    else:\n        return None, None"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverbs(text):\n    # Define the pattern to match adverbs ending with ly\n    pattern = r'\\b[a-zA-Z]+ly\\b'\n    \n    # Use the re.findall() function to find all the matches in the text\n    matches = re.findall(pattern, text)\n    \n    # Create a list to store the positions of the matches\n    positions = []\n    \n    # Loop over the matches and add their positions to the list\n    for match in matches:\n        positions.append(text.index(match))\n    \n    # Return the list of positions of the matches\n    return positions"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    This function takes a list of items and the number of items to be returned.\n    It returns the n most expensive items from the dataset.\n    '''\n\n    # Create a min heap to keep track of the items in decreasing order of price\n    heap = []\n\n    # Add the first n items to the heap\n    for item in items[:n]:\n        heapq.heappush(heap, (-item[1], item))\n\n    # Loop through the remaining items and add them to the heap if they are more expensive\n    for i in range(n, len(items)):\n        if items[i][1] < -heap[0][0]:\n            heapq.heappushpop(heap, (-items[i][1], items[i]))\n\n    # Return the items in decreasing order of price\n    return [item[1] for item in heap]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    # Use a max heap to keep track of the n most expensive items\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            # Pop the smallest item from the heap\n            heapq.heappop(heap)\n    # Return the n most expensive items in descending order\n    return sorted(heap, reverse=True)"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Find the n most expensive items in a given dataset.\n    '''\n\n    # Create a min-heap of size n to store the n most expensive items\n    min_heap = []\n\n    # Iterate through the dataset and add each item to the min-heap\n    for item in items:\n        heapq.heappush(min_heap, item)\n\n    # Get the n most expensive items from the min-heap\n    top_n = heapq.nsmallest(n, min_heap)\n\n    return top_n"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    max_heap = []\n    for item in items:\n        if len(max_heap) < n:\n            heapq.heappush(max_heap, item)\n        elif item > max_heap[0]:\n            heapq.heappop(max_heap)\n            heapq.heappush(max_heap, item)\n    return max_heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # create a min-heap of size n\n    heap = [float('inf')] * n\n    for item in items:\n        # update the heap\n        heapq.heappushpop(heap, item)\n        # return the n most expensive items\n        if len(heap) == n:\n            yield heapq.heappop(heap)"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Sort the items in descending order of their prices\n    sorted_items = sorted(items, key=lambda x: x[1], reverse=True)\n\n    # Extract the top n items from the sorted list\n    top_n_items = sorted_items[:n]\n\n    # Extract the top n prices from the sorted list\n    top_n_prices = [item[1] for item in top_n_items]\n\n    return top_n_prices"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n\n    heap = []\n\n    # Add the first n items to the heap\n    for item in items[:n]:\n        heapq.heappush(heap, item)\n\n    # Traverse the remaining items and update the heap\n    for item in items[n:]:\n        if item > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, item)\n\n    # Return the n most expensive items\n    return heap[:n]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # create a min heap of size n\n    min_heap = [0] * n\n    min_heap_size = 0\n    heapq.heapify(min_heap)\n\n    # iterate through the dataset and add each item to the heap\n    for item in items:\n        # if the heap is full, remove the smallest item\n        if min_heap_size == n:\n            heapq.heappop(min_heap)\n            min_heap_size -= 1\n\n        # add the item to the heap\n        heapq.heappush(min_heap,item)\n        min_heap_size += 1\n\n    # return the n most expensive items\n    return min_heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Given a list of items, find the n most expensive items.\n\n    Args:\n    items: a list of items to rank\n    n: the number of most expensive items to find\n\n    Returns:\n    A list of the n most expensive items\n    '''\n    # Use a min heap to keep track of the n most expensive items\n    min_heap = []\n    for item in items:\n        if len(min_heap) < n:\n            heapq.heappush(min_heap, item)\n        elif item < min_heap[0]:\n            # If the current item is cheaper than the smallest one in the heap, remove the smallest one\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, item)\n\n    # Return the list of n most expensive items in descending order\n    return [heapq.heappop(min_heap) for i in range(n)]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Given a list of items and an integer n, return a list of the n most expensive items in the list.\n    '''\n\n    # Initialize an empty heap to store the n most expensive items\n    heap = []\n\n    # Loop through the items in the list\n    for item in items:\n        # If the heap is empty or the current item is cheaper than the smallest item in the heap,\n        # add the current item to the heap and remove the smallest item from the heap if necessary\n        if not heap or item < heap[0]:\n            heapq.heappush(heap, item)\n            if len(heap) > n:\n                heapq.heappop(heap)\n        # If the current item is not as cheap as the smallest item in the heap,\n        # simply add the current item to the heap\n        else:\n            heapq.heappush(heap, item)\n\n    # Return the n most expensive items in the list\n    return heap"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # Split the list into two parts\n    part1 = l[:n]\n    part2 = l[n:]\n    # Add the first part to the end of the second part\n    l = part2 + part1\n    return l"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n > len(l):\n        return \"Invalid input.\"\n    else:\n        return l[n:] + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # Find the length of the original list\n    original_length = len(l)\n    \n    # If n is greater than the length of the list, return the original list\n    if n > original_length:\n        return l\n    \n    # If n is less than or equal to 0, return an empty list\n    elif n <= 0:\n        return []\n    \n    # Find the nth element\n    nth_element = l[n-1]\n    \n    # Split the list at the nth element and add the first part to the end\n    split_list = l[:n-1] + [nth_element] + l[n:]\n    \n    return split_list"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # Get the length of the list\n    length = len(l)\n    \n    # Check if the index is valid\n    if n >= length:\n        return \"Invalid index. Index must be less than the length of the list.\"\n    \n    # Split the list at the nth element and add the first part to the end\n    l.append(l[:n])\n    del l[:n+1]\n    \n    # Return the modified list\n    return l"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print(\"Original Array:\", arr)\n    mid = len(arr)//2\n    print(\"Middle Index:\", mid)\n    first_half = arr[:mid]\n    second_half = arr[mid:]\n    print(\"First Half:\", first_half)\n    print(\"Second Half:\", second_half)\n    new_arr = second_half + first_half\n    print(\"New Array:\", new_arr)\n    return new_arr"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n >= len(l):\n        return l\n    else:\n        return l[:n] + l[n:] + [l[n]]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    \"\"\"\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    \"\"\"\n    return l[-n:] + l[:-n]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # Check if n is a positive integer\n    if type(n)!= int or n <= 0:\n        return \"Error: n must be a positive integer.\"\n    \n    # Check if the list is empty\n    if len(l) == 0:\n        return \"Error: The list is empty.\"\n    \n    # Check if n is greater than the length of the list\n    if n > len(l):\n        return \"Error: n must be less than or equal to the length of the list.\"\n    \n    # Split the list at the nth eelment\n    l1 = l[:n]\n    l2 = l[n:]\n    \n    # Add the first part to the end of the second part of the list\n    l2.extend(l1)\n    \n    # Return the new list\n    return l2"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n >= len(l):\n        return l\n    else:\n        return l[n:] + [l[:n]]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    first_half = l[:n]\n    second_half = l[n:]\n    return first_half + second_half"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_tuple(lst):\n    '''\n    This function takes a list as an input and returns a tuple.\n    '''\n    return tuple(lst)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_tuple(lst):\n    \"\"\"\n    Write a function to convert a list to a tuple.\n    \"\"\"\n    return tuple(lst)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_tuple(lst):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(lst)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    \"\"\"\n    Write a function to convert a list to a tuple.\n    \"\"\"\n    # create an empty tuple\n    new_tuple = ()\n    # iterate over the list and append each element to the tuple\n    for element in listx:\n        new_tuple = new_tuple + (element,)\n    # return the new tuple\n    return new_tuple"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # Find the maximum and minimum values in the list\n    max_val = max(nums)\n    min_val = min(nums)\n    # Return the difference between the two values\n    return max_val - min_val"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # Initialize variables to store the largest and smallest values\n    largest = float('-inf')\n    smallest = float('inf')\n    # Loop through the list of numbers\n    for num in nums:\n        # Update the largest and smallest values\n        largest = max(largest, num)\n        smallest = min(smallest, num)\n    # Return the difference between the largest and smallest values\n    return largest - smallest"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 1:\n        return 0\n    else:\n        max_val = max(nums)\n        min_val = min(nums)\n        return max_val - min_val"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_val = max(nums)\n    min_val = min(nums)\n    return max_val - min_val"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) < 2:\n        return 'The list must have at least two elements'\n    else:\n        max_val = max(nums)\n        min_val = min(nums)\n        return max_val - min_val"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    largest = float('-inf')\n    smallest = float('inf')\n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    return abs(largest - smallest)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return abs(nums[0])\n    \n    max_val = max(nums)\n    min_val = min(nums)\n    \n    return abs(max_val - min_val)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    This function takes a list of integers and returns the difference between the largest and smallest value in the list.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) < 2:\n        raise ValueError(\"List must have at least 2 elements\")\n    largest = min(nums)\n    smallest = max(nums)\n    return largest - smallest"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    This function takes a list of numbers as input and returns the difference between the largest and smallest value in the list.\n    '''\n    if len(nums) < 2:\n        return None\n    max_val = max(nums)\n    min_val = min(nums)\n    return max_val - min_val"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Find the largest number\n    max_num = max(a, b)\n\n    # Initialize a list to store the perfect squares\n    perfect_squares = []\n\n    # Loop through all numbers from 1 to the largest number\n    for num in range(1, max_num+1):\n        # Check if the current number is a perfect square\n        square = num ** 2\n        if square == a or square == b:\n            perfect_squares.append(square)\n\n    # Return the perfect squares\n    return perfect_squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for i in range(a, b+1):\n        if i**2 == i:\n            squares.append(i**2)\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = set()\n    for i in range(a, b+1):\n        for j in range(i, b+1):\n            if i*i + j*j == j*j:\n                squares.add(i)\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    count = 0\n    for i in range(a, b+1):\n        if i**2 == a or i**2 == b:\n            count += 1\n    return count"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        if i**2 == i and i**2 > a:\n            print(i**2)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for num in range(a, b+1):\n        # Check if the number is a perfect square\n        if num == int(num**0.5)**2:\n            print(num)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef perfect_squares(a, b):\n    '''\n    This function takes in two numbers a and b, and returns a list of perfect squares\n    between a and b (inclusive).\n    '''\n    squares = []\n    for num in range(int(math.sqrt(a)), int(math.sqrt(b))+1):\n        squares.append(num*num)\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for i in range(a, b+1):\n        if i**2 == i:\n            squares.append(i)\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # initialize a variable to store the number of perfect squares between a and b\n    count = 0\n    # loop through the range of numbers between a and b\n    for i in range(int(a**0.5)+1, int(b**0.5)+1):\n        # check if the square of i is between a and b\n        if i**2 >= a and i**2 <= b:\n            # if it is, increment the count\n            count += 1\n    # return the count of perfect squares\n    return count"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for num in range(int(a), int(b)+1):\n        if num**2 == num:\n            print(num)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r*cmath.cos(theta)\n    y = r*cmath.sin(theta)\n    return (x,y)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef polar_rect(r, phi):\n    \"\"\"\n    Convert polar coordinates to rectangular coordinates.\n\n    Parameters:\n    r (float): The radius of the circle.\n    phi (float): The angle in radians measured clockwise from the positive x-axis.\n\n    Returns:\n    (x, y): A tuple containing the x and y coordinates in rectangular coordinates.\n    \"\"\"\n    x = r * cmath.cos(phi)\n    y = r * cmath.sin(phi)\n    return (x.real, y.real)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    This function takes a complex number r and an angle theta in radians and \n    returns the complex number x and y in rectangular coordinates that \n    correspond to the given polar coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Write a function to convert polar coordinates to rectangular coordinates.\n    \n    Args:\n        r (float): The radius of the circle.\n        theta (float): The angle of the coordinate system with the x-axis in degrees.\n    \n    Returns:\n        tuple: A tuple containing the x and y coordinates of the point in rectangular coordinates.\n    \"\"\"\n    # Convert radians to degrees\n    theta = cmath.phase(cmath.exp(1j*cmath.radians(theta)))\n    \n    # Calculate x and y components\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    \n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x,y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Convert polar coordinates to rectangular coordinates.\n    \n    r: radius\n    theta: angle in radians\n    \n    Returns:\n        x: x-coordinate in rectangular coordinates\n        y: y-coordinate in rectangular coordinates\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    \"\"\"\n    Write a function to convert polar coordinates to rectangular coordinates.\n    \"\"\"\n    # Convert polar coordinates to rectangular coordinates\n    rect_x = x * cmath.cos(y)\n    rect_y = x * cmath.sin(y)\n    return rect_x, rect_y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    '''\n    Convert polar coordinates to rectangular coordinates.\n    '''\n    x = r*cmath.cos(theta)\n    y = r*cmath.sin(theta)\n    return x,y"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) == 0:\n        return []\n    else:\n        first, last = newList[0], newList[-1]\n        newList[0] = last\n        newList[-1] = first\n        return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) < 2:\n        print(\"The list should have at least two elements.\")\n        return\n    else:\n        first = newList[0]\n        last = newList[-1]\n        newList[0] = last\n        newList[-1] = first\n        return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Assigning the length of the list to a variable\n    length = len(newList)\n\n    # Using a for loop to iterate over the list\n    for i in range(length//2):\n        # Swapping the first and last elements\n        newList[i], newList[length-1-i] = newList[length-1-i], newList[i]"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first_element = newList[0]\n    last_element = newList[-1]\n    newList[0] = last_element\n    newList[-1] = first_element\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # if the list has only one element, return the list\n    if len(newList) == 1:\n        return newList\n    # if the list has more than one element, swap the first and last elements\n    else:\n        first_element = newList[0]\n        last_element = newList[-1]\n        newList[0] = last_element\n        newList[-1] = first_element\n        return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last elements in a list.\n    \"\"\"\n    # Check if the input list is empty\n    if len(newList) == 0:\n        return \"The list is empty.\"\n    \n    # Set the first and last elements of the list\n    temp = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = temp\n    \n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last elements in a list.\n    \"\"\"\n    first_element = newList[0]\n    last_element = newList[-1]\n    newList[0] = last_element\n    newList[-1] = first_element\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Get the length of the list\n    length = len(newList)\n    # Get the first and last elements of the list\n    first_elem = newList[0]\n    last_elem = newList[length-1]\n    # Interchange the first and last elements\n    newList[0] = last_elem\n    newList[length-1] = first_elem\n    # Return the updated list\n    return newList"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def binomial_Coeff(n, k):\n    if k > n:\n        return 0\n\n    coeff = 1\n    for i in range(1, k + 1):\n        coeff *= (n - i + 1) / i\n\n    return coeff"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    sum = 0\n    for i in range(k): \n        sum += (n-i) * binomial_Coeff(n-1,i) \n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def binomial_Coeff(n, k):\n    '''\n    This function finds the sum of the product of consecutive binomial co-efficients.\n    '''\n    # Calculate the sum of the product of consecutive binomial co-efficients\n    sum_product = 0\n    for i in range(n - k + 1):\n        product = 1\n        for j in range(k):\n            product *= (n - i + j) // (j + 1)\n        sum_product += product\n    return sum_product"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    This function takes two arguments, n and k, and returns the sum of the product of consecutive binomial co-efficients.\n\n    >>> binomial_Coeff(6, 3)\n    210\n    \"\"\"\n    result = 0\n    # calculate the number of ways to choose k items from n items\n    ways = 1\n    for i in range(1, k+1):\n        ways *= n-i\n    # calculate the product of consecutive binomial co-efficients\n    for i in range(1, n+1):\n        ways /= i\n        result += ways\n    return result"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # Initialize variables\n    binom_coeff_sum = 0\n    # Calculate the binomial coefficient of k and n-k using formula nCr = n!/(k!*(n-k)!)\n    binomial_coeff = n\n    for i in range(1,k+1):\n        binomial_coeff *= (n-i)\n        binomial_coeff //= i\n    # Calculate the sum of the product of consecutive binomial co-efficients\n    for i in range(k,n+1):\n        binomial_coeff_sum += binomial_coeff\n        binomial_coeff *= i\n    return binomial_coeff_sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    sum = 0\n    for i in range(k+1): \n        sum += (n-k+1) * (1-1/k)**i\n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # Initialize the sum and the product of co-efficients\n    sum = 0\n    prod = 1\n    # Iterate over all possible values of k\n    for i in range(min(n,k)+1):\n        # Calculate the binomial coefficient\n        B = n-i+1\n        # Calculate the product of the i-th and (n-i+1)-th binomial co-efficients\n        C = (n-i+1)*prod/(i+1)\n        # Add the current binomial co-efficient to the sum and the product of co-efficients\n        sum += B*C\n        prod = C\n    # Return the sum\n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # Base cases\n    if k == 0 or k == n:\n        return 1\n    elif k > n:\n        return 0\n\n    # Calculate first k-1 binomial coefficients\n    coeff_sum = 0\n    for i in range(k):\n        coeff_sum += binomial_Coeff(n-1, i)\n\n    return coeff_sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # initialize the sum to zero\n    sum = 0\n    # initialize the product of consecutive binomial co-efficients to 1\n    product = 1\n    # loop through the values of k from 1 to n\n    for i in range(1,n+1):\n        # calculate the binomial coefficient of i and k\n        coeff = (n+1)*factorial(n)/(factorial(i)*factorial(k-i))\n        # update the sum and product of consecutive binomial co-efficients\n        sum += coeff\n        product *= coeff\n    # return the sum of the product of consecutive binomial co-efficients\n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # Check if n and k are valid input values\n    if n < 0 or k < 0 or k > n:\n        print(\"Invalid input values\")\n        return None\n\n    # Calculate the sum of product of consecutive binomial co-efficients\n    coeff_sum = (1/2) * ((2*n-1)**k * (n-k)**(2*n-1))\n\n    return coeff_sum"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip_list = ip.split('.')\n    for i in range(len(ip_list)):\n        if ip_list[i] == '0':\n            ip_list.pop(i)\n            break\n    return '.'.join(ip_list)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = ip.strip()\n    ip_list = ip.split('.')\n    ip_list = [int(x) for x in ip_list]\n    ip_list = [x for x in ip_list if x!= 0]\n    return '.'.join(str(x) for x in ip_list)\n\nip = input(\"Enter an IP address: \")\nip = removezero_ip(ip)\nprint(\"IP address without leading zeroes:\", ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^0+', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = r'^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$'\n    match = re.match(pattern, ip)\n    if match:\n        ip = match.group(0)\n    else:\n        return None\n    return ip.lstrip('0')"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = re.compile(r'^\\d+\\.\\d+\\.\\d+\\.\\d+$')\n    if pattern.match(ip):\n        return re.sub(r'^\\d+\\.\\d+\\.\\d+\\.\\d+', '', ip)\n    else:\n        return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    This function removes leading zeroes from an IP address.\n    '''\n    return re.sub(r'^0+', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = r'^([1-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}$'\n    match = re.match(pattern, ip)\n    if match:\n        return '.'.join(filter(lambda x: x!= '0', match.group(0).split('.')))\n    else:\n        return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^0+', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    This function takes an IP address as a string and removes leading zeroes from it.\n    '''\n    ip = re.sub(r'^(0{2,})', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = re.compile(r'^\\d+\\.\\d+\\.\\d+\\.\\d+$')\n    if pattern.match(ip):\n        # split the ip address into its components\n        parts = ip.split('.')\n        # remove leading zeroes from each component\n        for i in range(len(parts)):\n            while parts[i] == '0':\n                parts.pop(i)\n            if not parts[i]:\n                parts.pop(i)\n        # join the remaining parts back together\n        result = '.'.join(parts)\n        return result\n    else:\n        return ip"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = list1[0]\n    odd_num = list1[1]\n    diff = even_num - odd_num\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # Check if the input list is empty\n    if len(list1) == 0:\n        return \"List is empty\"\n    \n    # Check if the input list contains only one element\n    if len(list1) == 1:\n        return \"List contains only one element\"\n    \n    # Initialize the variables for the even and odd numbers\n    even_num = odd_num = 0\n    \n    # Iterate over the list and find the even and odd numbers\n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n        else:\n            odd_num = num\n    \n    # Calculate the difference between the even and odd numbers\n    diff = even_num - odd_num\n    \n    # Return the difference as the result of the function\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = 0\n    odd = 0\n    for num in list1:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        if even == 1 and odd == 1:\n            break\n    return abs(even - odd)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    \n    # Initialize variables to store the even and odd numbers\n    even_num = None\n    odd_num = None\n    \n    # Loop through the list and check if the current number is even and odd\n    for num in list1:\n        if num % 2 == 0:\n            if even_num is None:\n                even_num = num\n            else:\n                return even_num - num\n        else:\n            if odd_num is None:\n                odd_num = num\n            else:\n                return odd_num - num\n                \n    # If the loop completes without returning, return the difference of the even and odd numbers\n    if even_num is None or odd_num is None:\n        return None\n    else:\n        return even_num - odd_num"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    first_even = None\n    first_odd = None\n    for num in list1:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        elif first_odd is None and num % 2!= 0:\n            first_odd = num\n    if first_even is None:\n        return None\n    return first_even - first_odd"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    count_even = 0\n    count_odd = 0\n    \n    for i in list1:\n        if i % 2 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n        \n        if count_even == 1 and count_odd == 1:\n            return i - list1[0] - list1[-1]\n            "
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = list1[0]\n    odd_num = list1[1]\n\n    if even_num % 2 == 0:\n        diff = even_num - odd_num\n        print(\"The difference between the first even and first odd number is:\", diff)\n    else:\n        diff = odd_num - even_num\n        print(\"The difference between the first odd and first even number is:\", diff)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    \"\"\"\n    Write a function to find the difference of the first even and first odd number of a given list.\n    \"\"\"\n    even_num = 0\n    odd_num = 0\n    \n    # Iterate through the list and check if the number is even or odd\n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n        else:\n            odd_num = num\n    \n    # If the even number is present, find the difference between even and odd numbers\n    if even_num:\n        return odd_num - even_num\n    else:\n        return None"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = 0\n    odd_num = 0\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_num += num\n        else:\n            odd_num += num\n            \n    diff = abs(even_num - odd_num)\n    \n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # Check if the input is a list\n    if type(list1)!= list:\n        print(\"Error: Input should be a list.\")\n        return\n    \n    # Initialize variables to store even and odd numbers\n    even = 0\n    odd = 0\n    \n    # Loop through the list\n    for i in list1:\n        # If the number is even, add it to even variable\n        if i % 2 == 0:\n            even += i\n        # If the number is odd, add it to odd variable\n        else:\n            odd += i\n            \n    # Calculate the difference between even and odd\n    diff = even - odd\n    \n    # Print the difference\n    print(\"The difference between the first even and first odd number is:\", diff)"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Swaps(str1, str2):\n    # convert both strings to binary\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # find the number of bits in each binary number\n    bits1 = len(bin(num1)[2:])\n    bits2 = len(bin(num2)[2:])\n\n    # find the number of bits that need to be swapped\n    swaps = bits1 - bits2\n\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Swaps(str1, str2):\n    n = len(str1)\n    dp = [[0]*n for _ in range(n)]\n    \n    # base case\n    for i in range(n):\n        if str1[i] == str2[i]:\n            dp[i][i] = 0\n        else:\n            dp[i][i] = 1\n    \n    # for rest of the characters\n    for gap in range(1, n):\n        for i in range(n-gap):\n            j = i + gap\n            \n            # only need to compare with the characters to the right of i\n            if str1[i] == str2[j]:\n                dp[i][j] = dp[i+1][j-1]\n            else:\n                dp[i][j] = min(dp[i][j-1], dp[i+1][j]) + 1\n                \n    return dp[0][n-1]"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Swaps(str1, str2):\n    # Check if the binary numbers are of equal length\n    if len(str1)!= len(str2):\n        return \"Error: Binary numbers should have equal length\"\n\n    # Count the number of 1s in each binary number\n    count1 = 0\n    count2 = 0\n    for i in range(len(str1)):\n        if str1[i] == '1':\n            count1 += 1\n        if str2[i] == '1':\n            count2 += 1\n\n    # Check if there are any swaps required\n    if count1 == count2:\n        return \"Error: No swaps are required\"\n\n    # Count the number of swaps required to convert the two binary numbers\n    swaps = 0\n    for i in range(len(str1)):\n        if str1[i]!= str2[i]:\n            swaps += 1\n\n    # Return the minimum number of swaps required\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Swaps(str1, str2):\n    n = len(str1)\n    dp = [[0] * (n + 1) for i in range(n + 1)]\n\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if str1[i - 1] == str2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1]\n            else:\n                dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + 1\n\n    return dp[n][n]"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Swaps(str1,str2):\n    # convert both strings to binary\n    binary1 = bin(int(str1, 2))[2:]\n    binary2 = bin(int(str2, 2))[2:]\n    \n    # compare the lengths of the two binary strings\n    if len(binary1) < len(binary2):\n        # pad the shorter binary string with leading zeros\n        binary1 = '0'*(len(binary2) - len(binary1)) + binary1\n    elif len(binary1) > len(binary2):\n        # pad the shorter binary string with leading zeros\n        binary2 = '0'*(len(binary1) - len(binary2)) + binary2\n    \n    # count the number of swaps required to convert the binary strings\n    count = 0\n    for i in range(len(binary1)):\n        if binary1[i]!= binary2[i]:\n            count += 1\n    \n    return count"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Swaps(str1, str2):\n    n1 = len(str1)\n    n2 = len(str2)\n    min_swaps = 0\n    if n1 > n2:\n        str1, str2 = str2, str1\n        n1, n2 = n2, n1\n    for i in range(n1):\n        if str1[i]!= str2[i]:\n            min_swaps += 1\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Swaps(str1, str2):\n    n = len(str1)\n    # Convert the binary strings to binary numbers\n    bin1 = int(str1, 2)\n    bin2 = int(str2, 2)\n    # Count the number of set bits in each binary number\n    count1 = bin1.bit_count()\n    count2 = bin2.bit_count()\n    # Calculate the minimum number of swaps required to convert the two binary numbers\n    swaps = abs(count1 - count2)\n    # Count the number of leading zeros in the binary numbers\n    leading_zeros1 = bin1.bit_length() - len(bin1.to_bytes((bin1.bit_length() + 7) // 8, 'big')) * 8\n    leading_zeros2 = bin2.bit_length() - len(bin2.to_bytes((bin2.bit_length() + 7) // 8, 'big')) * 8\n    # Add the number of leading zeros to the number of swaps required to convert the two binary numbers\n    swaps += max(leading_zeros1, leading_zeros2)\n    # Return the minimum number of swaps required\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Swaps(str1, str2):\n    # Initialize variables to store the lengths of the two binary strings\n    len1, len2 = len(str1), len(str2)\n    # Initialize a variable to store the sum of the lengths of the two binary strings\n    diff = abs(len1 - len2)\n    # Initialize a variable to store the minimum number of swaps required\n    min_swaps = 0\n    # Iterate over the length of the shorter binary string\n    for i in range(len1):\n        # Check if the bits of the current positions are different\n        if str1[i]!= str2[i]:\n            # If they are different, increment the minimum number of swaps required\n            min_swaps += 1\n            # If the difference between the lengths of the two binary strings is greater than 0, decrement it\n            if diff > 0:\n                diff -= 1\n    # Return the minimum number of swaps required to convert the two binary strings\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    This function takes two binary numbers as strings and returns the minimum number of swaps required to convert them.\n    \n    Example:\n    str1 = \"1011\"\n    str2 = \"1010\"\n    Output: 3\n    \n    str1 = \"1010\"\n    str2 = \"1011\"\n    Output: 1\n    \n    str1 = \"10101\"\n    str2 = \"1010\"\n    Output: 1\n    \n    \"\"\"\n    # Check if the length of both strings are equal\n    if len(str1)!= len(str2):\n        return \"Both strings must have the same length.\"\n    \n    # Initialize variables\n    n = len(str1)\n    swaps = 0\n    \n    # Iterate through each character of the strings\n    for i in range(n):\n        # If characters are not equal, swap the characters and increment the swaps counter\n        if str1[i]!= str2[i]:\n            str1 = str1[:i] + str2[i] + str1[i+1:]\n            str2 = str2[:i] + str1[i] + str2[i+1:]\n            swaps += 1\n            \n    # Return the minimum number of swaps required\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Swaps(str1,str2):\n    # Convert binary strings to integers\n    n1 = int(str1,2)\n    n2 = int(str2,2)\n    \n    # Initialize variables to store count of swaps\n    swap_count = 0\n    count_diff = abs(n1 - n2)\n    count_diff_bits = bin(count_diff)[2:]\n    \n    # Check if the difference between two numbers is odd or even\n    if count_diff_bits[0] == '0':\n        swap_count += count_diff_bits.count('1')\n        count_diff_bits = count_diff_bits[1:]\n        while count_diff_bits:\n            swap_count += count_diff_bits.count('1')\n            count_diff_bits = count_diff_bits[1:]\n    else:\n        swap_count += count_diff_bits.count('0')\n        count_diff_bits = count_diff_bits[1:]\n        while count_diff_bits:\n            swap_count += count_diff_bits.count('0')\n            count_diff_bits = count_diff_bits[1:]\n    \n    return swap_count"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # Convert the tuple to bytes and get the size\n    size = sys.getsizeof(tuple_list)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    \"\"\"\n    Write a function to find the size in bytes of the given tuple.\n    \"\"\"\n    # Convert the tuple to bytes\n    bytes_obj = bytearray(tuple_list)\n\n    # Get the size of the bytes object\n    size = sys.getsizeof(bytes_obj)\n\n    # Convert the size to bytes\n    size_bytes = size.to_bytes(8, byteorder='big')\n\n    return size_bytes"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size_list = [sys.getsizeof(x) for x in tuple_list]\n    return sum(size_list)"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    This function takes in a list of tuples and calculates the size of the tuples in bytes.\n    The size of a tuple is defined as the number of elements times the size of each element in bytes.\n    '''\n    total_size = 0\n    for tup in tuple_list:\n        size = sys.getsizeof(tup)\n        total_size += size\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for i in range(len(tuple_list)):\n        size += sys.getsizeof(tuple_list[i])\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    import struct\n    return struct.calcsize(str(tuple_list[0])) * len(tuple_list[0])"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    i = 0\n    j = 0\n    kth_elem = None\n    \n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            if k == 1:\n                kth_elem = arr1[i]\n            elif k == 2:\n                kth_elem = arr2[j]\n            elif k == 3:\n                kth_elem = arr1[i]\n                kth_elem = arr2[j]\n            elif k == 4:\n                kth_elem = arr1[i]\n                kth_elem = arr2[j]\n                kth_elem = arr1[i]\n            elif k == 5:\n                kth_elem = arr1[i]\n                kth_elem = arr2[j]\n                kth_elem = arr1[i]\n                kth_elem = arr2[j]\n            else:\n                print(\"Invalid value of k\")\n            break\n            \n    return kth_elem"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = 0\n    j = 0\n\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            k -= 1\n            if k == 0:\n                return arr1[i]\n\n    if i == len(arr1):\n        return arr2[j]\n    else:\n        return arr1[i]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    This function takes three arguments: arr1, arr2, and k.\n    arr1 and arr2 are the two sorted arrays to be searched.\n    k is the position of the element to be found.\n    \"\"\"\n\n    # Initialize variables for the current position in arr1 and arr2\n    i, j = 0, 0\n\n    # Loop while i is less than the length of arr1 and j is less than the length of arr2\n    while i < len(arr1) and j < len(arr2):\n\n        # Compare the current elements at positions i and j of arr1 and arr2\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            # If the current elements are equal, increment the count of equal elements\n            k -= 1\n\n            # If the count reaches k, return the current position in arr1\n            if k == 0:\n                return i\n\n    # If the loop completes without finding kth element, return -1\n    return -1"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n\n    Args:\n        arr1 (list): First sorted array.\n        arr2 (list): Second sorted array.\n        k (int): The position of the kth element.\n\n    Returns:\n        The kth element from the given two sorted arrays.\n    \"\"\"\n\n    # Merge the two sorted arrays into one sorted array\n    merged_arr = arr1 + arr2\n\n    # Find the median index of the merged array\n    mid = len(merged_arr) // 2\n\n    # Find the index of the kth element\n    if k <= mid:\n        return find_kth(arr1, merged_arr[:mid], k)\n    else:\n        return find_kth(merged_arr[mid:], arr2, k - mid - 1)"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    i = 0\n    j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n            break\n\n    while i < len(arr1):\n        if i < k:\n            i += 1\n        else:\n            return arr1[i - k]\n            break\n\n    while j < len(arr2):\n        if j < k:\n            j += 1\n        else:\n            return arr2[j - k]\n            break"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n            i += 1\n            j += 1\n    while i < len(arr1):\n        if arr1[i] < arr2[j]:\n            i += 1\n        else:\n            return arr1[i-1]\n            j += 1\n    while j < len(arr2):\n        if arr2[j] < arr1[i]:\n            j += 1\n        else:\n            return arr2[j-1]\n            i += 1"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = 0\n    j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Find the kth smallest element in two sorted arrays.\n\n    Parameters:\n    arr1 (list): List of integers, first sorted array.\n    arr2 (list): List of integers, second sorted array.\n    k (int): Integer, the rank of the element to find.\n\n    Returns:\n    int: The kth smallest element in the two arrays.\n\n    Raises:\n    ValueError: If k is not between 1 and the maximum length of the arrays.\n    \"\"\"\n\n    # Check if k is between 1 and the maximum length of the arrays.\n    if not (1 <= k <= max(len(arr1), len(arr2))):\n        raise ValueError(\"k must be between 1 and the maximum length of the arrays.\")\n\n    # Initialize variables.\n    lows = 0  # Lowest index in arr1 and arr2.\n    highs = len(arr1) + len(arr2) - 1  # Highest index in arr1 and arr2.\n    result = None  # Result variable.\n\n    # Perform binary search.\n    while lows <= highs:\n        mid = (lows + highs) // 2\n        if arr1[mid - lows] < arr2[mid - lows]:\n            result = arr1[mid - lows]\n            highs = mid - 1\n        else:\n            result = arr2[mid - lows]\n            lows = mid + 1\n\n    # If k is odd, return the result.\n    if k % 2 == 1:\n        return result\n    # If k is even, return the middle element.\n    else:\n        return arr1[k // 2 - 1] + arr2[k // 2 - 1]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    \n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n            i += 1\n            j += 1\n            \n    if i == len(arr1):\n        return arr2[j]\n    else:\n        return arr1[i]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n    if i == len(arr1):\n        return arr2[j]\n    else:\n        return arr1[i]"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_armstrong(number):\n    \"\"\"\n    Returns True if the given number is an Armstrong number, else False.\n    \"\"\"\n    # initialize the sum of the powers\n    total = 0\n\n    # loop through the digits of the number\n    for digit in str(number):\n        # add the digit to the sum of the powers\n        total += int(digit) ** len(str(number))\n\n    # compare the total to the original number\n    if total == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_armstrong_number(n):\n    \"\"\"\n    Check if a number is an Armstrong number or not\n    \"\"\"\n    # Convert the number to a string\n    n_str = str(n)\n\n    # Calculate the sum of the squares of the digits of the number\n    sum_of_squares = 0\n    for digit in n_str:\n        sum_of_squares += int(digit) ** 2\n\n    # Check if the sum of squares is equal to the original number\n    return sum_of_squares == n"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    This function checks whether a given number is an Armstrong number or not.\n    \"\"\"\n    # Initialize a variable to store the sum of the cube of each digit of the number\n    armstrong_sum = 0\n\n    # Convert the number to a string and split it into digits\n    digits = str(number)\n    digits = [int(d) for d in digits]\n\n    # Loop through each digit and calculate its cube and add it to the sum\n    for digit in digits:\n        cube = digit ** 3\n        armstrong_sum += cube\n\n    # Compare the sum to the original number\n    if armstrong_sum == number:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum = 0\n    temp = number\n    \n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** 3\n        temp //= 10\n        \n    return sum == number"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Convert the number to a string\n    num_str = str(number)\n    # Calculate the sum of the cube of each digit in the number\n    armstrong_sum = 0\n    for digit in num_str:\n        armstrong_sum += int(digit)**3\n    # Check if the sum is equal to the original number\n    if armstrong_sum == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    # Check if the number is a positive integer\n    if not isinstance(number, int) or number < 0:\n        return \"Invalid input. Please provide a positive integer.\"\n    \n    # Initialize the sum of the number's digits to 0\n    sum_of_digits = 0\n    \n    # Convert the number to a string and iterate over its digits\n    for digit in str(number):\n        # Add the digit to the sum_of_digits\n        sum_of_digits += int(digit) ** len(str(number))\n    \n    # Return whether the number is armstrong or not\n    return \"The number is armstrong if its sum of its digits is equal to the original number.\" if sum_of_digits == number else \"The number is not armstrong.\""
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_armstrong_number(n):\n    \"\"\"\n    This function returns True if the given number is an Armstrong number, and False otherwise.\n    \"\"\"\n    num = n\n    sum = 0\n    while num > 0:\n        digit = num % 10\n        sum += digit ** 3\n        num //= 10\n    return sum == n\n"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    num = str(number)\n    sum = 0\n    for i in num:\n        sum += int(i) ** len(num)\n    if sum == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_armstrong_number(n):\n    if n <= 0:\n        return False\n\n    # convert the number to a string and remove any non-numeric characters\n    num_str = ''.join(c for c in str(n) if c.isdigit())\n\n    # initialize the sum to 0\n    sum_ = 0\n\n    # loop through each digit of the number and add the power of that digit to the sum\n    for digit in num_str:\n        digit_power = int(digit)\n        sum_ += digit_power ** len(num_str)\n\n    # return True if the sum is equal to the original number, else False\n    return n == sum_"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    num = number\n    sum = 0\n    power = 0\n    while num > 0:\n        digit = num % 10\n        sum += digit ** power\n        power += 1\n        num //= 10\n    if sum == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum_value = 0\n    for i in range(number):\n        sum_value += i + 1\n    average = sum_value / number\n    return sum_value, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n\n    # Take input from the user\n    n = int(input(\"Enter the number of natural numbers: \"))\n\n    # Initialize the sum and the count of the natural numbers\n    sum_num = 0\n    count = 0\n\n    # Take the natural numbers from the user and add them to the sum and count\n    for i in range(n):\n        num = int(input(\"Enter a natural number: \"))\n        sum_num += num\n        count += 1\n\n    # Find the average of the natural numbers\n    average = sum_num / count\n\n    # Print the sum and average\n    print(\"The sum of the first\", n, \"natural numbers is\", sum_num)\n    print(\"The average of the first\", n, \"natural numbers is\", average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_average(n):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum_of_natural_numbers = 0\n    count = 0\n    for i in range(1, n+1):\n        sum_of_natural_numbers += i\n        count += 1\n    average = sum_of_natural_numbers / count\n    return sum_of_natural_numbers, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum_ = 0\n    count = 0\n    for i in range(1, number+1):\n        sum_ += i\n        count += 1\n    average = sum_ / count\n    return sum_, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum_ = 0\n    for i in range(1, number + 1):\n        sum_ += i\n    average = sum_ / number\n    return sum_, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_average(n):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum_of_n = 0\n    for i in range(1, n+1):\n        sum_of_n += i\n    avg_of_n = sum_of_n / n\n    return sum_of_n, avg_of_n"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_average(n):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    count = 0\n    \n    for i in range(1, n+1):\n        total += i\n        count += 1\n        \n    average = total / count\n    \n    return (total, average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    average = sum / number\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(number):\n        sum += i\n        count += 1\n    average = sum/count\n    print(\"Sum:\", sum)\n    print(\"Average:\", average)\n"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    count = 0\n    for i in range(1, number + 1):\n        total += i\n        count += 1\n    average = total / count\n    return total, average"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Even(n):\n    \"\"\"\n    This function takes a number n as input and returns True if n is even, else False.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        print(n, \"is even\")\n    else:\n        print(n, \"is odd\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        print(f\"{n} is even\")\n    else:\n        print(f\"{n} is odd\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        print(n, \"is Even\")\n    else:\n        print(n, \"is odd\")"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Convert the string to a set to remove duplicates and get a unique character set\n    unique_chars = set(str1)\n    # Loop through the unique character set and find the first repeated character\n    for char in unique_chars:\n        if unique_chars.count(char) > 1:\n            return char\n    # If no repeated character is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # create a dictionary to store the frequency of each character in the string\n    char_freq = {}\n\n    # iterate through the string and update the frequency count of each character\n    for char in str1:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n\n    # iterate through the frequency dictionary and find the first repeated character\n    for char, count in char_freq.items():\n        if count == 1:\n            return char\n\n    # if no repeated character is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            return char\n        char_count[char] = 1\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for char in str1:\n        if str1.count(char) > 1:\n            return char\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Create a dictionary to store character counts\n    char_count = {}\n\n    # Loop through each character in the string\n    for char in str1:\n        # If the character is already in the dictionary, increment its count\n        if char in char_count:\n            char_count[char] += 1\n        # If the character is not in the dictionary, add it with a count of 1\n        else:\n            char_count[char] = 1\n\n    # Find the first repeated character\n    for char in str1:\n        if char_count[char] > 1:\n            return char\n\n    # If no repeated characters are found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # create a dictionary to store the count of each character in the string\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # iterate through the dictionary to find the first repeated character\n    for char in str1:\n        if char_count[char] > 1:\n            return char\n    \n    # if no repeated character is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            return char\n        else:\n            char_count[char] = True\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Initialize variables\n    char_freq = {}\n    first_char = None\n    \n    # Loop through the string and update the character frequency dictionary\n    for char in str1:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n            \n    # Find the first repeated character\n    for char, freq in char_freq.items():\n        if freq > 1:\n            first_char = char\n            break\n            \n    return first_char"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in char_count:\n        if char_count[char] > 1:\n            return char"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n\n    # create a dictionary to store the frequency of each character in the string\n    freq = {}\n\n    # loop through each character in the string\n    for char in str1:\n\n        # if the character is already in the dictionary, increment its frequency\n        if char in freq:\n            freq[char] += 1\n        # if the character is not in the dictionary, add it with a frequency of 1\n        else:\n            freq[char] = 1\n\n    # find the character with the highest frequency\n    max_char = None\n    max_freq = 0\n    for char in freq:\n        if freq[char] > max_freq:\n            max_char = char\n            max_freq = freq[char]\n\n    # return the character with the highest frequency\n    return max_char"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(1, n+1):\n        if all(int(j) == i for j in str(i)):\n            lucid_numbers.append(i)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    lucid_numbers = []\n    for i in range(1, n+1):\n        is_lucid = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_lucid = False\n                break\n        if is_lucid:\n            lucid_numbers.append(i)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    ludic_numbers = []\n    i = 2\n    while i <= n:\n        if i % sum(int(digit) for digit in str(i)) == 0:\n            ludic_numbers.append(i)\n        i += 1\n    return ludic_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n\n    # Initialize an empty list to store lucid numbers\n    lucid_numbers = []\n\n    # Loop through each number from 1 to n\n    for i in range(1, n+1):\n        # If the number is a lucid number, add it to the lucid_numbers list\n        if lucid_number(i):\n            lucid_numbers.append(i)\n\n    # Return the lucid_numbers list\n    return lucid_numbers\n\ndef lucid_number(n):\n    '''\n    Define a function to check if a given number is a lucid number or not.\n    '''\n\n    # Check if n is divisible by any of the prime numbers 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97\n    for i in [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]:\n        if n % i == 0:\n            return False\n\n    # If the number is divisible by any of the prime numbers, it is a lucid number\n    return True"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1, n+1):\n        if i == lucid_number(i):\n            ludic.append(i)\n    return ludic\n\n\ndef lucid_number(n):\n    '''\n    Write a function to find the lucid number of a given integer.\n    '''\n    lucid = 0\n    for i in range(2, n):\n        if n % i == 0:\n            lucid = i\n    return lucid"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_numbers = []\n    for i in range(1, n+1):\n        is_lucid = True\n        for j in range(2, i//2+1):\n            if i % j == 0:\n                is_lucid = False\n                break\n        if is_lucid:\n            ludic_numbers.append(i)\n    return ludic_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_nums = []\n    for i in range(n):\n        lucid_nums.append(i + 1)\n    return lucid_nums"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    lucid = 1\n    while lucid <= n:\n        yield lucid\n        lucid += 1"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    num = 1\n    while num <= n:\n        lucid_numbers.append(num)\n        num += 1\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    i = 1\n    while True:\n        if is_lucid(i):\n            lucid_numbers.append(i)\n        i += 1\n    return lucid_numbers\n\ndef is_lucid(n):\n    '''\n    Helper function to check if a number is lucid.\n    '''\n    lucid_set = set()\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # remove leading and trailing whitespaces\n    s = s.strip()\n    # split the string into words\n    words = s.split()\n    # reverse the order of the words\n    words = words[::-1]\n    # join the words back into a string\n    s =''.join(words)\n    # return the reversed string\n    return s"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_words.append(word[::-1])\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = []\n    for i in range(len(words)-1, -1, -1):\n        reversed_words.append(words[i])\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Split the string into words\n    words = s.split()\n    # Reverse each word in the list\n    for i in range(len(words)):\n        words[i] = words[i][::-1]\n    # Join the reversed words back into a string\n    s_reverse =''.join(words)\n    return s_reverse"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    # split the string into words\n    words = s.split()\n    # reverse each word\n    words = [word[::-1] for word in words]\n    # join the words into a string with spaces\n    result =''.join(words)\n    return result"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    # split the string by spaces\n    words = s.split()\n    # reverse each word\n    reversed_words = [word[::-1] for word in words]\n    # join the reversed words with spaces\n    reversed_s =''.join(reversed_words)\n    return reversed_s"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    words = s.split()\n    reversed_words = words[::-1]\n    reversed_s = \" \".join(reversed_words)\n    return reversed_s"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Split the string into words using the space as the delimiter\n    words = s.split()\n    # Reverse the order of the words using reverse() method\n    words.reverse()\n    # Join the words back together using the space as the delimiter\n    return''.join(words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = words[::-1]\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    # split the string into words\n    words = s.split()\n    # reverse each word in the list\n    reversed_words = [word[::-1] for word in words]\n    # join the reversed words into a string\n    result = \" \".join(reversed_words)\n    return result"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_prime(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_num(num):\n    return is_prime(num)"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n\n    if num < 2:\n        return False\n\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_prime(num):\n    \"\"\"\n    Write a function to check if the given integer is a prime number.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\nnum = int(input(\"Enter a number: \"))\nif is_prime(num):\n    print(num, \"is a prime number.\")\nelse:\n    print(num, \"is not a prime number.\")"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num <= 1:\n        return False\n    elif num == 2:\n        return True\n    else:\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_prime(num):\n    \"\"\"\n    Check if the given integer is a prime number.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * math.pi / 180\n    return radian"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radians = degree * (math.pi / 180)\n    return radians"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    This function takes a degree input and converts it to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi / 180)\n\ndegrees = 90\nradians = radian_degree(degrees)\nprint(radians)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)\n"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi / 180)"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    for match_num, match in enumerate(matches, start=1):\n        literal = match.group()\n        start_index = match.start()\n        end_index = match.end()\n        print(f\"Match {match_num}: Literal: '{literal}', Start Index: {start_index}, End Index: {end_index}\")"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        return match.group(), match.start(), match.end()"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        return match.group(), match.start(), match.end()"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0], 0, len(matches[0])\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0], 0, len(matches[0])\n    return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n\n    match = re.search(pattern, text)\n\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    result = re.findall(pattern, text)\n    if result:\n        start = result[0].start()\n        end = result[0].end()\n        return result[0], start, end\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    result = re.search(pattern, text)\n    if result:\n        return result.group(), result.start(), result.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if len(matches) == 0:\n        return None, None, None\n    else:\n        return matches[0], 0, len(matches[0])"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_Number(n):\n    '''\n    This function takes an integer argument n and returns the nth Bell number.\n    '''\n    if n == 0 or n == 1:\n        return n\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    elif n == 2:\n        return 4\n    else:\n        return 2 * bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_Number(n):\n    '''\n    This function calculates the nth Bell number using the formula:\n        B(n) = (phi^n - (1-phi)^n) / sqrt(5)\n    where phi = (1 + sqrt(5))/2\n    '''\n    sqrt_5 = 5**(1/2)\n    phi = (1 + sqrt_5)/2\n    bell = (phi**n - (1-phi)**n) / sqrt_5\n    return int(bell)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n < 0:\n        print(\"Invalid input. Please enter a non-negative integer.\")\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        result = 0\n        for i in range(1, n+1):\n            result += i ** i\n        return result"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_Number(n):\n    \"\"\"\n    This function takes an integer n as input and returns the nth Bell number.\n    \"\"\"\n    if n < 0:\n        return None\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_Number(n): \n    '''\n    This function takes an integer n and returns the nth Bell number.\n    '''\n    # initialize the first two Bell numbers\n    bell_1 = 1\n    bell_2 = 2\n    \n    # iterate till n\n    for i in range(3, n+1):\n        # compute the nth Bell number\n        bell_n = bell_1 + bell_2\n        \n        # update the values of bell_1 and bell_2\n        bell_1 = bell_2\n        bell_2 = bell_n\n    \n    # return the nth Bell number\n    return bell_n"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_Number(n):\n    \"\"\"\n    Write a python function to find nth bell number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    elif n == 4:\n        return 5\n    elif n == 5:\n        return 13\n    elif n == 6:\n        return 41\n    elif n == 7:\n        return 125\n    elif n == 8:\n        return 3125\n    elif n == 9:\n        return 832040\n    else:\n        return (1 / math.sqrt(5)) * (pow(math.sqrt(5), n) - pow(math.sqrt(5), n-1))"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = L - 1\n    list1.pop(k)\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    \"\"\"\n    # Get the length of the list\n    length = len(list1)\n\n    # Check if the value of L is valid or not\n    if L > length or L <= 0:\n        return \"Invalid value for L\"\n\n    # Initialize the index of the element to be removed\n    k = length - L\n\n    # Initialize a new list with the same elements as the input list\n    new_list = list1.copy()\n\n    # Remove the k'th element from the new list\n    del new_list[k-1]\n\n    return new_list"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # Create a new list without the kth element\n    new_list = list(list1)\n    new_list.pop(L-1)\n    # Return the new list\n    return new_list"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L == 1:\n        return list1\n    else:\n        return list1[:L-1] + [list1[L-1]]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    \"\"\"\n    k = L - 1\n    for i in range(len(list1)-1, -1, -1):\n        if i == k:\n            list1.pop(i)\n        else:\n            list1[i] = list1[i+1]\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    \"\"\"\n    return list1[:L] + list1[L+1:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L-1]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = L - 1 # k is the index of the element we want to remove\n    list1.pop(k) # remove the k'th element from the list\n    return list1 # return the updated list with the element removed"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # Step 1: Create a new list with all the elements of the original list except for the k'th element\n    new_list = []\n    for i in range(len(list1)):\n        if i!= L:\n            new_list.append(list1[i])\n    \n    # Step 2: Return the new list\n    return new_list"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L == 1:\n        return [list1[0]]\n    elif L > len(list1):\n        return []\n    else:\n        return [x for i, x in enumerate(list1) if i!= L-1]"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = 0\n    for i in range(len(test_list)):\n        if i == N-1:\n            max_val = max(test_list[i])\n        else:\n            max_val = max(max_val, test_list[i][N-1])\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    count = 0\n    max_val = 0\n    for row in test_list:\n        if count == N:\n            max_val = max(max_val, max(row))\n        count += 1\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_value = float('-inf')\n    max_index = -1\n\n    for i in range(len(test_list)):\n        if i < N:\n            continue\n\n        if max_value < test_list[i][N-1]:\n            max_value = test_list[i][N-1]\n            max_index = i\n\n    if max_index == -1:\n        return float('-inf')\n    else:\n        return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = 0\n    for i in range(len(test_list)):\n        if max_val < test_list[i][N-1]:\n            max_val = test_list[i][N-1]\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = 0\n    for i in range(len(test_list)):\n        if test_list[i][N-1] > max_val:\n            max_val = test_list[i][N-1]\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_value = 0\n    for i in range(len(test_list)):\n        if test_list[i][N] > max_value:\n            max_value = test_list[i][N]\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_of_nth(matrix, N):\n    '''\n    Given a matrix represented as a list of lists, returns the maximum value of the Nth column.\n    '''\n    result = []\n    for row in matrix:\n        row_max = max(row[N-1], key=row.index)\n        result.append(row_max)\n    return result"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_of_nth(matrix, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = 0\n    for row in matrix:\n        if row[N-1] > max_val:\n            max_val = row[N-1]\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_list = []\n    for row in test_list:\n        max_list.append(row[N-1])\n    return max(max_list)"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_list = []\n    for i in range(len(test_list)):\n        max_list.append(max(test_list[i][N-1], key=test_list[i].index))\n    return max_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def merge(lst):\n    result = []\n    for sublist in lst:\n        first, second = sublist\n        result.append([first, second])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for sublist in lst:\n        if len(sublist) == 2:\n            result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    new_lst = []\n    for sublist in lst:\n        new_lst.append([sublist[0], sublist[1]])\n    return new_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def merge(lst):\n    merged_list = []\n    for i in range(len(lst)):\n        merged_list.append([lst[i][0], lst[i][1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for i in lst:\n        result.append([i[0], i[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def merge(lst):\n    merged_list = []\n    for i in lst:\n        if len(i) == 2:\n            merged_list.append([i[0], i[1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n\n    # Initialize an empty list to store the merged lists\n    merged_list = []\n\n    # Loop through each sublist in the input list\n    for sublist in lst:\n\n        # Check if the length of the sublist is equal to 2\n        if len(sublist) == 2:\n\n            # Append the two elements of the sublist to the merged list\n            merged_list.append([sublist[0], sublist[1]])\n\n        # If the sublist has a length other than 2, raise an exception\n        else:\n            raise Exception(\"Each sublist in the input list must have two elements.\")\n\n    # Return the merged list\n    return merged_list"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Initialize the cumulative sum list with the first element in the list\n    cumsum_list = [test_list[0]]\n    # Iterate through the list starting from the second element\n    for i in range(1, len(test_list)):\n        # Add the current element to the previous cumulative sum element\n        cumsum_list.append(cumsum_list[i-1] + test_list[i])\n    # Return the cumulative sum list\n    return cumsum_list"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total_sum = 0\n    for num in test_list:\n        total_sum += num\n    return total_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total_sum = 0\n    for i in range(len(test_list)):\n        total_sum += test_list[i]\n    return total_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Initialize a variable to store the cumulative sum\n    cum_sum = 0\n    \n    # Iterate over each element in the list\n    for num in test_list:\n        # Add the current element to the cumulative sum\n        cum_sum += num\n        \n    # Return the cumulative sum\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = 0\n    for i in range(len(test_list)):\n        cumulative_sum += test_list[i]\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for item in test_list:\n        cum_sum += item\n    return cum_sum\n"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n\n    # Initialize an empty list to store the cumulative sum\n    cum_sum = []\n\n    # Loop through the list of tuples and append the sum of the values to the cumulative sum list\n    for i in range(len(test_list)):\n        if isinstance(test_list[i], tuple):\n            for j in test_list[i]:\n                cum_sum.append(j)\n        else:\n            cum_sum.append(test_list[i])\n\n    # Return the cumulative sum list\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for i in range(len(test_list)):\n        cum_sum += test_list[i][1]\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = 0\n    for i in range(len(test_list)):\n        cumulative_sum += test_list[i]\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n\n    # Initialize the cumulative sum to 0\n    cumulative_sum = 0\n\n    # Loop through each tuple in the list\n    for tup in test_list:\n        # Extract the values from the tuple\n        values = tup[0]\n\n        # Loop through each value in the tuple\n        for value in values:\n            # Add the value to the cumulative sum\n            cumulative_sum += value\n\n    # Return the cumulative sum\n    return cumulative_sum"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for i in range(len(nums)):\n        if len(nums[i]) == 0:\n            continue\n        else:\n            sum = sum(nums[i])\n            count = len(nums[i])\n            avg = sum/count\n            result.append(avg)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for sublist in nums:\n        avg = sum(sublist) / len(sublist)\n        result.append(avg)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for tup in nums:\n        avg = sum(tup)/len(tup)\n        result.append(avg)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for num_tuple in nums:\n        total = sum(num_tuple)\n        average = total / len(num_tuple)\n        averages.append(average)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # Initialize an empty list to store the average values for each tuple\n    averages = []\n    # Loop through each tuple in the input list\n    for tup in nums:\n        # Initialize a variable to store the sum of values in the tuple\n        total = 0\n        # Loop through each value in the tuple\n        for val in tup:\n            # Add the value to the total\n            total += val\n        # Calculate the average and append it to the averages list\n        averages.append(total / len(tup))\n    # Return the averages list\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    total = 0\n    count = 0\n    for i in nums:\n        total += sum(i)\n        count += 1\n    return [total/count]"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for tup in nums:\n        if len(tup) > 0:\n            average = sum(tup) / len(tup)\n            averages.append(average)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for num in nums:\n        average = sum(num) / len(num)\n        result.append(average)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for num in nums:\n        total = sum(num)\n        average = total/len(num)\n        result.append(average)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    This function takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for num_tuple in nums:\n        avg = sum(num_tuple) / len(num_tuple)\n        avg_list.append(avg)\n    return avg_list"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] % test_tup2[i])\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # Check if the two tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must have the same length.\")\n    # Perform element-wise modulo\n    result = [x % y for x, y in zip(test_tup1, test_tup2)]\n    # Return the result as a tuple\n    return tuple(result)"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] % test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The two tuples must have the same length\")\n        return None\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] % test_tup2[i])\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuple lengths must be equal\")\n        return\n\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] % test_tup2[i])\n\n    return tuple(result)"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # check if the length of both tuples is same\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Both tuples should have same length\")\n        return\n    \n    # perform element wise modulo\n    result_tup = tuple([x % y for x, y in zip(test_tup1, test_tup2)])\n    \n    # return the result tuple\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    jumps = 0\n    i = 0\n    steps_taken = 0\n    \n    while i < steps:\n        if steps_taken == 0:\n            # Move up\n            steps_taken += 1\n            i += 1\n        elif steps_taken == d:\n            # Move down\n            steps_taken += 1\n            i += 1\n        else:\n            # Move right\n            steps_taken += 1\n            i += 1\n        \n        jumps += 1\n        \n        if i == steps:\n            # End of the line\n            break\n    \n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d >= steps:\n        return 0\n    if d == 0:\n        return 1\n\n    # We need to check for the minimum number of jumps\n    # for the case where we take a single jump\n    min_jumps = min_Jumps(steps, d+1)\n\n    # Now we need to check for the minimum number of jumps\n    # for the case where we take two jumps\n    max_jumps = min_Jumps(steps, d-1)\n    min_jumps = min(min_jumps, max_jumps)\n\n    return min_jumps + 1"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    jumps = 0\n    jumps_max = 0\n    steps_remaining = steps\n    \n    while steps_remaining > 0:\n        if d == 0:\n            return jumps_max\n        elif d > 0:\n            steps_remaining -= 1\n            jumps += 1\n            d -= 1\n            if d < 0:\n                return -1\n        else:\n            jumps_max += 1\n            d += 1\n            steps_remaining -= 1\n            if steps_remaining < 0:\n                return -1\n            \n    return jumps_max"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    steps = list(map(int, steps.split(',')))\n    jump_count = 0\n    i = 0\n    while i < len(steps):\n        if steps[i] == d:\n            return jump_count\n        i += 1\n        jump_count += 1\n    return -1"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n\n    jumps = 0\n    current_pos = 0\n    while current_pos < len(steps) and steps[current_pos] <= d:\n        jumps += 1\n        current_pos += steps[current_pos]\n\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d):\n    if steps < 0:\n        return -1\n    elif d == 0:\n        return 0\n    elif d == 1:\n        return min(steps, 1)\n    elif d == 2:\n        return min(steps, 2)\n    else:\n        min_jumps = [0]*(d+1)\n        min_jumps[0] = 0\n        for i in range(1, d+1):\n            for j in range(1, steps+1):\n                if j >= i:\n                    min_jumps[i] = min(min_jumps[i], min_jumps[i-j]+1)\n        return min_jumps[-1]"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d):\n    \"\"\"\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    \"\"\"\n\n    # initialize variables\n    total_jumps = 0\n    current_x = 0\n    current_y = 0\n\n    # loop through all possible points on the plane and check for jumps\n    for i in range(steps):\n        # check if the current point is (d, 0)\n        if current_x == d and current_y == 0:\n            return total_jumps\n\n        # check if the current point is out of bounds\n        if current_x < 0 or current_y < 0 or current_x >= steps or current_y >= steps:\n            return -1\n\n        # check if the current point is a point to be visited again\n        if abs(current_x - d) == current_y:\n            current_x += 1\n            current_y -= 1\n            total_jumps += 1\n\n        # check if the current point is a point to be visited again\n        elif abs(current_x + d) == current_y:\n            current_x -= 1\n            current_y -= 1\n            total_jumps += 1\n\n        # check if the current point is a point to be visited again\n        elif abs(current_x - d) > current_y:\n            current_x += 1\n            total_jumps += 1\n\n        # check if the current point is a point to be visited again\n        else:\n            current_x -= 1\n            total_jumps += 1\n\n    # if no jumps are found, return -1\n    return -1"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d):\n    \"\"\"\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    \"\"\"\n\n    # Initialize variables\n    curr_pos = (0, 0)\n    steps_taken = 0\n\n    # Loop through the given number of steps\n    while steps_taken < steps:\n        # Check if current position is on the edge\n        if curr_pos[0] == d or curr_pos[1] == d:\n            return steps_taken\n\n        # Check if current position is valid\n        if curr_pos[0] > 0 and curr_pos[1] < d:\n            # If current position is valid, move to next position\n            curr_pos = (curr_pos[0] - 1, curr_pos[1] + 1)\n            steps_taken += 1\n        elif curr_pos[0] < d and curr_pos[1] > 0:\n            curr_pos = (curr_pos[0] + 1, curr_pos[1] - 1)\n            steps_taken += 1\n        else:\n            # If current position is not valid, move to next position in the same direction\n            if curr_pos[0] < d:\n                curr_pos = (curr_pos[0] + 1, curr_pos[1])\n                steps_taken += 1\n            else:\n                curr_pos = (curr_pos[0], curr_pos[1] + 1)\n                steps_taken += 1\n\n    # If the loop completes, return the final steps taken\n    return steps_taken"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    steps = int(steps)\n    d = int(d)\n\n    if steps == 0 or d == 0:\n        return 0\n\n    # initialize variables for storing solutions\n    memo = {}\n    memo[0] = 0\n    memo[1] = 1\n\n    # iterate through steps and check for solutions\n    for i in range(2, steps + 1):\n        if i > d:\n            memo[i] = memo[i-1]\n        else:\n            memo[i] = min(memo[i-1], memo[i-d] + 1)\n\n    return memo[steps]"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    \n    # Initialize variables\n    rows = len(steps)\n    cols = len(steps[0])\n    dp = [[float('inf')] * cols for _ in range(rows)]\n    dp[0][0] = 0\n    \n    # Fill the dp table\n    for i in range(1, rows):\n        for j in range(cols):\n            if j == 0:\n                if (steps[i][j] + d) >= 0:\n                    dp[i][j] = dp[i-1][j] + 1\n                else:\n                    dp[i][j] = dp[i-1][j]\n            elif j == cols-1:\n                if (steps[i][j] + d) >= 0:\n                    dp[i][j] = dp[i-1][j-1] + 1\n                else:\n                    dp[i][j] = dp[i-1][j-1]\n            else:\n                if (steps[i][j] + d) >= 0:\n                    dp[i][j] = min(dp[i-1][j-1], dp[i-1][j]) + 1\n                else:\n                    dp[i][j] = min(dp[i-1][j-1], dp[i-1][j])\n    return dp[rows-1][cols-1]"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Error: Lists have different lengths.\")\n    else:\n        for i in range(len(nums1)):\n            nums1[i] = nums1[i] / nums2[i]"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"List lengths do not match\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Error: Lists must have the same length\")\n        return\n    for i in range(len(nums1)):\n        nums1[i] /= nums2[i]\n    return nums1"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # Check if the two lists have the same length\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two lists must have the same length\")\n    \n    # Divide the lists element wise\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    \n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('The two lists must have the same length.')\n    else:\n        return [num1/num2 for num1, num2 in zip(nums1, nums2)]"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # Check if the length of the two lists is equal\n    if len(nums1) == len(nums2):\n        # Divide the two lists element wise and store the result in a new list\n        result = [num1/num2 for num1, num2 in zip(nums1, nums2)]\n        return result\n    else:\n        # If the length of the two lists is not equal, return a message\n        return \"The length of the two lists must be equal.\""
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def div_list(nums1, nums2):\n    '''\n    This function takes two lists as input and returns a list of their element-wise division.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two lists must have the same length.\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element wise.\n    \"\"\"\n    result = []\n    for num1, num2 in zip(nums1, nums2):\n        result.append(num1 / num2)\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]/nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists should have the same length\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n\n    # find all the numbers in the string\n    nums = [char for char in test_str if char.isdigit()]\n\n    # sort the numbers in reverse order\n    sorted_nums = sorted(nums, reverse=True)\n\n    # add the sorted numbers to the end of the string\n    result_str = test_str\n    for num in sorted_nums:\n        result_str = result_str.replace(num, '')\n\n    return result_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    # remove all non-numeric characters from the string\n    test_str = ''.join(filter(str.isdigit, test_str))\n    \n    # split the string into a list of characters and numbers\n    char_list = list(test_str)\n    num_list = [char for char in char_list if char.isdigit()]\n    \n    # reverse the list of numbers\n    num_list.reverse()\n    \n    # join the characters and numbers back into a string\n    moved_str = ''.join(char_list)\n    for num in num_list:\n        moved_str = moved_str + num\n    \n    return moved_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n\n    # Initialize a variable to store the index of the last character in the string\n    last_char_index = len(test_str) - 1\n\n    # Loop through each character in the string starting from the last character\n    for i in range(last_char_index, -1, -1):\n\n        # Check if the character is a number\n        if test_str[i].isdigit():\n\n            # Move the character to the end of the string\n            test_str = test_str[:i] + test_str[i+1:]\n\n    return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    # Find all the numbers in the string\n    numbers = re.findall(r'\\d+', test_str)\n\n    # Reverse the order of the numbers and join them back into a string\n    new_str = ''.join(numbers[::-1])\n\n    return new_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    nums = [char for char in test_str if char.isdigit()]\n    return ''.join(nums) + test_str.replace(nums[0], '')"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n    \n    num_list.sort(reverse=True)\n    \n    for num in num_list:\n        test_str = test_str.replace(num, '')\n    \n    return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    # Use regular expressions to find all the numbers in the string\n    num_pattern = r'\\d+'\n    numbers = re.findall(num_pattern, test_str)\n\n    # Reverse the order of the numbers and join them back into a string\n    reversed_num_str = ''.join(numbers[::-1])\n\n    # Find the positions of the numbers in the original string\n    num_positions = [m.start() for m in re.finditer(num_pattern, test_str)]\n\n    # Reorder the characters in the original string to put the numbers at the end\n    reordered_str = test_str[:num_positions[0]] + reversed_num_str + test_str[num_positions[-1]:]\n\n    return reordered_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n    num_str = ''.join(num_list)\n    return test_str + num_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    nums = []\n    for char in test_str:\n        if char.isdigit():\n            nums.append(char)\n    nums.sort(reverse=True)\n    return ''.join(nums) + test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Initialize variables to keep track of numbers and letters\n    num_count = 0\n    letter_count = 0\n    # Initialize an empty list to store numbers and letters\n    num_str = []\n    # Loop through each character in the string\n    for char in test_str:\n        # If the character is a number, append it to the num_str list\n        if char.isdigit():\n            num_str.append(char)\n            num_count += 1\n        # If the character is a letter, append it to the num_str list\n        else:\n            num_str.append(char)\n            letter_count += 1\n    # Return the modified string with numbers moved to the end\n    return ''.join(num_str) + test_str[letter_count:]"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    a.sort()\n    size = 0\n    curr_sum = 0\n    for num in a:\n        curr_sum += num\n        if curr_sum % 2 == 0:\n            size += 1\n        else:\n            curr_sum = num\n    return size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    n = len(a)\n    if n % 2 == 0:\n        return max(largest_subset_size(a[:n//2], a[n//2:]) for i in range(1, n//2+1))\n    else:\n        return max(largest_subset_size(a[:n-1], a[n:]) for i in range(1, n))\n\ndef largest_subset_size(a, b):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers a so that every pair is divisible by b.\n    '''\n    a.sort()\n    b.sort()\n    i, j = 0, 0\n    count = 0\n    while i < len(a) and j < len(b):\n        if a[i] % b[j] == 0:\n            count += 1\n            if count % 2 == 1:\n                return count\n            i += 1\n            j += 1\n        elif a[i] < b[j]:\n            i += 1\n        else:\n            j += 1\n    return count"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    n = len(a)\n    mod = 10**9+7\n    count = 0\n    max_count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] % a[j] == 0:\n                count += 1\n                if count > max_count:\n                    max_count = count\n    return max_count"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    def is_divisible(x, y):\n        \"\"\"\n        Helper function to check if two numbers x and y are divisible.\n        \"\"\"\n        return x % y == 0\n\n    # Create a dictionary to store the size of the largest subsets\n    subset_sizes = {}\n\n    # Iterate over all pairs of numbers in the input list\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            # If the pair is divisible, update the largest subset size for the two numbers\n            if is_divisible(a[i], a[j]):\n                if (a[i], a[j]) not in subset_sizes or subset_sizes[(a[i], a[j])] < j - i + 1:\n                    subset_sizes[(a[i], a[j])] = j - i + 1\n\n    # Find the largest subset size\n    max_size = 0\n    for size in subset_sizes.values():\n        max_size = max(max_size, size)\n\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()  # sort the list in ascending order\n    \n    n = len(a)  # number of elements in the list\n    \n    # initialize variables for the largest subset found and its size\n    largest_subset_size = 0\n    current_subset_size = 0\n    \n    # loop through the list and find the largest subset size\n    for i in range(n):\n        # check if the current element can be included in the current subset\n        if a[i] % 2 == 0:  # even elements\n            if current_subset_size > largest_subset_size:\n                largest_subset_size = current_subset_size\n                current_subset_size = 1\n        else:  # odd elements\n            if current_subset_size > largest_subset_size:\n                largest_subset_size = current_subset_size\n                current_subset_size = 0\n        current_subset_size += 1\n    \n    # check if the current subset size is greater than the largest subset found so far\n    if current_subset_size > largest_subset_size:\n        largest_subset_size = current_subset_size\n    \n    return largest_subset_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    max_size = 0\n    for i in range(len(a)):\n        for j in range(i + 1, len(a)):\n            if a[i] % a[j] == 0 and a[j] % a[i] == 0:\n                max_size = max(max_size, j - i + 1)\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    \n    # create a list of tuples containing the elements of the input list and their index\n    elements = [(x, i) for i, x in enumerate(a)]\n    \n    # sort the list of tuples by the second element in each tuple\n    elements.sort(key=lambda x: x[1])\n    \n    # initialize variables to store the largest subset size and the current subset size\n    largest = 0\n    current = 0\n    \n    # iterate through the sorted list of tuples\n    for i in range(len(elements)):\n        \n        # if the current subset size is greater than the largest subset size, update the largest subset size\n        if current > largest:\n            largest = current\n        \n        # if the current element's index is less than or equal to the index of the next element, increment the current subset size\n        elif elements[i][1] <= elements[i+1][1]:\n            current += 1\n    \n    # if the current subset size is greater than the largest subset size, update the largest subset size\n    if current > largest:\n        largest = current\n    \n    # return the largest subset size\n    return largest"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()  # sort the list in non-increasing order\n    \n    n = len(a)\n    dp = [0] * (n + 1)\n    \n    for i in range(1, n + 1):\n        for j in range(i):\n            if a[j] % a[i] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    \n    return max(dp)"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # sort the list in ascending order\n    a.sort()\n    # initialize variables\n    max_size = 0\n    current_size = 0\n    i = 0\n    \n    # loop through the sorted list\n    while i < len(a):\n        # if the current number is divisible by the next number, add it to the subset\n        if i+1 < len(a) and a[i] % a[i+1] == 0:\n            current_size += 1\n        else:\n            # if the current number is not divisible by the next number, reset the current size and move to the next number\n            current_size = 1\n        \n        # if the current size is greater than the previous maximum size, update the maximum size\n        if current_size > max_size:\n            max_size = current_size\n        \n        # move to the next number in the list\n        i += 1\n    \n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    def is_divisible(x, y):\n        return (x % y == 0) and (y % x == 0)\n    \n    max_size = 0\n    subset = []\n    for i in range(len(a)):\n        for j in range(i + 1, len(a)):\n            if is_divisible(a[i], a[j]):\n                if j - i + 1 > max_size:\n                    max_size = j - i + 1\n                    subset = [a[i], a[j]]\n    \n    return max_size, subset"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n\n    # Merge the two sorted lists\n    arr = arr1 + arr2\n\n    # Sort the merged list\n    arr.sort()\n\n    # Find the median index\n    median_index = n // 2\n\n    # If the length of the list is odd, the median is the middle element\n    if n % 2 == 1:\n        median = arr[median_index]\n    # If the length of the list is even, the median is the average of the middle two elements\n    else:\n        median = (arr[median_index - 1] + arr[median_index]) / 2\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    # Merge the two sorted lists\n    merged_arr = arr1 + arr2\n\n    # Sort the merged array\n    merged_arr.sort()\n\n    # Calculate the length of the sorted array\n    length = len(merged_arr)\n\n    # Calculate the index of the middle element\n    mid = length // 2\n\n    # If the length is odd, return the middle element\n    if length % 2 == 1:\n        return merged_arr[mid]\n    # If the length is even, return the average of the two middle elements\n    else:\n        return (merged_arr[mid - 1] + merged_arr[mid]) / 2\n"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Find the median of arr1\n    mid = n // 2\n    if n % 2 == 0:\n        return (arr1[mid] + arr1[mid - 1]) / 2\n    else:\n        return arr1[mid]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    This function takes three arguments:\n    - arr1: a list of integers\n    - arr2: another list of integers\n    - n: the size of both lists\n    \n    It returns the median of the two sorted lists of the given size.\n    \n    The median of a list is the middle value if the list has an odd number of elements, or\n    the average of the middle two values if the list has an even number of elements.\n    \"\"\"\n    \n    # check if the lists are of the same size\n    if len(arr1)!= len(arr2):\n        raise ValueError(\"Both lists must have the same size\")\n    \n    # check if the lists are sorted\n    if not all(arr1[i] <= arr1[i+1] for i in range(len(arr1)-1)):\n        raise ValueError(\"The first list must be sorted\")\n    if not all(arr2[i] <= arr2[i+1] for i in range(len(arr2)-1)):\n        raise ValueError(\"The second list must be sorted\")\n    \n    # find the middle index of the first list\n    mid1 = n//2\n    \n    # find the middle index of the second list\n    mid2 = n//2\n    \n    # if the lists have an odd number of elements, the median is the middle element\n    if n % 2 == 1:\n        return sorted(arr1)[mid1]\n    \n    # if the lists have an even number of elements, the median is the average of the middle two elements\n    else:\n        return (sorted(arr1)[mid1-1] + sorted(arr1)[mid1])/2"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    # Sort the two arrays\n    arr1.sort()\n    arr2.sort()\n    \n    # Calculate the midpoint of the two sorted arrays\n    midpoint = n // 2\n    \n    # If the arrays have an odd number of elements, the median is the middle element\n    if n % 2 == 1:\n        return arr1[midpoint]\n    \n    # If the arrays have an even number of elements, the median is the average of the middle two elements\n    else:\n        return (arr1[midpoint-1] + arr1[midpoint]) / 2"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Concatenate the two lists\n    arr = arr1 + arr2\n    # Sort the concatenated list\n    arr.sort()\n    # Find the median index\n    mid = n // 2\n    # If the length of the list is odd, return the middle element\n    if n % 2!= 0:\n        return arr[mid]\n    # If the length of the list is even, return the average of the two middle elements\n    else:\n        return (arr[mid - 1] + arr[mid]) / 2"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge the two sorted arrays into a single array\n    merged = arr1 + arr2\n    # Sort the merged array\n    merged.sort()\n    # Find the median\n    if n % 2 == 0:\n        median = (merged[n//2] + merged[n//2-1]) / 2\n    else:\n        median = merged[n//2]\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge the two sorted lists and then sort them\n    merged_list = merge_lists(arr1, arr2)\n    sorted_list = merge_sort(merged_list)\n\n    # Find the median\n    mid = n // 2\n    if n % 2 == 0:\n        median = (sorted_list[mid-1] + sorted_list[mid]) / 2\n    else:\n        median = sorted_list[mid]\n\n    return median\n\n\ndef merge_lists(arr1, arr2):\n    '''\n    Merge two sorted lists into a single sorted list.\n    '''\n    merged_list = []\n    i = j = 0\n\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            merged_list.append(arr1[i])\n            i += 1\n        else:\n            merged_list.append(arr2[j])\n            j += 1\n\n    merged_list += arr1[i:]\n    merged_list += arr2[j:]\n\n    return merged_list\n\n\ndef merge_sort(arr):\n    '''\n    Sort a list using merge sort algorithm.\n    '''\n    if len(arr) <= 1:\n        return arr\n\n    mid = len(arr) // 2\n    left = merge_sort(arr[:mid])\n    right = merge_sort(arr[mid:])\n\n    return merge(left, right)\n\n\ndef merge(left, right):\n    '''\n    Merge two sorted lists using merge sort algorithm.\n    '''\n    merged_list = []\n    i = j = 0\n\n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            merged_list.append(left[i])\n            i += 1\n        else:\n            merged_list.append(right[j])\n            j += 1\n\n    merged_list += left[i:]\n    merged_list += right[j:]\n\n    return merged_list"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    i, j = 0, 0\n    result = []\n\n    while i < n and j < n:\n        if arr1[i] <= arr2[j]:\n            result.append(arr1[i])\n            i += 1\n        else:\n            result.append(arr2[j])\n            j += 1\n\n    while i < n:\n        result.append(arr1[i])\n        i += 1\n\n    while j < n:\n        result.append(arr2[j])\n        j += 1\n\n    if n % 2 == 1:\n        return result[(n // 2)]\n    else:\n        return (result[(n // 2) - 1] + result[n // 2]) / 2"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n\n    # Sort the two lists and merge them into one list\n    merged_list = arr1 + arr2\n    merged_list.sort()\n\n    # Find the median based on the length of the lists\n    if n % 2 == 0:\n        median = (merged_list[n//2-1] + merged_list[n//2]) / 2\n    else:\n        median = merged_list[n//2]\n\n    return median"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def nth_nums(nums, n):\n    '''\n    This function takes a list of numbers and an integer n as input and returns a new list where each number in the original list has been raised to the nth power.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    This function computes the n-th power of each number in a list.\n    \"\"\"\n    # Create an empty list to store the result\n    result = []\n\n    # Iterate over each number in the list\n    for num in nums:\n        # Compute the n-th power of the number and append the result to the result list\n        result.append(num ** n)\n\n    # Return the result list\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    Write a function to compute the n-th power of each number in a list.\n    \"\"\"\n    for i in range(len(nums)):\n        nums[i] **= n\n    return nums"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] **= n\n    return nums"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to check if a given string is uppercase or not.\n    '''\n    if string.isupper():\n        return True\n    else:\n        return False"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to check if a given string is uppercase or not.\n    '''\n    if string.isupper():\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    result = \"\"\n    for char in string:\n        if char.isupper():\n            result += char\n    return result"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_upper(string):\n    \"\"\"\n    Write a python function to convert a given string to uppercase.\n    \"\"\"\n    uppercase = \"\"\n    for char in string:\n        if char.isupper():\n            uppercase += char.upper()\n        else:\n            uppercase += char.lower()\n    return uppercase"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last element in a given list.\n    \"\"\"\n    if len(newList) >= 2:\n        first = newList[0]\n        last = newList[-1]\n        newList[0] = last\n        newList[-1] = first\n    else:\n        print(\"List must have at least two elements to swap.\")"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # store the length of the list\n    length = len(newList)\n    \n    # if the list has a length of 1 or less, there is nothing to swap\n    if length <= 1:\n        return newList\n    \n    # set the first element to the last element\n    newList[0], newList[length-1] = newList[length-1], newList[0]\n    \n    # return the updated list\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # initialize variables to store the first and last elements of the list\n    first = newList[0]\n    last = newList[-1]\n    # swap the first and last elements of the list\n    newList[0] = last\n    newList[-1] = first\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # initialize the length of the list\n    length = len(newList)\n\n    # check if the length of the list is greater than 1\n    if length > 1:\n        # swap the first and last element of the list\n        newList[0], newList[-1] = newList[-1], newList[0]\n\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # initialize variables to hold the first and last elements of the list\n    first = newList[0]\n    last = newList[-1]\n    # create a new list with the first and last elements interchanged\n    newList = [last, first]\n    # return the new list with the first and last elements interchanged\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList):\n    '''\n    This function takes a list as input and swaps the first and last elements of the list.\n    '''\n    first_element = newList[0]\n    last_element = newList[-1]\n    newList[0] = last_element\n    newList[-1] = first_element\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # reverse the list\n    newList.reverse()\n    # swap the first and last element\n    newList[0], newList[-1] = newList[-1], newList[0]\n    # reverse the list again to get the original order\n    newList.reverse()\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last element in a given list.\n    \"\"\"\n    # check if the list has at least 2 elements\n    if len(newList) < 2:\n        return newList\n    \n    # swap the first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    return newList"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef triangle_area(r):\n    \"\"\"\n    Calculate the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n\n    Parameters:\n    r: float\n        The radius of the semicircle.\n\n    Returns:\n    area: float\n        The area of the largest triangle.\n    \"\"\"\n    # Calculate the area of the largest triangle that can be inscribed in a semicircle\n    area = (r**2) * (math.pi * (math.sqrt(2) - 1)) / 6\n\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n\n    def area_of_triangle(a, b, c):\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return area\n\n    def inscribed_circle_radius(a, b, c):\n        s = (a + b + c) / 2\n        radius = math.sqrt((a ** 2 + b ** 2) * (a ** 2 + b ** 2 + c ** 2) - (a ** 2 + b ** 2 + c ** 2) ** 2)\n        return radius\n\n    a = 1\n    b = r - 1\n    c = r - 1\n\n    area_of_largest_triangle = area_of_triangle(a, b, c)\n    inscribed_radius = inscribed_circle_radius(a, b, c)\n\n    largest_triangle_area = area_of_largest_triangle\n    if inscribed_radius > r:\n        largest_triangle_area = area_of_triangle(r, r, r)\n\n    return largest_triangle_area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n\n    # Calculate the semi-perimeter of the circle\n    semicircle_perimeter = 2 * math.pi * r\n\n    # Calculate the areas of the three largest triangles\n    a = semicircle_perimeter * (1 + math.sqrt(3)) / 2\n    b = semicircle_perimeter * (1 - math.sqrt(3)) / 2\n    c = 3 * semicircle_perimeter / 4\n\n    # Find the largest triangle area\n    area = max(a, b, c)\n\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Approximate area using Heron's formula\n    s = (3 * r ** 2) ** 0.5\n    area = (s * (s - r) * (s - 2 * r)) ** 0.5\n\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n\n    # Find the area of the triangle with base r\n    area_base = r ** 2 * 3.14159265358979323846264338327950288419716939937510582097494459230781640628620899862803482534211706798214808651328230664709384460955058223172535940812848111745028410270193852110555964462294895493038196442881097566593344612847564823378678316527120190914564856692346034861045432664821339360726024914127372458700660631558817488152092096282925409171536436789259036001133053054882046652138414695194151160943305727036575959195309218611738193261179310511854807446237996274956735188575272489122793818301194912983367336244065664308602139494639522473719070217986094370277053921717629317675238467481846766940513200056812714526356082778577134275778960917363717872146844090122495343014654958537105079227968925892354201995611212902196086403441815981362977477130996051870721134999999837297804995105973173281609631859502445945534690830264252230825334468503526193118817101000313783875288658753320838142061717766914730359825349042875546873115956286388235378759375"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Find the semi-perimeter of the largest triangle\n    semi_perimeter = 2 * r * math.sin(math.pi/3)\n    \n    # Use the formula for the area of a right triangle to find the area of the largest triangle\n    area = math.sqrt(semi_perimeter * (semi_perimeter - r) * (semi_perimeter - 2 * r))\n    \n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Define the formula for the area of the largest triangle that can be inscribed in a semicircle\n    area = 2 * r * r * (3 - 2 * r)\n    \n    # Return the area of the largest triangle that can be inscribed in a semicircle with a given radius\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    s = r * (3 ** 0.5)  # semi-perimeter\n    area = (s * (s - r) * (s - r)) / 4  # Heron's formula\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    return (r**2)*(3**0.5)"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def triangle_area(r):\n    import math\n\n    # Calculate the semi-perimeter of the largest triangle inscribed in the semicircle\n    s = 2 * math.pi * r\n\n    # Calculate the area of the largest triangle inscribed in the semicircle\n    area = math.sqrt(s * (s - r) * (s - 2 * r))\n\n    return area"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end):\n        if array[i]!= i + 1:\n            return i + 1\n\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if not array:\n        return None\n    elif end is None:\n        end = len(array) - 1\n    for i in range(start, end + 1):\n        if i == array[i]:\n            return i\n    return None"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n\n    if end is None:\n        end = len(array)-1\n\n    for i in range(start,end+1):\n        if array[i]!= i:\n            return i\n\n    return end+1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    if end is None:\n        end = len(array) - 1\n    for i in range(start, end + 1):\n        if i not in array:\n            return i\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)-1\n    \n    while start <= end:\n        mid = start + (end-start)//2\n        \n        if array[mid] == mid+1:\n            end = mid - 1\n        elif array[mid] < mid+1:\n            start = mid + 1\n        else:\n            end = mid - 1\n            \n    return start+1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    if end is None:\n        end = len(array) - 1\n    for i in range(start, end):\n        if array[i]!= i:\n            return i\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers as input and returns the smallest missing number.\n    \n    :param array: A sorted list of natural numbers.\n    :param start: The starting index of the array. Default is 0.\n    :param end: The ending index of the array. Default is the last index of the array.\n    \n    :return: The smallest missing number.\n    \"\"\"\n\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if array[i]!= i:\n            return i\n\n    return end + 1 + start"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start,end+1):\n        if i!= array[i]:\n            return i\n\n    return end+1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = max(array)\n    for num in range(start, end+1):\n        if num not in array:\n            return num\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers and finds the smallest missing number.\n\n    Parameters:\n    array (list): A sorted list of natural numbers.\n    start (int): The starting index of the range to search.\n    end (int): The ending index of the range to search.\n\n    Returns:\n    int: The smallest missing number.\n\n    \"\"\"\n\n    # If the end index is not provided, use the last index of the array\n    if end is None:\n        end = len(array) - 1\n\n    # Iterate through the array and find the first missing number\n    for i in range(start, end + 1):\n        if i == array[i]:\n            continue\n        else:\n            return i"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    \"\"\"\n    Write a function to replace all spaces in the given string with '%20'.\n    \"\"\"\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(list):\n    even_list = []\n    for i in list:\n        if i % 2 == 0:\n            even_list.append(i)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(lst):\n    even_lst = []\n    for num in lst:\n        if num % 2 == 0:\n            even_lst.append(num)\n    return even_lst"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_nums = []\n    for num in list:\n        if num % 2 == 0:\n            even_nums.append(num)\n    return even_nums"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(lst):\n    \"\"\"\n    This function takes a list as input and returns a new list containing only the even numbers in the original list.\n    \"\"\"\n    return [num for num in lst if num % 2 == 0]"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    This function takes in a list of numbers and returns a list containing only the even numbers in the input list.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(lst):\n    \"\"\"\n    This function takes a list of numbers as input and returns a new list containing only the even numbers.\n    \"\"\"\n    even_lst = []\n    for num in lst:\n        if num % 2 == 0:\n            even_lst.append(num)\n    return even_lst"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(lst):\n    # Initialize an empty list to store the even numbers\n    even_lst = []\n    # Loop through each number in the input list\n    for num in lst:\n        # Check if the number is even\n        if num % 2 == 0:\n            # If it is even, add it to the even list\n            even_lst.append(num)\n    # Return the even list\n    return even_lst"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adjacent = [(x-1,y),(x+1,y),(x,y-1),(x,y+1)]\n    return adjacent"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adjacent = []\n    for i in range(x-1, x+2):\n        for j in range(y-1, y+2):\n            if i!= x or j!= y and i >= 0 and j >= 0 and i < 9 and j < 9:\n                adjacent.append((i, j))\n    return adjacent"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def adjac(ele, sub=[]):\n    \"\"\"\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    \"\"\"\n    x, y = ele\n    if x > 0 and y > 0:\n        sub.append((x-1, y-1))\n    if x > 0:\n        sub.append((x-1, y))\n    if x > 0 and y < y_max:\n        sub.append((x-1, y+1))\n    if x < x_max:\n        sub.append((x+1, y))\n    if x < x_max and y < y_max:\n        sub.append((x+1, y+1))\n    if x < x_max and y > 0:\n        sub.append((x+1, y-1))\n    if x > 0 and y > 0 and y < y_max:\n        sub.append((x-1, y-1))\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    coords = [(x,y) for x in range(ele[0]-1,ele[0]+2) for y in range(ele[1]-1,ele[1]+2) if (x,y)!= ele and (x,y) not in sub]\n    return coords"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    if x == 0:\n        y_adj = y - 1\n        x_adj = x\n        sub.append((x_adj, y_adj))\n        if y_adj > 0:\n            y_adj -= 1\n            x_adj = x\n            sub.append((x_adj, y_adj))\n    elif x == 1:\n        y_adj = y + 1\n        x_adj = x\n        sub.append((x_adj, y_adj))\n        if y_adj < 10:\n            y_adj += 1\n            x_adj = x\n            sub.append((x_adj, y_adj))\n    elif y == 0:\n        x_adj = x - 1\n        y_adj = y\n        sub.append((x_adj, y_adj))\n        if x_adj > 0:\n            x_adj -= 1\n            y_adj = y\n            sub.append((x_adj, y_adj))\n    elif y == 10:\n        x_adj = x + 1\n        y_adj = y\n        sub.append((x_adj, y_adj))\n        if x_adj < 10:\n            x_adj += 1\n            y_adj = y\n            sub.append((x_adj, y_adj))\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    # Get the coordinate of the given element\n    x, y = ele\n    # Initialize an empty list to store the adjacent coordinates\n    adj = []\n    # Iterate over all the rows and columns in the grid\n    for i in range(-1, 2):\n        for j in range(-1, 2):\n            # If the current element is adjacent to the given element, add its coordinate to the adjacent list\n            if i!= 0 or j!= 0:\n                # Calculate the new x and y coordinates for the adjacent element\n                new_x = x + i\n                new_y = y + j\n                # Add the adjacent element's coordinate to the adjacent list\n                adj.append((new_x, new_y))\n    # Return the adjacent list\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    rows, cols = len(ele), len(ele[0])\n    adjacency = []\n    # iterate over all the rows and columns of the given tuple\n    for i in range(rows):\n        for j in range(cols):\n            # if the current cell is not a boundary cell, add its adjacent cells to the list\n            if i!= 0 and i!= rows - 1 and j!= 0 and j!= cols - 1:\n                adjacency.append((i-1, j), (i+1, j), (i, j-1), (i, j+1))\n    \n    return adjacency"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def adjac(ele, sub=None):\n    if sub is None:\n        sub = []\n    if len(ele) == 2:\n        sub.append(ele)\n    else:\n        for i in range(len(ele)-1):\n            sub.append((ele[i], ele[i+1]))\n            adjac(ele[i+1], sub)\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def adjac(ele, sub=[]): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    \n    # get the adjacent coordinates\n    x, y = ele\n    \n    # if the adjacent coordinates are valid, append them to the sub list\n    if 0 <= x < 9 and 0 <= y < 9:\n        sub.append((x+1, y))\n        sub.append((x-1, y))\n        sub.append((x, y+1))\n        sub.append((x, y-1))\n    \n    # return the list of adjacent coordinates\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def adjac(ele, sub = []):\n    '''\n    This function takes a coordinate tuple as input and returns all the adjacent coordinates of that tuple.\n    '''\n\n    x, y = ele\n    adjacent = []\n\n    if x > 0 and y > 0:\n        adjacent.append((x - 1, y - 1))\n    if x > 0:\n        adjacent.append((x - 1, y))\n    if x > 0 and y < 29:\n        adjacent.append((x - 1, y + 1))\n    if x < 29:\n        adjacent.append((x + 1, y))\n    if x < 29 and y < 29:\n        adjacent.append((x + 1, y + 1))\n    if x < 29 and y > 0:\n        adjacent.append((x + 1, y - 1))\n    if x > 0 and y > 0 and x < 29 and y < 29:\n        adjacent.append((x - 1, y + 1))\n        adjacent.append((x + 1, y - 1))\n        adjacent.append((x - 1, y - 1))\n        adjacent.append((x + 1, y + 1))\n\n    return adjacent"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    \"\"\"\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    \"\"\"\n    # replace whitespaces with underscores\n    new_text = text.replace(\" \", \"_\")\n    # replace underscores with whitespaces\n    new_text = new_text.replace(\"_\", \" \")\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # replace whitespaces with underscores\n    text = text.replace(\" \", \"_\")\n    # replace underscores with spaces\n    text = text.replace(\"_\", \" \")\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n\n    # initialize an empty string to store the modified text\n    modified_text = ''\n\n    # loop through each character in the text\n    for char in text:\n\n        # if the character is a whitespace, replace it with an underscore\n        if char.isspace():\n            modified_text += '_'\n\n        # if the character is not a whitespace, add it to the modified text\n        else:\n            modified_text += char\n\n    # return the modified text\n    return modified_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = ''\n    for char in text:\n        if char =='':\n            new_text += '_'\n        elif char == '_':\n            new_text +=''\n        else:\n            new_text += char\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Replace spaces with underscores\n    text = text.replace(\" \", \"_\")\n    \n    # Replace underscores with spaces\n    text = text.replace(\"_\", \" \")\n    \n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Replace whitespaces with underscores\n    new_text = text.replace(\" \", \"_\")\n    # Replace underscores with whitespaces\n    new_text = new_text.replace(\"_\", \" \")\n    # Return the new text with spaces replaced by underscores and vice versa\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Split the string into words\n    words = text.split()\n    # Iterate over the words\n    for i in range(len(words)):\n        # Check if the word is a space\n        if words[i].strip() == '':\n            # If so, replace it with an underscore\n            words[i] = '_'\n        # Check if the word is an underscore\n        elif words[i] == '_':\n            # If so, replace it with a space\n            words[i] =''\n    # Join the words back into a string\n    result =''.join(words)\n    return result"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    result = \"\"\n    for i in range(len(text)):\n        if text[i] == \" \":\n            result += \"_\"\n        else:\n            result += text[i]\n    return result"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    \"\"\"\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    \"\"\"\n    # Replace all whitespaces with underscores\n    text = text.replace(\" \", \"_\")\n    # Replace all underscores with whitespaces\n    text = text.replace(\"_\", \" \")\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = ''\n    for char in text:\n        if char.isspace():\n            new_text += '_'\n        else:\n            new_text += char\n    return new_text"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    zero_index = -1\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_index = i\n            break\n    if zero_index == -1:\n        return num_list\n    else:\n        return num_list[:zero_index] + num_list[zero_index+1:]"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_indices = []\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_indices.append(i)\n\n    for i in range(len(zero_indices)):\n        j = len(num_list) - 1\n        while j >= zero_indices[i]:\n            if j >= len(num_list) - 1:\n                num_list.append(0)\n                break\n            num_list[j] = num_list[j+1]\n            j -= 1\n\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            j = i\n            while j < len(num_list) - 1:\n                if num_list[j] == 0:\n                    j += 1\n                else:\n                    num_list[j], num_list[j+1] = num_list[j+1], num_list[j]\n                    break\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    '''\n    This function takes a list as input and moves all zeroes to the end of the list.\n    '''\n    # Find all the zeroes in the list\n    zeroes = [num for num in num_list if num == 0]\n\n    # Sort the non-zeroes in the list in ascending order\n    non_zeroes = sorted([num for num in num_list if num!= 0])\n\n    # Merge the two sorted lists to get the final list with all zeroes at the end\n    result = non_zeroes + zeroes\n\n    return result"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Move all zeroes to the end of the given list.\n    \"\"\"\n    # Initialize two pointers: one at the beginning and one at the end of the list\n    # If the element at the end of the list is not zero, swap it with the element at the beginning of the list\n    # and move the beginning pointer to the next position\n    for i in range(len(num_list)-1, -1, -1):\n        if num_list[i]!= 0:\n            num_list[i], num_list[0] = num_list[0], num_list[i]\n            break"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_index = []\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_index.append(i)\n    for i in range(len(num_list)-1, -1, -1):\n        if i in zero_index:\n            num_list[i], num_list[zero_index.pop()] = num_list[zero_index.pop()], num_list[i]\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    i = 0\n    while i < len(num_list):\n        if num_list[i] == 0:\n            num_list.pop(i)\n        else:\n            i += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Move all zeroes to the end of the given list.\n    \"\"\"\n    # Find the index of the first non-zero number in the list\n    first_nonzero_index = None\n    for index, num in enumerate(num_list):\n        if num!= 0:\n            first_nonzero_index = index\n            break\n    \n    # Move all zeroes to the end of the list\n    if first_nonzero_index is not None:\n        for i in range(len(num_list)-1, first_nonzero_index, -1):\n            num_list[i], num_list[i+1] = num_list[i+1], num_list[i]\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_index = []\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_index.append(i)\n    for j in range(len(zero_index) - 1, -1, -1):\n        num_list.pop(zero_index[j])\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    zero_count = 0\n    non_zero_index = 0\n    for i in range(len(num_list)):\n        if num_list[i]!= 0:\n            num_list[non_zero_index], num_list[i] = num_list[i], num_list[non_zero_index]\n            non_zero_index += 1\n        else:\n            zero_count += 1\n    num_list = num_list[:non_zero_index] + [0] * zero_count + num_list[non_zero_index:]\n    return num_list"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # XOR of all elements in the list\n    xor_sum = 0\n    for i in range(n):\n        xor_sum ^= arr[i]\n\n    # XOR of all pairs of elements in the list\n    for i in range(n):\n        xor_sum ^= arr[i] ^ arr[i+1]\n\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    if len(arr) < 2:\n        return 0\n    elif len(arr) == 2:\n        return arr[0] ^ arr[1]\n    else:\n        first = pair_xor_Sum(arr[1:], n)\n        second = arr[0] ^ arr[n]\n        return first ^ second"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    \n    for i in range(n):\n        xor_sum ^= arr[i]\n        \n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            xor_sum = xor_sum ^ arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    This function takes a list and the length of the list as arguments.\n    It returns the sum of xor of all pairs of numbers in the list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr, n):\n    # Initialize sum variable to 0\n    xor_sum = 0\n    # Iterate through the array\n    for i in range(n):\n        # Iterate through the remaining elements in the array\n        for j in range(i+1, n):\n            # Add the xor of the current pair to the sum\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    total_sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum = arr[i] ^ arr[j]\n            total_sum += xor_sum\n    return total_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # XOR operation for two numbers\n    def xor(a, b):\n        return a ^ b\n\n    # XOR of all pairs of numbers\n    xor_sum = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            xor_sum ^= arr[i] ^ arr[j]\n\n    # Calculate the sum of all pairs of numbers XORed\n    total_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            total_sum ^= arr[i] ^ arr[j]\n\n    return xor_sum, total_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        xor_sum ^= arr[i]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr, n):\n    \"\"\"\n    This function takes a list of integers and returns the sum of xor of all pairs of numbers in the list.\n    \"\"\"\n    xor_sum = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    result = []\n    while iterable:\n        result.append(heapq.heappop(iterable))\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    This function sorts the given list using the heap sort algorithm.\n    '''\n    # Converting the list into a heap\n    heap = [x for x in iterable]\n    heap_size = len(heap)\n\n    # Performing heap sort\n    for i in range(heap_size//2 - 1, -1, -1):\n        heapify(heap, heap_size, i)\n\n    for i in range(heap_size-1, 0, -1):\n        hq.heappop(heap)\n        hq.heappush(heap, iterable[i])\n\n    return heap"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Convert the input list to a min-heap\n    hq.heapify(iterable)\n\n    # Remove the smallest element from the heap and add it to the end of the sorted list\n    sorted_list = []\n    while hq.heapify(iterable):\n        sorted_list.append(hq.heappop(iterable))\n\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    This function sorts the given list using heap sort algorithm.\n    '''\n    # convert list to heap\n    hq.heapify(iterable)\n    # extract elements from heap one by one and insert them into a new list\n    sorted_list = []\n    while iterable:\n        sorted_list.append(iterable[0])\n        hq.heappop(iterable)\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heapsort algorithm.\n    '''\n    # Converting the given iterable to a list\n    lst = list(iterable)\n    # Building a max heap\n    hq.heapify(lst)\n    # Sorting the heap\n    for i in range(len(lst)-1,0,-1):\n        hq.heappop(lst)\n        hq.heappush(lst, lst[i])\n    # Converting the sorted list to an iterable and returning it\n    return iter(lst)"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    n = len(iterable)\n    for i in range(n//2 - 1, -1, -1):\n        hq.heapify(iterable, n, i)\n\n    for i in range(n-1, 0, -1):\n        hq.heappop(iterable)\n        hq.heappush(iterable, iterable[-1])"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    while iterable:\n        iterable.pop()\n        hq.heappush(iterable, hq.heappop(iterable))\n"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Convert the iterable to a list to modify it\n    data = list(iterable)\n    n = len(data)\n    \n    # Build the heap from the list\n    for i in range(n//2-1, -1, -1):\n        sift_down(data, i, n)\n    \n    # Extract the elements from the heap in sorted order\n    for i in range(n-1, 0, -1):\n        data[0], data[i] = data[i], data[0]\n        sift_down(data, 0, i)\n    \n    # Convert the sorted list back to the original iterable type\n    return type(iterable)(data)\n\n\ndef sift_down(data, i, n):\n    '''\n    Implement the heapify algorithm to build a heap.\n    '''\n    smallest = i\n    left = 2*i+1\n    right = 2*i+2\n    \n    if left < n and data[left] < data[smallest]:\n        smallest = left\n    \n    if right < n and data[right] < data[smallest]:\n        smallest = right\n    \n    if smallest!= i:\n        data[i], data[smallest] = data[smallest], data[i]\n        sift_down(data, smallest, n)"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    result = []\n    while iterable:\n        result.append(heapq.heappop(iterable))\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = [None] * len(iterable)\n    heapq.heapify(heap)\n    for item in iterable:\n        hq.heappush(heap, item)\n    return [hq.heappop(heap) for _ in range(len(iterable))]"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    if sale_amount >= actual_cost:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    if actual_cost >= sale_amount:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    if actual_cost >= sale_amount: \n        return \"Profitable\"\n    elif sale_amount - actual_cost >= 0: \n        return \"No Profit\"\n    else:\n        return \"Loss\""
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    This function takes two arguments: actual_cost and sale_amount. \n    It returns True if the given amount has no profit and no loss, and False otherwise. \n    If the sale_amount is greater than or equal to the actual_cost, then it has no profit. \n    If the sale_amount is less than the actual_cost, then it has no loss. \n    '''\n\n    if sale_amount >= actual_cost:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount <= actual_cost:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    Check whether the given amount has no profit and no loss\n\n    Parameters:\n    actual_cost (float): the actual cost of the sale\n    sale_amount (float): the amount being sold\n\n    Returns:\n    bool: True if the sale has no profit and no loss, False otherwise\n    \"\"\"\n    return sale_amount >= actual_cost"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    # calculate the profit and loss\n    profit = sale_amount - actual_cost\n    loss = actual_cost - sale_amount\n\n    # check whether the profit and loss are zero or not\n    if profit == 0 and loss == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost >= sale_amount:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    if actual_cost - sale_amount >= 0: \n        return False \n    else: \n        return True"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    \n    # Calculate profit and loss\n    profit = sale_amount - actual_cost\n    \n    # Check for no profit and loss\n    if profit == 0 and sale_amount == actual_cost:\n        return True\n    else:\n        return False"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Convert wind velocity to m/s\n    v = v * 1.60934  # km/h to m/s\n    \n    # Calculate the wind chill temperature\n    wchill = 35.74 + 0.6215 * t - 35.75 * math.pow(t, 0.16) + 0.4275 * math.pow(t, 0.16) * math.cos(2 * math.pi * v / 180.0)\n    \n    # Round the wind chill temperature to the nearest integer\n    wchill_rounded = int(wchill + 0.5)\n    \n    return wchill_rounded"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if v <= 0 or t <= 0:\n        return None\n    \n    # Convert temperature to Kelvin\n    k = t + 273.15\n    \n    # Calculate the wind chill coefficient\n    cc = 0.6219716 - 0.000006497 * k - 0.0018513 * math.pow(k, 2) + 0.00000128 * math.pow(k, 3) - 0.00000000083 * math.pow(k, 4)\n    \n    # Calculate the wind chill temperature\n    wc = cc * v\n    \n    # Calculate the wind chill index\n    wci = round(wc / (23.7 - wc))\n    \n    return wci"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Calculates the wind chill index rounded to the nearest integer based on the given wind velocity and temperature in celsius.\n    '''\n    if t < -40:\n        return 0\n    elif t <= 0:\n        return 0\n    elif t <= 10:\n        return 0\n    elif t > 10:\n        return int(round(13.12 + 0.6215 * v + 11.37 * math.log10(v)))"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef wind_chill(v,t):\n    \"\"\"\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n\n    # Calculate the wind chill in celsius\n    wc = 35.74 + 0.6215*t - 35.75*math.log(t) + 0.4275*v**0.16 + 0.2468*v**0.16*t - 0.0068*v**0.16*t**2\n\n    # Round the wind chill to the nearest integer\n    wc_int = int(wc + 0.5)\n\n    # Check if the wind chill index is above the threshold\n    if wc_int > 100:\n        return 100\n    elif wc_int < 0:\n        return 0\n    else:\n        return wc_int"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Calculate the wind chill temperature\n    wc_temp = 0.0065 * t - 0.1862 * v**0.16 + 35.74\n    \n    # Round the wind chill temperature to the nearest integer\n    wc_temp_rounded = math.floor(wc_temp + 0.5)\n    \n    return wc_temp_rounded"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wind_speed_kmph = v * 1.60934\n    #conversion from km/h to m/s\n    temperature_celsius = t - 273.15\n    \n    #calculate the wind chill temperature using the formulae:\n    #W = sqrt(55/100 * ((T + 273.15)^0.16) + 35/100 * ((T + 273.15)^0.16))\n    w = math.sqrt(55/100 * (temperature_celsius ** 0.16) + 35/100 * (temperature_celsius ** 0.16))\n    \n    #calculate the wind chill index:\n    #WC = 35.74 + 0.6215 * W - 35.75 * math.exp((17.625 * (W - 268.15)) / (W + 247.57))\n    wc = 35.74 + 0.6215 * w - 35.75 * math.exp((17.625 * (w - 268.15)) / (w + 247.57))\n    \n    #round the wind chill index to the nearest integer:\n    wc = round(wc)\n    \n    return wc"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    c = 0.62197183   # Constant for converting celsius to fahrenheit\n    f = (c * t) + 32   # Convert celsius to fahrenheit\n\n    if v > 10:  # If wind velocity is greater than 10 km/h\n        w_speed = v * 1.1111111111111111   # Adjust wind velocity by 11% to match V10 climate standard\n    else:\n        w_speed = v * 1.6666666666666667   # Adjust wind velocity by 16.67% to match V10 climate standard\n\n    w_speed_mph = w_speed * 2.236936292054401E-06   # Convert wind speed from km/h to miles per hour\n    w_speed_kmph = w_speed * 3.6   # Convert wind speed from km/h to kilometers per hour\n\n    if w_speed_mph > 18:   # If wind speed is greater than 18 miles per hour\n        w_speed_mph = 18   # Limit wind speed to 18 miles per hour\n\n    if w_speed_kmph > 12.9:   # If wind speed is greater than 12.9 kilometers per hour\n        w_speed_kmph = 12.9   # Limit wind speed to 12.9 kilometers per hour\n\n    w_speed_index = (w_speed_mph / 18) + (w_speed_kmph / 12.9)   # Calculate wind speed index\n\n    if w_speed_index < 0:   # If wind speed index is less than 0\n        w_speed_index = 0   # Limit wind speed index to 0\n\n    if w_speed_index > 10:   # If wind speed index is greater than 10\n        w_speed_index = 10   # Limit wind speed index to 10\n\n    wc_index = 35.74 + (0.6215 * f) - (35.75 * math.log(w_speed_index)) + (0.4275 * math.log(f))\n\n    return round(wc_index)"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Calculates the wind chill index rounded to the next integer\n    given the wind velocity in km/h and a temperature in celsius.\n\n    :param v: wind velocity in km/h\n    :type v: float\n    :param t: temperature in celsius\n    :type t: float\n    :return: wind chill index rounded to the next integer\n    :rtype: int\n    \"\"\"\n\n    # conversion factors\n    F_to_C = 1.8\n    C_to_K = 273.15\n    R_v = 0.0065\n    R_t = 0.0000063\n\n    # calculate temperature in Kelvin\n    K = t + C_to_K\n\n    # calculate dew point temperature\n    D = (v * (1 - R_v * t / K)) / (R_t + R_v * t / K)\n\n    # calculate the wind chill index\n    wci = int(math.ceil((F_to_C * D) / 10))\n\n    return wci"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef wind_chill(v,t):\n    \"\"\"\n    This function calculates the wind chill index rounded to the nearest integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    \n    # convert temperature to Fahrenheit and calculate the wind chill index\n    fahrenheit = (t * 9/5) + 32\n    wc_index = 13.12 + (0.6215 * v) - (35.75 * math.log(fahrenheit)) + (0.4275 * math.log(fahrenheit))**2\n    \n    # round the wind chill index to the nearest integer and return it\n    return int(wc_index + 0.5)"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Convert temperature to Kelvin\n    t_k = t + 273.15\n    \n    # Calculate wind chill in Celsius\n    wc = ((0.62197 * v) / (t_k - 273.15))\n    \n    # Convert wind chill to Fahrenheit\n    wc_f = wc * 1.8 + 32\n    \n    # Round wind chill to the nearest integer\n    wc_int = math.ceil(wc_f)\n    \n    return wc_int"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Initialize a variable to store the sum of the lengths of the names\n    total_length = 0\n    \n    # Loop through each name in the list\n    for name in sample_names:\n        # Check if the name starts with a lowercase letter\n        if name[0].islower():\n            # If it does, skip to the next name in the list\n            continue\n        else:\n            # If it doesn't, add the length of the name to the total_length variable\n            total_length += len(name)\n            \n    # Return the total_length of the names after removing the ones that start with a lowercase letter\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    \"\"\"\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    \"\"\"\n    # initialize the sum variable to 0\n    total_length = 0\n    \n    # loop through the list of names\n    for name in sample_names:\n        # check if the name starts with a lowercase letter\n        if name[0].islower():\n            # skip the name and move on to the next one\n            continue\n        # add the length of the name to the total length\n        total_length += len(name)\n    \n    # return the total length\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    count = 0\n    for name in sample_names:\n        if name[0].isupper():\n            count += len(name)\n    return count"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        else:\n            sum_length += len(name)\n    return sum_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():  # checking if the first letter of the name is uppercase\n            continue  # if it is, moving on to the next name\n        total_length += len(name)  # if the first letter is not uppercase, adding the length of the name to the total length\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum(len(name) for name in sample_names if name[0].isupper())"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum([len(name) for name in sample_names if name[0].isupper()])"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        else:\n            sum += len(name)\n    return sum"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    pattern = re.compile(r'\\([^)]*\\)')\n    return pattern.sub('', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^)]*\\)')\n    items = pattern.sub('', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Removing the parenthesis from the string\n    items = re.sub(r'\\([^)]*\\)', '', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # define regular expression pattern to match parenthesis\n    pattern = re.compile(r'\\(.*?\\)')\n    # replace pattern with empty string to remove parenthesis\n    items = pattern.sub('', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Using regular expressions to match and remove the parenthesis\n    pattern = re.compile(r'\\([^)]*\\)')\n    result = pattern.sub('', items)\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\(.*?\\)'\n    return re.sub(pattern, '', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\(.*?\\)'\n    items = re.sub(pattern, '', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^)]*\\)')\n    result = pattern.sub('', items)\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    pattern = re.compile(r\"\\(([^)]+)\\)\")\n    return pattern.sub(\"\", items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\((.*?)\\)'\n    items_without_parenthesis = re.sub(pattern, '', items)\n    return items_without_parenthesis"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return (n * (n - 1)) // 2"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n\n    # Check if the input is an integer\n    if not isinstance(n, int):\n        raise ValueError(\"Input must be an integer.\")\n\n    # Check if the input is positive\n    if n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n\n    # Initialize the first nonagonal number to 1\n    nonagonal_number = 1\n\n    # Loop until we have found the nth nonagonal number\n    for i in range(2, n+1):\n        # Calculate the current nonagonal number\n        nonagonal_number = 4*nonagonal_number - 6\n\n        # Check if we have found the nth nonagonal number\n        if i == n:\n            return nonagonal_number"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    a = 1\n    b = 1\n    count = 1\n    while count <= n:\n        a += b\n        b += 2\n        count += 1\n    return a - 1"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n < 2:\n        return n\n\n    return (2 * n) - 1"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n <= 0:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        return (2 * n - 1) * (is_nonagonal(n-1) + is_nonagonal(n-2))"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    Write a function to find the nth nonagonal number.\n    \"\"\"\n    # Function to calculate the nth nonagonal number\n    def nth_nonagonal(n):\n        \"\"\"\n        Write a function to find the nth nonagonal number.\n        \"\"\"\n        # Initialize variables\n        a = 1\n        b = 1\n        count = 1\n        # Calculate the nth nonagonal number\n        while count < n:\n            c = a + b\n            if c % 2 == 0:\n                a = b\n                b = c\n            else:\n                b = c\n            count += 1\n        return b\n    # Return the nth nonagonal number\n    return nth_nonagonal(n)"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n < 1: \n        return None\n    elif n == 1: \n        return 1\n    else: \n        return is_nonagonal(n-1) + is_nonagonal(n-2)"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n <= 0:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        return 2 * (n - 1) + 1"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Initialize the first two nonagonal numbers\n    a, b = 1, 1\n\n    # Loop through the remaining nonagonal numbers\n    for i in range(2, n+1):\n        # Compute the next nonagonal number\n        c = a + b\n        # Update the values of a and b\n        a = b\n        b = c\n\n    # Return the nth nonagonal number\n    return a"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n\n    # Initialize variables for the first and last rows\n    row1 = 1\n    row2 = 2\n\n    # Calculate the nth nonagonal number\n    for i in range(3, n+1):\n        row1, row2 = row2, row1 + row2\n\n    return row2"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b(z)[^z]*\\b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r\"(?<![a-zA-Z])(z)(?![a-zA-Z])\"\n    return re.search(pattern, text)"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Find all the words in the text\n    words = re.findall(r'\\b\\w+\\b', text)\n    \n    # Iterate over the words and check if they contain 'z'\n    for word in words:\n        if word[0]!= 'z' and word[-1]!= 'z':\n            return True\n    \n    return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b[a-zA-Z]+z\\b'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b[zZ]\\w+\\b'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b\\w*[zZ]\\w*\\b' # match word characters (except 'z') and 'z' at the middle of the word\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'(?<!\\w)(z)(?!\\w)'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    \n    pattern = r'(?<![\\w\\s])z(?!\\w)'\n    \n    matches = re.findall(pattern, text)\n    \n    if len(matches) > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b(z)\\w+\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n\n    pattern = r'(?<!\\w)z(?!\\w)'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k): \n    # Reverse the entire array\n    input = input[::-1]\n\n    # Reverse the array upto the position k-1\n    input[:k] = input[:k][::-1]\n\n    # Reverse the entire array again\n    input = input[::-1]\n\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n\n    # Reverse the array from 0 to k-1\n    for i in range(k): \n        input[i], input[k-1-i] = input[k-1-i], input[i] \n\n    return input "
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Reverse the entire array\n    input.reverse()\n\n    # Reverse the array upto kth position\n    for i in range(len(input)-1, k-1, -1):\n        input[i], input[k-1] = input[k-1], input[i]"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # initializing an empty list to store the reversed elements\n    reversed_list = []\n    # initializing variables for start and end indices of the array\n    start = 0\n    end = len(input)-1\n    # loop through the array from start to k-1 (exclusive)\n    for i in range(start, k):\n        # append the element at start index to the reversed_list\n        reversed_list.append(input[start])\n        # increment the start index\n        start += 1\n    # loop through the array from k to end (exclusive)\n    for i in range(k, end):\n        # append the element at current index to the reversed_list\n        reversed_list.append(input[i])\n        # increment the current index\n        i += 1\n    # append the last element of the array to the reversed_list\n    reversed_list.append(input[end])\n    # return the reversed array\n    return reversed_list"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    if k > n:\n        print(\"Invalid input\")\n        return None\n    else:\n        temp = input[0:k]\n        reverse_array(input[0:k])\n        reverse_array(input[k:n])\n        reverse_array(temp)"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k):\n    n = len(input)\n    for i in range(k, n):\n        input[i], input[i-k] = input[i-k], input[i]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    # Step 1: Reverse the entire array\n    input = input[::-1]\n    # Step 2: Reverse the array up to the given position k\n    input[:k] = input[:k][::-1]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    if k <= 0 or k > n:\n        return \"Invalid input\"\n    else:\n        for i in range(k-1, n//2):\n            input[i], input[n-i-1] = input[n-i-1], input[i]\n        return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    k = k - 1\n    for i in range(n//2):\n        temp = input[i]\n        input[i] = input[n-1-i]\n        input[n-1-i] = temp\n    \n    return input[:k+1]"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    This function reverses an array upto a given position.\n    '''\n    n = len(input)\n    start = 0\n    end = n-1\n    \n    while start < k-1:\n        input[start], input[end] = input[end], input[start]\n        start += 1\n        end -= 1\n    \n    while start < end:\n        input[start], input[end] = input[end], input[start]\n        start += 1\n        end -= 1\n    \n    return input"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = (test_tup, test_dict)\n    return new_tup\n\ntest_dict = {'key1': 'value1', 'key2': 'value2'}\ntest_tup = ('apple', 'banana', 'cherry')\nnew_tup = add_dict_to_tuple(test_tup, test_dict)\n\nprint(new_tup)"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = test_tup + (test_dict,)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Combine the tuple and the dictionary into a new dictionary\n    new_dict = dict(zip(test_tup, test_dict.items()))\n    # Convert the new dictionary to a tuple\n    new_tup = tuple(new_dict.values())\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_dict = test_dict.copy()\n    new_dict[\"value\"] = \"added_value\"\n    new_tuple = tuple(test_tup + (new_dict,))\n    return new_tuple"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_dict = test_dict.copy()  # create a copy of the dictionary so that we don't modify the original one\n    new_dict['key'] = 'new_value'  # add a new key-value pair to the copy\n    return tuple(test_tup + (new_dict,))  # concatenate the tuple with the new dictionary as a tuple"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Convert the dictionary to a list of key-value pairs\n    test_list = list(test_dict.items())\n    # Append the list to the tuple\n    new_tup = test_tup + test_list\n    # Return the new tuple\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return tuple(test_tup + test_dict.items())"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = test_tup + (test_dict,)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Define an empty dictionary to store the updated values\n    updated_dict = {}\n\n    # Iterate through each key in the dictionary\n    for key in test_dict:\n        # If the key already exists in the tuple, add the value to the tuple\n        if key in test_tup:\n            updated_dict[key] = test_dict[key]\n        # If the key does not exist in the tuple, add the key and value to the tuple\n        else:\n            updated_dict[key] = test_tup[key]\n\n    # Return the updated dictionary as a tuple\n    return tuple(updated_dict.items())"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    N = len(cost)\n    \n    # Initialize a dictionary to store the maximum average for each path\n    max_avg_dict = {}\n    \n    # Compute the maximum average for a path that visits the first cell\n    max_avg = cost[0][0]\n    max_avg_dict[(0, 0)] = max_avg\n    \n    # Compute the maximum average for all paths starting from the second cell\n    for i in range(1, N):\n        for j in range(1, N):\n            # Compute the maximum average for the path starting from (i, j)\n            if i > 0:\n                max_avg = max(max_avg, max_avg_dict[(i-1, j)] + cost[i][j])\n            if j > 0:\n                max_avg = max(max_avg, max_avg_dict[(i, j-1)] + cost[i][j])\n            \n            # Update the maximum average for the path starting from (i, j)\n            max_avg_dict[(i, j)] = max_avg\n    \n    # Find the path with the maximum average\n    max_avg = max(max_avg_dict.values())\n    max_path = [(i, j) for i, j in max_avg_dict.keys() if max_avg_dict[i, j] == max_avg]\n    \n    # Compute the total cost and number of cells visited in the path\n    total_cost = 0\n    num_cells = 0\n    for i in range(len(max_path)-1):\n        total_cost += cost[max_path[i][0]][max_path[i][1]]\n        num_cells += 2\n    \n    # Return the maximum average and the path with the maximum average\n    return max_avg, max_path"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    # initialize the maximum average and its index\n    max_avg = 0\n    max_path_index = 0\n    # initialize variables to keep track of the current cell index and total cost\n    curr_cell = 0\n    total_cost = 0\n    # loop through each cell\n    for i in range(n):\n        # if the cell is not the bottom right cell, move down or right and update the total cost\n        if i < n-1 and curr_cell < n*n-1:\n            curr_cell += 1\n            total_cost += cost[i][curr_cell-1]\n        # if the cell is the bottom right cell, update the maximum average and its index\n        if i == n-1 and curr_cell == n*n-1:\n            curr_cell += 1\n            avg = total_cost/curr_cell\n            if avg > max_avg:\n                max_avg = avg\n                max_path_index = i-curr_cell+1\n    # return the maximum average and its index\n    return max_avg, max_path_index"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    n = len(cost)\n    max_avg = 0\n    \n    # Iterate through each cell in the matrix\n    for i in range(n):\n        for j in range(n):\n            \n            # Initialize variables to keep track of the sum of the cost and the number of cells visited in the path\n            current_cost = cost[i][j]\n            current_num_cells = 1\n            \n            # Check if we need to move right or down\n            if i < n-1:\n                current_cost += cost[i+1][j]\n                current_num_cells += 1\n            if j < n-1:\n                current_cost += cost[i][j+1]\n                current_num_cells += 1\n            \n            # Update the max average if we find a path with a higher average\n            if current_cost/current_num_cells > max_avg:\n                max_avg = current_cost/current_num_cells\n    \n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    max_avg = 0\n    max_path = []\n\n    for i in range(N):\n        for j in range(N):\n            # check for right move\n            if i < N-1 and j < N-1 and cost[i][j] <= cost[i][j+1] and cost[i][j] <= cost[i+1][j]:\n                temp_avg = (cost[i][j] + cost[i][j+1] + cost[i+1][j]) / 3\n                if temp_avg > max_avg:\n                    max_avg = temp_avg\n                    max_path = [(i,j), (i,j+1), (i+1,j)]\n\n            # check for down move\n            if i < N-1 and j < N-1 and cost[i][j] <= cost[i][j] and cost[i][j] <= cost[i][j+1]:\n                temp_avg = (cost[i][j] + cost[i][j] + cost[i][j+1]) / 3\n                if temp_avg > max_avg:\n                    max_avg = temp_avg\n                    max_path = [(i,j), (i,j+1), (i,j+2)]\n\n            # check for left move\n            if i < N-1 and j > 0 and cost[i][j] <= cost[i][j-1] and cost[i][j] <= cost[i+1][j]:\n                temp_avg = (cost[i][j] + cost[i][j-1] + cost[i+1][j]) / 3\n                if temp_avg > max_avg:\n                    max_avg = temp_avg\n                    max_path = [(i,j), (i,j-1), (i+1,j)]\n\n            # check for up move\n            if i > 0 and j < N-1 and cost[i][j] <= cost[i-1][j] and cost[i][j] <= cost[i][j+1]:\n                temp_avg = (cost[i][j] + cost[i-1][j] + cost[i][j+1]) / 3\n                if temp_avg > max_avg:\n                    max_avg = temp_avg\n                    max_path = [(i,j), (i-1,j), (i,j+1)]\n\n    return max_path"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    # initialize variables\n    max_average = 0\n    max_path = []\n    \n    # loop through each cell\n    for i in range(len(cost)):\n        for j in range(len(cost[0])):\n            \n            # check if the current cell is already visited or not\n            if cost[i][j] == 0 or (i,j) in visited_cells:\n                continue\n            \n            # initialize variables\n            total_cost = 0\n            visited_cells = set()\n            \n            # add the current cell to the visited set\n            visited_cells.add((i,j))\n            \n            # helper function to recursively add adjacent cells to the visited set\n            def add_neighbors(x,y,visited):\n                # check if the adjacent cell is within the boundaries of the matrix\n                if x >= len(cost) or x < 0 or y >= len(cost[0]) or y < 0:\n                    return\n                # check if the adjacent cell is already visited\n                if (x,y) in visited or cost[x][y] == 0:\n                    return\n                # add the adjacent cell to the visited set\n                visited.add((x,y))\n                # add the adjacent cell to the total cost and call itself recursively with the adjacent cell\n                total_cost += cost[x][y]\n                add_neighbors(x+1,y,visited)\n                add_neighbors(x,y+1,visited)\n            \n            # recursively add adjacent cells to the visited set\n            add_neighbors(i,j,visited_cells)\n            \n            # compute the average of the current path\n            current_average = total_cost / len(visited_cells)\n            \n            # update the maximum average if the current path has a higher average than the current maximum\n            if current_average > max_average:\n                max_average = current_average\n                max_path = [(i,j)]\n            elif current_average == max_average:\n                max_path.append((i,j))\n    \n    # return the maximum average path\n    return max_path"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    # initialize variables\n    N = len(cost)\n    visited = [[0]*N for _ in range(N)]\n    max_avg = 0\n    current_path = [(0,0)]\n    \n    # function to calculate the average of the current path\n    def calculate_avg(current_path):\n        total_cost = 0\n        for i, j in current_path:\n            total_cost += cost[i][j]\n        return total_cost / len(current_path)\n    \n    # function to expand the current path\n    def expand_path(current_path, direction):\n        i, j = current_path[-1]\n        if direction == 'right':\n            i += 1\n        else:\n            j += 1\n        if i == N-1 and j == N-1:\n            if calculate_avg(current_path) > max_avg:\n                max_avg = calculate_avg(current_path)\n                current_path.append((i,j))\n            return\n        if i < N and j < N and visited[i][j] == 0:\n            visited[i][j] = 1\n            current_path.append((i,j))\n            expand_path(current_path, 'right')\n            current_path.pop()\n            visited[i][j] = 0\n            expand_path(current_path, 'down')\n            current_path.pop()\n            visited[i][j] = 0\n    \n    # expand the path starting from the top-left cell\n    expand_path(current_path, 'right')\n    expand_path(current_path, 'down')\n    expand_path(current_path, 'right')\n    expand_path(current_path, 'down')\n    \n    # return the maximum average of all paths\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    N = len(cost)\n    visited = [[False]*N for _ in range(N)]\n    visited[0][0] = True\n    max_avg = float('-inf')\n    max_path = []\n    \n    def dfs(i, j, current_path, current_avg):\n        if i == N-1 and j == N-1:\n            if current_avg > max_avg:\n                max_avg = current_avg\n                max_path = current_path\n            return\n        \n        if visited[i][j]:\n            return\n        \n        visited[i][j] = True\n        current_path.append((i, j))\n        if cost[i][j] > 0:\n            dfs(i+1, j, current_path, current_avg + cost[i][j])\n            dfs(i, j+1, current_path, current_avg + cost[i][j])\n        current_path.pop()\n        visited[i][j] = False\n    \n    for i in range(N):\n        dfs(0, 0, [(i, 0)], 0)\n    \n    return max_avg, max_path"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    \"\"\"\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    \"\"\"\n    N = len(cost)\n    max_avg = 0\n    \n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                continue\n            \n            if i == 0:\n                max_avg = max(max_avg, sum(cost[i][j:]) / (j + 1))\n            elif j == 0:\n                max_avg = max(max_avg, sum(cost[i][j:]) / (i + 1))\n            elif i == N - 1 and j == N - 1:\n                max_avg = max(max_avg, sum(cost[i][j:]) / (j + 1))\n            else:\n                max_avg = max(max_avg, sum(cost[i][j:]) / (j + 1) + \n                                sum(cost[i][j+1:]) / (i + 1) - \n                                sum(cost[i][j-1:]) / (N - j - 1) - \n                                sum(cost[i+1][j:]) / (N - i - 1))\n    \n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    max_avg = 0\n    dp = [[0]*n for i in range(n)]\n\n    # Base case: if only one cell exists, its cost is considered as 0\n    for i in range(n):\n        dp[0][i] = 0\n    for i in range(n):\n        dp[i][0] = 0\n\n    # Fill the DP table\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j-1], dp[i-1][j]) + cost[i-1][j-1]\n            if i == n-1 and j == n-1:\n                max_avg = max(max_avg, dp[i][j])\n\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    # Initialize variables\n    N = len(cost)\n    max_avg = 0\n    total_cost = 0\n    visited_cells = 0\n\n    # Iterate through all paths\n    for i in range(N):\n        for j in range(N):\n            visited_cells += 1\n\n            # Compute the cost of the current cell\n            current_cost = cost[i][j]\n\n            # If the current cell is part of the path, update the total cost and check if it's the maximum\n            if (i == 0 and j == N-1) or (i > 0 and j == N-1) or (i == N-1 and j == 0) or (i == N-1 and j > 0):\n                total_cost += current_cost\n                if total_cost > max_avg:\n                    max_avg = total_cost\n\n            # Move to the right or down\n            if i == 0:\n                cost[i][j] = current_cost + cost[i][j+1]\n            elif i > 0:\n                cost[i][j] = current_cost + min(cost[i-1][j], cost[i][j+1])\n            elif i == N-1:\n                cost[i][j] = current_cost + cost[i][j-1]\n            else:\n                cost[i][j] = current_cost + min(cost[i-1][j], cost[i][j-1])\n\n    # Compute the average of all paths\n    return max_avg / visited_cells"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    # Create an empty list to store the filtered students\n    filtered_students = []\n    \n    # Loop through each student in the dictionary\n    for name, data in students.items():\n        # Extract the height and weight of the student\n        height, weight = data\n        \n        # Check if the student's height and weight are above the minimum\n        if height > h and weight > w:\n            # If the student meets the criteria, add them to the filtered students list\n            filtered_students.append(name)\n            \n    # Return the filtered students list\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    result = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            result[name] = data\n    return result"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, student_data in students.items():\n        if student_data[0] > h and student_data[1] > w:\n            filtered_students[name] = student_data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    result = {}\n    for name, (height, weight) in students.items():\n        if height >= h and weight >= w:\n            result[name] = students[name]\n    return result"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    # iterate through the students dictionary\n    for name, data in students.items():\n        # unpack the height and weight from the tuple\n        height, weight = data\n        # check if the height is above the minimum and the weight is above the minimum\n        if height > h and weight > w:\n            print(f\"Name: {name}, Height: {height}, Weight: {weight}\")"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    # create an empty list to store the filtered students\n    filtered_students = []\n\n    # iterate over the students in the dictionary\n    for name, (height, weight) in students.items():\n        # check if the student's height and weight are above the minimum\n        if height > h and weight > w:\n            # add the student to the filtered students list\n            filtered_students.append(name)\n\n    # return the filtered students list\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_data(students, h, w):\n    \"\"\"\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    \"\"\"\n    filtered_students = {}\n    for student, values in students.items():\n        if values[0] > h and values[1] > w:\n            filtered_students[student] = values\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_data(students, h, w):\n    \"\"\"\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    \"\"\"\n\n    # Loop through each student in the dictionary\n    for name, (height, weight) in students.items():\n        # Check if the student's height is above the minimum and weight is above the minimum\n        if height > h and weight > w:\n            # If the student meets the condition, print their name and their height and weight\n            print(name, height, weight)"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # Initialize a counter to keep track of the number of pairs that have the same values\n    count = 0\n    # Iterate through the lists and compare each element pairwise\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            # If the values are the same, increment the counter\n            count += 1\n    # Return the counter\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length.\n    This function will count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if all(eq(nums1[i], nums2[j]) for j in range(len(nums2))):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    same_pairs = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            same_pairs += 1\n    return same_pairs"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n\n    # create a dictionary to store the frequency of each element in the list\n    freq = {}\n    for num in nums1:\n        freq[num] = freq.get(num, 0) + 1\n\n    # count the number of pairs that have the same value in both lists\n    count = 0\n    for num in nums2:\n        if num in freq and eq(num, nums1[freq[num]-1]):\n            count += 1\n\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n\n    # Initialize the count variable to 0\n    count = 0\n\n    # Iterate through the lists\n    for i in range(len(nums1)):\n        # Check if the values are the same using the eq() function\n        if eq(nums1[i], nums2[i]):\n            # Increment the count variable\n            count += 1\n\n    # Return the count\n    return count"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    base_str = str(base)\n    for digit in base_str:\n        sum += int(digit) ** power\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Initialize the sum variable to 0\n    sum = 0\n    \n    # Loop through the digits of the base until we reach the specified power\n    for digit in str(base):\n        # Convert the digit to an integer and add it to the sum\n        sum += int(digit) ** power\n    \n    # Return the sum\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    base_str = str(base)\n    for digit in base_str:\n        digit_value = int(digit)\n        total += digit_value ** power\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    \"\"\"\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    \"\"\"\n    total = 0\n    # convert base to string to iterate over its digits\n    base_str = str(base)\n    # iterate over the digits of the base and calculate the power of each digit\n    for digit in base_str:\n        digit_power = int(digit) ** power\n        total += digit_power\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    \"\"\"\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    \"\"\"\n    total = 0\n    while power > 0:\n        total += base % 10\n        base //= 10\n        power -= 1\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    \"\"\"\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    \"\"\"\n    total = 0\n    for digit in str(base):\n        total += int(digit) ** power\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    \"\"\"\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    \"\"\"\n    # Convert the base and power to string so that we can convert them to integers easily\n    base_str = str(base)\n    power_str = str(power)\n    \n    # Initialize the sum variable to 0\n    sum = 0\n    \n    # Iterate through each digit of the base and the power\n    for i in range(len(base_str)):\n        for j in range(len(power_str)):\n            \n            # Calculate the sum of the current digit raised to the current power\n            sum += int(base_str[i])**int(power_str[j])\n            \n    # Return the sum of all digits raised to the specified power\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    while power > 0:\n        digit = base % 10  # Get the last digit of base\n        sum += digit ** power  # Calculate the power of the digit and add to the sum\n        power //= 10  # Remove the last digit of the base and repeat the process\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # convert base to a string\n    base_str = str(base)\n    # initialize the sum to 0\n    sum_digits = 0\n    # loop through each digit of the base string\n    for digit in base_str:\n        # convert the digit to an integer and add it to the sum_digits\n        sum_digits += int(digit)\n    # calculate the result by raising the sum_digits to the power\n    result = sum_digits ** power\n    # return the result\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # convert the base to a string\n    base_str = str(base)\n    # initialize the sum to zero\n    sum_digits = 0\n    # loop through each digit of the base string\n    for digit in base_str:\n        # convert the digit to an integer and add it to the sum\n        sum_digits += int(digit)\n    # multiply the sum by the power\n    sum_digits *= power\n    # return the sum\n    return sum_digits"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_quotation(text):\n    \"\"\"\n    This function takes a string as input and extracts values between quotation marks \" \" of the given string.\n    \"\"\"\n    pattern = re.compile(r'(?<=\")(.*?)(?=\")')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_quotation(text):\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_quotation(text1):\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    This function extracts values between quotation marks \" \" of the given string.\n    '''\n    # Define a regular expression pattern for matching quotation marks\n    pattern = r'\"(?:[^\\\\\"]|\\\\.)*\"'\n    # Use the re.finditer() function to find all the matches of the pattern in the text\n    matches = re.finditer(pattern, text)\n    # Create an empty list to store the extracted values\n    extracted_values = []\n    # Iterate over all the matches and extract the values\n    for match in matches:\n        # Get the value between the quotation marks\n        value = match.group()[1:-1]\n        # Add the value to the extracted values list\n        extracted_values.append(value)\n    # Return the extracted values as a string\n    return ', '.join(extracted_values)"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'(?<=\")[^\"]*(?=\")'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    This function will extract values between quotation marks \" \" of the given string.\n    '''\n\n    # Define regex pattern to match opening and closing quotation marks\n    pattern = re.compile(r'(?<=\")(.*?)(?=\")')\n\n    # Find all the matches of the pattern in the given string\n    matches = pattern.findall(text1)\n\n    # Remove any leading or trailing whitespaces from each match\n    cleaned_matches = [match.strip() for match in matches]\n\n    # Join all the cleaned matches into a single string\n    result =''.join(cleaned_matches)\n\n    return result"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_quotation(text1):\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text1)\n    result = []\n    for match in matches:\n        result.append(match[0])\n    return result"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_quotation(text1):\n    \"\"\"\n    Write a function to extract values between quotation marks \" \" of the given string.\n    \"\"\"\n    # Define a regular expression pattern for matching quotation marks\n    pattern = r'\"([^\"]+)\"'\n    # Use re.findall() function to extract all occurrences of pattern in text1\n    matches = re.findall(pattern, text1)\n    # Return a list of the extracted values\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n\n    # use regular expression to extract values between quotation marks\n    quotation = re.findall(r'\"([^\"]*)\"', text1)\n\n    # return list of extracted values\n    return quotation"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    #initialize an empty tuple of length N\n    result = (0,)*len(test_tup)\n    #iterate through the tuple and multiply each element with the next element\n    for i in range(len(test_tup)-1):\n        result[i] = test_tup[i]*test_tup[i+1]\n    #return the final result\n    return result"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    t_length = len(test_tup)\n    multiplied_tup = []\n    for i in range(t_length-1):\n        multiplied_tup.append(test_tup[i] * test_tup[i+1])\n    multiplied_tup.append(test_tup[-1] * test_tup[0])\n    return tuple(multiplied_tup)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    t_len = len(test_tup)\n    result_tup = (test_tup[0] * test_tup[1],)\n    for i in range(2, t_len):\n        result_tup += (result_tup[-1] * test_tup[i],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = ()\n    for i in range(len(test_tup)-1):\n        result += (test_tup[i] * test_tup[i+1],)\n    result += (test_tup[-1],)\n    return result"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = ()\n    for i in range(len(test_tup)-1):\n        result = (test_tup[i]*test_tup[i+1]) + result\n    return (test_tup[-1] * result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    N = len(test_tup) - 1\n    result = []\n    for i in range(N):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    multiplied_tup = (test_tup[0] * test_tup[1], test_tup[0] * test_tup[2], test_tup[0] * test_tup[3], test_tup[0] * test_tup[4])\n    return multiplied_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    new_tup = []\n    for i in range(N):\n        new_tup.append(test_tup[i]*test_tup[i+1])\n    return tuple(new_tup)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    result = []\n    for i in range(N):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    if len(test_tup) % 2 == 0: # check if the length is even\n        N = len(test_tup) // 2\n        return (test_tup[0] * test_tup[1], test_tup[0] * test_tup[2], test_tup[1] * test_tup[3], test_tup[2] * test_tup[4])\n    else: # check if the length is odd\n        N = len(test_tup) // 2\n        return (test_tup[0] * test_tup[1], test_tup[0] * test_tup[2], test_tup[1] * test_tup[3], test_tup[2] * test_tup[4], test_tup[3] * test_tup[5])"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    This function takes two lists as input and returns their sum as a new list.\n    \"\"\"\n    # check if the lists are of the same length\n    if len(lst1)!= len(lst2):\n        raise ValueError(\"Lists should be of the same length.\")\n    # initialize an empty list to store the sum of the lists\n    result = []\n    # loop through each element in the lists\n    for i in range(len(lst1)):\n        # add the corresponding elements in the lists and append the result to the result list\n        result.append(lst1[i] + lst2[i])\n    # return the result list\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [lst1[i] + lst2[i] for i in range(len(lst1))]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    # check if lists are the same length\n    if len(lst1)!= len(lst2):\n        print(\"The two lists are not the same length.\")\n        return None\n    \n    # check if both lists are non-empty\n    if lst1 == [] or lst2 == []:\n        print(\"One of the lists is empty.\")\n        return None\n    \n    # iterate through the two lists and add the elements\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n        \n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1,lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    # create an empty list to store the sum of the two input lists\n    result = []\n    # iterate through each element in the first input list\n    for i in range(len(lst1)):\n        # add the corresponding element in the second input list to the sum of the first input list\n        result.append(lst1[i] + lst2[i])\n    # return the resulting list of sums\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1,lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [x+y for x, y in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    This function takes two lists as input and returns the sum of their elements.\n    '''\n    return [lst1[i] + lst2[i] for i in range(len(lst1))]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    \"\"\"\n    Remove consecutive duplicates of a given list.\n\n    Args:\n        nums (list): A list of integers.\n\n    Returns:\n        A list of integers where consecutive duplicates have been removed.\n    \"\"\"\n    return [list(g)[0] for k, g in groupby(sorted(nums)) if len(list(g)) == 1]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n\n    # group the list by the values they share\n    grouped_nums = sorted(list(groupby(enumerate(nums), lambda x: x[1])))\n\n    # get the consecutive duplicates\n    consecutive_nums = []\n    for group in grouped_nums:\n        if group[1][1] == group[0][0]:\n            consecutive_nums.append(group[0][1])\n\n    # remove consecutive duplicates from the original list\n    for num in consecutive_nums:\n        nums.remove(num)\n\n    return nums"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(filter(lambda x: len(list(x)) > 1, groupby(sorted(nums))))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    filtered_nums = []\n    for item in nums:\n        if not any(item == i for i, _ in groupby(nums)):\n            filtered_nums.append(item)\n    return filtered_nums"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Remove consecutive duplicates of a given list.\n    '''\n    return list(set(nums))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(groupby(nums))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    groups = groupby(enumerate(nums))\n    return [list(g[1]) for g in groups if len(list(g)) == 1]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Use the groupby function to group the numbers by their values\n    grouped_nums = groupby(sorted(nums))\n\n    # Create a list of consecutive duplicates and return it\n    consecutive_duplicates_list = []\n    for _, group in grouped_nums:\n        if len(list(group)) > 1:\n            consecutive_duplicates_list.extend(list(group)[1:])\n\n    return consecutive_duplicates_list"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    grouped_nums = groupby(nums)\n    result = []\n    for key, group in grouped_nums:\n        if len(list(group)) > 1:\n            result.extend(list(group))\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [num for key, group in groupby(nums) if not key]"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Calculating the lateral surface area of the cone using the formula:\n    # Lateral surface area = 1/2 * r^2 * h\n    return 0.5 * r ** 2 * h"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Calculate the area of the cone using Heron's formula\n    area = math.sqrt(3) * r * h * 0.5\n    \n    return area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n\n    # Calculate the lateral surface area of the cone using Heron's formula\n    s = 2 * r * h\n\n    # Return the lateral surface area\n    return s\n"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s = 2 * r * h\n    return math.pi * r**2 * h / 3 - math.pi * r**2 * s / 3"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # calculating the lateral surface area\n    lateral_area = math.pi * r * h\n    \n    # returning the value\n    return lateral_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi*(r**2 + h**2)"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = math.pi * r**2 * h\n    return area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = 2*r*h + (math.pi/2)*r**2\n    return area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n\n    # Calculate the lateral surface area\n    area = math.pi * r**2 * h\n\n    return area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi*(r**2)*h"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef replace_specialchar(text):\n    # Define the regular expression pattern to find and replace special characters\n    pattern = re.compile(r'[\\s,\\.]')\n\n    # Replace all occurrences of the pattern with a colon\n    new_text = pattern.sub(':', text)\n\n    return new_text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Replace spaces with colon\n    text = re.sub(r' ', ':', text)\n\n    # Replace commas with colon\n    text = re.sub(r',', ':', text)\n\n    # Replace dots with colon\n    text = re.sub(r'\\.', ':', text)\n\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'[^\\w\\s]|_|\\s'\n    text = re.sub(pattern, ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Define the regular expression pattern for spaces, commas, and dots\n    pattern = r'(\\s|,|\\.)'\n    # Use the re.sub() function to replace all occurrences of the pattern with a colon\n    result = re.sub(pattern, ':', text)\n    # Return the modified text\n    return result"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(' +', ':', text)\n    text = re.sub(',', ':', text)\n    text = re.sub('.', ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    special_chars = re.compile(r'\\s|,|\\.')\n    return special_chars.sub(':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Replace spaces with colons\n    text = re.sub(r' ', ':', text)\n    # Replace commas with colons\n    text = re.sub(r',', ':', text)\n    # Replace dots with colons\n    text = re.sub(r'\\.', ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'[\\s,.]'\n    return re.sub(pattern, ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = re.compile(r'\\s|,|\\.')\n    return pattern.sub(':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef replace_specialchar(text):\n    \"\"\"\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    \"\"\"\n    text = re.sub(r\"[^\\w\\s]\", \"\", text)\n    return text.replace(\" \", \":\").replace(\",\", \":\").replace(\".\", \":\")"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n\n    Args:\n        A (list): A sorted list of numbers.\n        x (int): The number to search for.\n\n    Returns:\n        int: The index of the first occurrence of `x` in `A` or -1 if `x` is not in `A`.\n    \"\"\"\n\n    # Initialize the index of the first occurrence to -1\n    first_occurrence = -1\n\n    # Iterate over the list A\n    for i in range(len(A)):\n        # If the current element is equal to x, set the index of the first occurrence to i and break the loop\n        if A[i] == x:\n            first_occurrence = i\n            break\n\n    # Return the index of the first occurrence\n    return first_occurrence"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    i = 0\n    while i < len(A) and A[i]!= x:\n        i += 1\n    if i == len(A):\n        return -1\n    else:\n        return i"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    i = 0\n    while i < len(A) - 1 and A[i] < x:\n        i += 1\n    if i == len(A):\n        return -1\n    if A[i] == x:\n        return i\n    else:\n        return find_first_occurrence(A[i:], x)"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    for i in range(len(A)):\n        if A[i] == x:\n            return i\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low = 0\n    high = len(A) - 1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        \n        if A[mid] == x:\n            # Check if x is at the leftmost index or is equal to mid\n            if mid == 0 or A[mid-1]!= x:\n                return mid\n            else:\n                high = mid - 1\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    \n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if len(A) == 0:\n        return -1\n    \n    left = 0\n    right = len(A) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if A[mid] == x:\n            left = mid + 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return left if A[left] == x else -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            if mid == 0 or A[mid-1]!= x:\n                return mid\n            else:\n                right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # Initialize left and right pointers\n    left = 0\n    right = len(A) - 1\n    \n    # Initialize count variable to 0\n    count = 0\n    \n    # Loop until left pointer is less than or equal to right pointer\n    while left <= right:\n        # Calculate midpoint of the array\n        mid = (left + right) // 2\n        \n        # If midpoint element is equal to x, increment count and move left pointer to mid+1\n        if A[mid] == x:\n            count += 1\n            left = mid + 1\n            \n        # If midpoint element is less than x, move left pointer to mid+1\n        elif A[mid] < x:\n            left = mid + 1\n            \n        # If midpoint element is greater than x, move right pointer to mid-1\n        else:\n            right = mid - 1\n            \n    # Return the index of the first occurrence of x\n    return count"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    # initialize the index of the first occurrence to -1\n    first_occurrence = -1\n    \n    # loop through the array\n    for i in range(len(A)):\n        # if the current element is equal to the given number, update the index of the first occurrence\n        if A[i] == x:\n            first_occurrence = i\n            break\n    \n    # return the index of the first occurrence\n    return first_occurrence"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    # Find the index of the first occurrence of x in A\n    index = bisect_left(A, x)\n    \n    # If x is not in A, return -1\n    if index == len(A) or A[index]!= x:\n        return -1\n    \n    return index"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n\n    n = len(arr)\n    result = []\n    product_sum = 0\n\n    for i in range(n):\n        product_sum += arr[i]\n        result.append(product_sum)\n\n    for i in range(n):\n        for j in range(i, n):\n            subarray_sum = sum(result[i:j+1])\n            product = 1\n            for k in range(i, j+1):\n                product *= arr[k]\n            result.append(subarray_sum + product)\n\n    return sum(result)"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return arr[0]\n    else:\n        subarray = sum_Of_Subarray_Prod(arr[1:])\n        left_product = arr[0]\n        right_product = arr[-1]\n        result = subarray * (left_product * right_product)\n        return result + left_product + right_product"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n\n    # Initialize variables\n    dp = [[0] * (n+1) for _ in range(2)]\n\n    # Initialize first row\n    for i in range(1, n+1):\n        dp[0][i] = arr[i-1]\n\n    # Fill the rest of the table\n    for i in range(1, 2):\n        for j in range(1, n+1):\n            if i == 1:\n                dp[i][j] = arr[j-1] * dp[i][j-1]\n            else:\n                dp[i][j] = (arr[j-1] * dp[i-1][j-1]) + (arr[j-1] * dp[i][j-2])\n\n    # Return sum of products of all sublists\n    return sum(dp[1][i] for i in range(1, n+1))"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum_of_products_of_all_possible_subarrays/\n    \n    Input:\n        arr: a list of integers\n    \n    Output:\n        an integer representing the sum of products of all possible sublists of the given list.\n    \n    '''\n    \n    # initializing variables\n    n = len(arr)\n    prefix_sum = [0] * (n + 1)\n    product_sum = 0\n    \n    # calculating the prefix sum of the list\n    for i in range(n):\n        prefix_sum[i + 1] = prefix_sum[i] + arr[i]\n    \n    # calculating the product sum of all possible sublists of the list\n    for i in range(n):\n        for j in range(i, n):\n            product_sum += prefix_sum[j + 1] * prefix_sum[j] - prefix_sum[i] * prefix_sum[j]\n    \n    return product_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    # Initialize the sum of products and the max sum of products seen so far\n    sum_of_products = 0\n    max_sum_of_products = 0\n\n    # Iterate over all possible sublists of the given list\n    for i in range(len(arr)):\n        # Initialize the current sublist sum\n        current_sublist_sum = 1\n\n        # Iterate over all the elements of the current sublist from i to n-1\n        for j in range(i, len(arr)):\n            # Multiply the current element of the sublist with its next element and add it to the sum\n            current_sublist_sum *= arr[j]\n            # Update the max sum of products seen so far if the current sum is greater\n            max_sum_of_products = max(max_sum_of_products, current_sublist_sum)\n        # Add the sum of products of the current sublist to the sum of products\n        sum_of_products += current_sublist_sum\n\n    # Return the sum of products\n    return sum_of_products"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    # initialize two pointers, one at the beginning and the other at the end of the array\n    left = 0\n    right = n - 1\n    # initialize the sum of products of all subarrays as 0\n    subarray_prod = 1\n    # initialize an empty list to store the products of the subarrays\n    subarray_prods = []\n    # loop till both pointers are less than or equal to the end of the array\n    while left <= right:\n        # compute the product of the subarray from the left pointer to the current pointer\n        prod = 1\n        for i in range(left, right + 1):\n            prod *= arr[i]\n        # add the product of the subarray to the sum of products of all subarrays\n        subarray_prod *= prod\n        # add the product of the subarray to the list of products of all subarrays\n        subarray_prods.append(prod)\n        # move the left pointer to the right and decrement it\n        left += 1\n        # move the right pointer to the right and decrement it\n        right -= 1\n    # return the sum of products of all subarrays\n    return sum(subarray_prods)"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    result = 0\n    \n    for i in range(n):\n        for j in range(i+1, n+1):\n            if j-i+1 > 1:\n                prod = 1\n                for k in range(i, j):\n                    prod *= arr[k]\n                result += prod\n    \n    return result"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    mod = 10**9 + 7\n\n    # Calculate the prefix sum of array\n    prefix_sum = [0] * (n + 1)\n    for i in range(1, n + 1):\n        prefix_sum[i] = (prefix_sum[i - 1] + arr[i - 1]) % mod\n\n    # Calculate the sum of products of all possible sublists\n    res = 0\n    for i in range(1, n + 1):\n        for j in range(i, n + 1):\n            res = (res + (prefix_sum[j] - prefix_sum[i - 1]) * arr[i - 1] * arr[j - 1]) % mod\n\n    return res"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\n    Parameters:\n    arr: list of integers\n\n    Returns:\n    sum of products of all possible sublists of the given list\n    '''\n\n    # Initialize variables\n    n = len(arr)\n    prod = 1\n    sublist_prod = 1\n\n    # Iterate through the array to compute the product of all sublists\n    for i in range(n):\n        for j in range(i+1, n):\n            sublist_prod *= arr[j] - arr[i]\n\n    # Return the sum of products of all sublists\n    return sublist_prod"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    dp = [1] * n\n    for i in range(n-1):\n        dp[i+1] = arr[i] * dp[i]\n    prefix_sum = [0] * n\n    for i in range(n-1, -1, -1):\n        prefix_sum[i] = prefix_sum[i+1] + arr[i]\n    res = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            prod = 1\n            if i == 0:\n                prod *= prefix_sum[j]\n            if j == n-1:\n                prod *= prefix_sum[i]\n            else:\n                prod *= prefix_sum[j] - prefix_sum[i]\n            res += dp[i] * dp[j] * prod\n    return res"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    This function takes a number n and toggles its middle two bits.\n    \"\"\"\n    # Convert n to binary string\n    binary = bin(n)[2:]\n    # Determine the middle two bits\n    middle = binary[:len(binary)//2]\n    # Toggle the middle two bits\n    middle = ''.join(['1' if bit == '0' else '0' for bit in middle])\n    # Convert the middle two bits back to a binary number\n    middle = int(middle, 2)\n    # Combine the binary string with the middle two bits and return the final result\n    return n ^ middle"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_middle_bits(n):  \n    # convert n to binary string\n    binary_str = bin(n)[2:]\n    \n    # find first and last bit positions\n    first_bit = 0\n    last_bit = len(binary_str) - 1\n    \n    # toggle middle bits\n    for i in range(first_bit + 1, last_bit - 1):\n        if binary_str[i] == '1':\n            binary_str[i] = '0'\n        else:\n            binary_str[i] = '1'\n    \n    # convert binary string back to integer\n    modified_n = int(binary_str, 2)\n    \n    return modified_n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit.\n    '''\n    first_bit = n & 1\n    last_bit = n & (1 << (n.bit_length() - 1))\n    \n    # Toggle all the bits except the first and last bit\n    mid_bits = n ^ (1 << first_bit) ^ (1 << last_bit)\n    \n    return mid_bits"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n\n    # Create a binary representation of the number\n    binary_number = bin(n)[2:]\n\n    # Extract the first and last bit of the binary representation\n    first_bit = binary_number[0]\n    last_bit = binary_number[-1]\n\n    # Convert the first and last bit to integer values\n    first_bit = int(first_bit)\n    last_bit = int(last_bit)\n\n    # Toggle the middle bits by converting them to integer values and adding or subtracting 1 from them\n    toggled_middle_bits = (n & 0x55555555) + (n & 0xaaaaaaaa) - (n & 0x33333333)\n\n    # Convert the toggled middle bits back to binary and add them back to the binary representation of the original number\n    toggled_binary_number = bin(toggled_middle_bits + (n & 0x00000001))\n\n    # Convert the binary representation back to integer\n    toggled_number = int(toggled_binary_number, 2)\n\n    # Return the toggled number\n    return toggled_number"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n\n    # Convert the binary representation of n to a list of digits\n    n_binary = bin(n)[2:]\n    n_list = [int(digit) for digit in n_binary]\n\n    # Iterate through the list of digits and toggle the middle bits\n    for i in range(len(n_list)):\n        if i!= 0 and i!= len(n_list) - 1:\n            n_list[i] = not n_list[i]\n\n    # Convert the list of digits back to a binary string and convert it to an integer\n    n_binary = ''.join(map(str, n_list))\n    n_integer = int(n_binary, 2)\n\n    return n_integer"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_middle_bits(n):  \n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit. \n    \"\"\"\n    # Convert binary number to int \n    n = int(n, 2) \n    # Extract middle two bits\n    middle_bits = n & 0b11\n    \n    # Toggle first and last bits \n    middle_bits = middle_bits ^ 0b01\n    \n    # Combine the first and last bits with the middle bits \n    n = (middle_bits << 1) | n\n    \n    # Convert int back to binary number \n    return format(n, '08b')"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit.\n    \"\"\"\n\n    n = n ^ 0xAAAAAAAA  # toggle the first bit\n\n    if n & 0x01:  # toggle the last bit\n        n ^= 0x55555555\n    else:\n        n ^= 0xAAAAAAAA\n\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Remove the last and first bits and shift the remaining bits to the right by 1\n    n = n & ~(0b1111111111111111 << 2)\n    \n    # Toggle all the remaining bits\n    n ^= (n >> 1) & 0x5555555555555555  # (n >> 1) == n // 2\n    n ^= (n >> 2) & 0x3333333333333333  # (n >> 2) == n // 4\n    n ^= (n >> 4) & 0x0f0f0f0f0f0f0f0f  # (n >> 4) == n // 16\n    n ^= (n >> 8) & 0x00ff00ff00ff00ff  # (n >> 8) == n // 256\n    n ^= (n >> 16) & 0x0000ffff0000ffff  # (n >> 16) == n // 65536\n    \n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Initialize the variables\n    first_bit = n & 1\n    last_bit = n >> 31\n    # Toggle the middle bits\n    middle_bits = n ^ (1 << 1) | (1 << 31)\n    # Combine the first and last bits\n    result = (middle_bits << 1) | first_bit | last_bit\n    return result"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # convert number to binary string\n    binary_str = bin(n)[2:]\n    \n    # get the length of the binary string\n    length = len(binary_str)\n    \n    # calculate the middle index\n    middle_index = length // 2\n    \n    # iterate over the binary string\n    for i in range(middle_index):\n        if binary_str[i] == '0':\n            binary_str[i] = '1'\n        else:\n            binary_str[i] = '0'\n    \n    # convert the binary string back to an integer\n    binary_int = int(binary_str, 2)\n    \n    # return the modified number\n    return binary_int"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    # initialize the left and right indices\n    left = 0\n    right = len(a) - 1\n\n    # while left index is less than or equal to right index\n    while left <= right:\n        # calculate the middle index\n        mid = (left + right) // 2\n\n        # if the middle value is greater than the specified value\n        if a[mid] > x:\n            # set the right index to the middle index - 1\n            right = mid - 1\n        # if the middle value is less than or equal to the specified value\n        else:\n            # set the left index to the middle index + 1\n            left = mid + 1\n\n    # if the specified value is not present in the sorted array\n    if left == len(a) or a[left]!= x:\n        # return -1 as the insertion point\n        return -1\n    else:\n        # return the left index as the insertion point\n        return left"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    else:\n        return bisect.bisect_right(a, x)"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # Use the bisect module to find the left insertion point\n    index = bisect.bisect_left(a, x)\n    \n    # Check if the value is already in the array\n    if index!= len(a) and a[index] == x:\n        return index\n    \n    # If the value is not in the array, return the index of the left insertion point\n    else:\n        return index - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == 0:\n        return 0\n    elif i == len(a):\n        return i\n    else:\n        return i - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_left(a, x)\n    if index!= len(a):\n        if a[index] == x:\n            return index\n        elif a[index] < x:\n            return index + 1\n    return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_left(a, x)\n    return index\n"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    if index == len(a):\n        return index\n    elif a[index] == x:\n        return index\n    elif a[index] < x:\n        return left_insertion(a[index+1:], x)\n    else:\n        return left_insertion(a[:index], x)"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == len(a):\n        return i\n    elif a[i] == x:\n        return i\n    elif a[i] < x:\n        return i + 1\n    else:\n        return i"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. \n    https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    if index == len(a):\n        return len(a)\n    elif index!= 0 and a[index-1]!= x:\n        return index\n    else:\n        return index - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # Initialize the left and right indices of the sorted array\n    left = 0\n    right = len(a) - 1\n    # Initialize the left insertion point index\n    index = bisect.bisect_left(a, x)\n    # Check if the value is less than the first element of the sorted array\n    if x < a[0]:\n        return 0\n    # Check if the value is greater than the last element of the sorted array\n    elif x > a[right]:\n        return len(a)\n    # Check if the value is equal to the first or last element of the sorted array\n    elif index == 0 or index == right:\n        return index\n    # If the value is between the first and last elements of the sorted array\n    else:\n        # Initialize the left and right indices of the sub-array\n        sub_left = 0\n        sub_right = right\n        # Initialize the left and right indices of the sub-array\n        while sub_left < sub_right:\n            # Find the mid index of the sub-array\n            mid = (sub_left + sub_right) // 2\n            # Check if the value is less than the mid element\n            if x < a[mid]:\n                sub_right = mid\n            # Check if the value is greater than the mid element\n            else:\n                sub_left = mid + 1\n        return sub_left"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re \n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n\n    pattern = r'^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.match(pattern, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re \n\ndef check_str(string): \n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.match(regex, string): \n        return True \n    else: \n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re \n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re \n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    # base case\n    if n == 1:\n        return 1\n    \n    # recursive case\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    # Base case\n    if n == 1:\n        return 1\n\n    # Recursive case\n    else:\n        return (1 / (n - 1)) * geometric_sum(n - 1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 0\n    else:\n        return 1/2 + geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 0\n    else:\n        return (1/n) + geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 0\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n\n    # Base case\n    if n == 1:\n        return 1\n\n    # Recursive case\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # maximum number of digits in a triangular number\n    max_digits = int(math.log10(5*n*n+1))+1\n    # initialize the index of smallest triangular number\n    index = -1\n    # check if the maximum number of digits is greater than n\n    if max_digits > n:\n        # initialize the current number of digits\n        current_digits = 0\n        # initialize the triangular number\n        triangular_num = 0\n        # loop until the maximum number of digits is less than or equal to n\n        while current_digits <= max_digits:\n            # calculate the next triangular number\n            triangular_num = triangular_num*10 + n - 1\n            # increment the current number of digits\n            current_digits += 1\n            # check if the next triangular number is smaller than or equal to the target number of digits\n            if triangular_num <= n:\n                # increment the index if the next triangular number is smaller than or equal to the target number of digits\n                index += 1\n        # return the index of the smallest triangular number\n        return index\n    # return -1 if the maximum number of digits is greater than n\n    else:\n        return -1"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n\n    triangular_numbers = []\n    # calculate the first triangular number\n    triangular_numbers.append(1)\n    # calculate the next n-1 triangular numbers\n    for i in range(2, n+1):\n        triangular_numbers.append(triangular_numbers[i-1] + triangular_numbers[i-2])\n\n    # find the smallest triangular number with n digits\n    smallest_triangular = triangular_numbers[0]\n    for i in range(1, len(triangular_numbers)):\n        if len(str(triangular_numbers[i])) == n:\n            smallest_triangular = triangular_numbers[i]\n            break\n\n    # find the index of the smallest triangular number\n    index = triangular_numbers.index(smallest_triangular) + 1\n\n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    \n    # Base case \n    if n == 1: \n        return 0\n    \n    # Initialize two variables to store the smallest triangular number and its index\n    smallest = int(math.pow(10, n-1))\n    index = n - 1\n    \n    # Initialize the remaining n-1 digits of smallest \n    while index > 0:\n        smallest = smallest + int(math.pow(10, index-1))\n        index = index - 1\n    \n    # Return the index of the smallest triangular number\n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    This function takes an integer n and returns the index of the smallest triangular number with n digits.\n    '''\n    # Define the maximum value of n that can be calculated using triangular numbers\n    max_n = int(math.sqrt(5)) * 5\n    \n    # Initialize the smallest triangular number with n digits as infinity\n    smallest_triangular = float('inf')\n    \n    # Iterate from 1 to max_n\n    for i in range(1, max_n+1):\n        # Calculate the sum of i and the square of its digit sum\n        sum_i = sum(int(digit)**i for digit in str(i))\n        square_sum_digits = sum(int(digit)**i for digit in str(sum_i))\n        \n        # If the square of the digit sum is smaller than the current smallest triangular number, update it\n        if square_sum_digits < smallest_triangular:\n            smallest_triangular = square_sum_digits\n        \n        # If the index i satisfies the condition, return the index\n        if sum_i == i:\n            return i\n    \n    # If no such triangular number is found, return -1\n    return -1"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    \"\"\"\n    # Initialize the first n digits of the triangular number with n digits\n    triangular_number = 10**(n-1)\n    \n    # Initialize the smallest triangular number with n digits\n    smallest_triangular = triangular_number\n    \n    # Loop through the remaining digits\n    for i in range(2,n):\n        \n        # Calculate the next triangular number with n digits\n        triangular_number = (triangular_number*(10**i-1)) // (10**(i-1))\n        \n        # If the next triangular number is smaller than the smallest triangular number with n digits, update the smallest triangular number with n digits\n        if triangular_number < smallest_triangular:\n            smallest_triangular = triangular_number\n            \n    # Return the index of the smallest triangular number with n digits\n    return math.log10(smallest_triangular) - 1"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Initialize variables\n    i = 0\n    triangular_number = 0\n    smallest_triangular_number = float('inf')\n\n    # Calculate the smallest triangular number with n digits\n    while len(str(triangular_number)) < n:\n        triangular_number += i\n        i += 1\n\n    # Check if the smallest triangular number is smaller than the input number\n    while triangular_number < n:\n        triangular_number += i\n        i += 1\n\n    # Find the index of the smallest triangular number\n    while triangular_number > n:\n        i -= 1\n        triangular_number -= i\n\n    return i"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits.\n    \"\"\"\n    # Minimum triangular number with n digits\n    min_tri = int((n * (n+1)) / 2)\n    # Maximum triangular number with n digits\n    max_tri = int((n * (n+1) * (2 * n + 1)) // 6)\n    # Find the index of the first triangular number greater than or equal to min_tri\n    for i in range(max_tri):\n        if i % 2 == 0:\n            continue\n        else:\n            tri_num = i + min_tri\n            # Check if tri_num has n digits\n            if len(str(tri_num)) == n:\n                return i + min_tri"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    triangular = 0 \n    for i in range(n): \n        triangular *= 10 \n        triangular += i \n    return triangular \n\nn = int(input(\"Enter the value of n: \")) \nindex = find_Index(n) \nprint(\"The index of the smallest triangular number with\", n, \"digits is:\", index) "
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    This function calculates the index of the smallest triangular number with n digits using the formula:\n    T(n) = n(n+1)/2\n    \n    \"\"\"\n    T = lambda n: (n * (n + 1)) // 2\n    triangular_number = T(n)\n    index = 0\n    while triangular_number > 0:\n        triangular_number = triangular_number - 1\n        index += 1\n    return index - 1\n"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n\n    # Function to count number of digits in a given number\n    def count_digits(num): \n        count = 0 \n        while num > 0: \n            count += 1 \n            num //= 10 \n        return count \n\n    # Function to check if a number is a triangular number with n digits\n    def is_triangular(num, n): \n        count = count_digits(num) \n        if count < n: \n            return False \n        else: \n            return True \n    \n    # Function to calculate smallest triangular number with n digits\n    def smallest_triangular(n): \n        # Find smallest number with n digits that is triangular\n        num = 1 \n        while not is_triangular(num, n): \n            num += 1 \n        return num \n\n    # Find index of smallest triangular number with n digits\n    index = math.ceil(math.log10(smallest_triangular(n))) - 1\n\n    return index"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup[0::2], test_tup[1::2]))"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    new_dict = {}\n    i = 0\n    while i < len(test_tup):\n        new_dict[test_tup[i]] = test_tup[i+1]\n        i += 2\n    return new_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. \n    https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dict_obj = {}\n    for i in range(0, len(test_tup), 2):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        dict_obj[key] = value\n    return dict_obj"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n\n    Args:\n        test_tup: A tuple of any length.\n\n    Returns:\n        A dictionary where each key-value pair is adjacent elements of the input tuple.\n\n    \"\"\"\n    # Convert the input tuple to a dictionary using adjacent elements.\n    # Hint: You can use a dictionary comprehension to iterate over the tuple and generate key-value pairs.\n    result_dict = {i: test_tup[i+1] for i in range(len(test_tup)-1)}\n    return result_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    key_list = []\n    value_list = []\n    for i in range(len(test_tup)):\n        if i % 2 == 0:\n            key_list.append(test_tup[i])\n        else:\n            value_list.append(test_tup[i])\n    result_dict = dict(zip(key_list, value_list))\n    return result_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # converting the tuple to a list\n    test_list = list(test_tup)\n    # creating an empty dictionary\n    my_dict = {}\n    # iterating over the list\n    for i in range(0, len(test_list), 2):\n        # adding the adjacent elements to the key and value\n        my_dict[test_list[i]] = test_list[i+1]\n    # returning the final dictionary\n    return my_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    dict_obj = {}\n    for i in range(0, len(test_tup), 2):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        dict_obj[key] = value\n    return dict_obj"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # create an empty dictionary\n    test_dict = {}\n\n    # loop through the tuple\n    for i in range(0, len(test_tup), 2):\n        # add the key-value pair to the dictionary\n        test_dict[test_tup[i]] = test_tup[i+1]\n\n    return test_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    # Initialize an empty dictionary\n    new_dict = {}\n    # Loop through each element in the tuple\n    for i in range(len(test_tup)):\n        # If the current element is not the last one in the tuple\n        if i < len(test_tup) - 1:\n            # Add the current element and the next element as a key-value pair to the dictionary\n            new_dict[test_tup[i]] = test_tup[i+1]\n        # If the current element is the last one in the tuple\n        else:\n            # Add the last element as a key-value pair to the dictionary\n            new_dict[test_tup[i]] = None\n    # Return the dictionary\n    return new_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup[::2], test_tup[1::2]))"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Write a python function to check whether all the characters are same or not.\n    \"\"\"\n    if len(s) == 0:\n        return True\n    elif len(s) == 1:\n        return False\n    else:\n        if s[0] == s[1]:\n            return all_Characters_Same(s[1:])\n        else:\n            return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Write a python function to check whether all the characters are same or not.\n    \"\"\"\n    # Convert the string to lowercase and remove all non-alphanumeric characters\n    s = ''.join(filter(str.isalnum, s)).lower()\n    \n    # Check if all the characters are same or not\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Write a python function to check whether all the characters are same or not.\n    \"\"\"\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0:\n        return True\n    elif len(s) == 1:\n        return s[0] == s[0]\n    else:\n        return all_Characters_Same(s[1:]) and s[0] == s[1]"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Characters_Same(s):\n    # take the first character of the string\n    first = s[0]\n    # iterate over the remaining characters of the string\n    for char in s[1:]:\n        # if the first character is not equal to the current character, return False\n        if first!= char:\n            return False\n    # if all characters are the same, return True\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0:\n        return True\n    else:\n        return False if s[0]!= s[-1] else all_Characters_Same(s[1:-1])"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Write a python function to check whether all the characters are same or not.\n    \"\"\"\n    if len(s) == 0:\n        return True\n    else:\n        return all_Characters_Same(s[1:])"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0:\n        return True\n    if s[0] == s[len(s)-1]:\n        return all_Characters_Same(s[1:len(s)-1])\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0:\n        return True\n    elif len(s) == 1:\n        return s[0] == s[0]\n    else:\n        return all_Characters_Same(s[1:]) and s[0] == s[1]"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    first_char = s[0]\n    for char in s:\n        if char!= first_char:\n            return False\n    return True"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = (side**2 + side**2 + side**2 + side**2)/2\n    area = math.sqrt(s * (s - side) * (s - side - side) * (s - side - side - side))\n    return area\n"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n\n    # Calculate the semi-perimeter\n    semi_perimeter = side / 2\n\n    # Calculate the area of each triangle\n    area1 = math.sqrt(semi_perimeter ** 2 - side ** 2)\n    area2 = math.sqrt(semi_perimeter ** 2 - 2 * side ** 2)\n    area3 = math.sqrt(semi_perimeter ** 2 - 3 * side ** 2)\n\n    # Calculate the total area\n    total_area = area1 + area2 + area3\n\n    return total_area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n\n    # calculate the base of the right triangle\n    base = 0.5 * side\n\n    # calculate the area of the tetrahedron\n    area = math.sqrt(3) / 4 * base ** 2\n\n    # return the area\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (1/6) * side ** 2"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = (side * (side + math.sqrt(2)) + side) / 2\n    area = math.sqrt(s * (s - side) * (s - side - math.sqrt(2)) * (s - side + math.sqrt(2)))\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (1/6) * side ** 2\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (1/6)*side**2"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # Calculate the area of the tetrahedron using Heron's formula\n    s = (side**2 + side**2 + side**2 + side**2) ** 0.5\n    area = (1/6) * s * (side + s)\n    \n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = 1/6 * side**2 * math.sin(math.pi/3)\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (1/6) * side ** 2"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n\n    Args:\n        list: list to be rotated\n        m: number of items to be rotated to the right\n\n    Returns:\n        rotated list\n    \"\"\"\n    # create a copy of the list to avoid modifying the original list\n    rotated_list = list.copy()\n\n    # calculate the number of items to be rotated to the right\n    n = len(rotated_list)\n    n_rotated = (m % n) + n\n\n    # rotate the list by swapping the first n_rotated items with the last n-n_rotated items\n    for i in range(n_rotated):\n        rotated_list[i], rotated_list[n-n_rotated+i] = rotated_list[n-n_rotated+i], rotated_list[i]\n\n    return rotated_list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    # if m is greater than n, return the original list\n    if m > n:\n        return list\n\n    # if m is less than or equal to 0, return an empty list\n    if m <= 0:\n        return []\n\n    # reverse the list\n    list = list[::-1]\n\n    # if m is equal to the length of the reversed list,\n    # simply return the reversed list\n    if m == n:\n        return list\n\n    # rotate the list\n    list = list[-m:] + list[:-m]\n\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    m = m % n\n    list[:m], list[m:] = list[m:], list[:m]\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    m = m % n\n    list[0:n-m], list[m:n] = list[m:n], list[0:n-m]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rotate_right(lst, n):\n    \"\"\"\n    This function rotates a given list by specified number of items to the right direction.\n    \"\"\"\n    # If the list has only one item, return it\n    if len(lst) == 1:\n        return lst\n    \n    # Initialize the new list\n    new_list = []\n    \n    # Get the total number of items in the original list\n    total_items = len(lst)\n    \n    # If the specified number of items to rotate is greater than or equal to the total number of items,\n    # rotate all the items to the left\n    if n >= total_items:\n        for item in lst:\n            new_list.append(item)\n        return new_list\n    \n    # Calculate the number of items to rotate\n    n = n % total_items\n    \n    # Rotate the items to the right by n items\n    for i in range(n):\n        new_list.append(lst[0])\n        lst = lst[1:]\n    \n    # Append the remaining items to the new list\n    for item in lst:\n        new_list.append(item)\n    \n    return new_list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rotate_right(lst, m):\n    '''\n    This function takes in a list and the number of items to rotate to the right. \n    It rotates the list by swapping the first m items with the last n-m items, where n is the length of the list.\n    '''\n    n = len(lst)\n    # if m is greater than n, then nothing to rotate\n    if m > n:\n        return lst\n    # if m is less than n, then rotate using modulo operator\n    elif m < n:\n        lst = lst[-m:] + lst[:-m]\n    return lst"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    m = m % n  # check for modulo\n    list.extend(list[:m])\n    list[:m] = []\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    m = m % n\n    list.extend(list[:m])\n    list[m:] = list[:m]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    m = m % n\n    if m == 0:\n        return list\n    else:\n        return list[-m:] + list[:-m]"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    # if m is greater than n, return the original list\n    if m > n:\n        return list\n    \n    # rotate the list to the right by m items\n    for i in range(n-m):\n        list.append(list.pop(0))\n    \n    return list"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for elem in test_tup:\n        if elem is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for elem in test_tup:\n        if elem is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return any(x is None for x in test_tup)"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum to endnum where every number is divisible by every digit it contains.\n    '''\n    # Convert the start and end numbers to lists of digits\n    start_digits = [int(digit) for digit in str(startnum)]\n    end_digits = [int(digit) for digit in str(endnum)]\n\n    # Use a lambda function to check if each digit in a number is divisible by every other digit in the same number\n    is_divisible = lambda x, y: all(digit % y == 0 for digit in str(x))\n\n    # Use a nested loop to check if each number in the range is divisible by every digit in its digits\n    for num in range(startnum, endnum+1):\n        num_digits = [int(digit) for digit in str(num)]\n        if all(is_divisible(digit, num_digit) for digit, num_digit in zip(num_digits, start_digits)):\n            print(num)"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    def is_divisible_by_digits(num):\n        \"\"\"\n        Returns True if the number is divisible by every digit it contains.\n        \"\"\"\n        digits = set(str(num))\n        return all(int(digit) % i == 0 for i in digits for digit in digits)\n\n    return [num for num in range(startnum, endnum+1) if is_divisible_by_digits(num)]"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum to endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    def is_valid(num):\n        # Check if the number contains only digits\n        return all(char.isdigit() for char in str(num))\n\n    def is_divisible_by_digits(num):\n        # Convert the number to a string and split it into individual digits\n        digits = list(map(int, str(num)))\n        # Check if every digit is divisible by its position in the string\n        return all(digit % (i+1) == 0 for i, digit in enumerate(digits))\n\n    # Filter the numbers within the given range that are divisible by every digit\n    return list(filter(lambda x: is_valid(x) and is_divisible_by_digits(x), range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    # Define a lambda function that checks if a number is divisible by a given digit\n    is_divisible = lambda x, digit: x % digit == 0\n\n    # Define a lambda function that extracts the last digit of a number\n    last_digit = lambda x: x % 10\n\n    # Loop over all numbers from startnum to endnum\n    for num in range(startnum, endnum+1):\n        # Extract the digits of the number\n        digits = [int(d) for d in str(num)]\n\n        # Loop over all possible divisors of the last digit of the number\n        for div in [1, 2, 5, 10, 20, 50, 100]:\n            # Check if the number is divisible by the divisor\n            if is_divisible(num, div) and all(is_divisible(d, div) for d in digits):\n                # If it is, print the number\n                print(num)\n                break"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    def is_divisible_by_digit(num, digit):\n        return num % digit == 0\n\n    result = []\n    for num in range(startnum, endnum + 1):\n        digits = list(str(num))\n        if all(is_divisible_by_digit(int(digit), int(digit)) for digit in digits):\n            result.append(num)\n\n    return result"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum to endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    # Convert the start and end numbers to strings and split them into individual digits\n    start_str = str(startnum)\n    end_str = str(endnum)\n    digits = [int(d) for d in start_str]\n    \n    # Find the range of numbers within the given range that are divisible by every digit\n    filtered_nums = [num for num in range(startnum, endnum+1) if all(d % num == 0 for d in digits)]\n    \n    return filtered_nums"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    def is_divisible(num):\n        return all(int(digit) % num == 0 for digit in str(num))\n    return list(filter(is_divisible, range(startnum, endnum + 1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    return list(filter(lambda x: all(int(digit) % int(digit) == 0 for digit in str(x)), range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    This function takes two arguments, startnum and endnum, which are the range of numbers to check.\n    The function then iterates through each number between startnum and endnum.\n    For each number, it checks if it is divisible by every digit in the number.\n    If it is divisible by every digit, the number is added to a list of divisible numbers.\n    Finally, the list of divisible numbers is returned.\n    \"\"\"\n    divisible_numbers = []\n    for num in range(startnum, endnum+1):\n        digits = [int(digit) for digit in str(num)]\n        if all(d in digits for d in digits):\n            divisible_numbers.append(num)\n    return divisible_numbers"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    def is_divisible(num):\n        return all(int(d) % num == 0 for d in str(num))\n\n    result = list(filter(is_divisible, range(startnum, endnum + 1)))\n    return result"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi*r*r*a/180"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * r**2 * a / 360"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * r**2 * a / 360 # formula for area of a sector"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        print(\"The angle is larger than 360 degrees.\")\n        return None\n    else:\n        return math.pi*(r**2)*(a/360)"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n\n    s = r * math.sin(math.radians(a/2))\n    area = math.pi * r**2\n\n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r**2 * a / 360\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r**2 * a/360\n        return area\n"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi*r**2*a/360"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * r * r"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r**2 * a/360\n        return area"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    This function takes three string sequences X, Y and Z as input and returns the longest common subsequence (LCS) for them.\n    '''\n\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n\n    # create a table to store lengths of LCS of prefixes of X[], Y[], and Z[]\n    L = [[0] * (n + 1) for i in range(m + 1)]\n\n    # Build L[m+1][n+1] in bottom up manner\n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0 or j == 0:\n                L[i][j] = 0\n            elif X[i - 1] == Y[j - 1]:\n                L[i][j] = L[i - 1][j - 1] + 1\n            else:\n                L[i][j] = max(L[i - 1][j], L[i][j - 1])\n\n    # if L[m][n] is greater than 0, then LCS is possible\n    if L[m][n] > 0:\n\n        # create a table to store LCS starting from the third string\n        LCS = [[0] * (p + 1) for i in range(m + 1)]\n\n        # Build LCS[m+1][n+1] in bottom up manner\n        for i in range(m + 1):\n            for j in range(n + 1):\n                if i == 0 or j == 0:\n                    LCS[i][j] = 0\n                elif X[i - 1] == Y[j - 1]:\n                    LCS[i][j] = L[i - 1][j - 1]\n                else:\n                    LCS[i][j] = max(LCS[i - 1][j], LCS[i][j - 1])\n\n        # create a list to store the indices of LCS[]\n        index = []\n\n        # find the indices of LCS[] in reverse order\n        i = m\n        j = n\n        while i > 0 and j > 0:\n            if X[i - 1] == Y[j - 1]:\n                index.append(i - 1)\n                i -= 1\n                j -= 1\n            elif LCS[i - 1][j] > LCS[i][j - 1]:\n                i -= 1\n            else:\n                j -= 1\n\n        # Convert indices to a string\n        index.reverse()\n        lcs = ''.join(X[x] for x in index)\n        return lcs\n\n    else:\n        return None"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n\n    m, n, p = len(X), len(Y), len(Z)\n    L = [[0 for j in range(p+1)] for i in range(m+1)]\n\n    for i in range(1, m+1):\n        for j in range(1, p+1):\n            if X[i-1] == Y[j-1]:\n                L[i][j] = L[i-1][j-1] + 1\n            elif L[i-1][j] > L[i][j-1]:\n                L[i][j] = L[i-1][j]\n            else:\n                L[i][j] = L[i][j-1]\n\n    result = []\n    i, j = m, p\n    while i > 0 and j > 0:\n        if X[i-1] == Y[j-1]:\n            result.append(X[i-1])\n            i -= 1\n            j -= 1\n        elif L[i-1][j] > L[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n\n    return ''.join(result[::-1])\n"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z):\n    # Check if all strings have the same length\n    if len(X)!= len(Y)!= len(Z):\n        return \"Error: All strings must have the same length.\"\n\n    # Create a 3x3 table to store the lengths of LCS for all substrings\n    # of X, Y and Z\n    dp = [[0 for j in range(3)] for i in range(3)]\n\n    # Fill the table in bottom up manner\n    for i in range(len(X)):\n        for j in range(len(Y)):\n            for k in range(len(Z)):\n                # If the current characters are same, we can take the LCS of \n                # two substrings and one substring\n                if X[i] == Y[j] and Y[j] == Z[k]:\n                    dp[i+1][j+1] = dp[i][j] + dp[i][k] + dp[i][j+1]\n                # If the current character is in the first string, we can take \n                # the LCS of the substring of X and Y\n                elif X[i] == Y[j]:\n                    dp[i+1][j+1] = dp[i][j] + dp[i+1][j]\n                # If the current character is in the second string, we can take \n                # the LCS of the substring of Y and Z\n                elif Y[j] == Z[k]:\n                    dp[i+1][j+1] = dp[i][j] + dp[i][k]\n                # If the current character is in the third string, we can take \n                # the LCS of the substring of X and Z\n                else:\n                    dp[i+1][j+1] = dp[i][j] + dp[i][k]\n\n    # Return the length of the LCS\n    return dp[len(X)][len(Y)][len(Z)]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    \n    # creating a table to store the lengths of LCS of subsequences\n    L = [[0]*(o+1) for i in range(m+1)]\n    \n    # filling the table in bottom up manner\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(o+1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i-1][j-1][k-1])\n    \n    # the length of the longest common subsequence is stored in the 3rd element of the last row of the table\n    return L[m][n][o]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    \n    # create a dictionary to store lengths of longest common subsequences for prefixes of X and Y\n    lcp_len = {}\n    \n    # function to calculate the length of the longest common subsequence of X and Y\n    def lcs_len(X, Y):\n        # if either X or Y is empty, return 0\n        if not X or not Y:\n            return 0\n        \n        # if the first characters of both strings are same, add 1 to length of the longest common subsequence of X and Y\n        if X[0] == Y[0]:\n            return 1 + lcs_len(X[1:], Y[1:])\n        \n        # if the first characters of X and Y are not same, get the length of the longest common subsequence of X and Y without the first character\n        if lcp_len.get((X[0], Y[0])):\n            return lcp_len.get((X[0], Y[0]))\n        \n        # if the length of the longest common subsequence of X and Y without the first character is greater than or equal to the length of the longest common subsequence of X and Y without the first character, then set the length of the longest common subsequence of X and Y without the first character as the length of the longest common subsequence of X and Y without the first character\n        else:\n            return max(lcs_len(X[1:], Y), lcs_len(X, Y[1:]))\n    \n    # function to calculate the length of the longest common subsequence for the given three string sequence\n    def lcp(X, Y, Z):\n        # if X is empty, return length of Y in Z\n        if not X:\n            return lcs_len(Y, Z)\n        \n        # if Y is empty, return length of X in Z\n        if not Y:\n            return lcs_len(X, Z)\n        \n        # if the first characters of X and Y are same, return 1 + length of the longest common subsequence of X and Y in Z\n        if X[0] == Y[0]:\n            return 1 + lcp(X[1:], Y[1:], Z)\n        \n        # if the first characters of X and Y are not same, get the length of the longest common subsequence of X and Y without the first character and the length of the longest common subsequence of the prefixes of X and Y in Z\n        if lcp_len.get((X[0], Y[0])):\n            lcp_len[(X[0], Y[0])] = max(lcp_len.get((X[0], Y[0])), lcp(X[1:], Y, Z), lcp(X, Y[1:], Z))\n            return lcp_len.get((X[0], Y[0]))\n        \n        # if the length of the longest common subsequence of X and Y without the first character is greater than or equal to the length of the longest common subsequence of the prefixes of X and Y in Z, then set the length of the longest common subsequence of X and Y without the first character as the length of the longest common subsequence of X and Y without the first character\n        else:\n            lcp_len[(X[0], Y[0])] = max(lcp(X[1:], Y, Z), lcp(X, Y[1:], Z))\n            return lcp_len.get((X[0], Y[0]))\n    \n    # call the function to calculate the length of the longest common subsequence for the given three string sequence\n    return lcp(X, Y, Z)"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z):\n    \"\"\"\n    This function finds the longest common subsequence (LCS) of three string sequences.\n    \"\"\"\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n\n    # Create a table to store lengths of longest common suffix\n    LCS = [[0] * (p + 1) for i in range(m + 1)]\n\n    # Fill in LCS table in bottom up manner\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if X[i - 1] == Y[j - 1]:\n                LCS[i][j] = LCS[i - 1][j - 1] + 1\n            else:\n                LCS[i][j] = max(LCS[i - 1][j], LCS[i][j - 1])\n\n    # Backtrack to find the LCS\n    lcs_index = LCS[m][n]\n    lcs_list = []\n    while lcs_index > 0:\n        if X[m - lcs_index] == Y[n - lcs_index]:\n            lcs_list.append(X[m - lcs_index])\n            m -= 1\n            n -= 1\n            lcs_index -= 1\n        elif X[m - lcs_index] < Y[n - lcs_index]:\n            m -= 1\n        else:\n            n -= 1\n\n    # Reverse the LCS to get the common subsequence\n    lcs_list.reverse()\n    return \"\".join(lcs_list)"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z):\n    # Convert all strings to lists of characters\n    X_list = list(X)\n    Y_list = list(Y)\n    Z_list = list(Z)\n\n    # Initialize a 3D array to store the length of LCS for all possible subsequences\n    LCS = [[[0] * (len(Z_list) + 1) for _ in range(len(Y_list) + 1)] for _ in range(len(X_list) + 1)]\n\n    # Fill the 3D array using dynamic programming\n    for i in range(len(X_list) + 1):\n        for j in range(len(Y_list) + 1):\n            for k in range(len(Z_list) + 1):\n                if i == 0 or j == 0 or k == 0:\n                    LCS[i][j][k] = 0\n                elif X_list[i - 1] == Y_list[j - 1] == Z_list[k - 1]:\n                    LCS[i][j][k] = LCS[i - 1][j - 1][k - 1] + 1\n                else:\n                    LCS[i][j][k] = max(LCS[i - 1][j][k], LCS[i][j - 1][k], LCS[i][j][k - 1])\n\n    # Return the length of the longest common subsequence\n    return LCS[len(X_list)][len(Y_list)][len(Z_list)]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    M = len(X)\n    N = len(Y)\n    O = len(Z)\n\n    # Initialize LCS matrix\n    L = [[0 for j in range(O+1)] for i in range(M+1)]\n\n    # Fill the matrix in bottom-up fashion\n    for i in range(1, M+1):\n        for j in range(1, O+1):\n            if X[i-1] == Y[j-1]:\n                L[i][j] = L[i-1][j-1] + 1\n            else:\n                L[i][j] = max(L[i-1][j], L[i][j-1])\n\n    # Return the length of L[M][O]\n    return L[M][O]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    n = len(X)\n    m = len(Y)\n    p = [[0]*(m+1) for i in range(n+1)]\n    \n    # fill the table in bottom up fashion\n    for i in range(n+1):\n        for j in range(m+1):\n            if i == 0 or j == 0:\n                p[i][j] = 0\n            elif X[i-1] == Y[j-1]:\n                p[i][j] = p[i-1][j-1] + 1\n            else:\n                p[i][j] = max(p[i-1][j], p[i][j-1])\n        \n    # create the LCS string\n    lcs = ''\n    i = n\n    j = m\n    while i > 0 and j > 0:\n        if X[i-1] == Y[j-1]:\n            lcs = X[i-1] + lcs\n            i -= 1\n            j -= 1\n        elif p[i-1][j] > p[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n            \n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    \n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n    \n    dp = [[0 for j in range(p+1)] for i in range(m+1)]\n    \n    for i in range(1, m+1):\n        for j in range(1, p+1):\n            if X[i-1] == Y[j-1] and Z[i-1] == Z[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    \n    lcs_len = dp[m][p]\n    lcs = \"\"\n    \n    i = m\n    j = p\n    \n    while lcs_len > 0:\n        if X[i-1] == Y[j-1] and Z[i-1] == Z[j-1]:\n            lcs_len -= 1\n            lcs = X[i-1] + lcs\n            i -= 1\n            j -= 1\n        elif dp[i-1][j] > dp[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n    \n    return lcs"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into words\n    words = re.findall(r'\\b[A-Z][a-z]+\\b', str1)\n\n    # Capitalize the first letter of each word\n    words = [word.capitalize() for word in words]\n\n    # Join the words with spaces\n    result =''.join(words)\n\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef capital_words_spaces(string):\n    # create a regular expression to match all words that start with capital letters\n    regex = re.compile(r'\\b[A-Z][a-z]+\\b')\n    # use the regex to find all matches in the string\n    matches = regex.finditer(string)\n    # loop through each match and add a space before the first letter of each word\n    for match in matches:\n        # extract the substring between the start and end of the match\n        word = match.group()\n        # add a space before the first letter of the word\n        word ='' + word[0] + word[1:]\n        # replace the original match with the modified word\n        string = string.replace(match.group(), word, 1)\n    return string"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # split the string into words\n    words = re.findall(r'\\b\\w+\\b', str1)\n    \n    # iterate over each word\n    for i in range(len(words)):\n        # check if the first letter of the word is capitalized\n        if words[i][0].isupper():\n            # if it is, add a space before the word\n            words[i] ='' + words[i]\n    \n    # join the words with spaces\n    result = ''.join(words)\n    \n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = re.sub(r'\\s+([A-Z])', r'\\1 ', str1)\n    str1 = re.sub(r'([A-Z])\\s+', r'\\1 ', str1)\n    str1 = re.sub(r'([A-Z])\\s+', r'\\1', str1)\n    return str1"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # define a regular expression pattern to match capitalized words\n    pattern = r'\\b[A-Z][a-z]*\\b'\n    # use the re.findall() function to find all the matches in the string\n    matches = re.findall(pattern, str1)\n    # iterate over the matches and replace them with spaces\n    for match in matches:\n        str1 = str1.replace(match,'' + match.lower() +'')\n    # return the modified string\n    return str1"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef capital_words_spaces(string):\n    words = re.findall(r'\\b\\w+\\b', string.lower())\n    capitalized_words = [word.capitalize() for word in words]\n    return''.join(capitalized_words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    \"\"\"\n    Write a function to put spaces between words starting with capital letters in a given string.\n    \"\"\"\n    # Remove all non-alphanumeric characters from the string\n    str1 = re.sub(r'[^\\w\\s]', '', str1)\n    # Convert all words to lowercase\n    str1 = str1.lower()\n    # Split the string into words using split() method\n    words = str1.split()\n    # Initialize an empty list to store the capitalized words\n    capitalized_words = []\n    # Loop through each word in the list\n    for word in words:\n        # If the word starts with a capital letter, add a space and append the word to the list\n        if word[0].isupper():\n            capitalized_words.append(' ')\n        capitalized_words.append(word)\n    # Join the list of capitalized words into a string using join() method\n    result =''.join(capitalized_words)\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into words\n    words = re.findall(r'\\b\\w+\\b', str1)\n    # Convert all words starting with capital letter to lower case\n    words = [word.lower() for word in words]\n    # Split the string again to remove the words starting with capital letters\n    words = re.sub(r'\\b\\w+\\b', '', str1)\n    # Join the words with spaces\n    str2 =''.join(words)\n    # Return the modified string\n    return str2"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Define a regular expression pattern to match words starting with capital letters\n    pattern = r'\\b[A-Z][a-z]+\\b'\n    # Use the re.sub() function to replace all the matched words with spaces\n    result = re.sub(pattern, r'\\1\\ ', str1)\n    # Return the modified string\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', str1)\n    result = []\n    for word in words:\n        if word[0].isupper():\n            result.append(word)\n        else:\n            result.append(word[0] +'' + word[1:])\n    return''.join(result)"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    nums = []\n    for num_str in nums_str:\n        try:\n            nums.append(float(num_str))\n        except ValueError:\n            pass\n    nums.sort()\n    return nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    This function takes a list of strings of numbers as input and returns a sorted list of strings in ascending order of the numeric values.\n    '''\n    # Create an empty list to store the sorted numeric strings\n    nums = []\n    # Loop through each string in the list of strings\n    for num_str in nums_str:\n        # Convert the string to a float and append it to the nums list if it is numeric\n        if num_str.replace('.', '', 1).isdigit():\n            nums.append(float(num_str))\n    # Sort the nums list in ascending order\n    nums.sort()\n    # Convert each float in the nums list back to a string and return the sorted list\n    return [str(num) for num in nums]"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    # Convert all strings of numbers to integers\n    nums = [int(num_str) for num_str in nums_str]\n\n    # Sort the list in ascending order\n    nums.sort()\n\n    # Convert the sorted list back to strings and return\n    return [str(num) for num in nums]"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Convert the list of strings to a list of integers\n    nums = [int(num) for num in nums_str]\n    \n    # Sort the list of integers using the built-in sort() method\n    nums.sort()\n    \n    # Convert the sorted list of integers back to a list of strings\n    nums_str = [str(num) for num in nums]\n    \n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Convert the list of strings to a list of integers\n    nums = [int(num) for num in nums_str]\n    # Sort the list of integers\n    nums.sort()\n    # Convert the list of integers back to a list of strings\n    nums_str = [str(num) for num in nums]\n    # Return the sorted list of strings\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    nums_list = []\n    for num_str in nums_str:\n        num_list = [int(i) for i in num_str.split('.')]\n        nums_list.append(num_list)\n    nums_list.sort(key=lambda x: float('.'.join(map(str, x))))\n    return nums_list"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = []\n    for num_str in nums_str:\n        try:\n            nums.append(float(num_str))\n        except ValueError:\n            continue\n    \n    nums.sort()\n    \n    result = []\n    for num in nums:\n        result.append(str(num))\n    \n    return result"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key=lambda x: [int(i) for i in x.split('.')])\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key=lambda x: int(x))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    # Split the strings into numbers and strings\n    nums = [int(num) for num in nums_str if num.isdigit()]\n    strings = [num for num in nums_str if not num.isdigit()]\n\n    # Sort the numbers and strings\n    nums.sort()\n    strings.sort()\n\n    # Combine the sorted lists\n    sorted_nums_str = nums + strings\n\n    return sorted_nums_str"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # add the tuple to the list\n    test_list.append(test_tup)\n\n    # print the updated list\n    print(test_list)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Add the given tuple to the given list.\n    \"\"\"\n    for item in test_list:\n        if item in test_tup:\n            test_list.remove(item)\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # Convert the list to a set to remove any duplicates\n    test_set = set(test_list)\n\n    # Add the tuple to the set to get the new list with the tuple\n    test_set.add(test_tup)\n\n    # Convert the set back to a list and return it\n    return list(test_set)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    test_list.append(test_tup)\n    print(test_list)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    print(\"The updated list is:\", test_list)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # Base case: If current node is 1st node, then it is a min heap\n    if i == 0:\n        return True\n    \n    # If the current node is greater than its parent, then it is not a min heap\n    elif arr[i] < arr[(i-1)//2]:\n        return False\n    \n    # Recursively check the children nodes of the current node\n    else:\n        return check_min_heap_helper(arr, (i-1)//2)\n\ndef check_min_heap(arr):\n    '''\n    This function checks if the given array represents min heap or not.\n    '''\n    # Helper function to check the current node of the array\n    return check_min_heap_helper(arr, len(arr)-1)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    \"\"\"\n    Write a function to check if the given array represents min heap or not.\n    \"\"\"\n    if i == 0:\n        return True\n    if arr[i] < arr[parent(i)]:\n        return False\n    return check_min_heap_helper(arr, parent(i))\n\ndef is_min_heap(arr):\n    \"\"\"\n    Check if the given array represents min heap or not.\n    \"\"\"\n    n = len(arr)\n    return check_min_heap_helper(arr, n-1)\n\ndef parent(i):\n    \"\"\"\n    Find the parent of the given index.\n    \"\"\"\n    return (i - 1) // 2\n\ndef left_child(i):\n    \"\"\"\n    Find the left child of the given index.\n    \"\"\"\n    return 2 * i + 1\n\ndef right_child(i):\n    \"\"\"\n    Find the right child of the given index.\n    \"\"\"\n    return 2 * i + 2\n\ndef insert(arr, key):\n    \"\"\"\n    Insert a key into the array.\n    \"\"\"\n    arr.append(key)\n    i = len(arr) - 1\n    while i!= 0 and arr[parent(i)] > arr[i]:\n        arr[parent(i)], arr[i] = arr[i], arr[parent(i)]\n        i = parent(i)\n\ndef delete_min(arr):\n    \"\"\"\n    Delete the minimum element from the array.\n    \"\"\"\n    if len(arr) == 1:\n        arr.pop()\n        return\n    arr[0], arr[len(arr)-1] = arr[len(arr)-1], arr[0]\n    arr.pop()\n    i = 0\n    while left_child(i) < len(arr):\n        j = left_child(i)\n        if right_child(i) < len(arr) and arr[right_child(i)] < arr[j]:\n            j = right_child(i)\n        if arr[j] > arr[i]:\n            arr[i], arr[j] = arr[j], arr[i]\n            i = j\n        else:\n            break\n\ndef main():\n    arr = [64, 34, 25, 12, 22, 11, 90]\n    print(\"Given array:\", arr)\n    if is_min_heap(arr):\n        print(\"Array is a min heap.\")\n    else:\n        print(\"Array is not a min heap.\")\n\n    insert(arr, 50)\n    print(\"After inserting a key 50:\", arr)\n    delete_min(arr)\n    print(\"After deleting the minimum element:\", arr)\n\n    if is_min_heap(arr):\n        print(\"Array is a min heap.\")\n    else:\n        print(\"Array is not a min heap.\")\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. \n    https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    \n    # Check if the current node is greater than its parent\n    if i > 0 and arr[i] < arr[i//2]:\n        return False\n    \n    # Recursively check the left and right child nodes of the current node\n    left_child = 2*i + 1\n    right_child = 2*i + 2\n    \n    return (check_min_heap_helper(arr, left_child) and check_min_heap_helper(arr, right_child))"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    left = 2 * i + 1\n    right = 2 * i + 2\n    if left < len(arr) and arr[i] > arr[left]:\n        return False\n    if right < len(arr) and arr[i] > arr[right]:\n        return False\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n    for i in range(1, n):\n        if arr[i] < arr[0]:\n            return False\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n\n    # Base Case: If the index i is greater than or equal to the length of the array, it is a min heap.\n    if i >= len(arr):\n        return True\n\n    # Left child of index i\n    left = 2 * i\n\n    # Right child of index i\n    right = 2 * i + 1\n\n    # If the left child is smaller than the index i, return False\n    if left < len(arr) and arr[i] > arr[left]:\n        return False\n\n    # If the right child is smaller than the index i and the right child is smaller than the left child, return False\n    if right < len(arr) and arr[i] > arr[right] and arr[right] > arr[left]:\n        return False\n\n    # If both conditions are not satisfied, recursively call the function for the left and right children\n    return check_min_heap_helper(arr, left) and check_min_heap_helper(arr, right)\n\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n\n    # Check if the array represents a min heap or not\n    return check_min_heap_helper(arr, 0)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_min_heap(arr):\n    '''\n    This function checks if the given array represents a min heap or not.\n    '''\n    \n    n = len(arr)\n    for i in range(1, n):\n        if arr[i] < arr[0] or (arr[i] == arr[0] and i > 0):\n            return False\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n    elif arr[i] <= arr[i//2]:\n        return False\n    else:\n        return check_min_heap_helper(arr, i//2)\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if len(arr) < 2:\n        return True\n    return check_min_heap_helper(arr, len(arr)//2)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not.\n    '''\n    if i >= len(arr) // 2:\n        return True\n    left = 2 * i + 1\n    right = 2 * i + 2\n    if left < len(arr) and arr[left] > arr[i]:\n        return False\n    if right < len(arr) and arr[right] > arr[i]:\n        return False\n    return check_min_heap_helper(arr, left) and check_min_heap_helper(arr, right)\n\n\ndef check_min_heap(arr):\n    '''\n    Check if the given array represents min heap or not.\n    '''\n    return check_min_heap_helper(arr, 0)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i > 0 and arr[i] < arr[i//2]:\n        return False\n    else:\n        return True\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n    for i in range(n//2-1, -1, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n    return True"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return 2 * jacobsthal_num(n//2) - 1\n    else:\n        return 2 * jacobsthal_num((n-1)//2) - 1"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        prev_prev = 0\n        prev = 1\n        jacob = 1\n        for i in range(2, n+1):\n            jacob = (4 * prev_prev + prev) % 1000000007\n            prev_prev = prev\n            prev = jacob\n        return jacob"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        jacobsthal_num(n-1)\n        return 1 + (jacobsthal_num(n-1) ** 2)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return (2 * jacobsthal_num(n // 2)) + 1\n    else:\n        return (2 * jacobsthal_num((n - 1) // 2)) + 1"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        num = jacobsthal_num(n-1)\n        return 1 + (num * num)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth Jacobsthal number.\n    \"\"\"\n    a = 0\n    b = 1\n    j = 0\n    while j < n:\n        a, b = b, a + b\n        j += 1\n    return b\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The\", n, \"th Jacobsthal number is:\", jacobsthal_num(n))"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def jacobsthal_num(n): \n    \"\"\"\n    Write a function to find the nth jacobsthal number.\n    \"\"\"\n    if n == 0:\n        return 0\n    else:\n        a, b = 0, 1\n        for i in range(n):\n            c = a + b\n            a = b\n            b = c\n        return b"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    jacobsthal_list = [0, 1, 1]\n    for i in range(2, n):\n        jacobsthal_list.append(jacobsthal_list[i-1] + jacobsthal_list[i-2] + jacobsthal_list[i-3])\n    return jacobsthal_list[n-1]"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return jacobsthal_num(n//2) + jacobsthal_num(n//2)\n    else:\n        return jacobsthal_num(n//2) + jacobsthal_num(n//2) + 1"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    # create an empty dictionary to store the count of each element in the test list\n    count_dict = {}\n    for item in test_list:\n        if item in count_dict:\n            count_dict[item] += 1\n        else:\n            count_dict[item] = 1\n\n    # sort the dictionary by the values in descending order and store the keys in a list\n    sorted_keys = sorted(count_dict.keys(), key=lambda x: count_dict[x], reverse=True)\n\n    # initialize variables to store the minimum k records\n    min_k_records = []\n    count = 0\n\n    # iterate over the sorted keys, adding k elements to the min_k_records until the count reaches K\n    for key in sorted_keys:\n        if count == K:\n            break\n        count += 1\n        min_k_records.append(key)\n\n    return min_k_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    min_list = []\n    for i in range(len(test_list)):\n        if len(min_list) < K:\n            min_list.append(test_list[i])\n        else:\n            if test_list[i][1] < min_list[0][1]:\n                min_list = [test_list[i]]\n            elif test_list[i][1] == min_list[0][1]:\n                min_list.append(test_list[i])\n\n    return min_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Sort the list of tuples by first element\n    test_list.sort()\n\n    # Initialize minimum value to infinity\n    min_val = float('inf')\n\n    # Initialize counter for minimum k records\n    min_k_count = 0\n\n    # Iterate through the sorted list of tuples\n    for i in range(len(test_list)):\n        # Check if the current record has a smaller value\n        if test_list[i][0] < min_val:\n            # If yes, update minimum value and counter for minimum k records\n            min_val = test_list[i][0]\n            min_k_count = 0\n        # If current record has same value as minimum value, increment counter for minimum k records\n        elif test_list[i][0] == min_val:\n            min_k_count += 1\n        # If the counter for minimum k records has exceeded k, return minimum value\n        if min_k_count >= K:\n            return min_val"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    sorted_list = sorted(test_list)\n    min_k_records = []\n\n    for i in range(K):\n        min_k_records.append(sorted_list[i])\n\n    return min_k_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n\n    # sort the list based on the second element in tuple\n    sorted_list = sorted(test_list, key=lambda x: x[1])\n\n    # check if there are enough elements in the sorted list\n    if len(sorted_list) < K:\n        return []\n\n    # initialize minimum k to be the first element in the list\n    min_k = sorted_list[0]\n\n    # iterate over the sorted list and add the minimum k element to the result list until we have k elements in the result list\n    result_list = []\n    i = 0\n    while i < len(sorted_list) and len(result_list) < K:\n        if sorted_list[i] == min_k:\n            result_list.append(sorted_list[i])\n            i += 1\n        else:\n            min_k = sorted_list[i]\n\n    return result_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    Input:\n        test_list: list of tuples representing records with attributes\n        K: integer denoting number of records to be selected\n    Output:\n        minimum K records from test_list\n    '''\n    # create a set to store the distinct attributes\n    attributes = set()\n    # iterate through the test list to extract the distinct attributes\n    for record in test_list:\n        attributes.add(record[0])\n    # sort the attributes in ascending order\n    sorted_attributes = sorted(list(attributes))\n    # iterate through the test list to select the K records with the smallest attributes\n    min_k_records = []\n    for record in test_list:\n        # if the current record has the smallest attributes, add it to min_k_records\n        if all(record[attribute] == sorted_attributes[0] for attribute in sorted_attributes):\n            min_k_records.append(record)\n            if len(min_k_records) == K:\n                break\n    # return the minimum K records\n    return min_k_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # create a dictionary to store the frequency of each key\n    freq = {}\n    for item in test_list:\n        if item[0] in freq:\n            freq[item[0]] += 1\n        else:\n            freq[item[0]] = 1\n\n    # sort the dictionary in ascending order of values\n    sorted_freq = sorted(freq.items(), key=lambda x: x[1])\n\n    # find the minimum k records\n    min_records = []\n    for i in range(min(K, len(sorted_freq))):\n        min_records.append(sorted_freq[i][0])\n\n    # return the minimum k records\n    return min_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    \"\"\"\n    Write a function to find minimum k records from tuple list.\n\n    Args:\n    test_list (list): List of tuples containing integer values.\n    K (int): Number of records to be returned.\n\n    Returns:\n    list: List of K tuples containing the minimum k records from test_list.\n    \"\"\"\n    test_list.sort()\n    min_list = []\n    for i in range(len(test_list)-K):\n        min_list.append(test_list[i])\n    return min_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    This function takes a tuple list as input and a value for K as an argument. \n    The function returns the minimum K records from the input tuple list.\n    '''\n    \n    # Sort the tuple list based on the first element of each tuple\n    test_list.sort()\n    \n    # Initialize minimum count and minimum record\n    min_count = 0\n    min_record = None\n    \n    # Loop through the sorted tuple list\n    for i in range(K):\n        \n        # If the count for the current record is less than the minimum count\n        if test_list[i][0] < min_count:\n            \n            # Update minimum count and minimum record\n            min_count = test_list[i][0]\n            min_record = test_list[i][1]\n    \n    # Return the minimum K records\n    return min_record"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    test_list.sort(key=lambda x: x[1])\n    result = []\n    i = 0\n    while i < len(test_list) and len(result) < K:\n        result.append(test_list[i])\n        i += 1\n    return result\n"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # Initialize an empty list to store common elements\n    common_elements = []\n    \n    # Loop through each element in l1\n    for i in range(len(l1)):\n        # Check if the element is present in l2 and l3 at the same index\n        if l1[i] in l2[i] and l1[i] in l3[i]:\n            # If it is, add it to the common_elements list\n            common_elements.append(l1[i])\n    \n    # Return the list of common elements\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2[i] and l1[i] in l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # Create a dictionary to store the common elements\n    common_elements = {}\n    \n    # Loop through all elements in the lists\n    for i in range(len(l1)):\n        # If the element is present in all lists\n        if l1[i] in l2 and l1[i] in l3:\n            # Add it to the dictionary as a key\n            common_elements[l1[i]] = True\n    \n    # Convert the dictionary to a list and return it\n    return list(common_elements.keys())"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # initialize an empty list to store the common elements\n    common_elements = []\n    # iterate over all indices in the first list\n    for i in range(len(l1)):\n        # check if the element at this index is also in the second list\n        if l1[i] in l2 and l1[i] in l3:\n            # if it is, add it to the common_elements list\n            common_elements.append(l1[i])\n    # return the list of common elements\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            if l2[l2.index(l1[i])].index(l1[i]) == 0:\n                common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # create an empty list to store the common elements\n    common_elements = []\n    # loop through each index in the first list\n    for i in range(len(l1)):\n        # check if the current element is in the second list at the same index\n        if l1[i] in l2[i]:\n            # check if the current element is in the third list at the same index\n            if l1[i] in l3[i]:\n                # if it is, add it to the common_elements list\n                common_elements.append(l1[i])\n    # return the common_elements list\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] in l1:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # Create a list to store the common elements\n    common_elements = []\n    # Loop through all the indices of the first list\n    for i in range(len(l1)):\n        # Check if the current index exists in the second and third lists\n        if l1[i] in l2[i] and l1[i] in l3[i]:\n            # If the current index exists in both lists, add it to the common elements list\n            common_elements.append(l1[i])\n    # Return the common elements list\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] in common_elements:\n            continue\n        elif l1[i] in l2 and l1[i] in l3:\n            common_elements.append(l1[i])\n        elif l1[i] in l2:\n            common_elements.append(l1[i])\n        elif l1[i] in l3:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = float('inf')\n    second_smallest = float('inf')\n\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = numbers[0]\n    second_smallest = numbers[1]\n    for number in numbers[2:]:\n        if number < smallest:\n            second_smallest = smallest\n            smallest = number\n        elif number < second_smallest:\n            second_smallest = number\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # Create a list of all the numbers in the original list\n    all_numbers = numbers[:]\n    \n    # Sort the list in ascending order\n    all_numbers.sort()\n    \n    # Return the second smallest number\n    return all_numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # Sort the list in ascending order\n    numbers.sort()\n    \n    # Return the second smallest number\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = numbers[0]\n    second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    This function takes a list of numbers as input and returns the second smallest number in the list.\n\n    Parameters:\n    numbers: A list of numbers.\n\n    Returns:\n    The second smallest number in the list.\n\n    \"\"\"\n    smallest = float('inf')\n    second_smallest = float('inf')\n\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n\n    return second_smallest\n"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    \n    smallest = second_smallest = float('inf')\n    \n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    \n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    if len(numbers) < 2:\n        return None\n\n    smallest = float('inf')\n    second_smallest = float('inf')\n\n    for number in numbers:\n        if number < smallest:\n            second_smallest = smallest\n            smallest = number\n        elif number < second_smallest and number!= smallest:\n            second_smallest = number\n\n    if second_smallest == float('inf'):\n        return None\n    else:\n        return second_smallest"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r\"a(b)*\"\n    matches = re.findall(pattern, text)\n    if matches:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. \n    '''\n    pattern = r'ab+'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a[b]*'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = re.compile(r'a[b]*')\n    result = pattern.search(text)\n    if result:\n        print(\"Found a string that has an 'a' followed by one or more 'b's.\")\n    else:\n        print(\"No such string found.\")"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'ab*a'\n    match = re.search(pattern, text)\n    if match:\n        return 'The pattern was found in the text.'\n    else:\n        return 'The pattern was not found in the text.'"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a[b]+'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a.*?b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a(?:b+)*'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return \"Not found\""
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a(b)*'\n    match = re.search(pattern, text)\n    if match:\n        print('Match found!')\n    else:\n        print('No match found!')"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(b*)'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j]:\n                count += 1\n                if count % 100000 == 0:\n                    print(count)\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    \"\"\"\n    Write a function to count the pairs of reverse strings in the given string list.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j] or test_list[j][::-1] == test_list[i]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n\n    # create an empty dictionary to store the counts of reverse pairs\n    reverse_pair_count = {}\n\n    # iterate over the list of strings\n    for string in test_list:\n\n        # convert the string to a list of characters\n        char_list = list(string)\n\n        # sort the list of characters in reverse order\n        char_list.sort(reverse=True)\n\n        # join the sorted list of characters back into a string\n        sorted_string = ''.join(char_list)\n\n        # if the sorted string is already in the dictionary, increment its count\n        if sorted_string in reverse_pair_count:\n            reverse_pair_count[sorted_string] += 1\n\n        # otherwise, add the sorted string to the dictionary with a count of 1\n        else:\n            reverse_pair_count[sorted_string] = 1\n\n    # return the dictionary containing the counts of reverse pairs\n    return reverse_pair_count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    \"\"\"\n    Write a function to count the pairs of reverse strings in the given string list. \n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1] and test_list[j] == test_list[i][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    count = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n\n    reverse_pairs = 0\n    for string in test_list:\n        for i in range(len(string)):\n            for j in range(i+1, len(string)):\n                if string[i:j] == string[j:i][::-1]:\n                    reverse_pairs += 1\n    return reverse_pairs"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] in test_list[j:] and test_list[j][::-1] in test_list[i+1:]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    count = 0\n    for s1 in test_list:\n        for s2 in test_list:\n            if s1!= s2 and s1[::-1] == s2:\n                count += 1\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # create an empty dictionary\n    sublists = {}\n\n    # loop through each list in the input list\n    for sublist in list1:\n        # convert each list to a tuple\n        sublist_tuple = tuple(sublist)\n        # check if the tuple already exists in the dictionary\n        if sublist_tuple in sublists:\n            # if it does, increment the value by 1\n            sublists[sublist_tuple] += 1\n        else:\n            # if it doesn't, add the tuple and set its value to 1\n            sublists[sublist_tuple] = 1\n\n    # return the dictionary with the counts\n    return sublists"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    unique_sublists = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple not in unique_sublists:\n            unique_sublists[sublist_tuple] = 1\n        else:\n            unique_sublists[sublist_tuple] += 1\n    return unique_sublists"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count_dict = {}\n    for num in list1:\n        if tuple(num) in count_dict:\n            count_dict[tuple(num)] += 1\n        else:\n            count_dict[tuple(num)] = 1\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Convert each list in the input list to a tuple and count its occurrences\n    count = {}\n    for item in list1:\n        if isinstance(item, list):\n            item = tuple(item)\n        count[item] = count.get(item, 0) + 1\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # initialize an empty dictionary\n    counts = {}\n    # iterate over each list in the input list\n    for item in list1:\n        # convert the list to a tuple\n        tuple_item = tuple(item)\n        # check if the tuple is already in the dictionary\n        if tuple_item in counts:\n            # increment the count for the tuple\n            counts[tuple_item] += 1\n        else:\n            # add the tuple to the dictionary with count value of 1\n            counts[tuple_item] = 1\n    # return the dictionary of counts\n    return counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublists = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in sublists:\n            sublists[sublist_tuple] += 1\n        else:\n            sublists[sublist_tuple] = 1\n    return sublists"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    \"\"\"\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    \"\"\"\n    # Create a dictionary to store the count of unique sublists\n    unique_sublists_count = {}\n\n    # Loop through the list1\n    for sublist in list1:\n        # Convert the sublist to a tuple\n        sublist_tuple = tuple(sublist)\n\n        # Check if the sublist tuple is already present in the dictionary\n        if sublist_tuple in unique_sublists_count:\n            # If it is, increment the count by 1\n            unique_sublists_count[sublist_tuple] += 1\n        else:\n            # If it is not, add it to the dictionary with a count of 1\n            unique_sublists_count[sublist_tuple] = 1\n\n    # Return the dictionary of unique sublists and their counts\n    return unique_sublists_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # create an empty dictionary to store the counts of unique sublists\n    sublist_counts = {}\n    \n    # iterate over each sublist in the list\n    for i in range(len(list1)):\n        # extract the sublist from the list\n        sublist = list1[i]\n        \n        # convert the sublist to a tuple\n        sublist_tuple = tuple(sublist)\n        \n        # check if the tuple is already in the dictionary\n        if sublist_tuple in sublist_counts:\n            # increment the count of the sublist in the dictionary\n            sublist_counts[sublist_tuple] += 1\n        else:\n            # add the sublist to the dictionary with a count of 1\n            sublist_counts[sublist_tuple] = 1\n    \n    # return the dictionary of unique sublist counts\n    return sublist_counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Creating an empty dictionary to store the count of sublists\n    sublist_counts = {}\n    # Iterating through the list of lists\n    for sublist in list1:\n        # Converting the sublist to a tuple\n        sublist_tuple = tuple(sublist)\n        # Checking if the sublist is already in the dictionary\n        if sublist_tuple in sublist_counts:\n            # Incrementing the count of the sublist in the dictionary\n            sublist_counts[sublist_tuple] += 1\n        else:\n            # Adding the sublist to the dictionary with a count of 1\n            sublist_counts[sublist_tuple] = 1\n    # Returning the dictionary of sublist counts\n    return sublist_counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    \n    # convert the list to a dictionary to count the number of occurrences\n    list_dict = {}\n    for sublist in list1:\n        sublist = tuple(sublist)\n        if sublist in list_dict:\n            list_dict[sublist] += 1\n        else:\n            list_dict[sublist] = 1\n    \n    return list_dict"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    \"\"\"\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    \"\"\"\n\n    # remove any leading or trailing whitespace\n    num = num.strip()\n\n    # check if the string is empty\n    if not num:\n        return False\n\n    # check if the string contains any non-numeric characters\n    if not num.isdigit():\n        return False\n\n    # check if the string contains any non-numeric characters after removing any leading/trailing whitespace\n    if any(char not in '0123456789.' for char in num):\n        return False\n\n    # convert the string to a float and check if it is equal to the original string\n    try:\n        float_num = float(num)\n        if round(float_num, 2) == float_num:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if '.' in num:\n        num_list = num.split('.')\n        if len(num_list) == 2:\n            if num_list[1].isnumeric():\n                precision = len(num_list[1])\n                if precision <= 2:\n                    return True\n    return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        num = float(num)\n        if isinstance(num, float):\n            decimal_places = str(num).split('.')[-1]\n            if len(decimal_places) == 2:\n                return True\n            else:\n                return False\n        else:\n            return False\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    \"\"\"\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    \"\"\"\n    if '.' in num:\n        parts = num.split('.')\n        if len(parts)!= 2:\n            return False\n        decimal_part = parts[1]\n        if len(decimal_part) > 2:\n            return False\n        if decimal_part.startswith('0'):\n            return False\n        for char in decimal_part:\n            if not char.isdigit():\n                return False\n        return True\n    else:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n\n    # Check if the string only contains digits\n    if not num.isdigit():\n        return False\n\n    # Check if the number has at most 2 decimal places\n    if '.' not in num:\n        return False\n    decimal_places = num.split('.')[-1]\n    if len(decimal_places) > 2:\n        return False\n\n    # Check if the number has a maximum of 15 digits after the decimal place\n    if len(num.split('.')[-1]) > 15:\n        return False\n\n    # Check if the number is between -999999999.99 and 999999999.99\n    if float(num) < -999999999.99 or float(num) > 999999999.99:\n        return False\n\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # check if the string is a decimal number with a precision of 2\n    if len(num) > 1 and '.' in num:\n        num_list = num.split('.')\n        if len(num_list[0]) <= 2 and len(num_list[1]) <= 2:\n            return True\n    return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    \"\"\"\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    \"\"\"\n    # Check if the input string is a decimal number with a precision of 2\n    if num.count(\".\") == 1 and num.count(\",\") == 0 and len(num.split(\".\")[1]) <= 2:\n        # Remove any leading or trailing whitespaces from the string\n        num = num.strip()\n        # Convert the string to a float and check if it's a float\n        try:\n            float(num)\n            return True\n        except ValueError:\n            return False\n    else:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    num = str(num)\n    for char in num:\n        if char.isalpha():\n            return False\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    if \".\" in num:\n        num_parts = num.split(\".\")\n        if len(num_parts) == 2 and len(num_parts[0]) <= 2 and len(num_parts[1]) <= 2:\n            decimal_point = num_parts[1].count(\".\")\n            if decimal_point == 0 or decimal_point == 1:\n                return True\n    return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # check if the number contains only digits and a decimal point\n    if not all(char.isdigit() for char in num) or '.' not in num:\n        return False\n    \n    # check if the number has a maximum of 15 digits after the decimal point\n    if '.' in num:\n        num_split = num.split('.')\n        num_digits = len(num_split[0]) + 1\n        if num_digits > 15:\n            return False\n    \n    # convert the number to a float with a precision of 2\n    try:\n        float_num = float(num)\n        if abs(float_num - int(float_num)) > 0.0001:\n            return False\n    except ValueError:\n        return False\n    \n    return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr)!= len(set(arr)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == len(set(arr)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    \"\"\"\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    \"\"\"\n    if len(arr) == 0:\n        return False\n\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] == arr[j]:\n                return False\n    return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    This function takes a list of numbers as input and returns True if it contains only one distinct element and False otherwise.\n    '''\n    # create a set to store the unique elements of the list\n    unique_set = set(arr)\n    \n    # check if the length of the set is equal to 1\n    if len(unique_set) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 0:\n        return False\n    else:\n        arr = set(arr)\n        if len(arr) == 1:\n            return True\n        else:\n            return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique = True\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] == arr[j]:\n                unique = False\n                break\n    return unique"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # checking if the length of the list is equal to 1\n    if len(arr) == 1:\n        return True\n    \n    # creating a dictionary to store the frequency of each element in the list\n    freq = {}\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    \n    # checking if there is only one key in the dictionary, which corresponds to the only distinct element in the list\n    return len(freq) == 1"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # Using set to remove duplicates\n    unique_arr = list(set(arr))\n    \n    # Checking if the length of the list is 1\n    if len(unique_arr) == 1:\n        print(\"The list contains only one distinct element.\")\n    else:\n        print(\"The list contains multiple distinct elements.\")"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr)!= len(set(arr)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    \"\"\"\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    \"\"\"\n    if len(arr) == 1:\n        return True\n    else:\n        for i in range(len(arr)):\n            if arr.count(arr[i])!= 1:\n                return False\n        return True"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [4, 6, 9, 11]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        return True\n    elif monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        return False\n    else:\n        return \"Invalid Month Number\""
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    \n    # check if the month number is in range\n    if monthnum < 1 or monthnum > 12:\n        return False\n    \n    # check if the month number is a leap year\n    if monthnum in [4, 6, 9, 11]:\n        if monthnum in [4, 6, 9, 11]:\n            return True\n        else:\n            return False\n    \n    # check if the month number is a common year\n    if monthnum % 2 == 0:\n        if monthnum % 4 == 0:\n            if monthnum % 100 == 0:\n                if monthnum % 400 == 0:\n                    return True\n                else:\n                    return False\n            else:\n                return True\n        else:\n            return False\n    else:\n        if monthnum % 4 == 0:\n            if monthnum % 100 == 0:\n                if monthnum % 400 == 0:\n                    return True\n                else:\n                    return False\n            else:\n                return True\n        else:\n            return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    \"\"\"\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    \"\"\"\n    days_in_month = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if monthnum3 == 2:\n        if (year % 4 == 0 and year % 100!= 0) or year % 400 == 0:\n            days_in_month[2] = 29\n        else:\n            days_in_month[2] = 28\n    if monthnum3 < 1 or monthnum3 > 12:\n        return \"Invalid month number\"\n    return days_in_month[monthnum3-1]"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n    if monthnum3 in range(1,13):\n        if monthnum3 in range(1,4) or monthnum3 in range(7,10):\n            if monthnum3 % 2 == 0:\n                return months[monthnum3-1] +'has 30 days'\n            else:\n                return months[monthnum3-1] +'has 29 days'\n        else:\n            return months[monthnum3-1] +'has 31 days'\n    else:\n        return 'Invalid month number'"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    if monthnum3 == 2 or monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        return True\n    elif monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8:\n        return False\n    else:\n        return None"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    \"\"\"\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    \"\"\"\n    if monthnum3 == 2:\n        if year % 4 == 0 and (year % 100!= 0 or year % 400 == 0):\n            if monthnum3 % 2 == 0:\n                return 29\n            else:\n                return 28\n        else:\n            if monthnum3 % 2 == 0:\n                return 28\n            else:\n                return 29\n    elif monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        return 30\n    else:\n        return 31"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n\n    if monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        return \"30\"\n    else:\n        return \"not 30\""
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    if monthnum3 in (1,3,5,7,8,10,12):\n        return True\n    elif monthnum3 in (4,6,9,11):\n        return False\n    else:\n        return None"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    # check if the month number is between 1 and 12\n    if monthnum3 < 1 or monthnum3 > 12:\n        return \"Month number must be between 1 and 12\"\n    # check if the month number is divisible by 3\n    if monthnum3 % 3!= 0:\n        return \"Month number must be divisible by 3\"\n    # check if the month number contains 30 days\n    if monthnum3 in [4, 6, 9, 11]:\n        return \"Month number contains 30 days\"\n    else:\n        return \"Month number does not contain 30 days\""
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_min_diff(arr,n): \n    \"\"\"\n    This function takes an array of n integers and returns the minimum difference between any two elements in the array.\n    \"\"\"\n\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize two variables to store the minimum difference and their indices\n    min_diff = float('inf')\n    min_index = -1\n\n    # Traverse through the array and calculate the difference between consecutive elements\n    for i in range(1, n):\n        diff = abs(arr[i] - arr[i-1])\n        if diff < min_diff:\n            min_diff = diff\n            min_index = i-1\n\n    # Return the minimum difference and their indices\n    return min_diff, min_index"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_min_diff(arr, n):\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize the minimum difference as infinite\n    min_diff = float('inf')\n\n    # Iterate over the array\n    for i in range(n):\n        # Calculate the difference between the current element and the previous element\n        diff = arr[i+1] - arr[i]\n\n        # Update the minimum difference if the current difference is smaller\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array of integers and an integer n as input.\n    The function returns the minimum difference between any two elements in the array.\n    \"\"\"\n    # Find the minimum element in the array\n    min_element = arr[0]\n\n    # Iterate through the array\n    for i in range(1, n):\n        # If the element is less than the minimum element, update the minimum element\n        if arr[i] < min_element:\n            min_element = arr[i]\n\n        # Find the difference between the current element and the minimum element\n        diff = arr[i] - min_element\n\n        # If the difference is less than the minimum difference found so far, update the minimum difference\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_min_diff(arr, n):\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize two pointers\n    left = 0\n    right = n - 1\n\n    # Initialize minimum difference variable\n    min_diff = float('inf')\n\n    # Iterate through the array and find minimum difference\n    while left < right:\n        diff = arr[right] - arr[left]\n        if diff < min_diff:\n            min_diff = diff\n        if diff > 0:\n            left += 1\n        else:\n            right -= 1\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_min_diff(arr, n):\n    '''\n    This function takes an array `arr` and its length `n` as input and returns the minimum difference between any two elements in the array.\n    The function uses the concept of binary search to find the minimum difference between any two elements in the array.\n    The function works by iterating over the array and keeping track of the current minimum difference seen so far.\n    The function then calculates the absolute difference between the current element and the next element in the array and updates the minimum difference accordingly.\n    Finally, the function returns the minimum difference found so far.\n    '''\n    min_diff = float('inf')\n    for i in range(n-1):\n        diff = abs(arr[i] - arr[i+1])\n        min_diff = min(min_diff, diff)\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_min_diff(arr, n):\n    # Initialize the minimum difference to infinity\n    min_diff = float('inf')\n    \n    # Sort the array in ascending order\n    arr.sort()\n    \n    # Loop through the array\n    for i in range(n-1):\n        # Calculate the difference between the current and next elements\n        diff = arr[i+1] - arr[i]\n        \n        # Update the minimum difference if the current difference is smaller\n        if diff < min_diff:\n            min_diff = diff\n    \n    # Return the minimum difference\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_min_diff(arr, n):\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize the minimum difference and the count of pairs\n    min_diff = float('inf')\n    count = 0\n\n    # Traverse the array and compare adjacent elements\n    for i in range(n - 1):\n        diff = arr[i + 1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n            count = 1\n        elif diff == min_diff:\n            count += 1\n\n    # Return the count of pairs\n    return count"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes in an array and its size n and returns the minimum difference between any two elements in the array.\n    \"\"\"\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize the minimum difference to the value of the last element\n    min_diff = arr[-1] - arr[0]\n\n    # Loop through the array from the second element to the last element\n    for i in range(1, n-1):\n        # Calculate the difference between the current element and the next element\n        diff = arr[i+1] - arr[i]\n\n        # Update the minimum difference if the difference is smaller\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_min_diff(arr,n): \n    \"\"\"\n    Write a python function to find the minimum difference between any two elements in a given array. \n    \"\"\"\n    # Sort the array in ascending order \n    arr.sort()\n    # Initialize variables for minimum difference and minimum element \n    min_diff = abs(arr[1]-arr[0])\n    min_elem = arr[0]\n    # Loop through the array and find minimum difference and minimum element \n    for i in range(1,n): \n        curr_diff = abs(arr[i]-arr[i-1])\n        if curr_diff < min_diff: \n            min_diff = curr_diff\n            min_elem = arr[i]\n    # Return the minimum difference and minimum element \n    return min_diff, min_elem"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array and its size n as input and returns the minimum difference between any two elements in the array.\n    \"\"\"\n    arr.sort() # sorting the array in ascending order\n    \n    # checking if there are two or more elements in the array\n    if len(arr) <= 1:\n        return 0\n    \n    # finding the minimum difference between any two elements in the array\n    min_diff = abs(arr[-1] - arr[0])\n    for i in range(len(arr)-2):\n        diff = abs(arr[i+1] - arr[i])\n        if diff < min_diff:\n            min_diff = diff\n    \n    return min_diff"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_ctr(str):\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_ctr(str):\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_ctr(str):\n    \"\"\"\n    Write a python function to count number of digits in a given string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_ctr(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    This function takes an integer n as input and returns the nth polite number.\n    The nth polite number is the sum of the nth prime and 10.\n    \"\"\"\n    def is_prime(n):\n        \"\"\"\n        This function takes an integer n as input and returns True if it is a prime number, False otherwise.\n        \"\"\"\n        if n <= 1:\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def nth_prime(n):\n        \"\"\"\n        This function takes an integer n as input and returns the nth prime number.\n        \"\"\"\n        i = 2\n        while True:\n            if is_prime(i):\n                i += 1\n            else:\n                return i - 1\n\n    polite = nth_prime(n) + 10\n    return polite"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # Formula to find nth polite number using mathematical formula\n    a = 5\n    b = 7\n    c = 2\n    d = 1\n    e = 0\n\n    for i in range(n):\n        a, b, c, d, e = a + b + c + d + e, b, c + d, d, e\n\n    # To avoid overflow\n    while a > 10**18:\n        a //= 10\n\n    # Finally, convert the result to a string and return it\n    return str(a)"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number.\n    \"\"\"\n    # Define the polite number sequence\n    polite_numbers = [1, 2, 5, 10, 20, 50, 100]\n    \n    # Check if n is in the polite number sequence\n    if n in polite_numbers:\n        return n\n    \n    # Define the prime numbers less than 100\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    \n    # Check if n is a prime number less than 100\n    for prime in primes:\n        if n % prime == 0 and prime < 100:\n            return prime\n    \n    # Define the irrational numbers less than 100\n    irrational_numbers = [1 / 2, 1 / 3, 1 / 4, 1 / 5, 1 / 6, 1 / 7, 1 / 8, 1 / 9, 1 / 10, 1 / 11, 1 / 12, 1 / 13, 1 / 14, 1 / 15, 1 / 16, 1 / 17, 1 / 18, 1 / 19, 1 / 20, 1 / 21, 1 / 22, 1 / 23, 1 / 24, 1 / 25, 1 / 26, 1 / 27, 1 / 28, 1 / 29, 1 / 30]\n    \n    # Check if n is an irrational number less than 100\n    for irrational in irrational_numbers:\n        if n == irrational and irrational < 100:\n            return irrational\n    \n    # Define the fractional numbers less than 100\n    fractional_numbers = [1 / 2, 1 / 3, 1 / 4, 1 / 5, 1 / 6, 1 / 7, 1 / 8, 1 / 9, 1 / 10, 1 / 11, 1 / 12, 1 / 13, 1 / 14, 1 / 15, 1 / 16, 1 / 17, 1 / 18, 1 / 19, 1 / 20, 1 / 21, 1 / 22, 1 / 23, 1 / 24, 1 / 25, 1 / 26, 1 / 27, 1 / 28, 1 / 29, 1 / 30]\n    \n    # Check if n is a fractional number less than 100\n    for fraction in fractional_numbers:\n        if n % fraction == 0 and fraction < 100:\n            return fraction\n    \n    # Define the square root numbers less than 100\n    square_roots = [1 / 2, 1 / 3, 1 / 4, 1 / 5, 1 / 6, 1 / 7, 1 / 8, 1 / 9, 1 / 10, 1 / 11, 1 / 12, 1 / 13, 1 / 14, 1 / 15, 1 / 16, 1 / 17, 1 / 18, 1 / 19, 1 / 20, 1 / 21, 1 / 22, 1 / 23, 1 / 24, 1 / 25, 1 / 26, 1 / 27, 1 / 28, 1 / 29, 1 / 30]\n    \n    # Check if n is a square root number less than 100\n    for square in square_roots:\n        if n"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number.\n    \"\"\"\n    def nth_polite_number(n):\n        \"\"\"\n        Returns the nth polite number using the Sieve of Eratosthenes algorithm.\n        \"\"\"\n        # Initialize the list of primes to all ones\n        primes = [1] * n\n        \n        # Iterate over the first n-1 numbers\n        for i in range(2, int(math.sqrt(n)) + 1):\n            # Check if i is a prime number\n            if primes[i - 1]:\n                # Mark all multiples of i as composite\n                for j in range(i * i, n, i):\n                    primes[j - 1] = 0\n        \n        # Iterate over the remaining primes and count the number of primes\n        count = 0\n        for i in range(n):\n            if primes[i]:\n                count += 1\n        \n        # Return the nth polite number\n        return count\n    \n    # Call the nth_polite_number function and return its result\n    return nth_polite_number(n)"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef is_polite(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num))+1):\n            if num % i == 0:\n                return False\n        return True\n    \n    def is_perfect_square(num):\n        return num > 0 and int(math.sqrt(num)) * int(math.sqrt(num)) == num\n    \n    def is_divisible_by_3(num):\n        return num % 3 == 0\n    \n    def is_divisible_by_5(num):\n        return num % 5 == 0\n    \n    def is_divisible_by_7(num):\n        return num % 7 == 0\n    \n    def is_divisible_by_11(num):\n        return num % 11 == 0\n    \n    def is_divisible_by_13(num):\n        return num % 13 == 0\n    \n    def is_divisible_by_17(num):\n        return num % 17 == 0\n    \n    def is_divisible_by_19(num):\n        return num % 19 == 0\n    \n    def is_divisible_by_23(num):\n        return num % 23 == 0\n    \n    def is_divisible_by_29(num):\n        return num % 29 == 0\n    \n    def is_divisible_by_31(num):\n        return num % 31 == 0\n    \n    def is_divisible_by_37(num):\n        return num % 37 == 0\n    \n    def is_divisible_by_41(num):\n        return num % 41 == 0\n    \n    def is_divisible_by_43(num):\n        return num % 43 == 0\n    \n    def is_divisible_by_47(num):\n        return num % 47 == 0\n    \n    def is_divisible_by_53(num):\n        return num % 53 == 0\n    \n    def is_divisible_by_59(num):\n        return num % 59 == 0\n    \n    def is_divisible_by_61(num):\n        return num % 61 == 0\n    \n    def is_divisible_by_67(num):\n        return num % 67 == 0\n    \n    def is_divisible_by_71(num):\n        return num % 71 == 0\n    \n    def is_divisible_by_73(num):\n        return num % 73 == 0\n    \n    def is_divisible_by_79(num):\n        return num % 79 == 0\n    \n    def is_divisible_by_83(num):\n        return num % 83 == 0\n    \n    def is_divisible_by_89(num):\n        return num % 89 == 0\n    \n    def is_divisible_by_97(num):\n        return num % 97 == 0\n    \n    def is_divisible_by_101(num):\n        return num % 101 == 0\n    \n    def is_divisible_by_103(num):\n        return num % 103 == 0\n    \n    def is_divisible_by_107(num):\n        return num % 107 == 0\n    \n    def is_divisible_by_109(num):\n        return num % 109 == 0\n    \n    def is_divisible_by_113(num):\n        return num % 113 == 0\n    \n    def is_divisible_by_127(num):\n        return num % 127 == 0\n    \n    def is_divisible_by_131(num):\n        return num % 131 == 0\n    \n    def is_divisible_by_137(num):\n        return num % 137 == 0\n    \n    def is_divisible_by_139(num):\n        return num % 139 == 0\n    \n    def is_divisible_by_149(num):\n        return num % 149 == 0\n    \n    def is_divisible_by_151(num):\n        return num % 151 == 0\n    \n    def is_divisible_by_157(num):\n        return num % 157 == 0\n    \n    def is_divisible_by_163(num):\n        return num % 163 == 0\n    \n    def"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    a = 1\n    b = 1\n    for i in range(2, n):\n        c = (a + b) % 10\n        a = b\n        b = c\n    return a"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # Initialize polite number\n    polite_num = 1\n    \n    # Iterate through the range from 1 to n\n    for i in range(1, n+1):\n        # Check if the number is a polite number\n        if math.gcd(polite_num, i) == 1:\n            polite_num += i\n    \n    # Return the nth polite number\n    return polite_num"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef is_polite(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num))+1):\n            if num % i == 0:\n                return False\n        return True\n    \n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n    \n    def is_prime_palindrome(num):\n        return is_prime(num) and is_palindrome(num)\n    \n    def nth_prime_palindrome(n):\n        count = 0\n        num = 1\n        while count < n:\n            if is_prime_palindrome(num):\n                count += 1\n            num += 1\n        return num\n    \n    return nth_prime_palindrome(n)"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n < 1:\n        return None\n    else:\n        if n == 1:\n            return 1\n        else:\n            num = 2\n            while num < n:\n                if is_prime(num):\n                    return num\n                num += 1\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "To implement this in Python, we can define a function `is_polite` that takes an integer `n` as input and returns the nth polite number as an integer. We can use the `math` module to calculate the sum of the first n-1 integers, which we can compute using a list comprehension. Finally, we can compute the value of p_n using the formula and return it."
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    pairs = []\n    n = len(l1)\n    for i in range(n-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1) - 1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [(l1[i], l1[i+1]) for i in range(len(l1)-1)]"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_wise(lst):\n    \"\"\"\n    This function takes a list as input and returns a list of all pairs of consecutive items in the list.\n    \"\"\"\n    if len(lst) < 2:\n        return []\n    pairs = []\n    for i in range(len(lst) - 1):\n        pairs.append((lst[i], lst[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    n = len(l1)\n    pairs = []\n    for i in range(n-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_wise(lst):\n    '''\n    This function takes a list as input and returns a list of all pairs of consecutive items in the list.\n    '''\n    pair_list = []\n    n = len(lst)\n    for i in range(n-1):\n        pair_list.append((lst[i], lst[i+1]))\n    return pair_list"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    n = len(l1)\n    pairs = []\n    for i in range(n-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pair_list = []\n    for i in range(len(l1)-1):\n        pair_list.append((l1[i], l1[i+1]))\n    return pair_list"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    \"\"\"\n    This function takes a list of numbers and a sum as inputs and returns the count of pairs whose sum is equal to the input sum.\n    \"\"\"\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    n = len(arr)\n    \n    # Sort the array\n    arr.sort()\n    \n    # Iterate through the array and find pairs whose sum is equal to'sum'\n    for i in range(n-1):\n        if i > 0 and arr[i] == arr[i-1]:\n            continue\n        j = i+1\n        while j < n and arr[j] + arr[i] < sum:\n            j += 1\n        count += j - i - 1\n    \n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The function gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    This function takes a list of numbers and a sum as input and returns the count of pairs whose sum is equal to'sum'.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    This function takes a list of numbers and a sum and returns the number of pairs whose sum is equal to the given sum.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    This function takes a list of numbers and a sum as input and returns the number of pairs whose sum is equal to the given sum.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as arguments and returns the list of elements that are in li1 but not in li2.\n    \"\"\"\n    return [elem for elem in li1 if elem not in li2]"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes in two lists and returns the difference between them.\n    \"\"\"\n    diff_list = []\n    for item in li1:\n        if item not in li2:\n            diff_list.append(item)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff_list = []\n    for i in li1:\n        if i not in li2:\n            diff_list.append(i)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff = []\n    for i in li1:\n        if i not in li2:\n            diff.append(i)\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff = []\n    for i in li1:\n        if i not in li2:\n            diff.append(i)\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns a new list that contains all the elements that are present in list1 but not in list2.\n    \"\"\"\n    diff = []\n    for item in li1:\n        if item not in li2:\n            diff.append(item)\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Write a python function to get the difference between two lists.\n    \"\"\"\n    # Find the set intersection of the two lists\n    diff_set = set(li1) & set(li2)\n    # Convert the set to a list and return it\n    return list(diff_set)"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff_list = []\n    for i in range(len(li1)):\n        if li1[i] not in li2:\n            diff_list.append(li1[i])\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return [x for x in li1 if x not in li2]"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Write a python function to get the difference between two lists.\n    \"\"\"\n    # initialize an empty list to store the difference\n    diff_list = []\n    # loop through the first list and compare each element to the second list\n    for element in li1:\n        if element not in li2:\n            diff_list.append(element)\n    # return the difference list\n    return diff_list"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum_of_fourth_power = 0\n    for i in range(1, n+1):\n        if i%2 == 1:\n            sum_of_fourth_power += i**4\n    return sum_of_fourth_power"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2!= 0:\n            sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum_of_powers = 0\n    for i in range(1, n+1, 2):\n        sum_of_powers += i**4\n    return sum_of_powers"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum_of_fourth_powers = 0\n    for i in range(n):\n        num = 3 * i + 1\n        sum_of_fourth_powers += num ** 4\n    return sum_of_fourth_powers"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 1:\n            sum += i ** 4\n    return sum"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not.\n    '''\n    stack = deque()\n    opening_symbols = {')': '(', '}': '{', ']': '['}\n    \n    for char in exp:\n        if char in opening_symbols:\n            stack.append(char)\n        elif char == opening_symbols.get(stack.pop(), None):\n            continue\n        else:\n            return False\n    \n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    balanced = True\n    \n    for i in range(len(exp)):\n        if exp[i] in ['(', '[', '{']:\n            stack.append(exp[i])\n        elif exp[i] in [')', ']', '}']:\n            if len(stack) == 0:\n                balanced = False\n                break\n            else:\n                last_char = stack.pop()\n                if last_char == '(':\n                    if exp[i] == ')':\n                        continue\n                    elif exp[i] == ')':\n                        balanced = False\n                        break\n                elif last_char == '[':\n                    if exp[i] == ']':\n                        continue\n                    elif exp[i] == ']':\n                        balanced = False\n                        break\n                elif last_char == '{':\n                    if exp[i] == '}':\n                        continue\n                    elif exp[i] == '}':\n                        balanced = False\n                        break\n                else:\n                    balanced = False\n                    break\n    \n    if len(stack) > 0:\n        balanced = False\n    \n    return balanced"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                return False\n            elif stack.pop()!= char:\n                return False\n    if not stack:\n        return True\n    else:\n        return False"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    balance = 0\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                return False, balance\n            if char == ')' and stack[-1] == '(':\n                stack.pop()\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n            elif char == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False, balance\n    if stack:\n        return False, balance\n    return True, balance"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if len(stack) == 0:\n                return False\n            elif stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n\n    if len(stack) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                return \"Not Balanced\"\n            top = stack.pop()\n            if char in ['(', '{', '[']:\n                if top in [')', '}', ']']:\n                    return \"Not Balanced\"\n    return \"Balanced\""
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    opening_brackets = {')', '}', ']'}\n    closing_brackets = {')', '}', ']'}\n\n    for char in exp:\n        if char in opening_brackets:\n            stack.append(char)\n        elif char in closing_brackets and stack and stack[-1] in opening_brackets:\n            stack.pop()\n        elif stack:\n            return False\n\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            if stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    \"\"\"\n    This function takes an expression as input and returns True if it is balanced\n    and False otherwise. It uses a stack to keep track of open and closed parentheses.\n    \"\"\"\n    stack = deque()\n\n    for i, char in enumerate(exp):\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                return False\n            last_char = stack.pop()\n            if char in ['(', '{', '['] and last_char not in [')', '}', ']']:\n                return False\n\n    return not stack"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n\n    # Split the string into words and store them in a list\n    words = test_str.split()\n\n    # Initialize an empty list to store the words that have k length\n    k_words = []\n\n    # Loop through each word in the list\n    for word in words:\n\n        # If the length of the word is not equal to K, append it to the k_words list\n        if len(word)!= K:\n            k_words.append(word)\n\n    # Join the words in the k_words list into a string and return the result\n    return''.join(k_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    words_without_length = [word for word in words if len(word)!= K]\n    return \" \".join(words_without_length)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    return \" \".join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)\n"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    words = [word for word in words if len(word)!= K]\n    result =''.join(words)\n    return result"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the string into words\n    words = test_str.split()\n\n    # Initialize an empty list to store the words with length K\n    k_length_words = []\n\n    # Loop through each word\n    for word in words:\n        # Check if the length of the word is K\n        if len(word) == K:\n            # If it is, add it to the k_length_words list\n            k_length_words.append(word)\n\n    # Join the words with k length into a string\n    result =''.join(k_length_words)\n\n    return result"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return \" \".join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.findall(pattern,text)\n    if not matches:\n        return None\n    else:\n        return matches[0],text.find(matches[0])"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        result = []\n        for match in matches:\n            result.append(match[0])\n            result.append(match.start())\n            result.append(match.end())\n        return result\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    \"\"\"\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    \"\"\"\n    match = re.search(pattern,text)\n    if match:\n        return match.group(),match.start(),match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    This function takes a string and a pattern and returns a tuple containing the occurrence and position of the \n    pattern within the string. If there is no match, the function returns None.\n    \"\"\"\n\n    # Compile the regular expression pattern\n    pattern = re.compile(pattern)\n\n    # Find all matches of the pattern in the text\n    matches = pattern.finditer(text)\n\n    # Check if there are any matches\n    if len(matches) == 0:\n        return None\n\n    # Loop through the matches and return the occurrence and position of the pattern\n    for match in matches:\n        return (match.group(), match.start())"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    \"\"\"\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2 == 0:\n                return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    # Loop through the list\n    for i in range(len(nums)):\n        # Check if the current index is odd\n        if i % 2 == 1:\n            # Check if the current index contains odd numbers\n            if sum(nums[i:i+2]) % 2 == 1:\n                # If the current index contains odd numbers, return False\n                return False\n    # If we get here, all numbers are odd\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if i % 2 == 0:\n            for j in range(i, len(nums), 2):\n                if nums[j] % 2 == 0:\n                    return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 1 and nums[i] % 2 == 1:\n            return True\n    return False"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if i == 0 or nums[i] % 2 == 1:\n            continue\n        else:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 1:\n            if nums[i] % 2!= 0:\n                return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    \"\"\"\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    \"\"\"\n    for i in range(0, len(nums), 2):\n        if not all(num % 2 == 1 for num in nums[i:i+2]):\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    # Loop through the given list\n    for i in range(len(nums)):\n        # Check if the current index is odd\n        if i % 2 == 1:\n            # If it is, loop through the numbers in that index\n            for j in range(len(nums[i])):\n                # Check if the current number is odd\n                if nums[i][j] % 2 == 1:\n                    # If it is not, return False\n                    return False\n    # If we make it through the loop without returning False, return True\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2 == 0:\n                print(\"The odd index\", i, \"does not contain odd numbers.\")\n                return False\n    return True"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i + 1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    vowels = 'aeiou'\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i + 1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    for i in range(1, len(test_str)):\n        if test_str[i-1] in vowels and test_str[i] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    for i in range(len(test_str)):\n        for j in range(i+1, len(test_str)):\n            if test_str[i] in vowels and test_str[j] in vowels:\n                count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    for i in range(len(test_str)):\n        if i == 0 or i == len(test_str) - 1:\n            continue  # skip first and last characters\n        if test_str[i - 1] in vowels and test_str[i + 1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    \n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    \n    for i in range(len(test_str)):\n        if i == 0 or i == len(test_str)-1:\n            continue\n        \n        if test_str[i-1] in vowels and test_str[i+1] in vowels:\n            count += 1\n            \n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    unique_elements = list(set(arr))\n    non_repeating_sum = sum(unique_elements)\n    return non_repeating_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_sum(arr):\n    \"\"\"\n    This function takes a list as input and returns the sum of all the unique elements in the list.\n    It eliminates any repeated elements from the list and then calculates the sum of the remaining elements.\n    \"\"\"\n    # Create a set to store unique elements of the list\n    unique_elements = set(arr)\n    \n    # Calculate the sum of the unique elements in the list\n    sum_of_unique_elements = sum(unique_elements)\n    \n    return sum_of_unique_elements"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # Create a set to store unique elements\n    unique_elements = set()\n    # Loop through the list and add each unique element to the set\n    for element in arr:\n        unique_elements.add(element)\n    # Loop through the list again and add each non-unique element to a list\n    non_unique_elements = []\n    for element in arr:\n        if element not in unique_elements:\n            non_unique_elements.append(element)\n    # Calculate the sum of the non-unique elements and return it\n    return sum(non_unique_elements)"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    seen = set()\n    for num in arr:\n        if num not in seen:\n            seen.add(num)\n    return sum(seen)"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # create a dictionary to store the frequency of each element in the array\n    freq = {}\n    for elem in arr:\n        if elem in freq:\n            freq[elem] += 1\n        else:\n            freq[elem] = 1\n    \n    # initialize a variable to store the sum of non-repeated elements\n    non_repeated_sum = 0\n    \n    # iterate over the elements in the array and add those that are not repeated to the sum\n    for elem in arr:\n        if freq[elem] == 1:\n            non_repeated_sum += elem\n    \n    return non_repeated_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_sum(arr):\n    # Create a dictionary to store the indices of the elements in the array\n    indices = {}\n\n    # Initialize a variable to store the sum of non-repeated elements\n    non_repeated_sum = 0\n\n    # Iterate over the array and add the elements to the dictionary\n    for i, x in enumerate(arr):\n        indices[x] = i\n\n    # Iterate over the array again and add the elements that have not been added before to the sum\n    for i, x in enumerate(arr):\n        if i not in indices:\n            non_repeated_sum += x\n\n    return non_repeated_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # Create a set to store unique elements\n    unique_elements = set(arr)\n\n    # Calculate the sum of unique elements\n    sum_of_unique_elements = sum(unique_elements)\n\n    return sum_of_unique_elements"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_sum(arr):\n    '''\n    This function takes a list as input and returns the sum of non-repeated elements in the list.\n    '''\n    # Create a set to store unique elements from the input list\n    unique_elements = set(arr)\n    \n    # Calculate the sum of unique elements\n    unique_sum = sum(unique_elements)\n    \n    # Return the unique sum\n    return unique_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # create a set to store unique elements\n    unique_set = set(arr)\n\n    # calculate the sum of non-repeated elements in the set\n    sum_set = sum(unique_set)\n\n    return sum_set"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    unique_elements = list(set(arr))\n    return sum(unique_elements)"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    group = []\n    for i, num in enumerate(list1):\n        if i == 0 or num!= list1[i-1]:\n            group.append(num)\n        else:\n            continue\n        if len(group) > 1:\n            result.append(list(group))\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for item in list1:\n        if len(list(item)) > 1:\n            for key, group in groupby(item):\n                if key == item:\n                    continue\n                result.append([key] + list(group))\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    new_list = []\n    for i, group in groupby(enumerate(list1)):\n        if i > 0 and group[1][0] == group[0][0] + 1:\n            new_list[-1].append(group[1][0])\n        else:\n            new_list.append(list(group))\n    return new_list"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return list(groupby(list1))"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for key, group in groupby(lst) if not key]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return list(groupby(list1, lambda x: x))"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return list(groupby(list1, lambda x: x))"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for key, group in groupby(list1):\n        if key == list1[0]:\n            result.append([list1[0]])\n        else:\n            result.append(list(group))\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for key, group in groupby(list1):\n        if not key:\n            continue\n        if not result or result[-1][0]!= key:\n            result.append([key])\n        result[-1].extend(list(group))\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    \"\"\"\n    This function takes a list as input and returns a list of sublists where the adjacent elements are consecutive duplicates.\n    \n    Example:\n    Input: [1, 1, 2, 3, 3, 3, 4, 4, 5]\n    Output: [[1, 1, 2], [3, 3, 3], [4, 4], [5]]\n    \"\"\"\n    # Create an iterator of consecutive pairs of elements in the list\n    grouped_items = groupby(enumerate(lst), lambda x: x[0] == x[1]-1)\n    \n    # Use a list comprehension to generate the sublists\n    sublists = [list(group) for _, group in grouped_items]\n    \n    return sublists"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    unique_lists = {}\n    for sublist in list1:\n        if sublist not in unique_lists:\n            unique_lists[sublist] = 1\n        else:\n            unique_lists[sublist] += 1\n    return unique_lists"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublist_count = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = tuple(list1[k] for k in range(i, j))\n            if sublist not in sublist_count:\n                sublist_count[sublist] = 1\n            else:\n                sublist_count[sublist] += 1\n    return sublist_count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublists = {}\n    for i in range(len(list1)):\n        if isinstance(list1[i], list):\n            for j in range(len(list1[i])):\n                if j not in sublists:\n                    sublists[j] = 0\n                sublists[j] += 1\n    return sublists"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # create an empty dictionary to store the counts of sublists\n    sublist_counts = {}\n\n    # loop through the list of lists and count their occurrences\n    for sublist in list1:\n        # convert the sublist to a tuple to make it unique\n        sublist_tuple = tuple(sublist)\n\n        # check if the tuple is already in the dictionary\n        if sublist_tuple not in sublist_counts:\n            # if not, add the tuple with a count of 1\n            sublist_counts[sublist_tuple] = 1\n        else:\n            # if it is, increment its count by 1\n            sublist_counts[sublist_tuple] += 1\n\n    # return the dictionary of counts\n    return sublist_counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(lst):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = {}\n    for item in lst:\n        if isinstance(item, list):\n            for i in item:\n                if i not in count:\n                    count[i] = 1\n                else:\n                    count[i] += 1\n    return count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublist_dict = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = tuple(list1[k] for k in range(i, j))\n            if sublist not in sublist_dict:\n                sublist_dict[sublist] = 1\n            else:\n                sublist_dict[sublist] += 1\n    return sublist_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Create a dictionary to store the counts of unique lists\n    count_dict = {}\n    \n    # Loop through the lists in the list1\n    for sublist in list1:\n        # Convert the list to a tuple and check if it's already in the dictionary\n        if (tuple(sorted(sublist)),) in count_dict:\n            # If the tuple is already in the dictionary, increment its count\n            count_dict[(tuple(sorted(sublist)),)] += 1\n        else:\n            # If the tuple is not in the dictionary, add it to the dictionary with a count of 1\n            count_dict[(tuple(sorted(sublist)),)] = 1\n            \n    # Return the dictionary of unique lists with their counts\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublist_dict = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in sublist_dict:\n            sublist_dict[sublist_tuple] += 1\n        else:\n            sublist_dict[sublist_tuple] = 1\n    return sublist_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count_dict = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in count_dict:\n            count_dict[sublist_tuple] += 1\n        else:\n            count_dict[sublist_tuple] = 1\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublist_counts = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in sublist_counts:\n            sublist_counts[sublist_tuple] += 1\n        else:\n            sublist_counts[sublist_tuple] = 1\n    return sublist_counts"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    n = len(test_list)\n    for i in range(n):\n        for j in range(i+1, n):\n            comb = combinations(test_list[i], j)\n            for c in comb:\n                if c == tuple(map(sum, zip(*test_list[j]))):\n                    print(c)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Sort the tuples in the list in ascending order\n    test_list.sort()\n\n    # Initialize an empty list to store the combinations\n    combinations_list = []\n\n    # Iterate through all possible pairs of tuples\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            # Calculate the sum of the two tuples\n            current_sum = test_list[i][0] + test_list[j][0]\n\n            # If the current sum is not in the test_list, skip it\n            if current_sum not in test_list:\n                continue\n\n            # Check if the current sum is a key in the combinations dictionary\n            if current_sum in combinations_dict:\n                # If it is, check if the two tuples are already in the list\n                if (tuple(test_list[i]), tuple(test_list[j])) not in combinations_dict[current_sum]:\n                    combinations_dict[current_sum].append((tuple(test_list[i]), tuple(test_list[j])))\n            else:\n                # If it's not, create a new key in the dictionary and add the two tuples to it\n                combinations_dict[current_sum] = [(tuple(test_list[i]), tuple(test_list[j]))]\n\n    # Iterate through the dictionary and add the combinations to the list\n    for key in combinations_dict:\n        for pair in combinations_dict[key]:\n            combinations_list.append(pair)\n\n    return combinations_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    \n    # Sort the given tuple list in ascending order\n    test_list.sort()\n    \n    # Initialize a variable to store the combinations of sums with tuples\n    combinations_sum = []\n    \n    # Iterate through all possible subsets of the tuple list\n    for i in range(1, len(test_list)+1):\n        for subset in combinations(test_list, i):\n            # Calculate the sum of the tuples in the subset\n            total_sum = sum(subset)\n            \n            # Check if the total sum is present in the tuple list\n            if total_sum in test_list:\n                # If it is, add the tuple of the subset and its sum to the combinations_sum list\n                combinations_sum.append((subset, total_sum))\n    \n    # Return the combinations of sums with tuples\n    return combinations_sum"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n\n    # create a set of tuples\n    tuples = set(tuple(x) for x in test_list)\n\n    # create a list of all possible combinations of sums\n    sums = [tuple(x) for x in combinations(tuples, len(test_list))]\n\n    # remove duplicates and return the result as a list\n    return list(set(sums))"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    This function takes a list of tuples and returns a list of combinations of sums with tuples in the list.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            for k in range(j+1, len(test_list)):\n                if sum(test_list[i]) == sum(test_list[j]) + sum(test_list[k]):\n                    result.append(test_list[i], test_list[j], test_list[k])\n    return result"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    '''\n    # Create a list of tuples from the test_list\n    tuples_list = [tuple(x) for x in test_list]\n    # Find the combinations of sums using itertools.combinations()\n    combinations_list = list(combinations(tuples_list, r=2))\n    # Create a list of tuples with their sums\n    sums_list = [(a[0]+b[0], a[1]+b[1]) for a, b in combinations_list]\n    # Return the list of tuples with their sums\n    return sums_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. \n    https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n\n    # Sort the list of tuples in ascending order of their first elements\n    test_list.sort(key=lambda x: x[0])\n\n    # Initialize an empty list to store the combinations\n    combinations_list = []\n\n    # Iterate over all possible tuples in the list\n    for i in range(len(test_list)):\n        # Initialize an empty list to store the current combination\n        current_combination = []\n\n        # Iterate over all possible indices from 0 to i\n        for j in range(i+1):\n            # Append the current tuple to the current combination\n            current_combination.append(test_list[j])\n\n        # Add the current combination to the list of combinations\n        combinations_list.append(tuple(current_combination))\n\n    return combinations_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            for k in range(j+1, len(test_list)):\n                if sum(test_list[i]) == sum(test_list[j]) == sum(test_list[k]):\n                    print(f\"The tuples in the list that sum to {sum(test_list[i])} are: {test_list[i]}, {test_list[j]}, and {test_list[k]}\")"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # find all possible pairs of tuples in the given list\n    pairs = list(combinations(test_list, 2))\n    # initialize an empty list to store the combinations\n    combinations = []\n    # iterate over all pairs and find the combinations of sums\n    for pair in pairs:\n        # calculate the sum of the tuples\n        sum_tuple = pair[0] + pair[1]\n        # check if the sum is present in the list of tuples\n        if sum_tuple in test_list:\n            # if it is, append the combination to the list of combinations\n            combinations.append(pair)\n    # return the list of combinations\n    return combinations"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    all_combinations = []\n    for i in range(len(test_list)+1):\n        for j in range(len(test_list)):\n            if i == len(test_list):\n                all_combinations.append((test_list[j],))\n            else:\n                for k in range(j+1,len(test_list)):\n                    all_combinations.append((test_list[j],test_list[k]))\n    return all_combinations"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    # Calculate the number of divisors\n    divisors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n            if i!= n//i:\n                divisors.append(n//i)\n    return len(divisors) % 2 == 0"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 2\n    if count == 0:\n        count += 1\n    return count % 2 == 0"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisors.append(i)\n\n    count_of_divisors = len(divisors)\n\n    if count_of_divisors % 2 == 0:\n        print(f\"{n} has an even number of divisors.\")\n    else:\n        print(f\"{n} has an odd number of divisors.\")\n"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n            if count % 2 == 1:\n                return False\n    return True"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef count_divisors(n): \n    '''\n    This function takes an integer as input and returns True if the count of divisors of the input number is even, otherwise it returns False.\n    '''\n    # Calculate the count of divisors\n    divisors = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors += 1\n\n    # Check if the count of divisors is even\n    if divisors % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef count_divisors(n): \n    '''\n    Write a python function to check whether the count of divisors is even. \n    https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n\n    # calculate the number of divisors using math.factorial() method\n    divisors = [] \n    for i in range(1, n+1): \n        divisors.append(math.factorial(n) // (math.factorial(i)*math.factorial(n-i))) \n\n    # count the number of even divisors\n    count = 0 \n    for d in divisors: \n        if d % 2 == 0: \n            count += 1 \n\n    # check whether the count of divisors is even or odd\n    if count % 2 == 0: \n        print(\"The count of divisors is even.\")\n    else: \n        print(\"The count of divisors is odd.\")"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n    \n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even.\n    '''\n    divisors_count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors_count += 1\n    if n > 1:\n        divisors_count += 1\n    if divisors_count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even.\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n            if count % 2 == 0:\n                return False\n    return True if count == 0 else True"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    This function takes an integer n as input and returns a boolean value indicating whether the count of divisors is even or odd.\n    '''\n    if n < 1:\n        return False\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n            if count % 2 == 0:\n                return False\n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of all odd length subarrays. \n    \"\"\"\n    n = len(arr)\n    sum_odd_length_subarrays = 0\n    for i in range(n):\n        if i == 0 or i == n-1 or arr[i] % 2 == 1:\n            left = i\n            right = i\n            while left >= 0 and right < n and arr[left] % 2 == 1:\n                sum_odd_length_subarrays += arr[left]\n                left -= 1\n            while left >= 0 and right < n and arr[right] % 2 == 1:\n                sum_odd_length_subarrays += arr[right]\n                right += 1\n    return sum_odd_length_subarrays"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    \"\"\"\n    sum_odd_length = 0\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if j - i + 1 % 2 == 1:\n                sum_odd_length += arr[j]\n            count += 1\n    return sum_odd_length, count"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    # initialize a variable to keep track of the sum of all odd length subarrays\n    sum_odd_length = 0\n    # loop through each element of the array\n    for i in range(len(arr)):\n        # loop through each element that is oddly-indexed\n        for j in range(2*i, len(arr), 2):\n            # add the current element to the sum of odd length subarrays\n            sum_odd_length += arr[j]\n    # return the sum of all odd length subarrays\n    return sum_odd_length"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n\n    max_sum = 0\n    current_sum = 0\n    start = 0\n    end = 0\n\n    while end < n:\n        if end == n-1:\n            current_sum = current_sum + arr[end]\n        else:\n            current_sum = current_sum + arr[end] + arr[end+1]\n        if end - start + 1 % 2 == 0:\n            max_sum = max(max_sum, current_sum)\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if end - start + 1 % 2!= 0 and end - start + 1 >= 3:\n            current_sum = current_sum - arr[start] - arr[start+1]\n        start += 1\n        end += 1\n\n    return max_sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n\n    # Calculate the prefix sum array\n    prefix_sum = [0] * (len(arr) + 1)\n    for i in range(len(arr)):\n        prefix_sum[i + 1] = prefix_sum[i] + arr[i]\n\n    # Calculate the sum of all odd length subarrays\n    odd_sum = 0\n    for i in range(1, len(prefix_sum)):\n        if i % 2!= 0:\n            odd_sum += prefix_sum[i] - prefix_sum[i - 2]\n\n    return odd_sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    sum_odd = 0\n    \n    for i in range(n):\n        if i % 2 == 1:\n            sum_odd += arr[i]\n    \n    return sum_odd"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of all odd length subarrays.\n    \"\"\"\n    # Initialize sum variable\n    total_sum = 0\n    # Loop through each subarray\n    for i in range(len(arr)):\n        # Check if the subarray is odd length\n        if len(arr[i]) % 2 == 1:\n            # Calculate the sum of the subarray\n            subarray_sum = sum(arr[i])\n            # Add the sum to the total sum\n            total_sum += subarray_sum\n    # Return the total sum\n    return total_sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    sum = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i, n):\n            sub_arr = arr[i:j+1]\n            if len(sub_arr) % 2!= 0:\n                sum += sum(sub_arr)\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    n = len(arr)\n    result = 0\n    \n    for i in range(n):\n        for j in range(i, n):\n            if j-i+1 % 2!= 0:\n                sub_arr = arr[i:j+1]\n                result += sum(sub_arr)\n                \n    return result"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays.\n    '''\n    sum_odd_subarrays = 0\n    n = len(arr)\n    for i in range(n-1):\n        if i == 0 or arr[i] % 2 == 1:\n            for j in range(i+1, n):\n                if j == n-1 or arr[j] % 2 == 1:\n                    subarray = arr[i:j+1]\n                    sum_odd_subarrays += sum(subarray)\n    return sum_odd_subarrays"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    # Convert r, g, b to float values\n    r, g, b = float(r) / 255.0, float(g) / 255.0, float(b) / 255.0\n\n    # Find maximum and minimum values of r, g, b\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n\n    # Calculate values for h, s, and v\n    if max_val == min_val:\n        h, s, v = 0, 0, max_val\n    else:\n        d = max_val - min_val\n        if max_val == r:\n            h = (g - b) / d + (g < b) * 6\n        elif max_val == g:\n            h = (b - r) / d + 2\n        else:\n            h = (r - g) / d + 4\n\n        h /= 6\n\n        if h < 0:\n            h += 1\n\n        s = d / (1 - abs(2 * min_val - 1))\n\n        v = max_val\n\n    # Convert values to integers and return as a tuple\n    h = int(h * 255)\n    s = int(s * 255)\n    v = int(v * 255)\n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert rgb color to hsv color.\n    \"\"\"\n    # Convert rgb to float values\n    r, g, b = float(r) / 255.0, float(g) / 255.0, float(b) / 255.0\n\n    # Calculate max and min values\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n\n    # Calculate hue\n    if max_val == min_val:\n        h = 0\n    else:\n        if r == max_val:\n            h = (g - b) / (max_val - min_val)\n        elif g == max_val:\n            h = 2 + (b - r) / (max_val - min_val)\n        else:\n            h = 4 + (r - g) / (max_val - min_val)\n\n        h = h * 60\n        if h < 0:\n            h += 360\n\n    # Calculate saturation\n    if max_val == 0:\n        s = 0\n    else:\n        s = (max_val - min_val) / max_val\n\n    # Calculate value\n    v = max_val\n\n    # Return hsv values\n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Converts RGB color to HSV color.\n    \"\"\"\n    r, g, b = r/255, g/255, b/255\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    h = 0\n    s = 0\n    v = cmax\n    \n    if delta == 0:\n        h = 0\n        s = 0\n    else:\n        if cmax == r:\n            h = (g - b) / delta\n        elif cmax == g:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n            \n        h = h * 60\n        if h < 0:\n            h += 360\n            \n        s = delta / cmax\n            \n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n\n    # Convert r, g, b to floats\n    r = float(r) / 255.0\n    g = float(g) / 255.0\n    b = float(b) / 255.0\n\n    # Get the maximum and minimum values\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n\n    # Calculate the difference between the maximum and minimum values\n    delta = max_value - min_value\n\n    # Calculate the hue\n    if max_value == r:\n        hue = (g - b) / delta\n    elif max_value == g:\n        hue = 2 + (b - r) / delta\n    else:\n        hue = 4 + (r - g) / delta\n\n    # Scale the hue to the range [0, 6]\n    if hue < 0:\n        hue += 6\n\n    # Calculate the saturation\n    if delta == 0:\n        saturation = 0\n    else:\n        saturation = delta / max_value\n\n    # Calculate the value\n    value = max_value\n\n    # Calculate the hue in degrees\n    hue = hue * 60.0\n\n    # Convert the hue to degrees\n    if hue < 60:\n        hue_deg = hue\n    elif hue < 120:\n        hue_deg = 120 - hue\n    elif hue < 180:\n        hue_deg = 180 - hue\n    elif hue < 240:\n        hue_deg = 240 - hue\n    else:\n        hue_deg = 300 - hue\n\n    # Convert the hue to a string and add a decimal point\n    if int(hue_deg) % 10 == 0:\n        hue_str = str(int(hue_deg)) + '.'\n    else:\n        hue_str = str(int(hue_deg)) + '.' + str(int((int(hue_deg) % 10) * 10) / 10)\n\n    # Create a dictionary to store the converted HSV color\n    hsv_color = {'hue': hue_str,'saturation': saturation, 'value': value}\n\n    return hsv_color"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Convert rgb color to hsv color.\n    '''\n    r = r / 255.0\n    g = g / 255.0\n    b = b / 255.0\n\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n\n    h = 0.0\n    s = 0.0\n\n    if delta == 0.0:\n        h = 0.0\n    elif cmax == r:\n        h = 60.0 * ((g - b) / delta)\n    elif cmax == g:\n        h = 60.0 * ((b - r) / delta) + 120.0\n    else:\n        h = 60.0 * ((r - g) / delta) + 240.0\n\n    h = int(h)\n    h = h % 360\n\n    s = delta / cmax\n\n    return h, s, cmax"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    This function converts an RGB color value to HSV color space and returns\n    the HSV color values as a tuple.\n\n    :param r: The red color value, in the range 0 to 255.\n    :param g: The green color value, in the range 0 to 255.\n    :param b: The blue color value, in the range 0 to 255.\n    :return: The HSV color values as a tuple (hue, saturation, value).\n    \"\"\"\n\n    r_float = r / 255.0\n    g_float = g / 255.0\n    b_float = b / 255.0\n\n    max_value = max(r_float, g_float, b_float)\n    min_value = min(r_float, g_float, b_float)\n    delta = max_value - min_value\n\n    hue = 0\n    saturation = 0\n    value = max_value\n\n    if max_value == min_value:\n        hue = 0\n    elif max_value == r_float:\n        hue = 60 * ((g_float - b_float) / delta) % 6\n    elif max_value == g_float:\n        hue = 60 * ((b_float - r_float) / delta) + 120\n    elif max_value == b_float:\n        hue = 60 * ((r_float - g_float) / delta) + 240\n\n    if delta == 0:\n        saturation = 0\n    else:\n        saturation = delta / max_value\n\n    return (hue, saturation, value)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n\n    r, g, b = r / 255, g / 255, b / 255\n\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n\n    delta = max_val - min_val\n\n    h = 0\n    s = 0\n    v = max_val\n\n    if max_val == min_val:\n        h = 0\n    elif max_val == r:\n        h = 60 * (((g - b) / delta) % 6)\n    elif max_val == g:\n        h = 60 * (((b - r) / delta) + 2)\n    else:\n        h = 60 * (((r - g) / delta) + 4)\n\n    if delta == 0:\n        s = 0\n    else:\n        s = delta / (1 - abs(2 * min_val - 1))\n\n    if s == 0:\n        v = max_val\n    else:\n        v = 1\n\n    hsv = (h, s, v)\n\n    return hsv"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    \n    # Convert r, g, b to float values\n    r, g, b = float(r) / 255, float(g) / 255, float(b) / 255\n    \n    # Calculate maximum and minimum values\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    \n    # Calculate delta value\n    delta = max_val - min_val\n    \n    # Calculate hue\n    if max_val == r:\n        hue = (g - b) / delta\n    elif max_val == g:\n        hue = 2 + (b - r) / delta\n    else:\n        hue = 4 + (r - g) / delta\n    \n    # Normalize hue\n    hue = hue % 6\n    \n    # Calculate saturation\n    if max_val == 0:\n        saturation = 0\n    else:\n        saturation = delta / max_val\n    \n    # Calculate value\n    value = max_val\n    \n    # Return the converted hsv values\n    return hue, saturation, value"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    This function converts an RGB color (red, green, blue) to HSV (hue, saturation, value) color model.\n    \"\"\"\n    # Convert the RGB color to HSV color model\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n    delta = max_value - min_value\n    h = 0\n    s = 0\n    v = max_value\n    \n    if delta == 0:\n        h = 0\n    else:\n        if max_value == r:\n            h = (g - b) / delta\n        elif max_value == g:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n        \n        h = h * 60\n        if h < 0:\n            h += 360\n            \n        s = delta / max_value\n        \n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r = r / 255\n    g = g / 255\n    b = b / 255\n\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n\n    h = 0\n    s = 0\n    v = max_value\n\n    delta = max_value - min_value\n\n    if max_value == min_value:\n        h = 0\n    else:\n        if r == max_value:\n            h = (g - b) / delta\n        elif g == max_value:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n\n        if h < 0:\n            h += 6\n\n        h = h * 60\n\n    if max_value == 0:\n        s = 0\n    else:\n        s = delta / max_value\n\n    return (h, s, v)"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n\n    # initialize variables\n    even_count = 0\n    odd_count = 0\n    result = 1\n\n    # loop through the list\n    for num in list1:\n        # check if the number is even or odd\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n        # check if the even count is greater than 0 and the odd count is greater than 0\n        if even_count > 0 and odd_count > 0:\n            break\n\n        # if the even count is greater than 0 and the odd count is 0, update the result\n        if even_count > 0 and odd_count == 0:\n            result *= num\n\n    # return the result\n    return result"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def mul_even_odd(list1):\n    \"\"\"\n    Write a function to find the product of first even and odd number of a given list.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n    if even_count > 0 and odd_count > 0:\n        return list1[0] * list1[-1]\n    else:\n        return None"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def mul_even_odd(lst):\n    even_count = 0\n    odd_count = 0\n    product = 1\n    \n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n            product *= num\n        else:\n            odd_count += 1\n            product *= num\n            \n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n\n    # Initialize the product variable\n    product = 1\n\n    # Loop through the list\n    for num in list1:\n\n        # Check if the number is even\n        if num % 2 == 0:\n\n            # If it is even, multiply the product with the even number\n            product *= num\n\n        # Check if the number is odd\n        else:\n\n            # If it is odd, multiply the product with the odd number\n            product *= num\n\n    # Return the product\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    product = 1\n    for num in list1:\n        if num % 2 == 0:\n            product *= num\n        else:\n            product *= num - 1\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    product = 1\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n            if even_count == 1:\n                product = num\n        else:\n            odd_count += 1\n            if odd_count == 1:\n                product = num\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    This function takes a list of integers as input and returns the product of the first even and odd number in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        count += 1\n        if num % 2 == 0:\n            even_num = num\n        else:\n            odd_num = num\n    if even_num is None or odd_num is None:\n        return None\n    else:\n        return even_num * odd_num\n"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def mul_even_odd(lst):\n    even_product = 1\n    odd_product = 1\n\n    for num in lst:\n        if num % 2 == 0:\n            even_product *= num\n        else:\n            odd_product *= num\n\n    return even_product * odd_product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def mul_even_odd(lst):\n    even_sum = 1\n    odd_sum = 1\n    for num in lst:\n        if num % 2 == 0:\n            even_sum *= num\n        else:\n            odd_sum *= num\n    return even_sum * odd_sum"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def mul_even_odd(lst):\n    even_count = 0\n    odd_count = 0\n    \n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    if even_count == 0:\n        return 0\n    elif odd_count == 0:\n        return 0\n    \n    return odd_count * even_count"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string into individual elements\n    elements = test_str.split(',')\n\n    # Convert each element to an integer\n    integers = [int(x.strip()) for x in elements]\n\n    # Convert the list of integers into a tuple\n    tuple_integers = tuple(integers)\n\n    return tuple_integers"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string by comma and space\n    split_str = test_str.split(',')\n    # Convert each element to an integer\n    int_tuple = tuple(map(int, split_str))\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    test_tuple = eval(test_str)\n    return tuple(int(i) for i in test_tuple)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    try:\n        int_tuple = tuple(int(i) for i in test_str.split(', '))\n        return int_tuple\n    except ValueError:\n        return \"Invalid input\""
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string by ',' and split each item by ':'\n    items = test_str.split(',')\n    int_list = []\n    for item in items:\n        key, value = item.split(':')\n        int_list.append((int(key), value))\n    return tuple(int_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    str_list = test_str.split(',')\n    int_list = []\n    for item in str_list:\n        int_list.append(int(item.strip()))\n    return tuple(int_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # split the tuple string into tuple items\n    items = test_str.split(',')\n    # convert tuple items to integer\n    new_items = [int(item) for item in items]\n    # return the new tuple\n    return tuple(new_items)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string into a list of strings\n    str_list = test_str.split(\",\")\n\n    # Create an empty list to store the integers\n    int_list = []\n\n    # Loop through each string in the list and convert it to an integer\n    for str in str_list:\n        int_list.append(int(str))\n\n    # Convert the list of integers to a tuple and return it\n    return tuple(int_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Create an empty list to store the integer tuples\n    result = []\n\n    # Split the tuple string into a list of strings\n    strings = test_str.split(',')\n\n    # Iterate through each string in the list and convert it to an integer\n    for string in strings:\n        try:\n            # Convert the string to an integer and append it to the result list\n            result.append(int(string.strip()))\n        except ValueError:\n            # If the string cannot be converted to an integer, print an error message\n            print(f\"Error: Cannot convert '{string}' to an integer.\")\n\n    # Return the result list as an integer tuple\n    return tuple(result)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string into a list of strings based on commas\n    string_list = test_str.split(',')\n\n    # Loop through the list of strings and convert each string to an integer\n    int_list = []\n    for string in string_list:\n        try:\n            int_list.append(int(string))\n        except ValueError:\n            pass\n\n    # Convert the list of integers to a tuple and return it\n    return tuple(int_list)"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # Use binary search to find the index of the first element greater than or equal to x\n    i = bisect.bisect_right(a, x)\n    # Check if x is already in the list\n    if i < len(a) and a[i] == x:\n        return i\n    # If x is greater than all elements in the list, append to the end\n    if i == len(a):\n        a.append(x)\n        return len(a) - 1\n    # Otherwise, insert x before the element at index i\n    else:\n        j = i - 1\n        while j >= 0 and a[j] > x:\n            a[j+1] = a[j]\n            j -= 1\n        a[j+1] = x\n        return i"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # bisect_right returns the index where to insert x in a such that all elements to the right of it are less than x.\n    return bisect.bisect_right(a, x)"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index == len(a):\n        return index\n    elif x < a[index]:\n        return index - 1\n    else:\n        return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n\n    # use bisect_right to find the insertion point\n    i = bisect.bisect_right(a, x)\n\n    # check if the value is already present in the list\n    if i == len(a) or a[i]!= x:\n        return i\n\n    # if the value is already present but not at the end,\n    # move the insertion point to the right\n    while i < len(a) and a[i] == x:\n        i += 1\n\n    return i"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    return bisect.bisect_right(a, x)"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # Using the binary search algorithm to find the index of the value\n    index = bisect.bisect_right(a, x)\n    # If the value is already present, then its insertion point is at the index itself\n    if index < len(a) and a[index] == x:\n        return index\n    # Otherwise, calculate the insertion point\n    else:\n        return index + 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # Locate the index of the leftmost element greater than or equal to x\n    index = bisect.bisect_left(a, x)\n    # If x is not in the array, the index will be equal to the length of the array\n    if index == len(a):\n        return index\n    # If x is greater than all elements in the array, return the index of the first element\n    elif x > a[index]:\n        return 0\n    # If x is not greater than any element in the array, return the index of the next greater element\n    else:\n        return index + 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # Find the index of the value to be inserted\n    i = bisect.bisect_right(a, x)\n    if i!= len(a) and a[i] == x:\n        # If the value is already in the list, return the index\n        return i\n    else:\n        # If the value is not in the list, return the insertion point\n        return i"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_left(a, x)\n    return index if index < len(a) and a[index] == x else index + 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a{2}b{3}'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a{1,3}b'\n    match = re.search(pattern, text)\n    if match:\n        print('Match found at position:', match.start())\n    else:\n        print('No match found.')"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r\"a{1}b{3}\"\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a{1}b{3}'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a{1}b{3}'\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0]\n    else:\n        return None"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.*b.*b.*b.*b.*b.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.*b{3}'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(0)\n    else:\n        return \"Not found\""
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b{3}'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'ab{3}'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b{3}'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple(test_str +'' + str(elem) for elem in test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_str, test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Convert the list to a tuple\n    new_list = tuple(test_list)\n    # Concatenate the list and string\n    new_tuple = (new_list + (test_str,))\n    # Return the new tuple\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tup = (test_str, test_list)\n    return new_tup"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_str, *test_list)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    # Create a new list by concatenating the two lists\n    new_list = test_list + [test_str]\n\n    # Convert the new list to a tuple\n    new_tuple = tuple(new_list)\n\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_list, test_str)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # concatenate the two lists\n    combined_list = test_list + [test_str]\n    # convert the combined list to a tuple\n    new_tuple = tuple(combined_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    # create a list of tuples from the string and list\n    my_list = [(char, index) for index, char in enumerate(test_list)]\n    # create a new tuple from the list of tuples\n    new_tuple = tuple(my_list)\n    # return the new tuple\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_str, *test_list)"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    count = 0\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            count += 1\n    if count == len(nums) // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n\n    for i in range(0, len(nums), 2):\n        count = 0\n        for j in range(i, len(nums), 2):\n            if nums[j] % 2 == 0:\n                count += 1\n            if count % 2!= 0:\n                return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_position(nums):\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if sum(nums[i:i+2]) % 2 == 0:\n                return True\n    return False"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_position(nums):\n    \"\"\"\n    Write a python function to check whether every even index contains even numbers of a given list.\n    \"\"\"\n    for i in range(len(nums)):\n        if nums[i] % 2 == 1:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if not all(nums[i+j] % 2 == 0 for j in range(1, len(nums)//2+1)):\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    \n    # Loop through every index in the list\n    for i in range(len(nums)):\n        \n        # Check if the current index is even\n        if i % 2 == 0:\n            \n            # Loop through every number in the current index\n            for num in nums[i:]:\n                \n                # Check if the current number is even\n                if num % 2 == 0:\n                    \n                    # If both conditions are true, return False\n                    return False\n                    \n    # If the loop completes without returning False, return True\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            even_count += 1\n            if even_count > 2:\n                return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n\n    # Initialize a list to keep track of even indices\n    even_indices = []\n\n    # Loop through the list and check if the current index is even\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            # If the index is even, add it to the even_indices list\n            even_indices.append(i)\n\n    # Loop through the even_indices list and check if every even index contains even numbers\n    for index in even_indices:\n        count = 0\n        for i in range(index, len(nums), 2):\n            if nums[i] % 2 == 0:\n                count += 1\n        if count == 0:\n            # If the even index contains no even numbers, return False\n            return False\n\n    # If we have made it through the loop without finding any odd index with no even numbers, return True\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            even_count += 1\n    if even_count == len(nums):\n        return True\n    else:\n        return False"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if len([num for num in nums[i:] if num % 2 == 0]) % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    flattened_tup = []\n    for item in test_tup:\n        if type(item) == tuple:\n            flattened_tup += item\n        else:\n            flattened_tup.append(item)\n    return flattened_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    if isinstance(test_tup, tuple):\n        return remove_nested(test_tup[0])\n    elif isinstance(test_tup, list):\n        return [remove_nested(sub_tup) for sub_tup in test_tup]\n    else:\n        return test_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # Loop through each tuple in the given tuple\n    for i in range(len(test_tup)):\n        # Check if the item at the current index is a tuple\n        if isinstance(test_tup[i], tuple):\n            # If it is, recursively call the remove_nested function on the tuple\n            remove_nested(test_tup[i])\n            # Remove the tuple from the list\n            del test_tup[i]"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # Iterate over the tuples in the test_tup\n    for tup in test_tup:\n        # Check if the current element is a tuple\n        if isinstance(tup, tuple):\n            # Recursively remove the nested tuple\n            remove_nested(tup)\n        else:\n            # Remove the current element from the test_tup\n            test_tup.remove(tup)\n    # Return the modified test_tup\n    return test_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for i in test_tup:\n        if not isinstance(i, tuple):\n            new_tup.append(i)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result_list = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            result_list.extend(remove_nested(item))\n        else:\n            result_list.append(item)\n    return result_list"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return [item for sublist in test_tup for item in sublist]"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for elem in test_tup:\n        if type(elem)!= tuple:\n            new_tup.append(elem)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if type(item)!= tuple:\n            new_tup.append(item)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for elem in test_tup:\n        if type(elem)!= tuple:\n            new_tup.append(elem)\n    return new_tup"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_lists(input_list):\n    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count += 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for element in input_list:\n        if isinstance(element, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_list(input_list):\n    \"\"\"\n    This function takes an input list and returns the number of lists in it.\n    \"\"\"\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_list(input_list):\n    count = 0\n    for i in input_list:\n        if type(i) == list:\n            count += 1\n    return count\n"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes two parameters, an array and an element to be searched in the array.\n    It returns the last position of the element in the array if found, else it returns -1.\n    \"\"\"\n    if arr is None or len(arr) == 0:\n        return -1\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n\n        if arr[mid] == x:\n            # If x is present at the mid position, then check if x is present at the rightmost position\n            if mid == len(arr) - 1 or arr[mid + 1]!= x:\n                return mid\n            else:\n                right = mid - 1  # Move right pointer to the leftmost position after the mid position\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes an array and a target element as input and returns the last position of the target element in the sorted array.\n    \"\"\"\n    if not arr:\n        return None\n    i = len(arr) - 1\n    while i >= 0:\n        if arr[i] == x:\n            return i\n        i -= 1\n    return None"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    left, right = 0, len(arr) - 1\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            right = mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid\n    return right if arr[right] == x else right - 1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes a sorted array and a target element x as input.\n    It returns the index of the last occurrence of x in the array.\n\n    If the element x is not found in the array, the function returns -1.\n    \"\"\"\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if arr[mid] == x:\n            # If x is present at mid, then its last occurrence is either mid or mid-1\n            if mid == 0 or arr[mid - 1]!= x:\n                return mid\n            else:\n                right = mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes two arguments:\n    arr: a sorted array\n    x: the element to search for\n    \n    This function returns the index of the last occurrence of x in arr.\n    If x is not present in arr, the function returns -1.\n    \"\"\"\n\n    # initialize the last index to -1\n    last_index = -1\n\n    # iterate over the array\n    for i in range(len(arr)):\n        # if the current element is equal to x, update the last index\n        if arr[i] == x:\n            last_index = i\n\n    # return the last index\n    return last_index"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            right = mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return right if right >= 0 else -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes in a sorted array and an element x and returns the index of the last occurrence of x in the array.\n    \"\"\"\n\n    # Find the index of the first occurrence of x in the array\n    index = bisect_left(arr, x)\n\n    # If the first occurrence of x is not found, return -1\n    if index == len(arr) or arr[index]!= x:\n        return -1\n\n    # Find the index of the last occurrence of x in the array\n    while index < len(arr) and arr[index] == x:\n        index += 1\n\n    return index - 1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last(arr,x):\n    \"\"\"\n    This function takes two arguments:\n    - arr: A sorted array of integers.\n    - x: An integer to search for in the array.\n\n    The function searches the array from the leftmost to the rightmost side,\n    and returns the index of the last occurrence of the element x.\n\n    If the element is not present in the array, the function returns -1.\n    \"\"\"\n    n = len(arr)\n    left, right = 0, n-1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            # If we find an element equal to x, check if it's the last occurrence.\n            if mid == n-1 or arr[mid+1]!= x:\n                return mid\n            # If we find the last occurrence, shift the left pointer to the right.\n            else:\n                left = mid + 1\n        elif arr[mid] > x:\n            # If we find an element greater than x, shift the right pointer to the left.\n            right = mid - 1\n        else:\n            # If we find an element less than x, shift the left pointer to the right.\n            left = mid + 1\n    # If we exit the while loop without finding the element, return -1.\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    i = len(arr) - 1\n    while i >= 0 and arr[i]!= x:\n        i -= 1\n    if i < 0:\n        return -1\n    else:\n        return i"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a[^b]*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'^a\\w*b$'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'\\ba.*b\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = re.compile(r'\\ba\\S*b')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a\\w+b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a(?P<match>.*)b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group('match')\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'a\\w*b')\n    return pattern.search(text)"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for value in dict.values():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for value in dict.values():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for value in dict.values():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict.values():\n        total += item\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict:\n        total += dict[item]\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def return_sum(dict):\n    \"\"\"\n    Write function to find the sum of all items in the given dictionary.\n    \"\"\"\n    total = 0\n    for item in dict.values():\n        total += item\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for value in dict.values():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict.values():\n        sum += item\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key, value in dict.items():\n        total += value\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    # Check if the input is valid\n    if n < 1:\n        print(\"Invalid input. Please enter a positive integer.\")\n    elif n == 1:\n        return 0\n    else:\n        # Initialize the sum variable\n        sum = 0\n        # Loop through all the odd numbers from 1 to n\n        for i in range(1, n+1, 2):\n            # Add the odd numbers to the sum\n            sum += i\n        return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l, r = int(input(\"Enter the lower limit: \")), int(input(\"Enter the upper limit: \"))\n    sum = 0\n    for i in range(l, r+1):\n        if i % 2 == 1:\n            sum += i\n    print(\"The sum of all odd natural numbers within the range\", l, \"and\", r, \"is\", sum)"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    # initialize variables\n    sum = 0\n    i = 1\n    # loop through odd numbers between 1 and n\n    while i <= n:\n        if i % 2!= 0:\n            sum += i\n        i += 1\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    # initialize the sum to zero\n    total = 0\n    \n    # loop through the range from 1 to n\n    for i in range(1, n+1, 2):\n        # add the odd numbers to the total\n        total += i\n    \n    # return the total sum\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    l, r = 1, n\n    sum_odd = 0\n    while l <= r:\n        if l % 2!= 0:\n            sum_odd += l\n        l += 1\n    return sum_odd"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    l = 1\n    r = n\n    total = 0\n    while l <= r:\n        if l % 2 == 1:\n            total += l\n        l += 1\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    # initialize sum to 0\n    total = 0\n    # loop through numbers within the range and add them to sum if odd\n    for i in range(n+1):\n        if i%2!= 0:\n            total += i\n    # return the total sum\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    total = 0\n    for i in range(1, n+1, 2):\n        total += i\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l, r = 1, n\n    total = 0\n\n    for num in range(l, r+1):\n        if num % 2!= 0:\n            total += num\n\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l = int(input(\"Enter the lower limit of the range: \"))\n    r = int(input(\"Enter the upper limit of the range: \"))\n    \n    sum = 0\n    \n    for i in range(l, r+1):\n        if i % 2 == 1:\n            sum += i\n    \n    print(\"The sum of odd natural numbers between\", l, \"and\", r, \"is:\", sum)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_array(arr):\n    \"\"\"\n    A function decorator that calculates the sum of an array.\n\n    Args:\n        arr (list): An array of numbers.\n\n    Returns:\n        int: The sum of the array.\n    \"\"\"\n    def inner(arr):\n        \"\"\"\n        Inner function that calculates the sum of an array.\n\n        Args:\n            arr (list): An array of numbers.\n\n        Returns:\n            int: The sum of the array.\n        \"\"\"\n        return sum(arr)\n\n    return inner(arr)\n\n\n@sum_array\ndef _sum(arr):\n    \"\"\"\n    A python function that finds the sum of an array.\n\n    Args:\n        arr (list): An array of numbers.\n\n    Returns:\n        int: The sum of the array.\n    \"\"\"\n    return sum(arr)\n"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum(arr):\n    \"\"\"\n    This function takes an array as input and returns the sum of all its elements.\n    \"\"\"\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # calculate the number of bits to be rotated\n    num_bits = len(bin(n)[2:])\n    num_rot = d % num_bits\n    # calculate the mask of the number to be rotated\n    mask = (1 << num_rot) - 1\n    # calculate the shifted number\n    shifted = (n & mask) << (32 - num_rot)\n    # calculate the original number\n    original = (n >> num_rot) | shifted\n    return original"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Calculate the number of bits to rotate\n    n_bits = 32\n    d_bits = d % n_bits\n\n    # Shift the number left by d bits\n    left_shift = n << d_bits\n\n    # Shift the number right by (n - d) bits\n    right_shift = (n >> (n_bits - d_bits))\n\n    # Combine the shifts\n    result = (left_shift | right_shift)\n\n    return result"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to rotate left bits by d bits a given number.\n    '''\n    # convert the integer to a binary string\n    n_bin = bin(n)[2:]\n    # calculate the number of bits in the binary string\n    n_bits = len(n_bin)\n    # calculate the number of bits to rotate left\n    n_rot = d % n_bits\n    # if d is greater than or equal to n_bits, rotate left by n_bits\n    if n_rot >= n_bits:\n        n_rot = 0\n    # rotate the left n_rot bits of n_bin to the right by n_rot bits\n    n_rot_bin = n_bin[-n_rot:] + n_bin[:-n_rot]\n    # convert the rotated binary string to an integer\n    n_rot = int(n_rot_bin, 2)\n    return n_rot"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    mask = (1 << d) - 1\n    return ((n << d) & mask) | (n & ((1 << (32 - d)) - 1))"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def left_rotate(n,d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # convert the number to binary representation\n    num_bin = bin(n)[2:]\n    # left rotate the binary representation by d bits\n    rotated_bin = num_bin[d:] + num_bin[:d]\n    # convert the rotated binary representation back to decimal\n    rotated_dec = int(rotated_bin, 2)\n    return rotated_dec"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n<<d) | (n>>(32-d))"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def left_rotate(n,d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Extract the sign bit\n    sign = (n >> 31) & 1\n    \n    # Extract the 32-d bits from the left\n    mask = (1 << d) - 1\n    shifted = n << d\n    \n    # Shift the remaining 32-d bits to the right\n    remaining = n >> (32 - d)\n    \n    # Return the result with the sign bit and shifted bits\n    return (sign << 31) | shifted | remaining"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Convert the number to binary string\n    binary_str = bin(n)[2:]\n    # Get the length of the binary string\n    length = len(binary_str)\n    # Calculate the number of rotations\n    rotations = d % length\n    # Calculate the new binary string after rotating\n    rotated_binary_str = binary_str[rotations:] + binary_str[:rotations]\n    # Convert the rotated binary string back to decimal\n    rotated_decimal = int(rotated_binary_str, 2)\n    return rotated_decimal"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # convert the number to binary string\n    binary_string = bin(n)[2:]\n    # calculate the number of bits to rotate\n    num_bits_to_rotate = d % 32\n    # check if num_bits_to_rotate is greater than the number of bits in the binary string\n    if num_bits_to_rotate > len(binary_string):\n        # rotate left by modulus of 32\n        binary_string = (32-num_bits_to_rotate) + binary_string\n    else:\n        # rotate left by num_bits_to_rotate\n        binary_string = binary_string[num_bits_to_rotate:] + binary_string[:num_bits_to_rotate]\n    # convert the binary string back to decimal\n    return int(binary_string,2)"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def left_rotate(n,d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    d = d % 32 # d can be negative\n    if d == 0: # if d is 0, simply return n\n        return n\n    else: # if d is not 0, calculate the number of left shifts to achieve d\n        shift_count = d\n        while shift_count!= 0:\n            shift_count = shift_count // 2 # calculate the left shift count by dividing d by 2\n            n = n << shift_count # shift n to the left by the calculated count\n            shift_count = shift_count % 2 # calculate the right shift count by taking the remainder of d divided by 2\n        return n"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(' +','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    This function takes a string as input and removes all whitespaces from it.\n    '''\n    return re.sub('\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    This function takes a string as input and removes all whitespaces from it.\n    '''\n    # Use regular expressions to replace all whitespaces with an empty string\n    text = re.sub(r'\\s+', '', text)\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    This function takes a string as input and removes all whitespaces from it using regular expressions.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # use regular expression to remove all whitespaces\n    text = re.sub('\\s+','', text)\n    # return modified string\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    \"\"\"\n    Write a function to remove all whitespaces from a string.\n    \"\"\"\n    return re.sub('\\s+','', text)"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    This function takes three integer arguments and returns the count of\n    equal numbers from the three integers.\n    \"\"\"\n    count = 0\n    if x == y == z:\n        count += 1\n    if x == y!= z:\n        count += 1\n    if x!= y == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y and y == z:\n        count += 1\n    if x == y and x!= z:\n        count += 1\n    if x!= y and x == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y == z:\n        return 3\n    elif x == y or x == z or y == z:\n        return 2\n    else:\n        return 1"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y and y == z:\n        count += 1\n    elif x == y or y == z:\n        count += 1\n    elif x == y or x == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n\n    count = 0\n    for i in range(3):\n        if i == x:\n            count += 1\n        elif i == y:\n            count += 1\n        elif i == z:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y and y == z:\n        count += 1\n    if x == y or x == z or y == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y and y == z:\n        count += 1\n    if x == z and y == x:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_three_equal(x,y,z):\n    \"\"\"\n    Count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    for i in range(min(x, y), max(x, y)):\n        if i == x or i == y or i == z:\n            count += 1\n    for i in range(min(x, z), max(x, z)):\n        if i == x or i == z or i == y:\n            count += 1\n    for i in range(min(y, z), max(y, z)):\n        if i == y or i == z or i == x:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(len(x)):\n        if x[i] == y[i] == z[i]:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y == z:\n        count += 1\n    if x == y!= z:\n        count += 1\n    if x!= y == z:\n        count += 1\n    if x!= y!= z:\n        count += 1\n    if x == y!= z:\n        count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # Traverse the array and check if the array is already sorted\n    for i in range(n - 1):\n        if arr[i] > arr[i + 1]:\n            return 0\n    # If the array is already sorted, return 0\n    if n == 1:\n        return 0\n    # Traverse the array again and check if the array can be sorted in O(n) time complexity\n    for i in range(n - 2):\n        if arr[i] > arr[i + 1]:\n            return n - i - 1\n    return 0"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # Sort the array\n    arr.sort()\n    # Initialize count and max count\n    count = 0\n    max_count = n - 1\n    # Iterate over the sorted array from left to right\n    for i in range(n):\n        # Check if the element at index i is greater than the element at index n-1\n        if arr[i] > arr[n - 1]:\n            # Increment the count\n            count += 1\n            # Check if the count is greater than the current maximum count\n            if count > max_count:\n                # Update the maximum count\n                max_count = count\n        # If the element at index i is not greater than the element at index n-1\n        else:\n            # Reset the count\n            count = 0\n    # Return the maximum count\n    return max_count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_rotation(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n\n    n = len(arr)\n\n    # If array is already sorted\n    if arr == sorted(arr):\n        return 0\n\n    # If array is already sorted in reverse order\n    if arr == sorted(arr, reverse=True):\n        return 0\n\n    # If array is already sorted in increasing order\n    if all(x < y for x, y in zip(arr, arr[1:])):\n        return 0\n\n    # If array is already sorted in decreasing order\n    if all(x > y for x, y in zip(arr, arr[1:])):\n        return 0\n\n    # If array has an odd number of elements\n    if n % 2 == 1:\n        # If array has an even number of elements and all elements are greater than their previous element\n        if all(x > y for x, y in zip(arr[1:n//2+1], arr[1:n//2])):\n            return count_rotation(arr[n//2+1:])\n        # If array has an even number of elements and all elements are less than their previous element\n        elif all(x < y for x, y in zip(arr[1:n//2+1], arr[1:n//2])):\n            return count_rotation(arr[n//2+1:])\n        # If array has an even number of elements and no such condition exists\n        else:\n            return n//2\n\n    # If array has an even number of elements\n    else:\n        # If array has an even number of elements and all elements are greater than their previous element\n        if all(x > y for x, y in zip(arr[1:n//2], arr[1:n//2+1])):\n            return count_rotation(arr[n//2:])\n        # If array has an even number of elements and all elements are less than their previous element\n        elif all(x < y for x, y in zip(arr[1:n//2], arr[1:n//2+1])):\n            return count_rotation(arr[n//2:])\n        # If array has an even number of elements and no such condition exists\n        else:\n            return n//2"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # Initialize the count of rotations to 0\n    count = 0\n    # Traverse the array and count the number of rotations required\n    for i in range(n-1):\n        # Check if the array is already sorted or not\n        if arr[i] <= arr[i+1]:\n            count += n - i\n        else:\n            break\n    # Return the count of rotations\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # check if the array is already sorted or not\n    for i in range(n - 1):\n        if arr[i] > arr[i + 1]:\n            return 0\n    # find the minimum element in the array\n    min_element = min(arr)\n    # count the number of rotations\n    count = 0\n    for i in range(n):\n        # check if the element is greater than the minimum element or not\n        if arr[i] > min_element:\n            count += 1\n            # check if the element is greater than the previous element\n            if arr[i] > arr[i - 1]:\n                return count\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_rotation(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    if n <= 1:\n        return 0\n\n    # Count the number of inversions\n    inversions = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inversions += 1\n\n    # Count the number of rotations required\n    count = 0\n    for i in range(n-1):\n        if arr[i] < arr[i+1]:\n            count += 1\n\n    return count + inversions"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_rotation(arr):\n    # find the maximum value in the array\n    max_val = max(arr)\n    # initialize the count of rotations to 0\n    count = 0\n    # loop through each element in the array\n    for i in range(len(arr)):\n        # if the current element is greater than the maximum value, increment the count\n        if arr[i] > max_val:\n            count += 1\n    # return the count of rotations\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        # If the array is already sorted\n        if arr == sorted(arr):\n            return 0\n        # Find the index of the smallest element\n        j = i\n        while j < n and arr[j] <= arr[i]:\n            j += 1\n        # If the smallest element is already at its correct position\n        if j == n:\n            return count + 1\n        # Swap the elements to place the smallest element at its correct position\n        arr[i], arr[j] = arr[j], arr[i]\n        count += 1\n    # If the array is not sorted\n    return -1"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        # Count the number of rotations required to generate a sorted array\n        for j in range(i+1, n):\n            if arr[j] < arr[i]:\n                count += 1\n                break\n        # If there are more than n-i rotations, return count as -1\n        if count > n-i:\n            return -1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n\n    # If array is already sorted, there is no rotation required\n    if arr == sorted(arr):\n        return count\n\n    # If array is already sorted in reverse, increment count\n    if arr == sorted(arr, reverse=True):\n        return count + 1\n\n    # If array is not sorted, find the smallest element in the array\n    min_element = min(arr)\n\n    # If the smallest element is at the end of the array, there is no rotation required\n    if min_element == arr[-1]:\n        return count\n\n    # If the smallest element is at the beginning of the array, there is a single rotation required\n    if min_element == arr[0]:\n        return count + 1\n\n    # If the smallest element is not at the end or beginning of the array, perform binary search to find the\n    # smallest element that is greater than the smallest element in the array and is smaller than or equal to the\n    # middle element of the array.\n    mid = n // 2\n    left = mid\n    right = n - 1\n    while left < right:\n        pivot = left + (right - left) // 2\n        if arr[pivot] < min_element:\n            left = pivot + 1\n        else:\n            right = pivot\n    count += right - mid\n\n    # If the smallest element is greater than the middle element of the array, it means the array is not sorted.\n    # In this case, there is no rotation required.\n    if arr[mid] <= min_element:\n        return count\n\n    # If the smallest element is smaller than the middle element of the array, there is a single rotation required.\n    if arr[mid] > min_element:\n        return count + 1\n\n    # If the smallest element is not greater than or smaller than the middle element of the array, the array is\n    # not sorted. In this case, there is no rotation required.\n    return count"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    if n < 0:\n        return \"The given number cannot be a perfect square\"\n    elif n == 0:\n        return \"The given number is a perfect square\"\n    else:\n        sqrt_n = int(n**0.5)\n        if sqrt_n**2 == n:\n            return \"The given number is a perfect square\"\n        else:\n            return \"The given number is not a perfect square\""
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. \n    This function works by iterating from 1 to the square root of the given number and checking whether each number is a perfect square or not.\n    '''\n    \n    import math\n    \n    sqrt_n = int(math.sqrt(n))\n    \n    for i in range(1, sqrt_n+1):\n        if n == i**2:\n            return True\n    \n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function takes a positive integer n as input and returns True if it is a perfect square, False otherwise.\n    \"\"\"\n    # Check if n is a perfect square by iterating from 1 to n/2\n    for i in range(1, n//2+1):\n        # If i^2 is equal to n, then n is a perfect square\n        if i*i == n:\n            return True\n    # If no perfect square is found, then n is not a perfect square\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not. \n    \"\"\"\n    # Find the square root of n\n    sqrt_n = int(n ** 0.5)\n\n    # Check if square root is an integer\n    if sqrt_n * sqrt_n!= n:\n        return False\n\n    return True\n"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    if n <= 0:\n        return False\n    else:\n        root = int(n ** 0.5) + 1\n        return root ** 2 == n"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n < 0:\n        return False\n    i = 0\n    square = 0\n    while square <= n:\n        square += i*i\n        i += 1\n        if square == n:\n            return True\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not.\n    \"\"\"\n    # Step 1: Check if the number is even or not\n    if n % 2 == 0:\n        return False\n\n    # Step 2: Compute the square root of the number\n    sqrt_n = int(n ** 0.5) + 1\n\n    # Step 3: Check if the square root is an integer\n    if sqrt_n ** 2!= n:\n        return False\n\n    return True"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    import math\n    # Find the square root of n using the built-in function of math library\n    root = math.sqrt(n)\n    # Check whether the square root is an integer or not\n    if root.is_integer():\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not.\n    \"\"\"\n    if n < 0:\n        return \"Number should be a non-negative integer\"\n    \n    # Find the square root of n\n    root = n ** 0.5\n    \n    # Check if the square root is an integer\n    if root.is_integer():\n        return True\n    \n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n\n    # To check if a number is a perfect square, we need to check if the square root of the number is an integer.\n    # We can get the square root of a number using the math library.\n    import math\n\n    sqrt_n = math.sqrt(n)\n\n    # If the square root of the number is an integer, then the number is a perfect square.\n    if sqrt_n.is_integer():\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return \"Product is even\"\n    else:\n        return \"Product is odd\""
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        print(\"The product of the numbers in the list is even.\")\n    else:\n        print(\"The product of the numbers in the list is odd.\")"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        print(f\"The product of the numbers in the list is even.\")\n    else:\n        print(f\"The product of the numbers in the list is odd.\")\n"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    This function takes a list of integers as input and returns True if the product of all the numbers in the list is even, \n    or False otherwise.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    \n    for num in arr: \n        product *= num\n    \n    if product % 2 == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    Write a function to check whether the product of numbers in a list is even or not.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        print(\"The product of numbers in the list is even.\")\n    else:\n        print(\"The product of numbers in the list is odd.\")"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    # Initialize max_sum to be negative infinity\n    max_sum = float('-inf')\n    \n    # Loop through each list in the input list\n    for lst in lists:\n        # Initialize current_sum to be 0\n        current_sum = 0\n        \n        # Loop through each element in the list\n        for num in lst:\n            # Add the element to the current_sum\n            current_sum += num\n            \n            # If the current_sum is greater than max_sum, update max_sum to be the current_sum\n            if current_sum > max_sum:\n                max_sum = current_sum\n                \n    # Return the list with the highest sum\n    return lst"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = None\n    \n    for list in lists:\n        current_sum = sum(list)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = list\n    \n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n\n    for i in range(len(lists)):\n        current_sum = sum(lists[i])\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = lists[i]\n    \n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = None\n    for i in range(len(lists)):\n        current_sum = 0\n        for j in range(len(lists[i])):\n            current_sum += lists[i][j]\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = lists[i]\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    max_sum = 0\n    max_list = []\n    for list in lists:\n        current_sum = 0\n        for element in list:\n            current_sum += element\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = list\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n\n    # Initialize max_sum and max_list to negative infinity\n    max_sum = float('-inf')\n    max_list = None\n\n    # Iterate over each list in the list of lists\n    for i in range(len(lists)):\n        # Calculate the sum of the elements in the current list\n        current_sum = sum(lists[i])\n\n        # If the current sum is greater than max_sum, update max_sum and max_list\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = lists[i]\n\n    # Return the list whose sum of elements is the highest\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Initialize variables\n    max_sum = float('-inf')\n    max_list = None\n    current_sum = 0\n    \n    # Loop through each list in the input list\n    for lst in lists:\n        # Loop through each element in the list\n        for num in lst:\n            # Add the element to the current sum\n            current_sum += num\n            \n            # If the current sum is greater than the maximum sum so far, update the maximum sum and maximum list\n            if current_sum > max_sum:\n                max_sum = current_sum\n                max_list = lst\n    \n    # Return the maximum list\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = -float('inf')\n    max_list = None\n    \n    for i in range(len(lists)):\n        current_sum = 0\n        for j in range(len(lists[i])):\n            current_sum += lists[i][j]\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = lists[i]\n    \n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    max_sum = 0\n    max_combination = []\n\n    for i in range(len(lists)):\n        for j in range(i+1, len(lists)):\n            current_sum = 0\n            for k in range(j+1):\n                current_sum += lists[i][k] + lists[j][k]\n            if current_sum > max_sum:\n                max_sum = current_sum\n                max_combination = [lists[i], lists[j]]\n\n    return max_combination"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    \"\"\"\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    \"\"\"\n    # Find the maximum sum among all lists\n    max_sum = 0\n    for lst in lists:\n        total_sum = sum(lst)\n        if total_sum > max_sum:\n            max_sum = total_sum\n\n    # Find the list with the maximum sum\n    max_lst = []\n    for lst in lists:\n        total_sum = sum(lst)\n        if total_sum == max_sum:\n            max_lst.append(lst)\n    return max_lst"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count = 1\n    max_count = 1\n    max_start = 0\n\n    for i in range(1, len(test_str)):\n        if test_str[i].isupper():\n            count += 1\n        else:\n            count = 1\n\n        if count > max_count:\n            max_count = count\n            max_start = i - max_count + 1\n\n    return test_str[max_start:max_start + max_count]"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    uppercase_count = 0\n    max_run = 0\n    i = 0\n\n    while i < len(test_str):\n        if test_str[i].isupper():\n            uppercase_count += 1\n            if uppercase_count > max_run:\n                max_run = uppercase_count\n        else:\n            if uppercase_count > max_run:\n                max_run = uppercase_count\n            uppercase_count = 0\n        i += 1\n\n    if uppercase_count > max_run:\n        max_run = uppercase_count\n\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    # Initialize variables for maximum run length and current run length\n    max_run = 0\n    current_run = 0\n\n    # Loop through the string and count the number of uppercase characters\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n        else:\n            current_run = 0\n\n        # If current run length is greater than maximum run, update maximum run\n        if current_run > max_run:\n            max_run = current_run\n\n    # Return the maximum run length\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    uppercase_run = []\n    start = 0\n    max_run = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            end = i\n            if end - start + 1 > max_run:\n                max_run = end - start + 1\n                uppercase_run = [test_str[start:end+1]]\n            elif end - start + 1 == max_run:\n                uppercase_run.append(test_str[start:end+1])\n            start = end + 1\n        else:\n            start = i\n    if max_run == 0:\n        return None\n    else:\n        return max_run, ''.join(uppercase_run)"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n\n    # Initialize variables\n    max_run_len = 0\n    current_run_len = 0\n    current_run_start = 0\n\n    # Loop through each character in the string\n    for i in range(len(test_str)):\n        # If the current character is uppercase\n        if test_str[i].isupper():\n            # Check if the current run is longer than the maximum run seen so far\n            if current_run_len + 1 > max_run_len:\n                max_run_len = current_run_len + 1\n                current_run_start = i\n            # Reset the current run length if the current character is not uppercase\n            else:\n                current_run_len = 0\n        # If the current character is not uppercase\n        else:\n            # Increment the current run length\n            current_run_len += 1\n\n    # If there is a current run that is longer than the maximum run seen so far\n    if current_run_len + current_run_start > max_run_len:\n        max_run_len = current_run_len + current_run_start\n\n    # Return the maximum run of uppercase characters in the string\n    return max_run_len"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    i = 0\n    while i < len(test_str):\n        if test_str[i].isupper():\n            run_start = i\n            while i < len(test_str) and test_str[i].isupper():\n                i += 1\n            run_length = i - run_start\n            if run_length > max_run:\n                max_run = run_length\n        i += 1\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n\n    # Initialize variables\n    max_run = 0\n    current_run = 0\n    prev_char = None\n\n    # Iterate through the string\n    for i in range(len(test_str)):\n        # If the current character is uppercase and the previous character was not uppercase, increment the run counter\n        if test_str[i].isupper() and prev_char is not None and not prev_char.isupper():\n            current_run += 1\n            # If the run counter is greater than the current maximum run, update the maximum run\n            if current_run > max_run:\n                max_run = current_run\n        # If the current character is not uppercase, reset the run counter and the previous character\n        else:\n            current_run = 0\n            prev_char = None\n        # Update the previous character\n        prev_char = test_str[i]\n\n    # Return the maximum run of uppercase characters\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    \n    # Initialize variables to store the start and end indices of the current run\n    start_index = 0\n    end_index = 0\n    \n    # Loop through each character in the string\n    for i in range(len(test_str)):\n        # If the current character is uppercase and the previous character was not, update the start index\n        if test_str[i].isupper() and not test_str[i-1].isupper():\n            start_index = i\n            \n        # If the current character is not uppercase and the previous character was uppercase, update the end index\n        elif not test_str[i].isupper() and test_str[i-1].isupper():\n            end_index = i\n            \n        # If the current character is not uppercase and the previous character was not, update the end index\n        else:\n            end_index = i\n            \n    # Return the maximum run of uppercase characters in the string\n    return test_str[start_index:end_index+1]"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # Convert all characters to uppercase\n    uppercase_str = test_str.upper()\n    # Initialize two variables to keep track of the start and end index of the maximum run of uppercase characters\n    max_start = 0\n    max_end = 0\n    # Loop through the string and find the start and end index of the maximum run of uppercase characters\n    for i in range(len(uppercase_str)):\n        if uppercase_str[i] == uppercase_str[i-1]:\n            # Check if the current index is the start of a new run\n            if i == 0:\n                max_start = i\n                max_end = i\n            else:\n                max_end = i\n        else:\n            # Reset the start and end index if the current run is no longer valid\n            max_start = i\n            max_end = i\n    # Extract the maximum run of uppercase characters from the string\n    max_run = uppercase_str[max_start:max_end+1]\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    run_count = 0\n    max_run = 0\n    current_run = 0\n    uppercase = False\n    \n    for char in test_str:\n        if char.isupper():\n            if uppercase:\n                if current_run > max_run:\n                    max_run = current_run\n                current_run = 0\n            uppercase = True\n        else:\n            uppercase = False\n            if current_run > max_run:\n                max_run = current_run\n            current_run = 0\n            \n        current_run += 1\n        \n    if current_run > max_run:\n        max_run = current_run\n        \n    return max_run"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None\n"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    This function takes a tuple of tuples and a number K as input and returns a boolean value indicating whether the given tuples contain the K or not.\n    '''\n    if len(test_tup) < K:\n        return False\n    else:\n        for i in range(len(test_tup)-K):\n            if test_tup[i]!= test_tup[i+K]:\n                return False\n        return True"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    return K in test_tup"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if tup.count(K) == 0:\n            return False\n    return True"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) < K:\n        return False\n    else:\n        for i in range(len(test_tup)-K):\n            if all(test_tup[i+j] == test_tup[i] for j in range(K)):\n                return True\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    \"\"\"\n    This function takes two tuples as input and checks if the first tuple contains K or not.\n    \"\"\"\n    if len(test_tup) == K:\n        print(\"The first tuple contains K.\")\n    else:\n        print(\"The first tuple does not contain K.\")"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    \"\"\"\n    This function takes two arguments:\n    - test_tup: a tuple of values to check if they contain the k value\n    - K: the value we want to check if it exists in the test_tup\n    \n    This function returns a boolean value indicating whether the k value\n    exists in the test_tup or not.\n    \"\"\"\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    \"\"\"\n    This function takes in a tuple and a number K and returns a boolean value indicating whether the tuple contains K or not.\n    \"\"\"\n    if len(test_tup) >= K:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) == K:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n    \n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup2[i] < test_tup1[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must have the same length.\")\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length.\")\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"Error: Tuples have different lengths.\"\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same number of elements\")\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    \n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples must have the same number of elements.\")\n        return\n\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            print(\"The element in the first tuple is greater than the corresponding element in the second tuple.\")\n            return\n\n    print(\"Both tuples have the same elements in the same positions.\")"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n    return True"
    }
]