[
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    shared_elements = []\n    for elem in test_tup1:\n        if elem in test_tup2:\n            shared_elements.append(elem)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    shared_list = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_list.append(element)\n    return shared_list"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Create a set from the first tuple to remove duplicates\n    set1 = set(test_tup1)\n    # Create a set from the second tuple to remove duplicates\n    set2 = set(test_tup2)\n    # Find the intersection of the two sets\n    intersection = set1.intersection(set2)\n    # Convert the intersection set back to a list and return it\n    return list(intersection)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for elem1 in test_tup1:\n        for elem2 in test_tup2:\n            if elem1 == elem2:\n                shared_elements.append(elem1)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    shared_elements = []\n    \n    # Loop through the first tuple and check if each element is in the second tuple\n    for elem in test_tup1:\n        if elem in test_tup2:\n            shared_elements.append(elem)\n    \n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Create sets from the input tuples\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    # Find the common elements and return them as a list\n    shared_elements = list(set1.intersection(set2))\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Sort both tuples\n    test_tup1 = sorted(test_tup1)\n    test_tup2 = sorted(test_tup2)\n\n    # Find the common elements\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n\n    # Convert the tuples to lists to make comparison easier\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n\n    # Find the intersection of the two lists\n    intersection = set(list1) & set(list2)\n\n    # Convert the set back to a tuple and return it\n    return tuple(intersection)"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_not_prime(n):\n    \"\"\"\n    Write a python function to identify non-prime numbers.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    # Check if n is less than or equal to 1\n    if n <= 1:\n        return True\n    \n    # Check if n is a prime number\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    \n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    if n == 2 or n == 3:\n        return False\n    if n % 2 == 0:\n        return True\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            return True\n        i += 2\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    Write a python function to identify non-prime numbers.\n    \"\"\"\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return True\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n\n    if n <= 1:\n        return False\n\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n\n    return False"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    max_heap = []\n    for num in nums:\n        hq.heappush(max_heap, -num)\n        if len(max_heap) > n:\n            hq.heappop(max_heap)\n    return [hq.heappop(max_heap) for _ in range(n)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    \"\"\"\n    # Initialize a min-heap with the first n elements of the input list\n    min_heap = []\n    for num in nums[:n]:\n        heapq.heappush(min_heap, -num)\n\n    # Pop the min-heap and update the corresponding element of the input list\n    for _ in range(n, len(nums)):\n        largest = -heapq.heappop(min_heap)\n        nums[largest] = nums[len(nums) - 1]\n        del nums[len(nums) - 1]\n        heapq.heappush(min_heap, -largest)\n\n    # Return the n largest integers in the input list\n    return nums[:n]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Create a max heap of size n\n    heap = [None] * n\n    for i in range(n):\n        heap[i] = nums[i]\n    hq.heapify(heap)\n    # Remove the maximum element from the heap and add the next-largest element\n    for i in range(n, len(nums)):\n        if nums[i] > heap[0]:\n            heapq.heappop(heap)\n            hq.heappush(heap, nums[i])\n    # Return the n largest elements from the heap\n    return heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums[:n]:\n        heapq.heappush(heap, num)\n    for num in nums[n:]:\n        if len(heap) < n:\n            heapq.heappush(heap, num)\n        else:\n            if num > heap[0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, num)\n    return heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    max_heap = []\n    for num in nums:\n        hq.heappush(max_heap, -num)\n        if len(max_heap) > n:\n            hq.heappop(max_heap)\n    return [hq.heappop(max_heap) for i in range(n)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    max_heap = []\n    for num in nums:\n        heapq.heappush(max_heap, num)\n        if len(max_heap) > n:\n            heapq.heappop(max_heap)\n    return max_heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    This function takes a list of numbers and an integer n as input and returns the n largest integers from the given list in descending order.\n    '''\n    \n    # create a min-heap from the list of numbers\n    heap = hq.nsmallest(n, nums)\n    \n    # return the elements of the heap in descending order\n    return [heapq.heappop(heap) for i in range(n)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Convert the list of numbers to a heap\n    heap = hq.nlargest(n, nums)\n    # Convert the heap back to a list\n    return list(heap)"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    \"\"\"\n    hq.heapify(nums)\n    largest_nums = []\n    for _ in range(n):\n        largest_nums.append(hq.heappop(nums))\n    return largest_nums"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    max_heap = []\n    for num in nums:\n        hq.heappush(max_heap, -num)\n        if len(max_heap) > n:\n            hq.heappop(max_heap)\n    return max_heap"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n\n    # Check if x is a power of two or not\n    if x == 0:\n        return False\n    elif x & (x - 1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n\n    # Convert x to binary\n    binary_x = bin(x)[2:]\n\n    # Count the number of bits in binary representation of x\n    bit_count = len(binary_x)\n\n    # Check if there is only one bit difference between the binary representations of x and y\n    if len(binary_x) == 1 or (len(binary_x) == 2 and binary_x[0]!= binary_x[1]):\n        return True\n\n    # If the number of bits is greater than 2, then check for more than one bit difference\n    else:\n        for i in range(1, bit_count):\n            if binary_x[i]!= binary_x[i-1]:\n                return False\n\n        return True"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Power_Of_Two(x): \n    '''\n    This function takes a positive integer x as input and returns True if it is a power of two, otherwise it returns False.\n    A power of two is a number that has no leading zeros in binary representation.\n    '''\n    # Convert x to binary and find the length of the binary string\n    binary_str = bin(x)[2:]\n    n = len(binary_str)\n\n    # If the length of the binary string is 1, it is a power of two, otherwise it is not a power of two\n    if n == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n    while x & (x-1)!= 0:\n        x &= (x-1)\n    if x == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # convert the integer to binary form \n    binary_str = bin(x)[2:] \n\n    # check if the binary string has one bit that is different \n    if any(c!= '0' for c in binary_str): \n        return False \n    else: \n        return True "
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0 or x == 1: \n        return False \n    if (x & (x - 1)) == 0: \n        return True \n    else: \n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    diff = x ^ (x-1)\n    return diff == 0 "
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    diff = 0\n    while x!= 0: \n        diff = diff + 1 if x & 1 == 1 else diff\n        x = x >> 1\n    return diff == 1"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Power_Of_Two (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return False\n    while x & (x - 1) == 0:\n        if x == 1:\n            return True\n        x >>= 1\n    return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    This function takes in two integers x and y as arguments. It checks whether the difference between x and y is only at one bit position or not.\n    If the difference is at only one bit position, then it returns True, else False.\n    '''\n    if x & (x-1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Use regular expressions to find all words with at least 4 characters\n    words = re.findall(r'\\b\\w+\\b', text)\n    \n    # Filter out words with fewer than 4 characters\n    words = [word for word in words if len(word) >= 4]\n    \n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = re.compile(r'\\b\\w{4,}\\b')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text)\n    result = []\n    for word in words:\n        if len(word) >= 4:\n            result.append(word)\n    return result"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text)\n    long_words = [word for word in words if len(word) >= 4]\n    return long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_char_long(text):\n    # find all words in the text that are at least 4 characters long\n    pattern = r'\\b\\w{4,}\\b'\n    words = re.findall(pattern, text)\n    # return the list of words\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    This function takes a string as input and returns a list of all words which are at least 4 characters long.\n    '''\n    pattern = r'\\b\\w{4,}\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text)\n    return [word for word in words if len(word) >= 4]"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Use regular expression to find all words longer than 4 characters\n    words = re.findall(r'\\b\\w+\\b', text)\n    # Remove words with less than 4 characters\n    words = [word for word in words if len(word) >= 4]\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_char_long(text):\n    pattern = r'\\b\\w{4,}\\b'\n    words = re.findall(pattern, text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n\n    # Split the text into words\n    words = re.findall(r'\\b\\w+\\b', text)\n\n    # Filter out words with less than 4 characters\n    words = [word for word in words if len(word) >= 4]\n\n    return words"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    \"\"\"\n    Write a function to find squares of individual elements in a list.\n    \"\"\"\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num**2)\n    return squared_nums"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    \"\"\"\n    Write a function to find squares of individual elements in a list.\n    \"\"\"\n    return [num ** 2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    \"\"\"\n    Write a function to find squares of individual elements in a list.\n    \"\"\"\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num ** 2)\n    return squared_nums"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    \"\"\"\n    Write a function to find squares of individual elements in a list.\n    \"\"\"\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Rotations(str): \n    n = len(str)\n    # check if the string is already in sorted order\n    if sorted(str) == str:\n        return 0\n    # check if the string is already in reverse sorted order\n    if sorted(str[::-1]) == str:\n        return 0\n    # check if the string is already in reverse sorted order\n    if sorted(str[::-1]) == str:\n        return 0\n    # find the minimum number of rotations required to get the string in sorted order\n    for i in range(n-1, -1, -1):\n        if str[i]!= str[i+1]:\n            return i+1\n    return 0"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    rotations = 0\n    n = len(str)\n    while str!= str[::-1]:\n        rotations += 1\n        str = str[1:] + str[0]\n    return rotations\n"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    # find the frequency of characters in the string\n    freq = {}\n    for i in range(n):\n        if str[i] in freq:\n            freq[str[i]] += 1\n        else:\n            freq[str[i]] = 1\n    \n    # find the frequency of characters in the reversed string\n    freq_rev = {}\n    for i in range(n):\n        if str[n-1-i] in freq_rev:\n            freq_rev[str[n-1-i]] += 1\n        else:\n            freq_rev[str[n-1-i]] = 1\n    \n    # check if the frequency of characters in the original string and the reversed string are equal\n    if freq == freq_rev:\n        # if they are, then there are no rotations required\n        return 0\n    \n    # find the minimum number of rotations required to get the string in reverse\n    rot_rev = 0\n    while True:\n        if freq == freq_rev:\n            break\n        rot_rev += 1\n        # update the frequency of characters in the string\n        for i in range(n):\n            if freq[str[i]] > 0:\n                freq[str[i]] -= 1\n                freq_rev[str[n-1-i]] += 1\n            else:\n                break\n    \n    # find the minimum number of rotations required to get the string in the original order\n    rot = 0\n    while True:\n        if freq == freq_rev:\n            break\n        rot += 1\n        # update the frequency of characters in the string\n        for i in range(n):\n            if freq[str[i]] > 0:\n                freq[str[i]] -= 1\n                freq_rev[str[i]] += 1\n            else:\n                break\n    \n    return min(rot, rot_rev)"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # Check if the given string is empty or contains only one character\n    if len(str) <= 1:\n        return 0\n    \n    # Initialize the result variable\n    result = 0\n    \n    # Loop through all possible rotations of the given string\n    for i in range(len(str)):\n        # Reverse the current substring\n        substring = str[i:][::-1]\n        \n        # Check if the reversed substring is equal to the original string\n        if substring == str:\n            # Add 1 to the result variable\n            result += 1\n            # If the result is greater than 1, break the loop\n            if result > 1:\n                break\n    \n    # Return the result\n    return result"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n\n    n = len(str)\n    for i in range(n//2):\n        if str[i]!= str[n-1-i]:\n            return i+1\n    return n//2"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Rotations(str): \n    # create a dictionary to store the frequency of each character in the string\n    freq = {} \n    for char in str: \n        if char in freq: \n            freq[char] += 1 \n        else: \n            freq[char] = 1 \n\n    # create a list of characters in decreasing order of frequency \n    sorted_chars = sorted(freq, key=freq.get, reverse=True) \n\n    # initialize the minimum number of rotations to infinity \n    min_rotations = float('inf') \n\n    # iterate through the sorted characters and check if they are equal to the first character in the string \n    for i in range(len(sorted_chars)): \n        if sorted_chars[i] == str[0]: \n            # if they are equal, then rotate the string and check if the resulting string is the same as the original string \n            rotated_str = sorted_chars[i:] + str[1:] \n            if rotated_str == str: \n                # if it is, then update the minimum number of rotations \n                min_rotations = min(min_rotations, i) \n\n    # return the minimum number of rotations required to get the same string \n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    for i in range(n):\n        for j in range(i, n):\n            if str[i:j+1] == str[j:i+1][::-1]:\n                return j-i+1"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n\n    # convert string to list of characters\n    str_list = list(str)\n\n    # initialize the minimum number of rotations\n    min_rotations = 0\n\n    # loop through the characters in the string\n    for i in range(len(str_list)):\n\n        # check if the character is equal to the last character\n        if str_list[i] == str_list[-(i+1)]:\n            continue\n\n        # check if the character is equal to the second last character\n        elif str_list[i] == str_list[-(i+2)]:\n            continue\n\n        # check if the character is equal to the third last character\n        elif str_list[i] == str_list[-(i+3)]:\n            continue\n\n        # check if the character is equal to the fourth last character\n        elif str_list[i] == str_list[-(i+4)]:\n            continue\n\n        # increment the minimum number of rotations\n        min_rotations += 1\n\n        # rotate the string by one character\n        temp = str_list[i]\n        str_list[i] = str_list[-(i+1)]\n        str_list[-(i+1)] = temp\n\n    # return the minimum number of rotations\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Rotations(str):\n    # Initialize variables to store the minimum rotations and the maximum rotations\n    min_rotations = float('inf')\n    max_rotations = 0\n    # Initialize a dictionary to store the frequency of each character in the string\n    freq = {}\n    # Loop through each character in the string\n    for char in str:\n        # If the character is not in the dictionary, add it with a frequency of 1\n        if char not in freq:\n            freq[char] = 1\n        # If the character is already in the dictionary, increment its frequency by 1\n        else:\n            freq[char] += 1\n    # Initialize a variable to store the number of rotations required\n    count = 0\n    # Loop through each character in the string again to perform rotations\n    for i in range(len(str)):\n        # If the character is not in the dictionary, do nothing\n        if str[i] not in freq:\n            continue\n        # If the character is already in the dictionary, rotate the string and increment the count\n        else:\n            for j in range(len(str)):\n                if j!= i:\n                    freq[str[j]] += freq[str[i]]\n                    del freq[str[i]]\n            count += 1\n    # If the count is greater than the maximum rotations, update the maximum rotations\n    if count > max_rotations:\n        max_rotations = count\n    # Return the minimum rotations\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # Initialize the minimum number of rotations to be 0\n    min_rotations = 0\n    \n    # Loop through all possible rotations of the string\n    for i in range(len(str)):\n        # Swap the i-th and (i+1)-th characters\n        str[i], str[i+1] = str[i+1], str[i]\n        \n        # Check if the string is equal after the swap\n        if str == str[::-1]:\n            # If it is, increment the minimum number of rotations\n            min_rotations += 1\n            \n            # Rotate the string to the left by 1 character\n            str = str[1:]\n    \n    # Return the minimum number of rotations required\n    return min_rotations"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch, '', 1).replace(ch, '', -1)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if s.count(ch) >= 2:\n        return s.replace(ch, '')\n    else:\n        return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    Write a python function to remove first and last occurrence of a given character from the string.\n    \"\"\"\n    if ch in s:\n        s = s[:s.index(ch)] + s[s.index(ch)+1:]\n    if ch in s:\n        s = s[:s.index(ch)] + s[s.index(ch)+1:]\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # Using find and replace method to remove first and last occurrence of character\n    s = s.replace(ch, '')\n    # Using find and replace method to remove first occurrence of character\n    s = s.replace(ch, '', 1)\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    Write a python function to remove first and last occurrence of a given character from the string.\n    \"\"\"\n    return s.replace(ch, \"\", 1)[:-1]"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # Check if the character exists in the string\n    if ch not in s:\n        print(\"Character does not exist in the string\")\n        return\n    \n    # Find the index of the first occurrence of the character\n    index = s.find(ch)\n    \n    # If the character is at the beginning of the string, remove it and return the modified string\n    if index == 0:\n        s = s[1:]\n    \n    # If the character is at the end of the string, remove it and return the modified string\n    elif index == len(s) - 1:\n        s = s[:index]\n    \n    # If the character is neither at the beginning nor the end of the string, remove all occurrences and return the modified string\n    else:\n        s = s[:index] + s[index + 2:]\n    \n    # Return the modified string\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_Occ(s, ch): \n    '''\n    This function removes the first and last occurrence of a given character from the string s.\n    '''\n    # Check if the character to be removed is the first or last character in the string\n    if s[0] == ch or s[-1] == ch:\n        # If yes, return an empty string\n        return \"\"\n    else:\n        # If not, return the substring without the given character\n        return s[1:-1]"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_Occ(s, ch):\n    s = s.strip()\n    return s.replace(ch, '')[:len(s)-len(ch)]"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if s.count(ch) >= 2:\n        return s[:s.index(ch)+1] + s[s.index(ch)+2:]\n    else:\n        return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch not in s:\n        return s\n    else:\n        return remove_Occ(s[1:-1],ch) + s[-1]"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    rows = len(M)\n    cols = len(M[0])\n\n    # Calculate the sum of each row\n    row_sums = [0] * rows\n\n    for i in range(rows):\n        for j in range(cols):\n            row_sums[i] += M[i][j]\n\n    # Sort the matrix based on the row sums\n    sorted_matrix = [[] for _ in range(rows)]\n\n    for i in range(rows):\n        for j in range(cols):\n            index = row_sums.index(M[i][j])\n            sorted_matrix[index].append(M[i][j])\n\n    return sorted_matrix"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    # sort each row of the matrix\n    for i in range(len(M)):\n        M[i] = sorted(M[i])\n\n    # sort the matrix in ascending order\n    for i in range(len(M)):\n        for j in range(i + 1, len(M)):\n            if M[i][j] + M[j][i] < M[i][j]:\n                M[i], M[j] = M[j], M[i]\n\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Sorts a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Calculate the sum of each row\n    row_sums = [sum(row) for row in M]\n    # Sort the rows in ascending order\n    row_indexes = [i for i in range(len(M))]\n    row_indexes.sort(key=lambda i: row_sums[i])\n    # Sort the matrix according to the row order\n    sorted_M = [[] for _ in range(len(M[0]))]\n    for i in row_indexes:\n        sorted_M = sorted(M[i], key=lambda j: j)\n        for j in range(len(sorted_M)):\n            sorted_M[j] = [sorted_M[j][0]] + sorted(sorted_M[j][1:], key=lambda k: k[0])\n        sorted_M = [row for sublist in sorted_M for row in sublist]\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    # Initialize a list to store the sorted matrix\n    sorted_matrix = []\n\n    # Iterate through each row of the matrix\n    for i in range(len(M)):\n        # Create a list to store the row with its index as its value\n        row = [(i, j) for j in range(len(M[i]))]\n        # Sort the row in ascending order based on the sum of its values\n        row.sort(key=lambda x: sum(M[i][x[1]]) - sum(M[x[0]][x[1]]))\n        # Add the sorted row to the sorted matrix\n        sorted_matrix.append(row)\n\n    # Return the sorted matrix\n    return sorted_matrix"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    rows = len(M)\n    cols = len(M[0])\n\n    # Sort each row in ascending order of the sum of its elements\n    for i in range(rows):\n        M[i].sort()\n\n    # Sort the matrix in ascending order of the sum of its rows\n    for i in range(rows):\n        for j in range(cols):\n            M[i][j] = M[i][j]\n\n    # To print the sorted matrix, uncomment the following line\n    # print(M)"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # find the sum of each row\n    row_sums = [sum(row) for row in M]\n    # sort the rows in ascending order\n    M = [sorted(row) for row in M]\n    # create a new matrix with the sorted rows\n    sorted_M = [[M[i][j] for i in range(len(M))] for j in range(len(M[0]))]\n    # sort the columns in ascending order\n    sorted_M = [[sorted_M[i][j] for j in range(len(sorted_M[0]))] for i in range(len(sorted_M))]\n    # return the sorted matrix\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    # initialize the length of the first row\n    n = len(M[0])\n    \n    # sort each row in the matrix in ascending order\n    for i in range(n):\n        M[0][i] = sorted(M[0][i])\n    \n    # sort the matrix in ascending order based on the sum of its rows\n    for i in range(1, len(M)):\n        M[i] = sorted(M[i], key=lambda x: sum(x))\n    \n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Find the sum of each row\n    row_sums = [sum(row) for row in M]\n    # Find the row index with the smallest sum\n    min_row_index = row_sums.index(min(row_sums))\n    # Initialize the sorted matrix with the minimum row\n    sorted_M = [M[min_row_index]]\n    # Remove the minimum row from the matrix\n    del M[min_row_index]\n    # Repeat until the matrix is empty\n    while M:\n        # Find the index of the smallest element in the remaining rows\n        min_element_index = 0\n        for i in range(1, len(M)):\n            if M[i][0] < M[min_element_index][0]:\n                min_element_index = i\n        # Add the smallest element to the sorted matrix\n        sorted_M.append(M[min_element_index])\n        # Remove the smallest element from the remaining rows\n        del M[min_element_index]\n    # Return the sorted matrix\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # initialize a dictionary to store the sum of each row\n    row_sums = {}\n    # loop through each row and calculate the sum\n    for row in M:\n        row_sum = sum(row)\n        row_sums[row] = row_sum\n    \n    # sort the matrix based on the sum of each row\n    sorted_matrix = sorted(M, key=lambda x: row_sums[x])\n    return sorted_matrix"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Initialize a variable to keep track of the index of the row with the smallest sum\n    min_row_index = 0\n    \n    # Loop through all the rows of the matrix\n    for i in range(len(M)):\n        # Initialize a variable to keep track of the sum of the current row\n        current_sum = 0\n        \n        # Loop through all the columns of the current row\n        for j in range(len(M[i])):\n            # Add the value of the current element to the current sum\n            current_sum += M[i][j]\n            \n            # If the sum of the current row is smaller than the sum of the current row with the smallest sum, update the min_row_index\n            if current_sum < M[min_row_index][min_col_index]:\n                min_row_index = i\n        \n        # If the sum of the current row is equal to the sum of the current row with the smallest sum, move the current row to the end of the list\n        if current_sum == M[min_row_index][min_col_index]:\n            M.pop(min_row_index)\n            M.append(M.pop(i))\n    \n    return M"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Volume(l, b, h):\n    \"\"\"\n    Find the volume of a triangular prism.\n\n    Parameters:\n    l (float): length of the prism in the x-dimension\n    b (float): length of the prism in the y-dimension\n    h (float): length of the prism in the z-dimension\n\n    Returns:\n    float: the volume of the prism\n    \"\"\"\n    V = (l * b * h) / 6\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n\n    #Calculating the volume of the triangular prism\n    V = (l*b*h)/3\n\n    #Returning the volume\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Volume(l,b,h):\n    '''\n    This function takes the length, base, and height of a triangular prism as input and calculates the volume.\n    '''\n    V = l * b * h / 3\n    return V\n"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Volume(l,b,h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = l*b*h\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Volume(l, b, h):\n    \"\"\"\n    Write a python function to find the volume of a triangular prism.\n    \"\"\"\n    V = l * b * h / 3\n    print(\"The volume of the triangular prism is:\", V)"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Volume(l,b,h): \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    area = 0.5 * l * b\n    volume = area * h\n    return volume "
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = (1/3)*l*b*h #formula for volume of a triangular prism\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Volume(l,b,h): \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = (l*b*h)/3\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = l*b*h\n    return V\n"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n\n    # Calculating the area of the triangular prism\n    area = 0.5 * l * b\n\n    # Calculating the volume of the triangular prism\n    volume = area * h\n\n    # Printing the volume of the triangular prism\n    print(\"The volume of the triangular prism is: \", volume)"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'[a-z]*_[a-z]*'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'\\b[a-z]*_[a-z]*\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'\\b[a-z]+\\w*\\b'\n    matches = re.findall(pattern, text)\n    if matches:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile(r'\\b[a-z]+(_[a-z]+)*\\b')\n    return pattern.match(text) is not None"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'(?<![A-Z])[a-z]+(?![A-Z])_'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r\"(?<![a-zA-Z])[a-z]+(?![a-zA-Z_])_\"\n    result = re.findall(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    \"\"\"\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    \"\"\"\n    pattern = r'(?<![a-z])[a-z]+(?![a-z])_+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n\n    regex = r'([a-z])([A-Z])'\n\n    # using re.search() method to check if regex pattern matches any part of the string\n    if re.search(regex, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z]+_[a-z]+'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    # Define a regular expression pattern to match sequences of lowercase letters joined with an underscore\n    pattern = r'(?<=[a-z])[A-Z](?=[a-z]|$)'\n    # Use the re.search() function to search for the pattern in the input text\n    result = re.search(pattern, text)\n    # If the result is not None, it means the input text contains sequences of lowercase letters joined with an underscore, so return True\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    This function calculates the perimeter of a square with the given side length a.\n    '''\n    perimeter = a * 4\n    return perimeter"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Convert the string to a list of characters\n    char_list = list(string)\n\n    # Remove characters from the first string which are present in the second string\n    for char in char_list:\n        if char in string:\n            char_list.remove(char)\n\n    # Convert the list of characters back to a string\n    result = ''.join(char_list)\n    return result"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    NO_OF_CHARS = 256\n    string = string.lower() # convert string to lowercase to remove case sensitivity\n    list1 = list(string)\n    list2 = list(input(\"Enter a string: \").lower()) # take input string and convert to lowercase\n    for i in range(NO_OF_CHARS):\n        if list1.count(chr(i)) == list2.count(chr(i)): # check if both strings have same count of each character\n            list1.remove(chr(i)) # remove characters from the first string\n    new_string = ''.join(list1) # convert the modified list to string\n    print(\"Modified string: \", new_string) # print the modified string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def str_to_list(string):\n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n    second_string = input(\"Enter the string with characters to be removed: \")\n    first_string = input(\"Enter the string to be checked: \")\n    for char in second_string:\n        if char in first_string:\n            first_string = first_string.replace(char, \"\")\n    return first_string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def str_to_list(string, char_set):\n    \"\"\"\n    Remove characters from the first string which are present in the second string.\n    \"\"\"\n    result = []\n    for char in string:\n        if char not in char_set:\n            result.append(char)\n    return ''.join(result)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n\n    # convert the first string into a list of characters\n    char_list = list(string)\n\n    # convert the second string into a list of characters\n    remove_list = list(string)\n\n    # remove all the characters from the remove_list which are present in the char_list\n    for char in remove_list:\n        if char in char_list:\n            remove_list.remove(char)\n\n    # remove all the characters from the char_list which are present in the remove_list\n    for char in char_list:\n        if char in remove_list:\n            char_list.remove(char)\n\n    # convert the char_list back into a string and return it\n    return ''.join(char_list)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def str_to_list(string):\n    NO_OF_CHARS = 256\n    char_list = list(string)\n    for i in range(NO_OF_CHARS):\n        if string.count(chr(i)) > 0:\n            char_list.remove(chr(i))\n    return ''.join(char_list)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def str_to_list(string):\n    # convert string to list of characters\n    str_list = list(string)\n\n    # create a set of characters to be removed\n    remove_set = set(string)\n\n    # iterate through the list and remove the characters present in the remove_set\n    for i in range(len(str_list)):\n        if str_list[i] in remove_set:\n            str_list.pop(i)\n            i -= 1\n\n    # convert list of characters to a string\n    output_string = ''.join(str_list)\n\n    return output_string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    for i in range(len(string)):\n        if string[i] in string[i+1:]:\n            del string[i]\n    return string\n"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    char_set = set()\n    for i in range(NO_OF_CHARS):\n        char_set.add(chr(i))\n    first_string = set(string)\n    result_string = first_string.difference(char_set)\n    return list(result_string)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def str_to_list(string, remove_chars):\n    \"\"\"\n    Remove characters from the first string which are present in the second string.\n    \"\"\"\n    new_str = \"\"\n    for char in string:\n        if char not in remove_chars:\n            new_str += char\n    return new_str"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create an empty set to store unique elements\n    unique_set = set()\n\n    # Loop through each element of the array\n    for num in arraynums:\n        # If the element is not already in the set, add it\n        if num not in unique_set:\n            unique_set.add(num)\n        # If the element is already in the set, return True\n        else:\n            return True\n\n    # If no duplicate elements were found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Check if the array is empty\n    if not arraynums:\n        return False\n    \n    # Create a dictionary to store the number of occurrences of each element in the array\n    count = {}\n    \n    # Loop through the array and count the occurrences of each element\n    for num in arraynums:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n    \n    # Check if any element appears more than once\n    for num, count in count.items():\n        if count > 1:\n            return True\n    \n    # If no duplicates were found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    # Create a dictionary to store the number of occurrences of each number in the array\n    num_occurrences = {}\n    for num in arraynums:\n        if num in num_occurrences:\n            num_occurrences[num] += 1\n        else:\n            num_occurrences[num] = 1\n    \n    # Loop through the dictionary to check if any number has more than one occurrence\n    for num in num_occurrences:\n        if num_occurrences[num] > 1:\n            return True\n    \n    # If no duplicate number is found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    hash_set = set()\n    for num in arraynums:\n        if num in hash_set:\n            return True\n        else:\n            hash_set.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create a dictionary to store the frequency of each element in the array\n    freq = {}\n    for num in arraynums:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    \n    # Check if there are any duplicate elements in the array\n    for num in freq:\n        if freq[num] > 1:\n            return True\n    \n    # If no duplicate elements are found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # create a dictionary to store the frequency of each element in the array\n    freq = {}\n    for num in arraynums:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    \n    # check if any element appears more than once in the dictionary\n    for count in freq.values():\n        if count > 1:\n            return True\n    \n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Convert the array to a set to remove duplicates\n    unique_nums = set(arraynums)\n    # Check if the length of the set is equal to the length of the original array\n    return len(unique_nums) == len(arraynums)"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    unique_nums = set(arraynums)\n    if len(arraynums) == len(unique_nums):\n        return False\n    else:\n        return True"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 1:\n        return True\n    elif x % 2 == 0:\n        return False\n    elif x < 1:\n        return False\n    elif x > 9:\n        return False\n    else:\n        return True"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0:\n        return False\n    elif x == 2:\n        return True\n    else:\n        for i in range(3, int(x**0.5)+1, 2):\n            if x % i == 0:\n                return False\n        return True"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x >= 10 and x <= 20:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_woodall(x):\n    if x % 2 == 0:\n        return False\n    for i in range(3, int(x**0.5)+1, 2):\n        if x % i == 0:\n            return False\n    return True"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x in [1, 2, 5, 10]:\n        return True\n    elif x in [3, 6, 15, 30]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 1:\n        return \"Woodall\"\n    elif x % 2 == 0 and x > 2:\n        return \"Woodall\"\n    else:\n        return \"Not a Woodall\""
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 0 or x == 1:\n        return True\n    elif x % 2 == 0:\n        return is_woodall(x // 2)\n    else:\n        return is_woodall(3 * x + 1)"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_woodall(x):\n    if x % 2 == 0 and x % 3 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_woodall(x): \n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    if x % 10 == 3 or x % 10 == 7:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x in [0, 1]:\n        return \"Woodball\"\n    elif x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\""
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    reversed_num = str(num)[::-1]\n    reversed_num = int(reversed_num)\n    if num - 1 < 2 * reversed_num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    return num == (int(str(num)[::-1]) + 1) * 2"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while num > 0:\n        rev_num = rev_num * 10 + num % 10\n        num //= 10\n    return True if rev_num < 2 * rev_num else False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n\n    reverse_num = 0\n    while num > 0:\n        reverse_num = reverse_num * 10 + num % 10\n        num //= 10\n\n    if reverse_num == 2 * num:\n        print(num, \"is one less than twice its reverse.\")\n    else:\n        print(num, \"is not one less than twice its reverse.\")"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return num == int(str(num)[::-1])"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    # calculate the reverse of the number\n    reverse = 0\n    while num > 0:\n        remainder = num % 10\n        reverse = reverse * 10 + remainder\n        num //= 10\n    \n    # check if the original number and its reverse have the same last digit\n    if (num == reverse * 10) and (num + 1 == reverse):\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while num > 0:\n        digit = num % 10\n        rev_num = rev_num*10 + digit\n        num //= 10\n    return rev_num == 2 * num"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    rev_num = 0\n    while num!= 0:\n        digit = num % 10\n        rev_num = rev_num * 10 + digit\n        num //= 10\n    return rev_num == 2 * num"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n\n    # check if number is less than 2\n    if num < 2:\n        return False\n\n    # convert number to string and reverse\n    num_str = str(num)\n    rev_str = num_str[::-1]\n\n    # convert reversed string back to integer\n    rev_num = int(rev_str)\n\n    # check if original number is one less than twice its reverse\n    if num == rev_num + 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return num - int(str(num)[::-1])"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    n = len(arr)\n    max_num = 0\n    for i in range(n):\n        max_num += int(arr[i]) * (10**(n-1-i))\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    power = 1\n    \n    for num in arr:\n        max_num += (num * power)\n        power *= 10\n        \n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                for l in range(k+1, n):\n                    for m in range(l+1, n):\n                        for n in range(m+1, n):\n                            if arr[i] * 10**3 + arr[j] * 10**2 + arr[k] * 10**1 + arr[l] * 10**0 + arr[m] * 10**-1 + arr[n] == 0:\n                                max_num = max(max_num, arr[i] * 10**3 + arr[j] * 10**2 + arr[k] * 10**1 + arr[l] * 10**0 + arr[m] * 10**-1 + arr[n])\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    n = len(arr)\n    max_num = 0\n    for i in range(1, 10**n):\n        num = i\n        for j in range(n):\n            num *= 10\n            num += arr[j]\n        if num > max_num:\n            max_num = num\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # Initialize variables to store the largest number formed with digits from the given list\n    max_num = 0\n    curr_num = 0\n\n    # Loop through each digit from the given list\n    for digit in arr:\n        # Convert the digit to an integer and add it to the current number\n        curr_num += int(digit)\n        # If the current number is greater than the current largest number, update the largest number\n        if curr_num > max_num:\n            max_num = curr_num\n        # Reset the current number to 0\n        curr_num = 0\n    \n    # Return the largest number formed with digits from the given list\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for i in range(10):\n        max_num += arr[i]\n        if max_num >= 10**len(arr):\n            break\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n\n    # sort the array in ascending order\n    arr.sort()\n\n    # initialize the maximum number and the current number\n    max_num = 0\n    current_num = arr[0]\n\n    # iterate through the array\n    for i in range(1, len(arr)):\n        # check if the current number can be formed with the next digit\n        if current_num + arr[i] > max_num:\n            # update the maximum number\n            max_num = current_num + arr[i]\n        # update the current number\n        current_num = arr[i]\n\n    # return the maximum number\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Max_Num(arr):\n    # Remove the duplicates from the given list of digits\n    arr = list(set(arr))\n    # Sort the list of digits in descending order\n    arr.sort(reverse=True)\n    # Initialize the maximum number that can be formed as 0\n    max_num = 0\n    # Loop through each digit in the list\n    for num in arr:\n        # If the current digit is greater than the maximum number, update the maximum number\n        if num > max_num:\n            max_num = num\n    # Return the maximum number that can be formed\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n\n    # Sort the list in ascending order\n    arr.sort()\n\n    # Initialize variables\n    max_num = 0\n    current_num = 0\n\n    # Loop through the sorted list\n    for i in range(len(arr)):\n        # Add the current digit to the current number\n        current_num += arr[i]\n\n        # If the current number is greater than the maximum number, update it\n        if current_num > max_num:\n            max_num = current_num\n\n        # If the current number becomes greater than 9, reset it to 0 and add the next digit to the current number\n        if current_num > 9:\n            current_num = 0\n\n    # Return the maximum number found\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Max_Num(arr):\n    max_num = 0\n    for i in range(len(arr)-1, -1, -1):\n        if arr[i] < len(arr) and arr[i] >= max_num:\n            max_num = arr[i]\n    return max_num"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def opposite_Signs(x, y):\n    if x < 0 and y < 0:\n        return True\n    elif x > 0 and y > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n    \"\"\"\n    if x * y > 0:\n        return True\n    elif x * y < 0:\n        return False\n    else:\n        return None"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n\n    # check if x is greater than y\n    if x > y:\n        # check if the difference between x and y is positive or negative\n        if x - y < 0:\n            return True\n        else:\n            return False\n    # check if x is less than y\n    else:\n        # check if the difference between x and y is positive or negative\n        if y - x < 0:\n            return True\n        else:\n            return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def opposite_Signs(x,y):\n    # To check if x and y have opposite sign or not, we need to check if both x and y are positive or both are negative.\n    # If both are positive or both are negative, then their sign should be opposite.\n\n    if x > 0 and y > 0:\n        return True\n    elif x < 0 and y < 0:\n        return True\n    elif x > 0 and y < 0:\n        return True\n    elif x < 0 and y > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x*y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n\n    if x == 0: \n        if y == 0: \n            return \"Both numbers are zero.\"\n        else: \n            return \"y is zero but x is not zero.\"\n    elif y == 0: \n        return \"x is zero but y is not zero.\"\n    elif x > 0 and y > 0: \n        return \"Both numbers have positive signs.\"\n    elif x < 0 and y < 0: \n        return \"Both numbers have negative signs.\"\n    else: \n        return \"Both numbers have same signs.\""
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def opposite_Signs(x,y):\n    \"\"\"\n    This function takes two integers as input and returns True if they have opposite signs and False otherwise.\n    \"\"\"\n    if x*y<0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    This function checks whether the given two integers have opposite sign or not.\n    \"\"\"\n    if x < 0 and y < 0:\n        return \"Both numbers have opposite signs\"\n    elif x < 0 and y > 0:\n        return \"The first number has opposite sign and the second number has positive sign\"\n    elif x > 0 and y < 0:\n        return \"The first number has positive sign and the second number has opposite sign\"\n    else:\n        return \"The two numbers have the same sign\""
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def opposite_Signs(x, y):\n    # check if both numbers have opposite signs\n    if x < 0 and y < 0 or x > 0 and y > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    a = 1\n    b = 1\n    c = 1\n    \n    while c <= n:\n        a += 1\n        b += 1\n        c += 2\n        \n        if (a * a == b * b + c * c) or (b * b == a * a + c * c) or (c * c == a * a + b * b):\n            return a\n        else:\n            continue"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 1:\n        return \"Invalid input. Please enter a positive integer.\"\n    elif n == 1:\n        return 1\n    else:\n        num = 1\n        for i in range(n-1):\n            num += 2**(n-i-1)\n        return num"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 0:\n        return False\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 8\n    elif n == 3:\n        return 24\n    elif n == 4:\n        return 64\n    elif n == 5:\n        return 125\n    elif n == 6:\n        return 216\n    elif n == 7:\n        return 343\n    elif n == 8:\n        return 512\n    elif n == 9:\n        return 729\n    elif n == 10:\n        return 1000\n    else:\n        return None"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    def is_octagonal_helper(n, m):\n        \"\"\"\n        Helper function to check if a number is octagonal or not.\n        \"\"\"\n        return n * n + m * m == 3 * n * m * (m + 1)\n\n    # Initialize variables\n    i = 1\n    j = 1\n    k = 1\n\n    # Check if the nth octagonal number is valid or not\n    while i <= n:\n        if is_octagonal_helper(i, j):\n            return i\n        i += 1\n\n    # If no valid octagonal number is found, return None\n    return None"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    octagonal_numbers = []\n    for i in range(1, 251):\n        octagonal_numbers.append(i ** 3)\n    return octagonal_numbers[n-1]\n\nn = int(input(\"Enter the value of n: \"))\nprint(f\"The {n}th octagonal number is: {is_octagonal(n)}\")"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n * (2 * n - 1) ** 2"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    a = 0\n    b = n * (n + 1) // 2\n    while b > 0:\n        if a * a + b * b == n * n:\n            return True\n        a += 1\n        b = n * (n + 1) // 2\n    return False\n\nn = int(input(\"Enter a number: \"))\nif is_octagonal(n):\n    print(\"The\", n, \"th octagonal number is:\", n * (n + 1) // 2)\nelse:\n    print(\"There is no octagonal number with that index.\")"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n <= 0:\n        return None\n    i = 1\n    while i <= n:\n        j = 1\n        while j <= i:\n            if i ** 2 + j ** 2 == n:\n                return True\n            j += 1\n        i += 1\n    return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n * (3 * n - 1)"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n\n    octagonal_numbers = []\n\n    for i in range(1, 101):\n        if i == 1:\n            octagonal_numbers.append(i)\n        elif i % 2 == 0 and i % 3 == 0:\n            octagonal_numbers.append(i)\n        elif i % 2 == 1 and i % 3 == 0:\n            octagonal_numbers.append(i)\n\n    return octagonal_numbers[n-1]"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # initialize a dictionary to store the counts of substrings\n    count_dict = defaultdict(int)\n    \n    # iterate over each character in the string\n    for i in range(len(s)):\n        # initialize the current substring as the current character\n        curr_substr = s[i]\n        # initialize the sum of digits as 0\n        curr_sum = 0\n        # iterate over the remaining characters in the substring\n        for j in range(i+1, len(s)+1):\n            # add the next character to the sum of digits\n            curr_sum += int(s[j])\n            # if the sum of digits is equal to the length of the substring, increment the count\n            if curr_sum == len(curr_substr):\n                count_dict[curr_substr] += 1\n    # return the count of substrings\n    return count_dict"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    s_len = len(s)\n    count = 0\n    for i in range(s_len):\n        for j in range(i+1, s_len+1):\n            substring = s[i:j]\n            digits = [int(digit) for digit in substring if digit.isdigit()]\n            if sum(digits) == len(digits):\n                count += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # creating a dictionary to store the count of substrings\n    d = defaultdict(int)\n    # loop through each character in the string\n    for i in range(len(s)):\n        # getting the substring from the string\n        substring = s[i:]\n        # getting the sum of digits in the substring\n        substring_sum = sum(map(int, substring))\n        # if the substring sum is equal to its length, increment the count in the dictionary\n        if substring_sum == len(substring):\n            d[substring] += 1\n    # returning the count of substrings with the sum of digits equal to their length\n    return sum(d.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    d = defaultdict(int)\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if s[j] == '0':\n                break\n            digit_sum = sum(int(c) for c in s[i:j+1])\n            d[digit_sum] += 1\n    return d"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    substrings = defaultdict(int)\n    for i in range(len(s)):\n        substring = s[i:i+len(s)]\n        count += 1\n        for digit in substring:\n            substrings[digit] += 1\n        if sum(substrings.values()) == len(s):\n            count -= 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    digit_count = defaultdict(int)\n    n = len(s)\n\n    for i in range(n):\n        digit_count[int(s[i])] += 1\n\n    ans = 0\n    for i in range(n):\n        for j in range(i, n):\n            if i == 0:\n                digit_sum = digit_count[int(s[j])]\n            else:\n                digit_sum = digit_count[int(s[j])] - digit_count[int(s[i-1])]\n            if digit_sum == j-i+1:\n                ans += 1\n\n    return ans"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    digits = defaultdict(int)\n    n = len(s)\n    for i in range(n):\n        digits[s[i]] += 1\n    \n    count = 0\n    for i in range(n):\n        for j in range(i, n):\n            substring = s[i:j+1]\n            digit_sum = sum(int(digit) for digit in substring)\n            if digit_sum == len(substring):\n                count += 1\n    \n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # create a dictionary to store the counts of substrings\n    count_dict = defaultdict(int)\n\n    # loop through each substring in the string\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            # extract the substring\n            substring = s[i:j]\n            # count the number of digits in the substring\n            count = sum(int(digit) for digit in substring)\n            # update the count in the dictionary\n            count_dict[count] += 1\n\n    # return the count of substrings with sum of digits equal to their length\n    return sum(count_dict.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    count = 0\n    dp = defaultdict(int)\n\n    for i in range(n):\n        dp[i] = s[i]\n\n    for length in range(1, n+1):\n        for i in range(n-length+1):\n            count += dp[i+length-1] - dp[i] * 10\n\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = defaultdict(int)\n    n = len(s)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            substring = s[i:j]\n            if len(set(substring)) == len(substring):\n                count[len(substring)] += 1\n    return count"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    This function finds the smallest number in a list xs.\n    '''\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    Write a python function to find smallest number in a list.\n    \"\"\"\n    # Initialize the smallest number to be the first element of the list\n    smallest = xs[0]\n    # Iterate through the list\n    for x in xs[1:]:\n        # If x is smaller than smallest, update smallest\n        if x < smallest:\n            smallest = x\n    # Return the smallest number\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    This function takes a list as input and returns the smallest number in the list.\n    '''\n    smallest = xs[0] # set the smallest variable to the first element in the list\n    for x in xs: # loop through the rest of the elements in the list\n        if x < smallest: # if the current element is smaller than the smallest element so far, set it as the new smallest\n            smallest = x\n    return smallest # return the smallest element"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    Write a python function to find the smallest number in a list.\n    \"\"\"\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if not xs:\n        return None\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    # Sort the list in ascending order based on the first element of each tuple\n    test_list.sort(key=lambda x: x[0])\n\n    # Initialize variables to keep track of the current maximum and minimum values\n    max_diff = 0\n    min_val = test_list[0][1]\n\n    # Loop through the list starting from the second element and check if the current difference is greater than the maximum\n    for i in range(1, len(test_list)):\n        diff = test_list[i][1] - test_list[i-1][1]\n        if diff > max_diff:\n            max_diff = diff\n\n    # Return the maximum difference found\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    pairs = [(a, b) for a in test_list for b in test_list if a < b]\n    max_diff = 0\n    for i in range(len(pairs)):\n        for j in range(i+1, len(pairs)):\n            diff = pairs[j][0] - pairs[i][0]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    n = len(test_list)\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = test_list[j][0] - test_list[i][0]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # initialize variables\n    max_diff = 0\n    curr_diff = 0\n    \n    # iterate through the list\n    for i in range(len(test_list)-1):\n        # calculate the difference between the current pair and the next pair\n        curr_diff = test_list[i+1][0] - test_list[i][0]\n        \n        # compare the difference with the maximum difference found so far\n        if curr_diff > max_diff:\n            max_diff = curr_diff\n            \n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Sort the given list in ascending order\n    sorted_list = sorted(test_list)\n\n    # Initialize the maximum difference variable\n    max_diff = 0\n\n    # Iterate through the sorted list\n    for i in range(len(sorted_list)):\n        # Calculate the difference between the current element and the next element\n        diff = sorted_list[i+1] - sorted_list[i]\n\n        # Update the maximum difference if the current difference is greater\n        if diff > max_diff:\n            max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # initialize maximum difference to None\n    max_diff = None\n\n    # loop through the list of tuples\n    for i in range(len(test_list)):\n        # loop through the remaining tuples\n        for j in range(i+1, len(test_list)):\n            # calculate the difference between the elements in the tuples\n            diff = abs(test_list[i][0] - test_list[j][0]) + abs(test_list[i][1] - test_list[j][1])\n\n            # update the maximum difference if necessary\n            if max_diff is None or diff > max_diff:\n                max_diff = diff\n\n    # return the maximum difference\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) < 2:\n        return \"Error: List must have at least 2 tuples.\"\n    elif len(test_list) == 2:\n        return 0\n    else:\n        pairs = []\n        for i in range(len(test_list)):\n            for j in range(i+1, len(test_list)):\n                pairs.append((test_list[i][0], test_list[j][0]))\n        pairs = sorted(pairs)\n        return pairs[len(pairs)-1][0] - pairs[0][0]"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    pairs = sorted(set(test_list)) # remove duplicates and sort the list\n    max_diff = 0\n    for i in range(len(pairs) - 1):\n        diff = pairs[i+1] - pairs[i]\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = max(abs(test_list[i][0] - test_list[j][0]), abs(test_list[i][1] - test_list[j][1]))\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list) - 1):\n        for j in range(i+1, len(test_list)):\n            diff = test_list[j][1] - test_list[i][1]\n            max_diff = max(max_diff, diff)\n    return max_diff"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_list = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_list"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sort the list in ascending order of second value of tuples\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sort the list of tuples using the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_list = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_list"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    Sort a list of tuples using the second value of each tuple.\n    \"\"\"\n    # Sort the list of tuples based on the second value (marks)\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    Write a function to sort a list of tuples using the second value of each tuple.\n    \"\"\"\n    # Sort the list of tuples based on the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    Write a function to sort a list of tuples using the second value of each tuple.\n    \"\"\"\n    # Create a list of tuples containing the subject name and marks\n    subject_marks_list = [(subject[0], subject[1]) for subject in subjectmarks]\n    # Sort the list of tuples using the second value of each tuple\n    subject_marks_list.sort(key=lambda x: x[1])\n    # Print the sorted list of tuples\n    print(subject_marks_list)"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sort the list of tuples based on the second value\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Base case: if the list is empty, return 0\n    if len(data_list) == 0:\n        return 0\n\n    # Recursive case: sum the first element and call the function on the rest of the list\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten(lst):\n        if isinstance(lst, list):\n            for item in lst:\n                flatten(item)\n        else:\n            yield lst\n    \n    return sum(flatten(data_list))"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # check if the list is empty\n    if not data_list:\n        return 0\n    # recursively call the function on the sub-list\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Base case: if the list is empty, return 0\n    if not data_list:\n        return 0\n    \n    # Recursive case: add the first element to the sum of the rest of the list\n    return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Base case: empty list\n    if not data_list:\n        return 0\n\n    # Recursive case: add first element and sum with rest of list\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Helper function to flatten a list\n    def flatten_list(lst):\n        flat_list = []\n        for item in lst:\n            if isinstance(item, list):\n                flat_list.extend(flatten_list(item))\n            else:\n                flat_list.append(item)\n        return flat_list\n\n    # Flatten the list\n    flattened_list = flatten_list(data_list)\n\n    # Sum all the elements in the flattened list\n    total = 0\n    for item in flattened_list:\n        total += item\n\n    return total"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    \n    def flatten_list(data_list, result):\n        '''\n        Recursive function to flatten a list and add its elements to the result.\n        '''\n        for item in data_list:\n            if isinstance(item, list):\n                flatten_list(item, result)\n            else:\n                result.append(item)\n        return result\n    \n    def sum_flattened_list(flattened_list):\n        '''\n        Recursive function to sum all the elements in a flattened list.\n        '''\n        if len(flattened_list) == 0:\n            return 0\n        else:\n            return flattened_list[0] + sum_flattened_list(flattened_list[1:])\n    \n    flattened_list = flatten_list(data_list, [])\n    return sum_flattened_list(flattened_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Base case: if the list is empty, return 0\n    if not data_list:\n        return 0\n\n    # Recursive case: add the first element of the list to the sum of the recursive call to the rest of the list\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Base case: if the list is empty, return 0\n    if not data_list:\n        return 0\n    # Recursive case: add the first element to the sum of the rest of the list\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as input and counts the number of positive numbers in it.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pos_count(lst):\n    \"\"\"\n    Count the number of positive numbers in a list.\n\n    Parameters:\n    lst (list): The list of numbers to be counted.\n\n    Returns:\n    int: The number of positive numbers in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as an argument and returns the number of positive numbers in the list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pos_count(list):\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function takes a list as an input and returns the number of positive numbers in it.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pos_count(lst):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pos_count(lst):\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n < 0:\n        return 0\n    if n == 0 or n == 1:\n        return 1\n    if n == 2:\n        return 2\n    \n    a = 1\n    b = 1\n    c = 2\n    count = 0\n    \n    for i in range(3, n+1):\n        count += a\n        a, b, c = b, c, a+b+c\n    \n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # initialize variables\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    dp[1] = 1\n\n    # calculate the remaining values of dp\n    for i in range(2, n + 1):\n        dp[i] = 0\n        for j in range(1, i):\n            if j + j <= i:\n                dp[i] += dp[j] * dp[i - j]\n\n    return dp[n]"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell_numbers = [1, 1]\n    for i in range(2, n+1):\n        bell_numbers.append(bell_numbers[-1] + bell_numbers[-2])\n    return bell_numbers[-1]"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n < 0:\n        return 0\n    elif n == 0:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return n * bell_number(n - 1)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_number(n):\n    if n == 0 or n == 1:\n        return 1\n    \n    bell_numbers = [1] * (n+1)\n    bell_numbers[0] = 1\n    bell_numbers[1] = 1\n    \n    for i in range(2, n+1):\n        for j in range(i, n+1):\n            bell_numbers[j] += bell_numbers[i-1] * bell_numbers[j-1]\n            \n    return bell_numbers[n]"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    \n    def partition(n):\n        if n <= 1:\n            return n\n        else:\n            return partition(n-1) + partition(n-2)\n    \n    return partition(n)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Initialize the number of ways to partition the set of Bell numbers as 1.\n    ways = 1\n\n    # Loop through all possible values of n.\n    for i in range(1, n+1):\n        # Calculate the number of ways to partition the set of Bell numbers with i bells.\n        ways *= 2*i\n\n    # Return the result.\n    return ways"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    def partition_helper(start, end, target):\n        if target == 0:\n            return 1\n        if target < 0:\n            return 0\n        if start > end:\n            return 0\n        if end == 0:\n            return 1\n        if end == 1:\n            return 1\n        return partition_helper(start+1, end-1, target)\n    \n    return partition_helper(0, n, n)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n\n    # initialize a list to store the number of ways to partition\n    num_ways = [0]*(n+1)\n    num_ways[0] = 1\n\n    # loop through all the numbers from 1 to n\n    for i in range(1, n+1):\n        # loop through all the numbers from 0 to i-1\n        for j in range(0, i):\n            # if the difference between i and j is 0, then we can partition the set of Bell numbers\n            if i-j == 0:\n                num_ways[i] += num_ways[j]\n\n    # return the total number of ways to partition the set of Bell numbers\n    return num_ways[n]"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) <= 1:\n        return True\n    elif A[0] >= A[1] and is_Monotonic(A[1:]):\n        return True\n    elif A[0] <= A[1] and is_Monotonic(A[1:]):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Monotonic(A):\n    \"\"\"\n    Write a python function to check whether the given array is monotonic or not.\n    \"\"\"\n    if len(A) < 2:\n        return True\n    if A[1] < A[0]:\n        for i in range(1, len(A)):\n            if A[i] <= A[i-1]:\n                return False\n        return True\n    else:\n        for i in range(1, len(A)):\n            if A[i] >= A[i-1]:\n                return False\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    if n == 1:\n        return True\n    elif n == 2:\n        return A[0] <= A[1]\n    else:\n        for i in range(1, n):\n            if A[i] <= A[i-1]:\n                return False\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Monotonic(A):\n    n = len(A)\n    for i in range(n-1):\n        if A[i] > A[i+1]:\n            return False\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Monotonic(A):\n    \"\"\"\n    Write a python function to check whether the given array is monotonic or not.\n    \"\"\"\n    n = len(A)\n    for i in range(n-1):\n        if A[i] > A[i+1]:\n            return False\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Monotonic(A):\n    if len(A) <= 1:\n        return True\n    elif A[0] < A[1]:\n        for i in range(1, len(A)-1):\n            if A[i] < A[i-1] or A[i] > A[i+1]:\n                return False\n    else:\n        for i in range(1, len(A)-1):\n            if A[i] > A[i-1] or A[i] < A[i+1]:\n                return False\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n\n    if n < 2:\n        return True\n\n    for i in range(1, n):\n        if A[i] < A[i-1]:\n            return False\n\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Monotonic(A): \n    # check if the array is empty or not\n    if len(A) == 0: \n        return True\n    \n    # check the first and last elements of the array\n    if A[0] <= A[-1]: \n        return True\n    \n    # check for the other elements of the array\n    for i in range(1, len(A)-1): \n        if A[i] < A[i-1]: \n            return False\n    \n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) == 1:\n        return True\n    \n    for i in range(1, len(A)):\n        if A[i] <= A[i-1]:\n            return False\n        if A[i] >= A[i-1]:\n            continue\n            \n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2: \n        return True\n    elif A[0] <= A[1]: \n        return is_Monotonic(A[1:])\n    else: \n        return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) < len(s):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n\n    Args:\n        l (list): The list to search in.\n        s (list): The sublist to search for.\n\n    Returns:\n        bool: True if s is a sublist of l, False otherwise.\n\n    Example:\n        >>> is_sublist([1, 2, 3], [1, 2])\n        True\n        >>> is_sublist([1, 2, 3], [2, 3])\n        True\n        >>> is_sublist([1, 2, 3], [2, 4])\n        False\n    \"\"\"\n    return l in s"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not isinstance(l, list) or not isinstance(s, list):\n        return False\n    if len(l) < len(s):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    This function checks whether a list contains the given sublist or not.\n    \"\"\"\n    for sublist in s:\n        if sublist in l:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    # Check if the length of the sublist is greater than the length of the list\n    if len(s) > len(l):\n        return False\n    # Traverse the list and check if the sublist exists in the list\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not s:\n        return True\n    if len(l) < len(s):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return all(sub in l for sub in s)"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not l:\n        return False\n    if l[0] == s[0]:\n        if s in l[1:]:\n            return True\n        return is_sublist(l[1:], s)\n    return is_sublist(l[1:], s)"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in Input:\n        if len(i)!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(set(len(x) for x in Input)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"\n    # initialize a variable to store the count of tuples with equal length\n    count = 0\n    \n    # iterate over the input list of tuples\n    for i in Input:\n        # check if all the elements in the tuple have the same length\n        if len(set([len(j) for j in i])) == 1:\n            # if all the elements have the same length, increment the count\n            count += 1\n            \n    # return the count of tuples with equal length\n    return count"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    \n    # Initialize a variable to keep track of the number of elements in the first tuple\n    num_elements = len(Input[0])\n    \n    # Loop through each tuple in the input list\n    for i in range(len(Input)):\n        # If the number of elements in a tuple is not equal to the initial value of `num_elements`, return False\n        if len(Input[i])!= num_elements:\n            return False\n    \n    # If we get here, all the tuples have the same number of elements, so return True\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    # Check if the input is a list of tuples\n    if type(Input)!= list or not all(isinstance(item, tuple) for item in Input):\n        return \"Please provide a list of tuples\"\n    # Initialize a variable to store the length of the first tuple\n    length = len(Input[0])\n    # Iterate over each tuple in the list\n    for i in range(1, len(Input)):\n        # Check if the length of the current tuple is equal to the length of the first tuple\n        if len(Input[i])!= length:\n            return False\n    # If the loop completes without returning False, return True\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"\n\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # initializing the count of equal tuples\n    count = 0\n\n    # iterating over the input list\n    for tup in Input:\n        # checking whether the length of the tuple is equal to all the other tuples in the list\n        if len(tup) == len(Input):\n            count += 1\n\n    # checking whether all the tuples have equal length\n    if count == len(Input):\n        return True\n    else:\n        return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # Check if the input is a list of tuples\n    if not all(isinstance(x, tuple) for x in Input):\n        return False\n    \n    # Check if all the tuples have equal length\n    for tup in Input:\n        if len(tup)!= len(set([x for x in tup])):\n            return False\n    \n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb sort algorithm.\n    '''\n\n    n = len(nums)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            if nums[i] < nums[i - gap]:\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n        gap //= 1\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb Sort algorithm.\n    '''\n    n = len(nums)\n    swapped = True\n    gap = n // 2\n\n    while swapped:\n        swapped = False\n        for i in range(gap, n):\n            if nums[i] < nums[i - gap]:\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n                swapped = True\n        gap //= 1\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb Sort algorithm.\n    '''\n    n = len(nums)\n    swapped = True\n    gap = n // 2\n\n    while swapped:\n        swapped = False\n        for i in range(gap, n):\n            if nums[i] < nums[i - gap]:\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n                swapped = True\n        gap = int(gap * 1.3)\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    n = len(nums)\n    swapped = True\n    gap = n\n\n    while gap > 1 or swapped:\n        swapped = False\n\n        # Move the gap to a half-size\n        gap = int(gap / 1.3)\n\n        # Compare every element with every element in the list\n        for i in range(0, n-gap):\n            # If the element at index i is greater than the element at index i+gap\n            if nums[i] > nums[i+gap]:\n                # Swap the elements\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    # Initialize variables\n    n = len(nums)\n    gap = n\n    swapped = True\n    start = 0\n\n    # While swapping is true, swap adjacent elements and increase gap\n    while swapped:\n        swapped = False\n        for i in range(start, n-gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n        gap = int(gap / 1.3)\n        start = gap\n        n = len(nums)\n\n    # Print the sorted array\n    print(nums)"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    swapped = True\n    step = 1\n    while swapped:\n        swapped = False\n        for i in range(step, n):\n            if nums[i] < nums[i-step]:\n                nums[i], nums[i-step] = nums[i-step], nums[i]\n                swapped = True\n        step += 1\n        if step == n:\n            step = 1"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the comb sort algorithm.\n    '''\n\n    # define the default gap value\n    gap = len(nums)\n\n    # iterate until the gap is constant\n    while gap > 1:\n        # calculate the new gap value\n        gap = (gap // 10) + 1\n        \n        # iterate through the list using the gap value\n        for i in range(len(nums) - gap):\n            # compare the elements at the current index and gap distance from it\n            if nums[i] > nums[i + gap]:\n                # swap the elements if they are in the wrong order\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n\n    # return the sorted list\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    while True:\n        swapped = False\n        for i in range(len(nums) - 1):\n            if nums[i] > nums[i + 1]:\n                nums[i], nums[i + 1] = nums[i + 1], nums[i]\n                swapped = True\n\n        if not swapped:\n            break"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements using the comb sort algorithm.\n    \"\"\"\n    n = len(nums)\n    swapped = True\n    gap = n\n    while swapped:\n        swapped = False\n        for i in range(gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n        gap = int(gap/1.3)\n        if gap < 1:\n            gap = 1"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements.\n    \"\"\"\n    swapped = True\n    n = len(nums)\n    gap = n\n    while gap > 1 or swapped:\n        swapped = False\n        for i in range(n-gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n        gap = int(gap/1.3)\n        if gap == 0:\n            gap = 1\n    return nums"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dif_Square(n):\n    # Get the square of the given number\n    square = n * n\n    \n    # Get the square root of the square\n    root = square ** 0.5\n    \n    # Check if the square root is an integer\n    if root.is_integer():\n        # If it is, return True because we can represent the difference of two squares as the square of the root of the square\n        return True\n    else:\n        # If it's not, return False because we cannot represent the difference of two squares as the square of the root of the square\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # find the square root of n\n    sqrt_n = int(n ** 0.5)\n    # check if the square of sqrt_n is equal to n\n    if sqrt_n ** 2 == n:\n        return True\n    # check if the square of sqrt_n is greater than n\n    elif sqrt_n ** 2 > n:\n        # find the difference between sqrt_n and n\n        diff = n - sqrt_n ** 2\n        # check if the difference is also a square\n        if diff ** 2 == n - sqrt_n ** 2:\n            return True\n    # if none of the above conditions are met, return False\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    square = n ** 0.5\n    diff = 0\n    while diff ** 2 <= n:\n        if square * square == n:\n            return True\n        elif square * square < n:\n            diff += 1\n        else:\n            diff -= 1\n        square = (diff + square) / 2\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    def is_square(num):\n        return num == int(num**0.5)**2\n    \n    def square_of_sum(num):\n        return (num + 1)**2\n    \n    if is_square(n):\n        return True\n    elif square_of_sum(n) == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # We will use a nested loop to check whether the given number can be represented as the difference of two squares or not.\n    for i in range(1, n//2+1):\n        for j in range(1, n//2+1):\n            if i**2+j**2 == n:\n                return True\n            elif i**2+j**2 < n:\n                continue\n            else:\n                return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n <= 0: \n        return \"Invalid Input\"\n\n    # Loop through all possible squares of n\n    for i in range(n,0,-1): \n        j = int(i**0.5) # Finding the square root of i\n        if i == j**2: # If i is a square, check if it can be represented as the difference of two squares\n            for k in range(j,n-1,-1): \n                if k**2 == n-k**2: \n                    return str(i-j)+\",\"+str(j-k) # Return the difference of the two squares as a string separated by commas\n            return \"No Difference Found\" # If no difference found, return message\n\n    return \"Invalid Input\""
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # check if the number is less than 10\n    if n < 10:\n        return False\n    \n    # initialize variables for the sum of squares\n    sum1 = 0\n    sum2 = 0\n    \n    # find the square of the number\n    num_squared = n ** 2\n    \n    # loop through all possible values of a and b from 1 to sqrt(n)\n    for a in range(1, int(n ** 0.5) + 1):\n        # calculate the value of b\n        b = int(n - (a ** 2))\n        \n        # check if the value of b is a perfect square\n        if b * b == n:\n            # add the square of a to the sum of squares for the first term of the equation\n            sum1 += a ** 2\n            \n            # add the square of b to the sum of squares for the second term of the equation\n            sum2 += b ** 2\n            \n            # check if the sum of squares is equal to the squared value of the number\n            if sum1 == num_squared:\n                return True\n            elif sum2 == num_squared:\n                return True\n    \n    # if the loop completes without returning True, the number cannot be represented as the difference of two squares\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    sqrt_n = n ** 0.5\n    for i in range(2, int(sqrt_n)):\n        if (n - i) ** 2 == n ** 2 or (n + i) ** 2 == n ** 2:\n            return True\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n\n    # check if the number is odd or even\n    if n % 2 == 0:\n        # if the number is even, then it can be represented as the difference of two squares\n        for i in range(1, int(n/2)+1):\n            if (i*i)**2 + (n-i*i)**2 == n:\n                return True\n        return False\n    else:\n        # if the number is odd, then it cannot be represented as the difference of two squares\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n\n    # Convert the given number to string and check if it is a palindrome or not.\n    num = str(n)\n    if num == num[::-1]:\n        return False\n\n    # Find the square of the given number.\n    square = n ** 2\n\n    # Calculate the difference between the square and the square of the palindrome.\n    diff = square - int(square ** 0.5) ** 2\n\n    # Check if the difference is a palindrome or not.\n    if str(diff) == str(diff)[::-1]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):\n    # Create a dictionary to store the number of occurrences of each color\n    color_count = {}\n    for color in colors:\n        if color in color_count:\n            color_count[color] += 1\n        else:\n            color_count[color] = 1\n    \n    # Check if the number of occurrences of each color matches the pattern\n    for pattern in patterns:\n        if not all(color_count[color] == pattern[i] for i, color in enumerate(pattern)):\n            return False\n    \n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n\n    if len(colors)!= len(patterns):\n        return False\n\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # Create a set of all the patterns in the patterns array\n    pattern_set = set(patterns)\n    # Sort the colors list in increasing order\n    colors.sort()\n    # Check if the colors list and the pattern set are of the same length\n    if len(colors)!= len(pattern_set):\n        return False\n    # Check if the colors list and the pattern set are the same\n    for color, pattern in zip(colors, pattern_set):\n        if color!= pattern:\n            return False\n    # If all the conditions are met, the function returns True\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n\n    if len(colors)!= len(patterns):\n        return False\n\n    for i in range(len(colors)):\n        if colors[i] not in patterns[i]:\n            return False\n\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # Initialize a list to keep track of the current pattern\n    current_pattern = []\n    # Loop through each color in the list\n    for color in colors:\n        # Check if the current color matches the current pattern in the patterns list\n        if color in current_pattern:\n            # If it does, add it to the current pattern and continue looping through the list\n            current_pattern.append(color)\n            continue\n        # If the current color does not match the current pattern, check if the current pattern is in the patterns list\n        for pattern in patterns:\n            # If the current pattern is in the patterns list, it follows the sequence given by the patterns list\n            if pattern == current_pattern:\n                return True\n        # If the current pattern is not in the patterns list, reset the current pattern and continue looping through the list\n        current_pattern = [color]\n    # If the loop completes without finding a match, return False\n    return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Write a function to check whether it follows the sequence given in the patterns array.\n    \"\"\"\n    for i in range(len(colors)):\n        if patterns[i] == colors[i]:\n            continue\n        else:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Write a function to check whether it follows the sequence given in the patterns array.\n    \"\"\"\n    # create a dictionary to store the color-pattern pairs\n    color_patterns = {}\n\n    # iterate through the colors array and store the color-pattern pair in the dictionary\n    for i in range(len(colors)):\n        color_patterns[colors[i]] = patterns[i]\n\n    # iterate through the patterns array and compare each color-pattern pair with the dictionary\n    for i in range(len(patterns)):\n        if patterns[i] not in color_patterns or color_patterns[patterns[i]]!= colors[i]:\n            return False\n\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    n = len(colors)\n    color_dict = {}\n    pattern_index = 0\n\n    for color in colors:\n        if color not in color_dict:\n            color_dict[color] = []\n        color_dict[color].append(pattern_index)\n        pattern_index += 1\n\n    pattern_count = {}\n    for pattern in patterns:\n        if pattern not in pattern_count:\n            pattern_count[pattern] = 0\n        pattern_count[pattern] += 1\n\n    for key in color_dict:\n        if pattern_count[key] > color_dict[key][-1]:\n            return False\n\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):\n    # Sort the colors and patterns arrays in ascending order\n    colors.sort()\n    patterns.sort()\n\n    # Initialize variables for tracking the current pattern and the count of matches\n    current_pattern = 0\n    matches = 0\n\n    # Loop through the colors array\n    for color in colors:\n        # Check if the current color matches the current pattern\n        if color == patterns[current_pattern]:\n            # If it does, increment the count of matches and move on to the next pattern\n            matches += 1\n            current_pattern += 1\n        # If the current color doesn't match the current pattern, reset the current pattern and try again\n        else:\n            current_pattern = 0\n\n    # Return True if all patterns have been matched, and False otherwise\n    return matches == len(patterns)"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # check if the length of colors and patterns are equal\n    if len(colors)!= len(patterns):\n        return False\n\n    # iterate over the colors and patterns\n    for i in range(len(colors)):\n        # if the colors match the pattern, increment the count\n        if colors[i] == patterns[i]:\n            continue\n        # if the colors do not match the pattern, return False\n        else:\n            return False\n    # if we have iterated through the entire list without finding a mismatch, return True\n    return True"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if all(x % K == 0 for x in test_list[i]) and all(x % K == 0 for x in test_list[j]):\n                result.append((test_list[i], test_list[j]))\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(i % K == 0 for i in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    divisible_tuples = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if all(x % K == 0 for x in test_list[i]) and all(x % K == 0 for x in test_list[j]):\n                divisible_tuples.append(test_list[i] + test_list[j])\n    return divisible_tuples"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    tuples_list = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if all(x % K == 0 for x in test_list[i]) and all(x % K == 0 for x in test_list[j]):\n                tuples_list.append((test_list[i], test_list[j]))\n    return tuples_list"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if all(x % K == 0 for x in test_list[i]) and all(x % K == 0 for x in test_list[j]):\n                count += 1\n    return count"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    tuples = []\n    for tuple_ in test_list:\n        all_divisible = True\n        for elem in tuple_:\n            if elem % K!= 0:\n                all_divisible = False\n                break\n        if all_divisible:\n            tuples.append(tuple_)\n    return tuples"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    filtered_list = []\n    for tup in test_list:\n        if all(i % K == 0 for i in tup):\n            filtered_list.append(tup)\n    return filtered_list"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    This function takes a list of tuples and an integer K as input, and returns a list of tuples that have all\n    elements divisible by K from the input list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(num % K == 0 for num in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    # create an empty list to store the tuples that meet the criteria\n    result_list = []\n\n    # iterate through each tuple in the list\n    for i in range(len(test_list)):\n        # iterate through each element in the tuple\n        for j in range(len(test_list[i])):\n            # if the element is divisible by K, add the tuple to the result list\n            if test_list[i][j] % K == 0:\n                result_list.append(test_list[i])\n\n    # return the result list\n    return result_list"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Diff(n):\n    \"\"\"\n    Write a python function to find whether a number is divisible by 11.\n    \"\"\"\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n\n    # check if n is divisible by 11\n    if n%11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    # If the number is divisible by 11, return True\n    if n % 11 == 0:\n        return True\n    # If the number is not divisible by 11, return False\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Diff(n):\n    \"\"\"\n    Write a python function to find whether a number is divisible by 11.\n    \"\"\"\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True \n    else: \n        return False \n"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def word_len(s):\n    '''\n    This function takes a string `s` as input and checks whether the length of the word is odd or not.\n    If the length of the word is odd, the function returns `True`. Otherwise, it returns `False`.\n    '''\n    # convert the input string to a list of characters\n    chars = list(s)\n    \n    # check if the first character is a letter\n    if not chars[0].isalpha():\n        return False\n    \n    # iterate over the rest of the characters\n    for c in chars[1:]:\n        if c.isalpha():\n            return True\n        else:\n            return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def word_len(s):\n    for word in s.split():\n        if len(word) % 2 == 0:\n            print(word, \"is even length.\")\n        else:\n            print(word, \"is odd length.\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def word_len(s):\n    \"\"\"\n    Write a python function to check whether the length of the word is odd or not.\n    \"\"\"\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 1:\n            print(word, \"has odd length\")\n        else:\n            print(word, \"has even length\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    s = s.strip() # remove any leading or trailing whitespace\n    word = s.split() # split the string into words\n    if len(word) == 1: # if the length of the string is 1, it's an odd length word\n        return True\n    else: # if the length of the string is greater than 1, it's an even length word\n        return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def word_len(s): \n    \"\"\"\n    Write a python function to check whether the length of the word is odd or not.\n    \"\"\"\n    s = s.split()\n    word_list = []\n    for word in s:\n        word_list.append(len(word))\n    even_len = 0\n    for word in word_list:\n        if word % 2 == 0:\n            even_len += 1\n    if even_len == len(word_list):\n        print(\"The length of the word is even\")\n    else:\n        print(\"The length of the word is odd\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def word_len(s):\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 1:\n            return word\n    return None"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def word_len(s): \n    \"\"\"\n    Write a python function to check whether the length of the word is odd or not.\n    \"\"\"\n    words = s.split() # split the string into a list of words\n    for word in words:\n        if len(word) % 2!= 0: # check if the length of the word is odd or not\n            print(word, \"is an odd-length word\")\n        else:\n            print(word, \"is a even-length word\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split() # splitting the string into words\n    for word in words: # iterating over each word in the list\n        if len(word) % 2 == 0: # checking if length of the word is even or not\n            print(word + \" is an even length word.\")\n        else:\n            print(word + \" is an odd length word.\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()  # split the string by whitespace\n    for word in words:\n        if len(word) % 2 == 1:\n            return word  # return the word if it's odd length\n        else:\n            continue  # skip the word if its length is even"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def word_len(s):\n    word = s.split()\n    for i in word:\n        if len(i) % 2 == 0:\n            print(\"Even\")\n        else:\n            print(\"Odd\")"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return 1 + n * ((n * (3 * n - 1) // 2) // 3)\n"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Initialize variables to hold the base, length and height of the pyramid\n    base = 1\n    length = 1\n    height = 1\n    \n    # Loop through the first n - 1 rows of the pyramid\n    for i in range(n - 1):\n        # Add the base to the height of the next row\n        height += base\n        \n        # Update the base to be the current height\n        base = height\n        \n        # Update the length to be the current base minus one\n        length = base - 1\n        \n        # Add the length to the height of the next row\n        height += length\n    \n    # Return the final height of the pyramid\n    return height"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return (4 * (n * (n + 1)) ** 2) // 3"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    def nth_tetrahedron(n):\n        \"\"\"\n        Recursive function to generate the nth tetrahedron.\n        \"\"\"\n        if n == 0:\n            return []\n        elif n == 1:\n            return [(0, 0, 0), (0, 0, 1), (0, 1, 0), (0, 1, 1)]\n        else:\n            tetrahedron = nth_tetrahedron(n-1)\n            new_tetrahedron = []\n            for face in tetrahedron:\n                for edge in [(0, 1), (0, 2), (0, 3), (1, 2), (1, 3), (2, 3)]:\n                    new_vertex = (face[0]+edge[0], face[1]+edge[1], face[2])\n                    if all(v >= 0 and v < n for v in new_vertex):\n                        new_tetrahedron.append(new_vertex)\n            return new_tetrahedron\n\n    return nth_tetrahedron(n)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    t = 1\n    for i in range(1, n + 1):\n        t = (t * 4) // (i + 2)\n    return t\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The\", n, \"th tetrahedral number is:\", tetrahedral_number(n))"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n < 1:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 5\n    else:\n        return 5 * (tetrahedral_number(n - 1) + tetrahedral_number(n - 2)) + n"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 6\n    elif n == 2:\n        return 24\n    elif n == 3:\n        return 120\n    else:\n        return tetrahedral_number(n-1) + 6 * tetrahedral_number(n-2) + 24 * tetrahedral_number(n-3) + 120 * tetrahedral_number(n-4)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n\n    # Initialize variables\n    count = 0\n    prev_count = 1\n\n    # Loop through numbers\n    for i in range(n):\n        count += i*i*i\n\n    # Return result\n    return count"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        for i in range(2, n):\n            tetra_sum = 0\n            for j in range(1, i+1):\n                tetra_sum += (i-j+1)\n            tetra_sum = tetra_sum * (i-1) * (i-2) * (i-3) // 6\n            if tetra_sum % 4 == 0:\n                return tetra_sum\n        return -1"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return (n * (n + 1) * (2 * n + 1)) // 6"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3)*math.pi*r**3\n    return volume\n"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * (r ** 3)"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3) * math.pi * (r ** 3)\n    return V"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    vol = (4/3)*math.pi*(r**3)\n    return vol"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * (r**3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3)*math.pi*r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * (r**3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    This function takes a radius r as input and calculates the volume of a sphere using the formula V = 4/3 * pi * r^3.\n    '''\n    V = (4/3) * math.pi * r**3\n    return V"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = math.pi\n    volume = (4/3) * pi * r ** 3\n    return volume\n"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    total = 0\n    for i in range(len(strr)):\n        total += ord(strr[i])\n    return chr(((total % 26) + 65))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Char(strr):\n    # Function to find the character made by adding the ASCII value of all the characters of the given string modulo 26\n    # Convert the string to lowercase to make it case-insensitive\n    strr = strr.lower()\n    # Initialize the sum of ASCII values of characters to zero\n    char_sum = 0\n    # Loop through each character in the string\n    for char in strr:\n        # Add the ASCII value of the character to the sum modulo 26\n        char_sum = (ord(char) - ord('a') + char_sum) % 26\n    # Convert the sum to a character and return it\n    return chr(char_sum + ord('a'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # convert the string to a list of characters\n    chars = list(strr)\n\n    # initialize the character variable to an empty string\n    char = \"\"\n\n    # iterate over all the characters in the list\n    for i in range(len(chars)):\n        # add the ASCII value of the current character modulo 26 to the character variable\n        char += chr((ord(chars[i]) + 26) % 26)\n\n    return char"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # Initialize the character as an empty string\n    char = \"\"\n\n    # Loop through each character in the string\n    for i in strr:\n        # Convert the character to its ASCII value\n        ascii_val = ord(i)\n\n        # Add the ASCII value to the character\n        char = (char + chr(ascii_val % 26)) % 26\n\n    # Return the final character\n    return char"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Char(strr):\n    # Function to get the character by adding the ASCII value of all the characters of the given string modulo 26\n    # ASCII value of A is 65, and ASCII value of Z is 90\n    # The result is then converted back to character using chr()\n    result = 0\n    for char in strr:\n        result += ord(char)\n    return chr(result % 26 + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char_val = 0  \n    for char in strr:  \n        char_val += ord(char)  \n    char_val %= 26  \n    char = chr(char_val + ord('a'))  \n    return char  "
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Char(strr):\n    char_sum = 0\n    for char in strr:\n        char_sum += ord(char)\n    return chr((char_sum % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # Convert the string to a list of characters\n    str_list = list(strr)\n\n    # Initialize the character variable with the first character of the string\n    char = str_list[0]\n\n    # Iterate over the remaining characters of the string and add their ASCII value modulo 26 to the character variable\n    for char_i in str_list[1:]:\n        char_i = ord(char_i)  # Convert the character to an integer\n        char_i += 1  # Increment the integer by 1 to get the corresponding character\n        if char_i > 90:  # If the character is greater than 'Z', subtract 7 to get the corresponding lowercase letter\n            char_i -= 7\n        char += chr(char_i)\n\n    return char  # Return the final character"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_value = 0\n    for char in strr:\n        ascii_value += ord(char)\n    char_value = (ascii_value % 26) + ord('A')\n    return chr(char_value)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # Initialize an empty string to store the result\n    char_sum = \"\"\n    \n    # Loop through each character of the given string\n    for char in strr:\n        # Convert each character to its ASCII value\n        ascii_val = ord(char)\n        # Add the ASCII value to the char_sum variable\n        char_sum += str(ascii_val)\n        \n    # Convert the char_sum variable to an integer and calculate the character made by adding all the ASCII values modulo 26\n    char_sum = int(char_sum)\n    char = chr(((char_sum % 26) + 97) % 26 + 65)\n    # Return the character made by adding all the ASCII values modulo 26\n    return char"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequence(n):\n    sequence = [0, 1]  # initialize the sequence with the first two terms\n    for i in range(2, n + 1):\n        sequence.append(sequence[i-1] + sequence[i-2])  # add the sum of the previous two terms to the sequence\n    return sequence[n]  # return the nth term of the sequence"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequence(n): \n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [1]\n    for i in range(1, n+1):\n        next_num = sequence[-1]\n        if i % 2 == 0:\n            next_num += 2\n        else:\n            next_num += 1\n        sequence.append(next_num)\n    return sequence[-1]\n\nn = int(input(\"Enter the value of n: \"))\nresult = sequence(n)\nprint(f\"The {n}th number in the Newman conway sequence is: {result}\")"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [2]\n    for i in range(n-1):\n        new_sequence = []\n        for j in sequence:\n            if j % 2 == 0:\n                new_sequence.append(j + 2)\n            else:\n                new_sequence.append(j + 1)\n        sequence = new_sequence\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequence(n): \n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [1, 1]\n    for i in range(2, n):\n        sequence.append(sequence[-1] + sequence[-2])\n    return sequence[n - 1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    i = 1\n    seq = []\n    while i <= n:\n        if i % 2 == 0:\n            seq.append(i)\n        i += 1\n    return seq"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the Newman Conway sequence.\n    \"\"\"\n    sequence = [1, 1, 2, 3, 3, 3, 4, 5, 6, 7, 9, 10, 10, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]\n    if n == 1:\n        return 1\n    elif n <= 100:\n        return sequence[n-1]\n    else:\n        return \"Invalid input. Please enter a number between 1 and 100.\""
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [0, 1]\n    for i in range(2, n + 1):\n        sequence.append(sequence[i - 1] + sequence[i - 2])\n    return sequence[n]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequence(n):\n    sequence = [0, 1]  # initialize the sequence with the first two terms\n    for i in range(2, n):\n        sequence.append(sequence[i-1] + sequence[i-2])\n    return sequence[-1]  # return the last term of the sequence as the nth number"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [2, 2, 1, 1, 2]\n    return sequence[n-1]"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = (4/3)*math.pi*r**3\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # Compute the surface area of the sphere using the formula\n    # surface area = (4/3) * pi * r^3\n    surface_area = (4/3) * math.pi * r ** 3\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = 4 * math.pi * r**2 # formula for surface area of a sphere\n    return area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    \"\"\"\n    This function takes a radius r and returns the surface area of a sphere.\n    \"\"\"\n    return (4/3) * math.pi * r**3"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    \"\"\"\n    Write a function to find the surface area of a sphere.\n    \"\"\"\n    # calculate the surface area of the sphere using Heron's formula\n    surface_area = (4/3)*math.pi*r**2\n    \n    # return the surface area\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # Formula for surface area of a sphere\n    surface_area = (4/3) * math.pi * r ** 3\n    \n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = (4 * math.pi * r ** 2)\n    return surface_area\n"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pi = math.pi\n    return (4/3)*pi*r**3"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    centered_hexagonal_numbers = []\n    num = 0\n    \n    for i in range(1, n+1):\n        centered_hexagonal_numbers.append(num)\n        num += i\n        \n    return centered_hexagonal_numbers"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find the nth centered hexagonal number.\n    '''\n    if n <= 0:\n        return \"Invalid input. Please enter a positive integer.\"\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 12\n    else:\n        return centered_hexagonal_number(n-1) + centered_hexagonal_number(n-2)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    def centered_hexagonal_number(n):\n        if n == 1:\n            return 1\n        elif n == 2:\n            return 12\n        elif n == 3:\n            return 50\n        elif n == 4:\n            return 208\n        elif n == 5:\n            return 1256\n        else:\n            return centered_hexagonal_number(n-1) + centered_hexagonal_number(n-2)\n\n    return centered_hexagonal_number(n)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find the nth centered hexagonal number.\n    '''\n    # Convert n to binary and find the number of zeros in the binary representation of n\n    zeros = 0\n    while n:\n        zeros += n & 1\n        n >>= 1\n    # Add 1 to n to get the centered hexagonal number\n    hexagonal = n + 1\n    # Add the number of zeros to the centered hexagonal number to get the actual centered hexagonal number\n    for i in range(zeros):\n        hexagonal *= 2\n    return hexagonal"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    hex_nums = [1]\n    for i in range(n):\n        num = hex_nums[-1] + hex_nums[-2] + 2 * (3 * hex_nums[-1] - 1)\n        hex_nums.append(num)\n    return hex_nums[n-1]"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    # Centered hexagonal numbers are those that are 1 + 2^(n-1)\n    # where n is an integer.\n    if n <= 0:\n        return None\n    centered_hexagonal_number = 1 + 2**(n-1)\n    return centered_hexagonal_number"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    hexagon = [1, 6, 21, 76, 281, 846, 3641]\n    return hexagon[n-1]"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return ((10*n**2-10*n+1)*2)**(1/6)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n\n    # Initialize a counter variable\n    count = 1\n\n    # Loop through all centered hexagonal numbers\n    while count <= n:\n        # Print the centered hexagonal number\n        print(count)\n\n        # Increment the counter variable\n        count += 2 * count"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    def centered_hexagonal(k):\n        return (5 * k * (3 * k - 1)) // 2\n\n    return centered_hexagonal(n)"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    for key in dict1:\n        merged_dict[key] = dict1[key]\n    for key in dict2:\n        merged_dict[key] = dict2[key]\n    for key in dict3:\n        merged_dict[key] = dict3[key]\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # Merge the first two dictionaries\n    merged_dict = dict1.copy()\n    for key, value in dict2.items():\n        merged_dict[key] = value\n    \n    # Merge the third dictionary into the merged dictionary\n    for key, value in dict3.items():\n        if key not in merged_dict:\n            merged_dict[key] = value\n        else:\n            if isinstance(merged_dict[key], list):\n                merged_dict[key].append(value)\n            else:\n                merged_dict[key] = [merged_dict[key], value]\n    \n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # Create an empty dictionary to store the merged values\n    merged_dict = {}\n    \n    # Iterate through the keys of each dictionary\n    for key in dict1.keys():\n        # Check if the key exists in the second dictionary\n        if key in dict2.keys():\n            # Add the values of the two dictionaries together\n            merged_dict[key] = dict1[key] + dict2[key]\n        else:\n            # Add the value of the first dictionary to the merged dictionary\n            merged_dict[key] = dict1[key]\n    \n    # Iterate through the keys of the second dictionary\n    for key in dict2.keys():\n        # Check if the key exists in the first dictionary\n        if key not in dict1.keys():\n            # Add the value of the second dictionary to the merged dictionary\n            merged_dict[key] = dict2[key]\n    \n    # Iterate through the keys of the third dictionary\n    for key in dict3.keys():\n        # Add the value of the third dictionary to the merged dictionary\n        merged_dict[key] = dict3[key]\n    \n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single dictionary.\n    \"\"\"\n    # Combine the three dictionaries using the update() method\n    combined_dict = dict1.copy()\n    combined_dict.update(dict2)\n    combined_dict.update(dict3)\n    return combined_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merge three dictionaries into a single dictionary.\n    \"\"\"\n    result = {}\n    result.update(dict1)\n    result.update(dict2)\n    result.update(dict3)\n    return result"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = ct.defaultdict(dict)\n    \n    # iterate through all keys in the three dictionaries\n    for key in dict1:\n        merged_dict[key] = dict1[key]\n    for key in dict2:\n        merged_dict[key] = dict2[key]\n    for key in dict3:\n        merged_dict[key] = dict3[key]\n    \n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # Combine the three dictionaries into a single dictionary\n    merged_dict = {**dict1, **dict2, **dict3}\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    return dict(merged_dict)"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = dict1.copy()\n    for key, value in dict2.items():\n        if key not in merged_dict:\n            merged_dict[key] = value\n    for key, value in dict3.items():\n        if key not in merged_dict:\n            merged_dict[key] = value\n    return merged_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # create an empty dictionary\n    freq_dict = collections.defaultdict(int)\n    \n    # loop through the list\n    for item in list1:\n        # update the frequency count for the item in the dictionary\n        freq_dict[item] += 1\n    \n    # return the dictionary of frequency counts\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # Create an empty dictionary to store the frequency count\n    freq = {}\n    \n    # Loop through each element in the list\n    for elem in list1:\n        # If the element is already in the dictionary, increment its frequency count\n        if elem in freq:\n            freq[elem] += 1\n        # If the element is not in the dictionary, add it with a frequency count of 1\n        else:\n            freq[elem] = 1\n    \n    # Return the frequency dictionary\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.defaultdict(int)\n    for element in list1:\n        freq_dict[element] += 1\n    return dict(freq_dict)"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(lst)\n    return dict(freq_dict)\n"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def freq_count(list1):\n    # create an empty dictionary to store the frequency count\n    freq = collections.defaultdict(int)\n    # iterate over the elements in the list and increment the frequency count for each element\n    for element in list1:\n        freq[element] += 1\n    # return the dictionary of frequency count\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # create an empty dictionary to store the frequency of each element\n    freq = {}\n    # use a for loop to iterate over each element in the list\n    for element in list1:\n        # if the element is already in the dictionary, increment its count by 1\n        if element in freq:\n            freq[element] += 1\n        # if the element is not in the dictionary, add it with a count of 1\n        else:\n            freq[element] = 1\n    # return the dictionary containing the frequency of each element in the list\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    min_num = N\n    for i in range(2, N+1):\n        if i > min_num:\n            min_num = i\n    return min_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n    # Find the smallest number greater than N\n    prev_N = N - 1\n    while True:\n        if prev_N > 0:\n            break\n        prev_N = (prev_N + N) // 2\n\n    # Find the largest number smaller than N\n    next_N = N + 1\n    while True:\n        if next_N < 10**9:\n            break\n        next_N = (N + next_N) // 2\n\n    # Find the smallest distance between prev_N and next_N\n    smallest_distance = abs(prev_N - N)\n\n    # Find the closest number to N\n    closest_num = min(prev_N, next_N)\n\n    return closest_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    n_count = 0\n    min_diff = abs(N - 1)\n    for i in range(1, N):\n        if abs(N - i) < min_diff:\n            min_diff = abs(N - i)\n            n_count = 0\n        elif abs(N - i) == min_diff:\n            n_count += 1\n        if n_count == 2:\n            break\n    return N - i"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    min_diff = float('inf')\n    closest = None\n\n    for i in range(1, N+1):\n        diff = abs(i - N)\n        if diff < min_diff:\n            min_diff = diff\n            closest = i\n\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    n = int(input(\"Enter a number: \"))\n    smaller_num = n\n    closest_num = n\n    while True:\n        if n < smaller_num:\n            smaller_num = n\n        else:\n            closest_num = n\n        n = int(input(\"Enter another number: \"))\n        if n == smaller_num:\n            break\n    print(\"The closest smaller number is:\", closest_num)"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smallest_num = N - 1\n    largest_num = N + 1\n\n    closest_num = smallest_num\n    smallest_diff = abs(N - smallest_num)\n\n    for i in range(2, int(largest_num**0.5)+1):\n        if smallest_diff > abs(N - smallest_num - i):\n            smallest_diff = abs(N - smallest_num - i)\n            closest_num = smallest_num + i\n\n    return closest_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def closest_num(N):\n    # Initialize a list of numbers from 1 to N\n    nums = list(range(1, N+1))\n    \n    # Sort the list in ascending order\n    nums.sort()\n    \n    # Calculate the difference between the N and the closest smaller number\n    closest = abs(N - nums[0])\n    \n    # Calculate the difference between the N and the second closest smaller number\n    second_closest = abs(N - nums[1])\n    \n    # Return the smaller of the two differences\n    return min(closest, second_closest)"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n    small = N - 1\n    while True:\n        next_num = small + 1\n        if next_num >= N:\n            break\n        if next_num - N < N - small:\n            small = next_num\n        else:\n            break\n    return small"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # Initialize a variable to store the closest smaller number to n\n    closest = N\n    \n    # Loop through all the numbers from 1 to N-1\n    for num in range(1, N):\n        # Calculate the absolute difference between the current number and N\n        diff = abs(num - N)\n        \n        # If the absolute difference is smaller than the current closest number\n        if diff < abs(closest - N):\n            # Set closest to the current number\n            closest = num\n    \n    # Return the closest smaller number to n\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smallest_num = N\n    for num in range(N, -1, -1):\n        if num < smallest_num:\n            smallest_num = num\n    return smallest_num"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word in a list of strings.\n    '''\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    words = []\n    for line in list1:\n        words.extend(line.split())\n    max_len = 0\n    for word in words:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    # initialize a variable to store the length of the longest word\n    max_len = 0\n    # loop through each element in the list\n    for word in list1:\n        # if the length of the word is greater than the current max_len, update max_len\n        if len(word) > max_len:\n            max_len = len(word)\n    # return the maximum length of the word\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word in a list.\n    '''\n    # initialize variables to store the length of the longest word and the word itself\n    longest_len = 0\n    longest_word = ''\n    # loop through the list of words\n    for word in list1:\n        # check if the length of the current word is longer than the previous longest word\n        if len(word) > longest_len:\n            longest_len = len(word)\n            longest_word = word\n    # return the length of the longest word\n    return longest_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = ''\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word in a list.\n    '''\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    # Create an empty list to store the lengths of each word\n    lengths = []\n\n    # Loop through the list of words\n    for word in list1:\n        # Convert each word to lowercase and split it into a list of characters\n        characters = word.lower().split()\n\n        # Check if the list of characters is not empty\n        if characters:\n            # Find the length of the longest character in the list\n            length = max(len(char) for char in characters)\n            # Add the length of the longest character to the list of lengths\n            lengths.append(length)\n\n    # Return the maximum length of any word in the list\n    return max(lengths)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word in a given list.\n    '''\n    longest_word = ''\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_substring(str_list, sub_str):\n    '''\n    This function takes a list of string values and a substring as input, and returns a boolean value indicating whether\n    the substring appears in the list of strings.\n    '''\n    for string in str_list:\n        if sub_str in string:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for string in str1:\n        if sub_str in string:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_substring(str_list, sub_str):\n    \"\"\"\n    Check if a string is present as a substring in a given list of string values.\n    Returns True if the string is present, False otherwise.\n    \"\"\"\n    for s in str_list:\n        if sub_str in s:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n    \"\"\"\n    # Initialize a boolean variable to indicate if the substring is present in the list of strings\n    is_present = False\n    \n    # Loop through each string value in the list\n    for string in str1:\n        # Check if the substring is present in the current string value\n        if sub_str in string:\n            # Set the boolean variable to True if the substring is present\n            is_present = True\n            # Break out of the loop\n            break\n            \n    # Return the boolean variable indicating if the substring is present\n    return is_present"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return any(sub_str in s for s in str1)"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # Initialize a variable to keep track of whether the substring is present in the list\n    is_present = False\n    \n    # Loop through each string in the list\n    for string in str1:\n        # Check if the substring is present in the string\n        if string in sub_str:\n            # If it is, set the variable to True and break out of the loop\n            is_present = True\n            break\n    \n    return is_present"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for item in str1:\n        if item in sub_str:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n\n    # Loop through the list of string values\n    for val in str1:\n        # Check if the substring is present in the current string value\n        if sub_str in val:\n            return True\n    \n    # If the loop completes without finding the substring, return False\n    return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n > 1:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # Check if the number is even\n    if n % 2 == 0:\n        return False\n    \n    # Check if the number is odd\n    for i in range(3, n+1, 2):\n        if n % i == 0:\n            return True\n    \n    return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n > 0:\n        if n % 2 == 0:\n            return False\n        else:\n            for i in range(3, n+1, 2):\n                if i**2 == n:\n                    return True\n            return False\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n == 0:\n        return False\n    elif n == 1:\n        return True\n    else:\n        return is_undulating(n-1) and n*2 == is_undulating(n-2)"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n\n    # Initialize the count of even and odd numbers\n    even_count = 0\n    odd_count = 0\n\n    # Loop through each digit in the given number\n    for digit in str(n):\n\n        # Convert the digit to an integer and check if it's even or odd\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n    # Check if the count of even and odd numbers is equal\n    if even_count == odd_count:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    if n < 0 or n > 1000000000:\n        return \"Invalid input. Please enter a number between 0 and 1,000,000,000.\"\n    if n % 2 == 0:\n        return \"The number is even.\"\n    else:\n        return \"The number is odd.\""
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # check whether n is even or odd\n    if n % 2 == 0: \n        return \"Even number is not undulating.\"\n    else: \n        return \"Odd number is undulating.\""
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0: # If n is even\n        return True\n    else: # If n is odd\n        for i in range(2, n): # Starting from 2 and checking all odd numbers up to n\n            if n % i == 0:\n                return False\n        return True # If none of the odd numbers divide n, then n is undulating\n    \n"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # Check if the given number is even or not\n    if n % 2 == 0:\n        return False\n    # Iterate through all numbers from 2 to n-1\n    for i in range(2, n):\n        # If i is even, it is not undulating\n        if i % 2 == 0:\n            return False\n    # If we reach here, then n is undulating\n    return True"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result\n"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b < 0:\n        return 1 / power(a, -b)\n    else:\n        return a * power(a, b - 1)"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    \"\"\"\n    # Sort the list based on the second value using the itemgetter function from the operator module\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    # Return the first value of the tuple with the smallest second value\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the tuple with the smallest second value.\n    '''\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    return min(range(len(test_list)), key=lambda i: itemgetter(1, i)(test_list))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the tuple with the smallest second value.\n\n    Args:\n        test_list (list): A list of tuples\n\n    Returns:\n        int: The index of the tuple with the smallest second value\n    '''\n    return min(test_list, key=itemgetter(1))[0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_value = float('inf')\n    min_index = None\n\n    for index, value in enumerate(test_list):\n        if value[1] < min_value:\n            min_value = value[1]\n            min_index = index\n\n    return min_index"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return sorted(test_list, key=itemgetter(1))[0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return sorted(test_list, key=itemgetter(1))[0]"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    smallest_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < smallest_length:\n            smallest_length = len(sublist)\n    return smallest_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):  \n    \"\"\"\n    Write a python function to find the length of the smallest list in a list of lists.\n    \"\"\"\n\n    # Initialize a variable to store the minimum length\n    min_len = float('inf')\n\n    # Iterate through each sublist in the list of lists\n    for sublist in lst:\n        # Check if the length of the sublist is less than the current minimum length\n        if len(sublist) < min_len:\n            # Update the minimum length to be the length of the sublist\n            min_len = len(sublist)\n\n    # Return the minimum length\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    This function takes a list of lists as input and finds the length of the smallest list in the list.\n    '''\n    # create an empty list to store the length of each sublist\n    sublist_lengths = []\n    # loop through each sublist in the list\n    for sublist in lst:\n        # append the length of each sublist to the sublist_lengths list\n        sublist_lengths.append(len(sublist))\n    # find the minimum length of all sublists using the min() function\n    min_length = min(sublist_lengths)\n    # return the minimum length\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n\n    min_length = float('inf') #initialize variable to infinity\n\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the smallest list in a list of lists.\n    \"\"\"\n    min_length = 1000000  # Set the initial length of the smallest list to a large number\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for sub_lst in lst:\n        if len(sub_lst) < min_length:\n            min_length = len(sub_lst)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the smallest list in a list of lists.\n    \"\"\"\n    min_len = float('inf') # initializing the minimum length variable as infinity\n    for sub_list in lst:\n        if len(sub_list) < min_len:\n            min_len = len(sub_list)\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = len(lst[0])\n    for i in range(1, len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n    return min_len"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisor(n):\n    \"\"\"\n    This function finds the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors += 1\n    return divisors"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisor(n):\n    \"\"\"\n    This function takes an integer `n` as input and returns the number of divisors of `n`.\n    \"\"\"\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n    freq = {}\n    for elem in list1:\n        if isinstance(elem, list):\n            for subelem in elem:\n                if subelem in freq:\n                    freq[subelem] += 1\n                else:\n                    freq[subelem] = 1\n        elif elem in freq:\n            freq[elem] += 1\n        else:\n            freq[elem] = 1\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    flat_list = [item for sublist in list1 for item in sublist]\n    freq_dict = {}\n    for item in flat_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # create an empty dictionary to store the frequency of each element\n    freq = {}\n    # iterate over each element in the list\n    for element in list1:\n        # check if the element is a list\n        if isinstance(element, list):\n            # recursively call the function on the list\n            sub_freq = frequency_lists(element)\n            # iterate over each key-value pair in the sub-frequency dictionary\n            for key, value in sub_freq.items():\n                # update the frequency of the parent element by adding the sub-frequency to it\n                if key in freq:\n                    freq[key] += value\n                else:\n                    freq[key] = value\n        else:\n            # if the element is not a list, add it to the frequency dictionary with a frequency of 1\n            if element in freq:\n                freq[element] += 1\n            else:\n                freq[element] = 1\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n\n    # Initialize an empty dictionary to store the frequency of each element in list1\n    freq_dict = {}\n\n    # Loop through each element in list1\n    for item in list1:\n        # Check if the item is in the dictionary\n        if item in freq_dict:\n            # If it is, increment its frequency by 1\n            freq_dict[item] += 1\n        else:\n            # If it's not, add it to the dictionary with frequency 1\n            freq_dict[item] = 1\n\n    # Return the frequency dictionary\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n\n    # flatten the list of lists\n    flat_list = [item for sublist in list1 for item in sublist]\n\n    # create a dictionary to store the frequency of each element\n    freq_dict = {}\n\n    # iterate over the flattened list and update the frequency of each element\n    for item in flat_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Define an empty dictionary to store the frequency of each element\n    freq = {}\n    # Loop through each element in the flattened list\n    for element in list1:\n        # If the element is already a key in the dictionary, increment its value\n        if element in freq:\n            freq[element] += 1\n        # If the element is not a key in the dictionary, add it and set its value to 1\n        else:\n            freq[element] = 1\n    # Return the dictionary of frequency counts\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Create an empty dictionary to store the frequency of each element\n    freq_dict = {}\n    \n    # Loop through each element in the list\n    for element in list1:\n        # If the element is already in the dictionary, increment its count by 1\n        if element in freq_dict:\n            freq_dict[element] += 1\n        # If the element is not in the dictionary, add it with a count of 1\n        else:\n            freq_dict[element] = 1\n    \n    # Return the dictionary of frequencies\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Create an empty dictionary to store frequency of each element\n    freq_dict = {}\n\n    # Loop through each list in the flattened list of lists\n    for sublist in list1:\n        # Loop through each element in the sublist\n        for element in sublist:\n            # If the element is already in the dictionary, increment its value by 1\n            if element in freq_dict:\n                freq_dict[element] += 1\n            # If the element is not in the dictionary, add it with a value of 1\n            else:\n                freq_dict[element] = 1\n\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # create an empty dictionary to store the frequency\n    freq_dict = {}\n\n    # loop through each element in the flattened list\n    for item in list1:\n        # if the item is a list, recursively call the function on the list\n        if isinstance(item, list):\n            # update the frequency of the element in the dictionary by adding 1 to its count\n            freq_dict[item] = freq_dict.get(item, 0) + 1\n        # if the item is not a list, add it to the dictionary with a count of 1\n        else:\n            freq_dict[item] = freq_dict.get(item, 0) + 1\n\n    # return the final dictionary of frequency counts\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n    # Initialize an empty dictionary\n    frequency_dict = {}\n    \n    # Loop through each element in the list\n    for element in list1:\n        # If the element is a list, recursively call the function on that list\n        if isinstance(element, list):\n            for subelement in element:\n                # If the subelement is not already in the dictionary, add it with a frequency of 1\n                if subelement not in frequency_dict:\n                    frequency_dict[subelement] = 1\n                # If the subelement is already in the dictionary, increment its frequency\n                else:\n                    frequency_dict[subelement] += 1\n        # If the element is not a list, add it to the dictionary with a frequency of 1\n        else:\n            if element not in frequency_dict:\n                frequency_dict[element] = 1\n            else:\n                frequency_dict[element] += 1\n    \n    # Return the dictionary with the frequency of each element\n    return frequency_dict"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for number in numbers:\n        result *= number\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1  \n    for num in numbers:  \n        product *= num  \n    result = product / len(numbers)  \n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_num(numbers):\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for num in numbers:\n        total *= num\n    return total / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_num(numbers):\n    \"\"\"\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    \"\"\"\n    total_num = 1\n    for num in numbers:\n        total_num *= num\n    return total_num / len(numbers)"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def decimal_to_binary(n):\n    # base case: when n is less than 2\n    if n < 2:\n        return n\n    \n    # recursive case: divide n by 2, convert the result to binary, and append the last digit of n to the end\n    binary = decimal_to_binary(n//2)\n    return binary + str(n % 2)"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    # initializing empty string\n    binary = \"\"\n\n    # converting decimal to binary\n    while n > 0:\n        # extracting last digit of decimal number\n        digit = n % 2\n\n        # appending digit to binary string\n        binary = str(digit) + binary\n\n        # dividing decimal number by 2\n        n //= 2\n\n    # returning binary string\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def decimal_to_binary(n): \n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    binary_string = \"\"\n    while n > 0: \n        binary_string = str(n % 2) + binary_string \n        n //= 2\n    return binary_string "
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    # Initialize the result string to an empty string\n    result = \"\"\n    # While n is greater than 0, append the remainder of n divided by 2 to the result string and divide n by 2\n    while n > 0:\n        result = str(n % 2) + result\n        n = n // 2\n    # Return the result string as the binary equivalent of the decimal number\n    return result"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def decimal_to_binary(n): \n    # Initialize an empty string to store the binary equivalent \n    binary_string = \"\" \n    # Convert the decimal number to a binary number and store it in binary_string \n    while n > 0: \n        # Get the remainder of n divided by 2 \n        remainder = n % 2 \n        # Append the remainder to the beginning of binary_string \n        binary_string = str(remainder) + binary_string \n        # Remove the last digit from n and divide by 2 again \n        n = n // 2 \n    # Return the binary_string without any leading zeros \n    return binary_string[::-1] "
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n\n    binary = \"\"\n    while n > 0: \n        remainder = n % 2 \n        binary = str(remainder) + binary \n        n //= 2 \n\n    return binary "
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0: \n        return '0' \n    elif n < 0: \n        n = abs(n)\n        return '-' + decimal_to_binary(n)\n    else: \n        binary = ''\n        while n > 0: \n            binary = str(n % 2) + binary \n            n = n // 2 \n        return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def decimal_to_binary(n):\n    if n == 0:\n        return '0'\n    else:\n        binary_number = ''\n        while n > 0:\n            remainder = n % 2\n            binary_number = str(remainder) + binary_number\n            n = n // 2\n        return binary_number"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def decimal_to_binary(n):\n    # Convert the decimal number to binary\n    binary = bin(n)[2:]\n    # Remove leading zeros and add a space between each group of four digits\n    return''.join('{:04b}'.format(int(binary[i:i+4], 2)) for i in range(0, len(binary), 4))"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary\n"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    is_palindrome = True\n    while is_palindrome:\n        # Convert num to string and reverse it\n        reverse_num = int(str(num)[::-1])\n        # Check if reverse_num is a palindrome\n        if num == reverse_num:\n            # If it is, return next_smallest_palindrome\n            return reverse_num\n        else:\n            # If it's not, decrement num and continue\n            num -= 1\n            is_palindrome = num >= 0\n            # Check if num is negative\n            if num < 0:\n                print(\"Invalid input: Please enter a positive integer.\")\n                sys.exit(1)"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # initialize two variables, num_str and new_num_str, to the original num as a string\n    num_str = str(num)\n    new_num_str = str(num)\n    # initialize a variable, is_palindrome, to True\n    is_palindrome = True\n    # loop while the new_num_str is not a palindrome\n    while not is_palindrome:\n        # check if the new_num_str is greater than num_str\n        if int(new_num_str) > int(num_str):\n            # if it is, update num_str and new_num_str to the new values\n            num_str = new_num_str\n            new_num_str = str(int(num_str) + 1)\n        # if the new_num_str is less than or equal to num_str, check if it is a palindrome\n        elif int(new_num_str) < int(num_str) and int(new_num_str) + 1 == int(num_str):\n            # if it is, update is_palindrome to False\n            is_palindrome = False\n        # if the new_num_str is not a palindrome, update it to the next number greater than the current num\n        else:\n            new_num_str = str(int(new_num_str) + 1)\n    # return the value of new_num_str as an integer\n    return int(new_num_str)"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Convert the integer to a string\n    str_num = str(num)\n    \n    # Find the last digit in the string\n    last_digit = int(str_num[-1])\n    \n    # Check if the last digit is odd\n    if last_digit % 2 == 1:\n        # Add 10 to the last digit and convert it back to a string\n        next_num = str(int(str_num[:-1]) + 10)\n    else:\n        # Multiply the last digit by 2 and convert it back to a string\n        next_num = str(int(str_num[:-1]) * 2)\n        \n    return int(next_num)\n"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    # convert the input integer to a string and reverse it\n    num_str = str(num)[::-1]\n    # check if the reversed string is a palindrome\n    if num_str == num_str[::-1]:\n        # create a list of characters in the reversed string\n        char_list = list(num_str)\n        # find the smallest number that is greater than the input number\n        for i in range(len(char_list)):\n            if char_list[i] < char_list[i+1]:\n                next_num = int(''.join(char_list[i+1:]))\n                # check if the next number is a palindrome\n                if str(next_num)[::-1] == str(next_num)[::-1]:\n                    return next_num\n    # if no palindrome is found, return the input number\n    return num"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Convert the input integer to a string\n    num_str = str(num)\n    # Reverse the string\n    reversed_str = num_str[::-1]\n    # Reverse the string again and convert it back to an integer\n    next_num = int(reversed_str[::-1])\n    # Check if the next number is smaller than the input number\n    if next_num < num:\n        # If it is, return the next number\n        return next_num\n    # If not, check if the next number is a palindrome\n    else:\n        # If it is, check if the next number is the next smallest palindrome\n        if next_num == int(str(next_num)[::-1]):\n            # If it is, return the next number\n            return next_num\n        # If not, return the input number\n        else:\n            return num"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_palindrome(num):\n    \"\"\"\n    Helper function to check if a number is a palindrome\n    \"\"\"\n    str_num = str(num)\n    return str_num == str_num[::-1]\n\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Find the next smallest palindrome of a specified integer\n    \"\"\"\n    if num < 10:\n        return 10\n    elif num < 100:\n        return 100\n    elif is_palindrome(num):\n        return next_smallest_palindrome(num + 1)\n    else:\n        max_palindrome = num\n        while not is_palindrome(max_palindrome):\n            max_palindrome += 1\n        return max_palindrome + 1"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import sys\n\ndef is_palindrome(n):\n    \"\"\"\n    Returns True if the given number is palindrome, else False.\n    \"\"\"\n    num_str = str(n)\n    return num_str == num_str[::-1]\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Returns the next smallest palindrome of a specified integer.\n    \"\"\"\n    if is_palindrome(num):\n        return num + 1\n    else:\n        # find the largest palindrome less than or equal to num\n        max_palindrome = 0\n        i = 1\n        while i <= num:\n            j = 1\n            while j <= i:\n                if i * i + j * j <= num * num:\n                    max_palindrome = max(max_palindrome, i * i + j * j)\n                j += 1\n            i += 1\n        # add 1 to the largest palindrome\n        max_palindrome += 1\n        return max_palindrome"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    def is_valid(num, base):\n        return is_palindrome(num) and num < base\n\n    def largest_valid_palindrome(num):\n        largest = 0\n        for base in range(num, 1000000, -1):\n            if is_valid(num, base):\n                largest = base\n        return largest\n\n    def find_next_smallest_palindrome(num):\n        next_largest_palindrome = largest_valid_palindrome(num)\n        if next_largest_palindrome == 0:\n            return num + 1\n\n        for base in range(next_largest_palindrome, 1000000, -1):\n            if is_valid(next_largest_palindrome, base):\n                return next_largest_palindrome\n\n    result = find_next_smallest_palindrome(num)\n    return result\n\nif __name__ == \"__main__\":\n    num = int(sys.argv[1])\n    result = next_smallest_palindrome(num)\n    print(result)"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def next_smallest_palindrome(num):\n    \"\"\"\n    Returns the next smallest palindrome of the given integer.\n    \"\"\"\n    # Convert the given integer to a string\n    s = str(num)\n\n    # Reverse the string\n    s = s[::-1]\n\n    # Iterate through the string from the right\n    for i in range(len(s)-1, -1, -1):\n        # Check if the current character is a palindrome\n        if s[i] == s[i]:\n            # If it is, return the integer represented by the reversed string\n            return int(s)\n\n        # If it's not a palindrome, increment the current character and break out of the loop\n        else:\n            s = s[:i] + str(int(s[i]) + 1) + s[i+1:]\n            break\n\n    # If the loop completes without finding a palindrome, return None\n    return None"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_palindrome(num):\n    \"\"\"\n    Returns True if num is a palindrome, False otherwise.\n    \"\"\"\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Returns the next smallest palindrome of a specified integer as an integer.\n    \"\"\"\n    # Check if num is a palindrome\n    if is_palindrome(num):\n        # If num is a palindrome, check if it's the smallest palindrome\n        if is_palindrome(num-1):\n            return num\n        # If num is not the smallest palindrome, return the next smaller palindrome\n        else:\n            # Find the largest number smaller than or equal to num\n            largest_num = num - 1\n            while not is_palindrome(largest_num):\n                largest_num -= 1\n            return largest_num\n    # If num is not a palindrome, return the next smaller palindrome\n    else:\n        # Find the largest number smaller than or equal to num\n        largest_num = num - 1\n        while not is_palindrome(largest_num):\n            largest_num -= 1\n        return largest_num + 1"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Check if the array is empty or not\n    if len(arr) == 0:\n        return None\n    # If the array has only one element, return it\n    elif len(arr) == 1:\n        return arr[0]\n    # If the k is 1, return the first element\n    elif k == 1:\n        return arr[0]\n    # If the k is greater than the length of the array, return None\n    elif k > len(arr):\n        return None\n    # If the k is equal to the length of the array, return the last element\n    elif k == len(arr):\n        return arr[-1]\n    # If the k is greater than 1 but less than the length of the array, \n    # find the kth element in the middle of the array\n    else:\n        mid = len(arr) // 2\n        if k % 2 == 0:\n            # Find the sum of the first and last elements\n            first_sum = arr[0] + arr[mid]\n            last_sum = arr[-1] + arr[-mid]\n            # Check if the sum is equal to the kth element\n            if kth_sum == first_sum + last_sum:\n                return arr[mid]\n            # If the sum is less than the kth element, find the kth element in the left half of the array\n            elif kth_sum < first_sum + last_sum:\n                return kth_element(arr[:mid], k)\n            # If the sum is greater than the kth element, find the kth element in the right half of the array\n            else:\n                return kth_element(arr[mid:], k-mid)"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if not isinstance(arr, list):\n        raise TypeError('The input must be a list')\n\n    if not all(isinstance(x, int) for x in arr):\n        raise TypeError('All elements of the input must be integers')\n\n    if k < 1 or k > len(arr):\n        raise ValueError('k must be between 1 and the length of the array')\n\n    return arr[k - 1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Check if the array has at least one element\n    if len(arr) == 0:\n        return None\n    \n    # Check if the index is valid\n    if k < 1 or k > len(arr):\n        return None\n    \n    # Initialize a variable to keep track of the current index\n    i = 0\n    \n    # Loop through the array until we find the kth element\n    while i < len(arr) and i < k:\n        i += 1\n    \n    # If the index is within the array, return the element\n    if i <= k:\n        return arr[i-1]\n    \n    # If we reach here, the index is invalid\n    return None"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    \"\"\"\n    Write a function to find the kth element in the given array using 1-based indexing.\n\n    Args:\n    arr: list, the array to search in\n    k: int, the index of the element to find (1-based indexing)\n\n    Returns:\n    int, the kth element of the array\n    \"\"\"\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    \"\"\"\n    Write a function to find the kth element in the given array using 1-based indexing.\n    \"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    else:\n        pivot = arr[len(arr) // 2]\n        left = [x for x in arr if x <= pivot]\n        right = [x for x in arr if x > pivot]\n        if k <= len(left):\n            return kth_element(left, k)\n        else:\n            return kth_element(right, k - len(left) - 1)"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr):\n        return None\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if mid == k - 1:\n            return arr[mid]\n        elif mid < k - 1:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return None"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Convert the given array to a list\n    arr = list(arr)\n\n    # Find the length of the array\n    n = len(arr)\n\n    # Check if the kth element is in the array\n    if k > n:\n        print(\"The kth element is not in the array.\")\n        return\n\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Return the kth element\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr):\n        return None\n    elif k == 1:\n        return arr[0]\n    else:\n        left = 0\n        right = len(arr) - 1\n        while left <= right:\n            mid = left + (right - left) // 2\n            if mid == k - 1:\n                return arr[mid]\n            elif mid < k - 1:\n                left = mid + 1\n            else:\n                right = mid - 1"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k > n:\n        return -1\n    elif k == 1:\n        return arr[0]\n    else:\n        left = 1\n        right = n\n        while left <= right:\n            mid = (left + right) // 2\n            if mid == k - 1:\n                return arr[mid]\n            elif mid < k - 1:\n                left = mid + 1\n            else:\n                right = mid - 1"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    words = word.split('_')\n    camel_case_word = words[0].lower()\n    for i in range(1, len(words)):\n        camel_case_word += words[i].capitalize()\n    return camel_case_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    camel_case = []\n    for word in words:\n        camel_case.append(word.capitalize())\n    return ''.join(camel_case)"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_word = ''\n    for i in range(len(word)):\n        if i == 0:\n            camel_word += word[i].lower()\n        elif i > 0 and i < len(word) - 1:\n            camel_word += word[i]\n        else:\n            camel_word += word[i].upper()\n    return camel_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case = ''\n    for i in range(len(word)):\n        if i == 0:\n            camel_case += word[i].lower()\n        elif word[i].isupper():\n            camel_case += '_' + word[i].lower()\n        else:\n            camel_case += word[i]\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    camel_case = \"\"\n    for i in range(len(word)):\n        if i == 0:\n            camel_case += word[i].lower()\n        elif i!= 0 and word[i].isupper():\n            camel_case += \"_\" + word[i].lower()\n        else:\n            camel_case += word[i]\n    return camel_case.title()"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case = ''\n    i = 0\n    while i < len(word):\n        if word[i] == '_':\n            if i == 0:\n                camel_case += word[i].lower()\n            else:\n                camel_case += word[i+1].upper()\n        else:\n            camel_case += word[i].lower()\n        i += 1\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    camel_word = words[0]\n    for i in range(1, len(words)):\n        camel_word += words[i].capitalize()\n    return camel_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel = \"\"\n    for i in range(len(word)):\n        if i == 0:\n            camel += word[i].lower()\n        else:\n            camel += word[i]\n        if i!= len(word) - 1:\n            camel += \"_\"\n    return camel"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case = \"\"\n    for i in range(len(word)):\n        if i > 0 and word[i-1] == \"_\":\n            camel_case += word[i].upper()\n        else:\n            camel_case += word[i]\n    return camel_case.capitalize()"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    camel_case_word = \"\"\n    for i, letter in enumerate(word):\n        if i == 0:\n            camel_case_word += letter.lower()\n        else:\n            camel_case_word += \"_\" + letter.lower()\n    return camel_case_word"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Initialize the array to store the number of eulerian paths in each column\n    dp = [[0 for j in range(m+1)] for i in range(n+1)]\n\n    # Base cases\n    dp[0][0] = 1\n    dp[1][1] = 1\n\n    # Fill the rest of the array\n    for i in range(2, n+1):\n        for j in range(2, m+1):\n            dp[i][j] = dp[i-1][j] + dp[i][j-1] - dp[i-1][j-1]\n\n    # Return the result\n    return dp[n][m]"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n\n    # Initialize the first row and first column\n    first_row = [1]\n    first_col = [1]\n\n    # Initialize the remaining rows and columns\n    for i in range(1, n):\n        first_row.append(first_row[i-1] * (i+m))\n\n    for j in range(1, m):\n        first_col.append(first_col[j-1] * (j+n))\n\n    # Return the Eulerian number\n    return first_row[n-1] * first_col[m-1]"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    grid = [['' for j in range(m)] for i in range(n)]\n    curr_x, curr_y = 0, 0\n    visits = 0\n\n    while True:\n        # Add the current position to the grid\n        grid[curr_x][curr_y] = 'X'\n        visits += 1\n\n        # Check if there is a cell to the right of the current position\n        if curr_x + 1 < n and grid[curr_x + 1][curr_y] == '':\n            curr_x += 1\n        # Check if there is a cell above the current position\n        elif curr_y + 1 < m and grid[curr_x][curr_y + 1] == '':\n            curr_y += 1\n        # Check if there is a cell to the left of the current position\n        elif curr_x - 1 >= 0 and grid[curr_x - 1][curr_y] == '':\n            curr_x -= 1\n        # Check if there is a cell below the current position\n        elif curr_y - 1 >= 0 and grid[curr_x][curr_y - 1] == '':\n            curr_y -= 1\n        # Otherwise, the robot has reached the end of the grid\n        else:\n            break\n\n    return visits"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Create a list of integers from 1 to n\n    nums = list(range(1, n+1))\n    # Create a list of lists to represent the graph\n    graph = []\n    # Create a 0 matrix to represent the grid\n    grid = [[0 for x in range(m+1)] for y in range(n+1)]\n    # Fill the graph with edges\n    for i in range(1, n):\n        for j in range(1, m):\n            graph.append((i, j))\n    # Mark the edges in the graph\n    for edge in graph:\n        grid[edge[0]][edge[1]] = 1\n    # Initialize the first column to 1\n    grid[1][0] = 1\n    # Initialize the first row to 1\n    grid[0][1] = 1\n    # Find the Eulerian cycle\n    for i in range(2, n+1):\n        for j in range(2, m+1):\n            if grid[i][j] == 0 and all(grid[k][j] == 1 for k in range(1, i)):\n                grid[i][j] = 1\n                break\n    # Calculate the number of edges in the Eulerian cycle\n    count = 0\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if grid[i][j] == 1:\n                count += 1\n    # Return the Eulerian number\n    return count"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Base case\n    if n == 1 or m == 1:\n        return 1\n    # Recursive case\n    else:\n        return eulerian_num(n-1, m) + eulerian_num(n, m-1) - eulerian_num(n-1, m-1)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n\n    # Initialize the first row of the matrix with 1's\n    a = [[1]*(m+1) for _ in range(n+1)]\n\n    # Fill the matrix with the Eulerian sequence\n    for i in range(2, n+1):\n        for j in range(2, m+1):\n            a[i][j] = a[i-1][j-1] + a[i][j-1] - a[i-1][j]\n\n    # Return the final element of the matrix\n    return a[-1][-1]"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return (n * (n + 1)) // 2 + (m * (m + 1)) // 2"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 0:\n        return m * m * 2 + (m-1) * (m-1)\n    elif n == 1:\n        return m * m * 4 + (m-1) * (m-1) * 2 + 2 * m\n    elif n == 2:\n        return m * m * 6 + (m-1) * (m-1) * 4 + (m-2) * (m-2) * 2 + 6 * m\n    elif n == 3:\n        return m * m * 8 + (m-1) * (m-1) * 6 + (m-2) * (m-2) * 4 + (m-3) * (m-3) * 2 + 8 * m"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if m == 0:\n        return 1\n    else:\n        return (n * (n - 1)) // (m - 1) + (n - 1) * eulerian_num(n, m - 1)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def eulerian_num(n, m):\n    '''\n    Find the Eulerian number a(n, m) for a given matrix with dimensions n x m.\n    '''\n    # Initialize matrix with zeros\n    a = [[0] * m for _ in range(n)]\n\n    # Fill in the matrix with values\n    for i in range(n):\n        for j in range(m):\n            a[i][j] = i + j + 1\n\n    # Initialize matrix with zeros\n    b = [[0] * m for _ in range(n)]\n\n    # Fill in the matrix with values\n    for i in range(n):\n        for j in range(m):\n            b[i][j] = i + j\n\n    # Find the Eulerian path between the two matrices\n    path = []\n    i = n - 1\n    j = m - 1\n    while i >= 0 and j >= 0:\n        path.append((i, j))\n        a[i][j] = 0\n        i -= 1\n        j -= 1\n\n    return a + b, path"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Loop through each sublist of strings in the input list\n    for sublist in input_list:\n        # Sort the sublist alphabetically\n        sublist.sort()\n"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Loop through each sublist in the input list\n    for sublist in input_list:\n        # Sort the sublist in ascending order using the sorted() function\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if isinstance(item, bool) and item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count(lst):\n    count = 0\n    for elem in lst:\n        if elem is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count(lst):\n    count = 0\n    for i in lst:\n        if i is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_true_booleans(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if type(item) == bool:\n            if item == True:\n                count += 1\n    return count"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup = test_tup + tuple(test_list)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    # create a new list by concatenating the given list and tuples\n    new_list = test_list + list(test_tup)\n    \n    return new_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_tup + test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Convert the list to a tuple\n    test_tup = tuple(test_list)\n    # Append the list to the tuple\n    test_tup = test_tup + test_list\n    # Return the updated tuple\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup = test_tup + (test_list,)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    # Append the given list to the given tuple\n    test_list.append(test_tup)\n\n    # Print the new tuple\n    print(test_list)\n"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Convert the given lists to tuples\n    test_list = tuple(test_list)\n    test_tup = tuple(test_tup)\n    # Concatenate the two tuples and convert back to lists\n    combined_list = list(test_list + test_tup)\n    return combined_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup = test_tup + test_list\n    return test_tup"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    # Merge three sorted lists into a single sorted list\n    merged_list = heapq.merge(num1, num2, num3)\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # merge the first two lists\n    sorted_list = heapq.merge(num1, num2)\n    # merge the merged list with the third list\n    sorted_list = heapq.merge(sorted_list, num3)\n    # return the sorted list\n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    # concatenate the three lists into a single list\n    merged_list = num1 + num2 + num3\n    \n    # convert the merged list into a min heap\n    min_heap = []\n    for num in merged_list:\n        heapq.heappush(min_heap, num)\n    \n    # extract the minimum element from the min heap and add it to the result list\n    result = []\n    while min_heap:\n        result.append(heapq.heappop(min_heap))\n    \n    return result"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Combine the three lists into one list\n    merged_list = num1 + num2 + num3\n    \n    # Sort the merged list using heap sort\n    heapq.heapify(merged_list)\n    sorted_list = []\n    while merged_list:\n        sorted_list.append(heapq.heappop(merged_list))\n    \n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n\n    result = []\n    while num1 and num2 and num3:\n        if -heapq.heappop(num1) <= -heapq.heappop(num2):\n            result.append(-heapq.heappop(num1))\n        else:\n            result.append(-heapq.heappop(num2))\n        result.append(-heapq.heappop(num3))\n\n    while num1:\n        result.append(-heapq.heappop(num1))\n    while num2:\n        result.append(-heapq.heappop(num2))\n    while num3:\n        result.append(-heapq.heappop(num3))\n\n    return result"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Concatenate the three lists into one large list\n    merged_list = num1 + num2 + num3\n\n    # Sort the merged list using heapq\n    heapq.heapify(merged_list)\n\n    # Extract the sorted list from the heap\n    sorted_list = [heapq.heappop(merged_list) for i in range(len(merged_list))]\n\n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n\n    # Convert the lists to sets so that duplicates are removed\n    num1 = set(num1)\n    num2 = set(num2)\n    num3 = set(num3)\n\n    # Convert the sets back to lists so that we can use heapq\n    num1 = list(num1)\n    num2 = list(num2)\n    num3 = list(num3)\n\n    # Merge the lists using heapq\n    merged_list = []\n    heapq.merge(merged_list, num1)\n    heapq.merge(merged_list, num2)\n    heapq.merge(merged_list, num3)\n\n    # Sort the merged list and convert it back to a set\n    merged_list = sorted(merged_list)\n    merged_list = set(merged_list)\n\n    # Convert the set back to a list\n    merged_list = list(merged_list)\n\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Merges three sorted lists into a single sorted list.\n    \"\"\"\n    # Concatenate all three lists\n    merged_list = num1 + num2 + num3\n\n    # Use heapify to create a min-heap from the merged list\n    heapq.heapify(merged_list)\n\n    # Extract and return the minimum element from the heap\n    return heapq.heappop(merged_list)"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Merge three sorted lists into a single sorted list.\n    \"\"\"\n    # Merge the first two lists into one\n    merged = heapq.merge(num1, num2)\n    # Merge the remaining lists into the merged list\n    merged = heapq.merge(merged, num3)\n    return merged"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef merge_sorted_list(num1,num2,num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    # Create a list to store the merged numbers\n    merged_list = []\n\n    # Merge the three lists using a heap\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n\n    # Extract numbers from the heaps and append them to the merged list\n    while len(num1) > 0 and len(num2) > 0 and len(num3) > 0:\n        merged_list.append(heapq.heappop(num1))\n        merged_list.append(heapq.heappop(num2))\n        merged_list.append(heapq.heappop(num3))\n\n    # If there are still elements in one of the heaps, append them to the merged list\n    while len(num1) > 0:\n        merged_list.append(heapq.heappop(num1))\n    while len(num2) > 0:\n        merged_list.append(heapq.heappop(num2))\n    while len(num3) > 0:\n        merged_list.append(heapq.heappop(num3))\n\n    return merged_list"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_Equivalent(s, n):\n    def binary_rotate(s):\n        n_bits = len(s)\n        for i in range(n_bits // 2):\n            s = s[:i] + s[i+1:]\n        return s\n\n    def count_odd(s):\n        return s.count(\"1\")\n\n    s = s.strip()\n    n_bits = len(s)\n\n    # Rotate the binary string n times\n    s = binary_rotate(s)\n\n    # Count the number of odd values in the rotated binary string\n    count = 0\n    for i in range(n_bits):\n        if s[i] == \"1\":\n            count += 1\n\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n\n    binary_str = ''.join([str(int(x)) for x in s]) # convert string to binary\n    binary_list = list(binary_str) # convert binary string to list of characters\n\n    for i in range(n):\n        binary_list = binary_list[-len(binary_list):] + binary_list[:len(binary_list)-1] # rotate binary list\n\n    odd_count = 0\n    for i in range(len(binary_list)):\n        if binary_list[i] == '1':\n            odd_count += 1\n\n    return odd_count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_Equivalent(s, n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n\n    # Convert the binary string to a list of digits\n    digits = [int(d) for d in s]\n\n    # Initialize variables to keep track of the count of odd numbers and the position of the last odd number\n    count = 0\n    last_odd = 0\n\n    # Rotate the list of digits n times\n    for i in range(n):\n        # Find the position of the last odd number in the rotated list\n        last_odd = digits.index(1)\n\n        # Reverse the list from the last odd number to the end\n        digits = digits[last_odd:] + digits[:last_odd]\n\n        # Count the number of odd numbers in the rotated list\n        count += digits.count(1)\n\n    # Return the number of odd numbers in the rotated list\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    if len(s) < 2:\n        return 0\n    elif len(s) == 2:\n        return 1\n    elif n == 0:\n        return 1\n    else:\n        # Get the length of the binary string s\n        n_bits = len(bin(n)[2:])\n        # Initialize a list to store the binary numbers that have odd values after rotating s n times\n        odd_list = []\n        # Loop through the binary numbers from 0 to 2^n_bits-1\n        for i in range(2**n_bits):\n            # Convert the binary number i to decimal\n            bin_i = bin(i)[2:]\n            # Add a zero at the beginning of the binary number if it's shorter than n_bits\n            bin_i = bin_i.zfill(n_bits)\n            # Rotate the binary number by n bits to the left\n            bin_i_rotated = bin_i[n:] + bin_i[:n]\n            # If the rotated binary number is odd, add it to the odd_list\n            if bin_i_rotated[::-1] in odd_list:\n                odd_list.append(bin_i_rotated[::-1])\n        # Return the length of the odd_list\n        return len(odd_list)"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_Equivalent(s, n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    n %= len(s)\n    count = 0\n    for i in range(len(s)):\n        if s[i] == '0':\n            count += 1\n        else:\n            count += 1\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_Equivalent(s, n):\n    # convert binary string to list of digits\n    s_list = list(s)\n    # rotate the list of digits n times\n    s_list = s_list[n:] + s_list[:n]\n    # convert list of digits back to binary string\n    s_rotated = ''.join(s_list)\n    # count the number of odd digits in the rotated binary string\n    count = 0\n    for digit in s_rotated:\n        if int(digit) % 2 == 1:\n            count += 1\n    # return the count of odd digits\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_Equivalent(s,n): \n    count = 0\n    for i in range(n):\n        s = s[::-1] + s[1:]\n    for i in range(len(s)):\n        if s[i] % 2!= 0:\n            count += 1\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_Equivalent(s, n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # Initialize count variable\n    count = 0\n    \n    # Initialize a list to store the binary values of the string\n    binary = [0] * len(s)\n    \n    # Convert the string to binary\n    for i in s:\n        if i == '0':\n            binary[count] = 0\n        elif i == '1':\n            binary[count] = 1\n        count += 1\n    \n    # Initialize a variable to store the number of odd values\n    odd_count = 0\n    \n    # Rotate the binary values n times\n    for i in range(n):\n        # Initialize a temporary list to store the binary values of the rotated binary string\n        temp = [0] * len(binary)\n        \n        # Rotate the binary values of the binary string\n        for j in range(len(binary)):\n            if binary[j] == 0:\n                temp[j] = 0\n            elif binary[j] == 1:\n                temp[j] = 1\n            \n        # Update the binary string\n        binary = temp\n    \n    # Iterate through the binary string to count the odd values\n    for i in binary:\n        if i == 1:\n            odd_count += 1\n    \n    return odd_count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_Equivalent(s,n): \n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    # converting the binary string to a list\n    bin_str = list(s)\n    # checking if the binary string is odd length\n    if len(bin_str) % 2!= 0:\n        return \"The binary string must be of an odd length.\"\n    # rotating the binary string n times\n    for i in range(n):\n        bin_str.insert(0, bin_str.pop())\n    # counting the number of odd values in the rotated binary string\n    count = 0\n    for i in bin_str:\n        if int(i) % 2!= 0:\n            count += 1\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_Equivalent(s,n): \n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    \n    # Initialize the count variable to zero\n    count = 0\n    \n    # Rotate the binary string the given number of times\n    for i in range(n):\n        # Get the last character of the string\n        last_char = s[-1]\n        \n        # Initialize a new string to hold the rotated binary string\n        new_s = \"\"\n        \n        # Iterate through the binary string from right to left\n        for j in range(len(s)-1, -1, -1):\n            \n            # Add the character at the current index to the new string\n            new_s += s[j]\n            \n            # If the character at the current index is an odd digit, increment the count variable\n            if s[j] == \"1\":\n                count += 1\n        \n        # Replace the last character of the original string with the last character of the rotated binary string\n        s = last_char + new_s\n    \n    # Return the count of odd numbers after rotating the binary string the given number of times\n    return count"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if nestedlist[i][j] in common_elements:\n                common_elements.remove(nestedlist[i][j])\n            else:\n                common_elements.append(nestedlist[i][j])\n\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if nestedlist[i][j] not in common and nestedlist[i][j] in nestedlist[j]:\n                common.append(nestedlist[i][j])\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Remove duplicates from nestedlist\n    nestedlist = list(set(nestedlist))\n    # Loop through each element of the nestedlist\n    for i in range(len(nestedlist)):\n        # Loop through the rest of the elements of the nestedlist\n        for j in range(i+1, len(nestedlist)):\n            # If both elements are equal, append them to a list\n            if nestedlist[i] == nestedlist[j]:\n                common_elements.append(nestedlist[i])\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if nestedlist[i][j] in common_elements:\n                common_elements.remove(nestedlist[i][j])\n            else:\n                common_elements.append(nestedlist[i][j])\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    # Initialize a set to store unique elements\n    unique_set = set()\n    # Loop through the nested list\n    for item in nestedlist:\n        # Check if the item is in the set\n        if item in unique_set:\n            # If it's already in the set, add it to the common list\n            common_list.append(item)\n        else:\n            # If it's not in the set, add it to the set and the common list\n            unique_set.add(item)\n            common_list.append(item)\n    # Return the common list\n    return common_list"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for item in nestedlist:\n        if all(elem in item for elem in common):\n            common = [elem for elem in common if elem in item]\n        else:\n            common = list(set(common).intersection(item))\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    # Create a set of all elements in the first list\n    set1 = set(nestedlist[0])\n    # Create a set of all elements in the second list\n    set2 = set(nestedlist[1])\n    # Find the intersection of the two sets\n    common_elements = set1.intersection(set2)\n    # Convert the set to a list\n    common_list = list(common_elements)\n    # Return the list of common elements\n    return common_list"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Convert the list to a set to remove duplicates\n    set_nestedlist = set(nestedlist)\n    \n    # Create an empty set to store the common elements\n    common = set()\n    \n    # Loop through the nested list and find the common elements\n    for i in nestedlist:\n        for j in nestedlist:\n            if i in j and j in set_nestedlist:\n                common.add(i)\n                break\n    \n    # Convert the common set to a list and return it\n    return list(common)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for i in nestedlist:\n        if len(common) == 0:\n            common = i\n        else:\n            common = list(set(i) & set(common))\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            for k in range(len(nestedlist)):\n                if nestedlist[i][j] in nestedlist[k] and nestedlist[k][j] not in common_elements:\n                    common_elements.append(nestedlist[i][j])\n    return common_elements"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_integer(text):\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        num = int(text)\n        if num.bit_length() < 64:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_integer(text):\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    # Initialize a variable to store the count of empty dictionaries\n    empty_count = 0\n    \n    # Loop through each dictionary in the list\n    for dictionary in list1:\n        # Check if the dictionary is empty\n        if not dictionary:\n            # If it's empty, increment the empty count\n            empty_count += 1\n            \n    # If all dictionaries are empty, return True\n    if empty_count == len(list1):\n        return True\n    # Otherwise, return False\n    else:\n        return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for item in list1:\n        if not item:\n            return True\n    return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    all_empty = True\n    \n    for i in list1:\n        if not i:\n            all_empty = False\n            break\n        \n    return all_empty"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    \"\"\"\n    This function takes a list of dictionaries as an argument and returns True if all dictionaries in the list are empty, False otherwise.\n    \"\"\"\n    for i in list1:\n        if len(i)!= 0:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if not i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for item in list1:\n        if item:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dict in list1:\n        if dict:  # if dictionary is not empty\n            return False  # return False if one dictionary is not empty\n    return True  # return True if all dictionaries are empty"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    if type(nums)!= tuple:\n        raise TypeError('The input must be a tuple.')\n    if len(nums) == 0:\n        raise ValueError('The input tuple must contain at least one element.')\n    if len(nums) > 255:\n        raise ValueError('The input tuple must contain at most 255 elements.')\n    \n    total = 0\n    for num in nums:\n        if type(num)!= int:\n            raise TypeError('All elements in the input tuple must be integers.')\n        if num < 0:\n            raise ValueError('All elements in the input tuple must be positive integers.')\n        total += num\n    \n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    # Convert the tuple to a list\n    nums_list = list(nums)\n    \n    # Initialize the result as 0\n    result = 0\n    \n    # Iterate over the list and add the values to the result\n    for num in nums_list:\n        result += num\n        \n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    # initialize an empty integer variable to store the final result\n    result = 0\n    \n    # iterate through each element in the input tuple\n    for num in nums:\n        # check if the element is a positive integer\n        if isinstance(num, int) and num > 0:\n            # add the element to the result variable\n            result += num\n    \n    # return the final result\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    total = 0\n    for num in nums:\n        total += num\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    int_sum = 0\n    for num in nums:\n        int_sum += num\n    return int_sum"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    total = 0\n    for num in nums:\n        total += num\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # initialize a variable to store the sum of the integers in the tuple\n    total = 0\n    \n    # iterate over the tuple and add each integer to the total variable\n    for num in nums:\n        total += num\n    \n    # return the total sum of all the integers in the tuple\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    total = 0\n    for num in nums:\n        total += num\n    return total"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    new_list = []\n    for sublist in test_list:\n        for item in sublist:\n            if isinstance(item, float):\n                new_list.append(item)\n    return new_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for sublist in test_list:\n        for item in sublist:\n            try:\n                float(item)\n            except ValueError:\n                print(item, 'cannot be converted to float')\n            else:\n                sublist[sublist.index(item)] = float(item)\n"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    converted_list = []\n\n    for item in test_list:\n        if isinstance(item, str):\n            converted_list.append(float(item))\n        elif isinstance(item, list):\n            converted_list.append(list_to_float(item))\n        else:\n            converted_list.append(item)\n\n    return converted_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Convert all possible convertible elements in a list of lists to floats.\n    '''\n    result = []\n    for sublist in test_list:\n        for element in sublist:\n            try:\n                result.append(float(element))\n            except ValueError:\n                pass\n    return result"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for row in test_list:\n        for element in row:\n            if isinstance(element, str):\n                try:\n                    element = float(element)\n                except ValueError:\n                    pass\n            elif isinstance(element, list):\n                list_to_float(element)\n            elif isinstance(element, tuple):\n                list_to_float(list(element))\n            elif isinstance(element, float):\n                pass\n            else:\n                try:\n                    element = float(str(element))\n                except ValueError:\n                    pass\n                row.remove(element)\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                float(test_list[i][j])\n            except ValueError:\n                try:\n                    test_list[i][j] = float(test_list[i][j])\n                except ValueError:\n                    pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    # loop through all elements in the list\n    for element in test_list:\n        # check if the element is convertible to float\n        try:\n            float(element)\n            # if it is, convert it to a float and append it to the new list\n            new_list.append(float(element))\n        except ValueError:\n            # if it's not convertible to float, skip it and move on to the next element\n            continue\n    # return the new list of floats\n    return new_list"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_list(string):\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    # Split the string on the space character\n    words = string.split()\n    # Convert each word to a list of characters\n    word_list = [list(word) for word in words]\n    return word_list"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    i = 0\n    while i < len(arr):\n        if arr[i] == arr[i+1]:\n            arr.pop(i+1)\n        else:\n            i += 1\n    return arr[0]"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    \n    for i in range(len(arr)-1):\n        if arr[i] == arr[i+1]:\n            return arr[i]\n    \n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Initialize a dictionary to store the count of each element in the array\n    count = {}\n    for i in arr:\n        # If the element is not in the dictionary, add it with a count of 1\n        if i not in count:\n            count[i] = 1\n        # If the element is already in the dictionary, increment its count by 1\n        else:\n            count[i] += 1\n    \n    # Find the element that appears only once in the array\n    for i in arr:\n        if count[i] == 1:\n            return i\n    \n    # If no element appears only once in the array, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    for i in range(len(arr)):\n        if i == 0 or arr[i]!= arr[i-1]:\n            if i == len(arr)-1 or arr[i+1]!= arr[i]:\n                return arr[i]\n    return -1"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def search(arr):\n    \"\"\"\n    Find the element that appears only once in a sorted array.\n\n    :param arr: the sorted array to search in\n    :type arr: list[int]\n    :return: the element that appears only once in the array or None if none is found\n    :rtype: int|None\n    \"\"\"\n    # Use a dictionary to count the frequency of each element in the array\n    freq = {}\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # Iterate over the dictionary to find the element that appears only once\n    for num in freq:\n        if freq[num] == 1:\n            return num\n\n    # If no element appears only once, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    unique = 0\n    for i in range(len(arr)):\n        if i == 0 or arr[i]!= arr[i - 1]:\n            unique += 1\n            if unique == 2:\n                return arr[i]\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    if len(arr) < 2:\n        return None\n    \n    # Initialize two variables to keep track of the first and last occurrences of the element\n    first = last = None\n    \n    # Loop through the array\n    for i in range(1, len(arr)):\n        # Check if the element is equal to the current element\n        if arr[i] == arr[i-1]:\n            # If it is, update the last occurrence of the element\n            if last is None:\n                last = i\n            else:\n                # If there is already a last occurrence, it means the element appears more than once in the array\n                return arr[i]\n        else:\n            # If the element is not equal to the current element, update the first and last occurrences of the element\n            if first is None:\n                first = i\n            last = i\n    \n    # If the loop completes without returning, it means the element appears only once in the array\n    return arr[last]"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # initialize a dictionary to store the frequency of each element in the array\n    freq = {}\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    \n    # iterate through the dictionary and return the key with frequency 1\n    for key in freq:\n        if freq[key] == 1:\n            return key"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    count = [0] * 1000  # array to store the count of each element in the array\n    \n    # loop through the array\n    for i in range(n):\n        # if the element has already been encountered, decrement its count\n        if count[arr[i]] > 0:\n            count[arr[i]] -= 1\n            \n        # if the element has not been encountered, increment its count\n        else:\n            count[arr[i]] = 1\n            \n    # loop through the array again to find the element that appears only once\n    for i in range(n):\n        # if the count of the element is equal to 1, return the element\n        if count[arr[i]] == 1:\n            return arr[i]\n            \n    # if no element appears only once, return -1\n    return -1"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    # Initialize variables to store the element that appears only once and its count\n    unique_element = -1\n    count = 0\n    \n    # Iterate through the array and check if the current element is the only element that appears only once\n    for i in range(len(arr)):\n        if arr[i] == arr[i+1]:\n            count += 1\n            if count == 1:\n                unique_element = arr[i]\n    \n    return unique_element"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    # Initialize variables for maximum product and maximum absolute product\n    max_product = float('-inf')\n    max_abs_product = float('-inf')\n    \n    # Loop through each tuple in the list\n    for tup in list1:\n        # Extract the first and second elements of the tuple\n        a, b = tup\n        \n        # Calculate the absolute value of the product of the two elements\n        abs_product = abs(a * b)\n        \n        # Update the maximum product and maximum absolute product as necessary\n        if abs_product > max_abs_product:\n            max_product = tup\n            max_abs_product = abs_product\n        elif abs_product > max_product:\n            max_product = tup\n            \n    # Return the maximum product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = -1\n    max_pair = []\n\n    for i in range(len(list1)):\n        for j in range(i + 1, len(list1)):\n            product = abs(list1[i][0] * list1[j][0])\n            if product > max_product:\n                max_product = product\n                max_pair = [(list1[i][0], list1[j][0]), (list1[i][1], list1[j][1])]\n\n    return max_pair"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if abs(product) > max_product:\n                max_product = abs(product)\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i]*list1[j])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_prod = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0]*list1[j][1])\n            if product > max_prod:\n                max_prod = product\n    return max_prod"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0]*list1[j][1])\n            max_product = max(max_product, product)\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    \n    # Initialize variables\n    max_product = float('-inf')\n    max_pair = float('-inf'), float('-inf')\n    \n    # Iterate through the list of tuples\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # Calculate the product and store it in the max_product variable\n            product = list1[i][0] * list1[j][0]\n            \n            # Check if the product is greater than the current maximum product\n            if product > max_product:\n                max_product = product\n                max_pair = (list1[i][0], list1[j][0])\n    \n    # Return the maximum product and the pair of numbers that maximize the product\n    return max_product, max_pair"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    # Initialize variables to store the maximum product of two tuples and the maximum absolute product\n    max_product = float('-inf')\n    max_abs_product = float('-inf')\n    # Loop through each tuple in the list\n    for i in range(len(list1)):\n        # Loop through each other tuple in the list\n        for j in range(i+1, len(list1)):\n            # Calculate the absolute value of the difference between the first and second elements of each tuple\n            abs_diff = abs(list1[i][0] - list1[j][0])\n            # Calculate the product of the two tuples\n            product = list1[i][1] * list1[j][1]\n            # Update the maximum absolute product if the current absolute product is greater\n            if abs_diff > max_abs_product:\n                max_abs_product = abs_diff\n            # Update the maximum product if the current product is greater\n            if product > max_product:\n                max_product = product\n    # Return the maximum absolute product\n    return max_abs_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n\n    # initialize variables\n    max_product = -1\n    max_pair = (0, 0)\n\n    # loop through the list\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # calculate the absolute product of the two numbers\n            product = abs(list1[i] * list1[j])\n\n            # update the max product and pair if necessary\n            if product > max_product:\n                max_product = product\n                max_pair = (list1[i], list1[j])\n\n    # return the max pair of numbers\n    return max_pair"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0]*list1[j][1])\n            max_product = max(max_product, product)\n    return max_product"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n\n    # List to store amicable numbers\n    amicable = []\n\n    # Loop through numbers from 1 to the specified limit\n    for i in range(1, limit+1):\n        # Check if the number is amicable\n        if is_amicable(i):\n            amicable.append(i)\n\n    # Sum up the amicable numbers and return the result\n    return sum(amicable)\n\ndef is_amicable(num):\n    '''\n    Check if a number is amicable or not.\n    '''\n\n    # Check if the number is divisible by any number in the range of 1 to the square root of the number\n    for i in range(1, int(num**0.5)+1):\n        if num % i == 0:\n            if num // i == i:\n                # If the number is divisible by both i and its square root, it's an amicable number\n                return True\n\n    # If the number is not divisible by any number in the range of 1 to the square root of the number, it's not an amicable number\n    return False"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_prime(num):\n    \"\"\"\n    A function to check whether a given number is prime or not.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef sum_amicable_numbers(limit):\n    \"\"\"\n    A function to sum all the amicable numbers from 1 to a specified number.\n    \"\"\"\n    amicable_numbers = set()\n    for i in range(1, limit + 1):\n        if is_prime(i) and is_prime(limit - i):\n            amicable_numbers.add(i)\n            amicable_numbers.add(limit - i)\n    return sum(amicable_numbers)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_amicable_pair(num):\n    '''\n    Returns True if num is an amicable pair, False otherwise.\n    '''\n    sum_of_num = sum(range(1, num))\n    if num == sum_of_num:\n        return True\n    else:\n        return False\n\ndef amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    total_sum = 0\n    for num in range(1, limit):\n        if is_amicable_pair(num):\n            total_sum += num\n    return total_sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # initialize the sum of amicable numbers to zero\n    amicable_sum = 0\n\n    # loop through all numbers from 1 to the specified limit\n    for num in range(1, limit + 1):\n        # check if the number is a perfect square\n        square = int(num ** 0.5)\n        if square * square == num:\n            # check if the number is also a prime\n            if num % 2 == 0 or all(num % i!= 0 for i in range(3, int(num ** 0.5) + 1, 2)):\n                # if the number is a prime, check if it is an amicable number\n                for i in range(1, limit + 1):\n                    if num + i == square:\n                        amicable_sum += num + i\n\n    # return the sum of amicable numbers\n    return amicable_sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    # Define a dictionary to store all the prime numbers\n    primes = {}\n\n    # Check all numbers from 2 to limit - 1\n    for i in range(2, limit):\n        # Check if i is prime\n        is_prime = True\n        for j in range(2, int(i ** 0.5) + 1):\n            if i % j == 0:\n                is_prime = False\n                break\n        # If i is prime, add it to the list of primes\n        if is_prime:\n            primes[i] = i\n\n    # Calculate the sum of all amicable numbers\n    sum_amicable = 0\n    for i in primes:\n        if primes[i] in primes:\n            j = primes[i]\n            if i + j == 1:\n                continue\n            sum_amicable += i + j\n\n    return sum_amicable"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    sum_of_amicable = 0\n    for i in range(1, limit):\n        if i == 1:\n            continue\n        elif i == 2:\n            sum_of_amicable += i\n        else:\n            if i % 2 == 0:\n                j = 3\n                while j < i:\n                    if i % j == 0:\n                        break\n                    j += 2\n                else:\n                    sum_of_amicable += i\n    return sum_of_amicable"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # create a list of all numbers from 1 to limit\n    numbers = list(range(1, limit+1))\n\n    # loop through the numbers list and check if each number is amicable\n    for num in numbers:\n        # if the number is not divisible by any number between 1 and its square root, it is not amicable\n        for i in range(1, int(num**0.5)+1):\n            if num % i == 0:\n                break\n        else:\n            # if no divisor was found, the number is amicable and added to the sum\n            if num in numbers:\n                print(num)\n                sum_amicable += num\n\n    # return the sum of all amicable numbers found\n    return sum_amicable"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum_of_amicable = 0\n    for num in range(1, limit+1):\n        if num == sum_of_amicable:\n            continue\n        elif num == 1:\n            continue\n        elif sum_of_amicable == 0:\n            sum_of_amicable = num\n        else:\n            a, b = sum_of_amicable, num\n            while b!= 0:\n                a, b = b, a % b\n            if a == num:\n                sum_of_amicable += num\n    return sum_of_amicable"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n\n    # Create a list of all numbers from 1 to the specified limit\n    numbers = list(range(1, limit+1))\n\n    # Iterate over the numbers and check if each number is a perfect square\n    for num in numbers:\n        is_square = True\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                is_square = False\n                break\n        if is_square and num!= 1:\n            print(num)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    # initialize variables\n    sum_of_amicable = 0\n    count = 0\n    \n    # loop through numbers from 1 to limit\n    for i in range(1, limit+1):\n        # check if the number is amicable\n        if is_amicable(i):\n            # add the number to the sum if it's even\n            if i % 2 == 0:\n                sum_of_amicable += i\n            # increment the count if it's odd\n            count += 1\n    \n    # return the sum of amicable numbers\n    return sum_of_amicable\n\ndef is_amicable(num):\n    \"\"\"\n    Check if a number is amicable by dividing it by the sum of all its proper divisors.\n    \"\"\"\n    # initialize variables\n    sum_of_divisors = 0\n    divisors = [1]\n    \n    # check for divisors from 1 to the square root of the number\n    for i in range(1, int(num**0.5)+1):\n        if num % i == 0:\n            # add the divisor to the list if it's not already there\n            if i not in divisors:\n                divisors.append(i)\n            # add the multiple of the divisor to the sum\n            sum_of_divisors += i*i\n    \n    # check if the sum of divisors is equal to the number\n    if sum_of_divisors == num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # Calculate the magnitude of the complex number\n    magnitude = cmath.sqrt(a**2 + b**2)\n    # Calculate the angle of the complex number\n    angle = cmath.phase(a+b*1j)\n    # Convert the angle to degrees\n    angle_degrees = angle * 180 / cmath.pi\n    # Return the angle in degrees\n    return angle_degrees"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    # calculate the complex conjugate of the second complex number\n    conj = a.conjugate()\n    # calculate the complex multiplication of the two complex numbers\n    prod = a * conj\n    # calculate the magnitude of the product\n    mag = cmath.sqrt(prod.real**2 + prod.imag**2)\n    # calculate the angle of the product as the arctangent of the imaginary part\n    angle = cmath.phase(prod)\n    # convert the angle from radians to degrees\n    angle = cmath.degrees(angle)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    This function calculates the angle of a complex number.\n    '''\n    angle = cmath.phase(a + b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # calculate the complex conjugate of b and calculate the angle using the arg() method\n    angle = cmath.phase(b/cmath.exp(cmath.j*cmath.phase(a)))\n    # return the angle as a float\n    return float(angle.real)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # Calculate the modulus of the complex number\n    modulus = cmath.sqrt(a*a + b*b)\n    \n    # Calculate the angle of the complex number\n    angle = cmath.phase(modulus)\n    \n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a + b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 7,
        "answer": ""
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a + b*1j)\n    angle = angle.real\n    angle = angle*180/cmath.pi\n    \n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return angle"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_length(string): \n    # Convert the string to binary format\n    binary = bin(int(string, 2))[2:]\n\n    # Initialize variables to store the counts of 0s and 1s\n    zero_count = 0\n    one_count = 0\n\n    # Initialize variables to store the maximum difference and its index\n    max_diff = 0\n    max_index = -1\n\n    # Traverse the binary string from right to left\n    for i in range(len(binary)-1, -1, -1):\n        if binary[i] == '0':\n            zero_count += 1\n        else:\n            one_count += 1\n\n        # Calculate the maximum difference and its index\n        diff = abs(zero_count - one_count)\n        if diff > max_diff:\n            max_diff = diff\n            max_index = i\n\n    # Return the maximum difference and its index\n    return max_diff, max_index"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_length(string):\n    # Initialize variables for keeping track of number of 0s and 1s\n    zeros = 0\n    ones = 0\n    \n    # Iterate through the string\n    for char in string:\n        # Check if the current character is a 0 or a 1\n        if char == '0':\n            zeros += 1\n        else:\n            ones += 1\n            \n        # Update the maximum difference found so far\n        max_diff = max(max_diff, abs(zeros - ones))\n    \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    count_0 = 0\n    count_1 = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n        if count_0 > count_1:\n            count_0 = 0\n        else:\n            count_1 = 0\n        diff = abs(count_0 - count_1)\n        max_diff = max(max_diff, diff)\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    length = 0\n    count = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count += 1\n        else:\n            length = max(length, count)\n            count = 0\n    length = max(length, count)\n    return length"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    n = len(string)\n    count = [0] * 2  # initialize count for 0s and 1s\n    \n    for i in range(n):\n        if string[i] == '0':\n            count[0] += 1\n        else:\n            count[1] += 1\n            \n    max_diff = 0\n    for i in range(1, n):\n        if string[i] == '0':\n            count[0] += 1\n        else:\n            count[1] += 1\n            \n        diff = abs(count[0] - count[1])\n        max_diff = max(diff, max_diff)\n        \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_length(string):\n    # initialize count of 0s and 1s\n    zero_count = 0\n    one_count = 0\n\n    # iterate through each character in the string\n    for char in string:\n        # if the character is a 0, increment the count of 0s\n        if char == '0':\n            zero_count += 1\n        # if the character is a 1, increment the count of 1s\n        elif char == '1':\n            one_count += 1\n        # if the character is neither 0 nor 1, it's not part of the sub-string, so we can ignore it\n        else:\n            continue\n\n        # if we've reached the end of the sub-string, compare the counts and update the maximum difference if necessary\n        if one_count == 0:\n            return 0  # if there are no 1s, the sub-string can have no differences\n        max_diff = abs(zero_count - one_count)\n        if max_diff > max_length:\n            max_length = max_diff\n\n    return max_length"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    max_diff = 0\n    length = len(string)\n\n    for i in range(length):\n        count_0 = 0\n        count_1 = 0\n\n        for j in range(i, length):\n            if string[j] == '0':\n                count_0 += 1\n            else:\n                count_1 += 1\n\n            diff = abs(count_0 - count_1)\n            if diff > max_diff:\n                max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    \n    # Initialize variables\n    max_diff = 0\n    count_0 = 0\n    count_1 = 0\n    \n    # Loop through each character in the string\n    for char in string:\n        # If the character is a 0, increment the count_0 variable\n        if char == '0':\n            count_0 += 1\n        # If the character is a 1, increment the count_1 variable\n        else:\n            count_1 += 1\n        \n        # Calculate the difference between the count_0 and count_1 variables\n        diff = count_1 - count_0\n        \n        # Update the maximum difference if the current difference is greater than the previous maximum difference\n        if diff > max_diff:\n            max_diff = diff\n    \n    # Return the maximum difference found\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_length(string):\n    # Initialize variables to store the count of 0s and 1s in the string\n    zero_count = 0\n    one_count = 0\n\n    # Loop through each character in the string\n    for char in string:\n        # If the character is a 0, increment the zero_count\n        if char == '0':\n            zero_count += 1\n        # If the character is a 1, increment the one_count\n        elif char == '1':\n            one_count += 1\n\n        # If the zero_count is greater than the one_count, update the maximum difference\n        if zero_count > one_count:\n            max_diff = one_count - zero_count\n        else:\n            max_diff = zero_count - one_count\n\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count_0 = 0\n    count_1 = 0\n    max_diff = 0\n\n    for char in string:\n        if char == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n        diff = abs(count_0 - count_1)\n        if diff > max_diff:\n            max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    common_divisors = []\n    for i in range(min(a,b),max(a,b)+1):\n        if a%i == 0 and b%i == 0:\n            common_divisors.append(i)\n    return sum(common_divisors)\n\nprint(sum(24,60))"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    divisors_set = set()\n    for i in range(1, a + 1):\n        if a % i == 0 and b % i == 0:\n            divisors_set.add(i)\n    return sum(divisors_set)\n\na = int(input(\"Enter first number: \"))\nb = int(input(\"Enter second number: \"))\nresult = sum(a, b)\nprint(\"The sum of common divisors of\", a, \"and\", b, \"is\", result)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum(a, b):\n    \"\"\"\n    This function finds the sum of common divisors of two given numbers.\n    \"\"\"\n    def gcd(x, y):\n        \"\"\"\n        This function finds the greatest common divisor of two numbers.\n        \"\"\"\n        while y:\n            x, y = y, x % y\n        return x\n\n    # Find the GCD of a and b\n    gcd_val = gcd(a, b)\n\n    # Calculate the sum of common divisors\n    sum_val = (gcd_val * (a // gcd_val) + (b // gcd_val)) // gcd_val\n\n    return sum_val"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    divisors_set = set()\n    divisors_set.add(a)\n    divisors_set.add(b)\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            divisors_set.add(i)\n    return sum(divisors_set)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    \n    if a % b == 0:\n        return b + sum(a // b, b)\n    else:\n        return sum(a, b - 1)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_common_divisors(a, b):\n    '''\n    This function takes two positive integer arguments a and b and returns their sum of their common divisors.\n    '''\n\n    # Function to check if a number is a common divisor of two numbers\n    def is_common_divisor(num, div1, div2):\n        return (num % div1 == 0) and (num % div2 == 0)\n\n    # Function to find common divisors of two numbers\n    def find_common_divisors(num1, num2):\n        divisors = []\n        for i in range(1, num1+1):\n            if is_common_divisor(num1, i, num2):\n                divisors.append(i)\n        return divisors\n\n    # Find common divisors of a and b\n    common_divisors_a = find_common_divisors(a, b)\n    common_divisors_b = find_common_divisors(b, a)\n\n    # Return their sum\n    return sum(common_divisors_a) + sum(common_divisors_b)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    divisors = []\n    for i in range(1, b + 1):\n        if a % i == 0 and b % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n\n    # Using the Euclidean algorithm to find the common divisor\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    # Finding the GCD of a and b\n    gcd_ab = gcd(a, b)\n\n    # Finding the sum of all common divisors of a and b\n    sum_cd = 0\n    for i in range(1, gcd_ab+1):\n        if gcd_ab % i == 0 and a % i == 0 and b % i == 0:\n            sum_cd += i\n\n    # Returning the sum of all common divisors\n    return sum_cd"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum(a, b):\n    def gcd(a, b):\n        if b == 0:\n            return a\n        else:\n            return gcd(b, a % b)\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    def common_divisors(a, b):\n        return [x for x in range(min(a, b), max(a, b) + 1) if x % a == 0 or x % b == 0]\n\n    def sum_of_common_divisors(a, b):\n        cd = common_divisors(a, b)\n        return sum(cd)\n\n    cd = common_divisors(a, b)\n    common_sum = sum_of_common_divisors(max(cd), min(cd))\n    return common_sum"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_of_common_divisors(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    common_divisors = set(divisors(a) & divisors(b))\n    return sum(common_divisors)\n\ndef divisors(n):\n    '''\n    Write a python function to find all the divisors of a given number.\n    '''\n    return set(range(1, n+1)) - {1}"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    for i in range(x):\n        result += y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    This function takes two integer inputs and returns their product.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers.\n    \"\"\"\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    for i in range(y):\n        result += x\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers.\n    \"\"\"\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Returns a list of words that are longer than n characters from the given list of words.\n    \"\"\"\n    return [word for word in words if len(word) > n]"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n    \"\"\"\n    longer_words = []\n    for word in words:\n        if len(word) > n:\n            longer_words.append(word)\n    return longer_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def long_words(n, words):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n\n    # Split the string into a list of words\n    words = str.split()\n\n    # Initialize an empty list to store the long words\n    long_words_list = []\n\n    # Loop through each word in the list\n    for word in words:\n        # Check if the length of the word is longer than n\n        if len(word) > n:\n            # Append the long word to the list\n            long_words_list.append(word)\n\n    # Return the list of long words\n    return long_words_list"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n\n    # Split the string into words\n    words = str.split()\n\n    # Initialize an empty list to store long words\n    long_words = []\n\n    # Loop through each word in the list\n    for word in words:\n        # Check if the length of the word is longer than n\n        if len(word) > n:\n            # If it is, add it to the list of long words\n            long_words.append(word)\n\n    # Return the list of long words\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def long_words(n, words):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def long_words(n, words):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words_list = []\n    for word in words:\n        if len(word) > n:\n            long_words_list.append(word)\n    return long_words_list"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Find words that are longer than n characters from a given list of words.\n\n    Parameters:\n    n (int): The maximum number of characters for words.\n    words (list): A list of words.\n\n    Returns:\n    list: A list of words that are longer than n characters.\n    \"\"\"\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def long_words(n, words):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [word for word in words if len(word) > n]"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Define the sum of the diagonal elements\n    diagonal_sum = sum(sum(row) for row in my_matrix)\n    \n    # Check if the diagonal sum is equal to the sum of the row and column sums\n    for i in range(len(my_matrix)):\n        row_sum = sum(my_matrix[j][i] for j in range(len(my_matrix)))\n        col_sum = sum(my_matrix[i][j] for j in range(len(my_matrix)))\n        if row_sum!= col_sum or diagonal_sum!= row_sum or diagonal_sum!= col_sum:\n            return False\n    \n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    rows = len(my_matrix)\n    cols = len(my_matrix[0])\n    for i in range(rows):\n        for j in range(cols):\n            # Check if the value at cell (i, j) is equal to the sum of the row and column it belongs to\n            if my_matrix[i][j]!= sum(my_matrix[i][k] + my_matrix[k][j] for k in range(rows)) + my_matrix[i][j]:\n                return False\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    \"\"\"\n    Determine whether the given matrix is a magic square.\n\n    Returns True if the matrix is a magic square, and False otherwise.\n    \"\"\"\n    n = len(my_matrix)\n    # Check if the matrix is a square\n    if n!= len(my_matrix[0]):\n        return False\n\n    # Check if each row, column, and diagonal are all the same\n    for i in range(n):\n        row_sum = sum(my_matrix[i])\n        col_sum = sum(my_matrix[j] for j in range(n))\n        diag_sum = sum(my_matrix[k][k] for k in range(n))\n        if row_sum!= col_sum or col_sum!= diag_sum:\n            return False\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    # Check if the matrix is square\n    if n!= len(my_matrix[0]):\n        return False\n    # Check if the matrix is symmetric\n    for i in range(n):\n        for j in range(n):\n            if my_matrix[i][j]!= my_matrix[j][i]:\n                return False\n    # Check if the matrix has all elements from 1 to n*n\n    for i in range(n):\n        for j in range(n):\n            if my_matrix[i][j] < 1 or my_matrix[i][j] > n*n:\n                return False\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    rows = len(my_matrix)\n    cols = len(my_matrix[0])\n    magic_sum = rows*cols\n    magic_matrix = [[0 for j in range(cols)] for i in range(rows)]\n    \n    for i in range(rows):\n        for j in range(cols):\n            magic_matrix[i][j] = my_matrix[i][j] + i*cols + j\n    \n    for i in range(rows):\n        for j in range(cols):\n            if magic_matrix[i][j]!= magic_sum:\n                return False\n    \n    for i in range(rows):\n        magic_row_sum = sum(magic_matrix[i])\n        if magic_row_sum!= magic_sum:\n            return False\n    \n    for j in range(cols):\n        magic_col_sum = sum(magic_matrix[i][j] for i in range(rows))\n        if magic_col_sum!= magic_sum:\n            return False\n    \n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    # Check if the matrix is a square\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n\n    # Check if the matrix has 15 distinct elements\n    distinct_elements = set()\n    for row in my_matrix:\n        for element in row:\n            if element in distinct_elements:\n                return False\n            distinct_elements.add(element)\n\n    # Check if the matrix forms a magic square\n    magic_sum = 15\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix)):\n            if my_matrix[i][j] == magic_sum:\n                magic_sum += 1\n                if magic_sum > 45:\n                    return True\n    return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    # Check if the matrix is a 3x3 square\n    if len(my_matrix)!= 3 or len(my_matrix[0])!= 3:\n        return False\n\n    # Calculate the sum of the matrix elements\n    sum_elements = sum(sum(row) for row in my_matrix)\n\n    # Check if the sum of the matrix elements is equal to 15\n    if sum_elements!= 15:\n        return False\n\n    # Calculate the sum of the matrix diagonals\n    diag_sum1 = my_matrix[0][0] + my_matrix[1][1] + my_matrix[2][2]\n    diag_sum2 = my_matrix[0][2] + my_matrix[1][1] + my_matrix[2][0]\n\n    # Check if the sum of the matrix diagonals is equal to 15\n    if diag_sum1!= 15 or diag_sum2!= 15:\n        return False\n\n    # All checks passed, so the matrix is a magic square\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if the matrix has 3 rows and 3 columns\n    if len(my_matrix)!= 3:\n        return False\n    \n    # Check if each row, column, and sub-square is a magic square\n    for i in range(3):\n        if not is_magic_square(my_matrix[i]):\n            return False\n    \n    # Check if the matrix is a magic square\n    def is_magic_square(row):\n        magic_row = [0] * 3\n        for j in range(3):\n            if magic_row[row[j]-1]!= 0:\n                return False\n            magic_row[row[j]-1] = j+1\n        return True\n    \n    for i in range(3):\n        if not is_magic_square(my_matrix[i]):\n            return False\n    \n    for i in range(3):\n        magic_square = [0] * 9\n        for j in range(3):\n            magic_square[i*3+j] = my_matrix[j][i]\n        if not is_magic_square(magic_square):\n            return False\n    \n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    \"\"\"\n    Write a function to calculate whether the matrix is a magic square.\n    \"\"\"\n    row_sums = [0] * len(my_matrix[0])\n    col_sums = [0] * len(my_matrix)\n    \n    # Check if the matrix is a magic square by checking the row and column sums\n    for i in range(len(my_matrix)):\n        row_sums[0] += my_matrix[i][0]\n        col_sums[i] += my_matrix[0][i]\n        \n        for j in range(1, len(my_matrix[0])):\n            row_sums[j] += my_matrix[i][j]\n            col_sums[j] += my_matrix[j][i]\n        \n        if row_sums!= col_sums:\n            return False\n            \n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n\n    n = len(my_matrix)\n\n    # Check if all rows have the same length\n    for i in range(n):\n        if len(my_matrix[i])!= n:\n            return False\n\n    # Check if all columns have the same length\n    for j in range(n):\n        col = [row[j] for row in my_matrix]\n        if len(set(col))!= 1:\n            return False\n\n    # Check if all diagonals have the same length\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                diag = [my_matrix[i][j], my_matrix[j][i]]\n                if len(set(diag))!= 1:\n                    return False\n            elif i + j == n - 1:\n                diag = [my_matrix[i][j], my_matrix[n-1-i][n-1-j]]\n                if len(set(diag))!= 1:\n                    return False\n\n    return True"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_count = max(freq.values())\n    for num, count in freq.items():\n        if count == max_count:\n            return num\n    return None"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    frequency_dict = defaultdict(int)\n    for num in nums:\n        frequency_dict[num] += 1\n    \n    max_freq = 0\n    max_item = None\n    for num, freq in frequency_dict.items():\n        if freq > max_freq:\n            max_freq = freq\n            max_item = num\n    \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    max_freq = 0\n    max_item = None\n    for num in nums:\n        freq_dict[num] += 1\n        if freq_dict[num] > max_freq:\n            max_freq = freq_dict[num]\n            max_item = num\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_num = None\n    max_count = 0\n    for num, count in freq.items():\n        if count > max_count:\n            max_num = num\n            max_count = count\n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    count = defaultdict(int)\n    max_item = None\n    max_count = 0\n    \n    for num in nums:\n        count[num] += 1\n        \n        if count[num] > max_count:\n            max_count = count[num]\n            max_item = num\n    \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n    max_freq = 0\n    max_num = None\n    for num, freq in freq_dict.items():\n        if freq > max_freq:\n            max_freq = freq\n            max_num = num\n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_num = max(freq, key=freq.get)\n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Create a defaultdict to store the frequency of each item in the list\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    \n    # Find the item with the maximum frequency in the list\n    max_item = None\n    max_freq = 0\n    for item, freq in freq.items():\n        if freq > max_freq:\n            max_freq = freq\n            max_item = item\n    \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    \n    max_item = None\n    max_count = 0\n    for item, count in freq.items():\n        if count > max_count:\n            max_item = item\n            max_count = count\n    \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    freq = defaultdict(int)\n    max_num = None\n    max_freq = 0\n    \n    for num in nums:\n        freq[num] += 1\n        if freq[num] > max_freq:\n            max_freq = freq[num]\n            max_num = num\n    \n    return max_num\n"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    vowel_reverse = \"\"\n    for char in str1:\n        if char.lower() in vowels:\n            vowel_reverse += char\n    return vowel_reverse[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    str2 = ''\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] not in vowels:\n            str2 += str1[i]\n    return str2"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] in vowels:\n            result += str1[i]\n    return result"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    vowel_set = set(vowels)\n    reversed_str = ''\n    for char in str1:\n        if char.lower() in vowel_set:\n            reversed_str = char.lower() + reversed_str\n        else:\n            reversed_str = char + reversed_str\n    return reversed_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    vowel_indices = []\n    for i in range(len(str1)):\n        if str1[i] in vowels:\n            vowel_indices.append(i)\n    vowel_indices.sort(reverse=True)\n    reversed_str = ''\n    for i in range(len(vowel_indices)):\n        reversed_str += str1[vowel_indices[i]]\n    return reversed_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    reverse_str = ''\n    for char in str1:\n        if char.lower() not in vowels:\n            reverse_str += char\n    return reverse_str[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    str1 = str1.lower()\n    result = []\n    for char in str1:\n        if char not in vowels:\n            result.append(char)\n    result.reverse()\n    return ''.join(result)"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    str2 = ''\n    for i in range(len(str1) - 1, -1, -1):\n        if str1[i] not in vowels:\n            str2 += str1[i]\n    return str2"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiouAEIOU'\n    result = []\n    for char in str1:\n        if char.lower() not in vowels:\n            result.append(char)\n    return ''.join(result[::-1])"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    new_str = \"\"\n    for char in str1:\n        if char.lower() not in vowels:\n            new_str = char + new_str\n    return new_str[::-1]"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    # convert tuple to list\n    lst = list(tup1)\n    # join list elements with comma and space\n    result = \", \".join(lst)\n    # return string\n    return result"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tup_string(tup):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return \", \".join(str(x) for x in tup)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    # Convert the tuple to a string using the str() method\n    str_tup = str(tup1)\n    \n    # Return the converted string\n    return str_tup"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # Convert the tuple to a string using the join() method\n    string = ''.join(str(x) for x in tup1)\n    return string"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # Convert the tuple to a string\n    string_tup = str(tup1)\n    return string_tup"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total = 0\n    for num in nums:\n        if num < 0:\n            total += num\n    return total"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    # Initialize the sum to zero\n    sum = 0\n    \n    # Loop through the list of numbers\n    for num in nums:\n        # If the number is negative, add it to the sum\n        if num < 0:\n            sum += num\n    \n    # Return the sum of negative numbers\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total_sum = 0\n    for num in nums:\n        if num < 0:\n            total_sum += num\n    return total_sum"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # initialize variables\n    a = 1\n    b = 6\n    \n    # find nth hexagonal number\n    for i in range(n):\n        a += b\n        b += a\n    \n    return a - b - 6"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # Initialize the first two numbers of the series\n    a = 1\n    b = 6\n    \n    # Calculate the nth number in the series\n    nth_num = (a**2 + b**2)**0.5\n    \n    # Return the nth_num value\n    return nth_num"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    return ((n - 1) // 2) * 6 + 1"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    hexagonal_num = 0\n    for i in range(n): \n        hexagonal_num += 6 * (2*i-1)\n    return hexagonal_num"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return 6*n*(n+1) + 6"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n % 2 == 0:\n        return n * (n - 1) + 6\n    else:\n        return n * (3 * n - 1) + 6"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n * (n + 1)) // 2"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # Base case: if n = 1, the first hexagonal number is 1.\n    if n == 1:\n        return 1\n\n    # Base case: if n = 2, the second hexagonal number is 6.\n    elif n == 2:\n        return 6\n\n    # Recursive case:\n    # For odd n, the nth hexagonal number is 2n^2 + 1.\n    elif n % 2!= 0:\n        return 2*n*n + 1\n\n    # For even n, the nth hexagonal number is 2n^2 + 6.\n    else:\n        return 2*n*n + 6"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n*(2*n-1))//2"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    a = 1\n    b = 1\n    for i in range(n):\n        c = a + b\n        a = b\n        b = c\n    return c"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # create an array to store non-zeroes\n    non_zeroes = array('i', [0] * len(nums))\n    # iterate over the input array and count non-zeroes in the output array\n    for num in nums:\n        if num!= 0:\n            non_zeroes[non_zeroes.index(num)] += 1\n    # calculate the ratio of zeroes to non-zeroes\n    zero_count = sum(non_zeroes) / len(non_zeroes)\n    return zero_count"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = array('i')  # initialize an integer array to store the zeros\n    ones = array('i')   # initialize another integer array to store the ones\n    \n    # iterate through the array and count the number of zeros and ones\n    for num in nums:\n        if num == 0:\n            zeros.append(1)\n        else:\n            ones.append(1)\n    \n    # calculate the ratio of zeros to non-zeros\n    if zeros == []:  # if the array is empty, the ratio is zero\n        ratio = 0\n    else:\n        ratio = zeros[0] / (zeros[0] + ones[0])\n    \n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\n\ndef zero_count(nums):\n    \"\"\"\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    \"\"\"\n    zeros = 0\n    non_zeros = 0\n    \n    for num in nums:\n        if num == 0:\n            zeros += 1\n        else:\n            non_zeros += 1\n    \n    if non_zeros == 0:\n        return 0\n    \n    return zeros / non_zeros"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeroes = array('i', [0] * len(nums))\n    non_zeroes = array('i', [0] * len(nums))\n    \n    for num in nums:\n        if num == 0:\n            zeroes[zeroes.index(num)] += 1\n        else:\n            non_zeroes[non_zeroes.index(num)] += 1\n    \n    return non_zeroes[non_zeroes.index(0)] / zeroes[zeroes.index(0)]"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    non_zeros = 0\n    zeroes = 0\n\n    for num in nums:\n        if num!= 0:\n            non_zeros += 1\n        else:\n            zeroes += 1\n\n    non_zeros_ratio = non_zeros / (non_zeros + zeroes)\n\n    return non_zeros_ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # convert the array to a list to perform element-wise operations\n    nums = list(nums)\n    # initialize variables to keep track of non-zeroes and zeroes\n    non_zero_count = 0\n    zero_count = 0\n    # loop through the array and count non-zeroes and zeroes\n    for num in nums:\n        if num!= 0:\n            non_zero_count += 1\n        else:\n            zero_count += 1\n    # calculate the ratio of non-zeroes to zeroes\n    if non_zero_count == 0:\n        ratio = 0\n    else:\n        ratio = zero_count / non_zero_count\n    # return the ratio as a float rounded to two decimal places\n    return round(ratio, 2)"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = array('i', [0] * len(nums))\n    for num in nums:\n        if num == 0:\n            zeros[nums.index(num)] += 1\n    total_zeros = sum(zeros)\n    non_zeros = len(nums) - total_zeros\n    return non_zeros / total_zeros"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\n\ndef zero_count(nums):\n    \"\"\"\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    \"\"\"\n    non_zero_count = 0\n    zero_count = 0\n    \n    # iterate over the array and count the non-zeroes and zeroes\n    for num in nums:\n        if num!= 0:\n            non_zero_count += 1\n        else:\n            zero_count += 1\n            \n    # calculate the ratio of non-zeroes to zeroes\n    ratio = non_zero_count / zero_count if non_zero_count > 0 else 0\n    \n    # return the ratio as a float\n    return float(ratio)"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    arr = array('i', nums)\n    zeros = sum(arr == 0)\n    ones = len(arr) - zeros\n    return zeros/ones"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # convert the array to a list to make it mutable\n    nums = list(nums)\n\n    # count the number of zeroes and non-zeroes\n    zero_count = 0\n    non_zero_count = 0\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n\n    # calculate the ratio of zeroes to non-zeroes\n    ratio = float(zero_count) / non_zero_count\n\n    # return the ratio as a float\n    return ratio"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    # initialize sum variable to 0\n    sum = 0 \n\n    # loop through the number of bits in the number \n    for i in range(8): \n\n        # get the rightmost bit of the number \n        bit = n & 1 \n\n        # check if the rightmost bit is 0 \n        if bit == 0: \n\n            # if the rightmost bit is 0, add 2^i to the sum \n            sum += 1 << i \n\n        # shift the number to the left by 1 \n        n >>= 1 \n\n        # if the loop completes, the number can be represented as sum of non-zero powers of 2 \n        if n == 0: \n            return True \n\n    # if the loop completes without finding a way to represent the number as sum of non-zero powers of 2, return False \n    return False "
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    count = 0\n    while n > 0:\n        if n % 2 == 0:\n            n //= 2\n            count += 1\n        else:\n            break\n    return count > 0\n"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    def is_power_of_two(num):\n        '''\n        Helper function to check if a number is a power of two.\n        '''\n        return num & (num - 1) == 0\n\n    def is_sum_of_powers_of_two(num, power_of_two_count):\n        '''\n        Helper function to check if a number can be represented as sum of non-zero powers of 2 or not.\n        '''\n        if power_of_two_count == 0:\n            return True\n        elif num & 1 == 0:\n            return is_sum_of_powers_of_two(num // 2, power_of_two_count - 1)\n        else:\n            return False\n\n    if is_power_of_two(n):\n        return True\n    else:\n        return is_sum_of_powers_of_two(n, 31)"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # To check whether the given number can be represented as sum of non-zero powers of 2 or not, we need to check if it is divisible by 4.\n    if n % 4 == 0: \n        # If n is divisible by 4, then we can represent it as sum of non-zero powers of 2.\n        # We can do this by finding the number of 1s in binary representation of n and comparing it with the number of 1s in binary representation of 4.\n        # If the number of 1s in binary representation of n is greater than or equal to the number of 1s in binary representation of 4, then we can represent it as sum of non-zero powers of 2.\n        count_1s_n = bin(n).count('1')\n        count_1s_4 = bin(4).count('1')\n        if count_1s_n >= count_1s_4: \n            return True\n        else: \n            return False\n    else: \n        # If n is not divisible by 4, then we cannot represent it as sum of non-zero powers of 2.\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    # Initialize a variable to store the sum of powers of 2\n    total_sum = 0\n    # Loop through the number from 0 to n\n    for i in range(n+1):\n        # Check if the current number can be represented as the sum of powers of 2\n        if i % 2 == 0 and is_sum_of_powers_of_two(i):\n            # If it can be represented, add it to the total sum\n            total_sum += i\n    # If the total sum is equal to n, then it can be represented as the sum of powers of 2\n    return total_sum == n"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Convert the given number to binary string\n    binary_str = bin(n)[2:]\n\n    # Initialize the count of zeros in the binary string\n    count_zeros = 0\n\n    # Loop through the binary string and count the number of zeros\n    for i in range(len(binary_str)):\n        if binary_str[i] == '0':\n            count_zeros += 1\n\n    # Check if the number of zeros is odd or even\n    if count_zeros % 2 == 0:\n        # If it is even, it cannot be represented as sum of non-zero powers of 2\n        return False\n    else:\n        # If it is odd, it can be represented as sum of non-zero powers of 2\n        return True"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # check for 0 and 1 as they cannot be represented as sum of non-zero powers of 2\n    if n == 0 or n == 1:\n        return False\n\n    # check for 2^x^y and y>=1 as they are non-zero powers of 2\n    for y in range(1, int(n**0.5)+1):\n        if 2**y == n:\n            return True\n\n    # if not found, then it cannot be represented as sum of non-zero powers of 2\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    power_of_two = 1\n    while power_of_two <= n:\n        if n - power_of_two > 0 and n % power_of_two == 0:\n            return True\n        power_of_two <<= 1\n    return False\n"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Check if n is divisible by 2\n    if n % 2 == 0:\n        # If n is even, check if n can be represented as sum of non-zero powers of 2\n        for i in range(2, int(n**0.5)+1, 2):\n            if n == 2**i + 2**i:\n                return True\n        return False\n    else:\n        # If n is odd, check if n can be represented as sum of non-zero powers of 2\n        for i in range(1, int(n**0.5)+1, 2):\n            if n == 2**i + 2**i:\n                return True\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    # create a list of integers from 1 to n \n    nums = list(range(1, n+1))\n    # sort the list of integers in ascending order \n    nums.sort()\n    # initialize two pointers, left and right, at the beginning of the list \n    left = 0 \n    right = n-1\n    # initialize a variable sum to 0 \n    sum = 0\n    # check if the sum of the integers from left to right can be represented as sum of powers of 2 \n    while left <= right: \n        # add the current element of the list to the sum \n        sum += nums[left]\n        # if the sum is equal to the target number, return True \n        if sum == n: \n            return True\n        # if the sum is greater than the target number, set the left pointer to the next element of the list \n        elif sum > n: \n            left += 1\n        # if the sum is less than the target number, set the right pointer to the previous element of the list \n        else: \n            right -= 1\n    # if the loop completes without finding a solution, return False \n    return False"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r # approximate value using pi and radius\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    print(\"The circumference of the circle is:\", circumference)"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    pi = 3.141592653589793\n    circumference = 2 * pi * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*3.14159*r"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference\n"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2*3.14*r # pi * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r  # 2 * pi * r\n    return circumference"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = [item for sublist in test_list for item in sublist]\n    return set(flattened_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for sublist in test_list:\n        for num in sublist:\n            flat_list.append(num)\n    return flat_list\n"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n    \"\"\"\n    flattened_list = [num for sublist in test_list for num in sublist]\n    return flattened_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    # flatten the list of lists to a single list\n    flat_list = [item for sublist in test_list for item in sublist]\n    # convert the flattened list to a set to remove duplicates\n    singly_set = set(flat_list)\n    # convert the set back to a list and return it\n    return list(singly_set)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for sublist in test_list:\n        flat_list.extend(sublist)\n    return set(flat_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = []\n    for sublist in test_list:\n        for item in sublist:\n            result.append(item)\n    return result"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened = []\n    for sublist in test_list:\n        flattened += sublist\n    return set(flattened)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = [item for sublist in test_list for item in sublist]\n    return set(flattened_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened = []\n    for sublist in test_list:\n        for num in sublist:\n            flattened.append(num)\n    return flattened"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    # Flatten the list\n    flattened = []\n    for sublist in test_list:\n        flattened.extend(sublist)\n\n    # Remove duplicates\n    unique_numbers = set(flattened)\n\n    return list(unique_numbers)"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    def reverse_pancake(nums, n):\n        for i in range(n):\n            j = n - i - 1\n            nums[i], nums[j] = nums[j], nums[i]\n\n    def sort_pancake(nums, start, end):\n        for i in range(start, end):\n            if nums[i] > nums[i + 1]:\n                nums[i], nums[i + 1] = nums[i + 1], nums[i]\n\n        reverse_pancake(nums, end - start)\n\n    def sort_pancakes(nums, n):\n        for _ in range(n):\n            start = 0\n            end = n - 1\n            while start < end:\n                sort_pancake(nums, start, end)\n                start += 1\n                end -= 1\n\n    sort_pancakes(nums, len(nums))\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    # create a list of indices to control the sorting process\n    p = [i for i in range(n)]\n    # loop through each element of the list and select the largest element\n    for i in range(n-1, 0, -1):\n        # find the index of the maximum element\n        max_idx = i\n        for j in range(i):\n            if nums[j] < nums[max_idx]:\n                max_idx = j\n        # swap the maximum element with the i-th element\n        nums[i], nums[max_idx] = nums[max_idx], nums[i]\n        # reverse the p list to reflect the sorted order of the list\n        p[i], p[max_idx] = p[max_idx], p[i]\n    # return the sorted list\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements using the pancake sort algorithm.\n    '''\n    n = len(nums)\n    # initialize the remaining list to the original list\n    remaining = list(range(n))\n    # initialize the pancakes list to an empty list\n    pancakes = []\n\n    # while there are pancakes left\n    while len(pancakes) < n:\n        # get the index of the smallest pancake\n        min_pancake = min(remaining)\n        # add the smallest pancake to the pancakes list\n        pancakes.append(min_pancake)\n        # remove the smallest pancake from the remaining list\n        remaining.remove(min_pancake)\n\n    # sort the remaining list using the pancakes list\n    for i in range(n-1, -1, -1):\n        # get the index of the current pancake\n        pancake_index = pancakes[i]\n        # swap the current element with the element at the pancake index\n        nums[i], nums[pancake_index] = nums[pancake_index], nums[i]"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    # make a copy of the input list to avoid modifying the original\n    nums = list(nums)\n\n    # loop until the list is sorted\n    while True:\n        # find the maximum element in the unsorted portion of the list\n        max_idx = 0\n        for i in range(1, len(nums)):\n            if nums[i] > nums[max_idx]:\n                max_idx = i\n\n        # if the maximum element is already at the end of the list, stop sorting\n        if max_idx == 0:\n            break\n\n        # swap the maximum element with the last element in the unsorted portion of the list\n        nums[0], nums[max_idx] = nums[max_idx], nums[0]\n\n        # reverse the unsorted portion of the list from the second element to the maximum element\n        for i in range(max_idx - 1, 0, -1):\n            nums[i], nums[0] = nums[0], nums[i]\n\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements.\n    \"\"\"\n\n    # helper function to reverse the order of the elements in the pancake\n    def reverse_pancake(nums, start):\n        while start < len(nums):\n            nums[start], nums[start+1] = nums[start+1], nums[start]\n            start += 1\n\n    # helper function to build the pancake from the given list of elements\n    def build_pancake(nums):\n        pancake = [0] * len(nums)\n        for i in range(len(nums)-1, -1, -1):\n            pancake[i] = nums[i]\n        return pancake\n\n    # create a pancake by reversing the order of the elements in the given list\n    pancake = build_pancake(nums)\n\n    # iterate over the pancake from the end to the beginning\n    for i in range(len(pancake)-2, -1, -1):\n        # if the element at the current index is greater than the element at the next index, swap them\n        if pancake[i] > pancake[i+1]:\n            pancake[i], pancake[i+1] = pancake[i+1], pancake[i]\n            # reverse the order of the elements in the pancake from the current index to the end\n            reverse_pancake(pancake, i)\n\n    # copy the sorted elements back to the original list\n    for i in range(len(nums)):\n        nums[i] = pancake[i]"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Sorts a list of elements using the pancake sort algorithm.\n\n    This algorithm sorts a list of elements in ascending order using a variation of the\n    \"pancake\" sorting algorithm. Each element is placed on its own pancake, and then\n    is moved to the end of the list until it is sorted. This process is repeated for all\n    elements in the list.\n\n    Args:\n    nums: a list of elements to be sorted.\n\n    Returns:\n    A new list with the same elements as the input list, but sorted in ascending order.\n    \"\"\"\n\n    # Create a copy of the input list to avoid modifying it.\n    nums_copy = nums[:]\n\n    # Helper function to recursively sort the elements of a pancake.\n    def pancake_sort_pancake(start, end):\n        \"\"\"\n        Recursively sorts the elements of a pancake.\n\n        Args:\n        start: the starting index of the pancake to be sorted.\n        end: the ending index of the pancake to be sorted.\n\n        Returns:\n        None\n        \"\"\"\n\n        # Base case: if the pancake is already sorted, return.\n        if start == end:\n            return\n\n        # Choose a pivot element and partition the list around it.\n        pivot = nums_copy[end]\n        left, right = start, start - 1\n\n        for i in range(start, end):\n            if nums_copy[i] < pivot:\n                left += 1\n                nums_copy[left], nums_copy[i] = nums_copy[i], nums_copy[left]\n\n        nums_copy[left + 1], nums_copy[end] = nums_copy[end], nums_copy[left + 1]\n\n        # Recursively sort the left pancake and the right pancake.\n        pancake_sort_pancake(start, left)\n        pancake_sort_pancake(left + 2, end)\n\n    # Call the helper function to recursively sort each pancake of the input list.\n    for end in range(len(nums_copy) - 1, 0, -1):\n        pancake_sort_pancake(0, end)\n\n    # Return the sorted list.\n    return nums_copy"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Helper function to swap two elements of the list\n    def swap(nums, i, j):\n        nums[i], nums[j] = nums[j], nums[i]\n\n    # Helper function to reverse the first k elements of the list\n    def reverse(nums, start, end):\n        while start < end:\n            swap(nums, start, end)\n            start += 1\n            end -= 1\n\n    # Helper function to reverse the first k elements of the list using recursion\n    def reverse_recursive(nums, start, end):\n        if start >= end:\n            return\n        reverse_recursive(nums, start + 1, end)\n        swap(nums, start, end)\n\n    # Main function to sort the list\n    def pancake_sort_helper(nums, k, start, end):\n        if start >= end:\n            return\n\n        # Find the maximum element in the list\n        max_index = start\n        for i in range(start + 1, end + 1):\n            if nums[i] > nums[max_index]:\n                max_index = i\n\n        # If the maximum element is already at the end, we have sorted the list\n        if max_index == end:\n            reverse(nums, start, end)\n            return\n\n        # If the maximum element is not at the end, swap it with the end and sort the remaining elements\n        swap(nums, max_index, end)\n        reverse_recursive(nums, start, end - 1)\n        pancake_sort_helper(nums, k, start + 1, end - 1)\n\n    # Sort the list using the helper function\n    pancake_sort_helper(nums, len(nums), 0, len(nums) - 1)\n\n    # Print the sorted list\n    print(\"Sorted list: \", end=\"\")\n    for num in nums:\n        print(num, end=\" \")"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements using the pancake sort algorithm.\n    '''\n    \n    # Initialize the swapped variable to True\n    swapped = True\n    \n    # Loop until swapped is False\n    while swapped:\n        # Initialize the swapped variable to False\n        swapped = False\n        \n        # Loop through the list from the start to the end\n        for i in range(len(nums) - 1):\n            # If the current element is greater than the next element, swap them\n            if nums[i] > nums[i+1]:\n                nums[i], nums[i+1] = nums[i+1], nums[i]\n                swapped = True\n    \n    # Return the sorted list\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n-1,0,-1):\n        for j in range(i):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    def sort(arr, n):\n        # start by swapping the first and last element\n        arr[0], arr[n-1] = arr[n-1], arr[0]\n        # find the position of the maximum element in the remaining unsorted part\n        max_idx = arr[0]\n        for i in range(1, n):\n            if arr[i] > max_idx:\n                max_idx = arr[i]\n        # if the maximum element is already at the first position, we are done sorting\n        if max_idx == arr[0]:\n            return arr\n        # if the maximum element is not at the first position, swap it with the first unsorted element\n        else:\n            arr[0], arr[max_idx] = arr[max_idx], arr[0]\n            # recursively sort the remaining unsorted part\n            return sort(arr, n-1)\n\n    # call the recursive sorting function on the input array\n    return sort(nums, len(nums))"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            count += 1\n        if list1[i] == list3[i]:\n            count += 1\n        if list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_samepair(list1,list2,list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    This function counts the number of items that are identical in the same position of three given lists.\n    '''\n\n    count = 0\n\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            for j in range(len(list2)):\n                if list2[j] == list3[i]:\n                    count += 1\n                    break\n        elif list2[i] == list3[i]:\n            for j in range(len(list1)):\n                if list1[j] == list3[j]:\n                    count += 1\n                    break\n\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lists(Input):\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lists(Input):\n    count = 0\n    for i in range(len(Input)):\n        if isinstance(Input[i], list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lists(Input):\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lists(Input):\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr):\n    \"\"\"\n    This function takes in an array of integers and returns the maximum absolute difference between any two elements in the array.\n    \"\"\"\n    if len(arr) < 2:\n        return 0\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if i!= j:\n                diff = abs(arr[i] - arr[j])\n                if diff > max_diff:\n                    max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr):\n    \"\"\"\n    Write a python function to find the maximum difference between any two elements in a given array.\n\n    Parameters:\n    arr (list): a list of integers\n\n    Returns:\n    int: the maximum absolute difference between any two elements in the given array\n    \"\"\"\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr): \n    # Find the maximum absolute difference between any two elements in the array\n    max_diff = max(abs(arr[i]-arr[j]) for i in range(len(arr)) for j in range(i+1,len(arr)))\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if i!= j:\n                diff = abs(arr[i] - arr[j])\n                if diff > max_diff:\n                    max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr): \n    \"\"\"\n    Write a python function to find the maximum difference between any two elements in a given array.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr):\n    \"\"\"\n    This function takes an array of integers as input and returns the maximum absolute difference between any two elements in the array.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(arr)-1):\n        diff = abs(arr[i+1] - arr[i])\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    # Find the maximum element in the array\n    max_element = max(arr)\n    # Initialize the maximum absolute difference\n    max_diff = 0\n    # Loop through the array\n    for i in range(len(arr)):\n        # Loop through the remaining elements in the array\n        for j in range(i+1, len(arr)):\n            # Calculate the absolute difference between the current pair of elements\n            diff = abs(arr[i] - arr[j])\n            # Update the maximum absolute difference if the current difference is greater\n            if diff > max_diff:\n                max_diff = diff\n    # Return the maximum absolute difference\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    This function takes in a list of integers as an argument and returns the maximum absolute difference between any two elements in the list.\n    '''\n    max_diff = float('-inf') #initialize the maximum difference variable to negative infinity\n    \n    for i in range(len(arr)): #iterate through each element in the array\n        for j in range(i+1, len(arr)): #iterate through each element in the array after the current element\n            diff = abs(arr[i] - arr[j]) #calculate the absolute difference between the current and next elements\n            if diff > max_diff: #if the absolute difference is greater than the current maximum difference, update the maximum difference\n                max_diff = diff\n    \n    return max_diff #return the maximum absolute difference"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x1, x2 = 0, 0\n    y1, y2 = 0, 0\n    while x1 <= x2 and y1 <= y2:\n        x = (a * x1 * x1 + b * x1 + n) // (b * x2)\n        y = (a * y1 * y1 + b * y1 + n) // (a * y2)\n        if a * x + b * y == n:\n            return (x, y)\n        elif a * x + b * y < n:\n            x1 += 1\n        else:\n            x2 += 1\n            y1 += 1\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Calculate the discriminant\n    discriminant = b**2 - 4*a*n\n    \n    # Check if there is a solution\n    if discriminant < 0:\n        return None\n    \n    # Calculate the roots of the discriminant\n    root1 = (-b + discriminant**0.5)/(2*a)\n    root2 = (-b - discriminant**0.5)/(2*a)\n    \n    # Check if the roots are integers\n    if not root1.is_integer() or not root2.is_integer():\n        return None\n    \n    # Return the solution as a tuple\n    return (int(root1), int(root2))"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Initialize variables for x and y\n    x, y = 0, 0\n\n    # Check for positive solutions\n    while a * x + b * y!= n:\n        # If no solutions found, return None\n        if x == 0 and y == 0:\n            return None\n\n        # Find a solution for x\n        if a!= 0:\n            x = (n - b) // a\n\n        # Find a solution for y\n        if b!= 0:\n            y = (n - a * x) // b\n\n    # Return the solution as a tuple\n    return (x, y)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # compute the discriminant\n    discriminant = b**2 - 4*a*n\n\n    # check if there is no solution (discriminant is zero)\n    if discriminant == 0:\n        return None\n\n    # compute the two solutions\n    x1 = (-b + discriminant**(1/2))/(2*a)\n    x2 = (-b - discriminant**(1/2))/(2*a)\n\n    # check if both solutions are integer\n    if not (x1.is_integer() and x2.is_integer()):\n        return None\n\n    # return the two solutions as a tuple\n    return (x1, x2)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n\n    # First, check if there exists a solution if we replace a by 1 and b by 0\n    x = None\n    y = None\n    if a!= 1:\n        x = -n / a\n    if b!= 0:\n        y = -n / b\n    \n    # If there exists a solution, check if it satisfies ax + by = n\n    if x and y and a * x + b * y == n:\n        return (x, y)\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    This function will find two integers x and y that satisfy the given equation ax + by = n.\n    \"\"\"\n    x1 = (b*(-n - a*b) + n*b) // a\n    x2 = (b*(-n + a*b) + n*b) // a\n    return (x1, x2) if x1!= x2 else None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    \"\"\"\n    # Initialize variables\n    x = 0\n    y = 0\n\n    # Check if a and b are equal\n    if a == b:\n        return None\n\n    # Calculate the delta and the denominator\n    delta = b**2 - 4*a*n\n\n    # Check if no solution exists\n    if delta < 0:\n        return None\n\n    # Calculate the first solution x1 and the second solution x2\n    x1 = (-b + delta**0.5) / (2*a)\n    x2 = (-b - delta**0.5) / (2*a)\n\n    # Check if x1 and x2 satisfy ax + by = n\n    if a*x1 + b*x2 == n:\n        return (x1, x2)\n\n    # Check if x1 and x2 satisfy ax + by = n + 1\n    if a*x1 + b*x2 == n + 1:\n        return (x1, x2)\n\n    # Check if x1 and x2 satisfy ax + by = n - 1\n    if a*x1 + b*x2 == n - 1:\n        return (x1, x2)\n\n    # No solution found\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(1000):\n        for y in range(1000):\n            if a*x + b*y == n:\n                return (x, y)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    \n    # Check if the given equation is not of the form ax + by = n\n    if not (isinstance(a, (int, float)) and isinstance(b, (int, float)) and isinstance(n, (int, float))):\n        return None\n    \n    # Check if a, b, and n are non-zero\n    if a == 0 or b == 0 or n == 0:\n        return None\n    \n    # Calculate the discriminant\n    discriminant = b**2 - 4*a*n\n    \n    # Check if the discriminant is non-negative\n    if discriminant < 0:\n        return None\n    \n    # Calculate x1 and x2 using the quadratic formula\n    x1 = (-b + discriminant**0.5) / (2*a)\n    x2 = (-b - discriminant**0.5) / (2*a)\n    \n    # Check if x1 and x2 satisfy the equation ax + by = n\n    if x1**2 + x2**2!= n:\n        return None\n    \n    # Return the solution as a tuple\n    return (int(x1), int(x2))"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == 0:\n        if b == 0:\n            return None\n        else:\n            return None\n    else:\n        x = (-n + (b**2 - 4*a*n) ** 0.5) / (2*a)\n        y = (-n - (b**2 - 4*a*n) ** 0.5) / (2*a)\n        return (int(x), int(y))"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            list1.remove(list1[i])\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [item for item in list1 if item not in list2]"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list2:\n        if element in list1:\n            list1.remove(element)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            list1.pop(i)\n            i = i - 1\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    # Convert the lists to sets to remove duplicates\n    set1 = set(list1)\n    set2 = set(list2)\n\n    # Create a new list without elements present in list2\n    new_list = [x for x in list1 if x not in set2]\n\n    return new_list"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list1:\n        if i in list2:\n            list1.remove(i)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list1:\n        if element in list2:\n            list1.remove(element)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            list1.pop(i)\n            i = i - 1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            list1.remove(list1[i])"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            list1.remove(list1[i])\n    return list1"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum_ = 0\n    for i in range(n//2):\n        sum_ += n - 2*i\n    return sum_"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    # initialize sum variable\n    sum = 0\n\n    # iterate through odd numbers from 1 to n // 2\n    for i in range(1, n//2+1, 2):\n        # add i to sum\n        sum += i\n\n    # return sum\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n // 2):\n        sum += (n - 2 * i)\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    # initialize sum variable\n    sum = 0\n    # loop through each number from 0 to n // 2\n    for i in range(n // 2):\n        # add the sum of the previous two numbers\n        sum += (n - 2*i)\n    # return the sum\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    result = 0\n    for i in range(n // 2):\n        result += n - 2*i\n    return result"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n <= 0:\n        return 0\n    else:\n        total = 0\n        for i in range(n // 2):\n            total += n - 2 * i\n        return total"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n // 2):\n        sum += (n - 2 * i)\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n <= 1:\n        return n\n    else:\n        sum = 0\n        for i in range(n // 2):\n            sum += n - 2 * i\n        return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n % 2 == 0:\n        n += 1\n    sum_list = [0] * (n // 2)\n    for i in range(n // 2):\n        sum_list[i] = n - 2 * i\n    return sum(sum_list)"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2,\n    for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        i = 0\n        total = 0\n        while True:\n            if i == 0:\n                total += n - 2\n            elif i == n//2:\n                break\n            else:\n                total += n - 2 * i\n            i += 1\n        return total"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s * (s - tan(pi/l))) / (2 * l)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s * l) / 2\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s * (s-2) *... * 2 * 1) / ((4 * math.pi * s) ** 0.5)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Calculate the perimeter of the polygon\n    perimeter = s * l\n\n    # Calculate the area of the polygon using Heron's formula\n    area = 0.5 * s * l * tan(pi/l)\n\n    return area, perimeter"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # calculate the area of a regular polygon using Heron's formula\n    a = s / 2\n    h = (s * l) / (4 * tan(pi/l))\n    area = (a * h) / 3\n\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Calculate the area using Heron's formula\n    area = (s * (s - l) * (s - 2 * l)) ** 0.5\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Formula to calculate the area of a regular polygon using Heron's formula\n    area = (s*l)/2\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s * l) / (4 * math.tan(math.pi / l))\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0.5 * s * l * tan(pi/l)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n\n    # calculate the length of a side\n    side_length = s / l\n\n    # calculate the area using Heron's formula\n    area = (l * (s + side_length) * (s - side_length)) ** 0.5\n\n    return area"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    def gcd(a, b):\n        '''\n        Function to find the greatest common divisor of two numbers.\n        '''\n        if b == 0:\n            return a\n        else:\n            return gcd(b, a % b)\n\n    def sum_divisors(num):\n        '''\n        Function to find the sum of the divisors of a number.\n        '''\n        divisors = []\n        for i in range(1, num+1):\n            if num % i == 0:\n                divisors.append(i)\n        return divisors\n\n    def are_divisors_same(a, b):\n        '''\n        Function to check if the sum of the divisors of two numbers are the same.\n        '''\n        divisors_a = sum_divisors(a)\n        divisors_b = sum_divisors(b)\n        gcd_ab = gcd(a, b)\n        return gcd_ab == sum(divisors_a) + sum(divisors_b)\n\n    return are_divisors_same(n, n)"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    This function takes an integer n as input and returns True if the sum of the divisors of \n    two integers is the same, else it returns False.\n    '''\n    # Define a function to find the sum of the divisors of an integer\n    def sum_divisors(num):\n        div_sum = 0\n        for i in range(1, num+1):\n            if num % i == 0:\n                div_sum += i\n        return div_sum\n\n    # Check if the sum of the divisors of n and its integer part are the same\n    if sum_divisors(n) == sum_divisors(int(n)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n            if i!= n//i:\n                divisors.append(n//i)\n    return all(divisors)"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef div_sum(n): \n    '''\n    This function takes an integer n and returns True if the sum of the divisors of n is the same as the original number, and False otherwise.\n    '''\n    # Convert n to a set to remove duplicates and sort it\n    divisors = sorted(set(int(d) for d in str(n)))\n\n    # Calculate the sum of the divisors\n    divisor_sum = sum(divisors)\n\n    # If the sum of the divisors is the same as n, return True\n    if divisor_sum == n:\n        return True\n    # Otherwise, return False\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = []\n    i = 1\n    while i <= math.sqrt(n):\n        if n % i == 0:\n            divisors.append(i)\n            if n / i!= i:\n                divisors.append(n / i)\n        i += 1\n    divisors.sort()\n    return divisors"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # calculate the sum of the divisors of n\n    div_sum = sum([i for i in range(1, n+1) if n % i == 0])\n\n    # return the result\n    return div_sum == n**2"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_list = []\n    for i in range(1, int(math.sqrt(n))+1): \n        if n % i == 0: \n            div_list.append(i) \n            if n // i!= i: \n                div_list.append(n//i) \n\n    if len(div_list) == 0: \n        return False\n    elif len(div_list) == 1: \n        return True\n    else: \n        return div_list[0] == div_list[-1]"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisor_sum = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisor_sum += i\n            if i!= n//i:\n                divisor_sum += n//i\n    return divisor_sum == sum(set(divisor_sum))"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef div_sum(n):\n    \"\"\"\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    \"\"\"\n    # calculate the sum of the divisors of n\n    div_sum = sum(i for i in range(1, n+1) if n % i == 0)\n    # check if the sum of the divisors of n is equal to n\n    if div_sum == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Calculate the sum of the divisors of n using a for loop\n    div_sum = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            div_sum += i\n            if n // i!= i:\n                div_sum += n // i\n    return div_sum"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n\n    # convert string to lowercase\n    str1 = str1.lower()\n\n    # create a dictionary to store character counts\n    char_count = {}\n\n    # loop through each character in the string\n    for char in str1:\n\n        # check if character is a letter\n        if char.isalpha():\n\n            # get the lowercase version of the character\n            lower_char = char.lower()\n\n            # check if lowercase character is already in dictionary\n            if lower_char in char_count:\n\n                # increment count\n                char_count[lower_char] += 1\n\n            else:\n\n                # add character to dictionary\n                char_count[lower_char] = 1\n\n    # return character counts dictionary\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_char_position(str1):\n    count = 0\n    for i in range(len(str1)):\n        if str1[i].lower() == str1[i].lower():\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n\n    # Convert the string to lowercase and split it into a list of characters\n    str1 = str1.lower()\n    str1 = list(str1)\n\n    # Initialize a dictionary to store the count of characters at each position in the alphabet\n    char_count = {'a': 0, 'b': 0, 'c': 0, 'd': 0, 'e': 0, 'f': 0, 'g': 0, 'h': 0, 'i': 0, 'j': 0, 'k': 0, 'l': 0,'m': 0, 'n': 0, 'o': 0, 'p': 0, 'q': 0, 'r': 0,'s': 0, 't': 0, 'u': 0, 'v': 0, 'w': 0, 'x': 0, 'y': 0, 'z': 0}\n\n    # Loop through each character in the list and update the count in the dictionary\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n\n    # Return the count of characters at each position in the alphabet\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_char_position(str1):\n    count = 0\n    for i, char in enumerate(str1):\n        if char.lower() == 'a':\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_char_position(str1):\n    # Convert the string to lowercase for case insensitive comparison\n    str1 = str1.lower()\n    \n    # Initialize a dictionary to store the count of characters at each position in the string\n    char_count = {}\n    \n    # Loop through each character in the string\n    for char in str1:\n        # If the character is not already in the dictionary, set its count to 1\n        if char not in char_count:\n            char_count[char] = 1\n        # If the character is already in the dictionary, increment its count by 1\n        else:\n            char_count[char] += 1\n    \n    # Loop through each character in the English alphabet\n    for char in 'abcdefghijklmnopqrstuvwxyz':\n        # If the character is not already in the dictionary, set its count to 0\n        if char not in char_count:\n            char_count[char] = 0\n        # If the character is already in the dictionary, increment its count by the value of the previous count in the dictionary\n        else:\n            char_count[char] += char_count[char] - 1\n    \n    # Return the count of characters at each position in the string that occur at the same position in the English alphabet\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n\n    count = 0\n    english_alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    for char in str1:\n        if char.lower() in english_alphabet.lower():\n            count += 1\n\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for char in str1:\n        if char.isalpha():\n            if char.lower() == str1.lower()[count].lower():\n                count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Convert the string to lowercase\n    str1 = str1.lower()\n    \n    # Initialize a dictionary to store the count of characters at each position\n    char_count = {}\n    \n    # Loop through each character in the string\n    for i, char in enumerate(str1):\n        # If the character is a letter, check if it's already in the dictionary\n        if char.isalpha():\n            if char in char_count:\n                # Increment the count of the character at the current position\n                char_count[char] += 1\n            else:\n                # Add the character to the dictionary with a count of 1\n                char_count[char] = 1\n    \n    # Loop through the dictionary to count the occurrences of each character at the same position in the English alphabet\n    count = 0\n    for char in char_count:\n        # Check if the character is in the English alphabet\n        if char in 'abcdefghijklmnopqrstuvwxyz':\n            # Count the occurrences of the character in the English alphabet\n            count += char_count[char]\n    \n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Convert the input string to lowercase\n    str1 = str1.lower()\n    # Initialize variables for counting the number of characters at each position in the English alphabet\n    count = [0] * 26\n    # Iterate over the characters in the string\n    for char in str1:\n        # If the character is a letter, increment the count at its position in the English alphabet\n        if char.isalpha():\n            index = ord(char) - ord('a')\n            count[index] += 1\n    # Return the count of characters at each position in the English alphabet\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n\n    # Convert the string to lowercase\n    str1 = str1.lower()\n\n    # Initialize a dictionary to store the count of characters at each position in the English alphabet\n    char_count = {}\n\n    # Iterate through each character in the string\n    for char in str1:\n        # If the character is a letter, add it to the dictionary with a count of 1\n        if char.isalpha():\n            if char in char_count:\n                char_count[char] += 1\n            else:\n                char_count[char] = 1\n\n    # Initialize a variable to store the count of characters that occur at the same position in the English alphabet\n    same_position_count = 0\n\n    # Iterate through each character in the string\n    for i in range(len(str1)):\n        # Iterate through each other character in the string\n        for j in range(i + 1, len(str1)):\n            # If the characters are the same, increment the same_position_count\n            if str1[i] == str1[j]:\n                same_position_count += 1\n\n    # Return the sum of the count of characters at each position and the count of characters that occur at the same position\n    return same_position_count + sum(char_count.values())"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0 and A[i] % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_even_pair(A):\n    even_count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor_result = A[i] ^ A[j]\n            if xor_result % 2 == 0:\n                even_count += 1\n    return even_count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n\n    count = 0\n\n    for i in range(len(A)): \n        for j in range(i+1, len(A)): \n            if A[i] ^ A[j] == 0: \n                count += 1\n\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_even_pair(A):\n    \"\"\"\n    Count the number of pairs of integers in a list that xor to an even number.\n\n    Parameters:\n    -----------\n    A : list of integers\n\n    Returns:\n    --------\n    int : the number of pairs of integers that xor to an even number\n    \"\"\"\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor = A[i] ^ A[j]\n            if xor == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_pairs = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] % 2 == 0 and A[j] % 2 == 0 and (A[i] ^ A[j]) % 2 == 0:\n                even_pairs += 1\n    return even_pairs"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor_value = A[i] ^ A[j]\n            if xor_value % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Loop until n is a power of 2\n    while n & (n - 1)!= 0:\n        n = n | (n & -n)\n    return n"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def next_power_of_2(n): \n    '''\n    This function takes an integer n as input and returns the smallest power of 2 greater than or equal to n. \n    '''\n\n    # Initialize the variable to the smallest power of 2 greater than or equal to n\n    result = 1\n\n    # Loop until the power of 2 is greater than or equal to n\n    while result < n: \n        # Add 1 to the result variable\n        result *= 2\n\n    # Return the result\n    return result"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def next_power_of_2(n): \n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Check if the number is already a power of 2\n    if n & (n - 1) == 0:\n        return n\n\n    # Find the power of 2 that is greater than or equal to n\n    p = 1\n    while p < n:\n        p *= 2\n\n    return p"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Use the binary search algorithm to find the smallest power of 2 greater than or equal to n\n    lo = 1\n    hi = n\n    while lo < hi:\n        mid = (lo + hi) // 2\n        if mid * mid <= n:\n            lo = mid + 1\n        else:\n            hi = mid\n    # Return the smallest power of 2 greater than or equal to n\n    return lo * 2"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # initialize the smallest power of 2 greater than or equal to n as 1\n    power_of_2 = 1\n    # loop until power_of_2 is greater than or equal to n\n    while power_of_2 < n:\n        # increment the power_of_2 by 1\n        power_of_2 <<= 1\n    # return the smallest power of 2 greater than or equal to n\n    return power_of_2"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def next_power_of_2(n): \n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    if n == 0:\n        return 1\n    while n > 1:\n        n = n >> 1\n    return n << 1"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # convert n to binary\n    binary = bin(n)[2:]\n    # find the length of binary\n    length = len(binary)\n    # loop through the binary string and find the last set bit\n    for i in range(length):\n        if binary[i] == '1':\n            break\n    # add 1 to the position of the last set bit\n    new_binary = binary[:i] + str(int(binary[i])+1)\n    # convert the new binary string back to an integer\n    new_int = int(new_binary, 2)\n    # return the new integer\n    return new_int"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Use binary exponentiation to find the smallest power of 2 greater than or equal to n\n    n = n - 1\n    n = n | (n >> 1)\n    n = n | (n >> 2)\n    n = n | (n >> 4)\n    n = n | (n >> 8)\n    n = n | (n >> 16)\n    return n + 1"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # check if n is 0 or 1\n    if n <= 1:\n        return 2\n\n    # binary search for the next power of 2\n    low = 1\n    high = n\n    while low <= high:\n        mid = (low + high) // 2\n        if mid * mid > n:\n            return mid * mid\n        elif mid * mid < n:\n            low = mid + 1\n        else:\n            return mid * mid\n\n    # if the binary search ends up here, there is no power of 2 greater than or equal to n\n    return None"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return 2**int(log2(n))\n\ndef log2(n):\n    '''\n    Write a python function to calculate the logarithm base 2 of a given number.\n    '''\n    return math.log(n, 2)"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for item in a:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for num in a:\n        if num == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency(a,x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for num in a:\n        if num == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count += 1\n    return count"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    if m > n:\n        m, n = n, m\n    sum_list = 0\n    for i in range(m, n+1):\n        if i in list1:\n            sum_list += i\n    return sum_list"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n\n    # Check if the input list is empty\n    if not list1:\n        print(\"Error: Input list is empty.\")\n        return 0\n\n    # Check if the input indices are within the bounds of the list\n    if m < 0 or m >= len(list1) or n < 0 or n >= len(list1):\n        print(\"Error: Invalid indices.\")\n        return 0\n\n    # Initialize the sum variable\n    sum = 0\n\n    # Loop through the indices and add the sum of elements between the two indices\n    for i in range(m, n + 1):\n        sum += list1[i]\n\n    # Return the sum\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # initialize sum variable to 0\n    sum = 0\n\n    # loop through the list starting from index m and ending at index n-1\n    for i in range(m, n+1):\n        # check if the index is within the range of the list\n        if i <= len(list1) and i >= 0:\n            # add the element at the index to the sum\n            sum += list1[i]\n\n    # return the sum\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i-1]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # initialize sum variable to zero\n    sum = 0\n\n    # iterate through the list using a for loop and the range function\n    for i in range(m, n+1):\n        # check if the current index is within the range of the list\n        if i >= 0 and i < len(list1):\n            # add the element at the current index to the sum variable\n            sum += list1[i]\n\n    # return the sum of all elements within the specified range\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum_list = 0\n    for i in range(m, n+1):\n        sum_list += list1[i-m]\n    return sum_list"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # initialize the sum variable\n    total = 0\n    \n    # loop through each element in the list\n    for i in range(m, n+1):\n        # check if the element is within the range specified by the indices\n        if i >= 0 and i < len(list1):\n            # add the element to the sum variable\n            total += list1[i]\n            \n    return total"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum_value = 0\n    for i in range(m, n+1):\n        sum_value += list1[i-1]\n    return sum_value"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # calculate the semi-perimeter of the pentagon\n    p = (a**2 + a**2 + a**2) / 5\n    \n    # calculate the area of the pentagon\n    area = (5 / 2) * math.sqrt(p)\n    \n    # return the perimeter of the pentagon\n    return p"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # Formula for the perimeter of a regular pentagon\n    perimeter = 5 * a * math.sin(math.pi / 5)\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter\n\na = float(input(\"Enter the length of the side of the pentagon: \"))\n\nprint(\"The perimeter of the pentagon is\", perimeter_pentagon(a))"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a\n"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] =='std':\n            count += 1\n            i += 3\n        else:\n            i += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    count = 0\n    index = s.find('std')\n    while index!= -1:\n        count += 1\n        index = s.find('std', index+1)\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    while'std' in s:\n        count += s.count('std')\n        s = s.replace('std', '', count)\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-3):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    count = 0\n    index = s.find(\"std\")\n    while index!= -1:\n        count += 1\n        index = s.find(\"std\", index+1)\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    index = s.find('std')\n    while index!= -1:\n        count += 1\n        index = s.find('std', index+1)\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for word in s.split():\n        if word =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    This function takes a string as input and returns the number of occurances of the string'std' in the input string.\n    '''\n    count = 0\n    for i in range(len(s)-3):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    data_types = set()\n    for element in test_tuple:\n        data_types.add(type(element))\n    if len(data_types) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    # initialize a variable to store the data type of the first element of the tuple\n    data_type = type(test_tuple[0])\n    # loop through the rest of the elements of the tuple\n    for i in range(1, len(test_tuple)):\n        # if the data type of the current element is different from the data type of the first element, return False\n        if data_type!= type(test_tuple[i]):\n            return False\n    # if all the elements have the same data type, return True\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    for i in range(len(test_tuple)):\n        if not isinstance(test_tuple[i], type(test_tuple[0])):\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Check if all elements in a tuple have the same data type or not.\n\n    Args:\n        test_tuple: tuple of elements to check\n\n    Returns:\n        True if all elements in the tuple have the same data type, False otherwise.\n    \"\"\"\n    # Check if the tuple is empty\n    if len(test_tuple) == 0:\n        return True\n\n    # Get the type of the first element\n    first_type = type(test_tuple[0])\n\n    # Check if all elements have the same type\n    for element in test_tuple[1:]:\n        if type(element)!= first_type:\n            return False\n\n    # All elements have the same type\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_types = []\n    for item in test_tuple:\n        if isinstance(item, bool):\n            data_types.append(bool)\n        elif isinstance(item, (int, float)):\n            data_types.append(type(item))\n        elif isinstance(item, str):\n            data_types.append(str)\n        elif isinstance(item, tuple):\n            data_types.append(tuple)\n        elif isinstance(item, list):\n            data_types.append(list)\n        elif isinstance(item, set):\n            data_types.append(set)\n        elif isinstance(item, dict):\n            data_types.append(dict)\n        else:\n            data_types.append(type(item))\n    \n    # check if all data types are same\n    if len(set(data_types)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for i in range(1, len(test_tuple)):\n        if type(test_tuple[i])!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    if len(test_tuple) < 2:\n        return False\n    data_type = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for item in test_tuple:\n        if type(item)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for item in test_tuple:\n        if type(item)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count > n // 2"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n        if count > n // 2:\n            return True\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for num in arr:\n        if num == x:\n            count += 1\n    return count > n/2"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count > n//2"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    # initialize the count and current element to 0\n    count = 0\n    current_element = 0\n\n    # loop over the array\n    for i in range(n):\n        # if the current element is equal to x, increment the count and reset the current element to 0\n        if arr[i] == x:\n            count += 1\n            current_element = 0\n        # otherwise, increment the current element\n        else:\n            current_element += 1\n\n        # if the count is greater than n/2, return True\n        if count > n // 2:\n            return True\n\n    # if the loop completes without finding a majority, return False\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for num in arr:\n        if num == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n        if count > n // 2:\n            return True\n    return False"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Set_Bits(n): \n    \"\"\"\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    \"\"\"\n    count = 0\n    while n > 0:\n        n &= n - 1 # clears the least significant set bit\n        count += 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        if n & 1 == 1:\n            count += 1\n        n = n >> 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n: \n        count += n & 1 \n        n >>= 1 \n    return count "
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        if n & 1:\n            count += 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        if n % 2 == 1:\n            count += 1\n        n = n // 2\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        if n & 1 == 1:\n            count += 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        if n % 2 == 1:\n            count += 1\n        n = n >> 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 1:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    return ''.join([str[i] for i in range(len(str)) if i % 2 == 1])"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = []\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result.append(str[i])\n    return ''.join(result)"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    # Use list comprehension to convert string to list\n    lst = [str[i] for i in range(len(str))]\n    # Loop through the list and remove odd index values\n    for i in range(len(lst)):\n        if i % 2!= 0:\n            lst[i] = ''\n    # Convert list back to string and return\n    return ''.join(lst)"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    odd_string = ''\n    for i in range(len(str)):\n        if i % 2!= 0:\n            odd_string += str[i]\n    return odd_string"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_values_string(string):\n    \"\"\"\n    This function takes a string as input and returns a new string with all the odd index values removed.\n    \"\"\"\n    new_string = \"\"\n    for i in range(len(string)):\n        if i % 2 == 1:\n            new_string += string[i]\n    return new_string"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return ''.join([str[i] for i in range(len(str)) if i % 2 == 0])"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    # Initialize a new string to store the characters that have odd index values\n    new_str = \"\"\n    # Loop through each character in the given string\n    for char in str:\n        # If the index of the current character is odd, add it to the new string\n        if (str.index(char) + 1) % 2!= 0:\n            new_str += char\n    # Return the new string with the removed characters\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a <= b <= c:\n        return a\n    elif b <= a <= c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Write a function to find minimum of three numbers.\n    \"\"\"\n    if a <= b and a <= c:\n        return a\n    elif b <= a and b <= c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a, b, c)"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_of_three(a,b,c):\n    '''\n    This function takes three numbers as input and returns the minimum number.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Write a function to find minimum of three numbers.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    else:\n        if b < c:\n            return b\n        else:\n            return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    count = 0\n    for i in range(l, r + 1):\n        count += bin(n & i).count('1')\n    if count == r - l + 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Write a python function to check whether all the bits are unset in the given range or not.\n    \"\"\"\n\n    # Initialize a variable to store the number of set bits in the given range\n    count = 0\n\n    # Loop through all the bits in the given range\n    for i in range(l, r + 1):\n        # Check if the current bit is set to 1\n        if n & (1 << i):\n            count += 1\n\n    # Return True if all the bits are unset, else return False\n    return count == 0"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    # Find the set bits in the range\n    set_bits = bin(n & ((1 << r) - 1)).replace('0b', '').count('1')\n    # Find the unset bits in the range\n    unset_bits = r - set_bits\n    # Check if all the unset bits are set to 1\n    if bin(l ^ ((1 << unset_bits) - 1)).replace('0b', '').count('1') == unset_bits:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # calculate the number of set bits in the range\n    set_bits = sum(bin(i).count('1') for i in range(l, r + 1))\n\n    # calculate the number of unset bits in the given number\n    unset_bits = bin(n).count('1')\n\n    # check if the number of set bits equals the number of unset bits in the range\n    if set_bits == unset_bits:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l, r+1):\n        # Check if all bits are set to 1\n        if bin(n & (1 << i)).count('1')!= i-l+1:\n            return False\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if n == 0:\n        if l == 0 and r == 0:\n            return True\n        else:\n            return False\n    else:\n        for i in range(l, r+1):\n            if i & (1 << n-1):\n                return False\n        return all_Bits_Set_In_The_Given_Range(n-1, l, r)"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # checking the range \n    if l<0 or l>=r or r>=n: \n        return \"Invalid Input\"\n    # initializing the counter variable \n    count=0 \n    # checking the bits of the input number \n    while l<r: \n        if n & 1 == 0: \n            count+=1 \n        n = n >> 1 \n        l = l << 1 \n    # checking whether all the bits are unset \n    if count == r-l+1: \n        return \"All the bits are unset in the given range\" \n    else: \n        return \"Some of the bits are set in the given range\" "
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Initialize a variable to store the count of unset bits\n    unset_bits_count = 0\n\n    # Iterate through all the bits in the given range\n    for i in range(l, r+1):\n        # Check if the current bit is unset\n        if n & (1 << i) == 0:\n            # If the current bit is unset, increment the count of unset bits\n            unset_bits_count += 1\n\n    # If the count of unset bits is equal to the total number of bits in the range, then all the bits are unset\n    if unset_bits_count == (r-l+1):\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    This function takes a positive integer n, a positive integer l and a positive integer r as input.\n    The function checks whether all the bits are unset in the given range or not.\n    '''\n\n    # Initialize a boolean variable to keep track of whether all the bits are unset in the given range or not\n    all_unset = True\n\n    # Iterate through all the bits in the given range\n    for i in range(l, r+1):\n        # Check if the i-th bit is set or not\n        if n & (1<<i):\n            # If the i-th bit is set, then all the bits before it are also set, so return False\n            all_unset = False\n            break\n\n    # Return the value of all_unset\n    return all_unset"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    bits = bin(n)\n    start_bit = l - 1\n    end_bit = r - 1\n\n    # If all bits are set, return True\n    if start_bit >= end_bit:\n        return True\n\n    # Check the starting bit\n    if bits[start_bit] == '0':\n        return all_Bits_Set_In_The_Given_Range(n, l, end_bit)\n\n    # Check the ending bit\n    if bits[end_bit] == '1':\n        return all_Bits_Set_In_The_Given_Range(n, start_bit, r)\n\n    # Check all the intermediate bits\n    for i in range(start_bit + 1, end_bit):\n        if bits[i] == '1':\n            return False\n\n    return True"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # initialize variables\n    negative_count = 0\n    positive_count = 0\n    negative_end = n - 1\n    \n    # loop through the array\n    for i in range(len(arr)):\n        # if the element is negative\n        if arr[i] < 0:\n            # increment the negative count\n            negative_count += 1\n            # if the negative count is greater than or equal to the positive count\n            if negative_count >= positive_count:\n                # if the current element is negative and the next element is positive\n                if arr[i] < arr[i+1] and negative_count >= positive_count:\n                    # swap the elements\n                    arr[i], arr[i+1] = arr[i+1], arr[i]\n                    # decrement the negative count\n                    negative_count -= 1\n                    # increment the positive count\n                    positive_count += 1\n            # if the negative count is less than the positive count\n            else:\n                # if the next element is negative\n                if arr[i+1] < 0:\n                    # swap the elements\n                    arr[i], arr[i+1] = arr[i+1], arr[i]\n                    # decrement the negative count\n                    negative_count -= 1\n                    # increment the positive count\n                    positive_count += 1\n        # if the element is positive\n        else:\n            # increment the positive count\n            positive_count += 1\n    \n    # return the updated array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    # create a dictionary to store the elements and their counts\n    count_dict = {}\n    for num in arr:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n\n    # sort the dictionary by the values in descending order\n    sorted_dict = dict(sorted(count_dict.items(), key=lambda x: x[1], reverse=True))\n\n    # create an empty list to store the re-arranged elements\n    result = []\n\n    # loop through the sorted dictionary and append the appropriate number of positive and negative elements\n    for i in range(n):\n        if i < n // 2:\n            result.extend([k for k, v in sorted_dict.items() if v == i + 1])\n        else:\n            result.extend([-k for k, v in sorted_dict.items() if v == i + 1])\n\n    return result"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    i = 0\n    while i < n:\n        if arr[i] < 0:\n            j = i + 1\n            while j < n:\n                if arr[j] >= 0:\n                    arr[i], arr[j] = arr[j], arr[i]\n                    break\n                j += 1\n            i += 1\n        else:\n            i += 1\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Initialize three variables to keep track of the count of negative, zero and positive elements\n    neg_count = 0\n    zero_count = 0\n    pos_count = 0\n    \n    # Loop through the array and count the number of negative, zero, and positive elements\n    for num in arr:\n        if num < 0:\n            neg_count += 1\n        elif num == 0:\n            zero_count += 1\n        else:\n            pos_count += 1\n    \n    # If the total number of elements is less than or equal to n, return the original array\n    if n <= max(neg_count, zero_count, pos_count):\n        return arr\n    \n    # If the number of negative elements is less than n, swap all negative elements with the last element of the array\n    if neg_count < n:\n        for i in range(neg_count, n):\n            arr[i], arr[neg_count] = arr[neg_count], arr[i]\n        return arr\n    \n    # If the number of positive elements is less than n, swap all positive elements with the last element of the array\n    if pos_count < n:\n        for i in range(pos_count, n):\n            arr[i], arr[pos_count] = arr[pos_count], arr[i]\n        return arr\n    \n    # If the number of zero elements is less than n, swap all zero elements with the last element of the array\n    if zero_count < n:\n        for i in range(zero_count, n):\n            arr[i], arr[zero_count] = arr[zero_count], arr[i]\n        return arr\n    \n    # If all the above conditions are not met, it means that the array is already sorted and has the required number of negative, zero, and positive elements.\n    # Return the original array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    neg = [x for x in arr[:n] if x < 0]\n    pos = [x for x in arr[:n] if x >= 0]\n    pos.sort(reverse=True)\n    return neg + pos"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    negatives = []\n    positives = []\n    for i in range(n):\n        if arr[i] < 0:\n            negatives.append(arr[i])\n        else:\n            positives.append(arr[i])\n    for i in range(n):\n        arr[i] = negatives.pop(0) if negatives else 0\n        arr[i+n] = positives.pop(0) if positives else 0"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    # Count the number of negative and positive elements\n    neg_count = sum(1 for x in arr if x < 0)\n    pos_count = len(arr) - neg_count\n    \n    # If n is greater than the total number of positive elements, return the original array\n    if n > pos_count:\n        return arr\n    \n    # Shuffle the array using Fisher-Yates algorithm\n    for i in range(len(arr)):\n        j = i + randint(0, neg_count)\n        arr[i], arr[j] = arr[j], arr[i]\n    \n    # Re-arrange the first n elements\n    for i in range(n):\n        arr[i], arr[neg_count + i] = arr[neg_count + i], arr[i]\n    \n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    # First, we need to sort the array in ascending order\n    arr.sort()\n\n    # Next, we need to count the number of negative and positive elements\n    negative_count = 0\n    positive_count = 0\n    for element in arr:\n        if element < 0:\n            negative_count += 1\n        else:\n            positive_count += 1\n\n    # If the sum of the negative and positive counts is equal to n, then we can simply move the negative elements to the end of the array\n    if negative_count + positive_count == n:\n        arr = arr + arr[:negative_count]\n        arr = arr + arr[negative_count:]\n        return arr\n\n    # Otherwise, we need to re-arrange the array by shifting elements in two phases. In the first phase, we will move negative elements to the end of the array, while in the second phase, we will move positive elements to the end of the array. We will then continue moving elements until we have the desired count of negative and positive elements.\n    i = 0\n    while i < negative_count:\n        arr[i], arr[negative_count] = arr[negative_count], arr[i]\n        i += 1\n        negative_count -= 1\n    i = 0\n    while i < positive_count:\n        arr[i], arr[positive_count + negative_count] = arr[positive_count + negative_count], arr[i]\n        i += 1\n        positive_count += 1\n\n    # Finally, we can move the remaining negative elements to the end of the array\n    arr = arr[:negative_count] + arr[negative_count:]\n\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    neg_count = 0\n    pos_count = 0\n    for i in range(n):\n        if arr[i] < 0:\n            neg_count += 1\n        else:\n            pos_count += 1\n    for i in range(n):\n        if arr[i] < 0:\n            arr[i], arr[neg_count] = arr[neg_count], arr[i]\n            neg_count -= 1\n        else:\n            arr[i], arr[pos_count] = arr[pos_count], arr[i]\n            pos_count -= 1\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    # Initialize two empty lists to hold negative and positive elements\n    negatives = []\n    positives = []\n    \n    # Iterate through the array and append the negative elements to the negatives list, and the positive elements to the positives list\n    for i in range(n):\n        if arr[i] < 0:\n            negatives.append(arr[i])\n        else:\n            positives.append(arr[i])\n    \n    # Concatenate the negative elements with the positive elements in a list\n    result = negatives + positives\n    \n    # Return the resultant list\n    return result"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    # use replace() method to replace all blank spaces with the given character\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    # Use replace() method to replace all occurrences of blank spaces with the given character\n    str1 = str1.replace(\" \",char)\n    return str1"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str2 = str1.replace(' ', char)\n    return str2"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_blank(str1, char):\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_blank(str1, char):\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ', char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_blank(str1,char):\n    \"\"\"\n    This function takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    # Split the string into a list of words\n    words = str1.split()\n    \n    # Loop through each word and replace any blank spaces with the specified character\n    for i in range(len(words)):\n        words[i] = words[i].replace(\" \",\"{}\".format(char))\n    \n    # Join the words back into a string and return it\n    return \" \".join(words)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(\" \", char)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Use a min heap to store the n largest elements\n    min_heap = []\n    for num in list1:\n        if len(min_heap) < n:\n            heapq.heappush(min_heap, num)\n        elif num > min_heap[0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, num)\n    return min_heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # First, create a min-heap of the first n elements of the list\n    min_heap = []\n    for i in range(n):\n        heapq.heappush(min_heap, list1[i])\n    \n    # Then, iterate through the remaining elements of the list, and add them to the min-heap if they are larger than the smallest element in the heap\n    for i in range(n,len(list1)):\n        if list1[i] > min_heap[0]:\n            heapq.heappush(min_heap, list1[i])\n    \n    # Finally, convert the min-heap to a list and return it\n    return list(min_heap)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, list1.pop())\n    return [heapq.heappop(heap) for _ in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for num in list1:\n        heapq.heappush(heap,num)\n    return [heapq.heappop(heap) for i in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for num in list1:\n        heapq.heappush(heap, num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Create a max heap of size n and fill it with the first n elements of the list\n    max_heap = []\n    heapq.heapify(max_heap, list1[:n])\n\n    # Iterate through the remaining elements of the list\n    for i in list1[n:]:\n        # Remove the smallest element from the heap\n        heapq.heappop(max_heap)\n        # Add the next element to the heap\n        heapq.heappush(max_heap, i)\n\n    # Return the n largest elements from the heap\n    return [heapq.heappop(max_heap) for _ in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # create a min heap of size n and fill it with the first n elements of the list\n    min_heap = []\n    for i in range(n):\n        heapq.heappush(min_heap, list1[i])\n\n    # fill the remaining elements of the list in decreasing order and insert them into the heap\n    for i in range(n, len(list1)):\n        heapq.heappushpop(min_heap, list1[i])\n\n    # return the heap as the result\n    return min_heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    \n    heap = []\n    for num in list1:\n        heapq.heappush(heap, num)\n    \n    result = []\n    for i in range(n):\n        result.append(heapq.heappop(heap))\n    \n    return result"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n, list1)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    \"\"\"\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    # Sort the list in descending order\n    list1.sort(reverse=True)\n    \n    # Return the first n largest items\n    return list1[:n]"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateral_area = 2 * math.pi * r * h\n    return lateral_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    This function calculates the lateral surface area of a cylinder. It takes in the radius r and height h as input and returns the lateral surface area as output.\n\n    Parameters:\n    r: float\n        The radius of the cylinder.\n    h: float\n        The height of the cylinder.\n\n    Returns:\n    float\n        The lateral surface area of the cylinder.\n    '''\n\n    # Calculate the lateral surface area of the cylinder\n    A = 2*r*h\n    \n    # Return the lateral surface area\n    return A"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    import math\n    return 2 * math.pi * r * h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # find the radius of the cylinder and the height\n    radius = r\n    height = h\n    \n    # calculate the lateral surface area\n    lateral_surface_area = 2 * math.pi * radius * height\n    \n    # return the lateral surface area\n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Calculate the lateral surface area of a cylinder\n    lateral_surface_area = 2*r*h\n    \n    # Return the lateral surface area of the cylinder\n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateralsurface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateral_surface_area = 2 * r * h\n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # calculate lateral surface area using formula for cylinder\n    lateral_surface_area = math.pi * r**2 * h\n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = 2*3.14*r*r + 2*3.14*r*h + 2*3.14*r*h + 2*3.14*r*h\n    return area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = 2 * r * h\n    return area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r,h):\n    \"\"\"\n    Write a function to find the lateral surface area of a cylinder.\n\n    Parameters:\n    r (float): radius of the cylinder\n    h (float): height of the cylinder\n\n    Returns:\n    float: lateral surface area of the cylinder\n    \"\"\"\n    return 2*pi*r*h"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l**3\n    return volume"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    v = l * l * l\n    return v"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l**3\n    return volume"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n | (1 << i) for i in range(16) if (n >> i) & 1 == 0 "
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    # initialize a variable to store the result\n    result = 0\n\n    # loop through each bit of the number\n    for bit in bin(n)[2:]:\n        # check if the bit is even\n        if bit == '0':\n            # set the bit to 1\n            result += 2**int(bit)\n        else:\n            # otherwise, leave it alone\n            result += 2**(2**int(bit)-1)\n\n    # return the result\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    n = n | n >> 1\n    n = n | n >> 2\n    n = n | n >> 4\n    n = n | n >> 8\n    n = n | n >> 16\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # initialize an empty string to store the binary representation of the input number\n    bin_num = ''\n    # convert the input number to binary and store it in the binary_num variable\n    while n > 0:\n        remainder = n % 2\n        n //= 2\n        bin_num = str(remainder) + bin_num\n    # loop through the binary_num variable and set each even bit to 1\n    for i in range(len(bin_num)):\n        if bin_num[i] == '1' and (i+1) % 2 == 0:\n            bin_num = bin_num[:i] + '1' + bin_num[i+1:]\n    # convert the binary_num variable back to an integer and return it\n    return int(bin_num, 2)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize a variable to store the even bits of the given number\n    even_bits = 0\n    \n    # Iterate through each bit of the given number\n    for bit in bin(n)[2:]: \n        # If the current bit is even, set the corresponding bit in the even_bits variable\n        if int(bit) == 0: \n            even_bits += 1\n        else: \n            even_bits += 0\n    \n    # Return the final value of the even_bits variable\n    return even_bits"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize an empty list to store the bits\n    bits = []\n    # Iterate through each bit in the number\n    for bit in bin(n)[2:]:\n        # If the bit is even, append 1 to the list of bits\n        if bit == '1':\n            bits.append(1)\n        # If the bit is odd, append 0 to the list of bits\n        else:\n            bits.append(0)\n    # Convert the list of bits to an integer\n    even_bits = int(''.join(str(bit) for bit in bits), 2)\n    # Return the modified number\n    return even_bits"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize a variable to store the result\n    result = 0\n    # Loop through each bit of the input number\n    for i in range(32):\n        # Check if the current bit is even\n        if n & (1 << i):\n            # Set the corresponding bit in the result to 1\n            result |= (1 << i)\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize a new number to store the result\n    result = 0\n    \n    # Iterate through each bit of the input number\n    for bit in bin(n)[2:]:\n        # Set the corresponding bit in the result number\n        if int(bit) == 0:\n            result += 1\n    \n    # Return the result number with all even bits set\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    while n > 0:\n        if n % 2 == 0:\n            n = n ^ 1\n        n = n >> 1\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    # initialize a variable to store the result\n    result = 0\n    \n    # loop through each bit of the input number\n    for i in range(len(bin(n)[2:])):\n        # check if the current bit is even\n        if i % 2 == 0:\n            # set the corresponding bit in the result to 1\n            result |= (1 << i)\n            \n    # return the result\n    return result"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # create a dictionary to store the counts of each tuple\n    count_dict = {}\n\n    # loop through the list of tuples\n    for tup in test_list:\n        # check if the tuple is already in the dictionary\n        if tup in count_dict:\n            # if it is, increment the count\n            count_dict[tup] += 1\n        else:\n            # if it's not, add it to the dictionary with a count of 1\n            count_dict[tup] = 1\n\n    # return the dictionary of counts\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter(test_list)\n    return counter"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = Counter(test_list)\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter()\n    for tup in test_list:\n        counter.update([tup])\n    return dict(counter)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create a dictionary to store the count of each tuple\n    count_dict = {}\n    # Loop through the list of tuples and update the count of each tuple in the dictionary\n    for tup in test_list:\n        if tup in count_dict:\n            count_dict[tup] += 1\n        else:\n            count_dict[tup] = 1\n    # Return the dictionary of count of each tuple\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter(test_list)\n    return counter.most_common()"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter(test_list)\n    return dict(counter)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = {}\n    for item in test_list:\n        if item in count_dict:\n            count_dict[item] += 1\n        else:\n            count_dict[item] = 1\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Use the Counter function from the collections module to count the occurrences of each tuple in the list\n    count_dict = Counter(test_list)\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    \"\"\"\n    # create a dictionary to store the counts\n    counts = {}\n\n    # loop through the list of tuples\n    for tup in test_list:\n        # convert the tuple to a string to check for equality\n        key = str(tup)\n        # if the string is already in the dictionary, increment its count\n        if key in counts:\n            counts[key] += 1\n        # otherwise, add the key to the dictionary with a count of 1\n        else:\n            counts[key] = 1\n\n    # return the dictionary of counts\n    return counts"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_of_substrings(string):\n    count = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n\n    # Initialize a count variable to 0\n    count = 0\n\n    # Iterate through each character in the string\n    for i in range(len(str)): \n        # Check if the current character is alphanumeric\n        if str[i].isalnum(): \n            # If it is, iterate through the remaining characters in the string\n            for j in range(i+1, len(str)+1): \n                # Check if the current substring is non-empty and alphanumeric\n                if str[i:j].isalnum() and str[i:j]!= \"\": \n                    # If it is, increment the count variable\n                    count += 1\n\n    # Return the count variable\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if str[i:j].strip():\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_of_substrings(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_of_substrings(string):\n    count = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)): \n        for j in range(i+1, len(str)+1): \n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0 \n    n = len(str) \n    for i in range(n): \n        for j in range(i+1, n+1): \n            count += 1 \n    return count "
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            substr = str[i:j]\n            if substr and len(substr) > 0:\n                count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n\n    # Initialize the count of sequences to 0\n    count = 0\n\n    # Loop through all possible sequences of length n\n    for i in range(1, m+1):\n\n        # Check if each element is greater than or equal to twice the previous element but less than or equal to m\n        if i >= 2*i-2 and i <= m:\n            count += 1\n\n    # Return the count of sequences\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m, n):\n    # Initialize the count variable to zero\n    count = 0\n    # Loop through the values of i from 1 to m\n    for i in range(1, m + 1):\n        # Check if the current value is greater than or equal to twice the previous value and less than or equal to n\n        if i >= 2 * (i - 1) <= n:\n            # Increment the count variable\n            count += 1\n    # Return the final count value\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n\n    # Base case: If n is zero, return 0\n    if n == 0:\n        return 0\n\n    # Initialize the count of sequences to 1\n    count = 1\n\n    # Initialize the previous element to 0\n    prev_element = 0\n\n    # Loop through the sequence\n    for i in range(1, m+1):\n\n        # If the current element is greater than or equal to twice the previous element but less than or equal to m\n        if i >= 2*prev_element <= m:\n\n            # Increment the count of sequences\n            count += 1\n\n        # Update the previous element\n        prev_element = i\n\n    # Return the count of sequences\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    total_sequences = 0\n    for i in range(m, m + n):\n        if (i - 2) % 2 == 0:\n            total_sequences += (m - (i - 2)) // 2\n        else:\n            total_sequences += m // 2\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m, n): \n    count = 0\n    for i in range(1, m + 1):\n        for j in range(i + 2, min(i + n + 1, m + 1)):\n            if j % 2 == 0 and j - 2 >= 1:\n                count += 1\n    return count\n"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m, n):\n    # Initialize the total number of sequences to 0\n    total_sequences = 0\n    \n    # Loop through all possible sequences of length n\n    for i in range(m, n+1):\n        # Check if the current sequence is valid\n        if (i % 2 == 0 and i > 2*n) or (i % 2 == 1 and i > 2*n-1):\n            # If the sequence is valid, increment the total number of sequences\n            total_sequences += 1\n    \n    # Return the total number of sequences\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m,n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    \n    count = 0\n    \n    for i in range(n-1,m+1):\n        count += i\n        \n    return count\n"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    total_sequences = 0\n    for i in range(1,m+1):\n        if (i >= 2*i-1 and i <= m):\n            total_sequences += 1\n    \n    for i in range(1,n+1):\n        total_sequences *= (m-i+1)\n    \n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m, n):\n    # Create a list to store the possible sequences\n    sequences = []\n\n    # Loop through each value of i from 1 to m-n+1\n    for i in range(m - n + 1):\n        # Initialize the sequence with the current value of i\n        sequence = [i]\n\n        # Loop through each value of j from 1 to n-1\n        for j in range(1, n):\n            # Calculate the next possible value of j\n            next_j = (j + i) % m\n\n            # If the next possible value of j is greater than or equal to twice the previous element but less than or equal to m, add it to the sequence\n            if next_j >= 2 * sequence[-1] and next_j <= m:\n                sequence.append(next_j)\n\n        # Add the sequence to the list of sequences\n        sequences.append(sequence)\n\n    # Return the total number of sequences\n    return len(sequences)"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m, n):\n    def helper(prev, curr, m, n):\n        if curr == n:\n            return 1\n        if prev > curr:\n            return 0\n        if prev + 2 > curr or prev > m:\n            return 0\n        return helper(curr, curr + 1, m, n) + helper(prev, curr + 1, m, n)\n\n    return helper(float('-inf'), 1, m, n)"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_list(list1, list2):\n    list1[-1:] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    list1.pop()\n    list1.extend(list2)\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    if len(list1) >= len(list2):\n        list1.pop()\n    list1.extend(list2)"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    # Concatenate the two lists and reverse it\n    list_new = list1[:-1] + list2[::-1]\n    # Replace the last element of the first list with the elements of the second list\n    list1[-1:] = list2\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # initialize variables\n    index = len(list1) - 1\n    count = 0\n\n    # loop through list1\n    while index >= 0:\n        # check if last element in list1 is empty\n        if list1[index] == '':\n            # replace last element in list1 with elements of list2\n            list1[index] = list2[count]\n            count += 1\n        # decrement index\n        index -= 1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2[::-1] # Reversing the second list and replacing the last element of the first list with it.\n    return list1 # Returning the modified list."
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    list1[-1] = list2"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    This function takes a string as an input and returns the total number of characters in the string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_characters(string):\n    \"\"\"\n    This function takes a string as input and returns the total number of characters in the string.\n    \"\"\"\n    return len(string)"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    if N < 0:\n        return \"Invalid input: N cannot be negative.\"\n    sqrt_N = int(math.sqrt(N))\n    sqrt_N += 1\n    perfect_square = math.sqrt(sqrt_N)\n    return perfect_square"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def next_Perfect_Square(N): \n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    # Find the square root of N\n    root = int(math.sqrt(N))\n    # Increment the root until the square is greater than N\n    while root**2 < N:\n        root += 1\n    # Return the next perfect square greater than N\n    return root**2"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    i = 1\n    square = 1\n    while True:\n        if square**2 > N:\n            break\n        i += 1\n        square = i * (i + 1) // 2\n    return square"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    sqrt_N = math.sqrt(N)\n    while True:\n        square = int(sqrt_N**2 + 0.5)\n        if square == N:\n            return square\n        elif square > N:\n            return square\n        else:\n            sqrt_N += 1"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef next_Perfect_Square(N): \n    \"\"\"\n    This function takes a positive integer N and returns the next perfect square greater than N.\n    \"\"\"\n    # find the square root of N\n    root = math.sqrt(N)\n    \n    # check if the square root is integer or not\n    if int(root) == root:\n        # if the square root is integer, then find the next integer greater than the square root\n        next_integer = math.ceil(root)\n    else:\n        # if the square root is not integer, then find the next greater integer using binary search\n        next_integer = int(math.ceil(root))\n    \n    # calculate the next perfect square\n    next_perfect_square = next_integer ** 2\n    \n    # check if the next perfect square is greater than N\n    if next_perfect_square > N:\n        # if the next perfect square is greater than N, return the next perfect square\n        return next_perfect_square\n    else:\n        # if the next perfect square is not greater than N, then find the next perfect square\n        # by iterating from N to infinity and checking if each number is a perfect square or not\n        for i in range(int(root), math.inf):\n            if i ** 2 == next_integer:\n                next_perfect_square = i ** 2\n                break\n        else:\n            # if no perfect square is found in the range, then return infinity\n            return math.inf\n        \n        # check if the next perfect square is greater than N\n        if next_perfect_square > N:\n            # if the next perfect square is greater than N, return the next perfect square\n            return next_perfect_square\n        else:\n            # if the next perfect square is not greater than N, then return infinity\n            return math.inf"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    root = int(math.sqrt(N))\n    while True:\n        N += 1\n        square = int(math.sqrt(N))\n        if square > root:\n            return N\n        else:\n            return next_Perfect_Square(N)"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a Python function to find the next perfect square greater than a given number.\n    \"\"\"\n    # Iterate through the range of numbers from 2 to the square root of N\n    for i in range(2, int(math.sqrt(N))+1):\n        # Check if i is a perfect square\n        if i**2 == N:\n            # If it is, check if it's the smallest perfect square\n            if (i-1)**2 < N:\n                # If it's not, return the next smallest perfect square\n                return (i-1)**2\n            else:\n                # If it is, return the next perfect square\n                return i**2\n        # Check if i+i is a perfect square\n        if i**2 + i**2 == N:\n            # If it is, check if it's the smallest perfect square\n            if (i-1)**2 < N:\n                # If it's not, return the next smallest perfect square\n                return (i-1)**2\n            else:\n                # If it is, return the next perfect square\n                return i**2\n    # If we've checked all numbers, return N+1\n    return N+1"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # convert N to float and initialize a variable to store the next perfect square\n    N = float(N)\n    next_square = N + (math.sqrt(N) - int(math.sqrt(N)))\n    \n    # check if next perfect square is greater than 1\n    if next_square > 1:\n        # convert next perfect square to integer and return it\n        return int(next_square)\n    else:\n        # if next perfect square is not greater than 1, call the function recursively with the next perfect square\n        return next_Perfect_Square(int(next_square))"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    def is_prime(n):\n        \"\"\"\n        A helper function to check if a number is prime or not.\n        \"\"\"\n        if n < 2:\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def next_prime(n):\n        \"\"\"\n        A helper function to find the next prime number after a given number.\n        \"\"\"\n        while True:\n            n += 1\n            if is_prime(n):\n                return n\n\n    def next_perfect_square(n):\n        \"\"\"\n        A helper function to find the next perfect square greater than a given number.\n        \"\"\"\n        sqrt_n = int(math.sqrt(n))\n        root_n = (sqrt_n + 1) * (sqrt_n + 1)\n        while True:\n            root_n += 1\n            if is_prime(root_n):\n                return root_n\n\n    next_prime_greater = next_prime(N)\n    next_perfect_square_greater = next_perfect_square(next_prime_greater)\n\n    return next_perfect_square_greater"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num))+1):\n            if num % i == 0:\n                return False\n        return True\n\n    def next_prime(num):\n        while True:\n            num += 1\n            if is_prime(num):\n                return num\n\n    def next_perfect_square(num):\n        square = math.sqrt(num)\n        if square == int(square):\n            square += 1\n        else:\n            square = int(square) + 1\n\n        while not is_prime(square):\n            square += 1\n\n        return square\n\n    square = next_perfect_square(N)\n    return square"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    max_sum = float('-inf')\n    prev_val = arr[0]\n    curr_sum = 0\n    for i in range(1, len(arr)):\n        if arr[i] > prev_val:\n            curr_sum += arr[i]\n        else:\n            curr_sum -= prev_val\n            max_sum = max(max_sum, curr_sum)\n            prev_val = arr[i]\n    curr_sum -= prev_val\n    max_sum = max(max_sum, curr_sum)\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    \n    # Initialize variables to store the maximum subsequence sum and the current subsequence sum\n    max_sum_so_far = float('-inf')\n    current_sum = 0\n    \n    # Iterate through the array and check if the current element is increasing or decreasing\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i-1]:\n            current_sum += arr[i]\n        else:\n            max_sum_so_far = max(max_sum_so_far, current_sum)\n            current_sum = 0\n    \n    # Check if there is any remaining subsequence to consider\n    max_sum_so_far = max(max_sum_so_far, current_sum)\n    \n    return max_sum_so_far"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum(arr):\n    \"\"\"\n    This function takes an array and finds the maximum sum of a bitonic subsequence for the given array, \n    where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    # Initialize the variables\n    n = len(arr)\n    dp = [0] * n\n    dp[0] = arr[0]\n\n    # Calculate the sum of the first and last elements\n    if arr[0] < arr[n-1]:\n        dp[0] += arr[n-1]\n    else:\n        dp[n-1] += arr[0]\n\n    # Calculate the sum of the middle elements\n    for i in range(1, n-1):\n        if arr[i-1] < arr[i] < arr[i+1]:\n            dp[i] = arr[i-1] + arr[i+1]\n        elif arr[i-1] > arr[i] > arr[i+1]:\n            dp[i] = arr[i-1] + arr[i+1]\n\n    # Find the maximum sum of the bitonic subsequence\n    max_sum = max(dp)\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    if n == 1:  # base case\n        return arr[0]\n    if arr[0] < arr[1]:  # increasing subsequence\n        max_sum_increasing = max_sum(arr[1:]) + arr[0]\n    else:  # decreasing subsequence\n        max_sum_decreasing = max_sum(arr[1:]) + arr[0]\n    return max(max_sum_increasing, max_sum_decreasing)"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) <= 1:\n        return 0\n\n    left_sum = 0\n    right_sum = 0\n\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            left_sum += arr[i]\n        else:\n            right_sum += arr[i]\n\n    if left_sum > right_sum:\n        return max_sum(left_sum) + max_sum(right_sum - left_sum)\n    else:\n        return max_sum(right_sum) + max_sum(left_sum - right_sum)"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum(arr): \n    n = len(arr) \n    if n < 3: \n        return 0 \n    elif arr[0] <= arr[1]: \n        return max_sum_first_increasing(arr, 2) \n    elif arr[1] <= arr[2]: \n        return max_sum_first_decreasing(arr, 2) \n    else: \n        return max_sum_alternating(arr) \n\ndef max_sum_first_increasing(arr, start): \n    max_so_far = arr[start] \n    current_sum = arr[start] \n    for i in range(start + 1, n): \n        current_sum += arr[i] \n        if current_sum > max_so_far: \n            max_so_far = current_sum \n    return max_so_far \n\ndef max_sum_first_decreasing(arr, start): \n    max_so_far = arr[start] \n    current_sum = arr[start] \n    for i in range(start + 1, n): \n        current_sum += arr[i] \n        if current_sum < max_so_far: \n            max_so_far = current_sum \n    return max_so_far \n\ndef max_sum_alternating(arr): \n    max_so_far = max_so_far_prev = arr[0] \n    for i in range(1, n): \n        current_sum = max_so_far + arr[i] \n        if current_sum > max_so_far_prev: \n            max_so_far_prev = max_so_far \n            max_so_far = current_sum \n        else: \n            max_so_far_prev = current_sum \n    return max_so_far "
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) < 3:\n        return 0\n\n    inc_count = 0\n    dec_count = 0\n    max_sum = float('-inf')\n    current_sum = 0\n\n    for num in arr:\n        if num > arr[inc_count]:\n            inc_count += 1\n            current_sum = num\n        elif num < arr[dec_count]:\n            dec_count += 1\n            current_sum = num\n        else:\n            current_sum += num\n\n        if inc_count > dec_count:\n            if current_sum > max_sum:\n                max_sum = current_sum\n        else:\n            if current_sum < max_sum:\n                max_sum = current_sum\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    dp = [0] * (2 * n + 1)\n\n    for i in range(n):\n        dp[i + n] = arr[i]\n\n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if i == 0:\n                dp[i + j] = max(dp[j], arr[j])\n            else:\n                dp[i + j] = max(dp[i - 1] + arr[j], dp[i] + arr[j], dp[j] - arr[i - 1], arr[j])\n\n    return dp[n]\n"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n\n    # Initialize the maximum sum and the current sum\n    max_sum = arr[0]\n    curr_sum = arr[0]\n\n    # Iterate through the array\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            # If the current element is decreasing, add it to the current sum and update the maximum sum if needed\n            curr_sum += arr[i]\n            if curr_sum > max_sum:\n                max_sum = curr_sum\n        else:\n            # If the current element is increasing, subtract it from the current sum and update the maximum sum if needed\n            curr_sum -= arr[i-1]\n            if curr_sum > max_sum:\n                max_sum = curr_sum\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # initialize the maximum sum and the current sum variables\n    max_sum = arr[0]\n    current_sum = arr[0]\n\n    # iterate over the array\n    for i in range(1, len(arr)):\n        # if the current element is greater than the previous element, add it to the current sum\n        if arr[i] > arr[i-1]:\n            current_sum += arr[i]\n        # otherwise, subtract the previous element from the current sum\n        else:\n            current_sum -= arr[i-1]\n        \n        # update the maximum sum if necessary\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n    return max_sum"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = 1.0\n    y = number/x\n    while abs(x - y) > 0.001:\n        x = y\n        y = (number/x) + ((number/x)**2)/((2*x)-(1))\n    return y"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    i = 0\n    x = 1\n    y = number\n    while abs(x - y) > 0.0000000001:\n        x = (x + y) / 2\n        y = number / x\n        i += 1\n    return round(x, 10), i"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2\n    while guess**2 > number:\n        guess = (guess + number / guess) / 2\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = number\n    guess = (x + number / x) / 2.0\n    i = 1\n    while abs(guess**2 - x) > 0.0001:\n        guess = (x + number / x) / 2.0\n        i += 1\n    return guess, i"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Write a function for computing square roots using the babylonian method.\n    \"\"\"\n    epsilon = 1e-9\n    x = number\n    y = (x + number / x) / 2\n    while abs(y - x) > epsilon:\n        x = y\n        y = (x + number / x) / 2\n    return y"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    a = 1 # initial approximation\n    b = number # target number\n    iteration = 0\n    while abs(b-a) > 1e-6: # iterate until difference between a and b is less than 1e-6\n        iteration += 1\n        c = (a+b)/2 # intermediate estimate\n        if c*c == b: # if estimate is a square\n            return c\n        if c*c < b: # if estimate is closer to target\n            a = c\n        else: # if estimate is further from target\n            b = c\n    return a # if we reach this point, the answer is the final approximation"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2\n    while abs(guess**2 - number) > 0.0001:\n        guess = (guess + number / guess) / 2\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number/2\n    prev_guess = guess\n    while abs(prev_guess*guess - number) > 0.001:\n        prev_guess = guess\n        guess = (prev_guess + number/prev_guess)/2\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number < 0:\n        raise ValueError('Input must be a non-negative number.')\n    \n    guess = number / 2\n    prev_guess = guess\n    \n    while guess**2 > number:\n        prev_guess = guess\n        guess = (guess + number / guess) / 2\n        \n    return prev_guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x0 = number / 2.0\n    x1 = 0.0\n    x2 = 0.0\n    x3 = 0.0\n    x4 = 0.0\n    x5 = 0.0\n    x6 = 0.0\n    x7 = 0.0\n    x8 = 0.0\n    x9 = 0.0\n    \n    for i in range(10):\n        x1 = x0 / x1\n        x2 = x0 / x2\n        x3 = x0 / x3\n        x4 = x0 / x4\n        x5 = x0 / x5\n        x6 = x0 / x6\n        x7 = x0 / x7\n        x8 = x0 / x8\n        x9 = x0 / x9\n        \n        if x1 == 0.0 or x2 == 0.0 or x3 == 0.0 or x4 == 0.0 or x5 == 0.0 or x6 == 0.0 or x7 == 0.0 or x8 == 0.0 or x9 == 0.0:\n            break\n            \n    return x1"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lps(s):\n    \"\"\"\n    This function takes a string as input and returns the length of the longest palindromic subsequence in the string.\n    \"\"\"\n    n = len(s)\n    if n == 0 or n == 1:\n        return n\n\n    dp = [[0] * n for _ in range(n)]\n\n    for i in range(n):\n        dp[i][i] = 1\n        if s[i] == s[i + 1]:\n            dp[i][i + 1] = 2\n\n    for length in range(3, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if s[i] == s[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n\n    return dp[0][n - 1]\n"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lps(str):\n    n = len(str)\n    # Create a 2D table to store the lengths of palindromic subsequences ending at each position\n    lps_table = [[0 for j in range(n)] for i in range(n)]\n    max_len = 0\n    # Initialize the first row and column\n    for i in range(n):\n        lps_table[i][i] = 1\n    for length in range(2, n + 1):\n        # Iterate over all possible subsequences of length length\n        for start in range(n - length + 1):\n            end = start + length - 1\n            # Check if the subsequence is palindromic and update the LPS table\n            if str[start] == str[end]:\n                lps_table[start][end] = lps_table[start + 1][end - 1] + 2\n                if lps_table[start][end] > max_len:\n                    max_len = lps_table[start][end]\n    return max_len"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lps(str): \n    '''\n    This function will find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    dp = [[0] * n for _ in range(n)]\n\n    # length of the longest palindromic subsequence of odd length\n    for i in range(1, n-1):\n        if str[i] == str[i+1]:\n            dp[i][i+1] = 2\n        else:\n            dp[i][i+1] = 1\n\n    # length of the longest palindromic subsequence of even length\n    for length in range(3, n+1, 2):\n        for i in range(n-length+1):\n            j = i+length-1\n            if str[i] == str[j]:\n                dp[i][j] = length+2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n\n    return dp[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n\n    # Create a dictionary to store the length of the longest palindromic subsequence ending at each index in the string\n    dp = {}\n\n    # Initialize the length of the longest palindromic subsequence ending at index 0 to 1\n    dp[0] = 1\n\n    # Iterate through the string and update the length of the longest palindromic subsequence ending at each index\n    for i in range(1, len(str)):\n        # If the character at the current index is the same as the previous character, extend the longest palindromic subsequence\n        if str[i] == str[i-1]:\n            dp[i] = dp[i-1] + 1\n        # If the character at the current index is different from the previous character, reset the longest palindromic subsequence to the maximum of the longest palindromic subsequence ending at the previous index and the current index\n        else:\n            dp[i] = max(dp[i-1], dp[i])\n\n    # Return the length of the longest palindromic subsequence ending at the last index in the string\n    return dp[len(str)-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lps(s):\n    if not s:\n        return 0\n    n = len(s)\n    p = [0] * n\n    max_len = 1\n    start = 0\n    \n    for i in range(1, n):\n        if s[i] == s[start]:\n            p[i] = p[start] + 1\n            if p[i] > max_len:\n                start = i\n                max_len = p[i]\n        else:\n            p[i] = 0\n            \n            if i - p[start] > max_len:\n                start = i\n    \n    return max_len"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lps(str):\n    # create a 2D matrix to store all possible subsequences \n    # of the input string\n    n = len(str)\n    matrix = [[0 for j in range(n)] for i in range(n)]\n\n    # fill the matrix in bottom up manner \n    for i in range(n): \n        matrix[i][i] = 1\n\n    for length in range(3, n + 1): \n        for i in range(n - length + 1): \n            j = i + length - 1\n            if str[i] == str[j]: \n                matrix[i][j] = matrix[i+1][j-1] + 2\n            else: \n                matrix[i][j] = max(matrix[i+1][j], matrix[i][j-1])\n\n    # find the longest palindromic subsequence \n    max_length = matrix[0][n-1]\n    start = 0\n    for i in range(1, n):\n        if matrix[i][n-1] > max_length:\n            max_length = matrix[i][n-1]\n            start = i\n\n    # return the length of the longest palindromic subsequence \n    return max_length\n"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if len(str) == 1:\n        return 1\n    \n    n = len(str)\n    lps = [1] * n\n    \n    for i in range(1, n):\n        if str[i] == str[i-1]:\n            lps[i] = lps[i-1] + 1\n            \n        elif lps[i-1] > 0 and str[i]!= str[i-lps[i-1]]:\n            lps[i] = max(lps[i-1], lps[i-lps[i-1]])\n            \n    return max(lps)"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lps(str): \n    n = len(str) \n  \n    # create a 2D array to store lengths of longest palindromic subsequences \n    # of all prefixes of str \n    L = [[0 for j in range(n)] for i in range(n)] \n  \n    # initialize L[i][j] to 0 if str[i:j] is not a palindrome, else 2*L[i+1][j-1] \n    for i in range(n): \n        for j in range(n): \n            if i == j: \n                L[i][j] = 1 \n            elif j == i: \n                L[i][j] = 1 \n            elif str[i] == str[j]: \n                L[i][j] = 2 * L[i+1][j-1] + 1 \n            else: \n                L[i][j] = 0 \n  \n    # find the length of the longest palindromic subsequence \n    length = 0 \n    for i in range(n): \n        for j in range(i, n): \n            if L[i][j] > length: \n                length = L[i][j] \n  \n    return length"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    # Create a 2D array to store the length of longest palindromic subsequences for all substrings of the given string\n    dp = [[0 for j in range(len(str)+1)] for i in range(len(str)+1)]\n\n    # Fill the first row and first column of the 2D array with 1\n    for i in range(1, len(str)+1):\n        dp[i][0] = 1\n        dp[0][i] = 1\n\n    # Fill the remaining elements of the 2D array using dynamic programming\n    for i in range(1, len(str)+1):\n        for j in range(1, len(str)+1):\n            if str[i-1] == str[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n\n    # Return the length of the longest palindromic subsequence in the given string\n    return dp[len(str)][len(str)]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lps(str):\n    \"\"\"\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    # Initialize an empty list to store lengths of palindromic subsequences\n    lengths = []\n\n    # Loop through each character in the string\n    for i in range(len(str)):\n        # Initialize two pointers, one starting from the left and the other starting from the right\n        left = right = i\n\n        # Expand the palindromic subsequence to the left and right\n        while left >= 0 and right < len(str) and str[left] == str[right]:\n            left -= 1\n            right += 1\n\n        # Append the length of the palindromic subsequence to the list\n        lengths.append(right - left - 1)\n\n        # Move the right pointer to the left\n        right = i - 1\n\n        # Expand the palindromic subsequence to the left and right\n        while left >= 0 and right >= 0 and str[left] == str[right]:\n            left -= 1\n            right += 1\n\n        # Append the length of the palindromic subsequence to the list\n        lengths.append(right - left - 1)\n\n    # Return the maximum length of the palindromic subsequences\n    return max(lengths)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(1, n):\n        harmonic_sum += 1/i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(1, n):\n        harmonic_sum += 1 / i\n    return harmonic_sum\n"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (1/n) + (1/n**2) + (1/n**3) +... + (1/n**n)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(n-1):\n        harmonic_sum += 1/i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (1/n) + harmonic_sum(n-1)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (1/n) + harmonic_sum(n-1)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (1/n + (1/(n-1))*((1/n)-(1/(n-1))))**n"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 2*n - (n-1)**2"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    harmonic_sum = 0\n    for i in range(1, n+1):\n        harmonic_sum += 1 / i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n):\n        sum += (1/i)\n    return sum"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Convert the input arrays to sets to remove duplicates\n    array_nums1_set = set(array_nums1)\n    array_nums2_set = set(array_nums2)\n    \n    # Find the intersection of the sets using the intersection() method\n    intersection_set = array_nums1_set.intersection(array_nums2_set)\n    \n    # Convert the intersection set back to a list and return it\n    return list(intersection_set)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    This function takes two arrays as input and returns their intersection.\n    \"\"\"\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n    intersection = set1.intersection(set2)\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    This function takes in two arrays as input and returns a list of their intersection.\n    '''\n    # Create a set to store unique elements from array_nums2\n    array_nums2_set = set(array_nums2)\n\n    # Use set intersection to find the intersection of the two arrays\n    intersection_set = set(array_nums1).intersection(array_nums2_set)\n\n    # Convert the set intersection to a list and return it\n    return list(intersection_set)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n\n    # Iterate through each element in array_nums1\n    for num1 in array_nums1:\n        # Check if the element is in array_nums2\n        if num1 in array_nums2:\n            # If it is, add it to the intersection list\n            intersection.append(num1)\n\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    This function takes in two arrays as arguments and returns the intersection of the two arrays.\n    \"\"\"\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    array_nums1 = list(set(array_nums1))  # remove duplicates from array_nums1\n    array_nums2 = list(set(array_nums2))  # remove duplicates from array_nums2\n    \n    intersection_array = []\n    \n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection_array:\n            intersection_array.append(num)\n    \n    return intersection_array"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    This function takes two arrays as input and returns their intersection.\n    '''\n    # Create a set from the first array and store it in a variable.\n    set_nums1 = set(array_nums1)\n\n    # Loop through the second array and check if the current element exists in the set from the first array.\n    # If it does, add it to the intersection array and remove it from the set from the first array.\n    intersection_array = []\n    for num in array_nums2:\n        if num in set_nums1:\n            intersection_array.append(num)\n            set_nums1.remove(num)\n\n    return intersection_array"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Create an empty set to store the intersection\n    intersection = set()\n\n    # Loop through each element in array_nums1\n    for num1 in array_nums1:\n        # Check if the element is present in array_nums2\n        if num1 in array_nums2 and num1 not in intersection:\n            # Add the element to the intersection set\n            intersection.add(num1)\n\n    # Return the intersection set as a list\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    This function takes two arrays as input and returns the intersection of the two arrays.\n    '''\n    intersection = []\n    # create a hash table to store the frequency of elements in the second array\n    freq_table = {}\n    for num in array_nums2:\n        if num in freq_table:\n            freq_table[num] += 1\n        else:\n            freq_table[num] = 1\n\n    # iterate through the first array and check if each element is present in the hash table\n    for num in array_nums1:\n        if num in freq_table and freq_table[num] > 0:\n            intersection.append(num)\n            freq_table[num] -= 1\n\n    return intersection"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_X(tup, x): \n    count = 0\n    for elem in tup: \n        if elem == x: \n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_X(tup, x): \n    count = 0 \n    for item in tup: \n        if item == x: \n            count += 1 \n    return count "
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_X(tup, x):\n    \"\"\"\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    \"\"\"\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_X(tup, x):\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_X(tup, x):\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    # Initialize an empty list to store the resulting list\n    result = []\n    \n    # Iterate over each element in the original list\n    for i in range(len(list)):\n        # Insert the element before the current element\n        result.append(element)\n        result.append(list[i])\n    \n    # Remove the last element of the resulting list (which is the duplicate of the last element in the original list)\n    result.pop()\n    \n    # Return the resulting list\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    # create a new empty list to store the modified list\n    modified_list = []\n    # loop through each element in the input list\n    for i in range(len(list)):\n        # add the current element to the modified list\n        modified_list.append(list[i])\n        # add the element to be inserted before the current element to the modified list\n        modified_list.insert(i, element)\n    # return the modified list\n    return modified_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    # Initialize a new list to hold the modified elements\n    modified_list = []\n    \n    # Loop through each element in the original list\n    for i in range(len(list)):\n        # Insert the element before the current element in the list\n        modified_list.insert(i, element)\n        # Add the current element to the end of the modified list\n        modified_list.append(list[i])\n        \n    return modified_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.append(list[i])\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.append(list[i])\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    # initialize a new empty list to store the modified list\n    modified_list = []\n    # loop through the original list\n    for i in range(len(list)):\n        # insert the element before the current element in the list\n        modified_list.append(element)\n        modified_list.append(list[i])\n    # return the modified list\n    return modified_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list,\n    and returns the resulting list.\n    \"\"\"\n    for i in range(len(list)):\n        list.insert(i, element)\n    return list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for i in range(len(list)):\n        list.insert(0,element)\n    return list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        result.append(list[i])\n        result.append(element)\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        num = complex(num)\n        r = cmath.sqrt(num.real**2 + num.imag**2)\n        theta = cmath.phase(num)\n        print(f\"({num.real}, {num.imag}) = ({r.real}, {theta.real})\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    Write a python function to convert complex numbers to polar coordinates.\n    \"\"\"\n    for num in numbers:\n        # Convert complex number to polar coordinates\n        r = abs(num)\n        theta = cmath.phase(num)\n        \n        # Print polar coordinates\n        print(\"Polar coordinates for\", num, \"are:\", r, \"and\", theta)"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        r = num.real**2 + num.imag**2\n        theta = cmath.phase(num)\n        print(\"({}, {})\".format(r, theta))"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    Write a python function to convert complex numbers to polar coordinates.\n    \"\"\"\n    polar_coordinates = []\n    for number in numbers:\n        real, imag = number.real, number.imag\n        distance = cmath.sqrt(real**2 + imag**2)\n        angle = cmath.phase(number)\n        polar_coordinates.append((distance, angle))\n    return polar_coordinates"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for number in numbers:\n        if isinstance(number, complex):\n            r, theta = cmath.polar(number)\n            result.append((r, theta))\n        else:\n            raise TypeError(\"Only complex numbers can be converted to polar coordinates.\")\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for num in numbers:\n        if isinstance(num, complex):\n            x = num.real\n            y = num.imag\n            r = cmath.sqrt(x**2 + y**2)\n            theta = cmath.phase(num)\n            polar_num = (r, theta)\n            result.append(polar_num)\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for number in numbers:\n        if isinstance(number, complex):\n            r = cmath.sqrt(number.real**2 + number.imag**2)\n            theta = cmath.phase(number)\n            print(f\"({r:.2f}, {theta:.2f})\")\n        else:\n            print(\"Not a complex number\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_coordinates = []\n    for num in numbers:\n        complex_num = complex(num)\n        real = complex_num.real\n        imag = complex_num.imag\n        polar = cmath.polar(complex_num)\n        polar_coordinates.append((real, imag, polar[0]))\n    return polar_coordinates"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for num in numbers:\n        # get the modulus and angle of a complex number\n        modulus = cmath.sqrt(num.real**2 + num.imag**2)\n        angle = cmath.phase(num)\n        \n        # create a tuple of the polar coordinates\n        polar_num = (modulus, angle)\n        \n        # append the polar coordinates to the result list\n        result.append(polar_num)\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_numbers = []\n    for num in numbers:\n        # convert to polar coordinates using cmath module\n        r = cmath.sqrt(num.real**2 + num.imag**2)\n        theta = cmath.phase(num)\n        # add polar coordinates to list\n        polar_numbers.append((r, theta))\n    return polar_numbers"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_integer(lst):\n    \"\"\"\n    This function takes a list as an argument and returns the number of integer elements in it.\n    \"\"\"\n    count = 0\n    for item in lst:\n        if type(item) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_integer(lst):\n    count = 0\n    for item in lst:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_integer(lst):\n    count = 0\n    for element in lst:\n        if type(element) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_integer(list1):\n    \"\"\"\n    Write a python function that returns the number of integer elements in a given list.\n    \"\"\"\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_integer(lst):\n    \"\"\"\n    This function returns the number of integer elements in a given list.\n    \"\"\"\n    count = 0\n    for i in lst:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for num in list1:\n        if isinstance(num, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combinations = []\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            combinations.append((l[i], l[j]))\n    return combinations\n"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [tuple(combination) for combination in combinations_with_replacement(l, n)]"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combinations = []\n    for i in range(len(l)-n+1):\n        combination = tuple(l[i:i+n])\n        combinations.append(combination)\n    return combinations"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    result = []\n    for i in range(len(l)):\n        for j in range(i+1, len(l)+1):\n            if j-i == n:\n                result.append(tuple(l[i:j]))\n    return result"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # Generate all combinations with replacement using itertools\n    result = list(combinations_with_replacement(l, n))\n    # Convert the list of tuples into a list of lists of tuples\n    return [list(x) for x in result]"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    \"\"\"\n    Generate all combinations (with repetition) of the elements of the list and return a list with a tuple for each combination.\n    \"\"\"\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    result = []\n    for i in range(len(l)):\n        for j in range(i+1, len(l)+1):\n            combination = tuple(sorted(l[i:j]))\n            result.append(combination)\n    return result"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_prime(n):\n    \"\"\"\n    Returns True if n is a prime number, False otherwise.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    \"\"\"\n    Returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n+1):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    count = 0\n    for i in range(2, n+1):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    '''\n    This function takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        flag = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                flag = False\n                break\n        if flag:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_prime(num):\n    \"\"\"\n    Helper function to check if a given number is prime.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    \"\"\"\n    This function takes in a non-negative number n and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    num = 2\n    while num < n:\n        is_prime = True\n        for i in range(2, num):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n        num += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        if i > 1:\n            for j in range(2, i):\n                if i % j == 0:\n                    break\n            else:\n                count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    \n    # Initialize count to 0\n    count = 0\n    \n    # Iterate through numbers from 2 to n\n    for i in range(2, n):\n        \n        # Check if i is prime\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i%j == 0:\n                is_prime = False\n                break\n        \n        # If i is prime, increment count\n        if is_prime:\n            count += 1\n    \n    # Return count of prime numbers\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for num in range(2, n):\n        is_prime = True\n        for i in range(2, num):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            count += 1\n    if n > 1:\n        count += 1\n    return count"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_numbers(a, b):\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_numbers(a, b):\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_numbers(a, b):\n    \"\"\"\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_numbers(a, b):\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_numbers(a,b):\n    return b, a"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n    \"\"\"\n    max_val = None\n    max_tup = None\n    \n    # loop through the tuples\n    for tup in [test_tup1, test_tup2]:\n        for elem in tup:\n            # check if the current element is greater than max_val\n            if max_val is None or elem > max_val:\n                max_val = elem\n                max_tup = tup\n    \n    # return the maximum tuple\n    return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1[0] > test_tup2[0]:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return test_tup1\n    elif len(test_tup1) < len(test_tup2):\n        return test_tup2\n    else:\n        return None\n"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_value = 0\n    max_tup = None\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            if test_tup1[i] > max_value:\n                max_value = test_tup1[i]\n                max_tup = test_tup1\n        elif test_tup2[i] > test_tup1[i]:\n            if test_tup2[i] > max_value:\n                max_value = test_tup2[i]\n                max_tup = test_tup2\n    return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return max(test_tup1)\n    elif len(test_tup1) < len(test_tup2):\n        return max(test_tup2)\n    else:\n        if test_tup1[0] > test_tup2[0]:\n            return test_tup1[0]\n        elif test_tup1[0] < test_tup2[0]:\n            return test_tup2[0]\n        else:\n            return maximize_elements(test_tup1[1:], test_tup2[1:])"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples as input and returns the maximum element from each tuple.\n    \"\"\"\n    return (max(test_tup1), max(test_tup2))\n"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1[0] > test_tup2[0]:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Check if the two tuples are same size\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The two tuples are not the same size.\")\n        return\n    \n    # Find the maximum value in each tuple\n    max1 = max(test_tup1)\n    max2 = max(test_tup2)\n    \n    # Find the index of the maximum value in each tuple\n    idx1 = test_tup1.index(max1)\n    idx2 = test_tup2.index(max2)\n    \n    # Swap the elements at the maximum indices\n    test_tup1[idx1], test_tup1[idx2] = test_tup1[idx2], test_tup1[idx1]\n    test_tup2[idx1], test_tup2[idx2] = test_tup2[idx2], test_tup2[idx1]\n    \n    # Return the maximized tuples\n    return (test_tup1, test_tup2)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n\n    # Check if the tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Both tuples must have the same length.\")\n        return None\n\n    # Check if the elements are integers\n    for i in test_tup1:\n        if not isinstance(i, int):\n            print(\"Error: All elements in the tuples must be integers.\")\n            return None\n\n    # Check if the elements are in increasing order\n    if not all(test_tup1[i] <= test_tup1[i+1] for i in range(len(test_tup1)-1)):\n        print(\"Error: All elements in the tuples must be in increasing order.\")\n        return None\n\n    # If all checks pass, maximize the two tuples\n    max_tuple = test_tup1\n    for i in range(len(test_tup2)):\n        if test_tup2[i] > test_tup1[i]:\n            max_tuple = test_tup2\n            break\n\n    return max_tuple"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Check if the two tuples have equal length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples have different lengths.\")\n        return\n    \n    # Initialize max_val and max_tup\n    max_val = test_tup1[0]\n    max_tup = test_tup1\n    \n    # Loop through the tuples to compare values\n    for i in range(1, len(test_tup1)):\n        if test_tup1[i] > max_val:\n            max_val = test_tup1[i]\n            max_tup = test_tup1\n    \n    # Loop through the tuples to compare values\n    for i in range(1, len(test_tup2)):\n        if test_tup2[i] > max_val:\n            max_val = test_tup2[i]\n            max_tup = test_tup2\n    \n    # Return the max value and the tuple with that value\n    return max_val, max_tup"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    primes = [2]\n    for i in range(3, n+1):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes[n-1]"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    def is_prime(num):\n        \"\"\"\n        Helper function to check if a number is prime or not.\n        \"\"\"\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def next_prime(num):\n        \"\"\"\n        Helper function to find the next prime number after a given number.\n        \"\"\"\n        while True:\n            num += 1\n            if is_prime(num):\n                return num\n\n    def newman_shanks_williams(n):\n        \"\"\"\n        Main function to find the nth newman\u2013shanks\u2013williams prime number.\n        \"\"\"\n        num = 3\n        while True:\n            if is_prime(num):\n                return num\n            num = next_prime(num)\n\n    return newman_shanks_williams(n)"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n\n    # initialize a list to store prime numbers\n    primes = []\n\n    # initialize a variable to store the current prime number\n    prime = 2\n\n    # loop through the numbers from 2 to n\n    for i in range(2, n + 1):\n\n        # check if the current number is prime\n        is_prime = True\n        for j in range(2, int(prime ** 0.5) + 1):\n            if prime % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(prime)\n\n        # increment the current prime number\n        prime += 1\n\n    # return the nth newman\u2013shanks\u2013williams prime number\n    return primes[n - 1]"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # initialize a counter variable to keep track of the number of primes found so far\n    count = 0\n    # initialize a variable to store the current number being checked\n    current_num = 2\n    \n    # loop through all numbers from 2 to n\n    while count < n:\n        # check if the current number is prime using the is_prime function\n        if is_prime(current_num):\n            # if the current number is prime, increment the count variable\n            count += 1\n        # increment the current number by 1\n        current_num += 1\n    \n    # return the nth newman-shanks-williams prime number\n    return current_num - 1"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    def is_prime(num): \n        '''\n        Helper function to check if a number is prime or not.\n        '''\n        if num < 2: \n            return False\n        for i in range(2, int(num**0.5) + 1): \n            if num % i == 0: \n                return False\n        return True\n\n    def newman_s_williams_prime(n): \n        '''\n        Helper function to generate the nth newman\u2013shanks\u2013williams prime number.\n        '''\n        num = 2\n        while True: \n            if is_prime(num): \n                yield num\n                if len(newman_s_williams_prime(n)) == n: \n                    break\n            num += 1\n\n    for prime in newman_s_williams_prime(n): \n        print(prime)"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n < 1:\n        return \"Please enter a positive integer.\"\n    \n    # Initialize the count of primes found so far\n    count = 0\n    \n    # Initialize the list of primes found so far\n    primes = [2]\n    \n    # Loop until we have found the nth prime\n    while len(primes) < n:\n        # Find the next prime number\n        p = primes[-1] + 1\n        \n        # Check if p is prime\n        is_prime = True\n        for i in range(2, int(p**0.5)+1):\n            if p % i == 0:\n                is_prime = False\n                break\n        \n        # If p is prime, add it to the list of primes and increment the count\n        if is_prime:\n            primes.append(p)\n            count += 1\n    \n    # Return the nth prime\n    return primes[n-1]"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # initialize variable to store nth newman prime number\n    newman_prime = 0\n\n    # loop from 2 to sqrt(n)\n    for i in range(2, int(n**0.5)+1):\n        # check if n is a newman prime number\n        if n % i == 0:\n            # if n is a newman prime number, check if it is also a williams prime number\n            if i**2 == n:\n                newman_prime = i\n            else:\n                j = n // i\n                if j**2 == n:\n                    newman_prime = i\n                else:\n                    k = (n-i*j) // i\n                    if k**2 == n:\n                        newman_prime = i\n                    else:\n                        continue\n                    \n    # if n is not a newman prime number, then it is a williams prime number\n    if newman_prime == 0:\n        newman_prime = n\n    \n    # return the nth newman prime number\n    return newman_prime"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    newman_primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]\n    return newman_primes[n-1]\n\nn = int(input(\"Enter the value of n: \"))\nprint(newman_prime(n))"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 3\n    else:\n        for i in range(2, n):\n            for j in range(2, i):\n                if i % j == 0:\n                    break\n            else:\n                return i"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]\n    for i in range(10, n + 1):\n        is_prime = True\n        for prime in primes:\n            if i % prime == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes[n]"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Check if both tuples are same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples should be of same length\")\n    # Perform element-wise division operation\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two input tuples must have the same length\")\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] / test_tup2[i])\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_list = []\n    for i in range(len(test_tup1)):\n        result_list.append(test_tup1[i] / test_tup2[i])\n    return tuple(result_list)"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Check if both input tuples have the same number of elements\n    if len(test_tup1)!= len(test_tup2):\n        return \"Error: Tuples have different number of elements\"\n\n    # Initialize the result tuple\n    result_tup = ()\n\n    # Loop through each element of the input tuples\n    for i in range(len(test_tup1)):\n        # Check if the second element is zero\n        if test_tup2[i] == 0:\n            return \"Error: Cannot divide by zero\"\n\n        # Perform the division operation and append the result to the result tuple\n        result_tup += (test_tup1[i] // test_tup2[i],)\n\n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup2[i] == 0:\n            print(f\"Error: cannot divide {test_tup1[i]} by zero\")\n            continue\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        try:\n            result_tup += (test_tup1[i] / test_tup2[i],)\n        except ZeroDivisionError:\n            result_tup += (0,)\n    return result_tup"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_two_parts(lst, L):\n    \"\"\"\n    Split the given list into two parts where the length of the first part is L.\n    \"\"\"\n    n = len(lst)\n    mid = n // 2\n    first_part = lst[:mid]\n    second_part = lst[mid:]\n    if len(first_part) < L:\n        raise ValueError(\"The first part should have a length equal to or greater than L.\")\n    if len(second_part) < L:\n        raise ValueError(\"The second part should have a length equal to or greater than L.\")\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    part1 = list1[:L]\n    part2 = list1[L:]\n    return part1, part2"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_two_parts(lst, L):\n    \"\"\"\n    Split a list into two parts where the length of the first part is L.\n\n    Args:\n        lst: A list of items to split.\n        L: The length of the first part of the list.\n\n    Returns:\n        A tuple containing the two parts of the list.\n    \"\"\"\n\n    n = len(lst)\n    mid = n // 2\n    part1 = lst[:mid]\n    part2 = lst[mid:]\n\n    return part1, part2"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if L > len(list1):\n        raise ValueError('Length of first part should be less than or equal to length of the original list.')\n    first_part = list1[:L]\n    second_part = list1[L:]\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # split the list into two parts with length L\n    part1 = list1[:L]\n    part2 = list1[L:]\n\n    # return the two parts as a tuple\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # split the list into two parts\n    part1 = list1[:L]\n    part2 = list1[L:]\n    \n    # return the two parts as a tuple\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) <= L:\n        return (list1, [])\n    else:\n        return (list1[:L], list1[L:])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if L > len(list1):\n        raise ValueError(\"Length of L is greater than length of list1\")\n\n    list1 = list1[:L]\n    list2 = list1[L:]\n\n    return (list1, list2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # calculate the length of the second part\n    length_second_part = len(list1) - L\n    \n    # create the two parts and return the tuple\n    part1 = list1[:L]\n    part2 = list1[L:]\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Check if L is greater than length of list1\n    if L > len(list1):\n        raise ValueError(\"L should be less than or equal to the length of list1.\")\n    \n    # Split the list into two parts with length L\n    part1 = list1[:L]\n    part2 = list1[L:]\n    \n    # Return the resulting lists in a tuple\n    return (part1, part2)"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return (h_age - 12) * 7"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n\n    Parameters:\n    h_age (int): The age of the dog in hours.\n\n    Returns:\n    age (float): The age of the dog in dog's years.\n\n    '''\n\n    # convert hours to dog years\n    age = h_age / 7000\n    return age"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_age = (2021 - h_age) * 7\n    return dog_age"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n\n    # calculate the dog's age in dog's years\n    dog_years = h_age / 7\n\n    # return the dog's age\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n\n    # Calculate dog's age in dog's years\n    dog_years = h_age * 7\n\n    # Return the dog's age in dog's years\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    age_in_dog_years = (h_age / 7) * 12\n    return age_in_dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n\n    Args:\n    h_age: int\n        The height of the dog in inches.\n\n    Returns:\n    int\n        The dog's age in dog's years.\n    \"\"\"\n    return h_age / 70\n"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7 * h_age\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_age = h_age * 7\n    return dog_age"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result\n"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    S_split = []\n    for i in range(0, len(S), step):\n        S_split.append(S[i:i+step])\n    return S_split"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # split the list into chunks of length step\n    chunks = [S[i:i+step] for i in range(0, len(S), step)]\n    return chunks"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # initialize empty list to hold split lists\n    split_lists = []\n    \n    # loop through the input list and split for every nth element\n    for i in range(0, len(S), step):\n        # append the split list to the split_lists list\n        split_lists.append(S[i:i+step])\n    \n    return split_lists"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    \"\"\"\n    Write a function to find the lateral surface area of a cube given its side length.\n    \"\"\"\n    return 6*l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * (l**2)"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    \"\"\"\n    Write a function to find the lateral surface area of a cube given its side length.\n    \"\"\"\n    # calculate the surface area of the cube by multiplying its side length by the number of sides (6)\n    surface_area = l * 6\n    \n    # return the surface area\n    return surface_area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    area = 6 * (l ** 2)\n    print(\"The lateral surface area of a cube is:\", area)"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    \"\"\"\n    Write a function to find the lateral surface area of a cube given its side length.\n    \"\"\"\n    return 6 * l ** 2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return (6 * l ** 2)"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * (l**2)"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    odd_numbers = [i for i in range(1, n+1, 2)] # generate a list of odd numbers from 1 to n\n    return sum([i**2 for i in odd_numbers]) # calculate the sum of squares of odd numbers"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    # initialize sum variable to 0\n    sum_squares = 0\n    \n    # loop through odd natural numbers up to n\n    for i in range(1, n+1, 2):\n        # add square of current odd number to sum\n        sum_squares += i*i\n    \n    # return sum of squares\n    return sum_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    odd_sum = 0\n    for i in range(n):\n        odd_sum += i**2\n    return odd_sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    sum = 0  \n    for i in range(2, n+1, 2):  \n        sum += i**2  \n    return sum  "
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    # Initialize the first two numbers in the sequence\n    a, b = 1, 1\n    \n    # Loop through the sequence to find the nth star number\n    for i in range(n):\n        # Add the current number to the next number\n        a, b = b, a + b\n    \n    # Return the final number in the sequence\n    return a"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    star_num = 0\n    for i in range(1, n+1):\n        star_num = 5 * (star_num + 1)\n    return star_num"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    num = 1\n    for i in range(1, n + 1):\n        num = num * (i + 1)\n    return num"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    if n == 1:\n        return \"*\"\n    else:\n        return \"*\" + find_star_num(n - 1)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    if n < 1:\n        return \"Invalid input. Please enter a positive integer.\"\n    elif n == 1:\n        return \"1\"\n    else:\n        num = \"\"\n        for i in range(n):\n            num += \"*\"\n        return num"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    # initialize variables\n    i = 1\n    star_num = 1\n    # loop to find the nth star number\n    while i < n:\n        # add the number of spaces to the star_num variable\n        num_spaces = n - i\n        # add the number of spaces to the left of the star_num variable\n        star_num = star_num * num_spaces\n        # increment i by 1\n        i += 1\n    # return the star_num variable\n    return star_num"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return (n * (n + 1)) // 2"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    # initialize variables\n    star = \"*\"\n    space = \" \"\n    # loop through the range of numbers from 1 to n\n    for i in range(1, n+1): \n        # print the number of spaces before the star\n        print(space*(n-i)) \n        # print the star\n        print(star*(2*i-1)) \n        # print the number of spaces after the star\n        print(space*(n-i)) \n    return 0"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    if n < 1: \n        return 0\n    if n == 1: \n        return 1\n    prev = find_star_num(n-1)\n    return prev + find_star_num(n-2)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    if n <= 0:\n        return 'Invalid input'\n    elif n == 1:\n        return '*'\n    else:\n        result = ''\n        for i in range(1, n):\n            result += '*'\n        return result + '*'"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    # Convert the character to its ASCII code\n    ascii_val = ord(k)\n    \n    # Return the ASCII value\n    return ascii_val"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    k = ord(k)\n    return k"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    k = k.upper()\n    ascii_value = ord(k)\n    return ascii_value"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if type(k) == str:\n        k = ord(k)\n    return k"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    # convert the character to its ascii value\n    ascii_value = ord(k)\n    # return the ascii value\n    return ascii_value"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    \"\"\"\n    Write a function to find the ascii value of a character.\n    \"\"\"\n    return ord(k)"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):\n    even_sum = 0\n    even_index_sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n            if i % 2 == 0:\n                even_index_sum += arr[i]\n    return even_sum + even_index_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    This function takes a list as input and returns the sum of even numbers at even positions.\n    '''\n    sum_even = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            sum_even += arr[i]\n    return sum_even"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n            if i % 2 == 0:\n                print(arr[i], end=\" \")\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    sum_even_at_index = 0\n\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:  # checking if the number is even\n            if i % 2 == 0:  # checking if the position is even\n                sum_even += arr[i]\n                sum_even_at_index += arr[i]  # adding the even number to the sum at even position\n            \n    return sum_even_at_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            sum += arr[i]\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum\n"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    count_even = 0\n\n    # Loop through the list and find even numbers at even positions\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            if i % 2 == 0:\n                sum_even += arr[i]\n                count_even += 1\n\n    # Return the sum of even numbers and count of even numbers\n    return sum_even, count_even"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_Power_Sum(n): \n    sum = 0\n    for i in range(2, n+1):\n        if i**5 % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    total = 0\n    for i in range(2, n+1):\n        total += i ** 5\n    return total"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum_of_powers = 0\n    for i in range(1, n+1):\n        power = i ** 5\n        if i % 2 == 0:\n            sum_of_powers += power\n    return sum_of_powers"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i ** 5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, n+1):\n        sum += i ** 5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    result = 0\n    for i in range(1, n+1, 2):\n        result += i**5\n    return result"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    total = 0\n    for i in range(n): \n        num = 2**5\n        total += num\n        if num % 2 == 1:\n            total -= num\n    return total"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    # Initialize the sum variable to 0\n    total = 0\n    \n    # Iterate over the first n even natural numbers\n    for i in range(2, n+1, 2): \n        # Calculate the power of the number and add it to the total\n        total += i**5\n    \n    # Return the total sum\n    return total"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += 2**i\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n\n    # initialize the sum variable to 0\n    total_sum = 0\n    \n    # loop through the first n even numbers\n    for i in range(2, n+1, 2):\n        # calculate the power of the even number using the formula n^5\n        power = i**5\n        # add the power to the total sum\n        total_sum += power\n        \n    # return the total sum\n    return total_sum"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [elem[1] for elem in test_list]"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    # initialize an empty list to hold the rear elements\n    rear_list = []\n    # loop through each tuple in the input list\n    for tup in test_list:\n        # append the rear element of the tuple to the rear_list\n        rear_list.append(tup[1])\n    # return the rear_list\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    \"\"\"\n    return [rear for front, rear in test_list]"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in test_list:\n        rear_list.append(i[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for item in test_list:\n        rear_element = item[-1]\n        result.append(rear_element)\n    return result"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    \"\"\"\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_elements = []\n    for tup in test_list:\n        rear_elements.append(tup[1])\n    return rear_elements"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_list = []\n    for i in range(len(test_tup1)):\n        result_list.append(test_tup1[i] - test_tup2[i])\n    return result_list"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must have the same length.\")\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] - test_tup2[i]!= 0:\n            return (test_tup1[i] - test_tup2[i], test_tup2[i])\n        else:\n            return (test_tup1[i], test_tup2[i])"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n\n    result_tup = []\n\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] - test_tup2[i])\n\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    substracted_tup = []\n    for i in range(len(test_tup1)):\n        substracted_tup.append(test_tup1[i] - test_tup2[i])\n    return substracted_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    \"\"\"\n    new_tup = ()\n    for i in range(len(test_tup1)):\n        new_tup += (test_tup1[i] - test_tup2[i],)\n    return new_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return result"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples should have the same length!\")\n        return None\n    else:\n        sub_tup = ()\n        for i in range(len(test_tup1)):\n            sub_tup += (test_tup1[i] - test_tup2[i],)\n        return sub_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    new_tup = ()\n    for i in range(len(test_tup1)):\n        new_tup += (test_tup1[i] - test_tup2[i],)\n    return new_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return tuple(x - y for x, y in zip(test_tup1, test_tup2))"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    coeff = [1, 1]\n    even_index = 0\n    sum_of_coeffs = 0\n\n    for i in range(2, n+1):\n        new_coeff = (coeff[i-1] + coeff[i-2]) % (2*i-1)\n        coeff.append(new_coeff)\n        if even_index % 2 == 0:\n            sum_of_coeffs += new_coeff\n        even_index += 1\n\n    return sum_of_coeffs"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n\n    # Initialize the sum of even index binomial coefficients to 0\n    even_sum = 0\n\n    # Loop through each even index from 0 to n-1\n    for i in range(0, n, 2):\n        # Calculate the i-th even index binomial coefficient using the formula nCr = n! / (r! * (n-r)!)\n        nCr = math.factorial(n) / (math.factorial(i) * math.factorial(n-i))\n        # Add the i-th even index binomial coefficient to the sum\n        even_sum += nCr\n\n    return even_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_binomial_Coeff_Sum(n):\n    sum = 0\n    for i in range(0,n+1):\n        for j in range(0,n+1):\n            if j==0:\n                continue\n            else:\n                sum += math.comb(n,j)\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n < 0:\n        return \"Error: n must be a positive integer.\"\n    \n    coeffs = [1] * (n+1)\n    coeffs[0] = 1\n    coeffs[1] = 1\n    \n    for i in range(2, n+1):\n        coeffs[i] = 2*coeffs[i-1]\n    \n    return sum(coeffs[i] for i in range(1, n+1, 2))"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n\n    # Create a list of n+1 zeros\n    zero_list = [0] * (n+1)\n\n    # Initialize the sum variable\n    sum_even = 0\n\n    # Loop through the list and calculate the even index binomial coefficients\n    for i in range(n+1):\n        # Calculate the even index binomial coefficient using math.comb() function\n        coeff = math.comb(n, i)\n\n        # If the coefficient is even, add it to the sum\n        if i % 2 == 0:\n            sum_even += coeff\n\n    # Return the sum of even index binomial coefficients\n    return sum_even"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math  \n  \ndef even_binomial_Coeff_Sum(n):  \n    '''\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    coeff_sum = 0\n    for i in range(2, n+1):\n        coeff = 1\n        for j in range(1, i+1):\n            coeff *= j\n        if i % 2 == 0:\n            coeff_sum += coeff\n    return coeff_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0 \n    for i in range(2, n+1, 2): \n        sum += math.comb(n, i) \n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    # We are using the formula for even index binomial coefficients as given in the problem statement\n    # Also, we are using n+1 because the first term in the series is 1\n    even_binomial_coeff_sum = 0\n    for i in range(1, n+1):\n        even_binomial_coeff_sum += math.comb(n, i) * 2**i\n    return even_binomial_coeff_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function takes a positive integer n as input and returns the sum of the even index binomial coefficients.\n    \"\"\"\n    coeff_sum = 0\n    for i in range(2, n+1):\n        for j in range(1, i+1):\n            if i % 2 == 0:\n                coeff_sum += math.comb(i, j)\n    return coeff_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n\n    # Initialize variables\n    sum_even_coeffs = 0\n    i = 1\n    j = 0\n\n    # Calculate the sum of even index binomial coefficients\n    while i <= n:\n        sum_even_coeffs += math.comb(n, i) * math.comb(n, 2*j) * math.comb(n-2*j, j)\n        i += 2\n        j += 1\n\n    return sum_even_coeffs"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14 * r**2 * h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14 * (r**2) * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14*(r**2)*h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14 * r**2 * h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = (1/3)*pi*(r**3)\n    return vol"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = (3/4) * 3.14159 * r**2 * h\n    return vol"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    \"\"\"\n    return 3.14 * r**2 * h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (1/3) * 3.14159 * r**2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    \"\"\"\n    volume = (1/3) * r**2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (1/3) * 3.14159 * r**2 * h\n    return volume"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    result = {}\n    for key,value in dict.items():\n        if value >= n:\n            result[key] = value\n    return result"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_filter(dict,n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    # Create an empty list to store the filtered dictionary\n    filtered_dict = {}\n\n    # Loop through the dictionary and add keys with values greater than or equal to n to the filtered dictionary\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {key:value for key,value in dict.items() if value>=n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    result_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            result_dict[key] = value\n    return result_dict"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[0]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i+1]:\n            count += 1\n            if count == i:\n                break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            break\n        if test_tup[i]!= test_tup[i-1]:\n            break\n        count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        if test_tup[i-1]!= test_tup[i]:\n            count += 1\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)-1, -1, -1):\n        if i == len(test_tup)-1:\n            break\n        if test_tup[i]!= test_tup[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)-1):\n        if test_tup[i] == test_tup[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        if test_tup[i] == test_tup[i-1]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i+1]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        if test_tup[i]!= test_tup[i-1]:\n            count += 1\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if i == len(test_tup)-1:\n            break\n        if test_tup[i] < test_tup[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n < 1:\n        return 'Invalid input'\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 10\n    else:\n        return (is_num_decagonal(n-1) + is_num_decagonal(n-2))"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    a = n\n    b = 1\n    while a > 0:\n        a -= 1\n        b *= 2\n    return b\n\nn = int(input(\"Enter a number: \"))\nprint(\"The\", n, \"th decagonal number is\", is_num_decagonal(n))"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n < 1:\n        return False\n    \n    num = 0\n    for i in range(n):\n        num += 10 * (n - i - 1)\n    \n    return num"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # initialize the counter variable\n    i = 1\n    # initialize the decagonal number variable\n    decagonal = 1\n    # loop through the counter variable\n    while i <= n:\n        # add the current value of the counter variable to the decagonal number variable\n        decagonal += i\n        # increment the counter variable\n        i += 1\n    # return the decagonal number\n    return decagonal"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    for i in range(1, n+1):\n        decagonal_number = 10*i*i - 6*i + 1\n        if decagonal_number == n:\n            return True\n    return False"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n < 1:\n        return False\n    else:\n        decagonal = n * (3 * n - 1) // 2\n        return decagonal"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    i = 1\n    decagonal_num = 1\n    while i <= n:\n        decagonal_num += 2*i - 1\n        i += 1\n    return decagonal_num"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal_num = n * (3*n-1) // 2\n    return decagonal_num\n"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal_num = 0\n    for i in range(1, n+1):\n        decagonal_num += (5*i**2 + 5*i)\n    return decagonal_num\n"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_num_decagonal(n):\n    # If n is odd, return False\n    if n % 2 == 1:\n        return False\n\n    # Calculate the square of n\n    n_sq = n * n\n\n    # Calculate the sum of the first n odd numbers\n    sum_odd = (1 + 2 * n) * n / 2\n\n    # Check if the square of the sum of the first n odd numbers is equal to n_sq\n    if n_sq == sum_odd * sum_odd:\n        return True\n    else:\n        return False"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            index = i\n            break\n    return index, item in dlist"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i, elem in enumerate(dlist):\n        if elem == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            return True, i\n    return False, -1"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(set(test_list)) == len(test_list)"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # convert list to set to remove duplicates\n    unique_elements = len(set(test_list)) == len(test_list)\n    return unique_elements"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # Check if the length of the list is less than or equal to 1\n    if len(test_list) <= 1:\n        return True\n\n    # Iterate through the list\n    for i in range(len(test_list)):\n        # Check if the current element is equal to the next element\n        if i < len(test_list) - 1 and test_list[i] == test_list[i+1]:\n            return False\n\n    # If all elements are unique, return True\n    return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # convert the list to a set to remove duplicates\n    unique_set = set(test_list)\n    # check if the length of the set is equal to the length of the list\n    if len(unique_set) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Check if all elements of a given list are unique or not.\n    \"\"\"\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [x-y for x, y in zip(nums1, nums2)]"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # Check if the two lists have the same length\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two lists must have the same length.\")\n\n    # Subtract the two lists element-wise and return the result\n    return [nums1[i] - nums2[i] for i in range(len(nums1))]"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Lists must have the same length.\")\n        return\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('Lists must have the same length.')\n    return [x - y for x, y in zip(nums1, nums2)]"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Write a function to subtract two lists element-wise.\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Lists should have the same length.\")\n    return [x - y for x, y in zip(nums1, nums2)]"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # Check if the lengths of the lists are equal\n    if len(nums1)!= len(nums2):\n        print(\"The lists do not have equal lengths\")\n        return\n    \n    # Subtract the two lists element-wise\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    \n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [x-y for x,y in zip(nums1, nums2)]"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('The two lists should have the same length.')\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Both lists must have the same length!\")\n        return\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    \n    return result"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # initialize an empty dictionary to store the frequency of digits\n    freq = {}\n\n    # iterate over each digit in the integer\n    for digit in str(n):\n        # check if the digit is already in the dictionary\n        if digit in freq:\n            # increment the count of the digit in the dictionary\n            freq[digit] += 1\n        else:\n            # add the digit to the dictionary with a count of 1\n            freq[digit] = 1\n\n    # iterate over each digit in the dictionary\n    for digit in freq:\n        # check if the frequency of the digit is greater than or equal to the digit itself\n        if freq[digit] >= int(digit):\n            # return True if any digit has a frequency greater than or equal to the digit itself\n            return True\n\n    # if no digit has a frequency greater than or equal to the digit itself, return False\n    return False"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = {}\n    for digit in str(n):\n        freq[digit] = freq.get(digit, 0) + 1\n    for digit in freq:\n        if freq[digit] > digit:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def validate(n):\n    # create a list to store the frequency of each digit in the integer\n    freq = [0] * 10\n\n    # loop through each digit in the integer and increment its frequency in the list\n    for digit in str(n):\n        freq[int(digit)] += 1\n\n    # loop through each digit in the frequency list and check if the frequency is greater than or equal to itself\n    for i in range(10):\n        if freq[i] >= freq[i]:\n            return False\n\n    # if all digits have frequency less than or equal to themselves, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n\n    # Convert the integer to a string\n    str_n = str(n)\n\n    # Initialize a dictionary to store the frequency of each digit in the string\n    freq = {}\n\n    # Iterate through each digit in the string\n    for digit in str_n:\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n\n    # Iterate through each digit in the string\n    for digit in str_n:\n        # Check whether the frequency of the digit is less than or equal to the digit itself\n        if freq[digit] > digit:\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n\n    # Check if the number is positive\n    if n <= 0:\n        return False\n\n    # Count the frequency of each digit\n    count_dict = {}\n    for digit in str(n):\n        if digit in count_dict:\n            count_dict[digit] += 1\n        else:\n            count_dict[digit] = 1\n\n    # Compare the frequency of each digit with the digit itself\n    for digit in str(n):\n        if count_dict[digit] > digit:\n            return False\n\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n\n    # create an empty dictionary to store the frequency of each digit\n    freq = {}\n    \n    # loop through each digit in the number\n    for digit in str(n):\n        # if the digit is already in the dictionary, increment its frequency\n        if digit in freq:\n            freq[digit] += 1\n        # otherwise, add the digit and its frequency to the dictionary\n        else:\n            freq[digit] = 1\n    \n    # loop through the frequency dictionary and check if the frequency of each digit is less than or equal to itself\n    for digit in freq:\n        if freq[digit] > digit:\n            return False\n    \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def validate(n):\n    # Initialize a dictionary to store the frequency of each digit in the integer\n    digit_freq = {}\n\n    # Loop through each digit in the integer\n    for digit in str(n):\n        # If the digit is already in the dictionary, increment its frequency by 1\n        if digit in digit_freq:\n            digit_freq[digit] += 1\n        # If the digit is not in the dictionary, add it with a frequency of 1\n        else:\n            digit_freq[digit] = 1\n\n    # Loop through each digit in the dictionary and check whether its frequency is less than or equal to itself\n    for digit, freq in digit_freq.items():\n        if freq > digit:\n            return False\n\n    # If all digits pass the frequency check, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def validate(n): \n    # initialize a dictionary to store the frequency of digits\n    freq = {}\n    # loop through each digit in the integer\n    for i in str(n): \n        # check if the digit is already in the dictionary\n        if i in freq: \n            # if it is, increment its frequency by 1\n            freq[i] += 1\n        else: \n            # if it is not, add it to the dictionary with a frequency of 1\n            freq[i] = 1\n    # loop through the keys in the dictionary\n    for key in freq: \n        # check if the frequency of the key is greater than or equal to the key itself\n        if freq[key] >= int(key): \n            # if it is, print \"False\" and exit the loop\n            print(\"False\")\n            break\n        # if the frequency is less than the key itself, print \"True\" and exit the loop\n        else: \n            print(\"True\")\n            break"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def validate(n):\n    # Initialize a dictionary to store the frequency of each digit\n    freq = {}\n    for i in range(10):\n        freq[i] = 0\n\n    # Count the frequency of each digit in the integer\n    while n:\n        digit = n % 10\n        freq[digit] += 1\n        n //= 10\n\n    # Check if the frequency of each digit is less than or equal to the digit itself\n    for digit in freq.values():\n        if digit > digit:\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digits = [int(digit) for digit in str(n)]\n    freq = [0] * 10\n\n    for digit in digits:\n        freq[digit] += 1\n\n    for digit in freq:\n        if digit > digit:\n            return False\n\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    # Check if the list is empty\n    if len(list) == 0:\n        return True\n    \n    # Check if the first item in the list is equal to the element\n    if list[0] == element:\n        # Recursively check if all items in the list are equal to the element\n        return check_element(list[1:], element)\n    else:\n        # If the first item is not equal to the element, return False\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if all(list[i] == element for i in range(len(list))):\n        print(\"All items in the list are equal to the given element.\")\n    else:\n        print(\"Not all items in the list are equal to the given element.\")"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    if len(list) == 1:\n        return list[0] == element\n    elif len(list) > 1:\n        return all(x == element for x in list)"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_element(list, element):\n    if len(list) == 0:\n        return True\n    elif list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    if len(list) == 0:\n        return True\n    elif list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    if len(list) == 0:\n        return True\n    elif list[0]!= element:\n        return False\n    else:\n        return check_element(list[1:], element)"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n\n    for item in list:\n        if item!= element:\n            return False\n\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n\n    if len(list) == 0:\n        return True\n    elif list[0]!= element:\n        return False\n    else:\n        return check_element(list[1:], element)"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_element(list, element):\n    \"\"\"\n    Check if all elements in a list are equal to a given element.\n\n    Args:\n        list (list): List of elements to check.\n        element (any): Element to compare against.\n\n    Returns:\n        bool: True if all elements in the list are equal to the given element, False otherwise.\n    \"\"\"\n\n    # Loop through the list and check if all elements are equal to the given element\n    for item in list:\n        if item!= element:\n            return False\n\n    # If we made it through the loop without finding a mismatch, return True\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if all(list[i] == element for i in range(len(list))):\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'a.*?b{2,3}')\n    result = pattern.search(text)\n    if result:\n        print(f\"The string contains the 'a' character followed by two or three 'b' characters.\")\n    else:\n        print(f\"The string does not contain the 'a' character followed by two or three 'b' characters.\")"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'a(b{2,3})')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a.*b(.{2,3})'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'ab{2,3}'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a.*b{2,3}'\n    match = re.search(pattern, text)\n    \n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = re.compile(r'a[b]{2,3}')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a[^b]*b[ab]*b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'ab{2,3}'\n    return bool(re.search(pattern, text))\n"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'(?=.*a)(?=.*b{2,3})(?=.*b)'\n    match = re.search(pattern, text)\n    return match is not None"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_two_three(text):\n    # Define a regular expression pattern that matches 'a' followed by two or three 'b' characters\n    pattern = r'a(b{2,3})'\n    \n    # Use the re.search() function to search for a match in the text string\n    match = re.search(pattern, text)\n    \n    # Return True if a match was found, False otherwise\n    return match is not None"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Initialize the maximum sum and sum of the modified array\n    max_sum = float('-inf')\n    modified_sum = 0\n    # Iterate through the array n times\n    for _ in range(n):\n        # Update the modified sum by adding the next element from the original array\n        modified_sum += a[0]\n        # Update the maximum sum if the sum of the modified array is greater than the current maximum sum\n        max_sum = max(max_sum, modified_sum)\n        # Remove the first element from the original array to form a new modified array with the same elements repeated k times\n        a = a[1:]\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    \"\"\"\n    This function takes in an array, n, and the number of times the array should be repeated, k. \n    The function returns the maximum sum of a contiguous array in the modified array \n    which is formed by repeating the given array k times.\n    \"\"\"\n    max_sum = float('-inf')\n    temp_sum = 0\n    repeated_array = a * k\n    \n    for i in range(len(repeated_array)):\n        temp_sum += repeated_array[i]\n        if temp_sum > max_sum:\n            max_sum = temp_sum\n            \n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    # Create a new array with the given array repeated k times\n    repeated_array = a * k\n    \n    # Initialize the maximum sum to the first element of the array\n    max_sum = a[0]\n    \n    # Iterate through the array, adding the next element to the maximum sum if it is greater than the current maximum sum\n    for i in range(n):\n        current_sum = a[i] + repeated_array[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n    \n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    \"\"\"\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    \"\"\"\n\n    # Create a new array by repeating the given array k times\n    new_array = [a] * k\n\n    # Find the sum of the original array\n    original_sum = sum(a)\n\n    # Initialize the maximum sum\n    max_sum = original_sum\n\n    # Iterate over the new array\n    for i in range(k):\n        # Calculate the sum of the current element\n        curr_sum = original_sum + a[i]\n\n        # Update the maximum sum if the current sum is greater\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Find the maximum sum of a contiguous array in the original array\n    max_sum = max(a)\n\n    # Loop through the array k times, adding each element to the maximum sum\n    for i in range(k):\n        max_sum += a[i]\n\n    # Subtract the maximum sum from the maximum sum of a contiguous array in the original array\n    return max_sum - max_sum_original"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Initialize two pointers, left and right, to 0 and n-1 respectively\n    left = 0\n    right = n-1\n    \n    # Initialize variables to keep track of maximum sum and the current sum\n    max_sum = float('-inf')\n    current_sum = 0\n    \n    # While right is less than n-1, repeat the following steps\n    while right < n-1:\n        # Calculate the sum of the current subarray from left to right\n        current_sum = a[left] + a[right] + a[left] + a[right] + a[left] + a[right]\n        \n        # If the current sum is greater than the maximum sum, update the maximum sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n        \n        # Move the right pointer to the right by k\n        right += k\n        \n        # If the right pointer exceeds the length of the array, move the left pointer to the right until it doesn't\n        while right >= n-1:\n            left += 1\n            right = left + k\n        \n        # Move the left pointer to the right by k\n        left += k\n    \n    # Return the maximum sum\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # create a modified array by repeating the input array k times\n    modified_array = [0] * (k * n)\n    for i in range(k):\n        for j in range(n):\n            modified_array[i*n+j] = a[j]\n\n    # find the maximum sum of contiguous array in the modified array\n    max_sum = float('-inf')\n    curr_sum = 0\n    for i in range(k*n):\n        curr_sum += modified_array[i]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n        if curr_sum < 0:\n            curr_sum = 0\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Initialize the maximum sum and the sum of the repeated array\n    max_sum = sum(a) * k\n    repeated_sum = 0\n    \n    # Loop through the array n times\n    for i in range(n):\n        # If the current element is less than zero, add the absolute value to the repeated sum and move on to the next element\n        if a[i] < 0:\n            repeated_sum += abs(a[i])\n            continue\n        \n        # Calculate the sum of the repeated array\n        repeated_sum += a[i]\n        \n        # Update the maximum sum if the current sum is greater\n        if repeated_sum > max_sum:\n            max_sum = repeated_sum\n    \n    # Return the maximum sum\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    This function takes an array, n, and k as input and returns the maximum sum of a contiguous array in the modified array.\n    '''\n    # Create a copy of the array to form a modified array with repeated elements\n    modified_array = a.copy()\n    # Append k copies of the first element of the array\n    for i in range(k):\n        modified_array.append(a[0])\n    \n    # Initialize variables to store the maximum subarray sum and its starting index\n    max_sum = float('-inf')\n    start_index = 0\n    \n    # Iterate through the modified array and find the maximum subarray sum\n    for i in range(n):\n        if modified_array[i] > max_sum:\n            max_sum = modified_array[i]\n            start_index = i\n        elif modified_array[i] == max_sum:\n            max_sum = max(max_sum, modified_array[i])\n    \n    # Return the maximum subarray sum and its starting index\n    return max_sum, start_index"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n\n    # Initialize variables\n    current_sum = 0\n    max_sum = float('-inf')\n    max_sum_index = -1\n\n    # Iterate through the array and find the largest sum of a contiguous array\n    for i in range(n):\n        current_sum += a[i]\n\n        # If the current sum exceeds the maximum sum so far, update the maximum sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_sum_index = i\n\n        # If the current sum exceeds the limit for a contiguous array repeated k times, reset the current sum and continue\n        if current_sum > a[i] * k:\n            current_sum = a[i]\n            i -= 1\n\n    # Return the maximum sum of a contiguous array repeated k times\n    return max_sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    even_squares = 0\n    for i in range(1, n+1, 2):\n        even_squares += i*i\n    return even_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    count = 0\n    i = 0\n    while count < n:\n        if i % 2 == 0:\n            sum_of_squares += i ** 2\n            count += 1\n        i += 1\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(n//2 + 1):\n        sum += i*i\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n\n    #initialize sum variable to 0\n    sum_of_squares = 0\n\n    #initialize count variable to 0\n    count = 0\n\n    #loop while count is less than n\n    while count < n:\n        #if count is even, add the square of count to sum_of_squares\n        if count % 2 == 0:\n            sum_of_squares += count ** 2\n        #increment count\n        count += 1\n\n    #return sum_of_squares\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    even_nums = [i for i in range(2, n+1, 2)]  # list of even natural numbers from 2 to n (inclusive)\n    return sum([num**2 for num in even_nums])  # sum of squares of even natural numbers from 2 to n"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    maxLength = 0\n    maxList = []\n    for i in range(len(list1)):\n        if len(list1[i]) > maxLength:\n            maxLength = len(list1[i])\n            maxList = [list1[i]]\n        elif len(list1[i]) == maxLength:\n            maxList.append(list1[i])\n    return maxList"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    lengths = []\n    for sublist in list1:\n        lengths.append(len(sublist))\n    return max(lengths)"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    # initialize maximum length to zero\n    max_length = 0\n\n    # loop through each sublist in the list\n    for sublist in list1:\n        # calculate the length of the current sublist\n        current_length = len(sublist)\n\n        # update the maximum length if necessary\n        if current_length > max_length:\n            max_length = current_length\n\n    # return the maximum length\n    return max_length"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    # Initialize variables to store the maximum length and the list of maximum length\n    max_len = 0\n    max_list = []\n    \n    # Iterate through each list in the list of lists\n    for lst in list1:\n        # Calculate the length of the current list\n        len_lst = len(lst)\n        # If the length of the current list is greater than the maximum length, update the maximum length and the maximum list\n        if len_lst > max_len:\n            max_len = len_lst\n            max_list = lst\n    \n    # Return the maximum list of length found\n    return max_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_list = []\n    for sublist in list1:\n        if len(sublist) > len(max_list):\n            max_list = sublist\n    return max_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    lengths = [len(sublist) for sublist in list1]\n    return max(lengths)"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for lst in list1:\n        lengths = [len(sublst) for sublst in lst]\n        max_length = max(lengths)\n        max_lengths.append(max_length)\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for i in list1:\n        if len(i) > len(max_lengths):\n            max_lengths = i\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for i in range(len(list1)):\n        max_length_temp = []\n        for j in range(len(list1[i])):\n            if max_length_temp == []:\n                max_length_temp.append(list1[i][j])\n            elif len(str(list1[i][j])) > len(str(max_length_temp[-1])):\n                max_length_temp.append(list1[i][j])\n        if max_length_temp!= []:\n            max_lengths.append(max_length_temp)\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    for i in list1:\n        if len(i) > max_len:\n            max_len = len(i)\n    return max_len"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n < 2 or k < 1:\n        return 0\n\n    if k == 1:\n        return n\n\n    cache = [[0] * (k + 1) for i in range(n + 1)]\n\n    for i in range(n + 1):\n        if i == 0:\n            cache[i][1] = 1\n        else:\n            cache[i][1] = cache[i - 1][1] + cache[i - 1][2]\n\n    for i in range(k + 1):\n        if i == 0:\n            cache[0][i] = 0\n        else:\n            cache[0][i] = cache[0][i - 1] + cache[1][i - 1]\n\n    for i in range(2, n + 1):\n        for j in range(1, k + 1):\n            if i == 2 and j == 1:\n                cache[i][j] = 0\n            elif i == 2 and j == 2:\n                cache[i][j] = 1\n            else:\n                cache[i][j] = cache[i - 1][j] + cache[i - 1][j - 1] + cache[i - 1][j - 2]\n\n    return cache[n][k]\n"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 1,
        "answer": ""
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k):\n    # base case for k=1\n    if k == 1:\n        return n\n\n    # base case for k=0\n    if k == 0:\n        return 0\n\n    # base case for n=0\n    if n == 0:\n        return 1\n\n    # base case for n=1\n    if n == 1:\n        return 1\n\n    # base case for n=2\n    if n == 2:\n        return 2\n\n    # base case for n=3\n    if n == 3:\n        return 3\n\n    # base case for n=4\n    if n == 4:\n        return 4\n\n    # base case for n=5\n    if n == 5:\n        return 6\n\n    # recursive case\n    return count_no_of_ways(n-1, k) + count_no_of_ways(n-2, k-1) + count_no_of_ways(n-3, k-2) + count_no_of_ways(n-4, k-3)"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k):\n    def count_ways(num_colors, post_count):\n        if num_colors == 1 or post_count == 0:\n            return 1\n        if post_count == 1:\n            return num_colors\n        return count_ways(num_colors, post_count - 1) + count_ways(num_colors - 1, post_count - 2)\n\n    return count_ways(k, n - 2)"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Initialize the counter variable\n    count = 0\n    # Create a list of k-1 lists, each containing all possible colors\n    colors = [[0]*k for i in range(k-1)]\n    # Initialize the first row of the list\n    colors[0][0] = 1\n    colors[0][1] = 1\n    # Iterate over the remaining rows\n    for i in range(1, n):\n        # Iterate over the possible colors for the current row\n        for j in range(k):\n            # Iterate over the possible colors for the previous row\n            for m in range(k):\n                # Add the number of ways of painting the current row if the two adjacent posts have different colors\n                if colors[i-1][m] > 0 and colors[i-1][j] > 0:\n                    count += colors[i-1][m]*colors[i-1][j]\n                # Update the current row with the number of ways of painting the previous row\n                colors[i][j] += colors[i-1][j]\n    # Return the final count\n    return count"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 1 or k == 1:\n        return 1\n\n    # base cases\n    if n == 2:\n        if k % 2 == 0:\n            return 1\n        else:\n            return 2\n\n    # recursive case\n    return count_no_of_ways(n - 1, k) + count_no_of_ways(n - 1, k - 1)"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k): \n    # create a 2D list to store the count of ways for each color\n    color_count = [[0 for j in range(k)] for i in range(n+1)]\n\n    # base case: if n is 1, there is only one way of painting the fence with 1 color\n    color_count[1][1] = 1\n\n    # fill in the table\n    for i in range(2, n+1):\n        for j in range(k):\n            if j == 0 or (j == 1 and color_count[i-1][j-1] > 0):\n                color_count[i][j] = color_count[i-1][j]\n            else:\n                color_count[i][j] = color_count[i-1][j-1] + color_count[i-1][j]\n\n    # return the count of ways for the given number of posts and colors\n    return color_count[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k):\n    ways = 1\n    \n    # If n is greater than 2 and k is greater than 2, then there are at least 2 different colors for the fence\n    if n > 2 and k > 2:\n        ways *= (n-2)\n    \n    # If the number of colors is odd, then there is only 1 way to paint the fence\n    if k % 2 == 1:\n        ways *= n\n    \n    # If the number of colors is even, then there are 2 ways to paint the fence\n    if k % 2 == 0:\n        ways *= (n * (n-1) * (2 * k - 2)) / 6\n    \n    return ways"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Base case: If there is only one post, it can be painted with exactly one color.\n    if n == 1:\n        return 1\n\n    # Base case: If there are only two posts, they cannot have the same color.\n    if n == 2:\n        return 0\n\n    # Initialize a 2D array to store the number of ways for different colors.\n    dp = [[0 for j in range(k+1)] for i in range(n+1)]\n\n    # Initialize the first row and column.\n    for i in range(1, n+1):\n        dp[i][1] = 1\n\n    # Fill in the rest of the table.\n    for i in range(2, n+1):\n        for j in range(2, k+1):\n            if dp[i-1][j] == 1:\n                # If the last post has the same color as the current post, it cannot be painted again.\n                dp[i][j] = dp[i-1][j]\n            elif dp[i-1][j-1] == 1:\n                # If the two last posts have the same color, it cannot be painted again.\n                dp[i][j] = dp[i-1][j]\n            else:\n                # If the two last posts have different colors, it can be painted with any color.\n                dp[i][j] = dp[i-1][j] + dp[i-1][j-1]\n\n    # Return the value in the bottom-right corner of the table.\n    return dp[n][k]\n"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Check if the given number of posts is valid\n    if n < 2 or k < 2:\n        return 0\n\n    # Initialize a 2D list to store the number of ways for each post and color combination\n    num_ways = [[0] * k for _ in range(n+1)]\n\n    # Fill the first row of the 2D list with 1\n    for i in range(k):\n        num_ways[0][i] = 1\n\n    # Fill the rest of the 2D list with 0\n    for i in range(1, n+1):\n        for j in range(k):\n            num_ways[i][j] = 0\n\n    # Fill the rest of the 2D list with the number of ways for adjacent posts and different colors\n    for i in range(1, n+1):\n        for j in range(1, k):\n            if num_ways[i-1][j] + num_ways[i-1][j-1] <= num_ways[i-1][k-1]:\n                num_ways[i][j] = num_ways[i-1][j] + num_ways[i-1][j-1]\n            else:\n                num_ways[i][j] = num_ways[i-1][k-1]\n\n    # Return the total number of ways\n    return num_ways[n][k-1]"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = (n//m)\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find(n,m):\n    '''\n    This function takes two numbers as input and returns their quotient rounded down to the nearest integer.\n    '''\n    quotient = n/m\n    return int(quotient)"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find(n,m):\n    '''\n    This function takes two numbers as input and returns their quotient rounded down to the nearest integer.\n    '''\n    quotient = n//m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a Python function to find quotient of two numbers (rounded down to the nearest integer).\n\n    Args:\n    n (int): first number\n    m (int): second number\n\n    Returns:\n    int: quotient of n and m rounded down to the nearest integer.\n    \"\"\"\n    return n // m"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    return int((n / m))"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Calculate the third side of a right angled triangle using Heron's formula.\n\n    Args:\n    w (float): the length of the first side of the triangle.\n    h (float): the length of the second side of the triangle.\n\n    Returns:\n    float: the length of the third side of the triangle.\n    '''\n    s = (w + h + math.sqrt(w**2 * h**2)) / 2\n    return s"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    This function calculates the third side of a right angled triangle.\n    The input parameters are the length of the two sides and the length of the hypotenuse.\n    The function returns the third side.\n    '''\n    c = math.sqrt(w**2 + h**2)\n    third_side = w + h - c\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = (w**2 + h**2)**0.5\n    return math.sqrt(s**2 - (w/2)**2)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Use the formula for the length of the third side of a right angled triangle\n    third_side = math.sqrt(w**2 + h**2)\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # calculating the semi-perimeter of the triangle\n    s = (w + h) / 2\n    # calculating the area of the triangle using Heron's formula\n    area = math.sqrt(s * (s-w) * (s-h))\n    # calculating the angle opposite to the right angle\n    angle = math.acos((w**2 + h**2 - area**2) / (2 * w * h))\n    # finding the length of the third side of the triangle\n    third_side = (w**2 + h**2 - area**2) / 4 / math.sin(angle)\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Calculate the length of the two sides of the triangle\n    s = math.sqrt(w**2 + h**2)\n    # Calculate the length of the third side of the triangle\n    third_side = 2*s\n    # Return the third side of the triangle\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = (w**2 + h**2)**0.5\n    return math.sqrt(w**2 + h**2 - s**2)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Formula for the third side of the right angled triangle: c = sqrt(w^2 + h^2)\n    c = math.sqrt(w**2 + h**2)\n    return c"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    This function takes two parameters w and h, which represent the length and width of a right angled triangle.\n    The function then calculates the semi-perimeter of the triangle and uses it to find the third side of the triangle.\n    '''\n    s = (w + h) / 2\n    c = math.sqrt(s ** 2 - w ** 2 - h ** 2)\n    return c"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n\n    # calculate the semi-perimeter of the triangle\n    s = (w + h) / 2\n\n    # calculate the area of the triangle\n    area = math.sqrt(s * (s - w) * (s - h))\n\n    # calculate the third side of the triangle\n    third_side = area / 2\n\n    return third_side"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # initialize the maximum value to None\n    max_val = None\n    # iterate over the list and compare each value to max_val\n    for val in listval:\n        # if the current value is greater than max_val, update max_val\n        if val > max_val:\n            max_val = val\n    # return the maximum value\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for val in listval:\n        if val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not isinstance(listval, list):\n        raise TypeError(\"Input must be a list.\")\n    if not listval:\n        raise ValueError(\"Input list cannot be empty.\")\n\n    max_val = None\n    for item in listval:\n        if max_val is None:\n            max_val = item\n        elif max_val < item:\n            max_val = item\n\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n    max_val = None\n    for val in listval:\n        if max_val is None or val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = None\n    for i in listval:\n        if max_val is None or i > max_val:\n            max_val = i\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_num = None\n    for item in listval:\n        if max_num is None or item > max_num:\n            max_num = item\n    return max_num"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    maxval = None\n    for val in listval:\n        if maxval is None or val > maxval:\n            maxval = val\n    return maxval"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not listval:\n        raise ValueError(\"List is empty\")\n\n    max_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n    max_num = float('-inf')\n    for num in listval:\n        if num > max_num:\n            max_num = num\n    return max_num"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor = 1\n    divisor_sum = 0\n\n    while divisor <= number:\n        if number % divisor == 0:\n            divisor_sum += divisor\n        divisor += 1\n\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors_sum += i\n    return divisors_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if number < 2:\n        return 0\n    else:\n        sum = 0\n        for i in range(1, number+1):\n            if number % i == 0:\n                sum += i\n        return sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    divisors = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    divisor_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n\n    # initialize variables to keep track of the sum of divisors\n    div_sum = 0\n    # loop through all numbers from 1 to the square root of the number\n    for i in range(1, int(number**0.5)+1):\n        # check if the number is divisible by i\n        if number % i == 0:\n            # if so, add it to the sum of divisors\n            div_sum += i\n    # return the sum of divisors\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    divisor_sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    divisors = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr): \n    \"\"\"\n    Write a python function to count inversions in an array.\n    \"\"\"\n    n = len(arr) \n    \"\"\"\n    Find the length of the array.\n    \"\"\"\n\n    if n == 1: \n        \"\"\"\n        If the length of the array is 1, return 0.\n        \"\"\"\n        return 0\n\n    \"\"\"\n    Divide the array into two halves.\n    \"\"\"\n    mid = n // 2\n    \"\"\"\n    Find the middle index of the array.\n    \"\"\"\n\n    \"\"\"\n    Sort the first half of the array.\n    \"\"\"\n    for i in range(mid): \n        \"\"\"\n        For each element in the first half of the array, \n        find the index of the largest element in the second half. \n        If the current element is greater than the largest element, \n        increment the count of inversions.\n        \"\"\"\n        inv_count = 0\n        for j in range(mid, n): \n            \"\"\"\n            For each element in the second half of the array, \n            find the index of the smallest element in the first half. \n            If the current element is less than the smallest element, \n            increment the count of inversions.\n            \"\"\"\n            if arr[i] > arr[j]: \n                \"\"\"\n                If the current element is greater than the smallest element, \n                increment the count of inversions.\n                \"\"\"\n                inv_count += 1\n            elif arr[i] < arr[j]: \n                \"\"\"\n                If the current element is less than the smallest element, \n                increment the count of inversions.\n                \"\"\"\n                inv_count += 1\n\n    \"\"\"\n    Count the inversions in the second half of the array.\n    \"\"\"\n    inv_count += get_Inv_Count(arr[mid:])\n\n    \"\"\"\n    Return the total count of inversions.\n    \"\"\"\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    \n    # Sort the array in ascending order \n    arr = sorted(arr) \n    count = 0 \n    i = 0 \n    j = len(arr) - 1 \n    \n    # Traverse the array and count inversions \n    while i < j: \n        if arr[i] > arr[j]: \n            count += (j - i) \n            i += 1 \n        else: \n            j -= 1 \n    return count "
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    # counting inversions using merge sort\n    def merge_sort(arr):\n        if len(arr) > 1:\n            mid = len(arr) // 2\n            left_half = arr[:mid]\n            right_half = arr[mid:]\n\n            merge_sort(left_half)\n            merge_sort(right_half)\n\n            i = j = k = 0\n            while i < len(left_half) and j < len(right_half):\n                if left_half[i] <= right_half[j]:\n                    arr[k] = left_half[i]\n                    i += 1\n                else:\n                    arr[k] = right_half[j]\n                    j += 1\n                k += 1\n\n            while i < len(left_half):\n                arr[k] = left_half[i]\n                i += 1\n                k += 1\n\n            while j < len(right_half):\n                arr[k] = right_half[j]\n                j += 1\n                k += 1\n\n    merge_sort(arr)\n\n    # counting inversions using counting sort\n    def counting_sort(arr):\n        max_val = max(arr)\n        count = [0] * (max_val + 1)\n        output = [0] * len(arr)\n\n        for i in range(len(arr)):\n            count[arr[i]] += 1\n\n        for i in range(1, len(count)):\n            count[i] += count[i - 1]\n\n        for i in range(len(arr) - 1, -1, -1):\n            output[count[arr[i]] - 1] = arr[i]\n            count[arr[i]] -= 1\n\n        return output\n\n    inv_count = 0\n    inv_index = [0] * n\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n                inv_index[i] += 1\n                inv_index[j] += 1\n\n    inv_index = counting_sort(inv_index)\n    inv_count = sum(inv_index)\n\n    return inv_count, inv_index"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Inv_Count(arr): \n    \"\"\"\n    Write a python function to count inversions in an array.\n    \"\"\"\n    inv_count = 0\n    for i in range(len(arr)):\n        # Sort the current subarray using in-place sorting algorithm\n        merge_sort(arr, 0, len(arr)-1)\n        # Count the number of inversions in the sorted subarray\n        inv_count += merge_sort(arr, 0, len(arr)-1)\n    return inv_count\n\ndef merge_sort(arr, start, end):\n    \"\"\"\n    Merge sort implementation for counting inversions in an array.\n    \"\"\"\n    if start < end:\n        mid = (start + end) // 2\n        merge_sort(arr, start, mid)\n        merge_sort(arr, mid+1, end)\n        merge_sort_helper(arr, start, mid, end)\n    return inv_count\n\ndef merge_sort_helper(arr, start, mid, end):\n    \"\"\"\n    Helper function for merge sort for counting inversions in an array.\n    \"\"\"\n    i = start\n    j = mid + 1\n    inv_count = 0\n    inv_start = start\n    inv_end = start\n    inv_arr = []\n    while i <= mid and j <= end:\n        if arr[i] <= arr[j]:\n            inv_arr.append(arr[i])\n            i += 1\n        else:\n            inv_arr.append(arr[j])\n            j += 1\n            inv_count += mid - i + 1\n        if i > mid and j <= end:\n            inv_arr.append(arr[j])\n            j += 1\n            inv_count += end - j + 1\n        if i <= mid and j > end:\n            inv_arr.append(arr[i])\n            i += 1\n            inv_count += mid - i + 1\n    while i <= mid:\n        inv_arr.append(arr[i])\n        i += 1\n    while j <= end:\n        inv_arr.append(arr[j])\n        j += 1\n    for i in range(inv_start, inv_end):\n        arr[i] = inv_arr[i-inv_start]\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    inv_count = 0\n\n    for i in range(n):\n        j = i\n        while j < n and arr[j] > arr[i]:\n            j += 1\n        arr[i], arr[j-1] = arr[j-1], arr[i]\n        inv_count += j - i - 1\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr) \n\n    # One-pass algorithm to count inversions using counting sort \n    # (O(n log n) time and O(n) extra space) \n    count = [0] * (n + 1) \n    inv_count = 0 \n\n    # Count number of inversions \n    for i in range(n): \n        count[i + 1] = count[i] + (arr[i] > arr[i + 1]) \n\n    # Undo counting sort by placing elements in sorted order \n    i = n - 1 \n    j = n \n    while i >= 0: \n        if j <= 0: \n            arr[i], arr[j] = arr[j], arr[i] \n            i -= 1 \n            j = n \n        elif arr[i] > arr[j]: \n            arr[i], arr[j] = arr[j], arr[i] \n            i -= 1 \n            j -= 1 \n            inv_count += count[j + 1] \n        else: \n            j -= 1 \n\n    return inv_count "
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inv_count = 0\n    for i in range(len(arr)):\n        # Sort the array in increasing order\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                # Swap the elements\n                arr[i], arr[j] = arr[j], arr[i]\n                # Update the inv_count\n                inv_count += len(arr) - i - 1\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr) \n    inv_count = 0 \n    \n    for i in range(1, n): \n        inv_count += merge_sort(arr, 0, i) \n        \n    return inv_count "
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    count = 0\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                count += n - j\n            else:\n                break\n\n    return count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr) \n\n    # Base case: If array has less than two elements, return 0 inversion count\n    if n <= 1: \n        return 0 \n\n    # Divide the array into two halves recursively and count inversions in each half\n    inv_count = get_Inv_Count(arr[:n//2]) + get_Inv_Count(arr[n//2:]) \n    inv_count += merge_sort(arr, 0, n-1) \n\n    return inv_count\n\ndef merge_sort(arr, low, high): \n    '''\n    Write a python function to merge two sorted arrays into a single sorted array.\n    '''\n    if low < high: \n        mid = (low + high) // 2 \n\n        # Merge the two halves into a single sorted array\n        merge_sort(arr, low, mid) \n        merge_sort(arr, mid+1, high) \n        merge_inv(arr, low, mid, high) \n\n    return 0\n\ndef merge_inv(arr, low, mid, high): \n    '''\n    Write a python function to merge two sorted arrays and count inversions in the merged array.\n    '''\n    i = low \n    j = mid + 1 \n    k = low \n\n    # Merge the two sorted arrays and count inversions in the merged array\n    while i <= mid and j <= high: \n        if arr[i] <= arr[j]: \n            if arr[i] > arr[k]: \n                k += 1 \n                inv_count += (mid - i + 1) \n            i += 1 \n        else: \n            if arr[j] > arr[k]: \n                k += 1 \n                inv_count += (j - mid) \n            j += 1 \n\n    # Add the remaining elements of the first half to the merged array\n    while i <= mid: \n        if arr[i] > arr[k]: \n            k += 1 \n            inv_count += (mid - i + 1) \n        i += 1 \n\n    # Add the remaining elements of the second half to the merged array\n    while j <= high: \n        if arr[j] > arr[k]: \n            k += 1 \n            inv_count += (j - mid) \n        j += 1 "
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    This function takes a nested list as input and returns a flattened list.\n    \"\"\"\n    flat_list = []\n    for item in lst:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    Given a nested list, flatten it into a single list.\n    \"\"\"\n    flat_list = []\n    for item in lst:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    # create an empty list to store the flattened result\n    flattened_list = []\n    # loop over each element in the list\n    for item in list1:\n        # if the item is a list itself, recursively call the function on it\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        # otherwise, append the item to the flattened list\n        else:\n            flattened_list.append(item)\n    # return the flattened list\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n\n    # define an empty list to store the flattened list\n    flat_list = []\n\n    # loop through the list and add each element to the flat_list\n    for item in list1:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n\n    # return the flattened list\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for item in list1:\n        if type(item) == list:\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    # Base case: if the input list is empty, return an empty list\n    if not list1:\n        return []\n\n    # Recursive case: if the input list contains only one element, return it\n    if len(list1) == 1:\n        return list1\n\n    # If the input list contains multiple elements, flatten the sublists recursively\n    else:\n        flattened = []\n        for item in list1:\n            # Check if the item is a list or a non-list element\n            if isinstance(item, list):\n                # If it's a list, recursively flatten it\n                flattened += flatten_list(item)\n            else:\n                # If it's not a list, add it to the flattened list\n                flattened.append(item)\n        return flattened"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n\n    flattened_list = []\n    for i in list1:\n        if isinstance(i, list):\n            flattened_list.extend(flatten_list(i))\n        else:\n            flattened_list.append(i)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a defaultdict to store the maximum aggregate for each transaction\n    max_agg = defaultdict(int)\n\n    # Iterate over the list of tuples\n    for transaction in stdata:\n        # Extract the sale amount and the transaction ID\n        sale_amount = transaction[0]\n        transaction_id = transaction[1]\n\n        # Update the maximum aggregate for the transaction ID\n        max_agg[transaction_id] = max(max_agg[transaction_id], sale_amount)\n\n    # Extract the maximum aggregate from the defaultdict\n    max_agg = max(max_agg.values())\n\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a dictionary to store the maximum aggregate for each customer\n    max_aggr_dict = defaultdict(int)\n\n    # Iterate through the list of tuples\n    for item in stdata:\n        # Extract the customer and the aggregate from the tuple\n        customer, aggregate = item\n\n        # Update the maximum aggregate for the customer in the dictionary\n        max_aggr_dict[customer] = max(max_aggr_dict[customer], aggregate)\n\n    # Iterate through the dictionary to find the maximum aggregate for each customer\n    max_aggr = 0\n    for value in max_aggr_dict.values():\n        max_aggr = max(max_aggr, value)\n\n    # Return the maximum aggregate\n    return max_aggr"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Initialize the dictionary to store the maximum aggregate for each transaction\n    max_aggr = defaultdict(int)\n    # Loop through each transaction in the list\n    for t in stdata:\n        # Calculate the maximum aggregate for the transaction\n        max_aggr[t[0]] = max(max_aggr[t[0]], t[1])\n    # Loop through the dictionary and find the maximum aggregate\n    max_agg = max(max_aggr.values())\n    # Return the maximum aggregate\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a dictionary to store the maximum aggregate for each customer\n    max_aggr = defaultdict(int)\n\n    # Iterate over the list of tuples\n    for order_id, order_items in stdata:\n        # Calculate the total aggregate for the customer\n        total_agg = sum(order_items)\n\n        # Update the maximum aggregate for the customer\n        max_aggr[order_id] = max(max_aggr[order_id], total_agg)\n\n    # Return the maximum aggregate for each customer\n    return max_aggr"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Initialize a dictionary to store the count of each item\n    count = defaultdict(int)\n    \n    # Iterate through the list of tuples\n    for item, quantity in stdata:\n        # Update the count of the item\n        count[item] += quantity\n    \n    # Find the maximum aggregate value\n    max_value = max(count.values())\n    \n    # Initialize a variable to store the maximum item\n    max_item = None\n    \n    # Iterate through the dictionary\n    for item, quantity in count.items():\n        # If the quantity is greater than the maximum quantity so far, update the maximum quantity and item\n        if quantity > max_value:\n            max_value = quantity\n            max_item = item\n    \n    # Return the maximum item and aggregate value\n    return max_item, max_value"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_aggregate(stdata):\n    '''\n    This function takes a list of tuples as input and returns the maximum aggregate.\n    The function first creates a defaultdict object where the keys are the product names and the values are the quantities ordered by the date.\n    It then loops through the list of tuples and adds the quantity to the corresponding product name in the defaultdict.\n    Finally, it loops through the defaultdict and returns the maximum aggregate value.\n    '''\n    max_agg = defaultdict(int)\n    for item in stdata:\n        max_agg[item[0]] += item[1]\n    return max(max_agg.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    This function takes a list of tuples as input and returns the maximum aggregate\n    among all the transactions in the list.\n    '''\n    # Create a defaultdict object to store the transaction details\n    transaction_details = defaultdict(list)\n\n    # Iterate over the list of tuples and add the transaction details to the defaultdict\n    for item in stdata:\n        transaction_details[item[0]].append(item[1])\n\n    # Iterate over the defaultdict to find the maximum aggregate\n    max_agg = float('-inf')\n    for key, val in transaction_details.items():\n        max_agg = max(max_agg, max(val))\n\n    # Return the maximum aggregate\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    This function takes a list of tuples as input and calculates the maximum aggregate\n    from the list of tuples.\n\n    Arguments:\n    stdata -- a list of tuples containing student names and their marks.\n\n    Returns:\n    A dictionary containing student names as keys and their maximum aggregate as values.\n    '''\n\n    # Create an empty dictionary to store the results\n    result = {}\n\n    # Iterate over the list of tuples\n    for name, marks in stdata:\n        # If the name is already present in the result dictionary, update the maximum aggregate\n        if name in result:\n            result[name] = max(result[name], marks)\n        # If the name is not present in the result dictionary, add the name and its maximum aggregate to the dictionary\n        else:\n            result[name] = marks\n\n    # Return the dictionary with the maximum aggregate for each student\n    return result"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a dictionary to store the maximum aggregate for each transaction\n    max_agg = defaultdict(lambda: (0, 0))\n    \n    # Iterate over the list of tuples and update the maximum aggregate for each transaction\n    for trans, amount in stdata:\n        max_agg[trans] = (max(max_agg[trans][0], amount), max(max_agg[trans][1], amount))\n    \n    # Find the maximum aggregate for each transaction and return the maximum\n    max_sum = 0\n    for trans in max_agg:\n        max_sum += max_agg[trans][0]\n        \n    return max_sum"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_agg = defaultdict(int)\n    for item in stdata:\n        max_agg[item[0]] += item[1]\n    return max(max_agg.values())"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        first_n_bits = bin(i)[2:].zfill(n)\n        last_n_bits = bin(i+2**n)[2:].zfill(n)\n        if int(first_n_bits) == int(last_n_bits):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        binary_str = bin(i)[2:].zfill(2*n)\n        sum_first = int(binary_str[:n], 2)\n        sum_last = int(binary_str[-n:], 2)\n        if sum_first == sum_last:\n            count += 1\n    return count\n"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # Initialize count variable\n    count = 0\n    # Loop through all possible binary sequences of length 2n\n    for i in range(2**n):\n        # Extract first n bits and last n bits from sequence\n        first_n = bin(i)[2:].zfill(n)\n        last_n = bin(i)[-n:].zfill(n)\n        # Check if sum of first n bits is equal to sum of last n bits\n        if int(first_n, 2) == int(last_n, 2):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    \n    # initialize count to 0\n    count = 0\n    \n    # iterate over all possible binary sequences of length 2n\n    for i in range(2**n, 2**2*n+1, 2**n):\n        # check if the sum of first n bits is same as sum of last n bits\n        if sum(int(digit) for digit in bin(i)[2:].zfill(n)) == sum(int(digit) for digit in bin(i)[-2:].zfill(n)):\n            # increment count if sequence satisfies the condition\n            count += 1\n    \n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        sum_first_n = sum([int(x) for x in bin(i)[2:].zfill(2**n)])\n        sum_last_n = sum([int(x) for x in bin(i)[-2**n:].zfill(2**n)])\n        if sum_first_n == sum_last_n:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**(n-1)+1):\n        # generate all binary sequences of length 2n\n        seq = bin(i)[2:].zfill(2*n)\n        # check if sum of first n bits is same as sum of last n bits\n        if int(seq[:n]) + int(seq[n:]) == 2**(2*n)-1:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_binary_seq(n):\n    def binary_seq_sum(seq):\n        return sum([int(digit) for digit in seq])\n\n    count = 0\n    for i in range(2**n):\n        for j in range(2**n):\n            if binary_seq_sum(bin(i)[2:].zfill(n)) == binary_seq_sum(bin(j)[2:].zfill(n)):\n                count += 1\n\n    return count\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"Count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits is:\", count_binary_seq(n))"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_binary_seq(n):\n    \"\"\"\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    \"\"\"\n    total = 0\n    for i in range(1, 2**n+1):\n        if bin(i).count('1') == bin(i).count('0'):\n            total += 1\n    return total"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_binary_seq(n):\n    \"\"\"\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    \"\"\"\n    count = 0\n    for i in range(1, 2**n):\n        first_n = bin(i)[2:].zfill(n)\n        last_n = bin(i - (2**n) + 1)[2:].zfill(n)\n        if int(first_n) + int(last_n) == i:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    \n    # Count all possible binary sequences of length 2n\n    count = 0\n    for i in range(1, 2**2*n):\n        # Convert each binary sequence to a number and calculate its sum\n        num = int(bin(i)[2:], 2)\n        sum1 = sum([int(bit) for bit in bin(num)[2:]])\n        sum2 = sum([int(bit) for bit in bin((num+1)//2)[2:]])\n        # Check if the sum of first n bits is same as the sum of last n bits\n        if sum1 == sum2:\n            count += 1\n    \n    return count"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth = 1 + dict_depth(value)\n            if depth > max_depth:\n                max_depth = depth\n    return max_depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key in d.keys():\n        if isinstance(d[key], dict):\n            depth = max(depth, dict_depth(d[key]) + 1)\n        else:\n            depth += 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth = max(depth, dict_depth(value) + 1)\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for k, v in d.items():\n        if isinstance(v, dict):\n            depth = max(depth, dict_depth(v) + 1)\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n\n    # Initialize a variable to store the depth\n    depth = 0\n\n    # Loop through all the keys in the dictionary\n    for key in d.keys():\n\n        # Check if the key is a dictionary\n        if isinstance(d[key], dict):\n\n            # Increment the depth by one\n            depth += 1\n\n            # Recursively call the function on the nested dictionary\n            dict_depth(d[key])\n\n    # Return the final depth\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    \"\"\"\n    Write a function to find the depth of a dictionary.\n    \"\"\"\n    # Base case: empty dictionary\n    if not d:\n        return 0\n    # Recursive case: count the number of sub-dictionaries and add 1 to each one\n    return 1 + max(dict_depth(v) for v in d.values())"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    for key in d:\n        if type(d[key]) == dict:\n            depth = dict_depth(d[key]) + 1\n            if depth > max_depth:\n                max_depth = depth\n        else:\n            max_depth += 1\n    return max_depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth += 1\n            depth += dict_depth(d[key])\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if type(d) == dict:\n        return 1 + max(dict_depth(v) for v in d.values())\n    else:\n        return 0"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth = dict_depth(value) + 1\n        else:\n            depth = 1\n        max_depth = max(max_depth, depth)\n    return max_depth"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes an array, a list of rotations, an index, and a list of ranges as input.\n    The function finds the element at the given index after the number of rotations specified.\n    \"\"\"\n\n    for i in range(rotations):\n        # Find the starting index and end index of the current rotation\n        start, end = ranges[i]\n\n        # Reverse the subarray between the starting and ending indices\n        arr[start:end] = arr[start:end][::-1]\n\n    # Return the element at the specified index\n    return arr[index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    This function takes in the array, ranges, rotations and the index.\n    It then calculates the final index after rotations and returns the element at that index.\n    '''\n    # Find the number of rotations to make the index final\n    num_rotations = 0\n    for i in range(len(ranges)):\n        if index >= ranges[i]:\n            num_rotations += rotations[i]\n            index -= ranges[i]\n        else:\n            break\n\n    # Calculate the final index after rotations\n    final_index = index\n    for i in range(num_rotations):\n        final_index += arr[final_index]\n\n    # Return the element at the final index\n    return arr[final_index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    This function finds the element at a given index after a given number of rotations.\n\n    Parameters:\n    arr (list): A list of integers.\n    ranges (list): A list of tuples representing ranges of integers in the array.\n    rotations (int): The number of rotations to perform.\n    index (int): The index of the element to be found after rotations.\n\n    Returns:\n    int: The element at the given index after the number of rotations.\n    '''\n    n = len(arr)\n    # Find the element at the given index.\n    element = arr[index]\n\n    # Iterate through the ranges of integers and check if the element is in the range.\n    for i in range(len(ranges)):\n        if element >= ranges[i][0] and element <= ranges[i][1]:\n            # If the element is in the range, rotate it by the number of rotations and find the element.\n            element = arr[(index + rotations * (ranges[i][1] - ranges[i][0] + 1)) % n]\n            break\n\n    return element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    This function takes an array, a list of ranges, a number of rotations, and an index as input. \n    It returns the element at the given index after the number of rotations.\n    '''\n    # Calculate the new index after rotations\n    new_index = (index + rotations) % len(arr)\n    # Find the new element after rotations\n    new_element = arr[(new_index - index + len(ranges)) % len(arr)]\n    # Find the range of the new element\n    for i, range_ in enumerate(ranges):\n        if arr[new_index] >= range_[0] and arr[new_index] <= range_[1]:\n            return arr[new_index]\n    # If the new element is not within any of the ranges, return None\n    return None"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n\n    # find the total number of rotations required to reach the desired index\n    total_rotations = 0\n    for i in range(len(ranges)):\n        if index <= ranges[i]:\n            total_rotations += rotations[i]\n            index -= ranges[i]\n    \n    # calculate the final index after rotating the array\n    final_index = (index + total_rotations) % len(arr)\n    if final_index < 0:\n        final_index = len(arr) + final_index\n    \n    # return the element at the final index\n    return arr[final_index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    This function takes an array, an array of ranges, a number of rotations and an index as input. \n    The function finds the element at the given index after rotating the array by the given number of rotations.\n    '''\n    # Calculate the final index after rotating the array by the given number of rotations\n    final_index = index + rotations\n    # Find the element at the final index using binary search\n    while True:\n        if final_index < 0 or final_index >= len(arr):\n            return None\n        if final_index == index:\n            return arr[final_index]\n        if final_index in ranges:\n            # Element is in a range\n            if final_index > index:\n                # Element is in the first half of the array\n                if final_index - index < len(ranges[final_index - index]):\n                    # Element is in the first range\n                    return arr[final_index - index][0]\n                else:\n                    # Element is in the second range\n                    return arr[final_index - index - len(ranges[final_index - index])]\n            else:\n                # Element is in the second half of the array\n                if final_index - index < len(ranges[index - final_index]):\n                    # Element is in the second range\n                    return arr[index - final_index][0]\n                else:\n                    # Element is in the first range\n                    return arr[index - final_index - len(ranges[index - final_index])]\n        else:\n            # Element is not in a range\n            if final_index < index:\n                # Element is in the first half of the array\n                if final_index < len(arr):\n                    # Element is in the first range\n                    return arr[final_index]\n                else:\n                    # Element is in the second range\n                    return arr[final_index - len(arr)]\n            else:\n                # Element is in the second half of the array\n                if final_index < len(arr):\n                    # Element is in the second range\n                    return arr[index]\n                else:\n                    # Element is in the first range\n                    return arr[index - len(arr)]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # loop through rotations and calculate the index after each rotation\n    for rotation in rotations:\n        index = index + rotation\n        if index >= len(arr):\n            index = index % len(arr)\n    return arr[index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function finds the element at a given index after rotations.\n\n    Args:\n        arr (list): the given array.\n        ranges (list): the list of rotations ranges.\n        rotations (int): the number of rotations.\n        index (int): the index of the element to be found.\n\n    Returns:\n        The element at the given index after rotations.\n    \"\"\"\n\n    # Find the rotation range for the given index.\n    range_index = bisect_left(ranges, index)\n    if range_index == len(ranges):\n        range_index -= 1\n\n    # Find the element at the given index after the rotation.\n    element = arr[(rotations + range_index) % len(arr)]\n\n    return element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    Write a python function to find element at a given index after number of rotations.\n    \"\"\"\n    # initialize a list of elements to store the elements after rotations\n    elements = []\n    \n    # loop through all the ranges and rotations\n    for range_ in ranges:\n        for rotation in range(rotations):\n            # calculate the new index after rotations\n            new_index = (index + rotation + range_) % len(arr)\n            # add the element at the new index to the list\n            elements.append(arr[new_index])\n    \n    # return the element at the given index after the rotations\n    return arr[index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes an array, list of ranges, rotations, and index as input.\n    The function returns the element at the given index after rotations.\n\n    Args:\n        arr (list): An array of integers.\n        ranges (list): A list of tuples representing the ranges of integers.\n        rotations (int): The number of rotations required.\n        index (int): The index of the element to be found after rotations.\n\n    Returns:\n        int: The element at the given index after rotations.\n\n    \"\"\"\n    # calculate the total number of elements in the array\n    total_elements = len(arr)\n\n    # loop through each range of integers\n    for start, end in ranges:\n        # calculate the number of elements in the current range\n        current_range = end - start + 1\n\n        # calculate the number of elements to be rotated in the current range\n        current_rotation = rotations // current_range\n\n        # calculate the number of elements to be shifted after rotation\n        current_shift = index - start + current_rotation * current_range\n\n        # calculate the final index of the element\n        final_index = start + current_shift % current_range\n\n        # check if the final index is within the range of the current range\n        if final_index >= 0 and final_index < current_range:\n            # return the element at the final index\n            return arr[final_index]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p\\w+'\n    matches = re.findall(pattern, words)\n    return matches[0:2]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'p[a-z]*'\n    matches = re.findall(pattern, words)\n    if len(matches) > 1:\n        return matches[0], matches[1]\n    else:\n        return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = re.findall(r'\\b[Pp][a-zA-Z]{2,}\\b',''.join(words))\n    return p_words"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # initialize two empty lists to store matching words\n    start_p_words = []\n    start_not_p_words = []\n\n    # iterate through the list of words\n    for word in words:\n        # check if the word starts with 'p'\n        if re.match('^p', word):\n            # if it does, append it to the list of start_p_words\n            start_p_words.append(word)\n        # if the word does not start with 'p', append it to the list of start_not_p_words\n        else:\n            start_not_p_words.append(word)\n\n    # return the two lists of matching words\n    return start_p_words, start_not_p_words"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # create a regular expression pattern to match words starting with 'p'\n    pattern = re.compile(\"^p\")\n    # loop over all words in the list\n    for word in words:\n        # if the word starts with 'p'\n        if pattern.match(word):\n            # return the two words starting with 'p'\n            return [word, words[words.index(word)+1]]\n    # if no words starting with 'p' are found\n    return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if word[0] == 'p':\n            p_words.append(word)\n    if len(p_words) >= 2:\n        return p_words[0], p_words[1]\n    else:\n        return \"No two words starting with 'p' found in the list.\""
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p\\w+$')\n    for word in words:\n        if pattern.match(word):\n            return word, pattern.sub('', word)\n    return 'No words starting with p found', None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p')\n    matches = [word for word in words if pattern.match(word)]\n    return matches[:2]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p'\n    matches = re.findall(pattern, words)\n    if len(matches) < 2:\n        return \"No matching words found.\"\n    else:\n        return matches"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if re.match(\"^p\", word):\n            p_words.append(word)\n    if len(p_words) == 2:\n        return p_words\n    else:\n        return \"There are not exactly two words starting with 'p'.\""
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if index == n:\n        return 0\n\n    dp = [0] * n\n    dp[index] = a[index]\n\n    for i in range(index, n):\n        for j in range(i, index):\n            if a[j] < a[i] and dp[i] < dp[j] + a[i]:\n                dp[i] = dp[j] + a[i]\n\n    prefix_sum = sum(a[:index+1])\n    suffix_sum = sum(a[index+1:])\n\n    max_sum = max(dp[index], prefix_sum + suffix_sum)\n\n    for i in range(index+1, k+1):\n        if a[i-1] > a[i]:\n            max_sum = max(max_sum, dp[i-1] + a[i-1])\n\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    if k > index:\n        return 0\n\n    # Base case: If current index is equal to kth element, return its value\n    if index == k:\n        return a[index]\n\n    # Initialize variables to store maximum sum of increasing subsequence from prefix until current index\n    max_so_far = 0\n    max_ending_here = 0\n\n    # Iterate over indices from 0 to k-1\n    for i in range(index):\n        # Calculate the maximum sum of increasing subsequence from prefix until index i\n        left_sum = max_sum_increasing_subseq(a, n, i, k)\n\n        # Update maximum sum of increasing subsequence from prefix until current index\n        max_ending_here = max(a[index] + left_sum, max_ending_here)\n\n        # Update maximum sum of increasing subsequence from prefix until previous index\n        max_so_far = max(max_ending_here, max_so_far)\n\n    return max_so_far"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Given an array a of integers and an integer k, find the maximum sum of increasing subsequence from prefix until index i, \n    including a given kth element which is after i.\n    \"\"\"\n\n    # Initialize a list of zeros with length n\n    dp = [0] * (n + 1)\n\n    # Initialize the maximum sum to be negative infinity\n    max_sum = float('-inf')\n\n    # Traverse through the array from index 0 to i\n    for i in range(index + 1, n + 1):\n\n        # If the current element is greater than k, skip it\n        if a[i - 1] > k:\n            continue\n\n        # If the current element is greater than the previous element, update the maximum sum\n        if a[i - 1] > dp[i - 1]:\n            dp[i] = dp[i - 1] + a[i - 1]\n        else:\n            dp[i] = a[i - 1]\n\n        # Update the maximum sum if the current element is the maximum sum so far\n        if dp[i] > max_sum:\n            max_sum = dp[i]\n\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    \"\"\"\n    # base case: if kth element is not in the array, return 0\n    if k > n:\n        return 0\n\n    # initialize the maximum sum to 0 and an empty list to store the indices\n    max_sum = 0\n    indices = []\n\n    # iterate over the array from the start to index\n    for i in range(index):\n        # if the next element is less than or equal to kth element, update the maximum sum and add the current index to the list of indices\n        if a[i] <= a[k]:\n            max_sum = max(max_sum, a[i] + max_sum_increasing_subseq(a, n, i + 1, k))\n            indices.append(i)\n\n    # add the last element to the list of indices\n    indices.append(index - 1)\n\n    # if the last element is less than or equal to kth element, update the maximum sum\n    if a[index - 1] <= a[k]:\n        max_sum = max(max_sum, a[index - 1] + max_sum_increasing_subseq(a, n, index, k))\n\n    # return the maximum sum and the list of indices\n    return max_sum, indices"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    This function takes an array a of integers and its size n and two indices index and k. \n    The function returns the maximum sum of increasing subsequence from prefix until ith index and including a given kth element which is after i, i.e., k > i.\n    '''\n\n    # If the kth element is not after i, return 0\n    if k <= index:\n        return 0\n\n    # Initialize the max sum and store the prefix sum for all indexes\n    max_sum = 0\n    prefix_sum = [0] * (n + 1)\n\n    # Compute the prefix sum for all indexes and fill the prefix sum array\n    for i in range(1, n + 1):\n        prefix_sum[i] = prefix_sum[i - 1] + a[i - 1]\n\n    # Initialize the max sum ending at index 0\n    max_sum_ending_at_index_0 = 0\n\n    # Compute the maximum sum ending at each index i\n    for i in range(1, n + 1):\n        if i <= k:\n            continue\n        else:\n            temp_sum = prefix_sum[i] - prefix_sum[i - 1] - a[i - 1] + prefix_sum[i - k - 1]\n            if temp_sum > max_sum_ending_at_index_0:\n                max_sum_ending_at_index_0 = temp_sum\n\n    # Return the maximum sum ending at the ith index\n    return max_sum_ending_at_index_0"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if k <= index:\n        return 0\n\n    # Initialize the maximum sum as 0\n    max_sum = 0\n\n    # Initialize the maximum sum of subsequence ending at index i as 0\n    max_sum_subseq = 0\n\n    # Initialize a boolean list to mark if a given number is included in the current subsequence\n    is_included = [False] * n\n\n    # Initialize a boolean list to mark if a given number is already included in a subsequence which ends at index i\n    is_included_prev = [False] * n\n\n    # Initialize a list to store the indices of the subsequences which end at index i\n    indices_subseq = []\n\n    # Initialize a dictionary to store the sum of subsequence ending at index j and k which ends at index i as the length of the longest increasing subsequence ending at index i\n    sum_subseq = {}\n\n    # Initialize the sum of subsequence ending at index i as 0\n    sum_subseq[index] = 0\n\n    # Initialize the current subsequence starting at index 0 as empty\n    current_subseq = []\n\n    # Iterate from index i to k - 1\n    for i in range(index, k):\n        # Check if a given number is already included in a subsequence which ends at index i\n        if is_included_prev[i]:\n            # Update the current subsequence with the previous subsequence\n            current_subseq = current_subseq + indices_subseq[i]\n            # Update the sum of subsequence ending at index i as the length of the longest increasing subsequence ending at index i\n            sum_subseq[i] = len(current_subseq)\n            # Continue with the next iteration of the loop\n            continue\n\n        # Check if a given number is included in the current subsequence\n        if a[i] in current_subseq:\n            # Update the current subsequence with the previous subsequence and the given number\n            current_subseq = current_subseq + [a[i]]\n            # Update the sum of subsequence ending at index i as the length of the longest increasing subsequence ending at index i\n            sum_subseq[i] = len(current_subseq)\n            # Continue with the next iteration of the loop\n            continue\n\n        # Check if a given number is not included in the current subsequence and is the first number in the subsequence\n        if len(current_subseq) == 0 or a[i]!= current_subseq[-1]:\n            # Update the current subsequence with the given number\n            current_subseq = [a[i]]\n            # Update the sum of subsequence ending at index i as the length of the current subsequence\n            sum_subseq[i] = len(current_subseq)\n\n        # Initialize the sum of the longest increasing subsequence ending at index i\n        sum_max_subseq = 0\n\n        # Initialize the current subsequence ending at index i as the first number in the subsequence\n        current_subseq_max = current_subseq\n\n        # Iterate from index i + 1 to n - 1\n        for j in range(i + 1, n):\n            # Check if the given number is included in the current subsequence ending at index j\n            if a[j] in current_subseq:\n                # Update the current subsequence with the previous subsequence and the given number\n                current_subseq = current_subseq + [a[j]]\n                # Update the sum of the longest increasing subsequence ending at index i as the length of the current subsequence\n                sum_max_subseq = max(sum_max_subseq, len(current_subseq))\n                # Check if the given number is already included in the current subsequence ending at index i\n                if a[j] in current_subseq_max:\n                    # Update the sum of subsequence ending at index i as the sum of the current subsequence ending at index i and the sum of the longest increasing subsequence ending at index j\n                    sum_subseq[i] = sum_subseq[i] + sum_subseq[j] + 1\n                    # Update the indices of the subsequences which end at index i and k as the current subsequence and the longest increasing subsequence ending at index i\n                    indices_subseq[i] = current_subseq_max\n                    indices_subseq[k] = current_subseq\n                    # Stop the iteration of the loop\n                    break\n            # Check if"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n\n    # Initialize maximum sum to negative infinity\n    max_sum = float('-inf')\n\n    # Initialize a list to store the maximum sum of increasing subsequence until the i-th index\n    max_sum_list = [0] * (n + 1)\n\n    # Initialize a list to store the index of the maximum sum of increasing subsequence until the i-th index\n    index_list = [0] * (n + 1)\n\n    # Initialize a variable to store the current index\n    curr_index = index\n\n    # Traverse through all possible starting positions i\n    for i in range(1, n + 1):\n\n        # Initialize a variable to store the maximum sum of increasing subsequence from the i-th index till the end of the array\n        curr_sum = float('-inf')\n\n        # Traverse through all possible ending positions j\n        for j in range(curr_index, n + 1):\n\n            # If the current element is greater than the kth element, we add it to the sum\n            if a[j] > k:\n                curr_sum = max(curr_sum, a[j] + max_sum_list[j - 1])\n\n            # Update the maximum sum of increasing subsequence from the i-th index till the current index\n            curr_sum = max(curr_sum, max_sum_list[j] + a[i])\n\n        # Update the maximum sum of increasing subsequence from the i-th index till the end of the array\n        max_sum_list[i] = curr_sum\n\n        # Update the index of the maximum sum of increasing subsequence from the i-th index till the end of the array\n        index_list[i] = curr_index\n\n        # If the maximum sum of increasing subsequence from the i-th index till the end of the array is greater than the current maximum sum, update the current maximum sum and its index\n        if max_sum_list[i] > max_sum:\n            max_sum = max_sum_list[i]\n            curr_index = i\n\n    # Initialize a variable to store the index of the maximum sum of increasing subsequence from the ith index till the kth index\n    k_index = index_list[n]\n\n    # Traverse through all possible ending positions j\n    for j in range(curr_index, k_index + 1):\n\n        # If the current element is greater than the kth element, we add it to the sum\n        if a[j] > k:\n            curr_sum = max(curr_sum, a[j] + max_sum_list[j - 1])\n\n        # Update the maximum sum of increasing subsequence from the ith index till the kth index\n        curr_sum = max(curr_sum, max_sum_list[j] + a[k_index + 1])\n\n    # Return the maximum sum of increasing subsequence from the ith index till the kth index\n    return curr_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # Initialize variables\n    dp = [[0] * n for _ in range(n+1)]\n    max_sum = float('-inf')\n    \n    # Fill the dp table\n    for i in range(n):\n        if i <= k:\n            dp[i+1][i] = 0\n        elif i == k:\n            dp[i+1][i] = a[i]\n        else:\n            dp[i+1][i] = max(dp[i+1][j] + a[i] for j in range(i))\n    \n    # Find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i\n    for i in range(index, n+1):\n        if i <= k:\n            continue\n        max_sum = max(max_sum, dp[i][i-1])\n    \n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n\n    Parameters:\n    -----------\n    a: list[int]\n        A list of integers\n    n: int\n        The length of the list\n    index: int\n        The index for which the maximum sum of increasing subsequence is to be found\n    k: int\n        The index for which the kth element of the list is to be considered\n\n    Returns:\n    --------\n    int\n        The maximum sum of increasing subsequence including the given kth element\n    \"\"\"\n    if index == 0:\n        return a[0]\n    if index > n:\n        return 0\n    if a[index] >= a[index - 1] and a[index] <= a[k]:\n        return max(a[index], max_sum_increasing_subseq(a, n, index - 1, k))\n    else:\n        return max_sum_increasing_subseq(a, n, index - 1, k)\n"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if k > index:\n        return -1\n    \n    if index == 0:\n        return a[0]\n\n    max_sum = max_sum_increasing_subseq(a, n, index-1, k)\n    \n    if k == index:\n        return max(max_sum, a[index]*(k-index+1))\n\n    if index < k:\n        max_sum = max(max_sum, a[index]*(k-index+1) + max_sum_increasing_subseq(a, n, index+1, k))\n\n    return max(max_sum, a[index])"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # make a copy of the tuple to avoid modifying the original\n    tuplex_copy = deepcopy(tuplex)\n\n    # get the length of the tuple\n    length = len(tuplex_copy)\n\n    # check if the length of the colon is valid\n    if m > length or n > length:\n        print(\"Invalid length of colon.\")\n        return\n\n    # create an empty list to store the colon\n    colon = []\n\n    # loop through the tuple and get the required colon\n    for i in range(m-1):\n        colon.append(tuplex_copy[i])\n        colon.append(tuplex_copy[n-1])\n        tuplex_copy = tuplex_copy[:i] + tuplex_copy[i+1:]\n        tuplex_copy = tuplex_copy[:n-1] + tuplex_copy[n:]\n\n    # add the last element to the colon\n    colon.append(tuplex_copy[-1])\n\n    # return the colon as a tuple\n    return tuple(colon)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n\n    # Copy the tuple to avoid modifying the original\n    tuplex = deepcopy(tuplex)\n\n    # Get the indices of the elements in the colon\n    colon_indices = tuple(range(m,n))\n\n    # Get the elements in the colon as a new tuple\n    colon_tuplex = tuple(tuplex[i] for i in colon_indices)\n\n    return colon_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Write a function to get a colon of a tuple.\n    \"\"\"\n    new_tuplex = deepcopy(tuplex)  # create a copy of the input tuple\n    for i in range(m):\n        new_tuplex = new_tuplex + (None,)  # add None values to the new tuple\n    return new_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Create a new list of the same length as the input list\n    new_list = [None] * m\n    # Create a list to hold the colon\n    colon = []\n    # Copy the input list into the new list\n    new_list = deepcopy(tuplex)\n    # Loop through the input list and add elements to the colon\n    for i in range(m):\n        # Loop through the input list again and add elements to the new list\n        for j in range(n):\n            # If the current index is in the input list, add it to the new list\n            if i == j:\n                new_list[i] = tuplex[j]\n                # Add the element to the colon list\n                colon.append(new_list[i])\n        # Reset the new list to the original input list\n        new_list = deepcopy(tuplex)\n    # Return the colon list\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    \n    if n==0:\n        return tuplex[0]\n    \n    temp = deepcopy(tuplex)\n    temp.insert(0,None)\n    temp = tuple(temp)\n    \n    result = colon_tuplex(temp,m,n-1)\n    \n    if m%2==0:\n        result = (result,tuplex[m])\n    else:\n        result = (tuplex[m],result)\n    \n    return result"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Copy the tuple to avoid modifying the original\n    tuplex_copy = deepcopy(tuplex)\n    # Create a list to store the colon\n    colon = []\n    # Loop through each element in the tuple\n    for i in range(len(tuplex_copy)):\n        # If the index is greater than or equal to the middle, add then'th element to the colon\n        if i >= m:\n            colon.append(tuplex_copy[i+n])\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    new_tuplex = deepcopy(tuplex)\n    for i in range(m):\n        for j in range(n):\n            new_tuplex = (new_tuplex[0], new_tuplex[j+1])\n    return new_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    \"\"\"\n    Write a function to get a colon of a tuple.\n    \"\"\"\n    new_tuplex = deepcopy(tuplex)\n    new_tuplex = new_tuplex[:m] + (new_tuplex[m],) + new_tuplex[m+1:n] + (new_tuplex[n],)\n    return new_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon = []\n    for i in range(m):\n        row = []\n        for j in range(n):\n            row.append(tuplex[i][j])\n        colon.append(tuple(row))\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Make a copy of the input tuple to avoid modifying the original\n    t = deepcopy(tuplex)\n\n    # Iterate over the columns and rows of the colon\n    for i in range(m):\n        for j in range(n):\n            # Get the index of the element in the input tuple\n            k = i + j * m\n            # Get the element at the index k\n            elem = t[k]\n            # Set the element at the index k to the element of the colon\n            t[k] = elem\n    return t"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    product_list = []\n    for i in range(N):\n        product_list.append(nums1[i] * nums2[i])\n    return max(product_list)"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the two lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    \n    # Initialize a variable to store the largest products\n    largest_products = []\n    \n    # Iterate over the numbers from 0 to N-1\n    for i in range(N):\n        # Calculate the product of the ith factor of nums1 and the ith factor of nums2\n        product = nums1[i] * nums2[i]\n        \n        # Check if the product is not already in the list\n        if product not in largest_products:\n            # Add the product to the list of largest products\n            largest_products.append(product)\n    \n    # Return the list of largest products\n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Determine the maximum length of the two input lists\n    max_len = max(len(nums1), len(nums2))\n\n    # Initialize variables to store the largest products\n    largest1 = [0] * N\n    largest2 = [0] * N\n\n    # Loop over all possible combinations of factors\n    for i in range(N):\n        for j in range(max_len):\n            # Select the i-th factor from nums1 and j-th factor from nums2\n            factor1 = nums1[i] if i < len(nums1) else 0\n            factor2 = nums2[j] if j < len(nums2) else 0\n\n            # Compute the product of the selected factors\n            product = factor1 * factor2\n\n            # Update the largest product for factor1 and factor2\n            largest1[i] = max(largest1[i], product)\n            largest2[j] = max(largest2[j], product)\n\n    # Return the list of largest products\n    return largest1"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the two input lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    \n    # Initialize the result list to store the largest products\n    result = []\n    \n    # Iterate over the specified number of products to find\n    for i in range(N):\n        # Calculate the product of the i-th largest elements from both lists\n        product = nums1[i] * nums2[i]\n        \n        # Add the product to the result list if it's not already there\n        if product not in result:\n            result.append(product)\n    \n    return result"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    This function takes two lists `nums1` and `nums2` and a positive integer `N` as input and returns the `N` largest products\n    from the two lists, selecting one factor from each list.\n    \"\"\"\n    # Sort the input lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Initialize variables to store the largest products\n    largest_product1 = float('-inf')\n    largest_product2 = float('-inf')\n\n    # Find the N largest products\n    for i in range(N):\n        product1 = nums1[i] * nums2[i]\n        product2 = nums1[i] * nums2[N-i-1]\n\n        if product1 > largest_product1:\n            largest_product1 = product1\n\n        if product2 > largest_product2:\n            largest_product2 = product2\n\n    return largest_product1, largest_product2"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the given lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Initialize two variables to store the largest products\n    largest_product1 = 0\n    largest_product2 = 0\n\n    # Iterate over the first N elements of the first list and calculate the product of the largest elements\n    for i in range(N):\n        largest_product1 = max(largest_product1, nums1[i] * nums2[i])\n\n    # Iterate over the first N elements of the second list and calculate the product of the largest elements\n    for i in range(N):\n        largest_product2 = max(largest_product2, nums1[i] * nums2[i])\n\n    # Return the two largest products\n    return largest_product1, largest_product2"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('The two lists must have the same length.')\n    if N > len(nums1):\n        raise ValueError('The value of N must be less than or equal to the length of the first list.')\n    if N > len(nums2):\n        raise ValueError('The value of N must be less than or equal to the length of the second list.')\n    if N == 1:\n        return max(nums1[0] * nums2[0], nums1[-1] * nums2[-1])\n    if N == len(nums1):\n        return max(nums1[0] * nums1[-1], nums2[0] * nums2[-1])\n    for i in range(N - 1):\n        nums1.append(max(nums1[i] * nums2[i], nums1[-1] * nums2[i]))\n        nums2.append(max(nums1[i] * nums2[i], nums1[i] * nums2[-1]))\n    return max(nums1[-1] * nums2[-1], nums1[0] * nums2[0])"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Check if N is a valid input\n    if N <= 0 or N > len(nums1) + len(nums2):\n        return \"Invalid input\"\n    \n    # Sort the two lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    \n    # Initialize the largest products list\n    largest_products = []\n    \n    # Initialize the maximum and minimum values of the product factor\n    max_factor = 1\n    min_factor = 1\n    \n    # Loop through the specified number of N largest products\n    for i in range(N):\n        # Find the largest product in the first list\n        first_list_product = max(nums1[0] * nums2[i], nums1[i] * nums2[0])\n        \n        # Find the largest product in the second list\n        second_list_product = max(nums1[0] * nums2[N-1-i], nums1[N-1-i] * nums2[0])\n        \n        # Update the maximum and minimum factors\n        max_factor = max(max_factor, first_list_product, second_list_product)\n        min_factor = min(min_factor, first_list_product, second_list_product)\n        \n        # Add the two largest products to the list\n        largest_products.append(first_list_product)\n        largest_products.append(second_list_product)\n    \n    # Return the list of largest products\n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the two lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Initialize variables\n    largest_products = []\n    i, j = 0, 0\n    max_product = 0\n\n    # Iterate N times\n    while len(largest_products) < N:\n        # Calculate the product of the current pair\n        product = nums1[i] * nums2[j]\n\n        # Check if the product is greater than the current largest product\n        if product > max_product:\n            # Add the product to the list of largest products\n            largest_products.append(product)\n            # Update the maximum product\n            max_product = max(max_product, product)\n\n        # If the product is negative, increment the larger list\n        elif product < 0:\n            if nums1[i] < nums2[j]:\n                i += 1\n            else:\n                j += 1\n        else:\n            # If the product is zero, increment both lists\n            i += 1\n            j += 1\n\n    # Return the list of largest products\n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    Given two lists of integers, and an integer N,\n    this function finds the specified number of largest\n    products from each list, selecting one factor from\n    each list.\n\n    For example, if nums1 = [2, 3, 4, 5] and nums2 = [1, 2, 3, 4],\n    and N = 2, the function should return [12, 8].\n\n    The function should work for any two lists of integers\n    of length N or greater.\n    \"\"\"\n\n    # Check if the length of the two lists is greater than N\n    if len(nums1) > N or len(nums2) > N:\n        raise ValueError(\"Both lists must have length N or less.\")\n\n    # Initialize the result list\n    result = []\n\n    # Loop through the possible combinations of selecting two factors\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            # If both factors are selected, calculate the product\n            if i!= j:\n                product = nums1[i] * nums2[j]\n                # If the product is greater than the current largest\n                if len(result) < N or product > max(result):\n                    result = [product]\n                # If the product is equal to the current largest, add it\n                elif product == max(result):\n                    result.append(product)\n\n    return result"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>=b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximum(a,b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the maximum of those two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximum(a,b):\n    if a>b:\n        return a\n    else:\n        return b\n\nprint(maximum(4,7)) # output: 7"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    This function takes a string as input and returns a tuple of characters.\n    '''\n    # Convert string to list of characters\n    lst = list(str1)\n    # Convert list to tuple\n    tup = tuple(lst)\n    # Return tuple of characters\n    return tup"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Write a function to convert a given string to a tuple of characters.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # Split the string into a list of characters\n    lst = list(str1)\n    # Convert the list to a tuple\n    tup = tuple(lst)\n    return tup"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    return tuple(str1)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n): \n    \"\"\"\n    Write a python function to set the left most unset bit.\n\n    Input: An integer n.\n\n    Output: The integer n with the left most unset bit set to 1.\n    \"\"\"\n\n    # Find the index of the least significant set bit\n    index = n.bit_length() - 1\n\n    # Check if the least significant bit is already 1\n    if n & (1 << index):\n        return n\n\n    # Set the least significant bit to 1 and shift the remaining bits to the right\n    return n | (1 << index)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Find the rightmost set bit \n    set_bit = n & (-n)\n\n    # Clear the rightmost set bit \n    n &= ~set_bit\n\n    # Set the leftmost unset bit \n    n |= set_bit\n\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    while n & (1 << 31): # While n is negative \n        n = n >> 1 # Shift right by 1 \n    return n << 1 # Shift left by 1"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    This function sets the left most unset bit in the given number n.\n    '''\n    # Initialize the leftmost unset bit to -1\n    leftmost_unset_bit = -1\n\n    # Loop through each bit of the number\n    while n:\n        # If the current bit is 1, then the leftmost unset bit is the current bit\n        if n & 1:\n            leftmost_unset_bit = n\n            break\n\n        # Shift the number to the right by 1\n        n >>= 1\n\n    # Set the leftmost unset bit to 1 if it was not set previously\n    if leftmost_unset_bit == -1:\n        leftmost_unset_bit = 1\n\n    # Return the leftmost unset bit\n    return leftmost_unset_bit"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n): \n    \"\"\"\n    This function sets the left most unset bit in a given integer n. \n    \"\"\"\n    # Find the number of bits in the binary representation of n\n    num_bits = 0\n    while n > 0:\n        n = n >> 1\n        num_bits += 1\n    \n    # Set the leftmost unset bit to 1\n    n |= 1 << num_bits\n    \n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n): \n    \"\"\"\n    This function takes an integer as input and returns the integer with the leftmost unset bit set to 1.\n    \"\"\"\n\n    # Create a binary string representation of the input integer\n    binary_str = bin(n)[2:]\n\n    # Initialize a variable to keep track of the index of the first unset bit\n    unset_bit_index = -1\n\n    # Iterate over the binary string and find the index of the first unset bit\n    for i in range(len(binary_str)):\n        if binary_str[i] == '0':\n            unset_bit_index = i\n            break\n\n    # If no unset bit is found, return the input integer unchanged\n    if unset_bit_index == -1:\n        return n\n\n    # Convert the binary string to an integer and set the leftmost unset bit to 1\n    left_most_unset_bit = 1\n    for i in range(unset_bit_index, len(binary_str)):\n        left_most_unset_bit = left_most_unset_bit << 1\n\n    # Set the leftmost unset bit in the binary string and convert it back to an integer\n    binary_str = binary_str[:unset_bit_index] + str(left_most_unset_bit) + binary_str[unset_bit_index + 1:]\n    n = int(binary_str, 2)\n\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Write a python function to set the left most unset bit.\n    \"\"\"\n    # Initialize the leftmost unset bit to 0\n    left_most_unset_bit = 0\n\n    # Check each bit of the input number\n    for i in range(31, -1, -1):\n        # If the current bit is set to 1, increment the leftmost unset bit\n        if n & (1 << i):\n            left_most_unset_bit = i\n            break\n\n    # Return the leftmost unset bit\n    return left_most_unset_bit"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize the number of 1s in the binary representation of n\n    num_ones = bin(n).count('1')\n    \n    # Calculate the number of 0s we need to add to n\n    zeros_needed = 32 - num_ones\n    \n    # Set the leftmost 0s to 1\n    n = n | (0xffffffff << zeros_needed)\n    \n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    n = bin(n)[2:]  # convert to binary and remove prefix '0b'\n    for i in range(len(n)):\n        if n[i] == '1':\n            break\n    return int(n[:i+1], 2)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n\n    # Create a mask that starts at the leftmost unset bit and works its way to the right\n    mask = 1\n    while (n & mask) == 0:\n        mask <<= 1\n\n    # Set the leftmost unset bit in the original number\n    n |= mask\n\n    return n"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function finds the volume of a cone.\n\n    Parameters:\n        r (float): The radius of the cone\n        h (float): The height of the cone\n\n    Returns:\n        float: The volume of the cone\n    '''\n    return (1/3) * math.pi * r ** 2 * h"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function calculates the volume of a cone.\n    \n    Args:\n    r (float): radius of the base of the cone.\n    h (float): height of the cone.\n    \n    Returns:\n    float: the volume of the cone.\n    '''\n    volume = math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V = (1/3) * math.pi * r**2 * h\n    return V"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function takes two arguments: radius and height.\n    It calculates the volume of a cone using the formula: V = 1/3 * pi * r^2 * h.\n    '''\n    # Calculate the volume of a cone\n    V = (1/3) * math.pi * (r**2) * h\n    \n    # Return the volume of the cone\n    return V"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function takes in two parameters, radius r and height h, and calculates the volume of a cone.\n    '''\n    area = math.pi * r**2\n    volume = (1/3) * area * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3) * math.pi * r * r * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function calculates the volume of a cone.\n\n    Args:\n        r (float): The radius of the cone.\n        h (float): The height of the cone.\n\n    Returns:\n        float: The volume of the cone.\n    '''\n    volume = (1/3) * math.pi * r * r * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    area = math.pi * r**2\n    volume = area * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    return 1 << (n.bit_length() - 1)"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    This function takes an integer as input and returns the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    if n == 0:\n        return 0\n    highest_power_of_2 = 1\n    while highest_power_of_2 < n:\n        highest_power_of_2 *= 2\n    return highest_power_of_2 - 1"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n == 0:\n        return 1\n    else:\n        highest_power_of_2 = 1\n        while highest_power_of_2 <= n:\n            highest_power_of_2 *= 2\n        return highest_power_of_2 - 1"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    highest = 1\n    while highest <= n:\n        highest <<= 1\n    return highest"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    # set the highest power of 2 less than or equal to n to 0\n    highest_power = 0\n    # loop until n is less than or equal to the highest power of 2\n    while n > highest_power:\n        # double the highest power of 2\n        highest_power *= 2\n    # return the highest power of 2 less than or equal to n\n    return highest_power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n == 0:\n        return 0\n    i = 1\n    while i < n:\n        i <<= 1\n    return i - 1"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    while n > 0:\n        n = n // 2\n    return n"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 1\n    while power <= n:\n        power *= 2\n    \n    return power - 1"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    i = 0\n    while n > 1:\n        n >>= 1\n        i += 1\n    return i"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    i = 1\n    while i <= n:\n        if i == 2**i:\n            break\n        i += 1\n    return i-1"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n\n    # Initialize variables\n    a = 0\n    b = 2\n\n    # Loop until n is reached\n    for i in range(n):\n        # Calculate the next lucas number\n        c = a + b\n        # Update variables\n        a = b\n        b = c\n\n    # Return then'th lucas number\n    return b"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0: \n        return 2\n    elif n == 1: \n        return 1\n    else: \n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0: \n        return 2\n    elif n == 1: \n        return 1\n    else: \n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lucas(n):\n    '''\n    This function takes an integer n as input and returns then'th Lucas number.\n    The Lucas number is the number generated by a sequence of mathematical \n    integers. It is defined as follows:\n\n    L[0] = 2\n    L[n] = L[n-1] + L[n-2]\n\n    For example, L[0] = 2, L[1] = 1, L[2] = 1, L[3] = 2, and so on.\n\n    Then'th Lucas number is given by L[n] = L[n-1] + L[n-2] for n >= 2.\n    '''\n\n    # Base case: L[0] = 2\n    if n == 0:\n        return 2\n\n    # Base case: L[1] = 1\n    elif n == 1:\n        return 1\n\n    # Base case: L[2] = 1\n    elif n == 2:\n        return 1\n\n    # Calculate L[n]\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        for i in range(2, n + 1):\n            lucas_num = 4 * i - 2\n            print(lucas_num)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        lucas = find_lucas(n-1) + find_lucas(n-2)\n        return lucas"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The\", n, \"th Lucas number is:\", find_lucas(n))"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(elem) for elem in list_]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    result = []\n    for item in list_:\n        result.append(string.format(item))\n    return result"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    formatted_list = [string.format(item) for item in list_]\n    return formatted_list"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(x) for x in list_]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    \"\"\"\n    Write a function to apply a given format string to all of the elements in a list.\n    \"\"\"\n    result = []\n    for item in list_:\n        result.append(string.format(item))\n    return result"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # create an empty dictionary\n    d = {}\n    \n    # loop through each list and add key-value pairs to the dictionary\n    for i in range(len(l1)):\n        d[l1[i]] = l2[i]\n        d[l1[i]][l3[i]] = l3[i]\n    \n    return d"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def convert_list_dictionary(*lists):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d = {}\n    for i, lst in enumerate(lists):\n        for j, item in enumerate(lst):\n            d[i] = d.get(i, {})\n            d[i][j] = item\n    return d"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n\n    Args:\n        l1: A list of dictionaries.\n        l2: Another list of dictionaries.\n        l3: A third list of dictionaries.\n\n    Returns:\n        A dictionary with all the nested dictionaries from the input lists.\n    \"\"\"\n    # Combine the input lists into a single list of dictionaries\n    dictionaries = [dict1 for dict1 in l1]\n    dictionaries += [dict2 for dict2 in l2]\n    dictionaries += [dict3 for dict3 in l3]\n\n    # Convert the list of dictionaries into a nested dictionary\n    nested_dict = {}\n    for dict_ in dictionaries:\n        for key, value in dict_.items():\n            if key not in nested_dict:\n                nested_dict[key] = []\n            nested_dict[key].append(value)\n\n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n\n    result = {}\n\n    for i in range(len(l1)):\n        if i < len(l2):\n            result[l1[i]] = {'name': l2[i], 'age': l3[i]}\n        else:\n            result[l1[i]] = None\n\n    return result\n"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # create empty dictionary\n    dict_result = {}\n    # loop through each list\n    for i in range(len(l1)):\n        # check if list is empty\n        if not l1[i]:\n            continue\n        # loop through each element in list\n        for j in range(len(l1[i])):\n            # check if element is empty\n            if not l1[i][j]:\n                continue\n            # check if dictionary already exists for key\n            if l1[i][j] in dict_result:\n                # if so, add to existing list\n                dict_result[l1[i][j]].append(l2[i][j])\n            else:\n                # if not, create new list\n                dict_result[l1[i][j]] = [l2[i][j]]\n    # return final dictionary\n    return dict_result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d = {}\n    for i in range(len(l1)):\n        d[l1[i]] = {l2[i]: l3[i]}\n    return d"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def convert_list_dictionary(*lists):\n    \"\"\"\n    Convert more than one list to nested dictionary.\n    \n    Parameters\n    ----------\n    *lists: list\n        A variable number of lists to convert to nested dictionaries.\n        \n    Returns\n    -------\n    dict\n        A nested dictionary with the same structure as the input lists.\n    \"\"\"\n    # Initialize an empty dictionary\n    result = {}\n    # Loop over the input lists\n    for i, lst in enumerate(lists):\n        # Loop over the elements in the current list\n        for j, elem in enumerate(lst):\n            # If this is the first element in the current list,\n            # add it to the result dictionary as a key\n            if j == 0:\n                result[elem] = {}\n            # Otherwise, add the current element as a key to the\n            # result dictionary at the previous level\n            else:\n                result[elem][lists[i-1][j-1]] = lists[i-1][j]\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i, item in enumerate(l1):\n        temp = {}\n        for j, subitem in enumerate(item):\n            if len(l2[i]) > j:\n                temp[l2[i][j]] = l3[i][j]\n        result[l1[i]] = temp\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def convert_list_dictionary(*lists):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    if not lists:\n        return None\n    elif len(lists) == 1:\n        return {i: lists[0][i] for i in range(len(lists[0]))}\n    else:\n        return {i: convert_list_dictionary(*[lst[j] for j in range(len(lst))]) for i, lst in enumerate(lists)}"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def convert_list_dictionary(*lists):\n    \"\"\"\n    This function takes in any number of lists as input and returns a nested dictionary.\n    \"\"\"\n    result = {}\n\n    for i, lst in enumerate(lists):\n        if i == 0:\n            result[lst[0]] = {lst[1]: lst[2]}\n        elif i == 1:\n            result[lst[0]][lst[1]] = lst[2]\n        elif i == 2:\n            result[lst[0]][lst[1]][lst[2]] = lst[3]\n\n    return result"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    \n    if n == 1:\n        return 1\n    \n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 5\n    else:\n        return max(get_max_sum(n//2)+get_max_sum(n//3)+get_max_sum(n//4)+get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_max_sum(n):\n    if n <= 1:\n        return n\n    else:\n        return max(get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n    else:\n        return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n\n    if n <= 2:\n        return n\n\n    return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 1:\n        return n\n    else:\n        return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_max_sum(n):\n    \"\"\"\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    \"\"\"\n    # base case\n    if n == 1:\n        return 1\n    \n    # recursive case\n    return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 4\n    elif n == 4:\n        return 8\n    elif n == 5:\n        return 15\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_max_sum(n):\n    \"\"\"\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    \"\"\"\n    if n <= 1:\n        return n\n    \n    return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5) + n, get_max_sum(n-1))\n\nn = int(input(\"Enter a number: \"))\nprint(\"The maximum sum possible is:\", get_max_sum(n))"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = item\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for i in range(len(input_list)):\n        if len(input_list[i]) > max_length:\n            max_length = len(input_list[i])\n    return input_list[input_list.index(max(input_list, key=len))]"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    \"\"\"\n    Write a function to find the list with maximum length.\n    \"\"\"\n    max_len = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_len:\n            max_len = len(item)\n            max_list = [item]\n        elif len(item) == max_len:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    max_list = None\n    \n    for item in input_list:\n        if len(item) > max_len:\n            max_len = len(item)\n            max_list = item\n            \n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    \"\"\"\n    Write a function to find the list with maximum length.\n    \"\"\"\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for i in range(len(input_list)):\n        if len(input_list[i]) > max_length:\n            max_length = len(input_list[i])\n            max_list = [input_list[i]]\n        elif len(input_list[i]) == max_length:\n            max_list.append(input_list[i])\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n\n    for num in input_list:\n        if len(str(num)) > max_length:\n            max_length = len(str(num))\n            max_list = [num]\n        elif len(str(num)) == max_length:\n            max_list.append(num)\n\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    This function takes a list as an argument and returns the list with the maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    \n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = item\n            \n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    \n    # Loop through each element in the input list\n    for elem in input_list:\n        # Check if the current element has a longer length than the current maximum\n        if len(elem) > max_length:\n            # If it does, update the maximum length and the corresponding list\n            max_length = len(elem)\n            max_list = [elem]\n        elif len(elem) == max_length:\n            # If it does, add the element to the current list if it's longer than the current maximum\n            max_list.append(elem)\n    \n    # Return the maximum list\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n\n    return max_list"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup) == len(set(test_tup)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # Use set() to remove duplicates from the tuple and check if it's empty\n    return not bool(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # convert tuple to list for checking duplicates\n    test_list = list(test_tup)\n\n    # check if list has any duplicates\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    seen = set()\n    for element in test_tup:\n        if element in seen:\n            return False\n        seen.add(element)\n    return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # convert the tuple to a set to remove duplicates\n    set_test_tup = set(test_tup)\n    # check if the length of the set is equal to the length of the original tuple\n    if len(set_test_tup) == len(test_tup):\n        # if it is, then there are no duplicates\n        return True\n    else:\n        # if not, then there are duplicates\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    \"\"\"\n    Write a function to check if given tuple contains no duplicates.\n    \"\"\"\n    seen = set()\n    for item in test_tup:\n        if item in seen:\n            return False\n        seen.add(item)\n    return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # convert the tuple to a set to remove duplicates\n    unique_set = set(test_tup)\n    # check if the length of the set is equal to the length of the original tuple\n    return len(unique_set) == len(test_tup)"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(set(test_tup)) == len(test_tup)"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    This function finds the first non-repeated character in a given string.\n\n    Args:\n        str1 (str): The string to search for the first non-repeated character.\n\n    Returns:\n        str: The first non-repeated character in the string. If no such character is found, return None.\n    \"\"\"\n\n    # Create a dictionary to store the count of each character in the string\n    char_count = {}\n\n    # Loop through the string and count the occurrences of each character\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    # Loop through the dictionary and find the first non-repeated character\n    for char in char_count:\n        if char_count[char] == 1:\n            return char\n\n    # If no non-repeated character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in str1:\n        if char_count[char] == 1:\n            return char"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    for char in char_count:\n        if char_count[char] == 1:\n            return char"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    first_non_repeating_char = None\n    for char in char_count:\n        if char_count[char] == 1:\n            first_non_repeating_char = char\n            break\n\n    return first_non_repeating_char"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Write a python function to find the first non-repeated character in a given string.\n    \"\"\"\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for i, char in enumerate(str1):\n        if char_count[char] == 1:\n            return char\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Write a python function to find the first non-repeated character in a given string.\n    \"\"\"\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    # Create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str1:\n        freq[char] = freq.get(char, 0) + 1\n    \n    # Iterate over the characters in the string, starting from the first one\n    for i, char in enumerate(str1):\n        # If the character has a frequency of 1, it's the first non-repeating character\n        if freq[char] == 1:\n            return char\n    \n    # If no character has a frequency of 1, the string contains no non-repeating characters\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # Initialize a dictionary to store the counts of each character in the string\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    # Find the first character that appears only once in the string\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n\n    # If no character appears only once, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char, count in char_count.items():\n        if count == 1:\n            return char\n    \n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    for char in freq:\n        if freq[char] == 1:\n            return char\n    \n    return None"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef check_char(string):\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    match = re.search(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    match = re.search(regex, string)\n    if match:\n        return match.group(0)\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n\n    # check if the string matches the regex pattern\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef check_char(string):\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    if re.search(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef check_char(string):\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    match = re.search(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    sorted_list = sorted([a, b, c])\n    middle = len(sorted_list) // 2\n    if len(sorted_list) % 2 == 0:\n        return (sorted_list[middle-1] + sorted_list[middle]) / 2\n    else:\n        return sorted_list[middle]"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # Calculate the middle number\n    middle_number = (sorted_numbers[0] + sorted_numbers[1]) / 2\n\n    return middle_number"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_numbers(a, b, c):\n    '''\n    This function takes three numbers as input and returns their median.\n    '''\n\n    # Sort the three numbers in ascending order\n    numbers = sorted([a, b, c])\n\n    # Find the median\n    mid = len(numbers) // 2\n    if len(numbers) % 2 == 0:\n        median = (numbers[mid - 1] + numbers[mid]) / 2\n    else:\n        median = numbers[mid]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # sort the numbers in ascending order\n    nums = sorted([a, b, c])\n\n    # calculate the median\n    if len(nums) % 2 == 0:\n        # if the length of the list is even, take the average of the two middle numbers\n        median = (nums[len(nums)//2-1] + nums[len(nums)//2]) / 2\n    else:\n        # if the length of the list is odd, take the middle number\n        median = nums[len(nums)//2]\n\n    # return the median\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_numbers(a, b, c):\n    # Find the minimum and maximum values of the three numbers\n    min_val = min(a, b, c)\n    max_val = max(a, b, c)\n\n    # Find the difference between the maximum and minimum values\n    range_val = max_val - min_val\n\n    # Find the difference between the third number and the minimum value\n    diff_val = c - min_val\n\n    # Check if the range is even or odd\n    if range_val % 2 == 0:\n        # Find the average of the two numbers that add up to the third number\n        average = (min_val + c) / 2\n\n        # Find the median by sorting the list of numbers and then finding the middle element\n        median = sorted([min_val, average, max_val])[(range_val // 2)]\n\n    else:\n        # Find the average of the two numbers that add up to the third number\n        average = (min_val + c) / 2\n\n        # Find the median by sorting the list of numbers and then finding the middle element\n        median = sorted([min_val, average, max_val])[(range_val // 2) + 1]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the given numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # Calculate the median\n    if len(sorted_numbers) % 2 == 0:\n        median = (sorted_numbers[len(sorted_numbers) // 2] + sorted_numbers[len(sorted_numbers) // 2 - 1]) / 2\n    else:\n        median = sorted_numbers[len(sorted_numbers) // 2]\n\n    return median\n"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # Calculate the median\n    if len(sorted_numbers) % 2 == 0:\n        median = (sorted_numbers[len(sorted_numbers) // 2 - 1] + sorted_numbers[len(sorted_numbers) // 2]) / 2\n    else:\n        median = sorted_numbers[len(sorted_numbers) // 2]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    This function takes three numbers as input and returns the median of those numbers.\n    \"\"\"\n    # Sort the three numbers in ascending order\n    a = sorted([a, b, c])\n\n    # Calculate the median based on the length of the list\n    if len(a) % 2 == 0:  # if the list has an even length\n        return (a[len(a)//2 - 1] + a[len(a)//2]) / 2\n    else:  # if the list has an odd length\n        return a[len(a)//2]"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    # Sort the three numbers in ascending order\n    sorted_list = sorted([a, b, c])\n    \n    # Determine the length of the list and get the middle index\n    middle_index = len(sorted_list) // 2\n    \n    # Calculate the median based on the length of the list\n    if len(sorted_list) % 2 == 0:\n        median = (sorted_list[middle_index - 1] + sorted_list[middle_index]) / 2\n    else:\n        median = sorted_list[middle_index]\n    \n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_numbers(a, b, c):\n    '''\n    This function takes three numbers as input and returns their median.\n    '''\n    # Sort the three numbers in ascending order\n    sorted_nums = sorted([a, b, c])\n\n    # Calculate the median\n    n = len(sorted_nums)\n    if n % 2 == 0:\n        median = (sorted_nums[n//2-1] + sorted_nums[n//2]) / 2\n    else:\n        median = sorted_nums[n//2]\n\n    return median"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # initialize a variable to store the sum of digits\n    total_sum = 0\n    \n    # loop over all numbers in the list\n    for num in nums:\n        # convert the number to a string and loop over its digits\n        for digit in str(num):\n            # add the integer value of the digit to the total sum\n            total_sum += int(digit)\n    \n    # return the total sum of digits\n    return total_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total_sum = 0\n    for num in nums:\n        num_digits = sum(int(digit) for digit in str(num))\n        total_sum += num_digits\n    return total_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum([int(str(num)) for num in nums])"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits = 0\n    for num in nums:\n        num_digits = len(str(num))\n        sum_of_digits += num_digits * num\n    return sum_of_digits"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum([sum(int(digit) for digit in str(num)) for num in nums])"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # initialize an empty list to store the sum of digits\n    digit_sums = []\n\n    # loop through each number in the list\n    for num in nums:\n        # convert the number to a string and split it into a list of digits\n        digits = [int(d) for d in str(num)]\n        # sum the digits in the list and append the result to the list of digit sums\n        digit_sums.append(sum(digits))\n\n    # return the list of digit sums\n    return digit_sums"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # create an empty list to store the sum of digits\n    digit_sum = []\n    # loop through each number in the list\n    for num in nums:\n        # initialize a variable to store the sum of the digits of the number\n        digit_sum_num = 0\n        # loop through each digit of the number\n        for digit in str(num):\n            # add the digit to the variable\n            digit_sum_num += int(digit)\n        # add the sum of digits of the number to the overall sum\n        digit_sum.append(digit_sum_num)\n    # return the sum of digits of all the numbers in the list\n    return sum(digit_sum)"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # Initialize the sum variable\n    sum = 0\n    # Loop through each number in the list\n    for num in nums:\n        # Convert the number to a string and convert each character to an integer\n        num_str = str(num)\n        num_list = [int(i) for i in num_str]\n        # Loop through each integer in the list\n        for digit in num_list:\n            # Add the integer to the sum variable\n            sum += digit\n    # Return the sum of digits\n    return sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = 0\n    for num in nums:\n        digits = [int(digit) for digit in str(num)]\n        result += sum(digits)\n    return result"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total += sum(int(digit) for digit in str(num))\n    return total"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(int(i) ^ int(j) for i, j in zip(test_tup1, test_tup2))"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return (test_tup1[0] ^ test_tup2[0], test_tup1[1] ^ test_tup2[1])"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must have the same length.\")\n\n    result = tuple(int(x) ^ int(y) for x, y in zip(test_tup1, test_tup2))\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = (test_tup1[0] ^ test_tup2[0], test_tup1[1] ^ test_tup2[1])\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] ^ test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] ^ test_tup2[i],)\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = 0\n    for i in range(len(test_tup1)):\n        xor_result |= test_tup1[i] ^ test_tup2[i]\n    return xor_result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_sum = 0\n    for i in range(len(test_tup1)):\n        xor_sum ^= test_tup1[i] ^ test_tup2[i]\n    return xor_sum"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Initialize the result tuple with the same length as the two input tuples\n    result_tup = tuple(x ^ y for x, y in zip(test_tup1, test_tup2))\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] ^ test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_freq = {}\n    for item in test_list:\n        if item in unique_freq:\n            unique_freq[item] += 1\n        else:\n            unique_freq[item] = 1\n    return unique_freq\n"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    unique_tuples = set()\n    for item in test_list:\n        unique_tuples.add(tuple(item))\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set()\n    for item in test_list:\n        if tuple(item) not in unique_tuples:\n            unique_tuples.add(tuple(item))\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    This function takes a list as input and returns the number of unique tuples in the list.\n    \"\"\"\n    # Convert the list to a set to remove duplicates\n    unique_set = set(test_list)\n\n    # Return the length of the set, which represents the number of unique tuples in the list\n    return len(unique_set)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for item in test_list:\n        if item not in freq_dict:\n            freq_dict[item] = 1\n        else:\n            freq_dict[item] += 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for item in test_list:\n        if tuple(item) in freq:\n            freq[tuple(item)] += 1\n        else:\n            freq[tuple(item)] = 1\n    return freq"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for item in test_list:\n        if tuple(item) in freq:\n            freq[tuple(item)] += 1\n        else:\n            freq[tuple(item)] = 1\n    return freq"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set()\n    for item in test_list:\n        unique_tuples.add(tuple(item))\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set()\n    for item in test_list:\n        unique_tuples.add(item)\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n\n    freq_dict = {}\n    for item in test_list:\n        if tuple(sorted(item)) not in freq_dict:\n            freq_dict[tuple(sorted(item))] = 1\n        else:\n            freq_dict[tuple(sorted(item))] += 1\n\n    return len(freq_dict)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup2[i])):\n            result.append(test_tup1[i][j] + test_tup2[i][j])\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # initializing an empty list to store the result\n    result = []\n\n    # iterating over each tuple element and adding them to the result list\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] + test_tup2[i])\n\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Initialize result tuple with dimensions of the first input tuple\n    result = tuple(sum([test_tup1[i], test_tup2[i]]) for i in range(len(test_tup1)))\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples should have the same number of elements.\")\n        return None\n\n    result_tup = []\n\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] + test_tup2[i])\n\n    return tuple(result_tup)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    n1, n2 = test_tup1\n    m1, m2 = test_tup2\n\n    # Check if both tuples have the same length\n    if len(n1) == len(n2) == len(m1) == len(m2):\n\n        # Initialize a new tuple with same length as the two input tuples\n        new_tup = []\n\n        # Perform index wise addition of tuple elements in the two input tuples\n        for i in range(len(n1)):\n            new_tup.append(n1[i] + m1[i])\n\n        return new_tup\n\n    else:\n        print(\"Both input tuples should have the same length.\")\n        return None"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples must have same length\")\n        return\n    \n    result = []\n    for i in range(len(test_tup1)):\n        if type(test_tup1[i]) == tuple and type(test_tup2[i]) == tuple:\n            result.append(add_nested_tuples(test_tup1[i], test_tup2[i]))\n        else:\n            result.append(test_tup1[i] + test_tup2[i])\n    \n    return tuple(result)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        new_elem = test_tup1[i] + test_tup2[i]\n        result.append(new_elem)\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Length of the two input tuples should be equal.\")\n        return\n    \n    result_list = []\n    for i in range(len(test_tup1)):\n        if type(test_tup1[i]) == tuple and type(test_tup2[i]) == tuple:\n            result_list.append(add_nested_tuples(test_tup1[i], test_tup2[i]))\n        else:\n            result_list.append(test_tup1[i] + test_tup2[i])\n    \n    return result_list"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples must have equal length.\")\n        return\n    \n    for i in range(len(test_tup1)):\n        if not isinstance(test_tup1[i], tuple) or not isinstance(test_tup2[i], tuple):\n            print(\"Both elements of nested tuples must be tuples.\")\n            return\n        if len(test_tup1[i])!= len(test_tup2[i]):\n            print(\"Both elements of nested tuples must have equal length.\")\n            return\n        \n        for j in range(len(test_tup1[i])):\n            test_tup1[i][j] += test_tup2[i][j]\n    \n    return test_tup1"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Check if both tuples have the same number of elements\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same number of elements.\")\n\n    # Initialize an empty list to store the resultant tuple\n    result_tup = ()\n    # Iterate through each element in the two tuples\n    for i in range(len(test_tup1)):\n        # Add the corresponding elements in the two tuples and append the result to the result list\n        result_tup += (test_tup1[i] + test_tup2[i],)\n    # Return the resultant tuple\n    return result_tup\n"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def minimum(a, b):\n    '''\n    This function takes two arguments and returns the minimum of those two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def minimum(a, b):\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def minimum(a,b):\n    if a<b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        print(f\"{tuple1} exists in {tuplex}.\")\n    else:\n        print(f\"{tuple1} does not exist in {tuplex}.\")"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex, tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex: \n        return True \n    else: \n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex: \n        return True\n    else: \n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    if tuplex in tuple1:\n        print(\"Element exists in tuple\")\n    else:\n        print(\"Element does not exist in tuple\")"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    This function takes two arguments, tuplex and tuple1.\n    It checks whether an element exists within a tuple.\n\n    Parameters:\n    - tuplex: The tuple that you want to check for an element within.\n    - tuple1: The tuple that you want to check for an element in tuplex.\n\n    Returns:\n    - True or False depending on whether an element exists within the tuple.\n    \"\"\"\n    for item in tuple1:\n        if item in tuplex:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex, tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex: \n        print(f\"{tuple1} exists in {tuplex}\") \n    else: \n        print(f\"{tuple1} does not exist in {tuplex}\") "
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    for item in tuple1:\n        if item in tuplex:\n            return True\n    return False"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Parity(x): \n    '''\n    This function takes in a number x and returns True if the parity of x is odd and False otherwise.\n    '''\n\n    # if x is even, return False\n    if x % 2 == 0: \n        return False\n    \n    # if x is odd, return True\n    else: \n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Parity(x):\n    '''\n    This function takes a positive integer as input and returns True if the parity of the number is odd and False otherwise.\n    '''\n    if x % 2 == 0: # if x is even\n        return False\n    else: # if x is odd\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2!= 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd or even.\n    '''\n    if x%2 == 0:\n        print(x, \"is even.\")\n    else:\n        print(x, \"is odd.\")"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Parity(x):\n    \"\"\"\n    Write a python function to find whether the parity of a given number is odd or even.\n    \"\"\"\n    parity = 0\n    while x > 0:\n        parity += x % 2\n        x //= 2\n    if parity % 2 == 0:\n        return 'Even'\n    else:\n        return 'Odd'"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd or even.\n    '''\n    parity = x % 2 # check whether x is even or odd using the modulus operator\n    \n    if parity == 0: # if x is even\n        return \"Even\"\n    else: # if x is odd\n        return \"Odd\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Parity(x): \n    '''\n    This function takes in a positive integer x and returns True if the parity of x is odd and False if it is even.\n    '''\n\n    # Initialize a variable 'parity' to keep track of the parity of x\n    parity = 0\n\n    # Loop through each digit of x\n    while x > 0: \n        # Add the remainder of x divided by 2 to 'parity'\n        parity += x % 2\n        # Remove the last digit of x\n        x //= 10\n\n    # Check if the parity is odd or even\n    if parity % 2 == 0: \n        # If the parity is even, return False\n        return False \n    else: \n        # If the parity is odd, return True\n        return True"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    digits = list(str(n))\n    max_digit = max(digits)\n\n    # swap adjacent digits with the maximum digit\n    for i in range(len(digits) - 1):\n        if digits[i] == max_digit:\n            digits[i], digits[i+1] = digits[i+1], digits[i]\n            break\n\n    # find the next bigger number by reversing the digits\n    next_bigger = int(''.join(reversed(digits)))\n\n    return next_bigger"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    def to_digits(n):\n        return [int(d) for d in str(n)]\n    \n    def rearrange(digits):\n        # Sort the digits in descending order\n        digits.sort(reverse=True)\n        \n        # Rebuild the number from the sorted digits\n        return int(''.join(map(str, digits)))\n    \n    # Convert the input number to its digits\n    digits = to_digits(n)\n    \n    # Rearrange the digits in descending order\n    new_digits = rearrange(digits)\n    \n    # Build the next bigger number from the rearranged digits\n    next_bigger = rearrange(new_digits)\n    \n    return next_bigger"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    # convert the number to a list of digits\n    digits = list(str(n))\n    # sort the digits in descending order\n    digits.sort(reverse=True)\n    # concatenate the sorted digits to form a new number\n    next_bigger = int(''.join(digits))\n    # return the next bigger number\n    return next_bigger"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # convert the input number to a list of digits\n    digits = list(str(n))\n    # reverse the list of digits\n    digits.reverse()\n    # initialize the next bigger number\n    next_bigger = 0\n    # initialize a flag to indicate if there is a carry\n    carry = 0\n    # loop through each digit in the reversed list\n    for i in range(len(digits)):\n        # add the current digit and carry to the next bigger number\n        next_bigger += int(digits[i]) + carry\n        # if the result is greater than 9 or the result is greater than the current digit, add a carry to the next bigger number\n        if next_bigger > 9 or (next_bigger == 9 and int(digits[i]) > 0):\n            carry = 1\n        else:\n            carry = 0\n        # set the current digit to the next digit\n        digits[i] = str(next_bigger % 10)\n        # divide the next bigger number by 10 and remove the last digit\n        next_bigger //= 10\n    # if there is a carry, append a 1 to the next bigger number\n    if carry == 1:\n        next_bigger += 1\n        digits.append('1')\n    # convert the digits list to a string and return it\n    return int(''.join(digits))"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    # Initialize a variable to hold the next bigger number\n    next_bigger = 0\n\n    # Loop through each digit in the number and rearrange them\n    while n > 0:\n        # Add the current digit to the next bigger number\n        next_bigger += n % 10\n\n        # Divide the number by 10 and remove the last digit\n        n //= 10\n\n    # Return the next bigger number\n    return next_bigger"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    digits = list(str(n))\n    while True:\n        for i in range(len(digits)):\n            if digits[i] < digits[i+1]:\n                digits[i], digits[i+1] = digits[i+1], digits[i]\n                digits[i+2:] = digits[i+2:][::-1]\n                break\n        else:\n            return int(''.join(digits))"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    # convert number to string\n    num = str(n)\n    # initialize variables\n    last_digit = int(num[-1])\n    num_digits = len(num)\n    new_num = ''\n    # iterate over digits\n    for i in range(num_digits - 1, -1, -1):\n        # if current digit is greater than last digit\n        if int(num[i]) > last_digit:\n            # add digits before current digit to new number\n            new_num += num[:i]\n            # add last digit to new number\n            new_num += last_digit\n            # add digits after current digit to new number\n            new_num += num[i+1:]\n            # break the loop as we have found a new bigger number\n            break\n        # if current digit is less than or equal to last digit\n        else:\n            # add current digit to new number\n            new_num += num[i]\n    # convert new number to integer\n    return int(new_num)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    # Initialize the result variable\n    result = 0\n    \n    # Iterate over each digit of the number\n    for digit in str(n):\n        # Calculate the value of the digit (from 1 to 9)\n        digit_value = ord('0') + int(digit) - 1\n        \n        # Calculate the maximum value of the digit that comes after the current digit\n        max_value = digit_value + 9 - (digit_value % 9)\n        \n        # Rearrange the digits of the current digit to create the next bigger digit\n        new_digit = str(max_value)[-1]\n        \n        # Combine the digits into the new number\n        result = result * 10 + int(new_digit)\n        \n    return result"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    while n >= 10:\n        n //= 10\n    return n"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    digits = [int(digit) for digit in str(n)]\n    digits.sort(reverse=True)\n    new_num = 0\n    for digit in digits:\n        new_num = new_num * 10 + digit\n    return new_num"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # create a min heap of size k to store the smallest pairs\n    min_heap = []\n    \n    # iterate through both arrays\n    for num1 in nums1:\n        for num2 in nums2:\n            # if the size of the min heap is less than k, add the pair to the heap\n            if len(min_heap) < k:\n                heapq.heappush(min_heap, (num1 + num2, (num1, num2)))\n            # if the size of the min heap is greater than or equal to k, compare the first element of the smallest pair in the heap with the current pair\n            else:\n                if heapq.heappop(min_heap)[0] > (num1 + num2):\n                    heapq.heappush(min_heap, (num1 + num2, (num1, num2)))\n                \n    # create a list to store the k smallest pairs\n    k_smallest_pairs = []\n    \n    # iterate through the min heap and add the pairs to the list\n    while min_heap:\n        pair_sum, (num1, num2) = heapq.heappop(min_heap)\n        k_smallest_pairs.append((num1, num2, pair_sum))\n        \n    return k_smallest_pairs"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], (i,j)))\n            elif (nums1[i] + nums2[j]) > heap[0][0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, (nums1[i] + nums2[j], (i,j)))\n\n    result = []\n    while heap:\n        result.append(heapq.heappop(heap))\n\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # First, sort the input arrays in ascending order\n    nums1.sort()\n    nums2.sort()\n\n    # Initialize two heaps, one for each array\n    min_heap1 = []\n    min_heap2 = []\n\n    # Initialize a variable to keep track of the number of pairs found\n    count = 0\n\n    # Iterate through the first array\n    for num1 in nums1:\n        # If the heap is not empty and the smallest element from the first heap is greater than the current element,\n        # then the smallest element in the second heap can be added to the count and the current element removed from the first heap\n        if min_heap1 and num1 > min_heap1[0]:\n            count += 1\n            heapq.heappop(min_heap1)\n\n        # If the number of pairs found so far is less than k, add the current element to the heap\n        if count < k:\n            heapq.heappush(min_heap1, num1)\n\n        # Iterate through the second array\n        for num2 in nums2:\n            # If the heap is not empty and the smallest element from the second heap is greater than the current element,\n            # then the current element from the first heap and the smallest element in the second heap can be added to the count\n            if min_heap2 and num2 > min_heap2[0]:\n                count += 1\n                min_heap1.append(heapq.heappop(min_heap1))\n                heapq.heappop(min_heap2)\n\n            # If the number of pairs found so far is less than k, add the current element to the heap\n            if count < k:\n                heapq.heappush(min_heap2, num2)\n\n    # If there are any elements left in the second heap, they are the smallest pairs\n    return min_heap1"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n    # Use a min-heap to keep track of the smallest k elements seen so far\n    min_heap = []\n    \n    # Iterate through the arrays and add each element to the min-heap\n    for num1 in nums1:\n        for num2 in nums2:\n            # If the current element is smaller than the smallest element in the min-heap, add it to the min-heap\n            if len(min_heap) < k:\n                heapq.heappush(min_heap, (num1 + num2, (num1, num2)))\n            # If the current element is larger than the smallest element in the min-heap, compare it with the smallest element and remove the smallest element from the min-heap if necessary\n            else:\n                if num1 + num2 < heapq.heappop(min_heap)[0]:\n                    heapq.heappush(min_heap, (num1 + num2, (num1, num2)))\n                    \n    # Return the smallest k elements in the min-heap\n    return [x[1] for x in min_heap]"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n\n    # Convert the input arrays to sets to remove duplicates\n    nums1_set = set(nums1)\n    nums2_set = set(nums2)\n\n    # Initialize the min_heap with the smallest element of each set as its key and the index of that element as its value\n    min_heap = []\n    for i in range(len(nums1)):\n        heapq.heappush(min_heap, (-nums1[i], i))\n    for i in range(len(nums2)):\n        heapq.heappush(min_heap, (-nums2[i], i + len(nums1)))\n\n    # Initialize the result list to store the k smallest pairs\n    result = []\n\n    # Find the k smallest pairs from the min_heap\n    for i in range(k):\n        pair = heapq.heappop(min_heap)\n        result.append((nums1_set[pair[1]], nums2_set[pair[0]]))\n\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pairs = []\n    min_heap = []\n    n1, n2 = len(nums1), len(nums2)\n    for i in range(n1):\n        for j in range(n2):\n            if len(min_heap) < k:\n                heapq.heappush(min_heap, (nums1[i] + nums2[j], (i, j)))\n            else:\n                if nums1[i] + nums2[j] < min_heap[0][0]:\n                    heapq.heappop(min_heap[0])\n                    heapq.heappush(min_heap, (nums1[i] + nums2[j], (i, j)))\n    while min_heap:\n        pairs.append(min_heap[0][1])\n        heapq.heappop(min_heap)\n    return pairs"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n    # Convert the given arrays to sets for faster lookups\n    num_set1 = set(nums1)\n    num_set2 = set(nums2)\n    # Create a priority queue to store the k smallest pairs\n    min_heap = []\n    # Initialize the min_heap with all possible pairs\n    for num1 in num_set1:\n        for num2 in num_set2:\n            if num1 + num2 <= k:\n                heapq.heappush(min_heap, (num1 + num2, (nums1.index(num1), nums2.index(num2))))\n    # Return the k smallest pairs\n    result = []\n    while min_heap:\n        _, (index1, index2) = heapq.heappop(min_heap)\n        result.append((nums1[index1], nums2[index2]))\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    min_heap = []\n    result = []\n    \n    for num1 in nums1:\n        heapq.heappush(min_heap, (-num1, (0, num1)))\n        \n    for num2 in nums2:\n        while len(min_heap) > 0 and min_heap[0][1][1] < num2:\n            heapq.heappop(min_heap)\n            \n        if len(min_heap) > 0 and min_heap[0][0] <= k:\n            result.append(min_heap[0][1][1])\n            k -= 1\n            heapq.heappush(min_heap, (-min_heap[0][0], (-1, num2)))\n        elif len(min_heap) == 0:\n            heapq.heappush(min_heap, (-num2, (-1, num2)))\n            \n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # create a dictionary to store the indices of the smallest element for each array\n    idx1 = {}\n    idx2 = {}\n    # use a min heap to store the k smallest elements\n    min_heap = []\n\n    # loop through the first array and find the indices of the smallest element for each element\n    for i in range(len(nums1)):\n        if nums1[i] not in idx1:\n            idx1[nums1[i]] = i\n        heapq.heappush(min_heap, nums1[i])\n        if len(min_heap) > k:\n            heapq.heappop(min_heap)\n\n    # loop through the second array and find the indices of the smallest element for each element\n    for j in range(len(nums2)):\n        if nums2[j] not in idx2:\n            idx2[nums2[j]] = j\n        heapq.heappush(min_heap, nums2[j])\n        if len(min_heap) > k:\n            heapq.heappop(min_heap)\n\n    # use the indices to construct the pairs\n    pairs = []\n    while min_heap:\n        pair = [heapq.heappop(min_heap), heapq.heappop(min_heap)]\n        pairs.append(pair)\n\n    return pairs"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n\n    # Initialize the min heap to keep track of the pairs\n    heap = []\n\n    # Iterate through the arrays and add the smallest pairs to the heap\n    for num1 in nums1:\n        for num2 in nums2:\n            # Add the pair to the heap\n            heapq.heappush(heap, (min(num1, num2), (num1, num2)))\n\n            # If the heap size exceeds k, remove the smallest pair\n            if len(heap) > k:\n                heapq.heappop(heap)\n\n    # Extract the k pairs from the heap\n    result = []\n    while heap:\n        pair = heapq.heappop(heap)\n        result.append(pair[1])\n\n    return result"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Initialize variables to keep track of the minimum product and the current minimum product\n    min_product = float('inf')\n    current_min_product = float('inf')\n\n    # Iterate through the list of tuples\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            # Calculate the current product\n            current_product = list1[i][0] * list1[j][1]\n\n            # Update the minimum product if the current product is smaller than the current minimum product\n            if current_product < current_min_product:\n                current_min_product = current_product\n                min_product = current_min_product\n\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    \"\"\"\n    This function takes a list of tuples as input and returns the minimum product from the pairs of tuples in the list.\n    \"\"\"\n    # Sort the list of tuples in ascending order based on the second element of the tuple\n    sorted_list = sorted(list1, key=lambda x: x[1])\n    min_product = float('inf')\n    # Calculate the minimum product for each pair of tuples in the sorted list\n    for i in range(len(sorted_list) - 1):\n        # Calculate the product of the two tuples\n        product = sorted_list[i][0] * sorted_list[i+1][0]\n        # Update the minimum product if necessary\n        if product < min_product:\n            min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Initialize variables\n    min_product = float('inf')\n    product = 1\n    \n    # Iterate through the list of tuples\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # Calculate the product of the tuples\n            product = list1[i][0]*list1[j][1]\n            \n            # Update the minimum product if necessary\n            if product < min_product:\n                min_product = product\n    \n    # Return the minimum product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    \n    # Sort the list of tuples in ascending order of the first element of each tuple\n    list1 = sorted(list1, key=lambda x: x[0])\n    \n    # Initialize the minimum product and the sum of products\n    min_product = float('inf')\n    product_sum = 0\n    \n    # Loop through the list of tuples\n    for i in range(len(list1)):\n        # Calculate the product of the current tuple and the next tuple in the list\n        product = list1[i][0] * list1[i+1][0]\n        # Add the product to the sum of products\n        product_sum += product\n        # Update the minimum product if necessary\n        if product < min_product:\n            min_product = product\n    \n    # Return the minimum product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # sort the list of tuples\n    list1.sort()\n    # initialize variables to store the minimum and maximum product\n    min_product = float('inf')\n    max_product = float('-inf')\n    # loop through the list of tuples\n    for i in range(len(list1)):\n        # calculate the product of the current tuple and the difference between the maximum and minimum product\n        product = list1[i][0] * (max_product - list1[i][1])\n        # update the minimum product if necessary\n        if product < min_product:\n            min_product = product\n        # update the maximum product if necessary\n        if product > max_product:\n            max_product = product\n    # return the minimum product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_product_tuple(lst):\n    # Initialize the minimum product to infinity\n    min_product = float('inf')\n    # Initialize the current product to 1\n    current_product = 1\n\n    for pair in lst:\n        # Calculate the product of the two tuples and store it in a variable\n        product = pair[0] * pair[1]\n        # If the current product is smaller, update the minimum product and the current product\n        if product < current_product:\n            min_product = current_product\n            current_product = product\n\n    # Return the minimum product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    \"\"\"\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    \"\"\"\n    # initialize variables\n    min_product = float('inf')\n    product1 = 1\n    product2 = 1\n    # loop through the list\n    for i in range(len(list1)):\n        # calculate the product of two tuples in the list\n        product1 = list1[i][0] * list1[i][1]\n        product2 = list1[i+1][0] * list1[i+1][1]\n        # update the minimum product if the current product is smaller\n        if product1 < min_product:\n            min_product = product1\n        if product2 < min_product:\n            min_product = product2\n    # return the minimum product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    list2 = []\n    for tup in list1:\n        list2.append(tup[0]*tup[1])\n    min_product = min(list2)\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Use a dictionary to store the products of each pair of tuples in the list\n    product_dict = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # Compute the product of the two tuples and store it in the dictionary\n            product = 1\n            for k in range(len(list1[i])):\n                product *= list1[i][k]\n            product *= 1\n            for l in range(len(list1[j])):\n                product *= list1[j][l]\n            product_dict[(i,j)] = product\n    \n    # Use the dictionary to find the minimum product of the tuples\n    min_product = 10**10\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = product_dict[(i,j)]\n            if product < min_product:\n                min_product = product\n    \n    # Return the minimum product\n    return min_product"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # Initialize min value with first element of the list\n    min_val = listval[0]\n    # Iterate over the rest of the elements of the list\n    for i in range(1, len(listval)):\n        # Check if current element is smaller than min_val\n        if listval[i] < min_val:\n            # Update min_val\n            min_val = listval[i]\n    # Return the minimum value\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = float('inf')\n    for num in listval:\n        if num < min_val:\n            min_val = num\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # Initialize minimum value to the first element of the list\n    min_val = listval[0]\n    \n    # Iterate through the list and find the minimum value\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    \n    # Return the minimum value\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # initialize the minimum value to the first value in the list\n    min_val = listval[0]\n    # iterate over the rest of the list and update the minimum value if a smaller one is found\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    # return the minimum value\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # Check if the list is empty\n    if not listval:\n        return None\n\n    # Initialize the minimum value to the first element\n    min_value = listval[0]\n\n    # Loop through the list and find the minimum value\n    for value in listval:\n        if value < min_value:\n            min_value = value\n\n    return min_value"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # initialize minimum value\n    min_val = listval[0]\n    # iterate over list and update minimum value if a smaller value is found\n    for val in listval[1:]:\n        if val < min_val:\n            min_val = val\n    # return minimum value\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = float('inf')\n    for val in listval:\n        if val < min_val:\n            min_val = val\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    minval = listval[0]\n    for val in listval[1:]:\n        if val < minval:\n            minval = val\n    return minval"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n\n    min_val = listval[0]\n    for val in listval:\n        if val < min_val:\n            min_val = val\n\n    return min_val"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub('_(.?)', lambda m: m.group(1).upper(), word)"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the string into words using the space as the separator\n    words = re.findall(r'\\b\\w+\\b', word)\n\n    # Convert the first word to uppercase and append to the camel case string\n    camel_case = words[0].capitalize()\n\n    # Convert the remaining words to camel case\n    for word in words[1:]:\n        camel_case += word.capitalize()\n\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    pattern = re.compile(r'_(.)?')\n    return pattern.sub(lambda m: m.group(1).upper() if m.group(1) else '', word)"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Replace all underscores with spaces and capitalize the first letter of each word\n    words = re.findall(r'_(.)', word)\n    words = [word[0].upper() + word[1:].lower() for word in words]\n    return ''.join(words)"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return ''.join(word.title().split('_'))"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub('_(.)', lambda x: x.group(1).upper(), word)\n"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    pattern = r'_([a-z])'\n    return re.sub(pattern, lambda x: x.group(1).upper(), word)"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    pattern = re.compile(r'_(.)?')\n    return pattern.sub(lambda x: x.group(1).upper() if x.group(1) else '', word).replace('_', '')"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    pattern = re.compile(r'(.)([A-Z][a-z]+)')\n    result = pattern.sub(r'\\1_\\2', word)\n    return result.lower()"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the word into words by underscores\n    words = re.findall(r'\\b\\w+\\b', word)\n    \n    # Capitalize the first letter of each word\n    for i, word in enumerate(words):\n        if i == 0:\n            words[i] = word.capitalize()\n        else:\n            words[i] = word[0].upper() + word[1:]\n    \n    # Join the words back into a camel case string\n    camel_case = ''.join(words)\n    return camel_case"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    result = []\n    for num in l:\n        if num % 2 == 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    # Initialize an empty list to store the even numbers\n    result = []\n    # Loop through each number in the input list\n    for num in l:\n        # Check if the number is odd\n        if num % 2!= 0:\n            # If it's odd, add it to the result list\n            result.append(num)\n    # Return the result list containing only even numbers\n    return result"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for i in l:\n        if i % 2!= 0:\n            new_list.append(i)\n    return new_list\n"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if not isinstance(list1, list):\n        raise TypeError('Input must be a list')\n    if not isinstance(n, int):\n        raise TypeError('Input must be an integer')\n    if n < 1 or n > len(list1):\n        raise IndexError('Index out of range')\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if len(list1) < n:\n        return None\n    else:\n        return list1[n-1][1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1][1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [x[n] for x in list1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # check if the given list is empty or not\n    if len(list1) == 0:\n        return \"Error: Empty list\"\n    \n    # check if the given index n is valid or not\n    if n < 1 or n > len(list1):\n        return \"Error: Invalid index\"\n    \n    # extract the nth element from the list\n    element = list1[n-1]\n    \n    # return the extracted element\n    return element"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    try:\n        # check if the nth element is a valid integer\n        if not isinstance(n, int):\n            raise ValueError(\"n should be an integer\")\n        # check if the list of tuples is not empty\n        if not list1:\n            raise ValueError(\"List of tuples should not be empty\")\n        # check if the list of tuples has at least n elements\n        if len(list1) < n:\n            raise ValueError(\"List of tuples should have at least n elements\")\n        # extract the nth element from the list of tuples and return it\n        return list1[n-1]\n    except ValueError as ve:\n        print(ve)"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1][1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    try:\n        if isinstance(list1, list) and isinstance(list1[0], tuple) and isinstance(n, int) and n > 0:\n            return list1[n-1]\n        else:\n            raise ValueError(\"Invalid input\")\n    except IndexError:\n        return None"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n < 1 or n > len(list1):\n        raise ValueError(\"Invalid index\")\n    \n    return list1[n-1]"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in another sequence or not.\n    '''\n    for value in list1:\n        if value in list2:\n            print(\"Found\", value)\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def overlapping(list1,list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    # creating an empty dictionary to store the counts of each element in both lists\n    count = {}\n    # iterating through each element in the first list\n    for i in list1:\n        # checking if the element exists in the dictionary or not\n        if i in count:\n            # incrementing the count of the element if it exists\n            count[i] += 1\n        else:\n            # adding the element to the dictionary with a count of 1\n            count[i] = 1\n    # iterating through each element in the second list\n    for j in list2:\n        # checking if the element exists in the dictionary or not\n        if j in count:\n            # decreasing the count of the element if it exists\n            count[j] -= 1\n        else:\n            # adding the element to the dictionary with a count of 1\n            count[j] = 1\n    # iterating through the dictionary and checking if any count is 0\n    for i in count:\n        if count[i] == 0:\n            # if any count is 0, the element exists in both lists\n            return True\n    # if no count is 0, the element does not exist in both lists\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def overlapping(list1, list2):\n    '''\n    This function takes two lists as input, and returns True if any value in the first list exists in the second list and vice versa.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    for i in list2:\n        if i in list1:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n\n    # Check if any element of list1 is also in list2\n    for item in list1:\n        if item in list2:\n            return True\n    \n    # If no element from list1 is also in list2, return False\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    # check if the list of elements is empty\n    if len(list1) == 0 or len(list2) == 0:\n        return False\n\n    # use a set to keep track of the elements in list1\n    set1 = set(list1)\n\n    # iterate over list2 and check if each element is in set1\n    for elem in list2:\n        if elem in set1:\n            return True\n\n    # if we reach this point, no element in list2 was found in set1, so return False\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for num in list1:\n        if num in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    This function takes two lists as input and returns True if there is any value in list2 that is also present in list1, and False otherwise.\n    \"\"\"\n    for item in list2:\n        if item in list1:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    return any(x in list2 for x in list1)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Product(arr):\n    \"\"\"\n    Write a python function to find a pair with highest product from a given array of integers.\n    \"\"\"\n    # Initialize two variables to store the two largest and two smallest numbers\n    max1 = float('-inf')\n    max2 = float('-inf')\n    min1 = float('inf')\n    min2 = float('inf')\n\n    # Iterate through the array\n    for num in arr:\n        # If the number is greater than the current maximum, update both max1 and max2\n        if num > max1:\n            max2 = max1\n            max1 = num\n        # If the number is greater than max2 and not greater than max1, update max2\n        elif num > max2 and num <= max1:\n            max2 = num\n\n        # If the number is less than the current minimum, update both min1 and min2\n        if num < min1:\n            min2 = min1\n            min1 = num\n        # If the number is less than min2 and not less than min1, update min2\n        elif num < min2 and num >= min1:\n            min2 = num\n\n    # Return the pair with the highest product\n    return (max1 * max2, min1 * min2)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_1 = float('-inf')\n    max_2 = float('-inf')\n    min_1 = float('inf')\n    min_2 = float('inf')\n\n    for i in range(len(arr)):\n        if arr[i] > max_1:\n            max_2 = max_1\n            max_1 = arr[i]\n        elif arr[i] > max_2:\n            max_2 = arr[i]\n\n        if arr[i] < min_1:\n            min_2 = min_1\n            min_1 = arr[i]\n        elif arr[i] < min_2:\n            min_2 = arr[i]\n\n    product_1 = max_1 * max_2\n    product_2 = min_1 * min_2\n\n    if product_1 > product_2:\n        return (max_1, max_2)\n    else:\n        return (min_1, min_2)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    # Initialize two variables to hold the maximum product of two elements and their indices\n    max1 = arr[0] * arr[1]\n    max2 = arr[0] * arr[0]\n    max_pair = []\n    \n    # Loop through the array to find the pair with the highest product\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            prod = arr[i] * arr[j]\n            if prod > max1:\n                max1 = prod\n                max2 = arr[i] * arr[j-1]\n                max_pair = [arr[i], arr[j]]\n            elif prod > max2:\n                max2 = prod\n                max1 = arr[i] * arr[j-1]\n                max_pair = [arr[i], arr[j]]\n                \n    # Return the pair of elements that have the highest product\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1 = float('-inf')\n    max2 = float('-inf')\n    min1 = float('inf')\n    min2 = float('inf')\n    for num in arr:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n        elif num < min1:\n            min2 = min1\n            min1 = num\n        elif num < min2:\n            min2 = num\n    return max(max1*max2, min1*min2)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if len(arr) < 2:\n        return None\n\n    max_product = arr[0] * arr[1]\n    min_product = arr[0] * arr[1]\n\n    for i in range(2, len(arr)):\n        curr_product = arr[i] * min_product\n\n        if curr_product > max_product:\n            max_product = curr_product\n        elif curr_product < min_product:\n            min_product = curr_product\n\n    return max_product, min_product"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1 = arr[0]\n    max2 = arr[0]\n\n    min1 = arr[0]\n    min2 = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n\n        if arr[i] < min1:\n            min2 = min1\n            min1 = arr[i]\n        elif arr[i] < min2:\n            min2 = arr[i]\n\n    return max1 * max2, min1 * min2"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Product(arr):\n    \"\"\"\n    Write a python function to find a pair with highest product from a given array of integers.\n    \"\"\"\n    if not arr:\n        return None\n\n    max_product = float('-inf')\n    pair = None\n\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            product = arr[i] * arr[j]\n\n            if product > max_product:\n                max_product = product\n                pair = (arr[i], arr[j])\n\n    return pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if len(arr) < 2:\n        return None\n\n    max_product = arr[0]\n    min_product = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            temp = max_product\n            max_product = min_product\n            min_product = temp\n\n        max_product = max(max_product * arr[i], arr[i])\n        min_product = min(min_product * arr[i], arr[i])\n\n    return (arr[0], arr[1])"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1, max2 = float('-inf'), float('-inf')\n    min1, min2 = float('inf'), float('inf')\n    \n    for num in arr:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n        elif num < min1:\n            min2 = min1\n            min1 = num\n        elif num < min2:\n            min2 = num\n            \n    return max(max1*max2, max1*min2, max2*min1)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Product(arr):\n    max1 = max2 = float('-inf')\n    for num in arr:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n    return max1 * max2"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Initialize an empty dictionary to store common elements\n    common_dict = {}\n    \n    # Iterate through the list of tuples\n    for tup in Input: \n        # Extract the first element of the tuple\n        first_element = tup[0]\n        \n        # If the first element is already in the dictionary, \n        # increment the count for that element\n        if first_element in common_dict: \n            common_dict[first_element] += 1\n        else: \n            # If the element is not in the dictionary yet, add it with a count of 1\n            common_dict[first_element] = 1\n            \n    # Find the common element with the highest count and return its value\n    max_count = 0\n    common_element = None\n    for key, value in common_dict.items(): \n        if value > max_count: \n            max_count = value\n            common_element = key\n            \n    return common_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def group_tuples(Input):\n    '''\n    This function takes a list of tuples as input and returns a dictionary where\n    the keys are the common first elements of the tuples and the values are lists\n    of tuples that have that common first element.\n    '''\n    groups = {}\n    for i in Input:\n        if i[0] not in groups:\n            groups[i[0]] = [i]\n        else:\n            groups[i[0]].append(i)\n    return groups"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_element = None\n    for tuple1 in Input:\n        if common_element is None:\n            common_element = tuple1[0]\n        else:\n            if tuple1[0] == common_element:\n                return True\n            else:\n                common_element = None\n    return False"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    Write a function to find common first element in given list of tuple.\n    \"\"\"\n    # Create a dictionary to store common elements\n    common_elements = {}\n\n    # Iterate through the list of tuples\n    for tup in Input:\n        # Get the first element of the tuple\n        first_element = tup[0]\n\n        # If the first element is already present in the dictionary, add the second element of the tuple to the list of common elements\n        if first_element in common_elements:\n            common_elements[first_element].append(tup[1])\n        # If the first element is not present in the dictionary, add the tuple to the dictionary with the list of common elements containing only the second element of the tuple\n        else:\n            common_elements[first_element] = [tup[1]]\n\n    # Create a list of tuples for the common elements with their frequency of occurrence\n    result = []\n    for key, value in common_elements.items():\n        tup = (key, len(value))\n        result.append(tup)\n\n    # Sort the list of tuples by the second element in ascending order\n    result.sort(key=lambda x: x[1])\n\n    # Return the list of tuples for the common elements with their frequency of occurrence\n    return result"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_element = None\n    for i in range(len(Input)):\n        for j in range(i+1,len(Input)):\n            if Input[i][0] == Input[j][0]:\n                if common_element is None:\n                    common_element = Input[i][0]\n                elif common_element!= Input[j][0]:\n                    common_element = None\n                    break\n    return common_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def group_tuples(Input): \n    '''\n    This function takes a list of tuples as input and returns a list of tuples \n    where each tuple contains only the first element of the corresponding tuple in the input list.\n    '''\n\n    # creating a new list to store the common first element tuples\n    Common_First_Element = []\n\n    # iterating over the input list of tuples\n    for i in Input:\n        # getting the first element of the current tuple\n        first_element = i[0]\n        # checking if the first element already exists in the Common_First_Element list\n        if first_element not in Common_First_Element:\n            # if not, appending the current tuple to the Common_First_Element list\n            Common_First_Element.append(i)\n\n    # returning the Common_First_Element list\n    return Common_First_Element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common = set()\n    for tup in Input:\n        if tup[0] in common:\n            common.add(tup[1])\n        else:\n            common.add(tup[0])\n    return list(common)"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_tuple = []\n    for i in Input:\n        if not common_tuple or i[0]!= common_tuple[0]:\n            common_tuple = i\n    return common_tuple"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    first_element = set()\n    for i in Input:\n        if i[0] not in first_element:\n            first_element.add(i[0])\n    return list(first_element)"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def group_tuples(Input):\n    common_element = None\n    \n    for tup in Input:\n        if common_element is None:\n            common_element = tup[0]\n        elif tup[0] == common_element:\n            continue\n        else:\n            break\n    \n    return common_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    # initialize max_len to 0 and max_element to None\n    max_len = 0\n    max_element = None\n    # loop through each element in the list\n    for i in lst:\n        # check if the length of the element is greater than the current max_len\n        if len(str(i)) > max_len:\n            # update max_len to the length of the current element\n            max_len = len(str(i))\n            # update max_element to the current element\n            max_element = i\n    # return max_element\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_element = None\n    for i in range(len(lst)):\n        if len(lst[i]) > max_len:\n            max_len = len(lst[i])\n            max_element = lst[i]\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0 \n    max_element = None \n    for element in lst: \n        if len(element) > max_length: \n            max_length = len(element) \n            max_element = element \n    return max_element "
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0 \n    max_element = None\n    for i in range(len(lst)):\n        if len(lst[i]) > max_length:\n            max_length = len(lst[i])\n            max_element = lst[i]\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max(lst):\n    max_length = 0\n    max_elem = None\n\n    for elem in lst:\n        if len(elem) > max_length:\n            max_length = len(elem)\n            max_elem = elem\n\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = \"\"\n\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n\n    max_length = 0\n    max_element = ''\n\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = ''\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = len(lst[0])\n    max_elem = lst[0][0]\n    for i in range(1, len(lst)):\n        if len(lst[i]) > max_len:\n            max_len = len(lst[i])\n            max_elem = lst[i][0]\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_val = None\n    for item in lst:\n        if len(str(item)) > max_len:\n            max_len = len(str(item))\n            max_val = item\n    return max_val"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    print(total * len(list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    print(total * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    total = 0\n    for num in list1:\n        total += round(num)\n    print(total * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for i in range(len(list1)):\n        total += round(list1[i])\n    print(total * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def round_and_sum(lst):\n    total = 0\n    for num in lst:\n        total += round(num)\n    return total * len(lst)\n"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    # initialize variables\n    total_sum = 0\n    length = len(list1)\n    \n    # iterate over the list and round each number\n    for num in list1:\n        num = round(num)\n    \n    # iterate over the list again and add up the rounded numbers\n    for num in list1:\n        total_sum += num\n    \n    # print the result\n    print(total_sum * length)"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = sum(round(num) for num in list1)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    total = 0\n    for number in list1:\n        total += round(number)\n    print(total * len(list1))"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_Sum(n): \n    '''\n    This function takes an integer n as input and returns the cube sum of the first n even natural numbers.\n    '''\n    \n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**3\n    \n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(2, n+1, 2):\n        sum_of_cubes += i**3\n    return sum_of_cubes"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i*i*i\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**3\n    return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    i = 0\n    while i < n:\n        sum += i*i*i\n        i += 1\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    even_numbers = []\n    for i in range(2, n+1, 2):\n        even_numbers.append(i)\n    cube_sum = 0\n    for num in even_numbers:\n        cube_sum += num**3\n    return cube_sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    # initialize the sum of cubes to zero\n    sum_cubes = 0\n    # loop from 1 to n\n    for i in range(1, n+1):\n        # if the number is even, add its cube to the sum of cubes\n        if i % 2 == 0:\n            sum_cubes += i ** 3\n    # return the sum of cubes\n    return sum_cubes"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    sum_of_cubes = 0\n    for i in range(1, n+1, 2):\n        sum_of_cubes += i**3\n    return sum_of_cubes"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    total = 0 \n    for i in range(2, n+1, 2): \n        total += i**3\n    return total"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    concatenated_str = \"\"\n    for element in test_tup:\n        concatenated_str += str(element) + delimiter\n    return concatenated_str[:-1]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup):\n    \"\"\"\n    Write a function to concatenate each element of tuple by the delimiter.\n    \"\"\"\n    delimiter = \",\"\n    result = \"\"\n    for element in test_tup:\n        result += str(element) + delimiter\n    return result[:-1]  # remove the last delimiter from the result"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = \"+\"\n    result = \"\"\n    for i in test_tup:\n        result += str(i) + delimiter\n    return result[:-len(delimiter)]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    concatenated_list = []\n    for element in test_tup:\n        concatenated_list.append(str(element))\n    return delimiter.join(concatenated_list)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n\n    Args:\n    test_tup (tuple): Tuple to be concatenated.\n    delimiter (str): String used to concatenate the elements.\n\n    Returns:\n    str: The concatenated string.\n    '''\n    return delimiter.join(map(str, test_tup))"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup, delimiter=' '):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(str(i) for i in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter =''\n    concatenated_string = delimiter.join(str(elem) for elem in test_tup)\n    return concatenated_string"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = ''\n    for i in test_tup:\n        result += str(i) + delimiter\n    return result[:-1]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = ''\n    final_string = ''\n    for i in range(len(test_tup)):\n        final_string += str(test_tup[i])\n        if i < len(test_tup)-1:\n            final_string += delimiter\n    return final_string\n"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    cubes = []\n    for i in range(1, n+1):\n        cubes.append(i**3)\n    return sum(cubes)/len(cubes)"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_cubes = 0  \n    count = 0  \n    for i in range(1, n+1):  \n        sum_cubes += i**3  \n        count += 1  \n    average_cube = sum_cubes/count  \n    return average_cube  "
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):\n    \"\"\"\n    This function takes an integer n as input and returns the average of the cubes of the first n natural numbers.\n    \"\"\"\n    total_sum = 0\n    count = 0\n    for i in range(1, n+1):\n        total_sum += i ** 3\n        count += 1\n    average = total_sum / count\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n\n    # initialize a variable to store the sum of cubes\n    sum_of_cubes = 0\n\n    # loop n times and calculate the cube of each natural number\n    for i in range(n):\n        sum_of_cubes += i*i*i\n\n    # calculate the average of cubes\n    average_of_cubes = sum_of_cubes / n\n\n    return average_of_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    average = sum / (n*n)\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):\n    \"\"\"\n    Write a python function to find the average of cubes of first n natural numbers.\n    \"\"\"\n    cubes = []\n    for i in range(1, n+1):\n        cubes.append(i**3)\n    average_cubes = sum(cubes)/len(cubes)\n    return average_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum/n"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):\n    \"\"\"\n    Write a python function to find the average of cubes of first n natural numbers.\n    \"\"\"\n    # Calculate the sum of cubes of first n natural numbers\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    \n    # Calculate the average of cubes of first n natural numbers\n    average_of_cubes = sum_of_cubes/n\n    \n    # Return the average of cubes of first n natural numbers\n    return average_of_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(1, n+1):\n        sum += i**3\n        count += 1\n    return sum/count"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_cubes = 0\n    count = 0\n    for i in range(1, n+1):\n        sum_cubes += i ** 3\n        count += 1\n    return sum_cubes / count"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index = []\n    for i in range(len(test_tuple)):\n        rear_index.append(test_tuple[i][-1])\n    return rear_index\n"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    \"\"\"\n    Write a function to extract only the rear index element of each string in the given tuple.\n    \"\"\"\n    rear_indices = []\n    for i, string in enumerate(test_tuple):\n        if i == len(test_tuple) - 1:\n            rear_indices.append(i)\n    return [test_tuple[i] for i in rear_indices]"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_indices = []\n    for string in test_tuple:\n        rear_indices.append(len(string) - 1)\n    return rear_indices"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return [str(t.split()[1]) for t in test_tuple]"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_tuple)):\n        rear_list.append(test_tuple[i][-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_indices = []\n    for i, item in enumerate(test_tuple):\n        if isinstance(item, str) and i >= len(test_tuple) - 1:\n            rear_indices.append(i)\n    return rear_indices"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = []\n    for string in test_tuple:\n        rear_elements.append(string[-1])\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for item in test_tuple:\n        if isinstance(item, str):\n            rear_list.append(item[-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    \"\"\"\n    Write a function to extract only the rear index element of each string in the given tuple.\n    \"\"\"\n    rear_list = []\n    for i in range(len(test_tuple)):\n        rear_list.append(test_tuple[i][-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return [string[-1] for string in test_tuple]"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x):\n    \"\"\"\n    This function takes a list and an element as input and returns the count of sublists containing that element.\n\n    Args:\n        list1: A list of sublists.\n        x: The element to search for in the sublists.\n\n    Returns:\n        The count of sublists containing the element x.\n    \"\"\"\n\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for i in list1:\n        if x in i:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_element_in_list(lst, x):\n    count = 0\n    for sublist in lst:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers from a list of numbers.\n    \"\"\"\n    odd_nums = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_nums.append(num)\n    return odd_nums\n"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return list(filter(lambda x: x % 2 == 1, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers from a list of numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define the date format regex pattern\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n\n    # Use regex to match the date format in the input string\n    match = re.match(pattern, dt)\n\n    # Check if the regex matched a valid date format\n    if match:\n        # Extract the date components from the match object\n        year = match.group(1)\n        month = match.group(2)\n        day = match.group(3)\n\n        # Format the date components into a new date string in dd-mm-yyyy format\n        new_dt = f'{day}-{month}-{year}'\n\n        return new_dt\n\n    # If no match is found, return the input string unchanged\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Replace the - with a space\n    dt = re.sub('-','', dt)\n    # Reverse the order of the day, month and year\n    new_dt = dt[6:4] + '-' + dt[4:2] + '-' + dt[2:0]\n    return new_dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Replace - with / to convert the date format from yyyy-mm-dd to dd-mm-yyyy format\n    dt = dt.replace('-', '/')\n    # Split the date string into day, month, and year components\n    day, month, year = re.findall('\\d+', dt)\n    # Convert the month and year components to integer values\n    month = int(month)\n    year = int(year)\n    # Create a new date string with day, month, and year components in the correct format\n    new_dt = '-'.join([day, month_name[month], str(year)])\n    return new_dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt = re.sub(r'(\\d{4})-(\\d{2})-(\\d{2})', r'\\2-\\1-\\3', dt)\n    return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define a regular expression pattern to match the date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    \n    # Use the re.search() function to search for the pattern in the input date string\n    match = re.search(pattern, dt)\n    \n    # If the pattern is found, extract the year, month, and day components and join them with hyphens\n    if match:\n        year = match.group(1)\n        month = match.group(2)\n        day = match.group(3)\n        new_date = f\"{day}-{month}-{year}\"\n        return new_date\n    else:\n        # If the pattern is not found, return the input date string as it is\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Regular expression pattern to match the date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    # Use re.search() function to find all the matches of the pattern in the input string\n    match = re.search(pattern, dt)\n    # If the match is found, use the groups() method to extract the matched values\n    if match:\n        # Extract the values from the match object\n        year = match.group(1)\n        month = match.group(2)\n        day = match.group(3)\n        # Use the str() function to convert the values to string\n        dt = '-'.join([day, month, year])\n    return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\nfrom datetime import datetime\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Use regular expressions to extract the year, month and day components of the date\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.match(pattern, dt)\n    if match:\n        year, month, day = match.groups()\n        # Convert the year, month and day components to the desired format\n        new_dt = datetime(int(year), int(month), int(day)).strftime('%d-%m-%Y')\n    else:\n        # If the date format is not valid, return the original date as is\n        new_dt = dt\n    return new_dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.search(pattern, dt)\n    if match:\n        year, month, day = match.groups()\n        new_dt = f'{day}-{month}-{year}'\n        return new_dt\n    else:\n        print(f'Date format not recognized: {dt}')\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define the pattern for matching the date format\n    pattern = r'^\\d{4}-\\d{2}-\\d{2}$'\n    # Check if the date format matches the pattern\n    if re.match(pattern, dt):\n        # Split the date into year, month, and day\n        year, month, day = dt.split('-')\n        # Return the date in dd-mm-yyyy format\n        return f\"{day}-{month}-{year}\"\n    else:\n        # Raise a ValueError if the date format does not match the pattern\n        raise ValueError(\"Invalid date format\")"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef change_date_format(dt):\n    # Extract date format from the date string using regex\n    pattern = r'\\d{4}-\\d{2}-\\d{2}'\n    match = re.search(pattern, dt.strftime('%Y-%m-%d'))\n\n    if match:\n        # Replace date format with dd-mm-yyyy format using string manipulation\n        new_date_string = dt.strftime('%d-%m-%Y')\n        return new_date_string\n    else:\n        return None"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and temp < my_list[j-gap]:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    \n    n = len(my_list)\n    gap = n // 2\n    \n    while gap > 0:\n        for i in range(gap, n):\n            j = i\n            while j >= gap and my_list[j] < my_list[j - gap]:\n                temp = my_list[j]\n                my_list[j] = my_list[j - gap]\n                my_list[j - gap] = temp\n                j -= gap\n        gap //= 2\n    \n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    Write a function to sort the given array by using shell sort.\n    \"\"\"\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            j = i\n            while j >= gap and my_list[j] < my_list[j-gap]:\n                my_list[j], my_list[j-gap] = my_list[j-gap], my_list[j]\n                j -= gap\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    \n    # Calculate the gap (number of elements) between each insertion sort\n    gap = len(my_list) // 2\n    \n    while gap > 0:\n        # Move the gap closer to the middle of the array\n        for i in range(gap, len(my_list)):\n            # Insert the current element in the sorted part of the array\n            j = i\n            while j >= gap and my_list[j] > my_list[j - gap]:\n                my_list[j], my_list[j - gap] = my_list[j - gap], my_list[j]\n                j -= gap\n        gap //= 2"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    h = 1\n    while h < n//3:\n        h = 3 * h + 1\n    \n    while h >= 1:\n        for i in range(h, n):\n            temp = my_list[i]\n            j = i\n            while j >= h and my_list[j-h] > temp:\n                my_list[j] = my_list[j-h]\n                j -= h\n            my_list[j] = temp\n        h = h // 3"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n\n    gap = len(my_list) // 2\n\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and temp < my_list[j-gap]:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n\n    # Step through the array until it is completely sorted\n    while n > 1:\n        # Insertion sort on each gap of 1\n        for gap in range(n//2):\n            for i in range(gap, n):\n                temp = my_list[i]\n                j = i\n                while j >= gap and my_list[j-gap] > temp:\n                    my_list[j] = my_list[j-gap]\n                    j -= gap\n                my_list[j] = temp\n\n        # Decrease the gap size\n        n = n // 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    Write a function to sort the given array by using shell sort.\n    \"\"\"\n    n = len(my_list)\n    gap = n // 2\n    \n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and temp < my_list[j-gap]:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    \n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n\n    # h = 1\n    # while h < n/3:\n    #     h = 3*h + 1\n    # print(h)\n\n    # h = 1\n    # while h < n//3:\n    #     h = 3*h + 1\n    # print(h)\n\n    # h = 1\n    # while h < n//2:\n    #     h = 2*h + 1\n    # print(h)\n\n    # h = 1\n    # while h < n:\n    #     h = 4*h + 1\n    # print(h)\n\n    h = 1\n    while h < n//2:\n        h = 2*h + 1\n    print(h)\n\n    # h = 1\n    # while h < n//2:\n    #     h = 3*h + 1\n    # print(h)\n\n    # h = 1\n    # while h < n//2:\n    #     h = 5*h + 1\n    # print(h)\n\n    # h = 1\n    # while h < n:\n    #     h = 7*h + 1\n    # print(h)\n\n    h = 1\n    while h < n//2:\n        h = 3*h + 1\n    print(h)\n\n    # h = 1\n    # while h < n//2:\n    #     h = 7*h + 1\n    # print(h)\n\n    # h = 1\n    # while h < n:\n    #     h = 11*h + 1\n    # print(h)\n\n    h = 1\n    while h < n//2:\n        h = 4*h + 1\n    print(h)\n\n    # h = 1\n    # while h < n//2:\n    #     h = 11*h + 1\n    # print(h)\n\n    # h = 1\n    # while h < n:\n    #     h = 17*h + 1\n    # print(h)\n\n    h = 1\n    while h < n//2:\n        h = 5*h + 1\n    print(h)\n\n    # h = 1\n    # while h < n//2:\n    #     h = 17*h + 1\n    # print(h)\n\n    # h = 1\n    # while h < n:\n    #     h = 29*h + 1\n    # print(h)\n\n    h = 1\n    while h < n//2:\n        h = 7*h + 1\n    print(h)\n\n    # h = 1\n    # while h < n//2:\n    #     h = 29*h + 1\n    # print(h)\n\n    # h = 1\n    # while h < n:\n    #     h = 41*h + 1\n    # print(h)\n\n    h = 1\n    while h < n//2:\n        h = 11*h + 1\n    print(h)\n\n    # h = 1\n    # while h < n//2:\n    #     h = 41*h + 1\n    # print(h)\n\n    # h = 1\n    # while h < n:\n    #     h = 59*h + 1\n    # print(h)\n\n    h = 1\n    while h < n//2:\n        h = 17*h + 1\n    print(h)\n\n    # h = 1\n    # while h < n//2:\n    #     h = 59*h + 1\n    # print(h)\n\n    # h = 1\n    # while h < n:\n    #     h = 89*h + 1\n    # print(h)\n\n    h = 1\n    while h < n//2:\n        h = 29*h + 1\n    print(h)\n\n    # h = 1\n    # while h < n//2:\n    #     h = 89*h + 1\n    # print(h)\n\n    # h = 1\n    # while h < n:\n    #     h = 149*h + 1\n    # print(h)\n\n    h = 1\n    while h < n//2:\n        h = 41*h + 1\n    print(h)\n\n    # h = 1\n    # while h < n//2:\n    #     h = 149*h + 1\n    # print(h)\n\n    # h = 1\n    # while h <"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Check if the two tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length.\")\n    \n    # Extract the elementwise and tuples using zip() function\n    and_tup = tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n    \n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"The two tuples must have the same length.\"\n    else:\n        return tuple(x & y for x, y in zip(test_tup1, test_tup2))"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # initialize an empty list to store the elementwise and tuples\n    and_tup_list = []\n    # iterate over each element of the first tuple\n    for i in range(len(test_tup1)):\n        # extract the element from the first tuple\n        elem1 = test_tup1[i]\n        # iterate over each element of the second tuple\n        for j in range(len(test_tup2)):\n            # extract the element from the second tuple\n            elem2 = test_tup2[j]\n            # append the elementwise and tuple to the list\n            and_tup_list.append((elem1 and elem2))\n    # return the list of elementwise and tuples\n    return and_tup_list"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] & test_tup2[i],)\n    return result"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # create an empty list to store the and tuples\n    and_tuples_list = []\n    # loop through each element of the two tuples\n    for i in range(len(test_tup1)):\n        # extract the element from the two tuples\n        elem1 = test_tup1[i]\n        elem2 = test_tup2[i]\n        # perform elementwise and operation and append the result to the and_tuples_list\n        and_tuples_list.append(elem1 & elem2)\n    # return the and_tuples_list\n    return and_tuples_list"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    \"\"\"\n    and_tup = ()\n    for i in range(len(test_tup1)):\n        and_tup += (test_tup1[i] & test_tup2[i],)\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Initialize an empty list to store the elementwise and tuples\n    and_list = []\n    # Iterate over the elements of the first tuple\n    for i in range(len(test_tup1)):\n        # Extract the elements at index i of the first and second tuples\n        a = test_tup1[i]\n        b = test_tup2[i]\n        # Calculate the elementwise and of the two elements\n        and_elem = a & b\n        # Add the elementwise and element to the list\n        and_list.append(and_elem)\n    # Return the list of elementwise and tuples\n    return and_list"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    \"\"\"\n    and_tup = tuple(map(lambda x, y: x and y, test_tup1, test_tup2))\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n\n    # Initialize an empty list to store the elementwise and tuples\n    and_list = []\n\n    # Loop through each element in the first tuple\n    for i in range(len(test_tup1)):\n\n        # Extract the corresponding elements from the two tuples\n        tup1_elem = test_tup1[i]\n        tup2_elem = test_tup2[i]\n\n        # Perform the elementwise and and store the result in the and_list\n        and_list.append(tup1_elem & tup2_elem)\n\n    # Return the and_list as a tuple\n    return tuple(and_list)"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] & test_tup2[i],)\n    return result"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c):\n    \"\"\"\n    Write a function to find the directrix of a parabola.\n    \"\"\"\n    det = b**2 - 4*a*c\n    \n    if det < 0:\n        return \"There are no real roots\"\n    \n    elif det == 0:\n        return \"The directrix is real and unique\"\n    \n    else:\n        root1 = (-b + det**0.5) / (2*a)\n        root2 = (-b - det**0.5) / (2*a)\n        \n        return f\"The directrix is real and distinct. Roots are {root1:.2f} and {root2:.2f}\""
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Calculate the directrix of a parabola given its coefficients a, b, and c.\n\n    a*x^2 + b*x + c = 0\n\n    The directrix is the point where the line of equation y=ax^2 + bx + c crosses the x-axis.\n    '''\n\n    # Calculate the determinant of the matrix:\n    det = b ** 2 - 4 * a * c\n\n    # Check if the determinant is negative, indicating that the parabola is not a quadratic:\n    if det < 0:\n        print('The parabola is not a quadratic.')\n        return\n\n    # Calculate the two solutions to the quadratic equation:\n    x1 = (-b + det ** 0.5) / (2 * a)\n    x2 = (-b - det ** 0.5) / (2 * a)\n\n    # Check if both solutions are real numbers:\n    if isinstance(x1, (int, float)) and isinstance(x2, (int, float)):\n        print(f'The directrix of the parabola is x = {x1:.2f} and x = {x2:.2f}.')\n    else:\n        print('The directrix of the parabola is complex.')"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = (b**2 - 4*a*c)\n\n    if discriminant < 0:\n        print(\"The parabola is not real\")\n    else:\n        x1 = (-b + discriminant**0.5) / (2*a)\n        x2 = (-b - discriminant**0.5) / (2*a)\n        print(\"The directrix is:\", x1)\n        print(\"The directrix is:\", x2)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    # Find the discriminant\n    disc = b**2 - 4*a*c\n\n    # Check if the discriminant is zero\n    if disc == 0:\n        # Directrix = -b/2a\n        directrix = -b/2*a\n\n    # Check if the discriminant is negative\n    elif disc < 0:\n        # No real solutions\n        directrix = 'No real solutions'\n\n    # Check if the discriminant is positive\n    else:\n        # Two real solutions\n        root1 = (-b + disc**(1/2))/(2*a)\n        root2 = (-b - disc**(1/2))/(2*a)\n        directrix = (root1 + root2)/2\n\n    return directrix"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if a!= 0:\n        x1 = -b / (2 * a)\n        x2 = -c / (2 * a)\n        x3 = (b + c) / (2 * a)\n    else:\n        x1 = -c / b\n        x2 = x1\n        x3 = x1\n    return x1, x2, x3"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c):\n    \"\"\"\n    Compute the directrix of a parabola defined by the parameters a, b, and c.\n\n    Parameters:\n    a (float): The x-coordinate of the vertex of the parabola\n    b (float): The y-coordinate of the vertex of the parabola\n    c (float): The discriminant of the equation of the parabola\n\n    Returns:\n    float: The directrix of the parabola\n    \"\"\"\n\n    # Compute the discriminant of the equation of the parabola\n    discriminant = b**2 - 4*a*c\n\n    # Compute the value of the x-coordinate of the focus of the parabola\n    x_focus = (-b + discriminant**0.5) / (2*a)\n\n    # Compute the value of the y-coordinate of the focus of the parabola\n    y_focus = a*x_focus**2 + b\n\n    # Return the directrix of the parabola\n    return x_focus"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    # Calculate the quadratic formula for the directrix\n    root1 = (-b + (b**2 - 4*a*c)**0.5) / (2*a)\n    root2 = (-b - (b**2 - 4*a*c)**0.5) / (2*a)\n\n    # Print the roots\n    print(\"The directrix of the parabola is:\", root1)\n    print(\"The directrix of the parabola is:\", root2)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    This function takes in three values, a, b and c, and returns the directrix of a parabola.\n    The formula to find the directrix of a parabola is: \n    directrix = (-b \u00b1 sqrt(b^2 - 4ac)) / 2a\n    '''\n    b2 = b**2\n    quadratic_term = b2 - 4*a*c\n    root1 = (-b + quadratic_term**0.5) / (2*a)\n    root2 = (-b - quadratic_term**0.5) / (2*a)\n    if root1 < root2:\n        return root1\n    else:\n        return root2"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    \n    discriminant = b**2 - 4*a*c\n    \n    if discriminant > 0:\n        return (-b + discriminant**0.5) / (2*a)\n    elif discriminant < 0:\n        return (-b - discriminant**0.5) / (2*a)\n    else:\n        return \"The given equation does not have a unique directrix.\""
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    # Calculate the discriminant\n    discriminant = b**2 - 4*a*c\n    \n    # Check if the discriminant is positive or negative\n    if discriminant > 0:\n        directrix = (-b + math.sqrt(discriminant)) / (2*a)\n    elif discriminant < 0:\n        directrix = (-b - math.sqrt(discriminant)) / (2*a)\n    else:\n        # If the discriminant is 0, the directrix is the point of intersection\n        directrix = -b / (2*a)\n        \n    return directrix"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # Create a set from list1\n    set1 = set(list1)\n\n    # Iterate through list2 and check if any element is in set1\n    for element in list2:\n        if element in set1:\n            return True\n\n    # If no common element is found, return False\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    This function takes two lists as inputs and returns True if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # Create a set of unique elements in both lists\n    unique_elements = set(list1 + list2)\n    # Check if any of the unique elements are present in both lists\n    for elem in unique_elements:\n        if elem in list1 and elem in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # create a set to store unique elements in both lists\n    set1 = set(list1)\n    set2 = set(list2)\n    # check if both sets have at least one common element\n    return len(set1.intersection(set2)) > 0"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for elem in list1:\n        if elem in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common = False\n    for element in list1:\n        if element in list2:\n            common = True\n            break\n    return common"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for elem in list1:\n        if elem in list2:\n            return True\n    return False"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the length of the first trapezium\n    length1 = (base1 + base2) / 2\n    # Calculate the length of the second trapezium\n    length2 = height - base1 - base2\n    # Calculate the total length of the trapezium\n    total_length = length1 + length2\n    # Calculate the midpoint of the total length\n    midpoint = total_length / 2\n    # Calculate the median length of the trapezium\n    median = midpoint - min(length1, length2)\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n    # Calculate the area of the trapezium\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n\n    # Calculate the lengths of the three sides of the trapezium\n    side1 = 0.5 * base1\n    side2 = 0.5 * (base1 + base2)\n    side3 = 0.5 * height\n\n    # Calculate the areas of the three sides\n    area1 = area - side1 * side1\n    area2 = area - side2 * side2\n    area3 = area - side3 * side3\n\n    # Calculate the areas of the medians\n    median1 = area1 / (area1 + area2)\n    median2 = area2 / (area1 + area2)\n\n    # Calculate the medians of the three sides\n    median_side1 = 0.5 * side1 * (median1 + median2)\n    median_side2 = 0.5 * side2 * (median1 + median2)\n    median_side3 = 0.5 * side3 * (median1 + median2)\n\n    # Calculate the medians of the trapezium\n    median_trapezium = median_side1 + median_side2\n\n    # Return the median length of the trapezium\n    return median_trapezium"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    area = 0.5 * base1 * height\n    area += 0.5 * base2 * height\n    area += 0.5 * base1 * base2 * height\n    area *= 2\n\n    area_1 = area - 0.5 * base1 * (base1 + base2)\n    area_2 = area - 0.5 * base2 * (base1 + base2)\n    area_3 = area - 0.5 * base1 * base2 * (base1 + base2)\n\n    area_1 *= 2\n    area_2 *= 2\n    area_3 *= 2\n\n    return max(area_1, area_2, area_3) / area"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n\n    # Calculate the lengths of the sides of the trapezium\n    side1 = base1 + base2\n    side2 = 2 * height\n\n    # Calculate the length of the trapezium\n    trapezium_length = side1 + side2\n\n    # Calculate the area of the trapezium\n    area = (0.5 * trapezium_length) * height\n\n    # Calculate the number of triangles that can form the trapezium\n    num_triangles = area // 6\n\n    # Calculate the lengths of the three sides of the trapezium\n    side1_half = side1 / 2\n    side2_half = side2 / 2\n    side3_half = (side2_half - side1_half) / 2\n\n    # Calculate the median length of the trapezium\n    median_length = (side1_half + side3_half) / num_triangles\n\n    return median_length\n"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_trapezium(base1,base2,height):\n    # Calculate the length of the trapezium\n    trapezium_length = (base1 + base2 + height) / 3\n    # Calculate the median length\n    median_length = trapezium_length / 2\n    # Return the median length\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n\n    # Calculate the area of the trapezium using Heron's formula\n    area = 0.5 * base1 * base2 * math.sin(math.pi/3)\n\n    # Calculate the length of the sides of the trapezium\n    a = math.sqrt(base1**2 + height**2)\n    b = math.sqrt(base2**2 + height**2)\n\n    # Calculate the length of the smaller side of the trapezium\n    s = min(a,b)\n\n    # Calculate the length of the larger side of the trapezium\n    l = max(a,b)\n\n    # Calculate the length of the trapezium\n    t = s + 2 * l\n\n    # Calculate the perimeter of the trapezium using Heron's formula\n    perimeter = 2 * (s + l)\n\n    # Calculate the midpoint of the trapezium\n    midpoint = 0.5 * (s + l)\n\n    # Calculate the area of the trapezium using Heron's formula\n    area = 0.5 * perimeter * (s + l)\n\n    # Calculate the area of the small trapezium using Heron's formula\n    small_area = 0.5 * perimeter * s\n\n    # Calculate the area of the large trapezium using Heron's formula\n    large_area = 0.5 * perimeter * l\n\n    # Calculate the proportion of the area of the small trapezium\n    small_ratio = small_area / area\n\n    # Calculate the proportion of the area of the large trapezium\n    large_ratio = large_area / area\n\n    # Calculate the median length of the trapezium\n    median = midpoint * (1 - small_ratio + large_ratio)\n\n    # Return the median length of the trapezium\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n\n    :param base1: The length of the first base of the trapezium.\n    :type base1: float\n    :param base2: The length of the second base of the trapezium.\n    :type base2: float\n    :param height: The height of the trapezium.\n    :type height: float\n    :return: The median length of the trapezium.\n    :rtype: float\n    \"\"\"\n    # Calculate the area of the trapezium\n    area = 0.5 * base1 * base2 * height\n\n    # Calculate the lengths of the sides of the trapezium\n    side1 = 0.5 * base1 * height\n    side2 = 0.5 * base2 * height\n\n    # Sort the lengths of the sides of the trapezium\n    sides = sorted([side1, side2])\n\n    # Calculate the length of the longer side\n    longer_side = sides[0]\n\n    # Calculate the length of the shorter side\n    shorter_side = sides[1]\n\n    # Calculate the length of the trapezium\n    trapezium = longer_side + shorter_side\n\n    # Calculate the median of the trapezium\n    median = trapezium\n\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the areas of the trapezium\n    area1 = 0.5 * base1 * height\n    area2 = 0.5 * base2 * height\n    \n    # Calculate the length of the trapezium by finding the length of the shorter side\n    length = min(base1, base2)\n    \n    # Calculate the median by taking the average of the two lengths\n    median = (area1 + area2) / (2 * length)\n    \n    # Return the median length\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Calculate the median length of a trapezium using the trapezoidal rule.\n    '''\n\n    # Calculate the area of the trapezium\n    area = 0.5 * base1 * base2\n\n    # Calculate the semi-perimeter of the trapezium\n    semi_perimeter = 0.5 * (base1 + base2)\n\n    # Calculate the height of the trapezium\n    trapezium_height = height\n\n    # Calculate the distance between the apex of the trapezium and the vertical line\n    distance = 0.5 * height\n\n    # Use the trapezoidal rule to calculate the length of the trapezium\n    length = 0.5 * area * distance\n\n    # Determine if the length is greater than the semi-perimeter\n    if length > semi_perimeter:\n        # The length is greater than the semi-perimeter, so the median is half the length\n        median = 0.5 * length\n    else:\n        # The length is less than the semi-perimeter, so the median is the distance between the apex of the trapezium and the vertical line\n        median = distance\n\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n    area = 0.5 * (base1 + base2) * height\n    median_area = 0.5 * (base1 + base2) * (height + 1)\n    return math.sqrt(median_area - area)"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for num in arr:\n        if num > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for num in arr:\n        if num > number:\n            print(True)\n        else:\n            print(False)"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater = False\n    for i in range(len(arr)):\n        if arr[i] > number:\n            greater = True\n            break\n    return greater"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            print(f'{number} is greater than {arr[i]} at index {i}')\n            break\n    else:\n        print(f'{number} is not greater than any element in the array')"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for num in arr:\n        if num > number:\n            print(num)\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for element in arr:\n        if element > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    This function takes in an array and a number and returns True if the number is greater than all the elements in the array, and False otherwise.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False\n"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*?b'\n    return re.search(pattern, text)"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.*b'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'\\ba\\w*b\\w*\\b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r\"a\\w+\"\n    return re.findall(pattern, text)\n"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a\\w+'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a[b]*'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a{1,}b'\n    return re.search(pattern, text)"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.{1,}b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a(?=b)'\n    matches = re.findall(pattern, text)\n    return matches\n\ntext = \"This is a sample text with a few b's and another b's.\"\nmatches = text_match_one(text)\nprint(matches)"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # Check if the given number is an integer or not\n    if isinstance(n, int) == False:\n        print(\"The input is not an integer.\")\n        return None\n    \n    # Calculate the last digit of the given number\n    last_digit = n % 10\n    \n    # Return the last digit\n    return last_digit"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # convert the number to a string\n    num = str(n)\n    # get the last character of the string\n    last = num[-1]\n    # convert the last character to an integer\n    last_num = int(last)\n    # return the last digit of the number\n    return last_num"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # convert the input number to string and extract last character\n    last_char = str(n)[-1]\n    # convert the last character to integer and return it\n    return int(last_char)"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit(n):\n    \"\"\"\n    Write a python function to find the last digit of a given number.\n    \"\"\"\n    # find the last digit of the number\n    last = n % 10\n    # return the last digit\n    return last"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit(n):\n    \"\"\"\n    Write a python function to find the last digit of a given number.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit(n):\n    \"\"\"\n    This function takes an integer n as input and returns the last digit of the number.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit(n):\n    \"\"\"\n    Write a python function to find the last digit of a given number.\n    \"\"\"\n    last_digit = n % 10\n    return last_digit"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit(n):\n    \"\"\"\n    Write a python function to find the last digit of a given number.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def neg_nos(lst):\n    '''\n    This function takes a list as input and returns a new list with all the negative numbers in the original list.\n    '''\n    # initialize an empty list to store the negative numbers\n    neg_lst = []\n    # iterate over each element in the list\n    for num in lst:\n        # if the element is negative, append it to the neg_lst\n        if num < 0:\n            neg_lst.append(num)\n    # return the neg_lst\n    return neg_lst"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def neg_nos(lst):\n    '''\n    This function returns a list of negative numbers from the given list.\n    '''\n    return [num for num in lst if num < 0]"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    # initializing an empty list to store the negative numbers\n    neg_list = []\n    # iterating through each element of the list1\n    for num in list1:\n        # if the element is negative, adding it to the neg_list\n        if num < 0:\n            neg_list.append(num)\n    # returning the neg_list\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    This function takes a list as input and returns the negative numbers in the list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def neg_nos(lst):\n    \"\"\"\n    This function takes a list as an input and returns a list of its negative numbers.\n    \"\"\"\n    neg_lst = []\n    for num in lst:\n        if num < 0:\n            neg_lst.append(num)\n    return neg_lst"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    # create an empty list to store the negative numbers\n    neg_list = []\n    # iterate through each number in the input list\n    for num in list1:\n        # if the number is negative, add it to the neg_list\n        if num < 0:\n            neg_list.append(num)\n    # return the neg_list\n    return neg_list"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    # Initialize an empty string to store the output\n    output = \"\"\n    \n    # Loop through each character in the input string\n    for char in str1:\n        # If the character is odd, add it to the output string\n        if char % 2!= 0:\n            output += char\n    \n    # Return the output string\n    return output"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # initialize an empty string to store the new string\n    new_str = \"\"\n    # iterate over each character in the string\n    for char in str1:\n        # if the character is even (i.e., not an odd character), add it to the new string\n        if char % 2 == 0:\n            new_str += char\n    # return the new string\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    odd_chars = []\n    for char in str1:\n        if char % 2!= 0:\n            odd_chars.append(char)\n    return \"\".join(odd_chars)"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    # Initialize an empty string to store the new string\n    new_str = \"\"\n    # Loop through each character in the input string\n    for char in str1:\n        # Check if the character is odd\n        if char % 2!= 0:\n            # If it is, append it to the new string\n            new_str += char\n    # Return the new string\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if char.isdigit():\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if char.isdigit():\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # Initialize an empty string to store the result\n    result = \"\"\n    # Loop through each character in the input string\n    for char in str1:\n        # If the character is odd, add it to the result string\n        if char % 2!= 0:\n            result += char\n    # Return the result string\n    return result"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join([char for char in str1 if char.isalnum()])"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    return ''.join([char for char in str1 if char.isalpha()])"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if ord(char) % 2!= 0:\n            new_str += char\n    return new_str"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] < test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n\n    count = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i], test_list[j]) in test_list[j:i+1] or (test_list[j], test_list[i]) in test_list[j:i+1]:\n                count += 1\n\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    bidirectional_pairs = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                bidirectional_pairs += 1\n    return bidirectional_pairs"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] < test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][0], test_list[j][1]) in test_list[j][0] or (test_list[i][1], test_list[j][0]) in test_list[j][1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1] or test_list[j] == test_list[i][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    bidirectional_pairs = []\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if (test_list[i][0], test_list[j][1]) in bidirectional_pairs:\n                bidirectional_pairs.remove((test_list[i][0], test_list[j][1]))\n            elif (test_list[j][0], test_list[i][1]) in bidirectional_pairs:\n                bidirectional_pairs.remove((test_list[j][0], test_list[i][1]))\n            else:\n                bidirectional_pairs.append((test_list[i][0], test_list[j][1]))\n    return len(bidirectional_pairs)"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][0], test_list[j][1]) in test_list[j]:\n                count += 1\n            if (test_list[j][0], test_list[i][1]) in test_list[i]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[i][1] == test_list[j][0]:\n                count += 1\n    return count"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if len(L) == 0:\n        return 0\n    else:\n        result = L[0]\n        for i in range(1, len(L)):\n            result = result * L[i]\n        return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    total = 0\n    for num in L:\n        total = total * 10 + num\n    return total"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        result = result * num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    total = 1\n    for num in L:\n        total *= num\n    return total"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 1\n    for num in L:\n        result *= num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    total = 0\n    for num in L:\n        total += num\n    return total"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Initialize variables to store the result and the total count of digits\n    result = 0\n    count = 0\n\n    # Iterate through the list of integers and add each multiple to the result\n    for num in L:\n        while num > 0:\n            # Divide the number by 10 and round down to get the last digit\n            digit = num % 10\n\n            # Add the digit to the result and increment the count\n            result += digit\n            num = num // 10\n            count += 1\n\n    # Check if the count of digits is greater than 1 and if so, return None\n    if count > 1:\n        return None\n\n    # Otherwise, return the result\n    return result"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Remove all punctuations from the text\n    text = re.sub(r'[^\\w\\s]', '', text)\n    # Split the text into words\n    words = text.split()\n    # Initialize an empty list to store adverbs and their positions\n    adverbs = []\n    # Loop through each word in the list\n    for i, word in enumerate(words):\n        # If the word is an adverb\n        if word in ADVERBS:\n            # Add the adverb and its position to the list\n            adverbs.append((word, i))\n    # Return the list of adverbs and their positions\n    return adverbs"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverb_position(text):\n    # Define a regular expression pattern to match adverbs\n    pattern = r'\\b(adverb)\\b'\n    \n    # Find all matches of the pattern in the text\n    matches = re.findall(pattern, text)\n    \n    # Extract the adverb and its position from the matches and return a list\n    result = []\n    for match in matches:\n        adverb = match[0]\n        position = text.lower().index(match.lower())\n        result.append({'adverb': adverb, 'position': position})\n    \n    return result"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    This function takes a string as input and returns a dictionary with the adverbs and their positions.\n    '''\n    # Regular expression pattern for adverbs\n    pattern = r'\\b(also|also\\s+|\\s+also|also\\s+\\w+\\s+|\\w+ly|really|just|even|actually|really|quite|well|really\\s+|\\s+really|really\\s+\\w+\\s+|\\w+ly\\s+\\w+\\s+|really\\s+|\\s+really\\s+|\\s+\\w+\\s+\\w+\\s+\\w+\\s+|like|actually\\s+|\\s+actually|actually\\s+\\w+\\s+|\\w+ly\\s+\\w+\\s+|actually\\s+|\\s+actually\\s+|\\s+\\w+\\s+\\w+\\s+\\w+\\s+|just\\s+\\w+\\s+|really\\s+\\w+\\s+|really\\s+\\w+\\s+\\w+\\s+|just\\s+|\\s+just|just\\s+\\w+\\s+\\w+\\s+\\w+\\s+|really\\s+\\w+\\s+\\w+\\s+\\w+\\s+|just\\s+\\w+\\s+\\w+\\s+\\w+\\s+|really\\s+\\w+\\s+\\w+\\s+\\w+\\s+|just\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+|really\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+|really\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+|really\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+|really\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+|actually\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+|actually\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+|actually\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+|actually\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+|actually\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverb_position(text):\n    \"\"\"\n    Find the first adverb and their positions in a given sentence.\n    \"\"\"\n    # Use regular expressions to find all the adverbs and their positions in the sentence\n    pattern = r'\\b(?:[A-Z][a-z]+\\b|[-\\[\\]{}(),.?*:;\u00ab\u00bb\u201e\u201d\u2018\u2019])\\b'\n    matches = re.finditer(pattern, text, re.IGNORECASE)\n    \n    # Iterate over the matches and extract the positions and adverbs\n    adverbs = []\n    for match in matches:\n        adverb = match.group(0)\n        position = match.start()\n        adverbs.append((position, adverb))\n        \n    # Sort the adverbs by their positions in the sentence\n    adverbs.sort()\n    \n    # Return the adverbs and their positions\n    return adverbs"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverb_position(text):\n    # Split the text into words\n    words = re.findall(r'\\b\\w+\\b', text)\n\n    # Initialize an empty dictionary to store adverbs and their positions\n    adverbs = {}\n\n    # Loop through each word and check if it is an adverb\n    for i, word in enumerate(words):\n        if word.endswith('ing') or word.endswith('ly'):\n            # Check if the next word is also an adverb\n            if i < len(words) - 1:\n                next_word = words[i+1].lower()\n                if next_word.endswith('ing') or next_word.endswith('ly'):\n                    # Both words are adverbs, add them to the dictionary\n                    adverbs[(word, next_word)] = (i, i+1)\n\n    return adverbs"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverb_position(text):\n    \"\"\"\n    Write a function to find the first adverb and their positions in a given sentence.\n    \"\"\"\n    pattern = r'\\b(?:adv|adv\\.)\\b'\n    adverbs = re.findall(pattern, text, re.IGNORECASE)\n\n    if adverbs:\n        print(\"The adverb(s) are:\", \" \".join(adverbs))\n        print(\"The adverb(s) are located at positions:\", \", \".join([str(i) for i in range(len(adverbs))]))\n    else:\n        print(\"No adverbs found in the sentence.\")"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Remove punctuation and split the text into words\n    words = re.findall(r'\\b\\w+\\b', text)\n    # Initialize an empty list to store adverbs and their positions\n    adverbs = []\n    # Loop through each word in the list\n    for i, word in enumerate(words):\n        # Check if the word is an adverb\n        if re.match(r'(.*?[a-z])(-ly|ly)?$', word, re.IGNORECASE):\n            # If it is, add it to the list of adverbs and its position in the sentence\n            adverbs.append((word, i))\n    # Return the list of adverbs and their positions\n    return adverbs"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverb_position(text):\n    # Use a regular expression to split the text into words\n    words = re.findall(r'\\w+', text)\n\n    # Initialize an empty list to store the adverbs and their positions\n    adverbs = []\n\n    # Loop through each word in the list\n    for i, word in enumerate(words):\n        # Check if the word is an adverb\n        if re.match(r'\\b(really|really|just|really)\\b', word):\n            # Add the adverb and its position to the list\n            adverbs.append((word, i))\n\n    # Sort the list of adverbs by their position in the sentence\n    adverbs = sorted(adverbs, key=lambda x: x[1])\n\n    # Return the list of adverbs and their positions\n    return adverbs"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverb_position(text):\n    \"\"\"\n    This function finds the first adverb and their positions in a given sentence.\n    \n    Parameters:\n    text (str): The sentence in which the adverb is to be searched.\n    \n    Returns:\n    list: A list of tuples containing the adverb and its position in the sentence.\n    \"\"\"\n\n    # Define the regular expression pattern for finding adverbs\n    pattern = r'\\b[a-zA-Z]+\\b'\n\n    # Use re.findall() function to find all the matches in the sentence\n    matches = re.findall(pattern, text)\n\n    # Create a list of tuples containing the adverb and its position in the sentence\n    adverbs = []\n\n    # Loop through all the matches and create a tuple for each adverb\n    for match in matches:\n        adverb = match.lower()\n        position = text.lower().index(match)\n        adverbs.append((adverb, position))\n\n    return adverbs"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Create a regular expression pattern to match adverbs\n    pattern = re.compile(r'(\\w+(s|ed|ing|ly))(\\w*)')\n    # Find all matches in the text using the pattern\n    matches = pattern.findall(text)\n    # Check if there are any matches\n    if matches:\n        # Print the first adverb and its positions\n        print(f\"Adverb: {matches[0][0]} - Positions: {matches[0][1]}\")"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    area = 6 * l**2  # the formula for the surface area of a cube\n    return area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    # Calculate the surface area of a cube using the formula:\n    # A = 6 * l^2\n    area = 6 * l**2\n    # Return the surface area of the cube\n    return area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    \"\"\"\n    Write a function to find the surface area of a cube of a given size.\n    \"\"\"\n    return 6 * l ** 2\n"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6*l*l + 24*l + 36\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l * l\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2\n"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l*l + 2*l + 2"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # create an array to store the count of positive numbers\n    arr = array('i')\n    for num in nums:\n        if num > 0:\n            arr.append(1)\n        else:\n            arr.append(0)\n    # calculate the total count of numbers\n    total_count = sum(arr)\n    # calculate the ration of positive numbers\n    ration = arr[1] / total_count\n    # print the ration of positive numbers\n    print(\"The ration of positive numbers is:\", ration)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    zero_count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n        elif num == 0:\n            zero_count += 1\n    return count / zero_count"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n\n    # create an array to store the positive numbers\n    positive_nums = array('i')\n\n    # iterate through the array and count the positive numbers\n    for num in nums:\n        if num > 0:\n            positive_nums.append(num)\n\n    # calculate the ration of positive numbers\n    if len(positive_nums) == 0:\n        return 0\n    else:\n        return len(positive_nums) / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    pos_arr = array('i', [0])\n    for num in nums:\n        if num > 0:\n            pos_count += 1\n            pos_arr.append(num)\n    if pos_count == 0:\n        return 0\n    else:\n        return pos_arr.item(pos_count-1)/pos_count"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n\n    # create an array to store the count of positive numbers\n    counts = array('i', [0] * (max(nums) + 1))\n\n    # iterate through the array and count the positive numbers\n    for num in nums:\n        counts[num] += 1\n\n    # calculate the ration of positive numbers\n    ratio = 0\n    for count in counts:\n        if count > 0:\n            ratio += 1\n\n    return ratio / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # Convert the array to a list so we can manipulate it\n    nums_list = list(nums)\n\n    # Count the number of positive numbers in the list\n    count = sum(1 for num in nums_list if num > 0)\n\n    # Calculate the ration of positive numbers\n    if count == 0:\n        return 0\n    else:\n        return count / len(nums_list)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef positive_count(nums):\n    \"\"\"\n    Write a function to find the ration of positive numbers in an array of integers.\n    \"\"\"\n    positive_nums = array('i', [0] * len(nums))\n    negative_nums = array('i', [0] * len(nums))\n    for num in nums:\n        if num > 0:\n            positive_nums.append(num)\n        else:\n            negative_nums.append(num)\n    if len(positive_nums) == 0:\n        return 0\n    else:\n        return positive_nums.item(0) / len(positive_nums)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # convert the array to a list\n    arr = list(nums)\n    # count the number of positive numbers\n    count = 0\n    for num in arr:\n        if num > 0:\n            count += 1\n    # find the ration of positive numbers\n    if count == 0:\n        ratio = 0\n    else:\n        ratio = count / len(arr)\n    return ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # Convert the array to an array of integers\n    arr = array('i', nums)\n\n    # Initialize count and total\n    count = 0\n    total = len(arr)\n\n    # Loop through the array and count the positive numbers\n    for num in arr:\n        if num > 0:\n            count += 1\n\n    # Return the ration of positive numbers\n    return count / total"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    This function takes a list as input and returns the largest negative number in the list.\n    \"\"\"\n    # initialize largest negative number as -inf\n    largest_neg_num = float('-inf')\n    \n    # iterate over the list and check if the current number is negative\n    for num in list1:\n        if num < 0 and num > largest_neg_num:\n            largest_neg_num = num\n    \n    # return the largest negative number\n    return largest_neg_num"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    neg_max = -float('inf')\n    for num in list1:\n        if num < 0 and num > neg_max:\n            neg_max = num\n    return neg_max"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = float('-inf')\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_neg(lst):\n    '''\n    This function takes a list as input and returns the largest negative number in the list.\n    '''\n    if lst == []:\n        return None\n    elif len(lst) == 1:\n        return lst[0]\n    else:\n        largest = max(lst)\n        if largest < 0:\n            return largest\n        else:\n            return largest_neg(lst[lst.index(largest)+1:])"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_num = list1[0] # initialize largest_num with the first element of list1\n    for num in list1: \n        if num < 0 and num > largest_num: # check if the current element is negative and greater than largest_num\n            largest_num = num # update largest_num if the current element is negative and greater than largest_num\n    return largest_num # return the largest negative number"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_neg(list1):\n    '''\n    This function takes a list as an input and returns the largest negative number in the list.\n    '''\n    largest = float('-inf')\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = None\n    for num in list1:\n        if num < 0 and (largest is None or num > largest):\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    neg_count = 0\n    largest = -1\n    for num in list1:\n        if num < 0:\n            neg_count += 1\n            if num > largest:\n                largest = num\n    if neg_count == 0:\n        print(\"There is no negative number in the list.\")\n    else:\n        print(\"The largest negative number in the list is:\", largest)"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_num = list1[0]\n    for num in list1:\n        if num < 0 and num > largest_num:\n            largest_num = num\n    return largest_num"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = float('-inf')\n    for num in list1:\n        if num < 0 and num > max_neg:\n            max_neg = num\n    return max_neg"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    \"\"\"\n    Write a function to trim each tuple by k in the given tuple list.\n    \"\"\"\n    # Loop through each tuple in the list\n    for i in range(len(test_list)):\n        # Trim each tuple by k in the list\n        test_list[i] = tuple(test_list[i][j] for j in range(len(test_list[i])) if j % K!= 0)"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # Initialize an empty list to store the trimmed tuples\n    trimmed_list = []\n    for i in range(len(test_list)):\n        # Initialize a new tuple with the first k elements of the original tuple\n        new_tuple = tuple(test_list[i][:K])\n        # Append the new tuple to the trimmed list\n        trimmed_list.append(new_tuple)\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [tuple(t[i:i+K]) for t in test_list]"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    \"\"\"\n    Write a function to trim each tuple by k in the given tuple list.\n    \"\"\"\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if len(test_list[i][j]) > K:\n                test_list[i][j] = test_list[i][j][:K]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # Loop through each tuple in the list\n    for tup in test_list:\n        # Check if the length of the tuple is greater than k\n        if len(tup) > K:\n            # Remove the first k elements of the tuple\n            tup = tup[K:]\n    # Return the modified list of tuples\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for i in range(len(test_list)):\n        trimmed_list.append(tuple(test_list[i][j] for j in range(len(test_list[i])) if j % K!= 0))\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        if len(test_list[i]) > K:\n            test_list[i] = test_list[i][:K]\n        else:\n            for j in range(K - len(test_list[i])):\n                test_list[i].append('')\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for i in range(len(test_list)):\n        temp = test_list[i]\n        if len(temp) <= K:\n            trimmed_list.append(temp)\n        else:\n            for j in range(K):\n                temp.pop(0)\n            trimmed_list.append(temp)\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        if len(test_list[i]) > K:\n            test_list[i] = test_list[i][:K]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for tup in test_list:\n        if len(tup) > K:\n            tup = tup[:K]\n        elif len(tup) < K:\n            tup += (K - len(tup)) * (None,)\n    return test_list"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] *= test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples should have the same number of elements.\")\n        return\n    \n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    \n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples should have same length!\")\n        return\n    \n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    \n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] * test_tup2[i])\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # Check if the tuples are of the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples must have the same length.\")\n        return None\n    \n    # Initialize an empty list to store the result\n    result_list = []\n    \n    # Perform index wise multiplication of tuple elements\n    for i in range(len(test_tup1)):\n        result_list.append(test_tup1[i] * test_tup2[i])\n        \n    # Return the result list\n    return result_list"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] *= test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples as input and returns a new tuple where the elements at each index are multiplied.\n    \"\"\"\n    new_tup = []\n    for i in range(len(test_tup1)):\n        new_tup.append(test_tup1[i] * test_tup2[i])\n    return new_tup"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = {}\n    for item in lst:\n        if item in tup:\n            count_dict[item] = count_dict.get(item, 0) + 1\n    \n    return Counter(count_dict)"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    \"\"\"\n    Write a python function to count the occurence of all elements of list in a tuple.\n    \"\"\"\n    count_dict = Counter(lst)  # count the occurence of elements in the list\n    final_dict = {}\n    for key, value in count_dict.items():  # iterate over the keys and values in the count_dict\n        if key in tup:  # check if the key is in the tuple\n            if key not in final_dict:  # check if the key is already in the final_dict\n                final_dict[key] = value\n            else:\n                final_dict[key] += value  # if the key is already in the final_dict, add the value to it\n    return final_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    \"\"\"\n    Count the occurrence of all elements of list in a tuple.\n    \"\"\"\n    # Convert the tuple into a list\n    tup_list = list(tup)\n    # Create a Counter object from the list\n    counter = Counter(tup_list)\n    # Count the occurrences of each element in the list\n    count = counter.most_common()\n    # Create a new list with the count for each element\n    new_list = []\n    for i in count:\n        new_list.append((i[0], tup_list.count(i[0])))\n    return new_list"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(lst) \n    return tuple((x, count[x]) for x in tup) "
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    This function takes in a tuple and a list as input and returns a dictionary containing the count of each element in the list in the tuple.\n    '''\n    count_dict = Counter(tup)\n    for key in count_dict: \n        if key in lst: \n            count_dict[key] += 1 \n    return count_dict "
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(lst) \n    count_tup = tuple(count_dict.items())\n    for item in tup: \n        if item in count_dict: \n            count_dict[item] += 1 \n    count_dict = Counter(count_dict.items())\n    count_tup = tuple(count_dict.items())\n    return count_tup"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n\n    # convert tuple to list\n    lst = list(tup)\n\n    # count the frequency of each element in the list\n    count = Counter(lst)\n\n    # print the frequency of each element\n    for key, value in count.items():\n        print(f'{key}: {value}')"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # Create a Counter object from the tuple and list \n    count = Counter(tup) + Counter(lst)\n    # Return the count dictionary \n    return count.most_common()"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = {}\n    for elem in lst:\n        if elem in count_dict:\n            count_dict[elem] += 1\n        else:\n            count_dict[elem] = 1\n    return Counter(tup).most_common(len(tup))"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(tup) # Count the occurrence of each element in the tuple\n    for i in range(len(lst)): # Iterate over the list\n        if lst[i] in count_dict: # Check if the element is present in the tuple\n            count_dict[lst[i]] += 1 # Increment the count of the element in the dictionary\n    return count_dict"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    \"\"\"\n    Write a function to find cubes of individual elements in a list.\n    \"\"\"\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    for num in nums:\n        print(num**3)"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    \"\"\"\n    Write a function to find cubes of individual elements in a list.\n    \"\"\"\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += (i/2)*(i/2+1)\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cal_sum(n): \n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    sum_perrin = 0\n    for i in range(1, n+1):\n        sum_perrin += 1/i**2\n    return sum_perrin"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**2\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        if i % 2 == 0:\n            sum += i * (2 * i - 1)\n        else:\n            sum += i * (2 * i - 1) + 1\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += perrin_number(i)\n    return sum\n\n\ndef perrin_number(n):\n    '''\n    Write a function to calculate a Perrin number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 1\n    elif n == 4:\n        return 2\n    elif n == 5:\n        return 2\n    else:\n        return 1 + 4 * (n - 2)\n"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of Perrin numbers.\n    '''\n    p = 1\n    s = 0\n    \n    while p <= n:\n        s += p\n        p += 4\n    \n    return s"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    # Initialize the sum variable to zero\n    perrin_sum = 0\n    # Loop from 1 to n\n    for i in range(1, n+1):\n        # Calculate the perrin number\n        perrin_num = (i*i*3*i*i*i)\n        # Add the perrin number to the sum\n        perrin_sum += perrin_num\n    # Return the sum\n    return perrin_sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_numbers = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20]\n    return sum(perrin_numbers[:n])"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_num = 1\n    sum_perrin_num = 0\n    while perrin_num <= n:\n        sum_perrin_num += perrin_num\n        perrin_num += 2\n    return sum_perrin_num\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The sum of perrin numbers upto\", n, \"is:\", cal_sum(n))"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(n+1):\n        sum += (i*(3*i-1))/2\n    return sum"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_string(str_list, l):\n    \"\"\"\n    Write a function to extract specified size of strings from a given list of string values.\n    \"\"\"\n    # Create an empty list to store the extracted strings\n    extracted_strings = []\n\n    # Iterate over the list of strings\n    for string in str_list:\n        # If the length of the string is less than or equal to the specified length, append it to the list\n        if len(string) <= l:\n            extracted_strings.append(string)\n\n        # If the length of the string is greater than the specified length, truncate it to the specified length and append it to the list\n        else:\n            truncated_string = string[:l]\n            extracted_strings.append(truncated_string)\n\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_string(str_list, size):\n    result = []\n    for s in str_list:\n        if len(s) >= size:\n            result.append(s[:size])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of strings and a specified size of string as input and returns a list of extracted strings.\n    '''\n    extracted_list = []\n    for i in range(len(str_list)):\n        if len(str_list[i]) >= size:\n            extracted_list.append(str_list[i][:size])\n    return extracted_list"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    # initialize an empty list to store the extracted strings\n    extracted_strings = []\n    # loop through the list of strings\n    for s in l:\n        # if the length of the string is greater than or equal to the specified size, extract it\n        if len(s) >= l:\n            # extract the specified size of characters from the string\n            extracted_string = s[:l]\n            # add the extracted string to the list of extracted strings\n            extracted_strings.append(extracted_string)\n    # return the list of extracted strings\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_string(str_list, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    extracted_strings = []\n    for i in range(0, len(str_list), l):\n        extracted_strings.append(' '.join(str_list[i:i+l]))\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_string(str_list, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    extracted_list = []\n    for i in range(len(str_list)):\n        extracted_list.append(str_list[i][:l])\n    return extracted_list"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of string values and a specified size as input and returns a new list with the extracted strings.\n    '''\n    new_list = []\n    for i in range(len(str_list)):\n        if len(str_list[i]) == size:\n            new_list.append(str_list[i])\n    return new_list"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_string(str_list, size):\n    '''\n    Extract specified size of strings from a given list of string values.\n\n    Parameters:\n    str_list (list): A list of string values.\n    size (int): The size of the strings to extract.\n\n    Returns:\n    list: A list of string values with the specified size.\n    '''\n\n    # Initialize an empty list to store the extracted strings\n    extracted_strings = []\n\n    # Iterate through the list of strings\n    for string in str_list:\n        # Extract the specified size of the string\n        extracted_string = string[:size]\n        # Append the extracted string to the list\n        extracted_strings.append(extracted_string)\n\n    # Return the extracted list of strings\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    This function takes a list of strings and the size of each string as input and returns a new list of extracted strings.\n    \"\"\"\n    new_list = []\n    for i in range(0, len(str_list), size):\n        new_list.append(\" \".join(str_list[i:i+size]))\n    return new_list"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_string(str_list, l):\n    '''\n    This function takes a list of strings and the size of each string as input and returns a list of strings of size l.\n    '''\n    result = []\n    for i in range(len(str_list)):\n        result.append(str_list[i][:l])\n    return result"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    '''\n    This function removes all whitespaces from the given string.\n    '''\n    pattern = re.compile('\\s+')\n    return pattern.sub('', text)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    This function removes all whitespaces from the given string.\n    '''\n    # Remove all whitespaces from the string using regular expression\n    text1 = re.sub(r'\\s+','', text1)\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    \"\"\"\n    Remove all whitespaces from the given string.\n\n    Args:\n    text (str): The string from which to remove whitespaces.\n\n    Returns:\n    str: The string with all whitespaces removed.\n    \"\"\"\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    \"\"\"\n    Write a function to remove all whitespaces from the given string.\n    \"\"\"\n    text = re.sub(r'\\s+','', text1)\n    return text"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Remove all whitespaces from the string using regular expressions\n    text1 = re.sub(r'\\s+','', text1)\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    This function takes a string as input and removes all whitespaces from it.\n    '''\n    text1 = re.sub(r'\\s+','', text1) #replace all consecutive whitespaces with a single space\n    text1 = text1.strip() #remove leading and trailing whitespaces\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    This function removes all whitespaces from the given string.\n    '''\n\n    # Use regular expression to remove all whitespaces\n    text2 = re.sub('\\s+','', text1)\n\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+','', text1)\n"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub('\\s+','', text)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    pattern = r'\\s+'\n    text1 = re.sub(pattern,'', text1)\n    return text1"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost <= sale_amount: \n        return 0 \n    else: \n        return sale_amount - actual_cost "
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        loss_amount = sale_amount - actual_cost\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    \"\"\"\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    \"\"\"\n    if sale_amount > actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        loss_amount = sale_amount - actual_cost\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost,sale_amount):\n    if sale_amount < actual_cost:\n        loss_amount = sale_amount - actual_cost\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost,sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        loss = actual_cost - sale_amount\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n\n    if sale_amount >= actual_cost:\n        loss_amount = sale_amount - actual_cost\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount <= actual_cost:\n        return 0\n    else:\n        return sale_amount - actual_cost"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n\n    evenFactors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0 and n % (i+2) == 0:\n            evenFactors.append(i)\n\n    return sum(evenFactors)\n\nprint(sumofFactors(28)) # Output: 16\n"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    # Initialize sum to zero\n    sum = 0\n\n    # Loop through odd numbers from 3 to n-1\n    for i in range(3, n+1, 2):\n        # If i is a factor of n, add it to sum\n        if math.gcd(i, n) == 1:\n            sum += i\n\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and n % (i+2) == 0:\n            sum += i + n // i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1, 2):\n        if n%i == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n\n    # check if n is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    # initialize the sum variable to 0\n    sum = 0\n\n    # loop through all the odd numbers from 3 to n/2 (inclusive)\n    for i in range(3, n//2 + 1, 2):\n        # check if i is a factor of n\n        if n % i == 0:\n            # if i is even, add it to the sum\n            if i % 2 == 0:\n                sum += i\n\n    # return the sum\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef sumofFactors(n): \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1, 2): \n        if n % i == 0: \n            sum += i\n    return sum "
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef sumofFactors(n): \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    # initialize a variable to store the sum of even factors\n    sum_even_factors = 0\n    # loop through all even numbers less than or equal to the square root of the input number\n    for i in range(2, int(math.sqrt(n))+1): \n        # check if the input number is divisible by i\n        if n % i == 0: \n            # check if i is even\n            if i % 2 == 0: \n                # add i to the sum of even factors\n                sum_even_factors += i \n    return sum_even_factors"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    i = 2\n    while i*i <= n:\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n            n //= i\n        else:\n            i += 1\n    if n > 1:\n        if n % 2 == 0:\n            sum += n\n    return sum"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-z]*z[a-z]*\\b'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-z]+\\sz\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b[a-zA-Z]+z\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w*[zZ]\\w*\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b[a-zA-Z]+z\\b'\n    return re.findall(pattern, text)\n"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # regular expression pattern to match a word containing 'z'\n    pattern = r'\\b[a-zA-Z0-9]+z\\b'\n    \n    # search the text for the pattern\n    match = re.search(pattern, text)\n    \n    # check if the match was found\n    if match:\n        # return the matched word\n        return match.group()\n    else:\n        # return None if no match was found\n        return None"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+z\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w+z\\b'\n    return re.findall(pattern, text)"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w+z\\b'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w*z\\w*\\b'\n    match = re.search(pattern, text)\n    \n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum2 in [4, 6, 9, 11]:\n        return False\n    else:\n        return None"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    This function checks whether a given month number contains 31 days or not.\n    '''\n    if monthnum < 1 or monthnum > 12:\n        print(\"Invalid month number!\")\n        return\n    \n    days_in_month = {\n        1: 31,\n        2: 28,\n        3: 31,\n        4: 30,\n        5: 31,\n        6: 30,\n        7: 31,\n        8: 31,\n        9: 30,\n        10: 31,\n        11: 30,\n        12: 31\n    }\n    \n    if days_in_month[monthnum] == 31 and monthnum!= 2:\n        print(\"The given month number contains 31 days.\")\n    elif days_in_month[monthnum] == 28 and monthnum == 2:\n        print(\"The given month number contains 28 days.\")\n    else:\n        print(\"The given month number does not contain 31 days.\")"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    \"\"\"\n    Write a function to check whether the given month number contains 31 days or not.\n    \"\"\"\n    if monthnum2 == 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 2 and (year % 4 == 0 and (year % 100!= 0 or year % 400 == 0)):\n        return True\n    elif monthnum2 in [4, 6, 9, 11]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    # check if the month number is valid\n    if monthnum < 1 or monthnum > 12:\n        print(\"Invalid month number!\")\n        return\n\n    # check the number of days in each month\n    days_in_month = {\n        1: 31,\n        2: 28,\n        3: 31,\n        4: 30,\n        5: 31,\n        6: 30,\n        7: 31,\n        8: 31,\n        9: 30,\n        10: 31,\n        11: 30,\n        12: 31\n    }\n\n    # check if the given month number has 31 days\n    if days_in_month[monthnum] == 31:\n        print(f\"{monthnum} has 31 days\")\n    else:\n        print(f\"{monthnum} doesn't have 31 days\")"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 2:\n        return True\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return True\n    elif monthnum2 % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n\n    if monthnum2 % 100 == 0 and (monthnum2 % 4 == 0 or monthnum2 % 400 == 0):\n        if monthnum2 % 4 == 0:\n            days = 366\n        else:\n            days = 365\n    else:\n        if monthnum2 % 2 == 0:\n            days = 30\n        else:\n            days = 28\n\n    if monthnum2 == 2 and year % 4 == 0:\n        days = 29\n\n    if monthnum2 > 12 or monthnum2 < 1:\n        return \"Invalid Month Number\"\n\n    return days"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    \"\"\"\n    Write a function to check whether the given month number contains 31 days or not.\n    \"\"\"\n    # Define the month dictionary with the month number and its corresponding number of days\n    month_dict = {1: 31, 2: 28, 3: 31, 4: 30, 5: 31, 6: 30, 7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31}\n    # Check if the month number exists in the dictionary\n    if monthnum2 in month_dict:\n        # If the month number exists, check if the number of days is 31 or 30\n        if month_dict[monthnum2] == 31:\n            return True\n        elif month_dict[monthnum2] == 30:\n            # Check if the year is a leap year or not\n            if (year % 4 == 0 and year % 100!= 0) or (year % 400 == 0):\n                return True\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    # convert the input month number to integer\n    monthnum = int(monthnum2)\n    \n    # check if the input month number is between 1 and 12\n    if monthnum < 1 or monthnum > 12:\n        return 'Invalid input'\n    \n    # check if the input month number contains 31 days\n    if monthnum == 2 or monthnum == 4 or monthnum == 6 or monthnum == 9 or monthnum == 11:\n        return 'This month has 31 days'\n    else:\n        return 'This month has 30 days'"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 % 12 == 2:\n        if monthnum2 % 4 == 0 and (monthnum2 % 100!= 0 or monthnum2 % 400 == 0):\n            if monthnum2 % 2 == 0:\n                return True\n            else:\n                return False\n        else:\n            if monthnum2 % 2 == 0:\n                return True\n            else:\n                return False\n    else:\n        if monthnum2 % 3 == 0 and monthnum2 % 5 == 0:\n            return True\n        else:\n            return False"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n\n    # Loop through each string in the list\n    for i in range(len(stringlist)):\n        # Reverse the string by slicing it in reverse order\n        stringlist[i] = stringlist[i][::-1]\n\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_string = string[::-1]\n        reversed_list.append(reversed_string)\n    return reversed_list"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    \"\"\"\n    Write a function to reverse each string in a given list of string values.\n    \"\"\"\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min(lst):\n    # Initialize min_len and min_lst to the maximum possible value\n    min_len = float('inf')\n    min_lst = []\n\n    # Iterate over all sublists in lst\n    for i in range(len(lst)):\n        # Find the length of each sublist\n        sublist_len = len(lst[i])\n\n        # If the length of the sublist is less than min_len, update min_len and min_lst\n        if sublist_len < min_len:\n            min_len = sublist_len\n            min_lst = lst[i]\n\n    # Return the minimum sublist\n    return min_lst"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = len(lst)\n    min_sublist = lst\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    min_sublist = lst[0]\n    for sublist in lst[1:]:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = len(lst[0])\n    min_sublist = lst[0]\n    \n    for i in range(1, len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n            min_sublist = lst[i]\n    \n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = len(lst[0])\n    min_sublist = lst[0]\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    # initialize minimum length\n    min_len = len(lst[0])\n\n    # loop through each sublist and check its length\n    for sublist in lst: \n        if len(sublist) < min_len:\n            min_len = len(sublist)\n\n    # create a new list containing the sublist with minimum length\n    min_lst = []\n    for sublist in lst: \n        if len(sublist) == min_len:\n            min_lst.append(sublist)\n\n    # return the minimum length sublist\n    return min_lst"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = len(lst[0])\n    min_sublist = lst[0]\n\n    for i in range(1, len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n            min_sublist = lst[i]\n\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    # Initialize minimum sublist length and the first sublist in the list as min_sublist\n    min_len = float('inf')\n    min_sublist = lst[0]\n    \n    # Iterate through the list\n    for i in range(1, len(lst)):\n        # Check if the current sublist has a length less than the minimum length\n        if len(lst[i]) < min_len:\n            # Update the minimum sublist length and the first sublist in the list\n            min_len = len(lst[i])\n            min_sublist = lst[i]\n    \n    # Return the minimum sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf')\n    min_sublist = []\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n    return min_sublist\n"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf')  # initializing the minimum length to infinity\n    min_sublist = []  # initializing an empty list to store the minimum sublist\n    \n    for i in lst:\n        if len(i) < min_len:  # checking if the length of the sublist is less than the current minimum length\n            min_len = len(i)  # updating the minimum length\n            min_sublist = i  # updating the minimum sublist\n            \n    return min_sublist"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    print(\"The area of the rectangle is\", area)"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area\n"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rectangle_area(length, breadth):\n    '''\n    This function calculates the area of a rectangle.\n    '''\n    area = length * breadth\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    area = l * b\n    return area\n"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    print(\"The area of the rectangle is:\", area)"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # define a regular expression to match uppercase substrings\n    pattern = r'(?i)[A-Z]+'\n    # use the re.sub() function to replace uppercase substrings with an empty string\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_uppercase(string):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = re.compile(r'(?i)[A-Z]')\n    return pattern.sub('', string)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str1 = re.sub(r'\\b[A-Z]\\w*\\b', '', str1)\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_uppercase(string):\n    \"\"\"\n    Remove uppercase substrings from a given string.\n    \"\"\"\n    # Define the pattern to match uppercase substrings\n    pattern = r'(?i)\\b[A-Z][a-z]+\\b'\n\n    # Use regular expression findall() method to find all uppercase substrings\n    matches = re.findall(pattern, string)\n\n    # Loop through all matches and replace them with an empty string\n    for match in matches:\n        string = string.replace(match, '')\n\n    # Return the modified string\n    return string"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_uppercase(string):\n    '''\n    This function takes a string as input and removes all uppercase substrings from it.\n    '''\n    # Find all uppercase substrings\n    uppercase_substrings = re.findall('[A-Z]+', string)\n    \n    # Remove all uppercase substrings from the string\n    for uppercase_substring in uppercase_substrings:\n        string = string.replace(uppercase_substring, '')\n    \n    return string"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_uppercase(string):\n    '''\n    This function takes a string as input and removes any uppercase substrings from it.\n    '''\n    string = string.upper()\n    regex = r'[a-z]+'\n    result = re.sub(regex, '', string)\n    return result"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # define a regular expression pattern to match uppercase substrings\n    pattern = r'[A-Z]+'\n    # use the re.sub() method to replace uppercase substrings with an empty string\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Define a regular expression pattern to match uppercase substrings\n    uppercase_pattern = re.compile(r'[A-Z]+')\n    # Find all uppercase substrings in the string\n    uppercase_substrings = uppercase_pattern.findall(str1)\n    # Remove all uppercase substrings from the string\n    for substring in uppercase_substrings:\n        str1 = str1.replace(substring, '')\n    # Return the modified string\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_uppercase(string):\n    '''\n    This function takes a string as input and removes all uppercase substrings from it.\n    '''\n    pattern = re.compile(r'(?i)\\b[A-Z][A-Z0-9]*\\b') # regex pattern for uppercase substrings\n    return re.sub(pattern, '', string) # use regex to remove uppercase substrings from the string"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = re.compile(r'[A-Z]+')\n    return pattern.sub('', str1)"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for item in lst:\n        if isinstance(item, list):\n            result.append(Extract(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for item in lst:\n        result.append(item[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        if sublist:\n            result.append(sublist[0])\n        else:\n            continue\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [item[0] for sublist in lst for item in sublist]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Extract(lst):\n    '''\n    This function takes a list as an argument and returns a new list with the first element of each sublist.\n    '''\n    res = []\n    for sublist in lst:\n        if len(sublist) > 0:\n            res.append(sublist[0])\n    return res"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        if sublist:\n            result.append(sublist[0])\n    return result"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_count = 0\n    for char in str:\n        if char.isupper():\n            upper_count += 1\n    return upper_count"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    This function takes a list as input and generates all possible combinations of its elements.\n    '''\n    if len(list1) == 0:\n        return []\n    elif len(list1) == 1:\n        return [list1]\n    else:\n        result = []\n        for i in range(len(list1)):\n            sublist = list1[:i] + list1[i+1:]\n            for comb in combinations_list(sublist):\n                result.append(list1[i] + comb)\n        return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def combinations_list(lst):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(1, len(lst) + 1):\n        for j in range(1, len(lst) + 1):\n            for k in range(i, len(lst) + 1):\n                result.append(lst[k-1])\n    return result\n"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combinations = []\n    for i in range(1, len(list1)+1):\n        for j in range(len(list1)//i+1):\n            combinations.append(list1[j*i:j*i+i])\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            print(list1[i:j])"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    n = len(list1)\n    result = []\n    for i in range(n):\n        for j in range(i+1, n+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def combinations_list(lst):\n    \"\"\"\n    Find all possible combinations of the elements of a given list.\n\n    Parameters:\n    lst: list\n        The list of elements to find combinations of.\n\n    Returns:\n    list\n        A list of all possible combinations of the elements in the input list.\n    \"\"\"\n\n    # Initialize the result list\n    result = []\n\n    # Helper function to generate all possible combinations\n    def helper(lst, curr_comb, comb_list):\n        \"\"\"\n        Helper function to generate all possible combinations of the elements of a given list.\n\n        Parameters:\n        lst: list\n            The list of elements to find combinations of.\n        curr_comb: list\n            The current combination being built.\n        comb_list: list\n            The list of all possible combinations so far.\n        \"\"\"\n\n        # Base case: if there are no more elements to choose from, add the combination to the result list\n        if not lst:\n            comb_list.append(curr_comb[:])\n            return\n\n        # Recursive case: choose the next element from the list and add it to the combination\n        for i in range(len(lst)):\n            # If we haven't reached the limit on the current combination, add the element and continue building the next combination\n            if i >= len(curr_comb):\n                helper(lst[i+1:], curr_comb+[lst[i]], comb_list)\n            # If we have reached the limit on the current combination, but haven't reached the limit on the rest of the list, add the element and continue building the current combination\n            elif i+1 < len(lst):\n                helper(lst[i+1:], curr_comb, comb_list)\n\n    # Call the helper function to generate all possible combinations\n    helper(lst, [], result)\n\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n\n    # Initialize an empty list to store the combinations\n    combinations = []\n\n    # Loop through each element in the list\n    for i in range(len(list1)):\n        # Loop through each element in the remaining elements of the list\n        for j in range(i+1, len(list1)+1):\n            # Append the current combination to the list of combinations\n            combinations.append(list1[i:j])\n\n    # Return the list of combinations\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    for i in range(1, len(list1) + 1):\n        for j in range(len(list1) - i + 1):\n            print(list1[j:j+i])"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    n = len(list1)\n    result = []\n    for i in range(n):\n        for j in range(i+1, n+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = arr[0]\n    max_ending_here = 1\n    min_ending_here = 1\n    \n    for i in range(1, len(arr)):\n        max_ending_here = max(max_ending_here * arr[i], arr[i], max_ending_here)\n        min_ending_here = min(min_ending_here * arr[i], arr[i], min_ending_here)\n        \n        max_so_far = max(max_so_far, max_ending_here)\n        \n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    current_product = 1\n    start_index = 0\n\n    for i in range(len(arr)):\n        if i == 0:\n            current_product = 1\n        elif i == 1:\n            current_product = arr[i]\n            start_index = 0\n        else:\n            current_product = max(arr[i], arr[i] * current_product)\n\n        if current_product > max_product:\n            max_product = current_product\n            max_start_index = start_index\n            max_end_index = i\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    current_product = 1\n    \n    for i in range(len(arr)):\n        if arr[i] > 0:\n            current_product *= arr[i]\n        else:\n            if current_product > max_product:\n                max_product = current_product\n            current_product = 1\n    \n    if current_product > max_product:\n        max_product = current_product\n    \n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    '''\n    This function takes an array as input and returns the maximum product subarray.\n    '''\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    \n    max_product = arr[0]\n    curr_product = arr[0]\n    \n    for i in range(1, len(arr)):\n        if curr_product < 0:\n            curr_product = arr[i]\n        else:\n            curr_product *= arr[i]\n            \n        max_product = max(max_product, curr_product)\n        \n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    if not arr:\n        return 0\n    \n    # Initialize variables to keep track of the maximum and minimum products seen so far\n    max_product = arr[0]\n    min_product = arr[0]\n    \n    # Iterate through the array and update the maximum and minimum products as needed\n    for num in arr:\n        max_product = max(max_product * num, num)\n        min_product = min(min_product * num, num)\n        \n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    max_ending_here_minus_min_ending_here = arr[0]\n    max_product = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(max_ending_here * arr[i], max_ending_here, arr[i])\n        min_ending_here = min(min_ending_here * arr[i], min_ending_here, arr[i])\n        max_ending_here_minus_min_ending_here = max(max_ending_here_minus_min_ending_here * arr[i], max_ending_here - min_ending_here, arr[i])\n        max_product = max(max_product, max_ending_here_minus_min_ending_here)\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    This function takes an array as input and returns the maximum product subarray.\n    \"\"\"\n    max_product = arr[0]\n    current_product = 1\n    max_so_far = arr[0]\n    for i in range(1, len(arr)):\n        current_product = max(arr[i], current_product * arr[i])\n        max_so_far = max(max_so_far, current_product)\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = arr[0]\n    current_product = 1\n\n    for i in range(1, len(arr)):\n        current_product = max(arr[i], current_product * arr[i])\n        max_product = max(max_product, current_product)\n\n    return max_product"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(set(dict.values())) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = list(dict.values())\n    if len(values) == 1:\n        return True\n    elif len(set(values)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    This function takes a dictionary as input and a value n as input.\n    The function checks if all the values in the dictionary are equal to n.\n    If all values are equal to n, then it returns True, else False.\n    '''\n    if len(dict) > 0:\n        for value in dict.values():\n            if value!= n:\n                return False\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = set(dict.values())\n    if len(values) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in range(len(dict[0])):\n        if len(set(dict[j][i] for j in range(len(dict))))!= 1:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    return all(dict[key] == dict[n] for key in dict)"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict.keys()) < n:\n        return False\n    value = dict.values()[0]\n    for i in range(len(dict.values())):\n        if dict.values()[i]!= value:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) == 0:\n        return True\n    \n    for value in dict.values():\n        if value!= dict[list(dict.keys())[0]]:\n            return False\n    \n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = []\n    for key in dict:\n        values.append(dict[key])\n    if len(set(values)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    \"\"\"\n    Write a function to check if all values are same in a dictionary.\n    \"\"\"\n    count = 0\n    for value in dict.values():\n        if count == 0:\n            count += 1\n            if value == dict.values()[0]:\n                continue\n            else:\n                return False\n        elif value == dict.values()[0]:\n            count += 1\n        else:\n            return False\n    return True"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for key, value in dict1.items():\n        if value!= '':\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for key, value in dict1.items():\n        if value:\n            dict1[key] = value\n        else:\n            del dict1[key]\n    return dict1"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    # Create an empty dictionary to store the filtered items\n    filtered_dict = {}\n    \n    # Loop through each item in the original dictionary\n    for item in dict1.items():\n        # If the item value is not an empty string or a list with only empty strings, add it to the filtered dictionary\n        if isinstance(item[1], str) and item[1].strip()!= '':\n            filtered_dict[item[0]] = item[1]\n    \n    return filtered_dict"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v is not None and v!= ''}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k:v for k,v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v is not None}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    # loop through the dictionary and drop any empty items\n    for key, value in dict1.items():\n        if not value:\n            del dict1[key]\n\n    return dict1"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    # Initialize the maximum and minimum values\n    max_so_far = arr[0]\n    min_so_far = arr[0]\n    max_ending_here = arr[0]\n    \n    # Iterate over the array and update the maximum and minimum values as we go\n    for i in range(1, len(arr)):\n        # Update the maximum value\n        max_ending_here = max(max_ending_here * arr[i], arr[i], max_ending_here * arr[i])\n        # Update the minimum value\n        min_ending_here = min(min_ending_here * arr[i], arr[i], min_ending_here * arr[i])\n        # Update the maximum and minimum values at the same time\n        max_so_far = max(max_so_far, max_ending_here)\n        min_so_far = min(min_so_far, min_ending_here)\n        \n    # Return the maximum product\n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    n = len(arr)\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n\n    for i in range(1, n):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n < 2:\n        return 0\n    \n    # Create a 2D array to store the maximum product of increasing subsequences of arr\n    dp = [[0]*n for _ in range(n)]\n    \n    # Initialize the base cases\n    dp[0][0] = arr[0]\n    dp[0][1] = arr[0] * arr[1]\n    \n    # Fill the dp array\n    for i in range(2, n):\n        dp[i][0] = max(arr[i] * dp[i-1][0], arr[i] * dp[i-2][0])\n        dp[i][1] = max(dp[i-1][1], arr[i] * arr[i])\n    \n    # Return the maximum product\n    return max(dp[n-1][0], dp[n-1][1])"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    max_product = arr[0]\n    min_product = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] > max_product:\n            max_product = arr[i]\n        elif arr[i] < min_product:\n            min_product = arr[i]\n        else:\n            continue\n\n        max_product *= arr[i]\n        min_product *= arr[i]\n\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n    if n == 1:\n        return arr[0]\n\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    max_so_far = arr[0]\n\n    for i in range(1, n):\n        if arr[i] > max_ending_here:\n            max_ending_here = arr[i]\n            if min_ending_here < 0:\n                min_ending_here = arr[i]\n        else:\n            min_ending_here = min(min_ending_here, arr[i])\n        max_so_far = max(max_so_far, max_ending_here * min_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product(arr):\n    n = len(arr)\n    if n == 1:\n        return 1\n    \n    # Initialize variables\n    max_product = float('-inf')\n    current_product = 1\n    \n    # Initialize arrays\n    increasing_subseq = [1] * n\n    decreasing_subseq = [1] * n\n    \n    # Fill arrays with increasing and decreasing subsequences\n    for i in range(1, n):\n        if arr[i] > arr[i - 1]:\n            increasing_subseq[i] = increasing_subseq[i - 1] * arr[i]\n            decreasing_subseq[i] = current_product\n        else:\n            increasing_subseq[i] = current_product\n            decreasing_subseq[i] = increasing_subseq[i - 1] * arr[i]\n        \n        current_product = max(increasing_subseq[i], decreasing_subseq[i])\n        \n        # Update max_product\n        max_product = max(max_product, current_product)\n        \n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_so_far = float('-inf')\n    max_ending_here = 1\n    \n    for num in arr:\n        max_ending_here = max(num, max_ending_here * num)\n        max_so_far = max(max_so_far, max_ending_here)\n    \n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product(arr):\n    def max_product_in_subsequence(subsequence):\n        return max(subsequence) * max(subsequence[::-1])\n    \n    max_product = max(arr)\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n    \n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    if len(arr) < 2:\n        return 0\n    \n    max_product_ending_here = arr[0]\n    max_product_so_far = arr[0]\n    \n    for i in range(1, len(arr)):\n        if arr[i] > max_product_ending_here:\n            max_product_ending_here = arr[i]\n        else:\n            max_product_ending_here = max(arr[i], max_product_ending_here * arr[i])\n        \n        max_product_so_far = max(max_product_so_far, max_product_ending_here)\n        \n    return max_product_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    max_so_far = arr[0]\n    min_so_far = arr[0]\n    max_ending_here = arr[0]\n    for i in range(1, n):\n        if arr[i] > max_ending_here:\n            max_ending_here = arr[i]\n            max_so_far = max(max_so_far, max_ending_here)\n        elif arr[i] < min_so_far:\n            min_so_far = arr[i]\n            max_ending_here = arr[i]\n            max_so_far = max(max_so_far, max_ending_here)\n        else:\n            max_ending_here = max(arr[i], max_ending_here)\n    return max_so_far"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # First, get the length of the tuple\n    n = len(test_tup)\n    # Initialize an empty list to store the pairwise sums\n    pairwise_sums = []\n    # Loop through all the possible pairs of indices\n    for i in range(n):\n        for j in range(i+1, n):\n            # Use tuple packing to add the two elements at the current indices\n            pairwise_sum = test_tup[i] + test_tup[j]\n            # Add the pairwise sum to the list of pairwise sums\n            pairwise_sums.append(pairwise_sum)\n    # Return the list of pairwise sums\n    return pairwise_sums"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    This function takes a tuple and returns the sum of the pairwise addition of the neighboring elements.\n\n    Parameters:\n    test_tup (tuple): A tuple of integers.\n\n    Returns:\n    int: The sum of the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n\n    total = 0\n    length = len(test_tup)\n\n    for i in range(length-1):\n        total += test_tup[i] + test_tup[i+1]\n\n    return total"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = 0\n    for i in range(len(test_tup)-1):\n        result += test_tup[i] + test_tup[i+1]\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return 0\n    else:\n        return test_tup[0] + test_tup[1] + add_pairwise(test_tup[1:])"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) == 0:\n        return 0\n    elif len(test_tup) == 1:\n        return test_tup[0]\n    else:\n        first_two = test_tup[:2]\n        last_two = test_tup[-2:]\n        first_sum = add_pairwise(first_two)\n        last_sum = add_pairwise(last_two)\n        return first_sum + last_sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        print(\"The given tuple should have at least two elements.\")\n    else:\n        add_list = []\n        for i in range(len(test_tup) - 1):\n            add_list.append(test_tup[i] + test_tup[i+1])\n        return tuple(add_list)"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n    result = 0\n    for i in range(len(test_tup)):\n        if i == len(test_tup) - 1:\n            result += test_tup[i]\n        else:\n            result += test_tup[i] + test_tup[i+1]\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Initialize the sum variable to zero\n    sum_pairwise = 0\n    \n    # Loop through the tuple to find the pairwise addition\n    for i in range(len(test_tup)-1):\n        sum_pairwise += test_tup[i] + test_tup[i+1]\n    \n    # Return the sum of the pairwise additions\n    return sum_pairwise"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Initialize a variable to store the sum of the neighboring elements\n    pairwise_sum = 0\n    \n    # Loop through the tuple and add the neighboring elements to the sum\n    for i in range(len(test_tup)-1):\n        pairwise_sum += test_tup[i+1]\n        \n    # Return the pairwise sum\n    return pairwise_sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Initialize a list to store the pairwise addition\n    pairwise_sum = []\n    \n    # Loop through the tuple and append the pairwise sum to the list\n    for i in range(len(test_tup)-1):\n        pairwise_sum.append(test_tup[i] + test_tup[i+1])\n    \n    # Return the list of pairwise additions\n    return pairwise_sum"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_remainder(arr, n):\n    # Calculate the product of the array using the formula: arr[0] * arr[1] *... * arr[n-1]\n    product = 1\n    for i in range(n):\n        product *= arr[i]\n\n    # Calculate the remainder using the formula: product % n\n    remainder = product % n\n\n    return remainder"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_remainder(arr, n):\n    '''\n    This function takes in an array and a modulo value n, and returns the product of the array's multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_remainder(arr, n): \n    \"\"\"\n    Write a python function to find the product of the array multiplication modulo n.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product = (product * i) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in range(len(arr)):\n        product = (product*arr[i]) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # Calculate the product of array elements modulo n\n    product = 1\n    for element in arr:\n        product = (product * element) % n\n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    prod = 1\n    for i in range(len(arr)):\n        prod = (prod * arr[i]) % n\n    return prod"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product = (product * i) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in range(len(arr)):\n        product = (product * arr[i]) % n\n    return product"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    \"\"\"\n    for i in range(len(l)-1):\n        if l[i] + 1!= l[i+1]:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_Consecutive(l):\n    # check if the list is empty\n    if not l:\n        return False\n    \n    # initialize variables\n    current = l[0]\n    consecutive = 1\n    \n    # iterate over the list starting from the second element\n    for i in range(1, len(l)):\n        # check if the current element is consecutive to the previous one\n        if l[i] == current + consecutive:\n            # if yes, increment the consecutive count\n            consecutive += 1\n        else:\n            # if no, reset the consecutive count\n            consecutive = 1\n            # set the current element to the new element\n            current = l[i]\n            \n    # check if the list contains consecutive numbers\n    if consecutive == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    \"\"\"\n    for i in range(len(l)-1):\n        if l[i] == l[i+1]-1:\n            print(True)\n        else:\n            print(False)"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n\n    for i in range(len(l)-1):\n        if l[i] == l[i+1]:\n            return True\n\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    \"\"\"\n    if len(l) < 2:\n        return False\n\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            continue\n        else:\n            return False\n\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_Consecutive(l): \n    \"\"\"\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    \"\"\"\n    i = 0\n    j = 1\n    while j < len(l):\n        if l[i] + 1 == l[j]:\n            i += 1\n            j += 1\n        else:\n            i = 0\n            j += 1\n    if i == len(l) - 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1): \n        if l[i+1] - l[i]!= 1: \n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) < 2: # if the length of the list is less than 2, it is not a consecutive list\n        return False\n    \n    for i in range(len(l)-1): # loop through the list\n        if l[i] + 1 == l[i+1]: # if the next element is consecutive to the current element, it is a consecutive list\n            return True\n    \n    return False # if no consecutive list is found, the function returns False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) < 2: \n        return \"List should have at least two elements\" \n\n    for i in range(len(l)-1): \n        if l[i] == l[i+1]-1: \n            return True \n\n    return False "
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    n = len(l) \n\n    # if the list has only one element, it is not consecutive \n    if n == 1: \n        return False \n\n    # check if the first element is 0 or 1 \n    if l[0] in [0,1]: \n        return False \n\n    # check if the second element is the next number after the first one \n    if l[1] - l[0]!= 1: \n        return False \n\n    # check for consecutive numbers \n    for i in range(2, n): \n        if l[i] - l[i-1]!= 1: \n            return False \n\n    # if all the elements are consecutive, then return True \n    return True "
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    if len(test_list1) > len(test_list2):\n        test_list1, test_list2 = test_list2, test_list1\n    \n    result = []\n    for i in range(len(test_list1)):\n        if test_list1[i] in test_list2 and (result == [] or test_list1[i]!= result[-1][0]):\n            result.append(test_list1[i])\n    \n    return tuple(result)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # create a set of unique elements in test_list1 and test_list2\n    unique_elements = set(test_list1 + test_list2)\n\n    # create a set of unique tuples of elements in unique_elements\n    unique_tuples = set(tuple(x) for x in unique_elements)\n\n    # find the intersection of unique_tuples and test_list2\n    intersection = unique_tuples & set(test_list2)\n\n    # create a set of unique tuples of elements in intersection and return as a list\n    result = list(intersection)\n\n    return result"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # Using set() to convert lists to sets and then finding the intersection of sets\n    return set(test_list1) & set(test_list2)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Convert the tuple list into a set to remove duplicates\n    unique_elements1 = set(test_list1)\n    unique_elements2 = set(test_list2)\n\n    # Find the intersection of the two sets\n    intersection = unique_elements1.intersection(unique_elements2)\n\n    # Convert the intersection set back into a list\n    intersection_list = list(intersection)\n\n    return intersection_list\n"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    This function takes two tuple lists as input and returns a new list that contains the common elements in both lists, irrespective of their order.\n    '''\n\n    # Create a dictionary to store the frequency of each element in the first list\n    freq1 = {}\n    for tup in test_list1:\n        for elem in tup:\n            if elem in freq1:\n                freq1[elem] += 1\n            else:\n                freq1[elem] = 1\n\n    # Create another dictionary to store the frequency of each element in the second list\n    freq2 = {}\n    for tup in test_list2:\n        for elem in tup:\n            if elem in freq2:\n                freq2[elem] += 1\n            else:\n                freq2[elem] = 1\n\n    # Find the intersection of the two dictionaries\n    common_elems = set(freq1.keys()) & set(freq2.keys())\n\n    # Create a new list containing the common elements in both lists\n    common_tuples = []\n    for elem in common_elems:\n        if freq1[elem] > 0 and freq2[elem] > 0:\n            common_tuples.append((elem, freq1[elem], freq2[elem]))\n        elif freq1[elem] > 0:\n            common_tuples.append((elem, freq1[elem], None))\n        elif freq2[elem] > 0:\n            common_tuples.append((elem, None, freq2[elem]))\n\n    return common_tuples"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n\n    # Create a set from both list to get unique values and sort the values\n    unique_values = sorted(set(test_list1 + test_list2))\n\n    # Initialize an empty list to store the intersection of tuples\n    intersection_list = []\n\n    # Loop through the unique values and check if each tuple is present in both lists\n    for value in unique_values:\n        if (value in test_list1) and (value in test_list2):\n            intersection_list.append(value)\n\n    # Return the intersection list\n    return intersection_list\n"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    This function takes two tuples as input and returns their intersection.\n    '''\n    intersection = []\n    for item in test_list1:\n        if item in test_list2 and item not in intersection:\n            intersection.append(item)\n    return intersection"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    intersection_set = set(test_list1) & set(test_list2)\n    return list(intersection_set)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Sort both lists to make the comparison easier\n    test_list1 = sorted(test_list1)\n    test_list2 = sorted(test_list2)\n\n    # Initialize an empty intersection list\n    intersection = []\n\n    # Iterate through each element of the first list\n    for element in test_list1:\n        # If the element is also in the second list, add it to the intersection list\n        if element in test_list2:\n            intersection.append(element)\n\n    # Return the intersection list\n    return tuple(intersection)\n"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n\n    # Initialize an empty set to store the common elements\n    common_elements = set()\n\n    # Loop through each element in the first list\n    for element in test_list1:\n        # Check if the element is in the second list\n        if element in test_list2:\n            # If it is, add it to the set of common elements\n            common_elements.add(element)\n\n    # Return the set of common elements as a tuple\n    return tuple(common_elements)\n"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n\n    Parameters:\n    str1 (str): The string to be modified.\n    ch (str): The character to be replaced.\n    newch (str): The character to replace all occurrences of `ch` with.\n\n    Returns:\n    str: The modified string with all occurrences of `ch` replaced with `newch`.\n    \"\"\"\n    # loop through each character in the string\n    for i in range(len(str1)):\n        # if the current character is equal to the character to be replaced\n        if str1[i] == ch:\n            # replace the character with the new character\n            str1 = str1[:i] + newch + str1[i+1:]\n    return str1"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    new_str = \"\"\n    for i in range(len(str1)):\n        if str1[i] == ch:\n            new_str += newch\n        else:\n            new_str += str1[i]\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Replace all occurrences of a character 'ch' with 'newch' in a string'str1'.\n    \"\"\"\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    newstr = \"\"\n    for char in str1:\n        if char == ch:\n            newstr += newch\n        else:\n            newstr += char\n    return newstr"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    result = \"\"\n    for char in str1:\n        if char == ch:\n            result += newch\n        else:\n            result += char\n    return result"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    \"\"\"\n    Write a function to sort a dictionary by value.\n\n    Args:\n        dict1 (dict): A dictionary of key-value pairs.\n\n    Returns:\n        list: A list of tuples, where each tuple contains a key-value pair and its count.\n\n    \"\"\"\n    # Convert the dictionary to a Counter object\n    counter = Counter(dict1)\n\n    # Sort the Counter object by value in descending order\n    sorted_counter = sorted(counter.items(), key=lambda x: x[1], reverse=True)\n\n    # Convert the sorted Counter object back to a list of tuples\n    sorted_list = [(k, v) for k, v in sorted_counter]\n\n    return sorted_list"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = Counter(dict1).most_common()\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    count_dict = Counter(dict1.values())\n    sorted_dict = dict(sorted(count_dict.items()))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    counter = Counter(dict1)\n    sorted_counter = sorted(counter.items(), key=lambda x: x[1], reverse=True)\n    sorted_dict = {}\n    for key, value in sorted_counter:\n        sorted_dict[key] = value\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    counter = Counter(dict1)\n    sorted_counter = sorted(counter.items(), key=lambda x: x[1], reverse=True)\n    return dict(sorted_counter)\n"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    sorted_dict = Counter(dict1).most_common()\n    sorted_dict.sort(key=lambda x: x[1], reverse=True)\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    \"\"\"\n    Sorts a dictionary by value in descending order.\n\n    Args:\n        dict1 (dict): A dictionary to be sorted.\n\n    Returns:\n        dict: A sorted dictionary by value.\n    \"\"\"\n    sorted_dict = dict(sorted(dict1.items(), key=lambda item: item[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = Counter(dict1)\n    sorted_dict = dict(sorted_dict.most_common())\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    \"\"\"\n    Write a function to sort a dictionary by value.\n    \"\"\"\n    counter = Counter(dict1)\n    sorted_dict = dict(sorted(counter.items(), key=lambda x: x[1]))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # create a dictionary to sort the values\n    sorted_dict = dict(sorted(dict1.items(), key=lambda item: item[1]))\n    \n    # print the sorted dictionary\n    print(sorted_dict)"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_num = nums[0]\n    min_num = nums[0]\n    for num in nums:\n        if num > max_num:\n            max_num = num\n        elif num < min_num:\n            min_num = num\n    return max_num + min_num"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) == 0:\n        return None\n\n    # find the maximum and minimum values in the array\n    max_val = max(nums)\n    min_val = min(nums)\n\n    # calculate the sum of the maximum and minimum values\n    return max_val + min_val"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    \"\"\"\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    \"\"\"\n    # Find the maximum and minimum values in the array\n    max_val = max(nums)\n    min_val = min(nums)\n\n    # Return the sum of the maximum and minimum values\n    return max_val + min_val"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    \"\"\"\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    \"\"\"\n    if len(nums) == 1:\n        return nums[0]\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num + min_num"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n\n    # Find the largest and smallest values in the array\n    largest = float('-inf')\n    smallest = float('inf')\n    for num in nums:\n        if num > largest:\n            largest = num\n        if num < smallest:\n            smallest = num\n\n    # Calculate the sum of the largest and smallest values\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Find the maximum and minimum values in the array\n    max_val = max(nums)\n    min_val = min(nums)\n\n    # Return the sum of the maximum and minimum values\n    return max_val + min_val"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) < 2:\n        raise ValueError('Array must have at least 2 elements.')\n    elif len(nums) == 2:\n        return nums[0] + nums[1]\n    else:\n        max_num = max(nums)\n        min_num = min(nums)\n        return max_num + min_num"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    This function takes an array of integers as input and returns the sum of the largest and smallest values in the array.\n    '''\n    max_val = max(nums)\n    min_val = min(nums)\n    return max_val + min_val"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) < 2:\n        raise ValueError(\"Array must have at least two elements\")\n    \n    largest = nums[0]\n    smallest = nums[0]\n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    \n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Find the largest and smallest values in the array\n    max_val = nums[0]\n    min_val = nums[0]\n    for num in nums:\n        if num > max_val:\n            max_val = num\n        if num < min_val:\n            min_val = num\n    \n    # Find the sum of the largest and smallest values\n    sum_val = max_val + min_val\n    \n    return sum_val"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to check if the given string is lower case.\n    '''\n    return string.islower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    This function takes a string as input and returns the same string converted to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    \"\"\"\n    Remove all lowercase substrings from a given string.\n    \"\"\"\n    pattern = r'[a-z]+'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Define a regular expression pattern to match lowercase substrings\n    pattern = r'[a-z]+'\n    # Find all lowercase substrings in the input string using the pattern\n    lowercase_substrings = re.findall(pattern, str1)\n    # Remove all lowercase substrings from the input string\n    cleaned_string = re.sub(pattern, '', str1)\n    # Return the cleaned string\n    return cleaned_string"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # convert string to lowercase\n    str2 = str1.lower()\n    \n    # split string into substrings separated by non-alphanumeric characters\n    substrings = re.findall(r'\\b\\w+\\b', str2)\n    \n    # join substrings back together into a new string\n    result =''.join(substrings)\n    \n    return result"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    \"\"\"\n    Write a function to remove lowercase substrings from a given string.\n    \"\"\"\n    # Remove all lowercase substrings from the given string\n    regex = re.compile(r'\\b[a-z]\\w*\\b')\n    str2 = regex.sub('', str1)\n\n    # Return the modified string\n    return str2"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Use regular expressions to find all lowercase substrings\n    pattern = re.compile('[a-z]+')\n    matches = pattern.findall(str1)\n    \n    # Remove the lowercase substrings from the original string\n    for match in matches:\n        str1 = str1.replace(match, '')\n        \n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = re.compile(r'\\b[a-z]+\\b') # compile a regular expression pattern to match lowercase substrings\n    result = pattern.sub('', str1) # remove all lowercase substrings from the string using the sub() method\n    return result"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Split the string into a list of substrings\n    substrings = re.findall(r'\\b[A-Z]+\\b', str1)\n    # Loop through the list of substrings\n    for i in range(len(substrings)):\n        # Check if the substring is lowercase\n        if substrings[i].islower():\n            # Remove the substring from the string\n            str1 = str1.replace(substrings[i], '')\n    # Return the modified string\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # define a regular expression pattern to match lowercase substrings\n    pattern = r'[a-z]+'\n    # use the findall() method to find all the substrings that match the pattern\n    matches = re.findall(pattern, str1)\n    # loop through the matches and remove all lowercase substrings\n    for match in matches:\n        str1 = str1.replace(match, '')\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    This function removes all lowercase substrings from a given string.\n    '''\n\n    # Use regular expression to find all lowercase substrings\n    pattern = re.compile(r'[a-z]+')\n\n    # Use sub() method to remove all lowercase substrings from the input string\n    modified_str = pattern.sub('', str1)\n\n    return modified_str"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str1 = re.sub('[a-z]+', '', str1)\n    return str1"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n // 10"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    # Convert the number to a string\n    num_str = str(n)\n    # Convert the first digit of the string to an integer\n    first_digit = int(num_str[0])\n    # Return the first digit\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n\n    # convert the number to a string to extract the first digit\n    str_n = str(n)\n    first_digit = str_n[0]\n\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    # Take input from the user\n    n = int(input(\"Enter a number: \"))\n\n    # Get the first digit of the number\n    first = str(n)[0]\n\n    # Print the first digit\n    print(\"The first digit of the number is:\", first)"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    first_digit = n // 1000 % 10\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return str(n)[0]"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes a positive integer as input and returns the first digit of the number.\n    \"\"\"\n    first_digit = n % 10\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    first_digit = n // 10**(len(str(n))-1)\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # Convert the number to a string\n    n = str(n)\n    # Use slicing to extract the first character of the string\n    first_char = n[0]\n    # Convert the first character to an integer and return it\n    return int(first_char)"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    # convert the number to a string\n    str_num = str(n)\n    # get the first character of the string\n    first_char = str_num[0]\n    # convert the first character to an integer\n    first_int = int(first_char)\n    # return the first integer as the first digit\n    return first_int"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(list):\n    '''\n    This function takes a list of integers as input and returns a list containing only the odd numbers.\n    '''\n    odd_numbers = []\n    for number in list:\n        if number % 2!= 0:\n            odd_numbers.append(number)\n    return odd_numbers"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(lst):\n    \"\"\"\n    This function takes a list of integers and returns a new list containing only the odd integers in the original list.\n    \"\"\"\n    return [x for x in lst if x % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(lst):\n    '''\n    This function takes a list of integers and returns a list of only the odd integers in the original list.\n    '''\n    odd_lst = []\n    for num in lst:\n        if num % 2!= 0:\n            odd_lst.append(num)\n    return odd_lst"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(list):\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_numbers = []\n    for num in list:\n        if num % 2!= 0:\n            odd_numbers.append(num)\n    return odd_numbers"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(lst):\n    \"\"\"\n    This function takes a list of integers and returns only the odd numbers in the list.\n    \"\"\"\n    return [num for num in lst if num % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function which takes a list of integers and only returns the odd ones.\n    \"\"\"\n    return [x for x in list if x % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(lst):\n    '''\n    This function takes a list of integers and returns a new list containing only the odd numbers from the original list.\n    '''\n    odd_lst = []\n    for num in lst:\n        if num % 2 == 1:\n            odd_lst.append(num)\n    return odd_lst"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n\n    # Define a function to calculate the cube of a number\n    def cube(n):\n        return n ** 3\n\n    # Define a function to calculate the sum of cubes\n    def sum_cubes(n):\n        return sum(cube(i) for i in range(1, n+1))\n\n    # Calculate the sum of the first n natural numbers\n    sum_of_n = sum(range(1, n+1))\n\n    # Calculate the sum of cubes of the first n natural numbers\n    sum_of_cubes = sum_cubes(n)\n\n    # Calculate the difference\n    difference = sum_of_n - sum_of_cubes\n\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    cubes_sum = sum(x**3 for x in range(1, n+1))\n    natural_sum = sum(range(1, n+1))\n    return abs(cubes_sum - natural_sum)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def difference(n):\n    \"\"\"\n    This function finds the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # Function to find the sum of cubes of first n natural numbers\n    def sum_of_cubes(n):\n        \"\"\"\n        This function calculates the sum of cubes of first n natural numbers.\n        \"\"\"\n        return sum(x**3 for x in range(1, n+1))\n\n    # Function to find the sum of first n natural numbers\n    def sum_of_natural_numbers(n):\n        \"\"\"\n        This function calculates the sum of first n natural numbers.\n        \"\"\"\n        return sum(range(1, n+1))\n\n    # Find the sum of cubes of first n natural numbers\n    sum_cubes = sum_of_cubes(n)\n\n    # Find the sum of first n natural numbers\n    sum_natural_numbers = sum_of_natural_numbers(n)\n\n    # Calculate the difference between the two sums\n    difference = sum_cubes - sum_natural_numbers\n\n    # Return the difference\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n\n    def sum_of_cubes(n):\n        \"\"\"\n        Write a python function to calculate the sum of cubes of the first n natural numbers.\n        \"\"\"\n        return (n * (n + 1) * (2 * n + 1)) / 6\n\n    def sum_of_natural_numbers(n):\n        \"\"\"\n        Write a python function to calculate the sum of the first n natural numbers.\n        \"\"\"\n        return n * (n + 1) // 2\n\n    sum_of_cubes_n = sum_of_cubes(n)\n    sum_of_natural_numbers_n = sum_of_natural_numbers(n)\n\n    difference = sum_of_cubes_n - sum_of_natural_numbers_n\n\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\n    sum_of_natural_numbers = sum(range(1, n+1))\n    difference = sum_of_cubes - sum_of_natural_numbers\n    print(\"The difference between the sum of cubes of the first\", n, \"natural numbers and the sum of the first\", n, \"natural numbers is:\", difference)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    cubes = [num ** 3 for num in range(1, n+1)]\n    sum_cubes = sum(cubes)\n\n    sum_numbers = [num for num in range(1, n+1)]\n    sum_numbers_squared = sum(sum_numbers ** 2)\n\n    return sum_cubes - sum_numbers_squared"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    cubes = [num**3 for num in range(1, n+1)]\n    return sum(range(1, n+1)) - sum(cubes)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_natural = sum(range(1, n+1))\n    difference = sum_cubes - sum_natural\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # function to calculate sum of cubes of first n natural numbers\n    def sum_of_cubes(n):\n        \"\"\"\n        Calculate the sum of cubes of first n natural numbers.\n        \"\"\"\n        sum_cubes = 0\n        for i in range(1, n+1):\n            sum_cubes += i**3\n        return sum_cubes\n\n    # function to calculate sum of first n natural numbers\n    def sum_of_natural_numbers(n):\n        \"\"\"\n        Calculate the sum of first n natural numbers.\n        \"\"\"\n        sum_natural_numbers = 0\n        for i in range(1, n+1):\n            sum_natural_numbers += i\n        return sum_natural_numbers\n\n    # calculate sum of cubes of first n natural numbers\n    sum_cubes_n = sum_of_cubes(n)\n\n    # calculate sum of first n natural numbers\n    sum_natural_numbers_n = sum_of_natural_numbers(n)\n\n    # find the difference between the two sums\n    difference = sum_cubes_n - sum_natural_numbers_n\n\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    sum_of_numbers = 0\n    \n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n        sum_of_numbers += i\n        \n    difference = sum_of_cubes - sum_of_numbers\n    \n    return difference"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A,N):\n    # Initialize a dictionary to store the count of odd xor pairs\n    odd_count = {}\n    \n    # Iterate through the given array A and count the odd xor pairs\n    for num in A:\n        xor_num = num ^ N\n        if xor_num in odd_count:\n            odd_count[xor_num] += 1\n        else:\n            odd_count[xor_num] = 1\n    \n    # Return the count of odd xor pairs\n    return sum(1 for count in odd_count.values() if count % 2 == 1)"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor_val = A[i] ^ A[j]\n            if xor_val % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A, N):\n    \"\"\"\n    This function takes an array A of size N and returns the number of pairs whose xor value is odd.\n    \"\"\"\n    # Initialize count variable\n    count = 0\n    # Loop through all pairs of elements\n    for i in range(N):\n        for j in range(i+1, N):\n            # Calculate xor value\n            xor_value = A[i] ^ A[j]\n            # Check if xor value is odd\n            if xor_value % 2 == 1:\n                count += 1\n    # Return count of odd xor values\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor_value = A[i] ^ A[j]\n            if xor_value % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    xor_dict = {}\n    count = 0\n    for i in range(N):\n        xor_dict[A[i]] = i\n    for i in range(N):\n        xor_val = A[i] ^ A[i+1]\n        if xor_val in xor_dict:\n            if xor_val % 2!= 0:\n                count += 1\n                del xor_dict[A[i+1]]\n            del xor_dict[A[i]]\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    xor_values = []\n    for i in range(len(A)):\n        xor_values.append(A[i] ^ N)\n    odd_count = 0\n    for i in range(len(A)):\n        if xor_values[i] % 2!= 0:\n            odd_count += 1\n    return odd_count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    xor_sum = sum(A)\n    count = 0\n    for i in range(N):\n        for j in range(i+2, N):\n            xor = A[i] ^ A[j]\n            if xor % 2!= 0:\n                count += 1\n                xor_sum -= xor\n    return count, xor_sum"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A, N):\n    \"\"\"\n    Write a python function to count the number of pairs whose xor value is odd.\n    \"\"\"\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor = A[i] ^ A[j]\n            if xor % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A, N):\n    \"\"\"\n    Write a python function to count the number of pairs whose xor value is odd.\n    \"\"\"\n    # Initialize a variable to count the number of odd pairs\n    odd_count = 0\n\n    # Iterate over all pairs of elements in the array A\n    for i in range(N):\n        for j in range(i+1, N):\n            # Calculate the xor value of A[i] and A[j]\n            xor_value = A[i] ^ A[j]\n\n            # If the xor value is odd, increment the odd_count variable\n            if xor_value % 2!= 0:\n                odd_count += 1\n\n    # Return the total number of odd pairs found\n    return odd_count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    This function takes in two lists A and N as input, where A contains integers and N contains odd integers.\n    The function returns the number of odd pairs whose xor value is odd.\n    '''\n    xor_sum = 0\n    count = 0\n\n    # loop through all possible pairs of numbers in the list A\n    for i in range(len(A)):\n        for j in range(i+1,len(A)):\n            # add the xor value of the pair to the xor_sum\n            xor_sum += A[i] ^ A[j]\n            # if the xor value is odd, increment the count\n            if xor_sum % 2!= 0:\n                count += 1\n\n    return count"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # Convert the string to a list of characters\n    char_list = list(string)\n    # Iterate over the list of characters\n    for i in range(len(char_list)):\n        # If the character is uppercase, convert it to lowercase\n        if char_list[i].isupper():\n            char_list[i] = char_list[i].lower()\n        # If the character is lowercase, convert it to uppercase\n        elif char_list[i].islower():\n            char_list[i] = char_list[i].upper()\n    # Convert the list of characters back to a string\n    toggled_string = ''.join(char_list)\n    return toggled_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join([c.upper() if c.islower() else c.lower() for c in string])"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = ''\n    for char in string:\n        if char.isupper():\n            new_string += char.lower()\n        else:\n            new_string += char.upper()\n    return new_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    result = \"\"\n    for char in string:\n        if char.isupper():\n            result += char.lower()\n        elif char.islower():\n            result += char.upper()\n        else:\n            result += char\n    return result"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    result = ''\n    for char in string:\n        if char.isupper():\n            result += char.lower()\n        elif char.islower():\n            result += char.upper()\n        else:\n            result += char\n    return result"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join([char.swapcase() if char.isalpha() else char for char in string])"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join([x.upper() if x.islower() else x.lower() for x in string])"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # get the length of the largest number\n    max_len = max(len(str(n1)), len(str(n2)))\n    \n    # convert the numbers to lists of digits\n    digits1 = [int(d) for d in str(n1)]\n    digits2 = [int(d) for d in str(n2)]\n    \n    # calculate the per-digit difference for each pair of digits\n    diff_sum = 0\n    for i in range(max_len):\n        diff = abs(digits1[i] - digits2[i])\n        diff_sum += diff\n    \n    # return the total difference sum\n    return diff_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert both numbers to lists of digits\n    n1_list = list(str(n1))\n    n2_list = list(str(n2))\n\n    # Find the length of the shortest number\n    min_length = min(len(n1_list), len(n2_list))\n\n    # Initialize the sum of differences to zero\n    sum_diff = 0\n\n    # Loop through the digits of the longer number\n    for i in range(min_length):\n        # Subtract the corresponding digits of the two numbers\n        diff = int(n1_list[i]) - int(n2_list[i])\n\n        # Add the difference to the sum of differences\n        sum_diff += diff\n\n    # Return the sum of differences\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    distance = 0\n    # Convert both integers to strings\n    s1 = str(n1)\n    s2 = str(n2)\n    # Compare the lengths of the two strings\n    if len(s1) < len(s2):\n        # If the first string is shorter, loop through the digits of the longer string\n        for i in range(len(s2)):\n            # Subtract the corresponding digits of the two strings\n            distance += abs(int(s2[i]) - int(s1[i]))\n    else:\n        # If the second string is shorter, loop through the digits of the shorter string\n        for i in range(len(s1)):\n            # Subtract the corresponding digits of the two strings\n            distance += abs(int(s1[i]) - int(s2[i]))\n    return distance"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n    sum_diff = 0\n    \n    # convert the numbers to strings and split them into lists of digits\n    s1 = list(map(int, str(n1)))\n    s2 = list(map(int, str(n2)))\n    \n    # loop over the digits and calculate the per-digit difference\n    for i in range(max(len(s1), len(s2))):\n        diff = abs(s1[i] - s2[i])\n        sum_diff += diff\n    \n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the two integers to lists of digits\n    num1_digits = [int(d) for d in str(n1)]\n    num2_digits = [int(d) for d in str(n2)]\n\n    # Initialize the sum of differences to zero\n    sum_diff = 0\n\n    # Loop through each digit in the two integers and calculate the difference\n    for i in range(max(len(num1_digits), len(num2_digits))):\n        diff = abs(num1_digits[i] - num2_digits[i])\n        sum_diff += diff\n\n    # Return the sum of differences\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    # convert numbers to strings so we can iterate over them\n    s1 = str(n1)\n    s2 = str(n2)\n    # initialize sum and difference variables\n    sum_diff = 0\n    # iterate over digits of both numbers\n    for i in range(max(len(s1), len(s2))):\n        # calculate difference between corresponding digits\n        diff = abs(int(s1[i]) - int(s2[i]))\n        # add difference to sum\n        sum_diff += diff\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    total_sum = 0\n    # Convert the integers to lists of digits\n    digit_list1 = list(str(n1))\n    digit_list2 = list(str(n2))\n    \n    # Find the length of the longest digit list\n    max_length = max(len(digit_list1), len(digit_list2))\n    \n    # Iterate over the digits in the longer lists\n    for i in range(max_length):\n        # Get the digit difference between the two lists\n        digit_diff = abs(int(digit_list1[i]) - int(digit_list2[i]))\n        # Add the difference to the total sum\n        total_sum += digit_diff\n    \n    return total_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n    # Check if the input values are integers\n    if not isinstance(n1, int) or not isinstance(n2, int):\n        raise ValueError(\"Both input values must be integers.\")\n    \n    # Check if the input values are not equal\n    if n1 == n2:\n        raise ValueError(\"Both input values must be different.\")\n    \n    # Convert the input values to strings\n    s1 = str(n1)\n    s2 = str(n2)\n    \n    # Calculate the per-digit difference\n    diff = 0\n    for i in range(len(s1)):\n        diff += abs(ord(s1[i]) - ord(s2[i]))\n    \n    # Return the sum of the per-digit difference\n    return diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # convert the integers to lists of digits\n    l1 = list(str(n1))\n    l2 = list(str(n2))\n\n    # check if the number of digits are equal\n    if len(l1)!= len(l2):\n        print(\"The number of digits of the two numbers must be equal.\")\n        return None\n\n    # calculate the sum of the per-digit differences\n    digit_diff_sum = 0\n    for i in range(len(l1)):\n        digit_diff = abs(int(l1[i]) - int(l2[i]))\n        digit_diff_sum += digit_diff\n\n    return digit_diff_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    diff = abs(n1 - n2)\n    digits = [int(digit) for digit in str(abs(n1 - n2))]\n    return sum(diff for i, diff in enumerate(digits) if i % 2!= 0)"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    curr_sum = 0\n    \n    for i in range(size):\n        curr_sum += a[i]\n        \n        if curr_sum > max_sum:\n            max_sum = curr_sum\n        \n        if curr_sum < 0:\n            curr_sum = 0\n    \n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n\n    for i in range(len(a) - size + 1):\n        current_sum = sum(a[i:i+size])\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    current_start = 0\n\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n            current_start = i - size + 1\n\n    return max_sum, current_start"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    max_ending_here = 0\n\n    for i in range(size):\n        current_sum = max(a[i], current_sum + a[i])\n        max_ending_here = max(max_ending_here, current_sum)\n        max_sum = max(max_sum, max_ending_here)\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        max_sum = max(max_sum, current_sum)\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    max_ending_here = 0\n    \n    for i in range(size):\n        current_sum += a[i]\n        max_ending_here = max(max_ending_here + a[i], current_sum)\n        max_sum = max(max_sum, max_ending_here)\n        \n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 1:\n        return max(a)\n    max_sum = float('-inf')\n    current_sum = 0\n    start_index = 0\n    end_index = 0\n    for i in range(1, len(a)):\n        if i < size:\n            end_index = i\n        else:\n            current_sum = sum(a[start_index:end_index+1])\n            max_sum = max(max_sum, current_sum)\n            start_index += 1\n            end_index += 1\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    max_ending_here = 0\n    current_sum = 0\n\n    for i in range(size):\n        current_sum += a[i]\n\n        if current_sum > max_sum:\n            max_sum = current_sum\n        elif current_sum < 0:\n            current_sum = 0\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    \n    for i in range(size):\n        current_sum += a[i]\n        \n        if current_sum > max_sum:\n            max_sum = current_sum\n        \n        if current_sum < 0:\n            current_sum = 0\n            \n    return max_sum"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n\n    # Create a set of all elements in the two tuples\n    union_set = set(test_tup1) | set(test_tup2)\n\n    # Convert the set back to a tuple and sort it in ascending order\n    sorted_union = tuple(sorted(union_set))\n\n    # Print the sorted union\n    print(\"The sorted union of the elements of the two tuples is:\", sorted_union)\n"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n\n    # Combine the two tuples into one\n    combined_tup = test_tup1 + test_tup2\n\n    # Find the unique elements in the combined tuple\n    unique_elements = list(set(combined_tup))\n\n    # Sort the unique elements in ascending order\n    unique_elements.sort()\n\n    # Output the sorted unique elements\n    for element in unique_elements:\n        print(element)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Convert both tuples to lists\n    tup1_list = list(test_tup1)\n    tup2_list = list(test_tup2)\n\n    # Find the union of the two lists\n    union_list = list(set(tup1_list).union(set(tup2_list)))\n\n    # Sort the union list in ascending order\n    union_list.sort()\n\n    # Output the union list\n    print(union_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    union = test_tup1 + test_tup2\n    union_set = set(union)\n    sorted_union = sorted(union_set)\n    return sorted_union"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # combine the two tuples\n    combined_tup = test_tup1 + test_tup2\n\n    # remove duplicates and sort the elements\n    unique_elements = sorted(set(combined_tup))\n\n    # output the unique elements\n    return unique_elements"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Concatenate the two input tuples and convert it to a set\n    union_set = set(test_tup1 + test_tup2)\n    # Sort the set and convert it back to a list\n    sorted_list = sorted(list(union_set))\n    # Return the sorted list\n    return sorted_list\n"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # Union of the two tuples\n    union = test_tup1 + test_tup2\n    \n    # Sort the union of elements in ascending order\n    union.sort()\n    \n    # Print the union of elements in sorted order\n    print(\"The union of elements of the two tuples is:\", end=\" \")\n    for element in union:\n        print(element, end=\" \")"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # convert the tuple elements to sets to avoid duplicates\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    # find the union of the sets and convert it back to a tuple\n    union_tup = tuple(set1.union(set2))\n    # sort the tuple and return it\n    return sorted(union_tup)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Using set to remove duplicates and then converting back to tuple\n    unique_elements = tuple(set(test_tup1) | set(test_tup2))\n    \n    # Sorting the elements in ascending order\n    sorted_elements = sorted(unique_elements)\n    \n    # Outputting the sorted elements\n    print(sorted_elements)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_set = set(test_tup1)\n    union_set.update(test_tup2)\n    return sorted(list(union_set))"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n\n    # Initialize variables\n    max_length = 0\n    current_length = 0\n\n    # Loop through the list\n    for i in range(len(lst)):\n        # Check if the current element is part of a sublist\n        if i == 0 or lst[i] not in lst[i-1]:\n            # If it is, increase the length of the sublist by 1\n            current_length += 1\n        else:\n            # If it isn't, reset the length of the sublist to 1\n            current_length = 1\n\n        # Update the maximum length if necessary\n        if current_length > max_length:\n            max_length = current_length\n\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        current_length = 1\n        for j in range(i+1, len(lst)):\n            if lst[i]!= lst[j]:\n                current_length += 1\n            else:\n                break\n        max_length = max(max_length, current_length)\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if i > 0 and j > i:\n                break\n            sublist = lst[i:j+1]\n            max_len = max(max_len, len(sublist))\n    return max_len"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    if not lst:\n        return 0\n\n    max_length = 1\n    current_length = 1\n    start_index = 0\n\n    for i in range(1, len(lst)):\n        if lst[i] == lst[start_index]:\n            current_length += 1\n        else:\n            if current_length > max_length:\n                max_length = current_length\n            start_index = i\n            current_length = 1\n\n    if current_length > max_length:\n        max_length = current_length\n\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n\n    for i in range(len(lst)):\n        current_length = 1\n        for j in range(i+1, len(lst)):\n            if lst[i] == lst[j]:\n                current_length += 1\n                if current_length > max_length:\n                    max_length = current_length\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 1  # initialize max length to 1\n    for i in range(1, len(lst)):  # iterate over the list starting from index 1\n        if lst[i] > lst[i-1]:  # if the current element is greater than the previous element, update max length\n            max_len += 1\n    return max_len"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        temp = []\n        for j in range(i+1, len(lst)):\n            temp.append(lst[j])\n            if len(temp) > max_length:\n                max_length = len(temp)\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if max_length < len(lst[j]) - len(lst[i]):\n                max_length = len(lst[j]) - len(lst[i])\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the longest sublists.\n\n    :param lst: A list containing sublists of strings.\n    :return: An integer representing the length of the longest sublist in the given list.\n    \"\"\"\n    max_length = 0\n    for sublist in lst:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    current_length = 0\n    for i in range(len(lst)):\n        if i == 0 or lst[i]!= lst[i-1]:\n            current_length += 1\n        else:\n            current_length = 0\n        if current_length > max_length:\n            max_length = current_length\n    return max_length"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'\"([^\"]*)\"' # matches any opening and closing quotation mark and captures the content between them\n    values = re.findall(pattern, text) # finds all matches of the pattern in the text\n    return values\n\ntext = \"\"\"\nThe quick brown \"jumps\" over the lazy dog.\n\"\"\"\n\nvalues = extract_values(text)\n\nprint(values) # Output: ['jumps']"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    values = []\n    for match in matches:\n        values.append(match.strip('\"'))\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r\"\\\"([^\\\"]*)\\\"\"\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_values(text):\n    pattern = re.compile(r'\"(.*?)\"')\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'(?<=\")([\\w\\s]+?)(?=\")'\n    return re.findall(pattern, text)"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile(r'(?<=\")(\\w+)(?=\")')\n    matches = pattern.findall(text)\n    return matches\n"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'(?<=\")\\w+(?:(?<!\\\\)\"|\\Z)'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_values(text):\n    \"\"\"\n    Write a function to extract values between quotation marks from a string.\n    \"\"\"\n    pattern = r'(?<=^|\")(.*?)(?=\")'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Pairs(arr,n): \n    count = 0 \n    for i in range(n): \n        for j in range(i+1,n): \n            count += 1\n    return count "
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Pairs(arr, n):\n    '''\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n): \n        for j in range(i+1,n): \n            if arr[i]!= arr[j]: \n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Pairs(arr,n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n\n    for i in range(n):\n        for j in range(i+1, n):\n            count += 1\n\n    return count"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split(word):\n    \"\"\"\n    Write a python function to split a string into characters.\n    \"\"\"\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split(word):\n    \"\"\"\n    Write a python function to split a string into characters.\n    \"\"\"\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split(word):\n    \"\"\"\n    Write a python function to split a string into characters.\n    \"\"\"\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split(word):\n    \"\"\"\n    Write a python function to split a string into characters.\n    \"\"\"\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split(word):\n    '''\n    This function takes a string as input and returns a list of its characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split(word):\n    \"\"\"\n    Write a python function to split a string into characters.\n    \"\"\"\n    return list(word)"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Convert the number to a string and split it into individual digits\n    digits = [int(digit) for digit in str(n)]\n    # Sum up the digits\n    return sum(digits)"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Initialize the sum variable to 0\n    sum = 0\n    \n    # Convert the integer to a string and split it into individual characters\n    digits = [int(digit) for digit in str(n)]\n    \n    # Loop through each digit and add it to the sum variable\n    for digit in digits:\n        sum += digit\n    \n    # Return the sum of all the digits\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Convert the input number to a string\n    n_str = str(n)\n    \n    # Initialize a variable to store the sum of digits\n    sum_of_digits = 0\n    \n    # Loop through each character of the string and add its value to the sum\n    for digit in n_str:\n        sum_of_digits += int(digit)\n    \n    # Return the sum of digits\n    return sum_of_digits"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Convert the number to a string and then to a list of digits\n    digits = [int(digit) for digit in str(n)]\n    # Sum the digits\n    return sum(digits)"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    while n > 0:\n        sum += n % 10\n        n //= 10\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Convert the integer to a string and split it into a list of digits\n    digits = [int(digit) for digit in str(n)]\n    # Sum up the digits\n    total = sum(digits)\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Initialize the sum variable to 0\n    sum = 0\n\n    # Loop through each digit of the number\n    while n > 0:\n        # Get the last digit of the number and add it to the sum variable\n        digit = n % 10\n        sum += digit\n\n        # Remove the last digit from the number and divide it by 10 to remove it from the next iteration\n        n = n // 10\n\n    # Return the sum of all the digits\n    return sum"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    # check if the list is empty or not\n    if not list1:\n        return True\n\n    # check if all elements in the list are the same\n    if len(list1) == 1:\n        return True\n\n    # check if all elements in the list are greater than the previous element\n    for i in range(1, len(list1)):\n        if list1[i] <= list1[i-1]:\n            return False\n\n    # if the loop completes without returning False, then the list is sorted\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def issort_list(lst):\n    \"\"\"\n    Check whether a specified list is sorted or not.\n    \"\"\"\n    if len(lst) <= 1:\n        return True\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i-1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def issort_list(list1):\n    '''\n    This function takes a list as input and returns True if the list is sorted in ascending order, and False otherwise.\n    '''\n    if len(list1) > 1:\n        for i in range(1, len(list1)):\n            if list1[i] < list1[i-1]:\n                return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) <= 1:\n        return True\n    elif list1[0] <= list1[1]:\n        return issort_list(list1[1:])\n    else:\n        return False"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) <= 1:\n        return True\n    else:\n        if list1[0] <= list1[1]:\n            return issort_list(list1[1:])\n        else:\n            return False"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n\n    if len(list1) < 2:\n        return True\n\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n\n    # Check if the list is already sorted\n    if all(list1[i] <= list1[i+1] for i in range(len(list1)-1)):\n        return \"The list is sorted\"\n    else:\n        return \"The list is not sorted\""
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1) - 1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n    \"\"\"\n    n = len(list1)\n    for i in range(n-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_list(length):\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_list(length):\n    return [{} for i in range(length)]"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    for i in range(len(list1)):\n        list1[i].sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    for i in range(len(list1)):\n        list1[i].sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    \n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Loop over each sublist in list1\n    for sublist in list1:\n        # Sort the sublist using the built-in sorted function\n        sorted_sublist = sorted(sublist)\n        # Replace the original sublist with the sorted sublist\n        list1[list1.index(sublist)] = sorted_sublist\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Define a lambda function that sorts a list of strings\n    sorter = lambda x: sorted(x)\n    \n    # Use a list comprehension to apply the sorter to each sublist of strings in list1\n    sorted_list1 = [sorter(sublist) for sublist in list1]\n    \n    # Return the sorted list\n    return sorted_list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    '''\n    This function removes duplicate numbers from a given number of lists.\n    '''\n    # Convert the list to a set to remove duplicates\n    unique_nums = set(nums)\n\n    # Convert the set back to a list and return it\n    return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # Create an empty set to store unique numbers\n    unique_nums = set()\n\n    # Loop through each list in the input list\n    for i in range(len(nums)):\n        # Loop through each number in the list\n        for j in range(len(nums[i])):\n            # If the number is not in the set, add it\n            if nums[i][j] not in unique_nums:\n                unique_nums.add(nums[i][j])\n\n    # Convert the set back to a list and return it\n    return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    This function takes a list of lists as input and returns a list of lists where all duplicate numbers are removed.\n    \"\"\"\n\n    # convert the input list into a set so that duplicates can be detected\n    nums_set = set(sum(nums, []))\n\n    # convert the set back into a list of lists\n    unique_nums = []\n    for num in nums_set:\n        unique_nums.append([num] * len(nums))\n\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n\n    # Create a set to store unique numbers\n    unique_nums = set()\n\n    # Loop through each list in the given list of lists\n    for lst in nums:\n\n        # Loop through each number in the list\n        for num in lst:\n\n            # Add the number to the set if it's not already in the set\n            if num not in unique_nums:\n                unique_nums.add(num)\n\n    # Create a new list to store the unique numbers\n    new_lst = []\n\n    # Loop through the unique numbers and append them to the new list\n    for num in unique_nums:\n        new_lst.append(num)\n\n    # Return the new list of unique numbers\n    return new_lst"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    # remove duplicates using sets\n    unique_nums = set(nums)\n    # convert set to list\n    unique_nums_list = list(unique_nums)\n    # remove duplicates from the list\n    unique_nums_list = list(set(unique_nums_list))\n    # return the list of unique numbers\n    return unique_nums_list"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # initialize empty dictionary to store unique numbers\n    unique_nums = {}\n    # loop through each list in the nums argument\n    for num_list in nums:\n        # loop through each number in the list and add it to the dictionary if it's not already there\n        for num in num_list:\n            if num not in unique_nums:\n                unique_nums[num] = True\n    # create a new list to hold the unique numbers from the dictionary\n    new_unique_nums = [num for num in unique_nums]\n    # sort the new list in ascending order\n    new_unique_nums.sort()\n    # return the sorted new list\n    return new_unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    unique_nums = set()\n    for num_list in nums:\n        unique_nums |= set(num_list)\n    return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = []\n    for num in list_data:\n        if num not in unique_numbers:\n            unique_numbers.append(num)\n\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    \n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_nums = set(list_data)\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    unique_numbers = list(set(list_data))\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    # Create a set of unique numbers in the list\n    unique_numbers = set(list_data)\n    \n    # Calculate the product of the unique numbers\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    \n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    unique_nums = set(list_data) # convert the list to set to remove duplicates\n    unique_nums = sorted(unique_nums) # sort the set to get unique numbers\n    product = 1 # initialize the product to 1\n    for num in unique_nums:\n        product *= num # multiply the product by each unique number\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    unique_list = list(set(list_data)) # Remove duplicate numbers\n    unique_list = sorted(unique_list) # Sort the list in ascending order\n    product = 1 # Initialize the product to 1\n    for number in unique_list:\n        product *= number # Multiply the product by each unique number\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # Use a set to remove duplicates and then use the product function from the math module to calculate the product\n    unique_numbers = set(list_data)\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = set(list_data)\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    unique_numbers = list(set(list_data))\n    unique_product = 1\n    for num in unique_numbers:\n        unique_product *= num\n    return unique_product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_nums = set(list_data)\n    product = 1\n\n    for num in unique_nums:\n        product *= num\n\n    return product"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = 2*3.14*(r**2+h) # formula for surface area of a cylinder\n    return area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = 2 * pi * r * r + 2 * pi * r * h + pi * r * h\n    return area\n\npi = 3.14159"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = 2 * 3.14159 * r * r # formula for area of a cylinder\n    volume = (1/3) * area * h # formula for volume of a cylinder\n    surface_area = 2 * area + 2 * 3.14159 * volume # formula for surface area of a cylinder\n    return surface_area # return the surface area in cm^2"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = 2 * r * h\n    return area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * 3.14 * r**2 + 2 * 3.14 * r * h + 2 * 3.14 * h**2 - 2 * 3.14 * r**2 * h"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef surfacearea_cylinder(r, h):\n    '''\n    This function takes the radius and height of a cylinder as input parameters,\n    and returns the surface area of the cylinder.\n    '''\n\n    # Calculate the area of the base of the cylinder\n    base_area = math.pi * r * r\n\n    # Calculate the height of the cylinder\n    cylinder_height = 2 * h\n\n    # Calculate the surface area of the cylinder\n    surface_area = 2 * math.pi * r * h + 2 * math.pi * r * (r + h) + base_area\n\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*math.pi*(r**2)+(2*h)"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = 2 * 3.14 * r * h + 2 * 3.14 * h * r  # formula for surface area of a cylinder\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    This function calculates the surface area of a cylinder.\n    '''\n    # Calculate the surface area using the formula:\n    # surface area = pi * r^2 * h\n    surface_area = 2 * 3.14159 * r ** 2 * h\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * 3.14 * r * r + 2 * 3.14 * r * h + 2 * 3.14 * h * h"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sub_Array(A,B):\n    \"\"\"\n    Write a python function to check whether a list is sublist of another or not.\n    \"\"\"\n    if len(B) > len(A):\n        return False\n\n    for i in range(len(A)-len(B)+1):\n        if A[i:i+len(B)] == B:\n            return True\n\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sub_Array(A,B):\n    # Check if B is a sublist of A\n    for i in range(len(A)-len(B)+1):\n        if A[i:i+len(B)] == B:\n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(B) > len(A):\n        return False\n    else:\n        for i in range(len(A)-len(B)+1):\n            if A[i:i+len(B)] == B:\n                return True\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n\n    # check if the list A is empty \n    if not A: \n        return True \n\n    # check if the list B is empty \n    if not B: \n        return False \n\n    # iterate through each element in list A \n    for i in range(len(A)): \n\n        # check if the current element is present in list B \n        if A[i] in B: \n\n            # check if the remaining elements in list A are sublist of list B \n            for j in range(i+1,len(A)): \n                if A[j] in B: \n                    return True \n\n    # if the loop completes without returning True, then the list A is not sublist of list B \n    return False "
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sub_Array(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n\n    if len(B) > len(A):\n        return False\n\n    i = 0\n    j = 0\n\n    while i < len(A) and j < len(B):\n        if A[i] == B[j]:\n            i += 1\n            j += 1\n        else:\n            i = i - j\n            j = 0\n\n    return True if j == len(B) else False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sub_Array(A, B):\n    # Check if A is sublist of B\n    for i in range(len(B)):\n        if A == B[i:]:\n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) < len(B):\n        return False\n    \n    for i in range(len(A)-len(B)+1):\n        if A[i:i+len(B)] == B:\n            return True\n    \n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) > len(B):\n        return False\n    i = 0\n    j = 0\n    while j < len(B):\n        if A[i] == B[j]:\n            i += 1\n        j += 1\n    return i == len(A)"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n\n    # Check if the length of the sublist is greater than or equal to the length of the super list\n    if len(B) >= len(A):\n        return False\n\n    # Initialize variables to keep track of the current index of the super list and the current index of the sub list\n    i = 0\n    j = 0\n\n    # Loop through the super list\n    while i < len(A):\n        # Check if the sub list is a sublist of the current super list\n        if A[i:i+len(B)] == B:\n            return True\n        # Move the current index of the super list to the right by 1\n        i += 1\n        # Move the current index of the sub list to the right by 1\n        j += 1\n\n    # If we reach here, then the super list is not a sublist of any sub list of the sub list\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sub_Array(A, B):\n    # check if A is a sublist of B\n    for i in range(len(B)):\n        if A == B[i:]:\n            return True\n    return False"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    return factorial % 10\n"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    This function takes an integer n as input and returns the last digit in the factorial of n.\n    '''\n    num = n\n    if num == 0:\n        return 1\n    elif num > 0:\n        last_digit = 0\n        while num!= 0:\n            last_digit = num % 10\n            num //= 10\n        return last_digit\n    else:\n        return last_Digit_Factorial(abs(num))"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    last_digit = factorial % 10\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n):\n    # Base case: if n is 0 or 1, return 1\n    if n == 0 or n == 1:\n        return 1\n    \n    # Recursive case: calculate the factorial of n-1 and then take the last digit\n    else:\n        last_digit = last_Digit_Factorial(n-1) % 10\n        return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Convert the number to a string\n    n_str = str(n)\n    # Find the last character of the string\n    last_char = n_str[-1]\n    # Convert the last character to an integer and return it\n    return int(last_char)"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # initialize variable to store factorial\n    factorial = 1\n    # loop through each digit in the number and multiply factorial by that digit\n    while n > 0:\n        factorial *= n % 10\n        n //= 10\n    # get the last digit of the factorial\n    last_digit = factorial % 10\n    # return the last digit\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    last_digit = factorial % 10\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n\n    # Convert the input number into a string\n    num = str(n)\n\n    # Get the last digit of the factorial\n    last_digit_factorial = int(num[-1])\n\n    # Return the last digit of the factorial\n    return last_digit_factorial"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    This function takes an integer n as input and returns the last digit of the factorial of n.\n    \"\"\"\n    result = 0\n    while n > 0:\n        result += n % 10\n        n //= 10\n    return result"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n): \n    \"\"\"\n    Write a python function to find the last digit in factorial of a given number.\n    \"\"\"\n\n    factorial = 1\n    num = n\n    while num > 0: \n        factorial *= num \n        num //= 10\n\n    return factorial % 10"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n\n    Args:\n        list1 (list): A list of integers.\n        list2 (list): A list of integers.\n        list3 (list): A list of integers.\n\n    Returns:\n        list: A single list containing all elements of the input lists interleaved.\n    \"\"\"\n    # Concatenate all input lists into one\n    interleaved_list = list1 + list2 + list3\n\n    # Return the interleaved list\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # check if the lists have the same length\n    if len(list1)!= len(list2) or len(list1)!= len(list3):\n        raise ValueError(\"Lists must have the same length\")\n    \n    # create an empty list to hold the interleaved values\n    result = []\n    \n    # iterate over each element in the lists and append them to the result list\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n        \n    # return the final list\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    result = []\n    i = j = k = 0\n    \n    while i < len(list1) and j < len(list2) and k < len(list3):\n        if list1[i] < list2[j] and list1[i] < list3[k]:\n            result.append(list1[i])\n            i += 1\n        elif list2[j] < list1[i] and list2[j] < list3[k]:\n            result.append(list2[j])\n            j += 1\n        else:\n            result.append(list3[k])\n            k += 1\n    \n    while i < len(list1) and j < len(list2):\n        if list1[i] < list2[j]:\n            result.append(list1[i])\n            i += 1\n        else:\n            result.append(list2[j])\n            j += 1\n    \n    while i < len(list1) and k < len(list3):\n        if list1[i] < list3[k]:\n            result.append(list1[i])\n            i += 1\n        else:\n            result.append(list3[k])\n            k += 1\n    \n    while j < len(list2) and k < len(list3):\n        if list2[j] < list3[k]:\n            result.append(list2[j])\n            j += 1\n        else:\n            result.append(list3[k])\n            k += 1\n    \n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # Create an empty list to store the interleaved items\n    interleaved_list = []\n    \n    # Iterate through each item in the first list\n    for item1 in list1:\n        # Add the first item to the interleaved list\n        interleaved_list.append(item1)\n        # Check if there are any more items in the second list\n        if len(list2) > 0:\n            # Add the next item from the second list to the interleaved list\n            interleaved_list.append(list2.pop(0))\n            # If there are any more items in the second list, check if there are any more items in the third list\n            if len(list2) > 0:\n                # Add the next item from the third list to the interleaved list\n                interleaved_list.append(list3.pop(0))\n    \n    # Return the flattened interleaved list\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Get the length of the input lists\n    n1 = len(list1)\n    n2 = len(list2)\n    n3 = len(list3)\n    \n    # Check if the length of the lists are the same\n    if n1!= n2 or n2!= n3 or n1!= n3:\n        return \"Error: Lists must have the same length.\"\n    \n    # Initialize an empty list to hold the result\n    result = []\n    \n    # Loop through the input lists\n    for i in range(n1):\n        # Add the i-th element from each list to the result list\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    \n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # check if all lists have the same length\n    if len(list1)!= len(list2) or len(list1)!= len(list3):\n        return \"All lists must have the same length.\"\n    else:\n        # initialize an empty list to store the interleaved list\n        interleaved_list = []\n        # iterate through the 3 input lists\n        for i in range(len(list1)):\n            # add the i-th element of each list to the interleaved list\n            interleaved_list.append(list1[i])\n            interleaved_list.append(list2[i])\n            interleaved_list.append(list3[i])\n        # return the interleaved list\n        return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # create a new empty list to store the interleaved lists\n    interleaved_list = []\n\n    # loop through the first list and append each element to the interleaved list\n    for element in list1:\n        interleaved_list.append(element)\n\n    # loop through the second list and append each element to the interleaved list\n    for element in list2:\n        interleaved_list.append(element)\n\n    # loop through the third list and append each element to the interleaved list\n    for element in list3:\n        interleaved_list.append(element)\n\n    # return the interleaved list\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    interleaved_list = []\n    index = 0\n    \n    # Loop through the lists and add the elements to the interleaved list\n    while index < len(list1):\n        interleaved_list.append(list1[index])\n        interleaved_list.append(list2[index])\n        interleaved_list.append(list3[index])\n        index += 1\n    \n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Check if all lists have the same length\n    if len(list1)!= len(list2)!= len(list3):\n        raise ValueError(\"All lists must have the same length.\")\n    # Flatten the lists\n    flat_list = [x for sublist in [list1, list2, list3] for x in sublist]\n    # Return the interleaved list\n    return flat_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    common = set(test_tup1) & set(test_tup2)\n    dissimilar = set(test_tup1) - common | set(test_tup2) - common\n    return dissimilar"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Initialize an empty set to store the dissimilar elements\n    dissimilar_set = set()\n    # Compare each element of the two tuples and add them to the dissimilar_set if they're not equal\n    for element1 in test_tup1:\n        for element2 in test_tup2:\n            if element1!= element2:\n                dissimilar_set.add(element1)\n                dissimilar_set.add(element2)\n    # Return the dissimilar_set\n    return dissimilar_set"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the dissimilar elements in the given two tuples.\n    \"\"\"\n    # initialize an empty list to store the dissimilar elements\n    dissimilar_list = []\n    \n    # iterate through the first tuple and compare it to the second tuple\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            # if the elements are different, add them to the dissimilar list\n            dissimilar_list.append(test_tup1[i])\n            \n    # return the dissimilar list\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the dissimilar elements in the given two tuples.\n    \"\"\"\n    dissimilar_set = set()\n    for item1, item2 in zip(test_tup1, test_tup2):\n        if item1!= item2:\n            dissimilar_set.add(item1)\n    return list(dissimilar_set)"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # create a set of unique elements in both tuples\n    unique_elems = set(test_tup1) | set(test_tup2)\n    # create a set of common elements in both tuples\n    common_elems = set(test_tup1) & set(test_tup2)\n    # create a set of dissimilar elements between the two tuples\n    dissimilar_elems = unique_elems - common_elems\n    # return a list of dissimilar elements\n    return list(dissimilar_elems)"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_list = []\n    # Loop through the elements in the first tuple\n    for elem1 in test_tup1:\n        # Check if the element is present in the second tuple\n        if elem1 not in test_tup2:\n            # If the element is not present, add it to the dissimilar_list\n            dissimilar_list.append(elem1)\n    # Return the dissimilar_list\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the dissimilar elements in the given two tuples.\n    \"\"\"\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples as input and returns a list containing the elements in the first tuple that are not in the second tuple.\n\n    Args:\n    test_tup1 (tuple): A tuple of elements.\n    test_tup2 (tuple): A tuple of elements.\n\n    Returns:\n    list: A list of elements in test_tup1 that are not in test_tup2.\n    \"\"\"\n    return [elem for elem in test_tup1 if elem not in test_tup2]"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for tup in test_tuple:\n        if all(even_fnc(i) for i in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc):\n    \"\"\"\n    This function removes uneven elements in a nested mixed tuple.\n    \"\"\"\n    new_tuple = []\n    for i in test_tuple:\n        if even_fnc(i):\n            new_tuple.append(i)\n    return new_tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_list = []\n    for i in test_tuple:\n        if isinstance(i, tuple):\n            new_list.append(even_ele(i, even_fnc))\n        else:\n            new_list.append(even_fnc(i))\n    return new_list\n\ndef double(x):\n    return 2*x"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    \n    even_list = []\n    for item in test_tuple:\n        if isinstance(item, list):\n            even_list.extend(even_ele(item, even_fnc))\n        elif isinstance(item, tuple):\n            even_list.append(even_fnc(item))\n        else:\n            if even_fnc(item):\n                even_list.append(item)\n    \n    return even_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for elem in test_tuple:\n        if type(elem) == tuple:\n            result.append(even_ele(elem, even_fnc))\n        elif type(elem) == list:\n            result.append([even_fnc(x) for x in elem])\n        else:\n            result.append(even_fnc(elem))\n    return result"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n\n    even_list = []\n\n    for tup in test_tuple:\n        if isinstance(tup, tuple):\n            even_list.extend(even_ele(tup, even_fnc))\n        elif even_fnc(tup):\n            even_list.append(tup)\n\n    return even_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for i in test_tuple:\n        if isinstance(i, tuple):\n            result.append(even_ele(i, even_fnc))\n        else:\n            result.append(even_fnc(i))\n    return result"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for item in test_tuple:\n        if even_fnc(item):\n            new_tuple.append(item)\n    return new_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for i in range(len(test_tuple)):\n        if even_fnc(test_tuple[i]):\n            result.append(test_tuple[i])\n    return result"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_list = []\n    for item in test_tuple:\n        if type(item) == tuple:\n            even_list.extend(even_ele(item, even_fnc))\n        else:\n            if even_fnc(item):\n                even_list.append(item)\n    return even_list"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = 1/2 * (b*b + b*s + s*s)\n    print(\"The surface area of the square pyramid is:\",area)"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = 0.5 * b * s * s\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    #Calculate the surface area of a square pyramid using Heron's formula\n    area = 0.5 * b * s * b\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # calculate the surface area of the base and height of the pyramid\n    area_base = 2*b*b\n    area_height = 2*s*s\n    \n    # calculate the surface area of the pyramid\n    surface_area = area_base + area_height\n    \n    # return the surface area\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (b * s) / 2\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n\n    # Calculate the surface area of each square pyramid\n    sq_base_area = 2 * b * b * 0.5\n    sq_height_area = s * b * 0.5\n\n    # Add the surface areas of the pyramids and return the total\n    return sq_base_area + sq_height_area\n"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (b*s**2 + s*b**2 + b*b) / 2\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Find the area of the base\n    area_base = b * b\n    \n    # Find the area of the top of the pyramid\n    area_top = 1/2 * b * s\n    \n    # Return the total surface area of the pyramid\n    return area_base + area_top"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = ((b**2)+(s**2))/2\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surface_Area(b,s):\n    '''\n    This function takes in two parameters: the base edge and the height of the square pyramid.\n    It then calculates and returns the surface area of the pyramid.\n    '''\n    # Calculate the surface area of the pyramid using Heron's formula\n    surface_area = 0.5 * b * s * s\n    return surface_area"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        print(\"The dictionary is empty\")\n    else:\n        print(\"The dictionary is not empty\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        print(\"The dictionary is empty!\")\n    else:\n        print(\"The dictionary is not empty!\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    if dict1 == {}:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    if not dict1:\n        print(\"The dictionary is empty\")\n    else:\n        print(\"The dictionary is not empty\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        print(\"The dictionary is empty.\")\n    else:\n        print(\"The dictionary is not empty.\")"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    n = num - 1\n    return binomial(2*n, n) // (factorial(n) * factorial(2*n - 1))\n\ndef binomial(n, k):\n    if k == 0 or k == n:\n        return 1\n    else:\n        return binomial(n-1, k-1) + binomial(n-1, k)\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def catalan_number(n):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return 2 * catalan_number(n-1)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def catalan_number(num):\n    \"\"\"\n    Write a function which returns nth catalan number.\n    \"\"\"\n    if num == 0:\n        return 1\n    else:\n        n = num - 1\n        c = 2 * n * (n + 1)\n        for i in range(1, n):\n            c = c / (i + 1)\n        return c"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def catalan_number(n):\n    '''\n    Calculate and return the nth Catalan number using recursion.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return catalan_number(n-1) * (2*n-1) // (n+1)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Write a function which returns nth catalan number.\n    \"\"\"\n    # initialize catalan number\n    catalan = [1]\n    # loop through all numbers 0 to n\n    for i in range(1, n+1):\n        # calculate catalan number\n        catalan.append(len(catalan)*i//(i+1))\n    # return catalan number\n    return catalan[n]"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def catalan_number(n):\n    \"\"\"\n    This function returns the nth Catalan number using dynamic programming.\n\n    Args:\n    n (int): The index of the Catalan number to be returned.\n\n    Returns:\n    int: The nth Catalan number.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n > 1:\n        catalan_numbers = [0] * (n + 1)\n        catalan_numbers[0] = 1\n        catalan_numbers[1] = 1\n        for i in range(2, n + 1):\n            catalan_numbers[i] = catalan_numbers[i - 1] + catalan_numbers[i - 2]\n        return catalan_numbers[n]"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    catalan = [1]\n    for i in range(2, num + 1):\n        temp = [0] * (i + 1)\n        for j in range(1, i + 1):\n            temp[j] = j * catalan[j - 1] + i * catalan[j]\n        catalan.extend(temp)\n    return catalan[num]\n"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def catalan_number(n):\n    \"\"\"\n    This function returns the nth catalan number.\n    \"\"\"\n    catalan = [0] * (n+1)\n    catalan[0] = 1\n    catalan[1] = 1\n    for i in range(2, n+1):\n        catalan[i] = (2*i-1) * (catalan[i-1] + catalan[i-2])\n    return catalan[n]"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def catalan_number(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return (2*n-1)*(2*n-3) // (n-1) + catalan_number(n-1)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n\n    # Base case: return 1 for n=0 and 2 for n=1\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 2\n\n    # Recursive case: calculate and return the sum of catalan_number(num-1) and catalan_number(num-2)\n    else:\n        return catalan_number(num-1) + catalan_number(num-2)\n"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = re.findall(r'(\\b\\w+ly\\b)', text)\n    positions = []\n    \n    for i in range(len(text)):\n        for adverb in adverbs:\n            if text[i:i+len(adverb)].lower() == adverb.lower():\n                positions.append(i)\n                break\n    \n    return adverbs, positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\b(ly)\\b'\n    matches = re.findall(pattern, text)\n    for match in matches:\n        start = text.find(match[0])\n        end = start + len(match[0])\n        print(f\"Adverb: {match[0]}, Positions: {start}, {end}\")"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverbs(text):\n    # Define the regular expression pattern for matching adverbs ending with \"ly\"\n    pattern = r'\\b[a-zA-Z]+ly\\b'\n    \n    # Find all non-overlapping matches of the pattern in the given string\n    matches = re.finditer(pattern, text, re.IGNORECASE)\n    \n    # Create a dictionary to store the positions of each matching adverb\n    positions = {}\n    \n    # Iterate over the matches and add their positions to the dictionary\n    for match in matches:\n        positions[match.start()] = True\n    \n    # Create a list of adverb positions and return them\n    adverb_positions = sorted(positions.keys())\n    return adverb_positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\b(ly|lys|lying|lynn)\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n\n    # Define the regular expression pattern for finding the first adverb ending with ly\n    pattern = r'(?:ly)$'\n\n    # Find all non-overlapping occurrences of the pattern in the given string\n    matches = re.findall(pattern, text, re.IGNORECASE)\n\n    # Create a list to store the positions of all adverbs ending with ly\n    adverb_positions = []\n\n    # Loop through all matches and store their positions in the list\n    for match in matches:\n        adverb_positions.append(text.find(match))\n\n    return adverb_positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = []\n    pattern = r'\\bly\\b'\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        start = match.start()\n        end = match.end()\n        adverbs.append((start, end))\n    return adverbs"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverbs(text):\n    # Define a regex pattern to match adverbs ending with ly\n    pattern = re.compile(r'\\b(ly)\\b')\n\n    # Find all non-overlapping matches of the pattern in the text\n    matches = pattern.finditer(text)\n\n    # Iterate over all matches and print their positions and lengths\n    for match in matches:\n        print(f'Found \"{match.group(0)}\" at position {match.start()} with length {len(match.group(0))}.')"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Find all the matches of the pattern \"([A-Za-z]+)ly$\" in the given string\n    matches = re.findall(r\"([A-Za-z]+)ly$\", text)\n\n    # Initialize a list to store the positions of the matches\n    positions = []\n\n    # Iterate over all the matches and append their positions to the positions list\n    for match in matches:\n        positions.append(text.find(match))\n\n    # Return the list of positions of the adverbs ending with ly\n    return positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    This function takes a string as input and returns a list of tuples containing the first adverb ending with ly and its positions in the input string.\n    '''\n    # Define a regular expression pattern to match adverbs ending with ly\n    pattern = r'\\b[a-zA-Z]+ly\\b'\n    # Use the re.findall() method to find all occurrences of the pattern in the input string\n    matches = re.findall(pattern, text)\n    # Iterate over the matches and return a list of tuples containing the adverb and its positions\n    result = []\n    for match in matches:\n        # Split the match into its components (adverb and its positions)\n        adverb, positions = match.split(':')\n        # Convert the positions string into a list of integers and add them to the result list\n        result.append((adverb, [int(x) for x in positions.split('-')]))\n    return result"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverbs(text):\n    # define a regular expression pattern to match adverbs ending with 'ly'\n    pattern = r'\\b(ly|lys|ll|lyin)\\b'\n\n    # find all matches of the pattern in the text\n    matches = re.findall(pattern, text)\n\n    # initialize an empty list to store the adverb positions\n    adverb_positions = []\n\n    # loop through each match and append its position to the list\n    for match in matches:\n        adverb_positions.append(text.find(match))\n\n    # return the list of adverb positions\n    return adverb_positions"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n\n    heap = []\n\n    for item in items:\n        heapq.heappush(heap, (-item[1], item[0]))\n\n    result = []\n\n    for _ in range(n):\n        if heap:\n            result.append(heapq.heappop(heap)[1])\n\n    return result"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Finds the n most expensive items in a given dataset.\n\n    Args:\n    items (list): A list of items to find the n most expensive items in.\n    n (int): The number of most expensive items to find.\n\n    Returns:\n    list: A list of the n most expensive items.\n    \"\"\"\n    # Initialize the heap with the first n items in the dataset\n    heap = items[:n]\n    heapq.heapify(heap)\n\n    # Remove the items from the heap and add the next item in the dataset\n    while len(heap) < len(items):\n        # Remove the smallest item from the heap\n        current_item = heapq.heappop(heap)\n\n        # Add the next item in the dataset to the heap\n        if len(items) > len(heap):\n            next_item = heapq.heappop(items)\n            heapq.heappush(heap, next_item)\n\n    # The heap contains the n most expensive items\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Write a function to find the n most expensive items in a given dataset.\n    \"\"\"\n    heap = []\n    for item in items:\n        if len(heap) < n:\n            heapq.heappush(heap, item)\n        else:\n            if item > heap[0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, item)\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    max_price = float('-inf')\n    for item in items:\n        if item[1] > max_price:\n            max_price = item[1]\n        heapq.heappush(heap, (-item[1], item))\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heapq.nlargest(n, heap)"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    This function takes in a list of items and the maximum number of items to return.\n    It returns a list of the n most expensive items in the dataset.\n    '''\n    # Use a min heap to store the n most expensive items\n    heap = []\n\n    # Add the first n items to the heap\n    for i in range(n):\n        heapq.heappush(heap, items[i])\n\n    # Remove the last item from the heap until the heap has n items\n    while len(heap) < n:\n        # Get the highest-priced item and add it to the heap\n        item = items.pop()\n        heapq.heappush(heap, item)\n\n    # Return the n most expensive items in the dataset\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Use heapq to keep track of the n most expensive items\n    heapq.heapify(items)\n    for _ in range(n):\n        # Remove the smallest item from the heap and append it to the result list\n        heapq.heappop(items)\n    return items"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    This function takes a list of items and a number n as input, and returns a list of the n most expensive items in the dataset.\n    '''\n    # Convert the items to a set to remove duplicates\n    unique_items = set(items)\n    # Initialize the heap with the most expensive item at the top\n    heap = [(-item, item) for item in unique_items]\n    # Use heapify to sort the heap in descending order of item values\n    heapq.heapify(heap)\n    # Initialize an empty list to store the n most expensive items\n    n_most_expensive = []\n    # Add the top n items from the heap to the list\n    for i in range(n):\n        n_most_expensive.append(heapq.heappop(heap)[1])\n    return n_most_expensive"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # create a min-heap of the first n elements in the list\n    min_heap = [items[0]]\n    for i in range(1, n):\n        if items[i] < min_heap[0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, items[i])\n    \n    # return the n most expensive elements from the heap\n    return min_heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a min heap of size n\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, (items[i], i))\n    \n    # Remove the smallest item from the heap and add it to a set of n items\n    result = set()\n    while len(result) < n:\n        item = heapq.heappop(heap)\n        if item[0] not in result:\n            result.add(item[0])\n    \n    # Return the set of n items\n    return list(result)"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Sort the items in descending order of price\n    sorted_items = sorted(items, key=lambda x: x[1], reverse=True)\n    # Create a min-heap of size n\n    min_heap = []\n    # Iterate over the sorted items and add them to the min-heap\n    for item in sorted_items:\n        if len(min_heap) < n:\n            heapq.heappush(min_heap, item)\n        elif item[1] < min_heap[0][1]:\n            heapq.heappushpop(min_heap, item)\n    # Return the n most expensive items\n    return [item[0] for item in min_heap]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # if n is greater than length of list, return the list as it is\n    if n > len(l):\n        return l\n    \n    # split the list at the nth eelment\n    mid = len(l) // 2\n    first_half = l[:mid]\n    second_half = l[mid:]\n    \n    # add the first part of the list to the end of the second half\n    new_list = first_half + second_half\n    \n    # return the new list\n    return new_list"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth element and add the first part to the end.\n    '''\n    if n > len(l) or n <= 0:\n        return 'Invalid input'\n    else:\n        mid = len(l) // 2\n        return l[:mid] + [l[n-1]] + l[mid+1:]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # If the list length is less than the nth element, return the original list\n    if len(l) < n:\n        return l\n    # Split the list at the nth element\n    mid = len(l)//2\n    first_part = l[:mid]\n    second_part = l[mid:]\n    # Add the first part to the end of the second part\n    l = second_part + first_part\n    return l"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if len(l) < n:\n        return None\n    elif n == 0:\n        return l\n    else:\n        mid = len(l) // 2\n        first_half = l[:mid]\n        second_half = l[mid+1:]\n        first_half.extend(second_half)\n        return first_half"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n >= len(l):\n        return None\n    else:\n        mid = len(l) // 2\n        return l[:mid] + [l[n]] + l[mid:]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n <= 0:\n        return None\n    \n    # Find the index of the nth element\n    i = 0\n    while i < len(l) and i < n:\n        i += 1\n    \n    # If the nth element does not exist in the list, return None\n    if i == len(l):\n        return None\n    \n    # Split the list at the nth element and add the first part to the end\n    first_part = l[:i]\n    second_part = l[i:]\n    return first_part + second_part"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    new_list = l.copy()\n    new_list.insert(n, new_list.pop(0))\n    return new_list"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if type(l)!= list:\n        return None\n    if n < 1 or n > len(l):\n        return None\n    else:\n        return l[n:] + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[n:] + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[n:] + l[:n]"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    '''\n    Convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_to_tuple(lst):\n    return tuple(lst)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_tuple(lst):\n    \"\"\"\n    Convert a list to a tuple.\n\n    Parameters:\n    lst: A list.\n\n    Returns:\n    A tuple containing the elements of the list.\n\n    \"\"\"\n    return tuple(lst)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    return tuple(listx)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 0:\n        return \"List is empty.\"\n    else:\n        max_val = max(nums)\n        min_val = min(nums)\n        return abs(max_val - min_val)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    largest = max(nums)\n    smallest = min(nums)\n    return largest - smallest"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n\n    # Find the maximum and minimum values in the list\n    max_num = max(nums)\n    min_num = min(nums)\n\n    # Return the difference between max and min\n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) < 2:\n        return \"List must have at least 2 numbers\"\n    else:\n        largest = nums[0]\n        smallest = nums[0]\n        for num in nums:\n            if num > largest:\n                largest = num\n            elif num < smallest:\n                smallest = num\n        return abs(largest - smallest)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    This function takes a list of numbers as an input and returns the difference between the largest and smallest value in the list.\n    '''\n\n    # Find the largest and smallest values in the list\n    largest = max(nums)\n    smallest = min(nums)\n\n    # Calculate the difference between the largest and smallest values\n    diff = largest - smallest\n\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # initialize variables for largest and smallest values\n    largest = float('-inf')\n    smallest = float('inf')\n    \n    # loop through the list and update largest and smallest values\n    for num in nums:\n        if num > largest:\n            largest = num\n        if num < smallest:\n            smallest = num\n            \n    # calculate and return the difference between largest and smallest values\n    return largest - smallest"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) < 2:\n        return \"Invalid input: List must have at least two elements.\"\n    \n    largest = nums[0]\n    smallest = nums[0]\n    \n    for num in nums:\n        if num > largest:\n            largest = num\n        if num < smallest:\n            smallest = num\n    \n    return abs(largest - smallest)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) > 1:\n        return max(nums) - min(nums)\n    else:\n        return 0"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # Initialize variables for smallest and largest values\n    smallest = float('inf')\n    largest = float('-inf')\n\n    # Iterate through the list of numbers\n    for num in nums:\n        # Update smallest and largest values if necessary\n        if num < smallest:\n            smallest = num\n        if num > largest:\n            largest = num\n\n    # Return the difference between largest and smallest values\n    return largest - smallest"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Initialize variables\n    squares = []\n    num = a\n    # Loop through the numbers from a to b\n    while num <= b:\n        # If the square of the number is less than or equal to b, add it to the list of perfect squares\n        if num * num <= b:\n            squares.append(num * num)\n        # Increment the number by 1\n        num += 1\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a < b:\n        a, b = b, a # swap a and b if a is smaller than b\n\n    for i in range(a, b+1):\n        if i*i == a or i*i == b: # check if the square is equal to a or b\n            return i # return the square if it is\n\n    return None # if no perfect square is found, return None"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for i in range(int(a**0.5) + 1):\n        for j in range(int(b**0.5) + 1):\n            if i*i + j*j == a or i*i + j*j == b:\n                squares.append((i, j))\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    perfect_squares_list = []\n    for num in range(int(a), int(b)+1):\n        if num**2 == num:\n            perfect_squares_list.append(num)\n    return perfect_squares_list"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    result = []\n    for i in range(a, b+1):\n        j = i**2\n        while j <= b:\n            if j == i**2:\n                result.append(j)\n            j += 1\n    return result"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Create a list to store the perfect squares found\n    perfect_squares_list = []\n    \n    # Loop through each number between a and b\n    for i in range(a, b+1):\n        # Check if the square of the current number is equal to the current number\n        if i * i == i:\n            perfect_squares_list.append(i)\n    \n    return perfect_squares_list"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Create a list to store perfect squares\n    squares = []\n\n    # Check for perfect squares between a and b\n    for i in range(int(a**0.5)+1):\n        for j in range(int(b**0.5)+1):\n            if (i**2)+(j**2) == a:\n                squares.append((i, j))\n            elif (i**2)+(j**2) == b:\n                squares.append((j, i))\n\n    # Return the list of perfect squares between a and b\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n\n    # Initialize variables\n    count = 0\n    num = a\n    while num <= b:\n        count += 1\n        num = num ** 2\n\n    return count"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b + 1):\n        square = i * i\n        if square == i * i:\n            print(square)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # We start by initializing a variable to keep track of the count of perfect squares\n    count = 0\n    # We loop through all possible values of a\n    for i in range(a, b+1):\n        # We check if i is the square of a perfect square\n        if i == i**0.5**2:\n            count += 1\n    # Finally, we return the count of perfect squares\n    return count"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef polar_rect(x, y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.phase(x + y*1j)\n    x_rect = r * cmath.cos(theta)\n    y_rect = r * cmath.sin(theta)\n    return x_rect, y_rect\n"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r*cmath.cos(theta)\n    y = r*cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Write a function to convert polar coordinates to rectangular coordinates.\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y\n"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    \"\"\"\n    Write a function to convert polar coordinates to rectangular coordinates.\n\n    Parameters:\n    r (float): radius of the point\n    theta (float): angle of the point in radians\n\n    Returns:\n    (float, float): x-coordinate, y-coordinate of the point in rectangular coordinates\n\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    \"\"\"\n    Convert polar coordinates to rectangular coordinates.\n    \n    Args:\n        r (float): radial distance\n        theta (float): angle in radians\n        \n    Returns:\n        tuple: (x,y) coordinates in rectangular coordinates\n    \"\"\"\n    # convert angle to degrees\n    theta_deg = theta * 180 / cmath.pi\n    # calculate x and y components\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    # convert to tuple\n    return (x,y)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Converts polar coordinates to rectangular coordinates.\n    \n    Args:\n    r: real number\n    theta: angle in radians\n    \n    Returns:\n    x: real number\n    y: real number\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    This function takes two parameters, r, which is the distance from the origin (0,0), and theta, which is the angle in radians.\n    The function returns the x and y coordinates of the point (x,y) in rectangular coordinates.\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return (x.real, y.real)"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # get the length of the list\n    length = len(newList)\n    # check if the list has length greater than 1\n    if length > 1:\n        # get the first and last elements of the list\n        first = newList[0]\n        last = newList[length-1]\n        # interchange the first and last elements\n        newList[0] = last\n        newList[length-1] = first\n    # return the modified list\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) <= 1:\n        return newList\n    \n    first_element = newList[0]\n    last_element = newList[-1]\n    \n    newList[0] = last_element\n    newList[-1] = first_element\n    \n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList):\n    \"\"\"\n    This function takes in a list and swaps the first and last elements.\n    \"\"\"\n    if len(newList) < 2:\n        print(\"List must have at least two elements.\")\n        return newList\n    elif len(newList) == 2:\n        return newList\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) < 2:\n        return newList\n    \n    # swap the first and last elements\n    first_last = newList[0], newList[-1]\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    # swap the second and second to last elements\n    second_last = newList[1], newList[-2]\n    newList[1], newList[-2] = newList[-2], newList[1]\n    \n    # swap the third and third to last elements\n    third_last = newList[2], newList[-3]\n    newList[2], newList[-3] = newList[-3], newList[2]\n    \n    # append the first and last elements back to the list\n    newList.extend([first_last])\n    \n    # append the second and second to last elements back to the list\n    newList.extend([second_last])\n    \n    # append the third and third to last elements back to the list\n    newList.extend([third_last])\n    \n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n\n    if len(newList) >= 2:\n        # Swap the first and last elements in the list\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList\n    else:\n        print(\"The list should have at least two elements\")\n        return None"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList):\n    # If the list has less than 2 elements, return it as is\n    if len(newList) < 2:\n        return newList\n    \n    # Interchange the first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    return newList"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    This function calculates the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    # Initialize variables\n    sum_coeff = 0\n    numerator = 1\n    denominator = 1\n\n    # Calculate the sum of the product of consecutive binomial co-efficients\n    for i in range(1, k + 1):\n        numerator *= (n - i + 1)\n        denominator *= i\n        sum_coeff += numerator // denominator\n\n    return sum_coeff"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def binomial_Coeff(n, k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n\n    # Initialize the sum to 0\n    sum = 0\n\n    # Calculate the sum of product of consecutive binomial coefficients\n    for i in range(n, n - k, -1):\n        sum += i * (n - i)\n\n    return sum\n"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def binomial_Coeff(n, k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k == 0:\n        return 1\n    elif k == 1:\n        return n\n    else:\n        return n * binomial_Coeff(n-1, k-1)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def binomial_Coeff(n,k):\n    # Initialize sum to 0\n    sum = 0\n    # Loop through all values of k from 0 to n-k\n    for i in range(0, n-k+1):\n        # Calculate binomial coefficient using formula:\n        # C(n, k) = C(n, n-k) * (n-k+1)/k\n        C_n_k = (n-k+1)*i//k\n        sum += C_n_k\n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    This function calculates the sum of the product of consecutive binomial co-efficients.\n\n    Args:\n    n (int): The value of n.\n    k (int): The value of k.\n\n    Returns:\n    float: The sum of the product of consecutive binomial co-efficients.\n\n    Example:\n    >>> binomial_Coeff(4, 2)\n    4.0\n\n    Note: This function uses integer division to ensure that the result is an integer.\n    '''\n\n    # Initialize variables for sum and product\n    sum = 0\n    product = 1\n\n    # Calculate the sum of the product of consecutive binomial co-efficients\n    for i in range(1, k+1):\n        sum += (product * (n-i+1)) // i\n        product *= (n-i+1)\n\n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n < 0 or k < 0 or n < k:\n        return \"Invalid input\"\n\n    if k == 0 or k == n:\n        return 1\n\n    if k > n/2:\n        k = n-k\n\n    sum_coeff = 0\n    for i in range(k, n+1):\n        sum_coeff += (n-i+1) * binomial_Coeff(n-1,i-1)\n\n    return sum_coeff\n"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def binomial_Coeff(n, k):\n    '''\n    This function takes two parameters, n and k, which represent the values of n and k for which we want to calculate the sum of the product of consecutive binomial co-efficients.\n    The function returns the sum of the product of consecutive binomial co-efficients.\n    '''\n    sum_product = 0\n    for i in range(1, k+1):\n        sum_product += n * (n-i+1) // i\n    return sum_product"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n\n    # Initialize variables\n    count = 0\n    total = 0\n\n    # Calculate the sum of the product of consecutive binomial co-efficients\n    for i in range(k,n+1):\n        count += 1\n        total += (n-k+count)*(n-k+count-1)//2\n\n    return total"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    This function finds the sum of the product of consecutive binomial co-efficients.\n    '''\n\n    # Initialize variables\n    coeff = 1\n    sum_coeff = 0\n\n    # Calculate the product of consecutive binomial co-efficients\n    for i in range(k,n+1):\n        coeff *= i\n        sum_coeff += coeff\n\n    return sum_coeff"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n < k:\n        return 0\n    result = 1\n    for i in range(1,k+1):\n        result *= (n-i+1) / i\n    return result"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'^\\s*0+', '', ip)\n    ip = re.sub(r'\\s+$', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = ip.strip() # remove leading and trailing whitespaces\n    ip = re.sub(r'^0+(\\d)', r'\\1', ip) # remove leading zeroes\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'(\\d+)(\\.0+)*$', r'\\1', ip)\n    return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$', ip, flags=re.IGNORECASE)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # remove leading zeroes from each octet\n    pattern = r'(\\d{1,2})\\.(\\d{1,2})\\.(\\d{1,2})\\.(\\d{1,2})'\n    ips = re.findall(pattern, ip)\n    for i in range(len(ips)):\n        for j in range(4):\n            ips[i][j] = re.sub(r'^\\s*0*\\d+\\s*$', '', ips[i][j])\n    return '.'.join(ips)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n\n    # Use regular expression to match leading zeroes and remove them\n    ip = re.sub('^0+', '', ip)\n\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub('^0+', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef removezero_ip(ip):\n    \"\"\"\n    This function takes an IP address as a string and removes leading zeroes from it.\n    \"\"\"\n    pattern = r'^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$'\n    match = re.match(pattern, ip)\n    if match:\n        return '.'.join(filter(lambda x: x!= '0', ip.split('.')))\n    else:\n        return 'Invalid IP Address'"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r\"^0+(?=\\d)\", \"\", ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'^\\s*0+', '', ip)\n    return ip"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    \"\"\"\n    Write a function to find the difference of the first even and first odd number of a given list.\n    \"\"\"\n    even_num = 0\n    odd_num = 0\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_num += num\n        else:\n            odd_num += num\n    \n    return abs(even_num - odd_num)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def diff_even_odd(lst):\n    \"\"\"\n    Finds the difference between the first even and first odd number in a list.\n    \"\"\"\n    even_num = None\n    odd_num = None\n    for num in lst:\n        if num % 2 == 0 and (even_num is None or num < even_num):\n            even_num = num\n        elif num % 2 == 1 and (odd_num is None or num < odd_num):\n            odd_num = num\n    if even_num is None or odd_num is None:\n        raise ValueError(\"List does not contain at least two even and two odd numbers.\")\n    return abs(even_num - odd_num)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    first_even = 0\n    first_odd = 0\n    for num in list1:\n        if num % 2 == 0:\n            first_even = num\n        else:\n            first_odd = num\n    return first_even - first_odd\n"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_number = None\n    odd_number = None\n    even_count = 0\n    odd_count = 0\n\n    for num in list1:\n        if num % 2 == 0 and even_number is None:\n            even_number = num\n            even_count += 1\n        elif num % 2 == 1 and odd_number is None:\n            odd_number = num\n            odd_count += 1\n\n    if even_count == 0 or odd_count == 0:\n        return None\n\n    return even_number - odd_number"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def diff_even_odd(lst):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = next((num for num in lst if num % 2 == 0), None)\n    odd_num = next((num for num in lst if num % 2!= 0), None)\n\n    return even_num - odd_num if even_num is not None and odd_num is not None else None"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = None\n    odd_num = None\n    \n    for num in list1:\n        if num % 2 == 0 and even_num is None:\n            even_num = num\n        elif num % 2!= 0 and odd_num is None:\n            odd_num = num\n    \n    if even_num is not None and odd_num is not None:\n        return abs(even_num - odd_num)\n    else:\n        return None"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = list1[0]\n    odd_num = list1[1]\n    return abs(even_num - odd_num)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    \"\"\"\n    Write a function to find the difference of the first even and first odd number of a given list.\n    \"\"\"\n    for i in range(len(list1)):\n        if list1[i] % 2 == 0 and i!= 0:\n            if list1[i] - list1[i-1]!= list1[i-2] - list1[i-1]:\n                return list1[i] - list1[i-1]\n"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    This function takes a list as an argument and returns the difference of the first even and first odd number of the list.\n    '''\n    even_num = 0\n    odd_num = 0\n    \n    # iterate through the list and find the first even and first odd numbers\n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n        elif num % 2!= 0:\n            odd_num = num\n    \n    # if there are no even or odd numbers, return the original list\n    if even_num == 0 and odd_num == 0:\n        return list1\n    \n    # calculate the difference between the even and odd numbers and return it\n    else:\n        return even_num - odd_num"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_index = 0\n    odd_index = 0\n    while even_index < len(list1) and odd_index < len(list1):\n        if list1[even_index] % 2 == 0:\n            even_index += 1\n        else:\n            odd_index += 1\n    if even_index < len(list1):\n        return list1[even_index] - list1[0]\n    else:\n        return list1[odd_index] - list1[0]"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Swaps(str1,str2):\n    \"\"\"\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    \"\"\"\n    # convert binary strings to integers\n    n1, n2 = int(str1, 2), int(str2, 2)\n\n    # get the bit count of each binary number\n    count1 = bin(n1).count('1')\n    count2 = bin(n2).count('1')\n\n    # get the minimum count of swaps required to convert the binary number\n    swaps = abs(count1 - count2)\n\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Swaps(str1, str2):\n    n = len(str1)\n    if n!= len(str2):\n        return \"Invalid Input\"\n    swaps = 0\n    for i in range(n):\n        if str1[i]!= str2[i]:\n            if str1[i] == '1' and str2[i] == '0':\n                swaps += 1\n            elif str1[i] == '0' and str2[i] == '1':\n                swaps += 1\n            elif str1[i] == '1' and str2[i] == '1':\n                swaps += 1\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Swaps(str1, str2):\n    # create a list of lists to store the characters of the two strings\n    char_list = [[0]*256 for i in range(len(str1)+1)]\n\n    # initialize the character counts for both strings\n    for i in range(len(str1)):\n        char_list[i+1][ord(str1[i])] += 1\n        char_list[i+1][ord(str2[i])] -= 1\n\n    # initialize the minimum number of swaps to be 0\n    min_swaps = 0\n\n    # iterate through all possible pairs of characters from both strings\n    for i in range(len(str1)+1):\n        for j in range(len(str1)+1):\n            if i == j:\n                continue\n            # check if the two characters are the same\n            if char_list[i][j] == 0:\n                continue\n            # check if the two characters have the same parity\n            if char_list[i][j] % 2 == char_list[j][i] % 2:\n                continue\n            # increment the minimum number of swaps by 1\n            min_swaps += 1\n\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Swaps(str1, str2):\n    # Convert both strings into binary and store them in lists\n    binary1 = [int(bit) for bit in str1[::-1]]\n    binary2 = [int(bit) for bit in str2[::-1]]\n\n    # Initialize variables to store the minimum number of swaps required and the number of swaps made\n    min_swaps = 0\n    swaps = 0\n\n    # Loop through the length of the shorter binary number\n    for i in range(min(len(binary1), len(binary2))):\n        # If the bits at the current index are different, swap the bits and increment the swap count\n        if binary1[i]!= binary2[i]:\n            binary1[i], binary2[i] = binary2[i], binary1[i]\n            swaps += 1\n            min_swaps = min(min_swaps, swaps)\n\n    # Return the minimum number of swaps required\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Swaps(str1, str2):\n    n = len(str1)\n    swap_count = 0\n    for i in range(n):\n        if str1[i]!= str2[i]:\n            swap_count += 1\n            if str1[i] == '0':\n                str1[i] = '1'\n                str2[i] = '0'\n            else:\n                str1[i] = '0'\n                str2[i] = '1'\n    return swap_count\n"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    \"\"\"\n    # Convert both strings to binary\n    binary1 = ''.join(['{0:08b}'.format(int(digit)) for digit in str1])\n    binary2 = ''.join(['{0:08b}'.format(int(digit)) for digit in str2])\n\n    # Initialize variables to store the swaps required\n    swaps = 0\n    i = 0\n    j = 0\n\n    # Compare the binary strings and count the number of swaps required\n    while i < len(binary1) and j < len(binary2):\n        if binary1[i]!= binary2[j]:\n            swaps += 1\n            # Swap the characters if the binary strings are not equal\n            if binary1[i] == '0':\n                binary1[i], binary1[j] = binary1[j], binary1[i]\n            else:\n                binary1[i], binary1[j] = binary1[i], binary1[j]\n            if binary2[i] == '0':\n                binary2[i], binary2[j] = binary2[j], binary2[i]\n            else:\n                binary2[i], binary2[j] = binary2[i], binary2[j]\n            i += 1\n            j += 1\n        else:\n            # Move to the next pair of characters in both strings\n            i += 1\n            j += 1\n\n    # Return the minimum number of swaps required\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Swaps(str1, str2):\n    m, n = len(str1), len(str2)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0 and j == 0:\n                dp[i][j] = 0\n            elif i == 0:\n                dp[i][j] = j\n            elif j == 0:\n                dp[i][j] = i\n            elif str1[i-1] == str2[j-1]:\n                dp[i][j] = dp[i-1][j-1]\n            elif str1[i-1] > str2[j-1]:\n                dp[i][j] = dp[i-1][j] + 1\n            else:\n                dp[i][j] = dp[i][j-1] + 1\n    return dp[m][n]"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    This function counts the minimum number of swaps required to convert one binary number represented as a string to another.\n    \"\"\"\n\n    # Initialize two arrays to store the digits of each binary number\n    binary1 = [int(x) for x in str1]\n    binary2 = [int(x) for x in str2]\n\n    # Sort the digits of each binary number in non-decreasing order\n    binary1.sort()\n    binary2.sort()\n\n    # Initialize two pointers for the two binary numbers\n    i, j = 0, 0\n\n    # Initialize a variable to store the minimum number of swaps\n    min_swaps = float('inf')\n\n    # Compare the digits of the two binary numbers and count the minimum number of swaps required to convert one to the other\n    while i < len(binary1) and j < len(binary2):\n        if binary1[i] == binary2[j]:\n            i += 1\n            j += 1\n        elif binary1[i] < binary2[j]:\n            min_swaps = min(min_swaps, len(binary1) - i)\n            i += 1\n        else:\n            min_swaps = min(min_swaps, len(binary2) - j)\n            j += 1\n\n    # Return the minimum number of swaps required to convert one binary number to the other\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Swaps(str1,str2):\n    # converting the binary numbers to their respective integer values\n    int1 = int(str1, 2)\n    int2 = int(str2, 2)\n    # calculating the common digits between the two numbers\n    common_digits = set(str1).intersection(str2)\n    # initializing the count of swaps required\n    swaps = 0\n    # iterating through the common digits and swapping their positions in the binary strings\n    for digit in common_digits:\n        # finding the positions of the digits in the first number\n        positions1 = [i for i, j in enumerate(str1) if j == digit]\n        # finding the positions of the digits in the second number\n        positions2 = [i for i, j in enumerate(str2) if j == digit]\n        # swapping the positions of the digits in the first and second number\n        str1 = ''.join([str1[i] if i not in positions1 else str2[pos] for i, pos in enumerate(positions2)])\n        str2 = ''.join([str2[i] if i not in positions2 else str1[pos] for i, pos in enumerate(positions1)])\n        # incrementing the count of swaps required\n        swaps += len(positions1) - len(positions2)\n    # returning the final count of swaps required\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Swaps(str1, str2):\n    # Convert binary strings to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # Initialize variables for binary representation and result\n    binary_representation = \"\"\n    result = \"\"\n\n    # Convert integers to binary strings and add to binary representation\n    while num1 > 0:\n        binary_representation = str(num1 % 2) + binary_representation\n        num1 = num1 // 2\n\n    while num2 > 0:\n        binary_representation = str(num2 % 2) + binary_representation\n        num2 = num2 // 2\n\n    # Initialize variables for swaps and count of swaps\n    swaps = 0\n    count = 0\n\n    # Compare binary representation of two numbers and swap bits if they are different\n    for i in range(len(binary_representation)):\n        if binary_representation[i]!= result[i]:\n            count += 1\n            if count > 1:\n                swaps += count - 1\n            count = 1\n            swaps += 1\n\n    return swaps"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import sys\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # Get the size of the first tuple in bytes\n    size_of_tuple = sys.getsizeof(tuple_list[0])\n    # Loop through the tuple list and add up the size of each tuple in bytes\n    for i in range(len(tuple_list)):\n        size_of_tuple += sys.getsizeof(tuple_list[i])\n    # Return the total size of the tuples in bytes\n    return size_of_tuple"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import sys\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for tuple in tuple_list:\n        # Iterate over the elements in each tuple and calculate the size of each element\n        for element in tuple:\n            element_size = sys.getsizeof(element)\n            total_size += element_size\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n\n    # Use the sys.getsizeof() function to get the size of the tuple\n    size = sys.getsizeof(tuple_list)\n\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for tup in tuple_list:\n        size += sys.getsizeof(tup)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for i in tuple_list:\n        size += sys.getsizeof(i)\n    return size\n"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for item in tuple_list:\n        total_size += sys.getsizeof(item)\n    return total_size"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # Initialize two pointers for each array\n    i = 0\n    j = 0\n\n    # Compare the elements pointed by both pointers\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n\n    # If the remaining elements in one array are less than k,\n    # then the remaining element in the other array is the kth element\n    if i < len(arr1):\n        return arr1[i]\n    else:\n        return arr2[j]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    # Find the length of the smaller array\n    length1 = len(arr1)\n    length2 = len(arr2)\n\n    # If the length of the smaller array is less than k, return the value of the last element of the larger array\n    if length1 < k:\n        return arr2[-1]\n    elif length2 < k:\n        return arr1[-1]\n\n    # Initialize two pointers for the smaller array and two pointers for the larger array\n    i, j = 0, 0\n\n    # Find the middle element of the smaller array\n    mid = (length1 + length2) // 2\n\n    # Loop through the array and find the kth smallest element\n    while i <= mid and j <= length2:\n        if arr1[i] < arr2[j]:\n            if k == i + 1:\n                return arr1[i]\n            i += 1\n        else:\n            if k == j + 1:\n                return arr2[j]\n            j += 1\n\n    # If the kth smallest element is in the first half of the smaller array, find it using the same logic\n    if i <= mid:\n        return find_kth(arr1[:i], arr2, k - i)\n    else:\n        return find_kth(arr1, arr2[:j], k - j)"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # Initialize two pointers, left and right, to the start of the arrays\n    left = 0\n    right = 0\n    \n    # Initialize a variable to store the kth element\n    kth_element = None\n    \n    # Compare the first element of each array until the pointers cross\n    while left < len(arr1) and right < len(arr2):\n        if arr1[left] < arr2[right]:\n            kth_element = arr1[left]\n            left += 1\n        elif arr1[left] > arr2[right]:\n            kth_element = arr2[right]\n            right += 1\n            \n    # Check if there are still elements left in one of the arrays\n    if left < len(arr1):\n        kth_element = arr1[left]\n    elif right < len(arr2):\n        kth_element = arr2[right]\n        \n    # Return the kth element\n    return kth_element"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n\n    # Merge the two arrays\n    merged_arr = arr1 + arr2\n\n    # Sort the merged array\n    sorted_arr = sorted(merged_arr)\n\n    # Return the kth element\n    return sorted_arr[k - 1]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n            i += 1\n            j += 1\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # initializing variables to keep track of the current position in both arrays\n    i = j = 0\n\n    # loop through the arrays until both arrays have been completely traversed\n    while i < len(arr1) and j < len(arr2):\n        # if the current elements in both arrays are equal, we increment both i and j\n        if arr1[i] == arr2[j]:\n            i += 1\n            j += 1\n        # if the current element in arr1 is less than the current element in arr2, we increment i\n        elif arr1[i] < arr2[j]:\n            i += 1\n        # otherwise, we increment j\n        else:\n            j += 1\n\n    # if we have not traversed both arrays completely, we need to check the remaining elements\n    if i < len(arr1):\n        return find_kth(arr1, arr2[j:], k - (i - j))\n    else:\n        return find_kth(arr1[i:], arr2, k - i)"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n            break\n    if i == len(arr1):\n        return arr2[j]\n    else:\n        return arr1[i]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    This function takes in two sorted arrays and a number k and returns the kth smallest element from both arrays.\n    '''\n    i = 0\n    j = 0\n    \n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n    \n    if i == len(arr1):\n        return arr2[j]\n    else:\n        return arr1[i]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = 0\n    j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] == arr2[j]:\n            i += 1\n            j += 1\n        elif arr1[i] < arr2[j]:\n            i += 1\n        else:\n            j += 1\n    return arr1[i] if i == k else arr2[j]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    This function takes in two sorted arrays and an integer k,\n    and returns the kth smallest element from the two arrays.\n    '''\n\n    # Initialize two pointers to the beginning of the arrays\n    i = j = 0\n\n    # Initialize a variable to store the current kth element\n    kth = 0\n\n    # Loop through the arrays until one of the pointers reaches the end\n    while i < len(arr1) and j < len(arr2):\n\n        # If the current kth element is in arr1, increment i and move to the next kth element\n        if arr1[i] < arr2[j]:\n            i += 1\n            kth += 1\n\n        # If the current kth element is in arr2, increment j and move to the next kth element\n        elif arr1[i] > arr2[j]:\n            j += 1\n            kth += 1\n\n        # If the current kth element is in both arrays, compare the corresponding elements and move to the next kth element\n        else:\n            if i < len(arr1) - 1 and j < len(arr2) - 1:\n                if arr1[i] < arr1[i+1]:\n                    i += 1\n                    kth += 1\n                elif arr1[i] > arr1[i+1]:\n                    j += 1\n                    kth += 1\n                else:\n                    if arr1[i] < arr2[j]:\n                        i += 1\n                        kth += 1\n                    elif arr1[i] > arr2[j]:\n                        j += 1\n                        kth += 1\n            else:\n                i += 1\n                j += 1\n                kth += 1\n\n    # If the kth element is in arr1, return it\n    if i == len(arr1):\n        return arr1[j]\n\n    # If the kth element is in arr2, return it\n    else:\n        return arr2[i]"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum = 0\n    temp = number\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** 3\n        temp //= 10\n    if number == sum:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    # Initialize the sum variable to 0\n    sum = 0\n    # Initialize the power variable to the number of digits in the number\n    power = len(str(number))\n    # Convert the number to a list of digits\n    digits = [int(digit) for digit in str(number)]\n    # Loop through the digits of the number\n    for digit in digits:\n        # Compute the sum of the digit raised to the power of the number of digits\n        sum += digit ** power\n    # Check if the sum is equal to the original number\n    if sum == number:\n        print(f\"{number} is an armstrong number.\")\n    else:\n        print(f\"{number} is not an armstrong number.\")"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Initialize variables for storing the sum of the cube of the digits, and the sum of the digits themselves.\n    sum_of_cubes = 0\n    sum_of_digits = 0\n\n    # Loop through each digit in the number and add it to the sum of the digits.\n    while number > 0:\n        digit = number % 10\n        sum_of_digits += digit\n        number //= 10\n\n    # Loop through each digit in the number and add the cube of that digit to the sum of the cubes.\n    while number > 0:\n        digit = number % 10\n        sum_of_cubes += digit ** 3\n        number //= 10\n\n    # Return True if the sum of the cubes is equal to the sum of the digits, else return False.\n    return sum_of_cubes == sum_of_digits"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    n = int(number)\n    sum = 0\n    temp = n\n    while temp > 0:\n        digit = temp % 10\n        sum += digit**3\n        temp //= 10\n    return n == sum"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    # Convert the input number to a string and get its length\n    num_str = str(number)\n    num_length = len(num_str)\n\n    # Calculate the sum of the cubes of each digit in the number\n    sum_of_cubes = 0\n    for digit in num_str:\n        digit = int(digit)\n        sum_of_cubes += digit ** 3\n\n    # Check whether the sum of the cubes of each digit is equal to the original number\n    if sum_of_cubes == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Convert the given number to a list of digits\n    digits = [int(d) for d in str(number)]\n    # Calculate the sum of the cubes of the digits\n    total = sum(d**3 for d in digits)\n    # If the total is equal to the original number, then it is an armstrong number\n    if total == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    number = int(number)\n    sum_of_square_of_digits = 0\n    temp = number\n    while temp > 0:\n        digit = temp % 10\n        sum_of_square_of_digits += digit ** 3\n        temp //= 10\n    if sum_of_square_of_digits == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n\n    # Check if the number is negative\n    if number < 0:\n        return False\n    \n    # Convert the number to a string\n    number_str = str(number)\n    \n    # Initialize the sum to 0\n    armstrong_sum = 0\n    \n    # Loop through each digit of the number and add it to the sum if it's a positive integer\n    for digit in number_str:\n        if int(digit) >= 0:\n            armstrong_sum += int(digit)**len(number_str)\n    \n    # Check if the sum is equal to the original number\n    if armstrong_sum == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    This function takes an integer number as input and returns True if it is an Armstrong number else False.\n    An Armstrong number is a number that is equal to the sum of its own digits each raised to the power of the number of digits.\n    \"\"\"\n    # Convert the number to a string\n    number_str = str(number)\n\n    # Initialize the sum to 0\n    sum_of_digits = 0\n\n    # Iterate over each digit of the number\n    for digit in number_str:\n        # Convert the digit to an integer and add it to the sum\n        sum_of_digits += int(digit) ** len(number_str)\n\n    # Check if the sum is equal to the original number\n    if sum_of_digits == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_armstrong(n):\n    # convert number to string and reverse it\n    num_str = str(n)[::-1]\n    # initialize sum and current digit\n    sum = 0\n    digit = 0\n    # loop through each digit in the reversed number\n    for i in num_str:\n        # convert digit to integer and add to sum\n        digit = int(i)\n        sum += digit**3\n    # return whether the sum of the squares of each digit equals the original number\n    return n == sum"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    total = 0\n    count = 0\n    for i in range(1, number+1):\n        total += i\n        count += 1\n    average = total / count\n    return total, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_average(n):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum = 0\n    total = 0\n    count = 0\n    while count < n:\n        num = int(input(\"Enter a natural number: \"))\n        sum += num\n        count += 1\n        total += 1\n\n    average = sum / total\n    print(\"Sum of first {} natural numbers is {}\".format(n, sum))\n    print(\"Average of first {} natural numbers is {}\".format(n, average))"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(1, number + 1):\n        sum += i\n        count += 1\n    average = sum / count\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(1, number+1):\n        sum += i\n        count += 1\n    average = sum / count\n    print(\"Sum:\", sum)\n    print(\"Average:\", average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum_ = 0\n    count = 0\n    for i in range(1, number+1):\n        sum_ += i\n        count += 1\n    average = sum_/count\n    return sum_, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum = 0\n    count = 0\n    for i in range(1, number+1):\n        sum += i\n        count += 1\n    average = sum / count\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_average(n):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    # initialize sum and average variables to 0\n    sum = 0\n    average = 0\n\n    # loop through the first n natural numbers\n    for i in range(1, n+1):\n        # add the current number to the sum\n        sum += i\n\n        # calculate the average\n        average = sum / n\n\n    # print the sum and average\n    print(\"Sum of the first\", n, \"natural numbers is:\", sum)\n    print(\"Average of the first\", n, \"natural numbers is:\", average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    if number <= 0:\n        return \"Invalid input. Please enter a positive integer.\"\n    else:\n        sum = 0\n        for i in range(1, number+1):\n            sum += i\n        average = sum / number\n        return \"The sum of the first {} natural numbers is: {}\\nThe average of the first {} natural numbers is: {}\".format(number, sum, number, average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    # initialize sum and count to 0\n    sum_count = 0\n    \n    # iterate over the first n natural numbers\n    for i in range(1, number+1):\n        # add the current number to the sum\n        sum_count += i\n    \n    # calculate the sum of the first n natural numbers\n    total_sum = sum_count\n    \n    # calculate the average of the first n natural numbers\n    average = total_sum / number\n    \n    # return the sum and average as a tuple\n    return (total_sum, average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(1, number+1):\n        sum += i\n        count += 1\n    average = sum/count\n    return sum, average"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Even(n):\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        print(n, \"is even\")\n    else:\n        print(n, \"is odd\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Even(n):\n    \"\"\"\n    This function takes a number as an input and returns True if the number is even, False otherwise.\n    \"\"\"\n    if n%2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        print(n, \"is even\")\n    else:\n        print(n, \"is odd\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        print(n, \"is even\")\n    else:\n        print(n, \"is odd\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0:\n        print(n,\"is Even\")\n    else:\n        print(n,\"is Odd\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Even(n):\n    '''\n    This function takes an integer input and returns True if it's even and False otherwise.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        print(n, \"is even\")\n    else:\n        print(n, \"is odd\")"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n\n    # Create a dictionary to store the frequency of each character in the string\n    freq = {}\n\n    # Iterate through each character in the string\n    for char in str1:\n\n        # If the character is already in the dictionary, increment its count by 1\n        if char in freq:\n            freq[char] += 1\n\n        # If the character is not in the dictionary, add it with a count of 1\n        else:\n            freq[char] = 1\n\n    # Initialize variables to store the first repeated character and its frequency\n    first_char = None\n    freq_first_char = 0\n\n    # Iterate through the dictionary\n    for char, count in freq.items():\n\n        # If the frequency of the character is greater than the frequency of the first repeated character,\n        # update the first repeated character and its frequency\n        if count > freq_first_char:\n            first_char = char\n            freq_first_char = count\n\n    # Return the first repeated character\n    return first_char"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # create a dictionary to store the count of each character in the string\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # loop through the dictionary and find the first repeated character\n    for char in char_count:\n        if char_count[char] > 1:\n            return char\n    \n    # if no repeated character is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_set = set()\n    for char in str1:\n        if char in char_set:\n            return char\n        char_set.add(char)\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    '''\n    This function takes a string as input and returns the first repeated character in the string.\n    If there is no repeated character, it returns None.\n    '''\n    char_set = set()\n    for char in str1:\n        if char in char_set:\n            return char\n        else:\n            char_set.add(char)\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    # create a dictionary to store the frequency of each character in the string\n    freq_dict = {}\n    for char in str1:\n        if char in freq_dict:\n            freq_dict[char] += 1\n        else:\n            freq_dict[char] = 1\n    \n    # find the first repeated character in the string\n    for char, freq in freq_dict.items():\n        if freq > 1:\n            return char\n    \n    # if no repeated character is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            return char\n        char_count[char] = 1\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    '''\n    This function takes a string as input and returns the first repeated character in the string.\n    '''\n    # Create a dictionary to store the count of each character in the string\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # Find the first repeated character in the dictionary\n    for char in char_count:\n        if char_count[char] > 1:\n            return char\n    \n    # If no character is repeated, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Initialize an empty dictionary to store the frequency of each character in the string\n    freq = {}\n\n    # Loop through each character in the string\n    for char in str1:\n        # If the character is already in the dictionary, increment its frequency by 1\n        if char in freq:\n            freq[char] += 1\n        # If the character is not in the dictionary, add it with a frequency of 1\n        else:\n            freq[char] = 1\n\n    # Loop through the dictionary and find the first repeated character\n    for char in freq:\n        if freq[char] > 1:\n            return char\n\n    # If no repeated character is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    # find the first character that appears more than once in the dictionary\n    for char, count in freq.items():\n        if count > 1:\n            return char\n    \n    # if no repeated character is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            return char\n        else:\n            char_count[char] = 1"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_nums = []\n    for i in range(1, n+1):\n        if i <= (n**0.5):\n            j = i\n            while j <= (n**0.5):\n                if j**2 == i:\n                    ludic_nums.append(i)\n                j += 1\n    return ludic_nums"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    lucid = [2]\n    for i in range(3, n + 1):\n        lucid.append(lucid[i - 1] + 2)\n    return lucid\n"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_numbers = []\n    for num in range(1, n+1):\n        if all(num % i!= 0 for i in range(2, int(num**0.5)+1)):\n            ludic_numbers.append(num)\n    return ludic_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    lucid = []\n    for i in range(2, n+1):\n        if i % 2 == 0:\n            lucid.append(i)\n    return lucid"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(1, n+1):\n        if is_lucid(i):\n            lucid_numbers.append(i)\n    return lucid_numbers\n\ndef is_lucid(num):\n    '''\n    Write a function to check if a given number is a lucid number.\n    '''\n    if num == 1:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    # Initialize a list to store the lucid numbers\n    lucid_numbers = []\n    # Initialize a variable to store the current lucid number\n    current_lucid = 1\n    # Loop until we have found all lucid numbers smaller than or equal to n\n    while current_lucid <= n:\n        # If the current lucid number is prime, add it to the list of lucid numbers\n        if is_prime(current_lucid):\n            lucid_numbers.append(current_lucid)\n        # Compute the next lucid number\n        current_lucid += 1\n    # Return the list of lucid numbers\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    \"\"\"\n    This function will generate a list of all lucid numbers smaller than or equal to the given integer n.\n    \"\"\"\n    lucid_numbers = []\n    for i in range(1, n+1):\n        if i == 1 or i == n:\n            lucid_numbers.append(i)\n        else:\n            is_lucid = True\n            j = 2\n            while j <= n/i:\n                if i % j == 0:\n                    is_lucid = False\n                    break\n                j += 1\n            if is_lucid:\n                lucid_numbers.append(i)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    # initialize an empty list to store the lucid numbers\n    lucid_numbers = []\n    # loop through the integers from 1 to n\n    for i in range(1, n+1):\n        # check if the integer is a lucid number\n        is_lucid = True\n        for j in range(2, int(i**0.5)+1):\n            # if the integer is not divisible by any number between 2 and the square root of the integer, it is not a lucid number\n            if i % j == 0:\n                is_lucid = False\n                break\n        # if the integer is a lucid number, add it to the list of lucid numbers\n        if is_lucid:\n            lucid_numbers.append(i)\n    # return the list of lucid numbers\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    lucid_numbers = []\n    i = 1\n    while i <= n:\n        if i in [i*2, i*3, i*4, i*5, i*6, i*7, i*8, i*9, i*10]:\n            lucid_numbers.append(i)\n        i += 1\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_numbers = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            ludic_numbers.append(i)\n    return ludic_numbers"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    words = s.split()\n    words.reverse()\n    return''.join(words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Split the string into words\n    words = s.split()\n    # Reverse each word and join it back into a string\n    reversed_words =''.join(words[::-1])\n    # Return the reversed string\n    return reversed_words"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    words.reverse()\n    return''.join(words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Remove spaces from the string\n    s = s.replace(\" \", \"\")\n    # Split the string into words\n    words = s.split()\n    # Reverse each word in the list\n    for i in range(len(words)):\n        words[i] = words[i][::-1]\n    # Join the words back into a string\n    result = \" \".join(words)\n    return result"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()  # split the string into a list of words\n    words.reverse()   # reverse the order of the words\n    return''.join(words)  # join the words back together with spaces"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    words = s.split()  # Split the string into words\n    reversed_words = words[::-1]  # Reverse the words\n    reversed_string = \" \".join(reversed_words)  # Join the reversed words into a string with spaces between\n    return reversed_string"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    # split the string into words\n    words = s.split()\n    \n    # iterate over the words and reverse them\n    for i in range(len(words)):\n        words[i] = words[i][::-1]\n        \n    # join the words back into a string\n    reversed_s =''.join(words)\n    \n    return reversed_s"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    words = s.split() # split the string into a list of words\n    words.reverse() # reverse the list of words\n    return''.join(words) # join the words back together with spaces"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = words[::-1]\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_word = word[::-1]\n        reversed_words.append(reversed_word)\n    reversed_sentence =''.join(reversed_words)\n    return reversed_sentence"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    # Initialize a variable to keep track of whether the number is prime or not\n    is_prime = True\n\n    # Check if the number is equal to 1 or less\n    if num <= 1:\n        is_prime = False\n\n    # Check if the number is divisible by any number from 2 to the square root of the number\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            is_prime = False\n            break\n\n    # If the number is prime, return True\n    if is_prime:\n        return True\n\n    # If the number is not prime, return False\n    else:\n        return False"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_prime(num):\n    '''\n    This function takes an integer as input and returns True if it is a prime number and False otherwise.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def prime_num(num):\n    \"\"\"\n    Write a function to check if the given integer is a prime number.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    # Check if the given number is greater than 1\n    if num <= 1:\n        return False\n\n    # Check if the number is divisible by any number between 2 and the square root of the number\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n\n    # If the loop completes without finding a divisor, the number is a prime number\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_prime(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_prime(num):\n    \"\"\"\n    A function to check if the given integer is a prime number.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def prime_num(num):\n    \"\"\"\n    Write a function to check if the given integer is a prime number.\n    \"\"\"\n    # Check if the given number is less than 2\n    if num < 2:\n        return False\n    # Check if the given number is divisible by any number other than 1 and itself\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    # If the loop completes without finding a divisor, then the number is prime\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n\n    # checking if the number is less than 2\n    if num < 2:\n        return False\n\n    # checking if the number is 2 or 3\n    if num == 2 or num == 3:\n        return True\n\n    # checking odd numbers\n    for i in range(5, int(num**0.5)+1, 2):\n        if num % i == 0:\n            return False\n\n    # if the loop completes, then the number is prime\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * math.pi / 180\n    return radian\n"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    This function takes a degree value as input and returns the corresponding\n    value in radians.\n    '''\n    return degree * math.pi/180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radians = degree * math.pi / 180\n    return radians\n\ndegree = float(input(\"Enter the degree value: \"))\nresult = radian_degree(degree)\nprint(f\"{degree} degrees is equal to {result:.2f} radians.\")"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = math.radians(degree)\n    return radian"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        match_index = matches.index(matches[0])\n        return matches[0], match_index, match_index + len(matches[0])\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0][0], matches[0][1], len(text)\n    else:\n        return None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0][0], matches[0][1], matches[-1][2]\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    literals = []\n    for match in matches:\n        literal = text[match.start():match.end()]\n        literals.append((literal, match.start(), match.end()))\n    return literals\n\ntext = \"This is a sentence with a literal: hello world\"\npattern = r'literal:\\s+(\\w+)'\nliterals = find_literals(text, pattern)\nprint(literals)"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        start = match.start()\n        end = match.end()\n        return text[start:end], start, end\n"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    literals = []\n    for match in matches:\n        literals.append((match.group(), match.start(), match.end()))\n    return literals"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # Use regex to find all occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n    \n    # Check if any matches were found\n    if not matches:\n        return None\n    \n    # Loop through the matches and return the first match\n    for match in matches:\n        return match, 0, len(match)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 1: \n        return 1 \n    else: \n        return bell_Number(n-1) + bell_Number(n-2) "
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_Number(n): \n    '''\n    This function takes an integer n as input and returns the nth Bell number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_Number(n):\n    \"\"\"\n    Write a python function to find nth bell number.\n    \"\"\"\n    # Initialize variables\n    prev = 1\n    curr = 1\n    # Calculate nth bell number\n    for i in range(2, n+1):\n        next = prev + curr\n        prev = curr\n        curr = next\n    # Print nth bell number\n    print(\"The\", n, \"th bell number is:\", curr)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    # Initialize variables\n    a = 1\n    b = 0\n    count = 0\n\n    # Initialize matrix\n    matrix = [[1, 1], [1, 0]]\n\n    # Initialize max value for matrix\n    max_val = 1\n\n    # Loop for n-1 times\n    for i in range(n-1):\n        # Multiply the matrix with the previous matrix and store in temp matrix\n        temp = [[matrix[j][k] + matrix[j][l] for l in range(2)] for k in range(2)]\n\n        # Update the matrix with the temp matrix\n        matrix = temp\n\n        # Update max value for matrix\n        max_val = max(max_val, matrix[0][0], matrix[0][1], matrix[1][0], matrix[1][1])\n\n    # Calculate nth bell number\n    nth_bell = matrix[0][0] * matrix[1][1] * max_val**n\n\n    return nth_bell"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_Number(n):\n    \"\"\"\n    Write a python function to find nth bell number.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0: \n        return 1\n    elif n == 1: \n        return 1\n    else: \n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_Number(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    # initialize the bell number to 0\n    bell = 0\n    # loop through the range of n + 1\n    for i in range(1, n + 1):\n        # add the value of the current iteration to the bell number\n        bell += i\n    # return the bell number\n    return bell"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    for i in range(L):\n        list1.pop()\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    This function takes a list and returns a list with the same elements, but the k'th element removed.\n    \"\"\"\n    if len(list1) < L:\n        return \"The length of the list should be greater than or equal to L.\"\n    \n    list2 = list1.copy()\n    list2.pop(L-1)\n    return list2"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = L - 1\n    list1.pop(k)\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # Initialize an empty list to store the result\n    result = []\n    # Initialize a variable to keep track of the count of elements\n    count = 0\n    # Loop through the list\n    for i in list1:\n        # If the count is less than L, add the element to the result list\n        if count < L:\n            result.append(i)\n            # Increment the count of elements\n            count += 1\n        # If the count is equal to L, skip the element and decrement the count by 1\n        elif count == L:\n            count -= 1\n    # Return the result list with the k'th element removed\n    return result"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = len(list1) - L\n    list1 = list(set(list1[:k]))\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, k):\n    '''\n    This function takes a list and a positive integer k as input and returns a list with the same elements, but the k'th element removed.\n    '''\n    n = len(list1)\n    if k >= n or k <= 0:\n        raise ValueError(\"Invalid input. k should be between 1 and the length of the list.\")\n    result = []\n    for i in range(n):\n        if i!= k-1:\n            result.append(list1[i])\n    return result"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list1.pop(L-1)\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    for i in range(0, L):\n        temp = list1[i]\n        for j in range(i, len(list1)-1):\n            list1[j] = list1[j+1]\n        list1[len(list1)-1] = temp\n    return list1[L:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L > len(list1):\n        raise ValueError(\"L is greater than the length of the list\")\n    return list1[:L] + list1[L+1:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L] + list1[L+1:]"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    \n    # Initializing the maximum value to be the first element in the first row\n    max_val = test_list[0][0]\n    \n    # Looping through all the rows of the matrix\n    for i in range(1, len(test_list)):\n        \n        # Looping through then'th column\n        for j in range(len(test_list[0])):\n            \n            # Updating the maximum value if the current element is greater than the maximum value\n            if test_list[i][j] > max_val:\n                max_val = test_list[i][j]\n    \n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_of_nth(matrix, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    for i in range(len(matrix)):\n        matrix[i].sort()\n        matrix[i].reverse()\n    max_value = matrix[N-1][0]\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # calculate the length of the first row of the matrix\n    row_len = len(test_list[0])\n    # initialize a variable to store the maximum value\n    max_val = float('-inf')\n    # loop through the rows of the matrix\n    for row in test_list:\n        # check if the row length is equal to N\n        if len(row) == N:\n            # check if the nth value in the row is greater than the current maximum value\n            if row[N-1] > max_val:\n                max_val = row[N-1]\n    # return the maximum value of the nth column\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = 0\n    for row in test_list:\n        if N <= len(row):\n            max_val = max(max_val, row[N-1])\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    if type(test_list)!= list:\n        raise TypeError(\"Input should be a list of lists.\")\n    \n    if not all(isinstance(row, list) for row in test_list):\n        raise TypeError(\"All elements in the list should be lists.\")\n    \n    if len(test_list) == 0:\n        raise ValueError(\"The list should not be empty.\")\n    \n    for row in test_list:\n        if len(row)!= len(test_list[0]):\n            raise ValueError(\"All elements in each row should have the same length.\")\n    \n    if N < 1 or N > len(test_list[0]):\n        raise ValueError(\"The n value should be between 1 and the length of the first row.\")\n    \n    max_val = max(test_list, key=lambda x: x[N-1])\n    \n    return max_val[N-1]"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_num = 0\n    for i in range(len(test_list)):\n        if i == 0:\n            max_num = test_list[i][N-1]\n        elif test_list[i][N-1] > max_num:\n            max_num = test_list[i][N-1]\n    return max_num"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Get the number of rows in the matrix\n    num_rows = len(test_list)\n    \n    # Check if the index is within range\n    if N < 1 or N > num_rows:\n        print(\"Error: Index must be between 1 and the number of rows of the matrix.\")\n        return\n    \n    # Initialize the max variable with the first element of the first row\n    max_val = test_list[0][0]\n    \n    # Loop through each row of the matrix and update the max value if necessary\n    for i in range(num_rows):\n        if test_list[i][N-1] > max_val:\n            max_val = test_list[i][N-1]\n    \n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_value = 0\n    for row in test_list:\n        if max_value < row[N-1]:\n            max_value = row[N-1]\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    \n    # checking the length of the list\n    if len(test_list) == 0:\n        return None\n    \n    # checking the length of the first list in the list\n    if len(test_list[0]) == 0:\n        return None\n    \n    # counting the number of rows in the matrix\n    num_rows = len(test_list)\n    \n    # counting the number of columns in the first row of the matrix\n    num_cols = len(test_list[0])\n    \n    # checking if then'th column exists\n    if N > num_cols:\n        return None\n    \n    # initializing the maximum value of then'th column to zero\n    max_val = 0\n    \n    # iterating over each row of the matrix\n    for i in range(num_rows):\n        \n        # checking if then'th column is not None\n        if test_list[i][N] is None:\n            return None\n        \n        # checking if the current value of then'th column is greater than the current maximum value\n        if test_list[i][N] > max_val:\n            max_val = test_list[i][N]\n    \n    # returning the maximum value of then'th column\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Calculate the length of the list of lists\n    len_list = len(test_list)\n    \n    # If N is greater than the length of the list of lists, return an error message\n    if N > len_list:\n        return \"Error: N is greater than the number of rows in the matrix\"\n    \n    # Initialize the max value to be the smallest possible value\n    max_val = float('-inf')\n    \n    # Loop through each row of the matrix\n    for i in range(len_list):\n        # If the row is of length N, compare then'th column with the current max value\n        if len(test_list[i]) == N:\n            if test_list[i][N-1] > max_val:\n                max_val = test_list[i][N-1]\n    \n    # Return the max value found in the matrix\n    return max_val"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def merge(lst):\n    \"\"\"\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    merged = []\n    for sublist in lst:\n        merged.append([sublist[0], sublist[1]])\n    return merged"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def merge(lst):\n    merged = []\n    for sublist in lst:\n        merged.append([sublist[0], sublist[1]])\n    return merged"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_lst = []\n    for sublist in lst:\n        merged_lst.append([sublist[0], sublist[1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []  \n    for sublist in lst:  \n        result.append([sublist[0], sublist[1]])  \n    return result  "
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_lst = []\n    for sublist in lst:\n        merged_lst.append([sublist[0], sublist[1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged = []\n    for sublist in lst:\n        merged.append([sublist[0], sublist[1]])\n    return merged"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged = []\n    for sublist in lst:\n        merged.append([sublist[0], sublist[1]])\n    return merged"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    # create an empty list to store the merged lists\n    merged_list = []\n    # loop through each sublist in the input list\n    for sublist in lst:\n        # if the sublist has only two elements, add it to the merged list\n        if len(sublist) == 2:\n            merged_list.append([sublist[0], sublist[1]])\n    # return the merged list\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for tup in test_list:\n        for val in tup:\n            cum_sum += val\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    \"\"\"\n    cum_sum = 0\n    for val in test_list:\n        cum_sum += val\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total = 0\n    for i, (a, b) in enumerate(test_list):\n        total += a\n        total += b\n    return total"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for i in range(len(test_list)):\n        cum_sum += test_list[i][1]\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Initialize a variable to store the cumulative sum\n    cum_sum = 0\n    # Loop through each tuple in the list\n    for i in range(len(test_list)):\n        # Add the value of the current tuple to the cumulative sum\n        cum_sum += test_list[i][1]\n        # Print the cumulative sum at each step of the loop\n        print(cum_sum)\n    # Return the cumulative sum\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Initialize the cumulative sum variable with the first element of the list\n    cum_sum = test_list[0]\n    # Loop through the list starting from the second element\n    for i in range(1, len(test_list)):\n        # Add the current element to the cumulative sum\n        cum_sum += test_list[i]\n    # Return the cumulative sum\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Initialize the cumulative sum to 0\n    cumulative_sum = 0\n    # Loop through each tuple in the list\n    for tup in test_list:\n        # Extract each value from the tuple\n        val = tup[0]\n        # Add the value to the cumulative sum\n        cumulative_sum += val\n    # Return the cumulative sum\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total_sum = 0\n    for i in range(len(test_list)):\n        total_sum += test_list[i][0]\n    return total_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Initialize the cumulative sum variable to 0\n    cum_sum = 0\n    \n    # Iterate over each tuple in the list\n    for tup in test_list:\n        # Iterate over each value in the tuple\n        for val in tup:\n            # Add the value to the cumulative sum\n            cum_sum += val\n            \n    # Return the cumulative sum\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for num in test_list:\n        cum_sum += num\n    return cum_sum\n"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    \n    # Initialize an empty list to store the averages\n    avg_list = []\n    \n    # Iterate over each tuple in the input tuple\n    for tup in nums:\n        \n        # Compute the average value for the current tuple\n        avg = sum(tup) / len(tup)\n        \n        # Append the average value to the average list\n        avg_list.append(avg)\n    \n    # Return the average list\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for num in nums:\n        total = 0\n        for x in num:\n            total += x\n        averages.append(total/len(num))\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    This function takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # Initialize an empty list to store the averages\n    averages = []\n    # Loop through each tuple in the input tuple of tuples\n    for tup in nums:\n        # Calculate the average value for the current tuple\n        avg = sum(tup) / len(tup)\n        # Add the average value to the list of averages\n        averages.append(avg)\n    # Return the list of averages\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # create a list to store the average values for each tuple\n    avg_list = []\n    # iterate over each tuple in the input tuple of tuples\n    for num in nums:\n        # calculate the average value for the current tuple\n        avg = sum(num) / len(num)\n        # append the average value to the list of average values for each tuple\n        avg_list.append(avg)\n    # return the list of average values for each tuple\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    This function takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for sub_tuple in nums:\n        total = sum(sub_tuple)\n        averages.append(total/len(sub_tuple))\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for num in nums:\n        averages.append(sum(num) / len(num))\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    \"\"\"\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    \"\"\"\n    averaged_tuples = []\n    for i in nums:\n        avg = sum(i)/len(i)\n        averaged_tuples.append(avg)\n    return averaged_tuples"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg = []\n    for i in nums:\n        avg.append(sum(i) / len(i))\n    return avg"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    average_list = []\n    for i in range(len(nums)):\n        average = sum(nums[i]) / len(nums[i])\n        average_list.append(average)\n    return average_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for num in nums:\n        sum = 0\n        for i in num:\n            sum += i\n        avg = sum / len(num)\n        result.append(avg)\n    return result"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] % test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # check if the length of the tuples are equal\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The length of the tuples are not equal.\")\n        return\n    \n    # iterate through the tuples and perform element wise modulo\n    for i in range(len(test_tup1)):\n        # perform modulo operation\n        result = test_tup1[i] % test_tup2[i]\n        # print the result\n        print(f\"Result of {test_tup1[i]} modulo {test_tup2[i]} is {result}\")"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length.\")\n    \n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] % test_tup2[i]\n\n    return test_tup1"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple([x % y for x, y in zip(test_tup1, test_tup2)])"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # Check if the two tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples must have the same length.\")\n        return\n\n    # Perform element-wise modulo\n    result_tup = tuple([i % j for i, j in zip(test_tup1, test_tup2)])\n\n    # Return the result\n    return result_tup"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d): \n    '''\n    This function takes the number of steps required to reach the target point (d, 0) in a 2D plane, \n    and the target value of d, and returns the minimum number of jumps required to reach the point.\n    \n    This problem is solved by using dynamic programming. We can keep track of the minimum number of jumps required \n    to reach each point from the origin, and update them as we move forward.\n    \n    The key observation is that if we reach a point (x, y) and x > d, then we don't need to jump as the \n    distance to reach the target point is guaranteed to be less than d. Therefore, we can avoid jumping \n    to this point and move directly to (x-d, y).\n    \n    Similarly, if we reach a point (x, y) and y > d, then we don't need to jump as the distance to reach \n    the target point is guaranteed to be less than d. Therefore, we can avoid jumping to this point and \n    move directly to (x, y-d).\n    \n    The minimum number of jumps required to reach the target point is the minimum of the minimum number \n    of jumps required to reach the points (x-d, y) and (x, y-d).\n    \n    Time Complexity: O(steps)\n    Space Complexity: O(1)\n    '''\n    \n    # initialize variables\n    dp = [float('inf')] * (steps+1)\n    dp[0] = 0\n    \n    # fill dp table\n    for i in range(1, steps+1):\n        for j in range(1, d+1):\n            if i > j:\n                dp[i] = min(dp[i], dp[i-1])\n        dp[i] += 1\n    \n    return dp[steps]"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # If the distance is less than or equal to the number of steps, then the number of jumps is 0\n    if d <= steps:\n        return 0\n    \n    # Initialize variables\n    i = 1\n    j = 0\n    jumps = 0\n    \n    # Iterate until the distance is 0 or the number of steps has been reached\n    while j!= d and i <= steps:\n        # If the current point is above (0, 0), then the number of jumps required is 1 more than the previous jump\n        if j < 0:\n            jumps += 1\n        # If the current point is not above (0, 0), then the number of jumps required is the previous jump\n        else:\n            jumps = jumps - 1\n        # Update the current point and the distance\n        j = j - 1\n        i += 1\n    \n    # Return the number of jumps required\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n\n    # Initialize variables\n    min_steps = steps\n    current_position = 0\n    jumps = 0\n\n    # Loop until the position reaches the target point\n    while current_position <= d:\n\n        # Check if the target point is reached\n        if current_position == d:\n            return jumps\n\n        # Check if the current position is reachable\n        if current_position + 2 <= d:\n            current_position += 2\n            jumps += 1\n        elif current_position + 1 <= d:\n            current_position += 1\n            jumps += 1\n        else:\n            current_position += 1\n            jumps += 1\n\n        # Update the minimum number of steps required\n        if current_position + 1 <= d:\n            min_steps = min(min_steps, steps - current_position + 1)\n        else:\n            min_steps = min(min_steps, steps - current_position)\n\n    # Return the minimum number of jumps required to reach the target point\n    return min_steps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n\n    # Initialize variables\n    dist = 0\n    jumps = 0\n    n = 1\n\n    # Check if the starting point is at (0, 0)\n    if (d, 0) == (0, 0):\n        return 0\n\n    # Check if the starting point is at (d, 0)\n    elif (d, 0)!= (0, 0):\n        dist = d\n\n    # Loop until the starting point is at (0, 0)\n    while (dist, 0)!= (0, 0):\n        # Check if the point is at (d, 0) or not\n        if (dist, 0) == (d, 0):\n            # Add a jump to the number of jumps\n            jumps += 1\n            # Calculate the next distance by subtracting the steps and multiplying by the n power\n            dist = d + steps * n\n            # Increment the power of n\n            n += 1\n        # If the point is not at (d, 0)\n        else:\n            # Calculate the next distance by adding the steps and multiplying by the n power\n            dist = dist + steps * n\n\n    # Return the number of jumps\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d): \n    \"\"\"\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    \"\"\"\n    def count_jumps(path, total_jumps, index, d):\n        if index == len(path) - 1:\n            return total_jumps\n\n        if path[index][1] == d:\n            total_jumps += 1\n            return count_jumps(path, total_jumps, index + 1, d)\n\n        return count_jumps(path, total_jumps, index + 1, d)\n\n    path = [(0, 0)]\n    total_jumps = 0\n    while len(path) < steps:\n        total_jumps = count_jumps(path, total_jumps, 0, d)\n        path.append((path[-1][0] + 1, path[-1][1]))\n\n    return total_jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Initialize the number of jumps and the position of the current point\n    jumps = 0\n    current_pos = (0, steps)\n    \n    # Loop until the current position is at the end point\n    while current_pos!= (d, 0):\n        # Calculate the distance to the end point\n        distance = min(steps - current_pos[1], d - current_pos[0])\n        \n        # Add the number of jumps required to reach the end point\n        jumps += distance\n        \n        # Update the current position based on the distance\n        current_pos = (current_pos[0] + distance, current_pos[1] - distance)\n    \n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d):\n    \"\"\"\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    \"\"\"\n    # check if the point (0, d) is reachable from origin\n    if steps > d:\n        return -1\n\n    # initialize variables\n    steps_taken = 1\n    last_point = (0, d)\n\n    # iterate over possible points to reach (0, 0)\n    for i in range(d + 1):\n        next_point = (i, 0)\n        if next_point == last_point:\n            steps_taken += 1\n            last_point = next_point\n        else:\n            steps_taken += 1\n            last_point = next_point\n\n    # check if the point (0, 0) is reachable from origin\n    if steps_taken > steps:\n        return -1\n\n    return steps_taken"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps < d:\n        return \"Invalid Input\"\n\n    jumps = 0\n    distance = 0\n\n    while distance < d:\n        distance += steps\n        jumps += 1\n\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d): \n    \"\"\"\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    \"\"\"\n    jumps = 0\n    i = 0\n    j = 0\n    \n    while i < steps:\n        j += 1\n        i += 1\n        if j == d and i == steps:\n            return jumps\n        elif j == d and i < steps:\n            jumps += 1\n            i += 1\n        elif j < d and i < steps:\n            i += 1\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d <= 0:\n        return 0\n    \n    if d == 1:\n        return steps\n    \n    if d == 2:\n        return steps + 1\n    \n    if d == 3:\n        return steps + 2\n    \n    if d == 4:\n        return steps + 3\n    \n    if d == 5:\n        return steps + 4\n    \n    if d == 6:\n        return steps + 5\n    \n    if d == 7:\n        return steps + 6\n    \n    if d == 8:\n        return steps + 7\n    \n    if d == 9:\n        return steps + 8\n    \n    if d == 10:\n        return steps + 9\n    \n    if d == 11:\n        return steps + 10\n    \n    if d == 12:\n        return steps + 11\n    \n    if d == 13:\n        return steps + 12\n    \n    if d == 14:\n        return steps + 13\n    \n    if d == 15:\n        return steps + 14\n    \n    if d == 16:\n        return steps + 15\n    \n    if d == 17:\n        return steps + 16\n    \n    if d == 18:\n        return steps + 17\n    \n    if d == 19:\n        return steps + 18\n    \n    if d == 20:\n        return steps + 19"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('Both lists must have the same length.')\n\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two lists must have the same length\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Error: lists must have the same length\")\n        return\n    \n    result = []\n    for i in range(len(nums1)):\n        try:\n            result.append(nums1[i] / nums2[i])\n        except ZeroDivisionError:\n            print(\"Error: division by zero\")\n            return\n    \n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('Lists must have the same length.')\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Both lists must have the same length.\")\n        return\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    \n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def div_list(nums1,nums2):\n    '''\n    This function takes two lists as input and returns their element-wise division.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('The two lists should have the same length.')\n    result = []\n    for i in range(len(nums1)):\n        if nums2[i] == 0:\n            raise ValueError('The divisor cannot be zero.')\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element wise.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element wise.\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two lists should have the same length\")\n\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    # Convert the string to a list of characters\n    char_list = list(test_str)\n\n    # Initialize two variables\n    num_count = 0\n    last_num_index = -1\n\n    # Loop through the list of characters\n    for index, char in enumerate(char_list):\n        # If the character is a number, increment the number count and set the last number index\n        if char.isdigit():\n            num_count += 1\n            last_num_index = index\n        # If the number count reaches 2, swap the current character with the last number and decrement the number count\n        elif num_count == 2:\n            char_list[index], char_list[last_num_index] = char_list[last_num_index], char_list[index]\n            num_count -= 1\n\n    # Convert the list of characters back to a string and return it\n    return ''.join(char_list)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Find all the numbers in the string\n    nums = []\n    for char in test_str:\n        if char.isdigit():\n            nums.append(char)\n\n    # Move the numbers to the end of the string\n    for num in nums:\n        index = test_str.index(num)\n        test_str = test_str[:index] + num + test_str[index:]\n\n    # Return the modified string\n    return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    # initialize the result string\n    result = \"\"\n\n    # loop through each character in the input string\n    for char in test_str:\n        # if the character is a number, add it to the result string\n        if char.isdigit():\n            result += char\n        # if the character is not a number, add it to the beginning of the result string\n        else:\n            result = char + result\n\n    # return the result string\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    result = \"\"\n    num_list = []\n    \n    # Splitting the string into characters\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n            \n    # Sorting the list of numbers in descending order\n    num_list.sort(reverse=True)\n    \n    # Joining the sorted list of numbers back into a string\n    result = ''.join(num_list)\n    \n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    # Create a list of all the numbers in the string\n    nums = []\n    for char in test_str:\n        if char.isdigit():\n            nums.append(int(char))\n\n    # Sort the list in descending order\n    nums.sort(reverse=True)\n\n    # Combine the sorted numbers and the string in the desired order\n    result = ''\n    for num in nums:\n        result = str(num) + result\n\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    nums = \"\"\n    for char in test_str:\n        if char.isdigit():\n            nums += char\n    return nums + test_str.replace(nums, \"\")"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Initialize variables\n    num_list = []\n    str_list = []\n\n    # Iterate through the string and add all numbers to the num_list\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n\n    # Reverse the num_list to get the final order of numbers\n    num_list.reverse()\n\n    # Iterate through the string again and add all non-numbers to the str_list\n    for char in test_str:\n        if not char.isdigit():\n            str_list.append(char)\n\n    # Reverse the str_list to get the final order of characters\n    str_list.reverse()\n\n    # Combine the lists and return the final string\n    return ''.join(str_list + num_list)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    # Initialize a variable to store the number characters\n    nums = \"\"\n\n    # Loop through each character in the string\n    for char in test_str:\n        # Check if the character is a number\n        if char.isdigit():\n            # If it is, add it to the \"nums\" variable\n            nums += char\n        # If the character is not a number, append it to the end of the string\n        else:\n            # If the \"nums\" variable is not empty, move all the numbers to the end of the string\n            if nums:\n                # Split the string into a list of characters\n                chars = list(test_str)\n                # Find the index of the last number character\n                num_index = len(chars) - len(nums) - 1\n                # Move all the numbers to the end of the string\n                for i in range(num_index, len(chars)):\n                    chars[i], chars[num_index + i] = chars[num_index + i], chars[i]\n                # Convert the list of characters back into a string\n                test_str = \"\".join(chars)\n                # Reset the \"nums\" variable\n                nums = \"\"\n\n    return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n\n    # initialize the variables for the result and the position\n    result = ''\n    pos = 0\n\n    # iterate through the string\n    for i in range(len(test_str)):\n        # if the character is a number, append it to the result and increment the position\n        if test_str[i].isdigit():\n            result += test_str[i]\n            pos += 1\n        else:\n            # otherwise, just append it to the result\n            result += test_str[i]\n\n    # return the result with all the numbers moved to the end\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n    num_str = ''.join(num_list)\n    new_str = test_str.replace(num_str, '') + num_str\n    return new_str"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    # Sort the given list in ascending order\n    a.sort()\n    # Initialize variables to keep track of largest subsets\n    largest_pair = [a[0], a[1]]\n    largest_subset_size = 2\n    # Iterate through the list\n    for i in range(2, len(a)):\n        # If the current element is divisible by the largest pair, add it to the largest subset\n        if a[i] % largest_pair[0] == 0 and a[i] % largest_pair[1] == 0:\n            largest_pair.append(a[i])\n            largest_subset_size += 1\n        # If the current element is not divisible by any of the largest pairs, remove the largest pair to make room for the current element\n        elif a[i] % largest_pair[0]!= 0 and a[i] % largest_pair[1]!= 0:\n            largest_pair.pop(0)\n            largest_subset_size -= 1\n    return largest_subset_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    n = len(a)\n    max_size = 1\n    curr_size = 1\n\n    for i in range(1, n):\n        if a[i] % a[i - 1] == 0:\n            curr_size += 1\n        else:\n            curr_size = 1\n\n        if curr_size > max_size:\n            max_size = curr_size\n\n    return max_size\n"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    n = len(a)\n    max_subset_size = 0\n    count = 0\n    for i in range(n):\n        if a[i] % 2 == 0:\n            count += 1\n        else:\n            count = 0\n        if count > max_subset_size:\n            max_subset_size = count\n    return max_subset_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n\n    # Define the function to check if a number is divisible by a given number\n    def is_divisible(num, divisor):\n        return num % divisor == 0\n\n    # Sort the input list in ascending order\n    a.sort()\n\n    # Initialize the maximum size of the subset found so far\n    max_size = 0\n\n    # Initialize the current subset size and the current subset\n    current_size = 1\n    current_subset = [a[0]]\n\n    # Loop through the list from the second element\n    for i in range(1, len(a)):\n\n        # Check if the current element is divisible by the current subset\n        if is_divisible(a[i], current_subset[-1]):\n\n            # If it is, increment the size of the subset\n            current_size += 1\n\n        # If the current element is not divisible by the current subset, start a new subset\n        else:\n\n            # If the size of the current subset is greater than the maximum size found so far, update the maximum size\n            if current_size > max_size:\n                max_size = current_size\n\n            # Reset the current subset size and the current subset\n            current_size = 1\n            current_subset = [a[i]]\n\n    # If the last element in the list is not divisible by the current subset, update the maximum size\n    if current_size > max_size:\n        max_size = current_size\n\n    # Return the maximum size of the subset\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    \n    # sort the list in ascending order\n    a.sort()\n    \n    # initialize variables\n    max_size = 0\n    count = 1\n    current_sum = a[0]\n    \n    # iterate through the list\n    for i in range(1, len(a)):\n        # calculate the sum of the remaining elements\n        remaining_sum = sum(a[i:]) - current_sum\n        \n        # update the count if the sum is greater than the remaining sum\n        if remaining_sum > 0:\n            count += 1\n            current_sum += a[i]\n            \n            # update the max_size if the current count is greater\n            if count > max_size:\n                max_size = count\n        # otherwise, update the current count and current sum\n        else:\n            count = 1\n            current_sum = a[i]\n    \n    # return the maximum size\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n\n    # Helper function to check if a number is divisible by any number in a list\n    def is_divisible(num, divisors):\n        for divisor in divisors:\n            if num % divisor == 0:\n                return True\n        return False\n\n    # Initialize variables for the largest subset and its size\n    largest_subset = []\n    largest_subset_size = 0\n\n    # Loop through all possible pairs of numbers in the list\n    for i in range(len(a)):\n        for j in range(i + 1, len(a)):\n\n            # If the pair is divisible by all numbers in the list, add it to the largest subset and update its size if necessary\n            if is_divisible(a[i], a[j:i] + a[i + 1:j]):\n                if len(largest_subset) < len(a[i:j]) + 1:\n                    largest_subset = a[i:j] + a[i + 1:j]\n                    largest_subset_size = len(largest_subset)\n\n    return largest_subset_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n\n    # Step 1: Sort the list of numbers in ascending order\n    a.sort()\n\n    # Step 2: Initialize variables to store the maximum subset size and the current subset size\n    max_size = 0\n    curr_size = 1\n\n    # Step 3: Iterate through the sorted list of numbers\n    for i in range(1, len(a)):\n\n        # Step 3.1: Calculate the remainder of the current number divided by the next number\n        remainder = a[i] % a[i-1]\n\n        # Step 3.2: If the remainder is 0, increment the current subset size and update the maximum subset size if necessary\n        if remainder == 0:\n            curr_size += 1\n            if curr_size > max_size:\n                max_size = curr_size\n\n        # Step 3.3: If the remainder is not 0, reset the current subset size to 1\n        else:\n            curr_size = 1\n\n    # Step 4: Return the maximum subset size found\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Create a set to store the divisible numbers\n    divisible_set = set()\n    # Initialize the largest subset size\n    max_subset_size = 0\n    # Iterate over the numbers in the list\n    for num in a:\n        # Check if the number is divisible by 2\n        if num % 2 == 0:\n            # If it is, add it to the divisible set\n            divisible_set.add(num)\n            # Update the largest subset size if the number is a multiple of 4\n            if num % 4 == 0:\n                max_subset_size = max(max_subset_size, len(divisible_set))\n            # Reset the divisible set if the number is a multiple of 6\n            if num % 6 == 0:\n                divisible_set.clear()\n    return max_subset_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    # Initialize variables\n    n = len(a)\n    dp = [0] * (n + 1)\n    max_size = 0\n    max_subset = []\n\n    # Fill in the dynamic programming table\n    for i in range(1, n + 1):\n        if a[i - 1] % 2 == 0:\n            dp[i] = dp[i - 2] + 1\n        else:\n            dp[i] = max(dp[i - 1], dp[i - 3])\n\n        if dp[i] > max_size:\n            max_size = dp[i]\n            max_subset = [a[i - 1]]\n        elif dp[i] == max_size:\n            max_subset.append(a[i - 1])\n\n    # Print the result\n    print(\"Size of largest subset:\", max_size)\n    print(\"Subset:\", max_subset)"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    n = len(a)\n    dp = [[0] * n for _ in range(n)]\n    \n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i][j] = dp[i-1][j] + 1\n    \n    max_length = 0\n    for i in range(n):\n        if dp[n-1][i] > max_length:\n            max_length = dp[n-1][i]\n    \n    return max_length"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    # sort the two input arrays\n    arr1.sort()\n    arr2.sort()\n\n    # if the sizes of the arrays are not equal, return None\n    if len(arr1)!= len(arr2):\n        return None\n\n    # check if the size of the arrays is odd or even\n    if len(arr1) % 2 == 0:\n        # if even, find the average of the middle elements\n        median = (arr1[len(arr1) // 2] + arr2[len(arr2) // 2]) / 2\n        return median\n    else:\n        # if odd, find the middle element\n        median = arr1[len(arr1) // 2]\n        return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Concatenate the two arrays\n    arr = arr1 + arr2\n    \n    # Sort the concatenated array\n    arr.sort()\n    \n    # Find the median\n    if n % 2 == 0:\n        # If the length of the array is even, take the average of the middle two elements\n        median = (arr[n//2 - 1] + arr[n//2]) / 2\n    else:\n        # If the length of the array is odd, take the middle element\n        median = arr[n//2]\n        \n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # concatenate the two lists\n    arr = arr1 + arr2\n    # sort the concatenated list\n    arr.sort()\n    # calculate the median based on the length of the list\n    if n % 2 == 0:\n        return (arr[n//2-1] + arr[n//2])/2\n    else:\n        return arr[n//2]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    # Concatenate the two sorted arrays\n    arr = arr1 + arr2\n\n    # Sort the concatenated array\n    arr.sort()\n\n    # Calculate the length of the array\n    length = len(arr)\n\n    # Calculate the median\n    if length % 2 == 0:\n        # If the length of the array is even, the median is the average of the two middle elements\n        median = (arr[length // 2 - 1] + arr[length // 2]) / 2\n    else:\n        # If the length of the array is odd, the median is the middle element\n        median = arr[length // 2]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge the two sorted lists into a single sorted list\n    merged_list = arr1 + arr2\n    merged_list.sort()\n\n    # Find the median index\n    mid = n // 2\n\n    # Check if the length of the list is odd or even\n    if n % 2 == 0:\n        # Find the median by averaging the two middle elements\n        return (merged_list[mid - 1] + merged_list[mid]) / 2\n    else:\n        # Return the middle element\n        return merged_list[mid]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Concatenate the two lists and sort it\n    arr = arr1 + arr2\n    arr.sort()\n    \n    # Calculate the median\n    if n % 2 == 0:\n        median = (arr[n//2-1] + arr[n//2]) / 2\n    else:\n        median = arr[n//2]\n    \n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Concatenate both arrays into a single array\n    merged_arr = arr1 + arr2\n    # Sort the merged array\n    merged_arr.sort()\n    # Get the length of the merged array\n    merged_length = len(merged_arr)\n    # Get the index of the middle element\n    middle_index = merged_length // 2\n    # Check if the middle index is odd or even\n    if merged_length % 2 == 0:\n        # If the middle index is even, return the average of the two middle elements\n        return (merged_arr[middle_index - 1] + merged_arr[middle_index]) / 2\n    else:\n        # If the middle index is odd, return the middle element\n        return merged_arr[middle_index]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Combine the two arrays into one\n    combined_arr = arr1 + arr2\n\n    # Sort the combined array\n    combined_arr.sort()\n\n    # Find the middle index\n    mid_index = n // 2\n\n    # Return the median value\n    if n % 2 == 0:\n        # If the median index is even, return the average of the two middle values\n        return (combined_arr[mid_index - 1] + combined_arr[mid_index]) / 2.0\n    else:\n        # If the median index is odd, return the middle value\n        return combined_arr[mid_index]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    This function takes in two sorted lists of the same size n and returns the median of the two lists.\n    \"\"\"\n    arr = arr1 + arr2  # concatenate the two arrays\n    arr.sort()  # sort the concatenated array\n    mid = n // 2  # find the mid index\n    if n % 2 == 0:  # if n is even, take the average of the two middle numbers\n        return (arr[mid - 1] + arr[mid]) / 2\n    else:  # if n is odd, take the middle number\n        return arr[mid]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # merge the two sorted arrays\n    merged_arr = arr1 + arr2\n    # sort the merged array\n    sorted_arr = sorted(merged_arr)\n    # get the median index\n    mid = len(sorted_arr) // 2\n    # return the median value\n    return sorted_arr[mid]"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] **= n\n    return nums"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def nth_nums(nums, n):\n    '''\n    Compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    Write a function to compute the n-th power of each number in a list.\n    \"\"\"\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    # Initialize the result list\n    result = []\n    # Loop over each number in the list\n    for num in nums:\n        # Compute the nth power of the number\n        nth_pow = num ** n\n        # Append the nth power to the result list\n        result.append(nth_pow)\n    # Return the result list\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    if type(string)!= str:\n        return False\n    return string.upper() == string"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    # Convert the string to uppercase\n    upper_string = string.upper()\n    # Return the uppercase string\n    return upper_string"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    new_string = string.upper()\n    return new_string"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    upper_string = string.upper()\n    return upper_string"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) < 2:\n        print(\"The given list should have at least 2 elements.\")\n        return newList\n    else:\n        first = newList[0]\n        last = newList[-1]\n        newList[0] = last\n        newList[-1] = first\n        print(\"The new list after swapping first and last element is:\", newList)\n        return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # find the first and last element in the list\n    first = newList[0]\n    last = newList[-1]\n    # swap the first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n    # return the modified list\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList):\n    '''\n    This function takes a list as input and swaps the first and last elements of the list.\n    '''\n    # Check if the input list has at least two elements\n    if len(newList) < 2:\n        print(\"Input list must have at least two elements.\")\n        return\n    \n    # Swap the first and last elements of the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    # Print the new list\n    print(\"The new list is:\", newList)"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # check if the input list is empty\n    if not newList: \n        return newList \n    # if the input list has only one element, return it as it is already in the desired order\n    if len(newList) == 1: \n        return newList \n    # if the input list has more than one element, swap the first and last elements\n    else: \n        newList[0], newList[-1] = newList[-1], newList[0] \n        return newList "
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Check if the list is empty or has less than 2 elements\n    if len(newList) < 2:\n        print(\"List must have at least 2 elements to swap.\")\n        return\n    \n    # Swap the first and last element in the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    # Print the new list\n    print(\"New list:\", newList)"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    firstElement = newList[0]\n    lastElement = newList[-1]\n    newList[0] = lastElement\n    newList[-1] = firstElement\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) == 0:\n        return \"The list is empty.\"\n    elif len(newList) == 1:\n        newList.reverse()\n        return newList\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        newList = swap_List(newList[1:-1])\n        newList.reverse()\n        return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    first_element = newList[0]\n    last_element = newList[-1]\n    newList[0] = last_element\n    newList[-1] = first_element\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Formula to find the area of the largest triangle inscribed in a semicircle with radius r\n    area = math.pi * (r ** 2)\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # calculating the area of the largest triangle inscribed in a semicircle with given radius\n    area = math.pi * r ** 2 * (3 * r - math.sqrt(3) * r)\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    \n    # Find the semi-perimeter of the circle\n    semi_perimeter = 2 * r\n\n    # Find the area of the largest triangle that can be inscribed in the circle\n    area = semi_perimeter * (semi_perimeter - r) / 2\n\n    # Return the area\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 0\n    \n    # Calculate the area of the largest possible triangle inscribed in the semicircle\n    a = r\n    b = r*2\n    c = r*2*3.14159\n    \n    # Calculate the area of the largest possible triangle inscribed in the semicircle using Heron's formula\n    s = (a+b+c)/2\n    area = (s*(s-a)*(s-b)*(s-c))**(1/2)\n    \n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\n\u03c0 = math.pi\n\nNow we can define the triangle_area function:\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    \u03c0 = math.pi\n    Area = \u03c0*r**2\n    return Area\n\nWe can call this function and pass in a value of r to test the function:\n\nprint(triangle_area(5)) # Output: 15.954365616356244\n\nThis should output the area of the largest triangle that can be inscribed in a semicircle with a radius of 5."
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Base of the triangle\n    b = r/2\n    # Height of the triangle\n    h = 0.5 * r * r\n    # Area of the smallest triangle that can be inscribed in the semicircle\n    s = 3.14159 * (r/2)**2\n    # Area of the largest triangle that can be inscribed in the semicircle\n    L = 3.14159 * b * h\n    # Find the area of the largest triangle that can be inscribed in the semicircle\n    area = max(s, L)\n    # Return the area of the largest triangle\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # find the perimeter of the largest triangle that can be inscribed in a semicircle with radius r\n    a = 2 * r\n    perimeter = math.pi * (a + math.sqrt(a**2 - 4 * r**2))\n\n    # find the area of the largest triangle that can be inscribed in a semicircle with radius r\n    area = (2 * math.pi * r**2) / perimeter\n\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Calculate the area of a triangle using Heron's formula\n    def heron_formula(a, b, c):\n        s = (a + b + c) / 2\n        area = sqrt(s * (s - a) * (s - b) * (s - c))\n        return area\n\n    # Calculate the area of the largest triangle\n    a = r\n    b = r\n    c = 2 * r\n\n    max_area = heron_formula(a, b, c)\n\n    return max_area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    This function takes a radius r and returns the area of the largest triangle that can be inscribed in a semicircle with that radius.\n    '''\n    \n    # Define the semi-circle equation\n    def semi_circle(r, x):\n        return math.sin(x) / (math.sin(x) + math.sin(math.pi / 2))\n\n    # Calculate the area of the largest triangle\n    def largest_area(r):\n        h = math.sqrt(2 * r)\n        area = 0\n        for i in range(1, 6):\n            area += h * semi_circle(r, 2 * math.pi * i / 6)\n        return area\n\n    # Calculate the area of the largest triangle that can be inscribed in the semicircle\n    a = largest_area(r)\n    \n    # Calculate the area of the smallest triangle that can be inscribed in the semicircle\n    b = math.sqrt(2 * r * r - a)\n\n    # Calculate the area of the largest triangle inscribed in the semicircle\n    area = math.pi * b * b / 4\n\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    pi = math.pi\n    area_1 = (pi**2 * r**2) / 4\n    area_2 = (pi**2 * r**2) / 3\n    area = max(area_1, area_2)\n    return area"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n\n    Parameters:\n    array (list): sorted list of natural numbers\n    start (int): start index of the array to be considered (default is 0)\n    end (int): end index of the array to be considered (default is None, which means the end of the array)\n\n    Returns:\n    int: smallest missing number\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n    \n    for i in range(start,end+1):\n        if array[i]!= i:\n            return i\n    \n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)-1\n\n    for i in range(start,end+1):\n        if array[i]!= i:\n            return i\n"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers and returns the smallest missing number in the list.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end):\n        if array[i]!= i + start:\n            return i + start\n\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes an array of integers sorted in ascending order and returns the smallest missing number in it.\n    If the end parameter is not given, it will consider the last element in the array as the end of the range.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n    for i in range(start, end + 1):\n        if array[i] == i:\n            continue\n        else:\n            return i\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)-1\n    for i in range(start,end+1):\n        if array[i]!= i+1:\n            return i+1\n    return end+2"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers as input and returns the smallest missing number.\n\n    Args:\n    - array: A sorted list of natural numbers\n    - start: The starting index of the range. Default: 0\n    - end: The ending index of the range. Default: None (i.e. up to the last index)\n\n    Returns:\n    - The smallest missing number in the sorted list of natural numbers.\n    \"\"\"\n\n    if not array or not all(isinstance(i, int) for i in array):\n        raise TypeError(\"Input should be a sorted list of integers\")\n\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end+1):\n        if i+1 not in array:\n            return i+1\n\n    raise ValueError(\"No missing number found in the given range\")\n"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n\n    Args:\n        array (list): A sorted list of natural numbers.\n        start (int, optional): The starting index of the array. Defaults to 0.\n        end (int, optional): The ending index of the array. Defaults to None.\n\n    Returns:\n        int: The smallest missing number in the array.\n\n    Raises:\n        ValueError: If the array is not sorted.\n    \"\"\"\n\n    if start >= len(array) or start < 0:\n        raise ValueError(\"Start index should be greater than or equal to 0 and less than the length of the array.\")\n\n    if end is None:\n        end = len(array)\n\n    if start > end:\n        raise ValueError(\"Start index should be less than or equal to the end index.\")\n\n    if end >= len(array):\n        raise ValueError(\"End index should be less than the length of the array.\")\n\n    if not all(x < y for x, y in zip(array, array[1:])):\n        raise ValueError(\"The array should be sorted in ascending order.\")\n\n    for i in range(start, end):\n        if array[i]!= i + start:\n            return i + start\n\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if array[i]!= i:\n            return i"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)-1\n    for i in range(start,end+1):\n        if i not in array:\n            return i\n    return end+1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    if end is None:\n        end = len(array) - 1\n\n    for num in array:\n        if num < start or num > end:\n            return num\n        start = num + 1\n\n    return end + 1"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    \"\"\"\n    Replace all spaces in the given string with '%20'.\n    \"\"\"\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n\n    even_nums = []\n    for num in list:\n        if num % 2 == 0:\n            even_nums.append(num)\n\n    return even_nums"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function to find even numbers from a list of numbers.\n    \"\"\"\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = [] \n    for num in list: \n        if num % 2 == 0: \n            even_numbers.append(num) \n    return even_numbers "
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(list):\n    even_list = []\n    for i in list:\n        if i % 2 == 0:\n            even_list.append(i)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(list):\n    even_list = []\n    odd_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n        else:\n            odd_list.append(num)\n    return even_list, odd_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    # Define a list to store the adjacent coordinates of the given element\n    adj = []\n    \n    # Extract the x and y coordinates of the given element\n    x, y = ele\n    \n    # Iterate over the horizontal adjacent coordinates\n    for i in range(x-1, x+2):\n        # Check if the adjacent element is within the bounds of the matrix and not already in the sublist\n        if 0 <= i < len(sub) and (i, y) not in sub:\n            # Add the adjacent element to the sublist\n            sub.append((i, y))\n            # Add the adjacent element to the list of adjacent coordinates\n            adj.append((i, y))\n            \n    # Iterate over the vertical adjacent coordinates\n    for j in range(y-1, y+2):\n        # Check if the adjacent element is within the bounds of the matrix and not already in the sublist\n        if 0 <= j < len(sub) and (x, j) not in sub:\n            # Add the adjacent element to the sublist\n            sub.append((x, j))\n            # Add the adjacent element to the list of adjacent coordinates\n            adj.append((x, j))\n            \n    # Return the list of adjacent coordinates\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    adjacent = []\n    for i in range(-1, 2):\n        for j in range(-1, 2):\n            if (i, j)!= (0, 0):\n                if (i + ele[0], j + ele[1]) not in sub:\n                    sub.append((i + ele[0], j + ele[1]))\n                    adjacent.append((i + ele[0], j + ele[1]))\n    return adjacent"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj = []\n    for i in range(-1, 2):\n        for j in range(-1, 2):\n            if (i, j)!= (0, 0) and (x + i, y + j) not in sub:\n                adj.append((x + i, y + j))\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n\n    # Extract the x and y coordinates from the tuple\n    x, y = ele\n\n    # Initialize a list to store the adjacent coordinates\n    adj = []\n\n    # Iterate through the directions and append the adjacent coordinates to the list\n    for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n        if 0 <= x + dx < len(sub) and 0 <= y + dy < len(sub[0]):\n            adj.append((x + dx, y + dy))\n\n    # Return the list of adjacent coordinates\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj = []\n    if x > 0 and y > 0:\n        adj.append((x-1, y-1))\n    if x > 0:\n        adj.append((x-1, y))\n    if x > 0 and y < len(sub)-1:\n        adj.append((x-1, y+1))\n    if x < len(sub)-1 and y < len(sub)-1:\n        adj.append((x, y+1))\n    if x < len(sub)-1:\n        adj.append((x+1, y))\n    if x < len(sub)-1 and y > 0:\n        adj.append((x+1, y-1))\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0), (1, 1), (-1, 1), (1, -1), (-1, -1)]\n    adj = []\n    for direction in directions:\n        new_x = x + direction[0]\n        new_y = y + direction[1]\n        if 0 <= new_x < len(sub) and 0 <= new_y < len(sub[0]):\n            adj.append((new_x, new_y))\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj = []\n    if x > 0:\n        adj.append((x-1, y))\n    if x < len(sub)-1:\n        adj.append((x+1, y))\n    if y > 0:\n        adj.append((x, y-1))\n    if y < len(sub[0])-1:\n        adj.append((x, y+1))\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def adjac(ele, sub=[]):\n    \"\"\"\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    \"\"\"\n    x, y = ele\n    sub.append((x+1, y))\n    sub.append((x-1, y))\n    sub.append((x, y+1))\n    sub.append((x, y-1))\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def adjac(ele, sub=[]):\n    # Extract the adjacent coordinates of the given coordinate tuple\n    adj = [(ele[0]-1, ele[1]), (ele[0]+1, ele[1]), (ele[0], ele[1]-1), (ele[0], ele[1]+1)]\n    # Remove the duplicates from the list of adjacent coordinates\n    adj = list(set(adj))\n    # Append the sublist of adjacent coordinates to the main sublist\n    sub.append(adj)\n    # Recursively call the function for all the adjacent coordinates in the list\n    for a in adj:\n        adjac(a, sub)\n    # Return the sublist of adjacent coordinates\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def adjac(ele, sub=[]):\n    \"\"\"\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    \"\"\"\n    x, y = ele\n    adj = []\n    for i in range(-1, 2):\n        for j in range(-1, 2):\n            if i!= 0 or j!= 0:\n                new_x, new_y = x + i, y + j\n                if (new_x, new_y) not in sub and new_x >= 0 and new_x < 10 and new_y >= 0 and new_y < 10:\n                    adj.append((new_x, new_y))\n    return adj"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # create a set to store the characters to be replaced\n    replace_set = {' ', '_'}\n    \n    # iterate through the characters in the string\n    for i in range(len(text)):\n        # if the character is a space, replace it with an underscore\n        if text[i] in replace_set:\n            text = text[:i] + '_' + text[i+1:]\n            \n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    \"\"\"\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    \"\"\"\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    \"\"\"\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    \"\"\"\n    # replace all spaces with underscores\n    text = text.replace(\" \", \"_\")\n    # replace all underscores with spaces\n    text = text.replace(\"_\", \" \")\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n\n    # Convert the string to lowercase\n    text = text.lower()\n\n    # Replace all whitespaces with underscores\n    text = text.replace(' ', '_')\n\n    # Replace all underscores with whitespaces\n    text = text.replace('_','')\n\n    # Return the updated string\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    for i in range(len(text)):\n        if text[i] =='':\n            text = text[:i] + '_' + text[i+1:]\n        elif text[i] == '_':\n            text = text[:i] +'' + text[i+1:]\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace(' ', '_')\n    text = text.replace('_','')\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = \"\"\n    for char in text:\n        if char == \" \":\n            new_text += \"_\"\n        else:\n            new_text += char\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    for i in range(len(text)):\n        if text[i] =='':\n            text = text[:i] + '_' + text[i+1:]\n        elif text[i] == '_':\n            text = text[:i] +'' + text[i+1:]\n    return text"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # Traverse the list and remove all zeroes\n    for i in range(len(num_list)):\n        while num_list[i] == 0:\n            num_list.pop(i)\n\n    # Traverse the list again and move all zeroes to the end\n    for i in range(len(num_list)-1, -1, -1):\n        if num_list[i] == 0:\n            num_list[i], num_list[len(num_list)-1] = num_list[len(num_list)-1], num_list[i]\n\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    index = 0\n    for i in range(len(num_list)):\n        if num_list[i]!= 0:\n            num_list[index], num_list[i] = num_list[i], num_list[index]\n            index += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    i = len(num_list) - 1\n    while i >= 0:\n        if num_list[i] == 0:\n            num_list.pop(i)\n        else:\n            i -= 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # initialize two pointers\n    zero_index = -1\n    non_zero_index = 0\n    # loop through the list and move the non-zero numbers to the end\n    while non_zero_index < len(num_list):\n        if num_list[non_zero_index]!= 0:\n            num_list[zero_index+1], num_list[non_zero_index] = num_list[non_zero_index], num_list[zero_index+1]\n            zero_index += 1\n        non_zero_index += 1\n    # return the updated list with all zeroes moved to the end\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    # Initialize two pointers\n    i = 0\n    j = 0\n    \n    # Traverse the list\n    while j < len(num_list):\n        # Check if the element at j is zero\n        if num_list[j]!= 0:\n            # If not, move the element to its correct position\n            num_list[i], num_list[j] = num_list[j], num_list[i]\n            # Increment i\n            i += 1\n        # Increment j\n        j += 1\n    \n    # Return the modified list\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    i = 0\n    while i < len(num_list):\n        if num_list[i]!= 0:\n            i += 1\n        else:\n            num_list.pop(i)\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    i = 0\n    while i < len(num_list):\n        if num_list[i] == 0:\n            num_list[i], num_list[-1] = num_list[-1], num_list[i]\n            i -= 1\n        else:\n            i += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # initialize two pointers - one for the first non-zero number and one for the end of the list\n    i = 0\n    j = len(num_list) - 1\n    \n    # iterate through the list while i < j (i.e., there are still elements in the list)\n    while i < j:\n        # if the current element is not zero, move it to the next index\n        if num_list[i]!= 0:\n            i += 1\n        # if the current element is zero, swap it with the element at index j and move i to j\n        else:\n            num_list[i], num_list[j] = num_list[j], num_list[i]\n            j -= 1\n    \n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    i = len(num_list) - 1\n    while i >= 0:\n        if num_list[i] == 0:\n            num_list.pop(i)\n            i -= 1\n        else:\n            break\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    for i in range(len(num_list)-1, -1, -1):\n        if num_list[i] == 0:\n            num_list.pop(i)\n            num_list.append(0)\n    return num_list"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    This function takes two input lists - one for the numbers and the other for the corresponding XOR values. \n    The function then computes the XOR of all pairs of numbers and returns the sum of those XOR values.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # XOR of all numbers in the list\n    xor_sum = 0\n    \n    # Iterate through the list and find the XOR of each pair of numbers\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum ^= arr[i] ^ arr[j]\n            \n    # Return the XOR sum\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # XOR of first and last element\n    first_last_xor = arr[0] ^ arr[-1]\n    # XOR of remaining elements\n    remaining_xor = arr[0] ^ arr[1:n-1] ^ arr[n-1]\n    \n    # XOR of the above two XORs\n    xor_sum = first_last_xor ^ remaining_xor\n    \n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    This function takes a list of integers and an integer n as input and returns the sum of the XOR of all pairs of numbers in the list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr, n):\n    # XOR of all elements of the list\n    xor_sum = sum(arr)\n    \n    # Initialize the sum of pairs\n    pair_sum = 0\n    \n    # Iterate through the list\n    for i in range(n):\n        # XOR of current element and all elements before it\n        xor_before = 0\n        for j in range(i):\n            xor_before ^= arr[j]\n        \n        # XOR of current element and all elements after it\n        xor_after = 0\n        for j in range(n):\n            if j!= i:\n                xor_after ^= arr[j]\n        \n        # XOR of the current element and xor_before and xor_after\n        xor_pair = xor_before ^ xor_after\n        \n        # Add the xor_pair to the pair_sum\n        pair_sum += xor_pair\n    \n    # Return the sum of pairs\n    return pair_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    This function takes a list and an integer n as input, and returns the sum of the xor of all pairs of numbers in the list.\n    '''\n    sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor = arr[i] ^ arr[j]\n            sum += xor\n    return sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr,n):\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    This function takes a list of n integers and returns the sum of xor of all pairs of integers in the list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr, n):\n    \"\"\"\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    \"\"\"\n    xor_sum = 0\n    for i in range(n):\n        xor_sum ^= arr[i] ^ arr[i+n]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Convert the list to a heap\n    heap = list(iterable)\n    heapq.heapify(heap)\n    # Sort the heap\n    sorted_heap = []\n    while heap:\n        # Remove the smallest element from the heap\n        smallest = heapq.heappop(heap)\n        # Add it to the sorted heap\n        sorted_heap.append(smallest)\n    # Convert the sorted heap back to a list and return it\n    return sorted_heap"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    \"\"\"\n    Write a function to sort the given list.\n    \"\"\"\n    hq.heapify(iterable)\n    sorted_list = []\n    while iterable:\n        sorted_list.append(hq.heappop(iterable))\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # convert the list to a heap\n    heap = [h for h in iterable]\n    # sort the heap using heap sort algorithm\n    hq.heapify(heap)\n    # convert the sorted heap back to a list\n    sorted_list = [heap[0]]\n    for i in range(1, len(heap)):\n        if heap[i] > sorted_list[0]:\n            sorted_list.append(heap[i])\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Convert the given list to a max heap\n    hq.heapify(iterable)\n\n    # Extract the maximum element from the heap and append it to a new list\n    sorted_list = []\n    while hq.heappop(iterable) is not None:\n        sorted_list.append(hq.heappop(iterable))\n\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    n = len(iterable)\n    for i in range(n-1, 0, -1):\n        hq.heappop(iterable)\n    return iterable"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Convert the list to a heap\n    iterable = list(iterable)\n    hq.heapify(iterable)\n\n    # Extract the maximum element from the heap\n    sorted_list = []\n    while iterable:\n        sorted_list.append(heapq.heappop(iterable))\n\n    # Reverse the sorted list\n    sorted_list.reverse()\n\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using the heap sort algorithm.\n    '''\n    hq.heapify(iterable)\n    for i in range(len(iterable)-1, 0, -1):\n        hq.heapify(iterable, 0, i)\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n    return iterable"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # create a list of tuples containing the elements and their indices\n    heap = [(val, idx) for idx, val in enumerate(iterable)]\n    # sort the list of tuples in ascending order\n    hq.heapify(heap)\n    # extract the elements from the sorted list and return the sorted list\n    return [val for val, _ in sorted(heap)]"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = []\n    for item in iterable:\n        heapq.heappush(heap, item)\n    result = []\n    while heap:\n        result.append(heapq.heappop(heap))\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = hq.nsmallest(len(iterable), iterable)\n    sorted_list = []\n    for _ in iterable:\n        sorted_list.append(heapq.heappop(heap))\n    return sorted_list"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    Write a function to check whether the given amount has no profit and no loss\n    \"\"\"\n    if sale_amount > actual_cost:\n        return \"No profit or loss\"\n    elif sale_amount == actual_cost:\n        return \"Profit or loss\"\n    else:\n        return \"No profit and no loss\""
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount == actual_cost:\n        return True\n    elif actual_cost - sale_amount >= 0:\n        return False\n    else:\n        return noprofit_noloss(actual_cost, sale_amount - 1)"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost >= sale_amount:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    Write a function to check whether the given amount has no profit and no loss\n    \n    Args:\n        actual_cost (float): The actual cost of the items.\n        sale_amount (float): The amount sold for the items.\n        \n    Returns:\n        bool: True if the sale amount has no profit and no loss, False otherwise.\n    \"\"\"\n    if actual_cost == sale_amount:\n        return True\n    elif actual_cost < sale_amount:\n        return False\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    This function takes the actual cost and sale amount as input parameters and \n    returns True if the amount has no profit and no loss, False otherwise. \n    '''\n    \n    profit_percentage = (actual_cost - sale_amount) / sale_amount * 100\n    if profit_percentage == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount == 0:\n        return True\n    if actual_cost < sale_amount:\n        return False\n    if sale_amount > actual_cost + sale_amount:\n        return False\n    return True"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost <= sale_amount:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost,sale_amount):\n    \"\"\"\n    Write a function to check whether the given amount has no profit and no loss\n    \"\"\"\n\n    # Calculate the profit and loss\n    profit = sale_amount - actual_cost\n\n    # Check if profit is negative and loss is positive\n    if profit < 0 and sale_amount > actual_cost:\n        return False\n    else:\n        return True"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    Write a function to check whether the given amount has no profit and no loss\n    \"\"\"\n    profit = sale_amount - actual_cost\n    loss = actual_cost - sale_amount\n\n    if profit == 0 and loss == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount >= actual_cost:\n        return True\n    else:\n        return False"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if t < -10:\n        return None # Invalid temperature\n\n    if v < 0:\n        return None # Wind velocity cannot be negative\n\n    if v <= 0.1:\n        # Heat index for dry air at 10 mph\n        h = 13.12 + 0.6215*t - 11.37*math.pow(t, 0.16) + 0.3965*math.pow(t, 0.16)\n        # Wind chill index is half of the heat index\n        wci = h/2\n\n    elif v <= 1.5:\n        # Heat index for moist air at 15 km/h\n        h = 21.2 + 0.094*t + 13.33*math.log(t) - 16.8*math.log(t) + 0.2*t - 8.5*math.pow(t, 2) + 2.5*math.pow(t, 3)\n        # Wind chill index is half of the heat index\n        wci = h/2\n\n    else:\n        # Heat index for windy air at 20 mph\n        h = 10.5*math.log10(v) + 237.3 + 0.0065*t - 0.00036*math.pow(t, 2)\n        # Wind chill index is half of the heat index\n        wci = h/2\n\n    # Round wind chill index to the nearest integer\n    wci = round(wci)\n\n    return wci"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wind_speed_in_mph = v * 0.621371 # Convert km/h to miles/hour\n    if t < -20:\n        chill_index = 20\n    elif 50 <= t <= 120:\n        chill_index = 68 + (13.12 + 0.621371*(t - 50))*(wind_speed_in_mph - 5.176)\n    elif 120 < t <= 170:\n        chill_index = 78 + (0.09247 + 0.34495*math.log(t-120)+0.14*(t-120)*(wind_speed_in_mph-13.12))/2\n    elif t > 170:\n        chill_index = 86\n    chill_index = round(chill_index)\n    return chill_index"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # convert from celsius to fahrenheit\n    t = (t * 9/5) + 32\n    \n    # calculate the wind chill index\n    wind_chill_index = 35.74 + 0.6215*v + (0.4275*t) - 35.75*math.log(v) + 0.0063*t**2\n    \n    # round the wind chill index to the next integer\n    wind_chill_index = round(wind_chill_index)\n    \n    # return the wind chill index\n    return wind_chill_index"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Convert temperature to fahrenheit\n    t_f = (t * 9/5) + 32\n    \n    # Calculate the wind chill index using the formulae provided in the problem statement\n    wci = 35.74 + 0.6215 * t_f - 35.75 * math.log(t_f) + 0.4275 * v\n    \n    # Round the wind chill index to the nearest integer\n    wci_int = round(wci)\n    \n    return wci_int"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def wind_chill(v, t):\n    \"\"\"\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\n    :param v: wind velocity in km/h\n    :type v: float\n    :param t: temperature in celsius\n    :type t: float\n    :return: wind chill index rounded to the next integer\n    :rtype: int\n    \"\"\"\n    if v <= 0:\n        raise ValueError(\"Wind velocity must be a positive number.\")\n    elif t <= 0:\n        raise ValueError(\"Temperature must be a positive number.\")\n    else:\n        u = math.sqrt(v**2 + 1.85 * 0.622 * (t - 273.15)**2)\n        return round(max(32, (u - 273.15) / (1.85 * 0.622)))"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n\n    # convert wind velocity to m/s\n    v_ms = v * 1.60934  # conversion factor from km/h to m/s\n\n    # calculate the wind chill index\n    w_c = 35.74 + 0.6215 * t - 35.75 * math.exp(t/10) + 0.4275 * (v_ms/10)\n    w_c = round(w_c)\n\n    return w_c"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n\n    # calculate the heat index\n    hi = 80 + 0.6215 * t - 35.75 * math.log(v * 0.001) + 0.4275 * t * (t - 80)\n\n    # calculate the wind chill index\n    wc = 35.75 + 0.6215 * t - 35.75 * math.log(v * 0.001)\n\n    # calculate the wind chill index rounded to the nearest integer\n    wc = math.ceil(wc)\n\n    return wc"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\n    Parameters:\n    v (float): Wind velocity in km/h.\n    t (float): Temperature in celsius.\n\n    Returns:\n    int: Wind chill index rounded to the next integer.\n    '''\n\n    # Convert temperature from celsius to fahrenheit\n    t = (t * 1.8) + 32\n\n    # Calculate the wind chill index using the formula:\n    # wind chill = 35.74 + 0.6215 * temperature - 35.75 * log(relative humidity) + 0.4275 * dew point temperature\n    wci = 35.74 + 0.6215 * t - 35.75 * math.log(0.7 * v / 0.61) + 0.4275 * (243.12 - t)\n\n    # Round the wind chill index to the nearest integer\n    wci = round(wci)\n\n    return wci"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Convert temperature to Fahrenheit\n    t_f = t * 9/5 + 32\n    \n    # Calculate wind chill index\n    wci = 13.12 + 0.6215 * v + 11.37 * math.log(t_f) - 0.3965 * math.log(v) - 0.567 * math.log(t_f) + 0.11 * math.log(v)\n    \n    # Convert wind chill index to integer\n    wci = int(wci + 0.5)\n    \n    # Return wind chill index\n    return wci"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    # convert wind velocity to m/s\n    v_m_s = v * 1.60934 # convert from km/h to m/s\n    \n    # calculate the dew point temperature using the dew point formula\n    dp = ((243.04 * (t + 273.15)) / (17.67 * math.log(v_m_s))) + 273.15\n    \n    # calculate the wind chill index using the formula\n    wc = 35.74 + (0.6215 * t) + (13.37 * (dp - t)) + ((0.3965 * t) * (dp - t))\n    \n    # round the wind chill index to the nearest integer\n    wc = round(wc)\n    \n    return wc"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # initialize a variable to store the sum of the lengths of names\n    sum_len = 0\n    \n    # loop through each name in the list\n    for name in sample_names:\n        # check if the name starts with a lowercase letter\n        if name[0].islower():\n            # if it does, skip to the next name\n            continue\n        # otherwise, add the length of the name to the sum\n        sum_len += len(name)\n    \n    # return the sum of the lengths of names after removing those that start with a lowercase letter\n    return sum_len"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # initialize sum variable to zero\n    sum = 0\n    # loop through each name in the sample_names list\n    for name in sample_names:\n        # remove the first character of the name if it is a lowercase letter\n        if name[0].islower():\n            name = name[1:]\n        # add the length of the remaining name to the sum\n        sum += len(name)\n    # return the sum\n    return sum"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # initialize sum variable\n    total_length = 0\n    \n    # iterate over the names in the list\n    for name in sample_names:\n        # check if the name starts with a lowercase letter\n        if name[0].islower():\n            # if it does, skip it\n            continue\n        # add the length of the name to the total length\n        total_length += len(name)\n    \n    # return the total length\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    name_lengths = []\n    for name in sample_names:\n        if name[0].isupper():\n            name_lengths.append(len(name))\n    return sum(name_lengths)"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum(len(name) for name in sample_names if not name[0].islower())"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n\n    # Initialize a variable to store the sum of names' lengths\n    name_lengths = 0\n\n    # Iterate over the list of names and remove names that start with a lowercase letter\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        else:\n            name_lengths += len(name)\n\n    # Return the sum of names' lengths\n    return name_lengths"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        else:\n            sum_length += len(name)\n    return sum_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Create an empty list to store the names that start with a lowercase letter\n    lower_names = []\n    # Loop through the names in the given list\n    for name in sample_names:\n        # Check if the name starts with a lowercase letter\n        if name[0].islower():\n            # If it does, add it to the list of lowercase names\n            lower_names.append(name)\n    # Use a for loop to sum the lengths of the lowercase names\n    total_len = 0\n    for name in lower_names:\n        total_len += len(name)\n    # Return the total length of the lowercase names\n    return total_len"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n\n    # initialize a variable to store the sum of names' lengths\n    total_len = 0\n\n    # iterate over each name in the list\n    for name in sample_names:\n\n        # check if the name starts with a lowercase letter\n        if name[0].islower():\n\n            # if so, skip it and move on to the next name\n            continue\n\n        # if the name does not start with a lowercase letter, add its length to the total\n        total_len += len(name)\n\n    # return the total length of names that do not start with a lowercase letter\n    return total_len"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    result = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        result += len(name)\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\((.*?)\\)')\n    result = pattern.sub('', items)\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\(.*?\\)') # regular expression to match parenthesis\n    items = pattern.sub('', items) # remove parenthesis from the string\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\((.*?)\\)'\n    return re.sub(pattern, r'\\1', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^)]*\\)')\n    result = pattern.sub('', items)\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^)]*\\)'\n    return re.sub(pattern, '', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r\"\\(([^)]*)\\)\"\n    result = re.sub(pattern, r\"\", items)\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    return re.sub(r'\\(.*?\\)', '', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    This function takes in a string and removes the parenthesis and what is inbetween them.\n    '''\n    # Use regex to remove all the parenthesis and what is inbetween them\n    result = re.sub(r'\\([^)]*\\)', '', items)\n    \n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^)]*\\)'\n    items = re.sub(pattern, '', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^()]+\\)')\n    items = pattern.sub('', items)\n    return items"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n < 1: \n        return None\n    \n    nonagonal = 1\n    \n    for i in range(1, n): \n        nonagonal += (2 * i - 1)\n    \n    return nonagonal\n\nn = int(input(\"Enter the value of n: \"))\n\nresult = is_nonagonal(n)\n\nif result is None: \n    print(\"Invalid input\")\nelse: \n    print(\"The nth nonagonal number is:\", result)"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    count = 0\n    x = 1\n    y = 1\n    \n    while count < n:\n        if count % 2 == 0:\n            x += y\n            count += 1\n        else:\n            y += x\n            count += 1\n            \n    return x\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The\", n, \"nonagonal number is:\", is_nonagonal(n))"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n\n    nonagonal_numbers = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            nonagonal_numbers.append(i**2)\n        else:\n            nonagonal_numbers.append(i**2 + 1)\n\n    return nonagonal_numbers[n-1]"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_nonagonal(n): \n    \"\"\"\n    Write a function to find the nth nonagonal number.\n    \"\"\"\n    if n < 1: \n        return None\n    else: \n        result = (n * (n - 1)) // 2\n        return result"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    nonagonal = (n*(n+1))//2\n    return nonagonal"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Initialize the first two nonagonal numbers to 1\n    nonagonal_num1 = 1\n    nonagonal_num2 = 1\n\n    # Loop through the remaining nonagonal numbers\n    for i in range(2, n+1):\n        # Calculate the next nonagonal number\n        next_num = nonagonal_num1 + nonagonal_num2\n\n        # Update the nonagonal numbers\n        nonagonal_num1 = nonagonal_num2\n        nonagonal_num2 = next_num\n\n        # Print the next nonagonal number\n        print(next_num)"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    Write a function to find the nth nonagonal number.\n    \"\"\"\n    # To find the nth nonagonal number, we need to add the (n-1)th and (n-2)th nonagonal numbers.\n    # Since the nonagonal numbers are always odd numbers, we need to add 2 more nonagonal numbers to get the total number of nonagonal numbers.\n    total_nonagonal = (n * (n - 1) * 2) + 2\n    \n    return total_nonagonal"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n < 0:\n        return 'Please enter a non-negative integer.'\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        for i in range(2, n+1):\n            if i % 2 == 1:\n                return i\n        return 'The nth nonagonal number does not exist.'"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # initialize the first nonagonal number to 1\n    nonagonal_num = 1\n\n    # loop from 1 to n\n    for i in range(1, n+1):\n        # multiply the previous nonagonal number by 2\n        prev_nonagonal_num = nonagonal_num\n        nonagonal_num *= 2\n\n        # check if the result is greater than n\n        if nonagonal_num > n:\n            # if it is, return the previous nonagonal number\n            return prev_nonagonal_num\n    \n    # if the loop completes, return the final nonagonal number\n    return nonagonal_num"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return (n*(n+1))//2\n\nprint(is_nonagonal(5)) # Output: 20\nprint(is_nonagonal(10)) # Output: 200\nprint(is_nonagonal(20)) # Output: 500"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'(?<!\\w)z(?!\\w)'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'(?<=\\b)z(?=\\b)'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'(?<=\\b|^)(z)[^a-zA-Z]*(?=\\b|$)'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    # Find all matches of 'z' except at the start and end of the word\n    matches = re.findall(r'\\b[zZ][^\\w]*[^\\w][zZ]', text)\n    if matches:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Define a regular expression pattern to match word boundaries\n    word_boundary_pattern = r'\\b'\n    \n    # Split the text into words using the word boundary pattern\n    words = re.findall(word_boundary_pattern + r'[zZ]' + word_boundary_pattern, text)\n    \n    # Check if there are any words that contain a 'z' other than the start and end of the word\n    if words:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b(z)\\b'\n    return re.search(pattern, text)"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    \"\"\"\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    \"\"\"\n    pattern = re.compile(r'\\b[zZ]\\w*\\b', re.IGNORECASE)\n    result = pattern.search(text)\n    return result is not None\n"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b[^z]*z[^z]*\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    This function checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Remove any non-alphabetic characters from the input string\n    text = re.sub(r'[^a-zA-Z\\s]', '', text)\n    # Split the input string into a list of words\n    words = text.split()\n    # Iterate over the list of words and check if each word ends with 'z' except at the start and end of the word\n    for word in words:\n        if word[0] == 'z' and word[-1] == 'z':\n            return True\n        elif word[0] == 'z':\n            continue\n        elif word[-1] == 'z':\n            continue\n    # If the loop completes without finding any 'z' words, return False\n    return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'(?<![a-z])z(?![a-z])'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n\n    # Initialize variables\n    left, right = 0, len(input) - 1\n    while left < right:\n        \n        # Reverse the left and right subarrays\n        left_temp = input[left]\n        input[left] = input[right]\n        input[right] = left_temp\n        \n        # Move the pointers towards each other\n        left += 1\n        right -= 1\n    \n    # Return the reversed array\n    return input[:k]"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    input.reverse()\n    return input[:k] + input[k:][::-1]"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k):\n    \"\"\"\n    This function takes an array and a position k and returns a new array that is a reverse of the original array upto the given position k.\n    \"\"\"\n\n    # Initialize an empty array to store the reversed array\n    reversed_array = []\n\n    # Traverse through the original array from left to right\n    for i in range(len(input)):\n\n        # If i is less than k, add the element to the reversed array\n        if i < k:\n            reversed_array.append(input[i])\n\n        # If i is greater than or equal to k, add the element to the reversed array\n        elif i >= k:\n            reversed_array.append(input[len(input)-i-1])\n\n    return reversed_array"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Reverse the array from the first element to k-1\n    for i in range(k):\n        input[0], input[i] = input[i], input[0]\n    # Reverse the array from k to end\n    for i in range(k, len(input)//2+k):\n        input[i], input[len(input)-i-1] = input[len(input)-i-1], input[i]\n    # Reverse the array from end to first\n    for i in range(len(input)//2+k, len(input)):\n        input[i], input[len(input)-i-1] = input[len(input)-i-1], input[i]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # reverse the array upto position k-1\n    for i in range(0, k-1):\n        input[i], input[k-i-1] = input[k-i-1], input[i]\n\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Initialize the left and right indices\n    left = 0\n    right = len(input) - 1\n\n    # Reverse the array up to the given position\n    while left < k:\n        input[left], input[right] = input[right], input[left]\n        left += 1\n        right -= 1\n\n    # Reverse the array from the given position to the end\n    left = k\n    right = len(input) - 1\n    while left < right:\n        input[left], input[right] = input[right], input[left]\n        left += 1\n        right -= 1\n\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n\n    for i in range(k-1, -1, -1):\n        # swap current element with the element at the end of the array\n        input[i], input[k-1-i] = input[k-1-i], input[i]\n\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    reverse_list = []\n    n = len(input)\n\n    # Finding the first k elements of the array\n    for i in range(k):\n        reverse_list.append(input[i])\n\n    # Finding the remaining elements of the array\n    for i in range(k, n):\n        reverse_list.append(input[i])\n\n    # Printing the reversed array\n    print(\"Reversed array:\", reverse_list)"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    reverse_array = []\n    for i in range(len(input)-1, k-1, -1):\n        reverse_array.append(input[i])\n    return reverse_array"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    for i in range(k-1, -1, -1):\n        input[i], input[n-k+i] = input[n-k+i], input[i]\n    return input"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return tuple(test_tup + [test_dict])"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Create a new dictionary with the keys and values from the original tuple and the new dictionary\n    new_dict = {**test_tup[0], **test_dict}\n    # Convert the new dictionary to a tuple\n    new_tuple = tuple(new_dict.items())\n    # Return the new tuple\n    return new_tuple"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # create a new dictionary with the same keys and values as the input dictionary\n    new_dict = {k: v for k, v in test_dict.items()}\n    # add the new dictionary to the input tuple\n    new_tup = test_tup + (new_dict,)\n    # return the new tuple\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # unpack the tuple and dictionary into individual variables\n    tup_items = test_tup\n    dict_items = test_dict\n    # create a new empty dictionary to store the updated items\n    new_dict = {}\n    # iterate over the tuple items and add them to the new dictionary\n    for item in tup_items:\n        new_dict[item] = item\n    # iterate over the dictionary items and add them to the new dictionary\n    for key, value in dict_items.items():\n        new_dict[key] = value\n    # convert the new dictionary into a tuple and return it\n    return tuple(new_dict.items())"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # create a new dictionary with the values from the original dictionary and the values from the test dictionary\n    new_dict = test_dict.copy()\n    for key, value in test_tup:\n        new_dict[key] = value\n    # create a new tuple with the values from the original tuple and the values from the new dictionary\n    new_tup = test_tup + (new_dict.values(),)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    # Create a new dictionary with all the keys and values from the original dictionary and the new dictionary\n    new_dict = {**test_dict}\n    # Return the new tuple with the original tuple and the new dictionary\n    return (test_tup, new_dict)"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    for key, value in test_dict.items():\n        test_tup = test_tup + (value,)\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    test_dict.update(test_tup)\n    return test_dict\n"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Convert the dictionary to a tuple\n    test_dict = tuple(test_dict.items())\n    # Append the dictionary to the tuple\n    test_tup += (test_dict,)\n    # Return the modified tuple\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_dict = test_dict\n    return (test_tup, new_dict)"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    def findMaxAverage(start, end, path):\n        if start == end:\n            return 0\n        max_left = float('-inf')\n        max_right = float('-inf')\n        max_up = float('-inf')\n        max_down = float('-inf')\n        visited = set(path)\n        \n        for i in range(4):\n            if i == 0:\n                if (start[0]+1, start[1]) not in visited and cost[start[0]+1][start[1]]!= 0:\n                    max_left = max(max_left, findMaxAverage((start[0]+1, start[1]), end, path+(start[0]+1, start[1])))\n            if i == 1:\n                if (start[0], start[1]+1) not in visited and cost[start[0]][start[1]+1]!= 0:\n                    max_right = max(max_right, findMaxAverage((start[0], start[1]+1), end, path+(start[0], start[1]+1)))\n            if i == 2:\n                if (start[0]-1, start[1]) not in visited and cost[start[0]-1][start[1]]!= 0:\n                    max_down = max(max_down, findMaxAverage((start[0]-1, start[1]), end, path+(start[0]-1, start[1])))\n            if i == 3:\n                if (start[0], start[1]-1) not in visited and cost[start[0]][start[1]-1]!= 0:\n                    max_up = max(max_up, findMaxAverage((start[0], start[1]-1), end, path+(start[0], start[1]-1)))\n        \n        return (max_left + max_right + max_up + max_down) / 4\n    \n    start = (0, 0)\n    end = (len(cost)-1, len(cost[0])-1)\n    return findMaxAverage(start, end, ())"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    rows = len(cost)\n    cols = len(cost[0])\n    \n    dp = [[0] * (cols+1) for _ in range(rows+1)]\n    \n    for i in range(1, rows+1):\n        for j in range(1, cols+1):\n            if i == 1 and j == 1:\n                dp[i][j] = cost[0][0]\n            elif i == 1:\n                dp[i][j] = max(dp[i][j-1], dp[i][j-2] + cost[i][j-1])\n            elif j == 1:\n                dp[i][j] = max(dp[i-1][j], dp[i-2][j] + cost[i-1][j])\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i-1][j-1], dp[i-2][j-1] + cost[i-1][j-1])\n                \n    max_avg = dp[rows][cols]\n    max_path = []\n    \n    i, j = rows, cols\n    while i!= 1 or j!= 1:\n        if i == 1 and j == 1:\n            max_path.insert(0, 1)\n            i, j = i-1, j-1\n        elif i == 1:\n            max_path.insert(0, 2)\n            i, j = i-1, j\n        elif j == 1:\n            max_path.insert(0, 3)\n            i, j = i, j-1\n        else:\n            max_path.insert(0, 4)\n            i, j = i-1, j-1\n            \n    return max_avg, max_path"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    N = len(cost)\n    dp = [[0] * (N + 1) for _ in range(N + 1)]\n    dp[1][1] = cost[0][0]\n\n    for i in range(1, N):\n        dp[i + 1][1] = max(dp[i][1], cost[i][0] + dp[i][0])\n        dp[i + 1][2] = max(dp[i][2], cost[i][1] + dp[i][1])\n\n    max_avg = float('-inf')\n    for i in range(1, N + 1):\n        for j in range(1, N + 1):\n            if i!= N and j!= N:\n                if cost[i - 1][j - 1] < dp[i][j]:\n                    avg = (cost[i - 1][j - 1] + dp[i][j]) / 2\n                else:\n                    avg = dp[i][j]\n                max_avg = max(max_avg, avg)\n\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    max_avg = 0\n    paths = []\n    for i in range(N):\n        paths.append([])\n        for j in range(N):\n            if i == 0 and j == 0:\n                paths[i].append(0)\n            elif i == 0:\n                paths[i].append(cost[i][j] + paths[i][j-1])\n            elif j == 0:\n                paths[i].append(cost[i][j] + paths[i-1][j])\n            else:\n                paths[i].append(cost[i][j] + max(paths[i-1][j], paths[i][j-1]))\n        for k in range(len(paths[i])):\n            if i > 0 and j > 0:\n                paths[i][k] += max(paths[i-1][k], paths[i][k-1])\n            paths[i][k] += paths[i][k] / (i+j+1)\n        max_avg = max(max_avg, max(paths[i]))\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    visited = [[0 for _ in range(N)] for _ in range(N)]\n    max_avg = float('-inf')\n    max_path = None\n    \n    for i in range(N):\n        for j in range(N):\n            visited[i][j] = 1\n            avg_cost = 0\n            \n            if i == 0 and j == 0:\n                avg_cost = cost[i][j]\n            else:\n                if j < N-1:\n                    avg_cost += cost[i][j] + visited[i][j+1]\n                if i < N-1:\n                    avg_cost += cost[i][j] + visited[i+1][j]\n                    \n            if avg_cost > max_avg:\n                max_avg = avg_cost\n                max_path = [[0 for _ in range(N)] for _ in range(N)]\n                max_path[i][j] = 1\n            elif avg_cost == max_avg:\n                max_path[i][j] = 1\n            \n            visited[i][j] = 0\n            \n    return max_avg, max_path"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    N = len(cost)\n    dp = [[0] * (N+1) for _ in range(N+1)]\n    max_avg = float('-inf')\n\n    # base cases\n    dp[1][1] = cost[0][0]\n    for i in range(1, N+1):\n        dp[1][i] = dp[1][i-1] + cost[0][i-1]\n\n    for i in range(2, N+1):\n        for j in range(1, N+1):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i-1][j-1]\n\n            # update max_avg if new max found\n            if dp[i][j] > max_avg:\n                max_avg = dp[i][j]\n\n    return max_avg\n"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    def max_path_average(cost, N, m, n):\n        '''\n        This function finds the maximum average of all existing paths in the given matrix.\n        '''\n        # To store the maximum path average for each cell\n        max_avg = [0]*(N*N)\n        \n        # To store the total cost for each cell\n        total_cost = [0]*(N*N)\n        \n        # To store the number of visited cells for each cell\n        visited = [0]*(N*N)\n        \n        # To store the path start and end positions\n        start = [[0,0],[0,0]]\n        end = [[0,0],[0,0]]\n        \n        # To store the path\n        path = [[0,0],[0,0]]\n        \n        # Helper function to check if a given cell is a valid cell for a path\n        def is_valid_cell(i, j):\n            return (0<=i<N and 0<=j<N)\n        \n        # Helper function to check if a given path is valid for the given cost matrix\n        def is_valid_path(i, j):\n            return is_valid_cell(i, j) and (not (i, j) in path or (i, j) not in path)\n        \n        # Helper function to compute the cost of a path\n        def compute_cost(i, j):\n            if (i, j) in start:\n                return total_cost[i,j] - cost[i][j]\n            elif (i, j) in end:\n                return cost[i][j] - total_cost[i,j]\n            else:\n                return cost[i][j] - total_cost[i,j]\n        \n        # Helper function to update the max path average, total cost and visited cells for the given cell\n        def update_max_avg(i, j):\n            if i==0 and j==0:\n                max_avg[i+j] = cost[i][j]\n                total_cost[i+j] = cost[i][j]\n                visited[i+j] = 1\n                path[i+j] = [(i,j)]\n                return\n            elif i>0:\n                if (i-1, j) not in path[i]:\n                    update_max_avg(i-1, j)\n            elif j>0:\n                if (i, j-1) not in path[i]:\n                    update_max_avg(i, j-1)\n            \n            # Update the max path average, total cost and visited cells for the current cell\n            if (i, j) not in start and (i, j) not in end:\n                current_avg = (total_cost[i,j] - max_avg[i+j]) / visited[i+j]\n                if current_avg > max_avg[i+j]:\n                    max_avg[i+j] = current_avg\n                    path[i+j] = path[i+j] + [(i,j)]\n                elif current_avg == max_avg[i+j]:\n                    path[i+j] = path[i+j] + [(i,j)]\n                \n        # Traverse the matrix and update the max path average, total cost and visited cells\n        for i in range(N):\n            for j in range(N):\n                if is_valid_cell(i, j):\n                    update_max_avg(i, j)\n                    \n        # Find the maximum average path\n        max_avg_path = [(i, j) for i in range(N) for j in range(N) if (i,j) in path[-1]]\n        if max_avg_path:\n            max_avg_path = [(i,j) for i in range(N) for j in range(N) if (i,j) in path[-1]][-1]\n        else:\n            max_avg_path = [(0,0)]\n        \n        return max_avg_path\n    \n    # Find the maximum average path for the given cost matrix\n    N = len(cost)\n    max_avg_path = max_path_average(cost, N, 0, 0)\n    \n    return max_avg_path"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    # Initialize variables\n    max_avg = 0\n    max_path = None\n    \n    # Iterate through all possible paths\n    for i in range(N):\n        for j in range(N):\n            # Base case: when reaching the bottom-right cell\n            if i == N-1 and j == N-1:\n                # Compute average and update maximum\n                avg = sum(cost[i][j])\n                if avg > max_avg:\n                    max_avg = avg\n                    max_path = [(i, j)]\n                continue\n            \n            # Recursive case: explore up, down, left, and right directions\n            up = (i+1, j) if i < N-1 else None\n            down = (i-1, j) if i > 0 else None\n            left = (i, j+1) if j < N-1 else None\n            right = (i, j-1) if j > 0 else None\n            \n            # Find the path with the maximum average and update maximum\n            if up is not None:\n                avg = sum(cost[up[0]][up[1]])\n                if avg > max_avg:\n                    max_avg = avg\n                    max_path = [(up[0], up[1])] + max_path\n            if down is not None:\n                avg = sum(cost[down[0]][down[1]])\n                if avg > max_avg:\n                    max_avg = avg\n                    max_path = [(down[0], down[1])] + max_path\n            if left is not None:\n                avg = sum(cost[left[0]][left[1]])\n                if avg > max_avg:\n                    max_avg = avg\n                    max_path = [(left[0], left[1])] + max_path\n            if right is not None:\n                avg = sum(cost[right[0]][right[1]])\n                if avg > max_avg:\n                    max_avg = avg\n                    max_path = [(right[0], right[1])] + max_path\n            \n    # Return the maximum average path\n    return max_path"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    def max_average(matrix, i, j, visited):\n        if i == len(matrix) - 1 and j == len(matrix[0]) - 1:\n            return 0\n\n        if (i, j) in visited or (i, j) == (len(matrix) - 1, len(matrix[0]) - 1):\n            return float('-inf')\n\n        visited.add((i, j))\n\n        left = max_average(matrix, i, j + 1, visited)\n        up = max_average(matrix, i + 1, j, visited)\n        right = max_average(matrix, i, j - 1, visited)\n        down = max_average(matrix, i - 1, j, visited)\n\n        return max(left, up, right, down) + matrix[i][j]\n\n    N = len(cost)\n    return max_average(cost, 0, 0, set())"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    paths = []\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                paths.append(cost[i][j])\n            elif i == 0:\n                paths.append(cost[i][j] + paths[-1])\n            elif j == 0:\n                paths.append(cost[i][j] + paths[-1])\n            else:\n                paths.append(cost[i][j] + max(paths[i-1], paths[j]))\n    return max(paths)"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[student] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        if data[0] > h and data[1] > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    # Create an empty list to store the filtered students\n    filtered_students = []\n\n    # Iterate over each student in the dictionary\n    for name, student_data in students.items():\n        # Extract the student's height and weight\n        height, weight = student_data\n\n        # Check if the student's height and weight are greater than or equal to the minimum height and weight\n        if height >= h and weight >= w:\n            # If the student passes the filter, add them to the list of filtered students\n            filtered_students.append(name)\n\n    # Return the list of filtered students\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_data(students, h, w):\n    \"\"\"\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    \"\"\"\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i] and i not in nums1:\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # Initialize a dictionary to store the indices of the same values\n    same_indices = {}\n    \n    # Loop through the two lists and check if the values are the same\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            # If the values are the same, add the index to the same_indices dictionary\n            same_indices[i] = nums1[i]\n    \n    # Return the number of values that are the same in the two lists\n    return len(same_indices)"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # initialize a dictionary to store the count of each value in the lists\n    count_dict = {}\n\n    # iterate over the two lists and add the counts to the dictionary\n    for i in range(len(nums1)):\n        if nums1[i] in count_dict:\n            count_dict[nums1[i]] += 1\n        else:\n            count_dict[nums1[i]] = 1\n\n    # initialize a variable to store the count of the same value pairs\n    count = 0\n\n    # iterate over the second list and check if the value is present in the dictionary\n    for i in range(len(nums2)):\n        if nums2[i] in count_dict and count_dict[nums2[i]] > 0:\n            count += 1\n            count_dict[nums2[i]] -= 1\n\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if all(eq(nums1[i], nums2[j]) for j in range(len(nums2))):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_same_pair(nums1, nums2):\n    # create a dictionary to store the counts of each number in nums1\n    count_nums1 = {}\n    for num in nums1:\n        if num in count_nums1:\n            count_nums1[num] += 1\n        else:\n            count_nums1[num] = 1\n    \n    # create a dictionary to store the counts of each number in nums2\n    count_nums2 = {}\n    for num in nums2:\n        if num in count_nums2:\n            count_nums2[num] += 1\n        else:\n            count_nums2[num] = 1\n    \n    # compare the dictionaries and count the indices where the counts are the same\n    same_indices = []\n    for i in range(len(nums1)):\n        if count_nums1[nums1[i]] == count_nums2[nums2[i]]:\n            same_indices.append(i)\n    \n    return same_indices"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # initialize sum variable to 0\n    total = 0\n    # convert base to string\n    base_str = str(base)\n    # loop through each character in the string and add its value to the total\n    for digit in base_str:\n        total += int(digit)\n    # calculate the power of the sum and add it to the total\n    total *= power\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Initialize the sum to zero\n    total_sum = 0\n    # Convert the base to a string and then convert each character to an integer\n    base_str = str(base)\n    base_list = [int(digit) for digit in base_str]\n    # Iterate through each digit in the base and add it to the total sum to the specified power\n    for digit in base_list:\n        total_sum += digit ** power\n    # Return the total sum\n    return total_sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Convert the base to a string\n    base_str = str(base)\n    \n    # Initialize the sum to 0\n    sum = 0\n    \n    # Loop through each digit of the base string\n    for digit in base_str:\n        # Convert the digit to an integer and add it to the sum\n        sum += int(digit)\n    \n    # Calculate the sum to the power of the power argument\n    sum_to_power = sum ** power\n    \n    # Return the result\n    return sum_to_power"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # convert the base to a string\n    base_str = str(base)\n\n    # initialize a variable to store the sum\n    total_sum = 0\n\n    # loop through each digit in the base string\n    for digit in base_str:\n        # convert the digit to an integer and add it to the total sum\n        total_sum += int(digit) ** power\n\n    # return the total sum\n    return total_sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # convert the base to a string\n    base_str = str(base)\n    # initialize a variable to store the sum of digits\n    digit_sum = 0\n    # loop through each digit of the base string\n    for digit in base_str:\n        # convert the digit to an integer and add it to the digit_sum\n        digit_sum += int(digit)\n    # calculate the sum of digits to the specified power and return the result\n    return digit_sum ** power"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    \"\"\"\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    \"\"\"\n    result = 0\n    while power > 0:\n        digit = base % 10\n        result += digit\n        power -= 1\n        base //= 10\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # convert the base to a string\n    base_str = str(base)\n\n    # initialize the sum to 0\n    sum = 0\n\n    # loop through the digits of the base string\n    for digit in base_str:\n        # convert the digit to an integer\n        digit_int = int(digit)\n\n        # add the digit raised to the power to the sum\n        sum += digit_int ** power\n\n    # return the sum\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    while power > 0:\n        remainder = base % 10\n        result += remainder\n        base //= 10\n        power -= 1\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # convert base to a string and remove any non-digit characters\n    base_str = ''.join(filter(str.isdigit, str(base)))\n    \n    # calculate the sum of digits raised to the power of the power argument\n    digit_sum = sum([int(digit)**power for digit in base_str])\n    \n    # return the digit sum\n    return digit_sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    \"\"\"\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    \"\"\"\n\n    # Convert base to a string and reverse it\n    base_str = str(base)[::-1]\n\n    # Initialize the sum variable to 0\n    sum_digits = 0\n\n    # Loop through each digit of the base string and add it to the sum variable\n    for digit in base_str:\n        sum_digits += int(digit)\n\n    # Calculate the sum of digits to the power of the power variable\n    result = sum_digits ** power\n\n    # Return the result\n    return result"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    results = re.findall(pattern, text1)\n    return results"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_quotation(text):\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    This function will extract values between quotation marks \" \" of the given string.\n    '''\n    # using regular expression to extract the values between quotation marks\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text1)\n\n    # checking if there are any matches or not\n    if len(matches) > 0:\n        # iterating through the matches and printing each value\n        for match in matches:\n            print(match)"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_quotation(text):\n    pattern = r'\"[^\"]*\"'\n    matches = re.findall(pattern, text)\n    return matches\n\ntext1 = \"I am a string with quotation marks \"Hello, world!\"\". I am a string with another quotation mark '. How about some more \"quotes\"?\" and some'single quotes'?\"\nprint(extract_quotation(text1))"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    match = re.findall(pattern, text1)\n    return match"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'(?<=^|>)[^\\s]*(?=(\"|$))'\n    return re.findall(pattern, text)"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_quotation(text1):\n    pattern = r'\"[^\"]*\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_quotation(text):\n    \"\"\"\n    This function extracts values between quotation marks \" \" of the given string.\n    \"\"\"\n    # use regular expression to extract the values between quotation marks\n    pattern = r'\"([^\"]*)\"'\n    # use re.findall() method to get a list of all the matches\n    values = re.findall(pattern, text)\n    return values"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'(?<=\")\\w+(?:(?![\"])\\w+)*(?=\")'\n    matches = re.findall(pattern, text1)\n    return matches\n"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result = (test_tup[0]*test_tup[1],)\n    for i in range(2, N):\n        result = (result[0] * test_tup[i],) + result\n    return result"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    # convert the input tuple to a list\n    input_list = list(test_tup)\n    # initialize the output list with the first element of the input list\n    output_list = [input_list[0]]\n    # iterate over the remaining elements of the input list\n    for i in range(1, len(input_list)):\n        # multiply the current element with the previous element and add the result to the output list\n        output_list.append(input_list[i] * output_list[-1])\n    # convert the output list to a tuple and return it\n    return tuple(output_list)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result_tup = (test_tup[0]*test_tup[1],)\n    for i in range(2, N):\n        result_tup = (result_tup[0]*test_tup[i],) + result_tup\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) // 2\n    result_tup = ()\n    for i in range(N):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # Initialize an empty tuple to hold the result\n    result_tup = ()\n    # Loop through each element of the input tuple\n    for i in range(len(test_tup)-1):\n        # Add the product of the current element and the next element to the result tuple\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    # Add the final product of the last two elements to the result tuple\n    result_tup += (test_tup[-1] * test_tup[-2],)\n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) // 2\n    result_tup = tuple([test_tup[i] * test_tup[i+1] for i in range(N)])\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # Initialize a new tuple of length N to hold the result\n    result_tup = ()\n    \n    # Loop through the input tuple, multiplying each element with the next one and adding the result to the result tuple\n    for i in range(len(test_tup)-1):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    \n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result_tup = ()\n    for i in range(N):\n        product = test_tup[i] * test_tup[i+1]\n        result_tup += (product,)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup) - 1):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    result = tuple([test_tup[i] * test_tup[i+1] for i in range(N)])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [a + b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [x+y for x,y in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [x+y for x,y in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [x+y for x,y in zip(lst1,lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [a + b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_list(lst1,lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [a+b for a,b in zip(lst1,lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    # initialize an empty list to store the sum of the two input lists\n    result = []\n\n    # loop through each element of the first input list\n    for i in range(len(lst1)):\n        # add the corresponding element of the second input list to the first element of the result list\n        result.append(lst1[i] + lst2[i])\n\n    # return the result list\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [a+b for a,b in zip(lst1,lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Remove consecutive duplicates of a given list.\n    '''\n    return list(set(nums))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def consecutive_duplicates(nums):\n    result = []\n    for key, group in groupby(nums):\n        if key == len(group) - 1:\n            result.append(key + 1)\n        elif key < len(group) - 1:\n            result.append(group[key+1])\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # groupby function groups the elements of a sequence based on a key function\n    result = []\n    prev_num = None\n    for num, group in groupby(nums):\n        if prev_num is None or prev_num + 1!= num:\n            result.append(num)\n        prev_num = num\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(groupby(nums))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(accumulate(groupby(sorted(nums), lambda x: x))))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    result = []\n    for key, group in groupby(sorted(nums)):\n        if key == nums[0]:\n            result.extend(group)\n        elif key!= nums[0]:\n            result.append(nums[0])\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Create a generator object for the list\n    nums_gen = groupby(nums)\n    \n    # Iterate through the generator object and remove consecutive duplicates\n    consecutive_nums = []\n    for group in nums_gen:\n        if len(list(group)) > 1:\n            consecutive_nums.append(list(group)[0])\n        else:\n            consecutive_nums.extend(list(group))\n    \n    return consecutive_nums"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Remove consecutive duplicates of a given list.\n    '''\n    return list(groupby(nums))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Create a generator of consecutive duplicates\n    duplicates = (x for x, y in groupby(nums) if len(list(y)) > 1)\n    \n    # Convert the generator to a list\n    return list(duplicates)"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [num for group in groupby(sorted(nums)) if not group[1]]"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi * r ** 2 * h"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = math.pi * r**2 * h\n    return area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return 2*math.pi*r*h\n"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    \n    # Calculate the lateral surface area of a cone\n    area = math.pi * r**2 * h / 3\n    \n    return area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    lateral_surface = 2 * math.pi * r * h\n    print(\"The lateral surface area of the cone is:\", lateral_surface)"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s = 2 * math.pi * r * h\n    return s"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # calculate the base area of the cone\n    base_area = math.pi * r**2\n    # calculate the height of the cone\n    height = 2 * h\n    # calculate the lateral surface area of the cone\n    lateral_area = 2 * math.pi * r * height\n    # return the lateral surface area\n    return lateral_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Formula to calculate lateral surface area of a cone\n    lateral_surface_area = (math.pi*(r**2)*h)/3\n    \n    return lateral_surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s = 0.5 * r * (math.sin(math.pi / 3)) ** 2\n    return s"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n\n    area = math.pi * r * r * h\n    return area"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef replace_specialchar(text):\n    \"\"\"\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    \"\"\"\n    pattern = r'[^\\w\\s]'\n    colon_pattern = r'[^\\w\\s:]'\n    return re.sub(pattern, '', text).replace(',', ':').replace('.', ':')"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_specialchar(text):\n    # Replace spaces with a colon\n    text = re.sub(r'\\s+', ':', text)\n\n    # Replace commas with a semicolon\n    text = re.sub(r',', ';', text)\n\n    # Replace dots with a dot\n    text = re.sub(r'\\.', '.', text)\n\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Define regular expression pattern for finding all occurrences of spaces, commas, or dots\n    pattern = r'[\\s,.]+'\n    # Replace all occurrences of spaces, commas, or dots with a colon\n    text = re.sub(pattern, ':', text)\n    # Return the modified text\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    special_chars = re.compile(r'[\\s.,]')\n    text = special_chars.sub(':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Define a regular expression pattern to match any character that is not a space or comma\n    pattern = r'[^,.]'\n    # Replace all occurrences of the pattern with a colon\n    text = re.sub(pattern, ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    special_characters = r'[,\\. ]'\n    return re.sub(special_characters, ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef replace_specialchar(text):\n    \"\"\"\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    \"\"\"\n    pattern = re.compile(r'[\\s,\\.]')\n    text = pattern.sub(':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef replace_specialchar(text):\n    \"\"\"\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    \"\"\"\n    pattern = re.compile(r'[\\s,\\.]')\n    return pattern.sub(':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'[,.]'\n    text = re.sub(pattern, ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # use regex to replace special characters with a colon\n    pattern = re.compile(r'[\\s,.]+')\n    text = pattern.sub(':', text)\n    return text"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    # Find the index of the first occurrence of x in A using binary search\n    left = 0\n    right = len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            # If the mid element is x, return the index\n            return mid\n        elif A[mid] < x:\n            # If the mid element is smaller than x, then the first occurrence of x is at the right side of mid\n            left = mid + 1\n        else:\n            # If the mid element is greater than x, then the first occurrence of x is at the left side of mid\n            right = mid - 1\n    # If the loop completes without finding x, return -1 (indicating that x was not found in A)\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # Initialize variables\n    first_occurrence = -1\n    \n    # Traverse through the array\n    for i in range(len(A)):\n        # If current element is equal to x, set first_occurrence to i and break out of the loop\n        if A[i] == x:\n            first_occurrence = i\n            break\n    \n    # Return the index of the first occurrence of x\n    return first_occurrence"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    i = 0\n    n = len(A)\n\n    while i < n and A[i] < x:\n        i += 1\n\n    if i == n or A[i]!= x:\n        return -1\n    else:\n        while i < n and A[i] == x:\n            i += 1\n\n        return i"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Find the index of the first occurrence of a given number in a sorted array.\n\n    Parameters:\n    A (list): A sorted list of integers.\n    x (int): The integer to search for in the array.\n\n    Returns:\n    int: The index of the first occurrence of x in A, or -1 if x is not found.\n    \"\"\"\n    left, right = 0, len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            return mid\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    left, right = 0, len(A) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if A[mid] == x:\n            left = mid + 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return left if left < len(A) and A[left] == x else -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # find the index of the first occurrence of x in A\n    index = 0\n    while index < len(A) and A[index] < x:\n        index += 1\n    # if x is not found, return -1\n    if index == len(A) or A[index]!= x:\n        return -1\n    # otherwise, return the index of the first occurrence of x in A\n    return index"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    i = 0\n    while i < len(A) and A[i] < x:\n        i += 1\n    if i == len(A) or A[i]!= x:\n        return -1\n    else:\n        return i"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    This function takes in a sorted array A and a number x and returns the index of the first occurrence of x in A.\n\n    If x is not in A, the function returns -1.\n    \"\"\"\n    left = 0\n    right = len(A) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if A[mid] == x:\n            return mid\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low = 0\n    high = len(A) - 1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        \n        if A[mid] == x:\n            if mid == 0 or A[mid - 1]!= x:\n                return mid\n            else:\n                high = mid - 1\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    \n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left, right = 0, len(A) - 1\n    \n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        if A[mid] == x:\n            # Check if x is the first occurrence of x\n            if mid == 0 or A[mid - 1]!= x:\n                return mid\n            \n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return -1"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    dp = [0]*(n+1)\n    dp[0] = 0\n    dp[1] = arr[0]\n    \n    for i in range(2, n+1):\n        dp[i] = dp[i-1] + arr[i-1]*dp[i-2]\n        \n    return dp[n]"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n    if n == 1:\n        return arr[0]\n    \n    prod = 1\n    result = 0\n    for i in range(n):\n        prod *= arr[i]\n        result += prod\n    return result"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n\n    n = len(arr)\n\n    # Calculate the product of each sublist\n    product_list = [1] * n\n    for i in range(1, n):\n        product_list[i] *= arr[i-1]\n\n    # Initialize variables for sum of products and sum of squares\n    subarray_sum = 0\n    subarray_square_sum = 0\n\n    # Calculate sum of products of subarrays of length i\n    for i in range(1, n+1):\n        for j in range(n-i+1):\n            subarray_sum += product_list[j]*product_list[j+i-1]\n            subarray_square_sum += (product_list[j] + product_list[j+i-1])**2\n\n    # Calculate sum of products of subarrays of length i and length j\n    for i in range(1, n+1):\n        for j in range(1, n-i+1):\n            for k in range(j, j+i):\n                subarray_sum += product_list[k]*product_list[k+i-1]*product_list[k+i]\n                subarray_square_sum += (product_list[k] + product_list[k+i-1] + product_list[k+i])**2\n\n    # Calculate sum of products of subarrays of length i and length j, k and l\n    for i in range(1, n+1):\n        for j in range(1, n-i+1):\n            for k in range(1, n-j+1):\n                for l in range(j, j+i):\n                    subarray_sum += product_list[l]*product_list[l+i-1]*product_list[l+i]*product_list[l+j-1]*product_list[l+j]\n                    subarray_square_sum += (product_list[l] + product_list[l+i-1] + product_list[l+i] + product_list[l+j-1] + product_list[l+j])**2\n\n    # Return the sum of products of subarrays\n    return subarray_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    ans = 0\n\n    # Create a list of products for each prefix sum\n    prefix_prod = [1] * (n + 1)\n    for i in range(1, n + 1):\n        prefix_prod[i] = prefix_prod[i - 1] * arr[i - 1]\n\n    # Initialize variables to store the sum of products for subarrays\n    prefix_sum = 0\n    max_prefix_sum = 0\n\n    # Iterate through the subarrays\n    for i in range(n):\n        # Update the prefix sum of the subarray\n        prefix_sum = prefix_sum - arr[i] + prefix_prod[i + 1]\n\n        # Update the maximum prefix sum\n        max_prefix_sum = max(max_prefix_sum, prefix_sum)\n\n        # Update the sum of products for the current subarray\n        ans += max_prefix_sum\n\n    return ans"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    \n    # Initialize a variable to store the sum of products of sublists\n    total_sum = 0\n    \n    # Initialize a variable to store the cumulative sum of products of sublists\n    current_sum = 1\n    \n    # Loop through the list\n    for i in range(len(arr)):\n        \n        # Update the cumulative sum of products of sublists\n        current_sum *= arr[i]\n        \n        # Update the sum of products of sublists\n        total_sum += current_sum\n        \n    # Return the sum of products of sublists\n    return total_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    # Create an empty list to store products of subarrays\n    prods = [0]*(n+1)\n    # Initialize the first product as 1\n    prods[0] = 1\n    # Traverse through the array and calculate the products of subarrays\n    for i in range(1,n+1):\n        prods[i] = prods[i-1]*arr[i-1]\n    # Initialize the sum of products as 0\n    sum_of_prods = 0\n    # Traverse through the array again and add the products of subarrays to the sum of products\n    for i in range(n):\n        sum_of_prods += prods[i]\n    return sum_of_prods"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    dp = [0] * (n+1)\n    dp[0] = 0\n    dp[1] = 0\n\n    for i in range(1, n+1):\n        dp[i] = dp[i-1] + arr[i-1] * arr[i-1]\n\n    for i in range(1, n+1):\n        for j in range(i, n+1):\n            dp[j] = max(dp[j], dp[j-i] + dp[i-1])\n\n    return dp[n]"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    result = []\n\n    # Find the maximum subarray sum\n    max_sum = float('-inf')\n    for i in range(n):\n        max_sum = max(max_sum, arr[i])\n\n    # Initialize the result list\n    for i in range(n):\n        result.append(0)\n\n    # Calculate the product of each subarray\n    for i in range(n):\n        for j in range(i, n):\n            result[i] += max_sum * arr[j]\n\n    # Calculate the sum of products of all subarrays\n    total_prod = 0\n    for i in range(n):\n        total_prod += result[i]\n\n    return total_prod"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    # create a new list for storing products of all possible sublists\n    products = []\n    # initialize sum to 0\n    sum = 0\n    # iterate through all possible sublists of length 1 to n\n    for i in range(1, n+1):\n        # iterate through all possible sublists of length i\n        for j in range(n-i+1):\n            # calculate product of sublist\n            product = 1\n            for k in range(i):\n                product *= arr[j+k]\n            # add product to sum\n            sum += product\n            # add product to products list\n            products.append(product)\n    # return sum of products\n    return sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    arr = [arr[i] * (i+1) for i in range(n)]\n    arr.append(0)\n    dp = [0] * (n+1)\n    for i in range(n+1):\n        for j in range(i, n+1):\n            dp[j] += arr[j] - arr[i-1]\n    ans = 0\n    for i in range(n+1):\n        for j in range(i, n+1):\n            ans += dp[j] * (j-i+1)\n    return ans"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    \n    # Find the number of bits in the binary representation of n\n    num_bits = len(bin(n)[2:])\n    \n    # Loop through each bit in the binary representation of n\n    for i in range(num_bits):\n        \n        # If the current bit is not the first or last bit, toggle it\n        if i!= 0 and i!= num_bits-1:\n            n = n ^ (1 << i)\n    \n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # initialize variables\n    start_index = 1\n    end_index = len(bin(n)[2:]) - 2\n\n    # create a string with 0s and 1s\n    binary_string = bin(n)[2:][start_index:end_index]\n\n    # convert the string to a list of 0s and 1s\n    bit_list = [int(bit) for bit in binary_string]\n\n    # toggle the bits\n    for i in range(len(bit_list)):\n        if bit_list[i] == 1:\n            bit_list[i] = 0\n        else:\n            bit_list[i] = 1\n\n    # convert the list back to a string\n    binary_string_toggled = \"\".join([str(bit) for bit in bit_list])\n\n    # convert the toggled string back to an integer\n    n_toggled = int(binary_string_toggled, 2)\n\n    return n_toggled"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit.\n    \"\"\"\n    # initialize two variables to hold the first and last bits\n    first_bit = n & 1\n    last_bit = n & (1 << (32 - 1))\n    \n    # set the first and last bits to 1 and 0 respectively\n    n = n ^ (first_bit | last_bit)\n    \n    # toggle the middle bits by shifting the first_bit and last_bit to the right by 1 bit\n    n = n ^ (first_bit << 1) ^ (last_bit >> 1)\n    \n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_middle_bits(n):\n    # Get the binary representation of the input number\n    n_bin = bin(n)[2:]\n    # Get the length of the binary representation of the input number\n    n_bin_length = len(n_bin)\n\n    # Initialize variables for storing the output number\n    output_bin = \"\"\n\n    # Toggle the middle bits of the binary representation of the input number\n    for i in range(0, n_bin_length-2):\n        if i % 2 == 0:\n            output_bin += '0'\n        else:\n            output_bin += '1'\n\n    # Convert the binary representation of the output number to an integer and return it\n    return int(output_bin, 2)"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # get the number of bits\n    num_bits = bin(n).lstrip('0b').zfill(32)[-1:].count('1')\n    # get the first and last bits of the number\n    first_bit = bin(n).lstrip('0b')[0]\n    last_bit = bin(n).lstrip('0b')[num_bits-1]\n    # get the middle bits\n    middle_bits = bin(n).lstrip('0b')[1:-1]\n    # toggle middle bits\n    for i in range(len(middle_bits)):\n        if middle_bits[i] == '1':\n            middle_bits[i] = '0'\n        else:\n            middle_bits[i] = '1'\n    # create the new number without middle bits\n    new_number = bin(int(first_bit + middle_bits + last_bit, 2))[2:]\n    # convert the new number to an integer\n    new_number = int(new_number, 2)\n    # return the new number\n    return new_number"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    \n    # Convert the input number to binary string\n    binary_str = bin(n)[2:]\n\n    # Remove the first and last bits and split the string into individual bits\n    middle_bits = binary_str[1:-1]\n\n    # Convert the middle bits to decimal integer\n    middle_int = int(middle_bits, 2)\n\n    # Toggle the bits except the first and the last bit\n    toggled_middle_int = middle_int ^ (middle_int ^ (middle_int >> 1) ^ (middle_int >> 2) ^ (middle_int >> 3) ^ (middle_int >> 4) ^ (middle_int >> 5) ^ (middle_int >> 6) ^ (middle_int >> 7))\n\n    # Convert the toggled middle integer back to binary string and concatenate with the first and last bits\n    toggled_binary_str = bin(toggled_middle_int)[2:].zfill(len(middle_bits))\n\n    # Convert the binary string back to decimal integer and return it\n    return int(toggled_binary_str, 2)"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    first_bit = n & ~(1 << 31)\n    second_bit = n & ~(1 << 30)\n    return second_bit | first_bit"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    \"\"\"\n    first_bit = n & 1\n    last_bit = n & (1 << (8 * sizeof(n) - 1))\n    return n ^ (first_bit ^ last_bit)"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n\n    # Convert the given number to binary\n    binary_num = bin(n)[2:]\n\n    # Find the first and last bits of the binary number\n    first_bit = binary_num[0]\n    last_bit = binary_num[-1]\n\n    # Toggle the first and last bits of the binary number\n    toggled_first_bit = '0' if first_bit == '1' else '1'\n    toggled_last_bit = '0' if last_bit == '1' else '1'\n\n    # Find the decimal value of the toggled first and last bits\n    toggled_first_decimal = int(toggled_first_bit, 2)\n    toggled_last_decimal = int(toggled_last_bit, 2)\n\n    # Convert the toggled first and last bits to binary\n    toggled_first_binary = bin(toggled_first_decimal)[2:]\n    toggled_last_binary = bin(toggled_last_decimal)[2:]\n\n    # Combine the toggled first and last bits with the remaining binary number\n    middle_bits = toggled_first_binary + binary_num[1:-1] + toggled_last_binary\n\n    # Convert the middle bits to decimal\n    middle_decimal = int(middle_bits, 2)\n\n    # Return the modified decimal number\n    return middle_decimal"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Get the last two bits of the number\n    last_two_bits = n & 3\n    \n    # Clear the last two bits\n    n &= ~(3 << last_two_bits)\n    \n    # Get the middle two bits\n    middle_two_bits = n & 3\n    \n    # Set the middle two bits to opposite values\n    n |= middle_two_bits << last_two_bits\n    \n    # Return the updated number\n    return n"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_left(a, x)\n    return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    return index if index!= len(a) and a[index] == x else index - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    if index == 0:\n        return 0\n    elif index == len(a):\n        return index\n    elif a[index-1] < x:\n        return index-1\n    else:\n        return index\n"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    return bisect.bisect_left(a, x)"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    This function takes a sorted list a and a value x and returns the index of the left insertion point for x in the list.\n    \"\"\"\n    i = bisect.bisect_left(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    elif i == 0:\n        return i\n    else:\n        return i - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    left = bisect.bisect_left(a, x)\n    if left == len(a) or a[left]!= x:\n        left += 1\n    return left"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    if index == len(a):\n        return index\n    elif a[index] == x:\n        return index\n    else:\n        return index - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order. \n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. \n    '''\n    index = bisect.bisect_left(a, x)\n    if index == 0:\n        return 0\n    elif index == len(a):\n        return len(a)\n    else:\n        return index - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    else:\n        return bisect.bisect_left(a[:i], x)"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    if re.match(regex, string): \n        return True\n    else: \n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.search(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re \n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re "
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string): \n        return True \n    else: \n        return False "
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re \n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    pattern = re.compile(regex)\n    result = pattern.match(string)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re \n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    pattern = re.compile(regex)\n    if pattern.match(string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (1/n) * (geometric_sum(n-1))"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    \"\"\"\n\n    def geometric_sum_helper(n):\n        if n == 1:\n            return 1\n        else:\n            return n * geometric_sum_helper(n - 1)\n\n    return geometric_sum_helper(n - 1)\n"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1.\n    https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)\n\nprint(geometric_sum(5))"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Write a function to calculate the geometric sum of n-1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    # base case\n    if n == 1:\n        return 1\n    \n    # recursive case\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    Write a python function to find the index of the smallest triangular number with n digits.\n    \"\"\"\n    triangular_num = 0\n    triangular_num_digits = 1\n\n    while math.log10(triangular_num) < n:\n        triangular_num = triangular_num + triangular_num_digits\n        triangular_num_digits = triangular_num_digits + 1\n\n    triangular_num_index = math.ceil(math.log10(triangular_num))\n\n    return triangular_num_index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math \n\ndef find_Index(n): \n    # Function to find the smallest triangular number with n digits\n    def smallest_triangular(n):\n        # initialize variables\n        a, b = 1, 1\n        c = 1\n        i = 1\n        \n        # calculate the first n terms of the series\n        while i <= n:\n            a, b = b, c\n            c = a + b\n            i += 1\n        \n        # return the smallest triangular number with n digits\n        return c\n    \n    # Find the smallest triangular number with n digits\n    triangular = smallest_triangular(n)\n    \n    # Function to find the index of the smallest triangular number with n digits\n    def index(triangular):\n        # initialize variables\n        a, b = 1, 1\n        c = 1\n        i = 1\n        \n        # calculate the first n terms of the series\n        while c < triangular:\n            a, b = b, c\n            c = a + b\n            i += 1\n        \n        # return the index of the smallest triangular number with n digits\n        return i\n    \n    # return the index of the smallest triangular number with n digits\n    return index(triangular)"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    max_triangular = 10**n\n    min_triangular = 1\n\n    for i in range(max_triangular):\n        triangular = min_triangular + i\n        if triangular % 10 == 0:\n            return i + 1\n        min_triangular = triangular"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    for i in range(n):\n        triangular_number = int(math.pow(i+1, 2) / 5) + 1\n        if triangular_number.bit_length() == n:\n            return i + 1\n    return -1"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. \n    https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    \n    # Function to count the number of digits in a number\n    def count_digits(num):\n        count = 0\n        while num!= 0:\n            count += 1\n            num //= 10\n        return count\n    \n    # Function to find the smallest triangular number with n digits\n    def find_smallest_triangular(n):\n        count = count_digits(n)\n        smallest = 0\n        for i in range(1, 10**count):\n            triangular = i*i*i\n            if triangular > n:\n                break\n            smallest = max(smallest, triangular)\n        return smallest\n    \n    # Find the index of smallest triangular number with n digits\n    index = count_digits(n)\n    smallest_triangular = find_smallest_triangular(n)\n    return index, smallest_triangular"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Index(n): \n    # Define a function to find the number of digits in a number \n    def count_digits(num): \n        count = 0 \n        while num!= 0: \n            count += 1 \n            num //= 10 \n        return count\n\n    # Find the number of digits in n \n    digit_count = count_digits(n)\n\n    # Define a function to check if a number is a triangular number \n    def is_triangular(num): \n        for i in range(1, digit_count): \n            if num % (10**i)!= 0: \n                return False \n        return True\n\n    # Define a function to find the index of the smallest triangular number with n digits \n    def find_index(num): \n        triangular_num = num \n        index = 1\n        while is_triangular(triangular_num): \n            index += 1 \n            triangular_num *= 10**(digit_count-1)\n        return index\n\n    # Find the index of the smallest triangular number with n digits \n    return find_index(n)"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n\n    def is_prime(num): \n        if num < 2: \n            return False \n        for i in range(2, int(math.sqrt(num))+1): \n            if num % i == 0: \n                return False \n        return True \n\n    def is_valid(num, n): \n        while num > 0: \n            if num % 10 == 0 or num % 10 > n: \n                return False \n            num //= 10 \n        return True \n\n    def smallest_triangular_with_n_digits(n): \n        if n == 1: \n            return 1 \n\n        start = 10**(n-1) \n        end = 10**(n-1) - 1 \n\n        while end < 10**(n-1) + 9: \n            start = end + 1 \n            end = start * 10**(n-1) - 1 \n\n        while not is_prime(end) or not is_prime(start): \n            start += 1 \n            end = start * 10**(n-1) - 1 \n\n        return start \n\n    index = smallest_triangular_with_n_digits(n) - 1\n    while not is_valid(index, n): \n        index -= 1\n\n    return index "
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef find_Index(n):\n    def triangular(n):\n        t = 0\n        for i in range(1, n+1):\n            t += i\n        return t\n\n    def count_digits(n):\n        count = 0\n        while n:\n            count += 1\n            n //= 10\n        return count\n\n    def is_triangular(n):\n        return n == triangular(count_digits(n))\n\n    t = 0\n    i = 2\n    while i <= 10**n:\n        if is_triangular(i):\n            t = i\n        i += 1\n\n    if t == 0:\n        raise ValueError(\"No triangular number with n digits found.\")\n\n    return t"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    triangular_numbers = []\n    for i in range(1, 10**n+1):\n        triangular_numbers.append(i*(10**n-i))\n    index = min(range(len(triangular_numbers)), key=lambda x: triangular_numbers[x])\n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    \"\"\"\n    # Calculate the sum of digits of n\n    sum_of_digits = sum(int(digit) for digit in str(n))\n\n    # Initialize variables\n    index = 0\n    triangular_number = 0\n\n    # Loop until triangular number has n digits\n    while len(str(triangular_number)) < n:\n        # Calculate the next triangular number\n        triangular_number = (index * (index + 1)) // 2\n\n        # Check if the triangular number has n digits\n        if len(str(triangular_number)) == n:\n            # Calculate the sum of digits of the triangular number\n            triangular_sum_of_digits = sum(int(digit) for digit in str(triangular_number))\n\n            # Check if the triangular number is a valid triangular number with the required sum of digits\n            if triangular_sum_of_digits == sum_of_digits:\n                # Return the index of the triangular number\n                return index\n\n        index += 1\n\n    # If the loop completes without finding a triangular number with n digits, return -1\n    return -1"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    if len(test_tup) % 2!= 0:\n        return \"The tuple should have an even length\"\n\n    result_dict = {}\n\n    for i in range(0, len(test_tup), 2):\n        result_dict[test_tup[i]] = test_tup[i+1]\n\n    return result_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    dict_tup = {}\n    for i in range(0, len(test_tup)-1, 2):\n        key = test_tup[i]\n        val = test_tup[i+1]\n        dict_tup[key] = val\n    return dict_tup"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. \n    https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # Create an empty dictionary\n    my_dict = {}\n    # Iterate over the tuple\n    for i in range(len(test_tup)):\n        # Append the current element to the key\n        key = test_tup[i]\n        # Append the next element to the value\n        value = test_tup[i+1]\n        # Append the key-value pair to the dictionary\n        my_dict[key] = value\n    # Return the dictionary\n    return my_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    # Initialize an empty dictionary\n    result_dict = {}\n    # Loop through the tuple\n    for i in range(0, len(test_tup), 2):\n        # Add the current element to the dictionary as a key and the next element as a value\n        result_dict[test_tup[i]] = test_tup[i+1]\n    # Return the final dictionary\n    return result_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. \n    \"\"\"\n    return dict(zip(test_tup, test_tup[1:]))"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    key_list = []\n    value_list = []\n    for i in range(len(test_tup)):\n        key_list.append(test_tup[i])\n        if i < len(test_tup) - 1:\n            value_list.append(test_tup[i+1])\n    return dict(zip(key_list, value_list))"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    # Initialize an empty dictionary\n    result_dict = {}\n    # Loop through the tuple and append the values to the dictionary\n    for i in range(0, len(test_tup), 2):\n        result_dict[test_tup[i]] = test_tup[i+1]\n    # Return the resulting dictionary\n    return result_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    test_dict = {}\n    for i in range(0, len(test_tup)-1, 2):\n        test_dict[test_tup[i]] = test_tup[i+1]\n    return test_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    # Initialize an empty dictionary\n    my_dict = {}\n    # Iterate through the tuple using zip() function\n    for i, j in zip(test_tup, test_tup[1:]):\n        # Assign the i-th element of the tuple to the key and j-th element to the value of the dictionary\n        my_dict[i] = j\n    # Return the final dictionary\n    return my_dict\n"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    # Convert the tuple to a dictionary\n    test_dict = {}\n    for i in range(0, len(test_tup), 2):\n        test_dict[test_tup[i]] = test_tup[i+1]\n    return test_dict"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Characters_Same(s):\n    '''\n    This function takes a string as input and returns True if all the characters in the string are the same, False otherwise.\n    '''\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 1:\n        return True\n    elif s[0] == s[-1]:\n        return all_Characters_Same(s[1:-1])\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Write a python function to check whether all the characters are same or not.\n    \"\"\"\n    # convert the string to a list of characters\n    chars = list(s)\n\n    # check if all the characters in the list are the same\n    if len(chars) > 1 and chars[0] == chars[-1]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # check if the string is empty\n    if not s:\n        return True\n    # convert the string to a list of characters\n    lst = list(s)\n    # check if all the characters in the list are the same\n    if lst.count(lst[0]) == len(lst):\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if s == s[0]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 1:\n        return True\n    else:\n        return s[0] == s[-1] and all_Characters_Same(s[1:-1])"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # convert the string to a list\n    lst = list(s)\n    # compare the first character with the rest of the characters\n    for i in range(1, len(lst)):\n        if lst[i]!= lst[0]:\n            return False\n    # if all characters are same, return True\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Characters_Same(s):\n    '''\n    This function takes a string s as input and returns True if all the characters in s are same, else it returns False.\n    '''\n    for i in range(len(s)):\n        if s[i]!= s[0]:\n            return False\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0:\n        return True\n    \n    elif len(s) == 1:\n        return False\n    \n    elif s[0]!= s[1]:\n        return False\n    \n    else:\n        return all_Characters_Same(s[1:])"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (1/6) * side ** 2\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (1/3)*side**2"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = 0.5 * side ** 2\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (1/6) * side ** 3\n"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    base = side / 2\n    height = side / 3\n    side = side / 4\n    \n    return math.sqrt(3) / 6 * (base ** 2 + height ** 2 + side ** 2)"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (1/6) * side ** 2\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    \"\"\"\n    Write a function to caluclate the area of a tetrahedron.\n    \"\"\"\n    half_perimeter = side / 2\n    area = math.sqrt(3) / 4 * half_perimeter * side * (side - half_perimeter)\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (1/3) * side * side * side\n    return area\n"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (1/6) * side**2 * math.sin(math.pi/3)\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (1/3) * side**2\n    return area"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    m %= n\n    list[m:], list[:m] = list[:m], list[m:]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    # Determine the length of the list\n    n = len(list)\n    # Check if the rotation number is within range\n    if m >= n:\n        return list\n    # Reverse the entire list\n    list = list[::-1]\n    # Reverse the first m items of the list\n    list = list[:m] + list[m:]\n    # Reverse the entire list again to obtain the final result\n    result = list[::-1]\n    return result"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    # calculate the number of times the list should be rotated\n    k = m % n\n    # if k is 0, then it means that all items have to be shifted to the left\n    if k == 0:\n        return list\n    # rotate the list by k items\n    for i in range(k):\n        list.insert(0, list.pop())\n    # return the rotated list\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    m = m % n\n    list[-m:] = list[:-m]\n    list[:m] = [list[i] for i in range(n - m, n)]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    m = m % n\n    list.extend(list[:m])\n    list[:m] = []\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    \"\"\"\n    n = len(list)\n    # If m is greater than or equal to n, then no rotation is needed\n    if m >= n:\n        return list\n    # If m is negative, then rotate m items to the left\n    elif m < 0:\n        m = n + m\n    # Initialize the index of the last element to be rotated\n    last_index = n - 1\n    # Iterate through the list from the last element to the first element\n    for i in range(n - 1, 0, -1):\n        # If the index is equal to m, then break out of the loop\n        if i == m:\n            break\n        # Swap the elements at the current index and the index before it\n        list[i], list[i - 1] = list[i - 1], list[i]\n    # Reverse the list from the last element to the first element\n    list[0], list[last_index] = list[last_index], list[0]\n    # Return the rotated list\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    m = m % n\n    list.extend(list[:m])\n    list = list[m:] + list[:m]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    if m == 0 or m == n:\n        return list\n    \n    # Find the index of the first element that is to be shifted\n    for i in range(n):\n        if i == m-1:\n            break\n        elif m > n-i-1:\n            m -= n-i-1\n    \n    # Find the last element of the first sublist\n    for i in range(n-m, n):\n        list[i] = list[i+m]\n    \n    # Reverse the remaining sublist\n    for i in range(m, n):\n        list[i] = list[i-m]\n    \n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    \"\"\"\n    n = len(list)\n    for i in range(n):\n        list[i], list[i+m] = list[i+m], list[i]"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rotate_right(lst, n):\n    \"\"\"\n    Rotate a list by n elements to the right direction.\n    \"\"\"\n    # check if list is empty\n    if not lst:\n        return lst\n    # length of the list\n    length = len(lst)\n    # calculate the number of times the list needs to be rotated\n    rotations = n % length\n    # if the number of rotations is zero, return the original list\n    if rotations == 0:\n        return lst\n    # else, rotate the list and return it\n    else:\n        # calculate the new length of the rotated list\n        new_length = length - rotations\n        # create a new list with the first n elements of the original list and the remaining elements\n        new_list = lst[:new_length] + lst[rotations:]\n        # return the rotated list\n        return new_list"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    \"\"\"\n    Write a function to check if the given tuple has any none value or not.\n    \"\"\"\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for val in test_tup:\n        if val is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if any(i is None for i in test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    \"\"\"\n    Write a function to check if the given tuple has any none value or not.\n    \"\"\"\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    def is_divisible_by_digits(num):\n        \"\"\"\n        Helper function to check if a number is divisible by every digit it contains.\n        \"\"\"\n        return all(int(digit) % num == 0 for digit in str(num))\n    \n    return filter(is_divisible_by_digits, range(startnum, endnum+1))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return filter(lambda x: all(int(digit) % int(digit) == 0 for digit in str(x)), range(startnum, endnum+1))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum to endnum where every number is divisible by every digit it contains.\n    '''\n    # Define a lambda function to check if a number is divisible by a given digit\n    check_digit = lambda x, d: x % d == 0 if d!= 0 else True\n    \n    # Loop through all numbers within the given range\n    for num in range(startnum, endnum+1):\n        # Loop through each digit in the number\n        for digit in str(num):\n            # Check if the number is divisible by the current digit\n            if not check_digit(num, int(digit)):\n                # If not divisible, exit the loop and move on to the next number\n                break\n        else:\n            # If the number is divisible by all digits, print it\n            print(num)"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n\n    # Helper function to check if a number is divisible by a given digit\n    def is_divisible(num, digit):\n        return num % digit == 0\n\n    # Helper function to find all digits in a given number\n    def find_digits(num):\n        return sorted(set(str(num)))\n\n    # Use a lambda function to filter out numbers that don't have every digit divisible by 1\n    filtered_nums = list(filter(lambda num: all(map(lambda digit: is_divisible(num, digit), find_digits(num))), range(startnum, endnum+1)))\n\n    # Return the filtered numbers\n    return filtered_nums"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    # Function to check if a number is divisible by every digit it contains\n    def is_divisible_by_digits(num):\n        # Initialize an empty list to store the digits of the number\n        digits = []\n        while num > 0:\n            digits.append(num % 10)\n            num //= 10\n        # Loop through the digits and check if they are divisible by any of the numbers in the range\n        for i in range(10):\n            if any(digits.count(i) % len(str(i)) == 0 for j in range(startnum, endnum+1)):\n                return True\n        return False\n    \n    # Loop through the range and check if each number is divisible by every digit it contains\n    for i in range(startnum, endnum+1):\n        if is_divisible_by_digits(i):\n            print(i)"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return filter(lambda x: all(int(d) in str(x) for d in str(x)), range(startnum, endnum+1))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return list(filter(lambda num: all(d in str(num) for d in str(num)), range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return list(filter(lambda x: all(int(i) % int(d) == 0 for i in str(x)) for d in range(1,10) for x in range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum to endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    # Define a function to check if a number is divisible by every digit in its string representation\n    def is_divisible(num):\n        str_num = str(num)\n        return all(int(d) % int(str_num[i]) == 0 for i, d in enumerate(str_num))\n    \n    # Loop through the numbers in the given range\n    for num in range(startnum, endnum+1):\n        # Check if the number is divisible by every digit in its string representation\n        if is_divisible(num):\n            print(num)"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    def is_divisible_by_digit(num):\n        num_str = str(num)\n        digits_list = [int(d) for d in num_str]\n        for digit in digits_list:\n            if digit!= 0 and digit % num!= 0:\n                return False\n        return True\n    \n    for num in range(startnum, endnum + 1):\n        if is_divisible_by_digit(num):\n            print(num)"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef sector_area(r, theta):\n    \"\"\"\n    Write a function to find the area of a sector. The function takes the radius and angle of the sector as inputs. \n    If the angle is larger than 360 degrees, the function should return None.\n    \"\"\"\n    if theta > 360:\n        return None\n    else:\n        A = r * (math.sin(theta/2))**2\n        return A"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r * r\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r ** 2 * a / 360\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r**2 * a / 360\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n\n    if a > 360:\n        return None\n\n    # Convert angle to radians\n    a = a * (math.pi/180)\n\n    # Calculate area of sector\n    area = math.pi * r**2 * a\n\n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a <= 360:\n        area = math.pi * r**2 * a / 360\n        return area\n    else:\n        return None"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef sector_area(r,a):\n    \"\"\"\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    \"\"\"\n    if a > 360:\n        return None\n    area = math.pi * r ** 2 * a / 360\n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n\n    # Check if angle is between 0 and 360 degrees\n    if a < 0 or a > 360:\n        print(\"Invalid angle\")\n        return None\n\n    # Convert angle to radians\n    angle = math.radians(a)\n\n    # Calculate area\n    area = r * r * angle\n\n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n\n    # Check if angle is valid\n    if a > 360 or a < 0:\n        return None\n\n    # Calculate area of sector using formula A = pi * r^2 * (sin(theta/2))^2\n    theta = math.radians(a)\n    area = math.pi * r**2 * (math.sin(theta/2))**2\n\n    # Return area\n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        print(\"The angle is greater than 360 degrees. Returning None.\")\n        return None\n    else:\n        area = math.pi * r * r\n        print(\"The area of the sector is:\", area)"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z): \n    m = len(X) \n    n = len(Y) \n    p = len(Z) \n  \n    # Create a 3D array to store the length of LCS of all prefixes of X, Y and Z \n    L = [[[0 for j in range(p+1)] for i in range(m+1)] for k in range(n+1)] \n  \n    # Fill the 3D array in bottom up manner. \n    for i in range(1, m+1): \n        for j in range(1, n+1): \n            for k in range(1, p+1): \n                if X[i-1] == Y[j-1] and Z[k-1] == X[i-1]: \n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else: \n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i-1][j-1][k]) \n  \n    # Initialize a variable to store the length of LCS \n    lcs_len = L[m][n][p] \n  \n    # Create a list to store the LCS \n    lcs = [] \n  \n    # Fill the list of LCS in top down manner. \n    i = m \n    j = n \n    k = p \n    while i > 0 and j > 0 and k > 0: \n        if X[i-1] == Y[j-1] and Z[k-1] == X[i-1]: \n            lcs.append(X[i-1]) \n            i -= 1 \n            j -= 1 \n            k -= 1 \n        elif L[i-1][j][k] == L[i][j-1][k]: \n            i -= 1 \n        else: \n            j -= 1 \n    return ''.join(lcs) \n"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    \n    dp = [[0 for _ in range(o+1)] for _ in range(m+1)]\n    \n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, o+1):\n                if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n                    dp[i][j][k] = dp[i-1][j-1][k-1] + 1\n                else:\n                    dp[i][j][k] = max(dp[i-1][j][k], dp[i][j-1][k], dp[i][j][k-1])\n    \n    lcs = []\n    i = m\n    j = n\n    k = o\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n            lcs.append(X[i-1])\n            i -= 1\n            j -= 1\n            k -= 1\n        elif dp[i-1][j][k] == dp[i][j-1][k]:\n            i -= 1\n        else:\n            j -= 1\n    \n    return ''.join(reversed(lcs))"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z):\n    \"\"\"\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    \"\"\"\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n\n    L = [[0] * (p+1) for i in range(m+1)]\n\n    for i in range(1, m+1):\n        for j in range(1, p+1):\n            if X[i-1] == Y[j-1]:\n                L[i][j] = L[i-1][j-1] + 1\n            else:\n                L[i][j] = max(L[i-1][j], L[i][j-1])\n\n    result = []\n    i = m\n    j = p\n    while i > 0 and j > 0:\n        if X[i-1] == Y[j-1]:\n            result.append(X[i-1])\n            i -= 1\n            j -= 1\n        elif L[i-1][j] > L[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n\n    return ''.join(reversed(result))"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n    dp = [[0] * (p+1) for i in range(m+1)]\n\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(p+1):\n                if i == 0 or j == 0 or k == 0:\n                    dp[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    dp[i][j][k] = dp[i-1][j-1][k-1] + 1\n                else:\n                    dp[i][j][k] = max(dp[i-1][j][k], dp[i][j-1][k], dp[i][j][k-1])\n\n    # build the lcs string\n    lcs = ''\n    i = m\n    j = n\n    k = p\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n            lcs = X[i-1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif dp[i-1][j][k] == dp[i-1][j][k-1]:\n            i -= 1\n        elif dp[i][j-1][k] == dp[i-1][j][k]:\n            j -= 1\n        else:\n            k -= 1\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    p = len(Z) \n    # create a table to store lengths of LCS of subproblems \n    L = [[0] * (p + 1) for _ in range(m + 1)] \n\n    # Fill in the L[m+1][p+1] in bottom up fashion \n    for i in range(m + 1): \n        for j in range(p + 1): \n            if i == 0 or j == 0: \n                L[i][j] = 0 \n            elif X[i - 1] == Y[j - 1] and X[i - 1] == Z[i + j - 2]: \n                L[i][j] = L[i - 1][j - 1] + 1 \n            else: \n                L[i][j] = max(L[i - 1][j], L[i][j - 1]) \n\n    # Starting from the bottom-right corner of the table and tracing back, \n    # store the LCS of the subproblems in lcs[] \n    lcs = [] \n    i = m \n    j = p \n    while i > 0 and j > 0: \n        if X[i - 1] == Y[j - 1] and X[i - 1] == Z[i + j - 2]: \n            lcs.append(X[i - 1]) \n            i -= 1 \n            j -= 1 \n        elif L[i - 1][j] > L[i][j - 1]: \n            i -= 1 \n        else: \n            j -= 1 \n    lcs.reverse() \n    return ''.join(lcs) "
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z):\n    n = len(X)\n    m = len(Y)\n    p = [[0] * (m + 1) for _ in range(n + 1)]\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if X[i - 1] == Y[j - 1]:\n                p[i][j] = p[i - 1][j - 1] + 1\n            else:\n                p[i][j] = max(p[i - 1][j], p[i][j - 1])\n\n    lcs = \"\"\n    i = n\n    j = m\n    while i > 0 and j > 0:\n        if X[i - 1] == Y[j - 1]:\n            lcs = X[i - 1] + lcs\n            i -= 1\n            j -= 1\n        elif p[i - 1][j] > p[i][j - 1]:\n            i -= 1\n        else:\n            j -= 1\n\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n\n    # Create a table to store lengths of LCS of substrings \n    L = [[0] * (p + 1) for i in range(m + 1)] \n\n    # Fill in the LCS lengths in bottom up manner\n    for i in range(m + 1):\n        for j in range(n + 1):\n            for k in range(p + 1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n                elif X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]:\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                else:\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i - 1][j - 1][k - 1])\n\n    # Backtrack to find the LCS\n    i = m\n    j = n\n    k = p\n    lcs = []\n    while i > 0 and j > 0 and k > 0:\n        if X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]:\n            lcs.append(X[i - 1])\n            i -= 1\n            j -= 1\n            k -= 1\n        elif L[i - 1][j][k] == L[i][j - 1][k]:\n            i -= 1\n        elif L[i][j - 1][k] == L[i - 1][j - 1][k]:\n            j -= 1\n        else:\n            k -= 1\n\n    # Reverse the LCS to get the original string sequence\n    lcs.reverse()\n\n    return ''.join(lcs)"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence.\n    https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m, n, p = len(X), len(Y), len(Z)\n    T = [[0] * (p+1) for _ in range(m+1)]\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, p+1):\n                if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    T[i][j] = T[i-1][j-1] + 1\n                elif X[i-1] == Y[j-1]:\n                    T[i][j] = T[i-1][j]\n                elif X[i-1] == Z[k-1]:\n                    T[i][j] = T[i][j-1]\n                else:\n                    T[i][j] = max(T[i-1][j], T[i][j-1])\n    return T[m][n]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n\n    # Length of each string\n    m = len(X) \n    n = len(Y) \n    o = len(Z) \n\n    # create a table to store length of longest common subsequence ending at i,j,k \n    table = [[0 for j in range(o+1)] for i in range(m+1)] \n\n    # Fill table in bottom up manner \n    for i in range(1, m+1): \n        for j in range(1, n+1): \n            for k in range(1, o+1): \n                if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]: \n                    table[i][j] = table[i-1][j-1] + 1 \n                else: \n                    table[i][j] = max(table[i-1][j], table[i][j-1], table[i-1][k]) \n\n    # return the length of the longest common subsequence \n    return table[m][n]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z):\n    m, n, p = len(X), len(Y), len(Z)\n    dp = [[0] * (p+1) for _ in range(m+1)]\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, p+1):\n                if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    dp[i][j][k] = dp[i-1][j-1][k-1] + 1\n                else:\n                    dp[i][j][k] = max(dp[i-1][j][k], dp[i][j-1][k], dp[i][j][k-1])\n    return dp[m][n][p]"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # replace all non-alphanumeric characters with spaces\n    str1 = re.sub(r'[^\\w\\s]','', str1)\n    # split the string into words\n    words = str1.split()\n    # join the words with spaces after capital letters\n    words = [word if word[0].isupper() else'' + word for word in words]\n    # join the words with spaces\n    result =''.join(words)\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef capital_words_spaces(string):\n    words = re.findall(r'\\b\\w+\\b', string)\n    capitalized_words = []\n    for word in words:\n        if word[0].isupper():\n            capitalized_words.append(''+ word.lower())\n        else:\n            capitalized_words.append(word.lower())\n    return ''.join(capitalized_words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # create a regular expression pattern to match all words starting with capital letters\n    pattern = re.compile(r'\\b[A-Z][a-z]*\\b')\n    \n    # find all words in the given string that match the pattern\n    words = pattern.findall(str1)\n    \n    # loop through the list of words and add spaces between them\n    for i in range(len(words)-1):\n        words[i] = words[i] +''\n    \n    # join the list of words into a string and return it\n    return ''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # remove all non-alphanumeric characters from the string\n    str1 = re.sub(r'[^a-zA-Z0-9\\s]', '', str1)\n    \n    # split the string into words\n    words = str1.split()\n    \n    # capitalize the first letter of each word\n    words = [word.capitalize() for word in words]\n    \n    # join the words with spaces\n    result =''.join(words)\n    \n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Convert the string to lowercase and remove all special characters\n    str1 = re.sub(r'[^a-zA-Z0-9\\s]', '', str1).lower()\n    # Split the string into a list of words\n    words = str1.split()\n    # Loop through the list of words\n    for i in range(len(words)):\n        # Check if the current word starts with a capital letter\n        if words[i][0].isupper():\n            # If it does, add a space before it\n            words[i] ='' + words[i]\n    # Join the list of words back into a string\n    result =''.join(words)\n    # Return the resulting string\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = str1.lower()\n    words = re.findall(r'\\b\\w+\\b', str1)\n    words = [word.capitalize() if word[0].isupper() else word for word in words]\n    return''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    # Using regular expressions to find all the words starting with capital letters\n    words = re.findall(r'\\b[A-Z][a-z]+\\b', str1)\n    # Joining the words with spaces and returning the modified string\n    return''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into words\n    words = re.findall(r'\\b[A-Z][a-z]*\\b', str1)\n    # Join the words with spaces\n    result =''.join(words)\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # pattern to match capital words starting with a letter\n    pattern = r'\\b[A-Z][a-z]+\\b'\n    # replace the pattern with spaces before capital words starting with a letter\n    str2 = re.sub(pattern, r'\\1 \\2', str1)\n    return str2"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Convert all the words to lowercase\n    str1 = str1.lower()\n    # Split the string into words\n    words = str1.split()\n    # Loop through each word\n    for i in range(len(words)):\n        # If the word starts with a capital letter, add a space before it\n        if words[i][0].isupper():\n            words[i] ='' + words[i]\n    # Join the words back into a string and return it\n    return''.join(words)"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    # Convert all strings of numbers to numeric values\n    nums = [int(n) for n in nums_str]\n    # Use built-in `sorted` function to sort the numeric values\n    nums.sort()\n    # Convert back to strings and return the sorted list\n    return [str(n) for n in nums]"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # convert each string in the list to a numeric value\n    nums = [float(num) for num in nums_str]\n    # sort the list numerically\n    nums.sort()\n    # convert the sorted list back to strings\n    sorted_nums_str = [str(num) for num in nums]\n    # return the sorted list of strings\n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    nums_str.sort(key=lambda x: int(x))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    # split the list of strings into individual numbers\n    nums = [int(num) for num in nums_str]\n    \n    # sort the list numerically\n    nums.sort()\n    \n    # join the sorted numbers back into strings and return the result\n    return ''.join(map(str, nums))"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = []\n    for num_str in nums_str:\n        nums.append(int(num_str))\n    nums.sort()\n    return nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key=lambda x: int(x))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key=lambda x: int(x))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    nums = []\n    for num_str in nums_str:\n        nums.append(int(num_str))\n    nums.sort()\n    return nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Write a function to sort a given list of strings of numbers numerically.\n    \"\"\"\n    nums_str.sort(key=lambda x: (x.isdigit() and float(x)) or float('inf'))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Write a function to sort a given list of strings of numbers numerically.\n    \"\"\"\n    # Convert the list of strings to a list of integers\n    nums = [int(num) for num in nums_str]\n    # Sort the list of integers using the built-in sort function\n    nums.sort()\n    # Convert the sorted list of integers back to a list of strings\n    sorted_nums_str = [str(num) for num in nums]\n    return sorted_nums_str"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = test_list[i] + test_tup[i]"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    # check if the list is a list\n    if not isinstance(test_list, list):\n        raise TypeError(\"The first argument must be a list.\")\n    # check if the tuple is a tuple\n    elif not isinstance(test_tup, tuple):\n        raise TypeError(\"The second argument must be a tuple.\")\n    # add the tuple to the list\n    else:\n        test_list.append(test_tup)\n        return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # append the tuple to the list\n    test_list.append(test_tup)\n    # return the modified list\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # Append the tuple elements to the list\n    test_list.extend(test_tup)\n    # Return the modified list\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    # Convert the tuple to a list\n    test_list = list(test_tup)\n\n    # Add the list to the list\n    test_list.extend(test_list)\n\n    # Return the updated list\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for item in test_list:\n        if item in test_tup:\n            test_list.remove(item)\n    for item in test_tup:\n        if item not in test_list:\n            test_list.append(item)\n    return test_list"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n\n    # base case\n    if i >= len(arr):\n        return True\n\n    # recursive case\n    if arr[i] > arr[2*i+1] or arr[i] > arr[2*i+2]:\n        return False\n    return check_min_heap_helper(arr, 2*i+1) and check_min_heap_helper(arr, 2*i+2)\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n\n    # recursively call helper function to check the array for min heap\n    return check_min_heap_helper(arr, 0)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    if i > 0:\n        # check if parent node is greater than child node\n        if arr[i] > arr[parent(i)]:\n            return False\n        else:\n            # if child node is greater than parent node, move down the heap and check again\n            return check_min_heap_helper(arr, parent(i))\n    else:\n        # if current node is root node, check if it's greater than child node\n        if arr[i] > arr[1]:\n            return False\n        else:\n            # if child node is greater than parent node, move down the heap and check again\n            return check_min_heap_helper(arr, 1)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i > 0 and arr[i] < arr[i // 2]:\n        return False\n    if i < len(arr) - 1 and arr[i] < arr[i + 1]:\n        return False\n    return True\n\ndef check_min_heap(arr):\n    '''\n    Check if the given array represents min heap or not.\n    '''\n    for i in range(len(arr) // 2 - 1, -1, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr):\n        return True\n    \n    left = 2 * i + 1\n    right = 2 * i + 2\n    \n    # Check if left child is greater than root\n    if left < len(arr) and arr[i] > arr[left]:\n        return False\n    \n    # Check if right child is greater than root\n    if right < len(arr) and arr[i] > arr[right]:\n        return False\n    \n    # Recursively check left and right children\n    return check_min_heap_helper(arr, left) and check_min_heap_helper(arr, right)\n\n\ndef is_min_heap(arr):\n    '''\n    Returns True if the given array represents a min heap, False otherwise.\n    '''\n    return check_min_heap_helper(arr, 0)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    if i == 0:\n        return True\n\n    if arr[i] < arr[i//2]:\n        return False\n\n    return check_min_heap_helper(arr, i//2)\n\ndef check_min_heap(arr):\n    if len(arr) % 2 == 1:\n        return False\n\n    return check_min_heap_helper(arr, len(arr)//2)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    \"\"\"\n    Write a function to check if the given array represents min heap or not.\n    \"\"\"\n    if i == 0:\n        return True\n    if arr[i] < arr[(i - 1) // 2]:\n        return False\n    else:\n        return check_min_heap_helper(arr, (i - 1) // 2)\n\n\ndef check_min_heap(arr):\n    \"\"\"\n    Check if the given array represents min heap or not.\n    \"\"\"\n    n = len(arr)\n    return check_min_heap_helper(arr, n - 1)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    \"\"\"\n    Write a function to check if the given array represents min heap or not.\n    \"\"\"\n    if i == 0:\n        return True\n    if arr[i] < arr[(i-1)//2]:\n        return False\n    else:\n        return check_min_heap_helper(arr, (i-1)//2)\n\ndef check_min_heap(arr):\n    \"\"\"\n    Write a function to check if the given array represents min heap or not.\n    \"\"\"\n    n = len(arr)\n    if n < 2:\n        return True\n    return check_min_heap_helper(arr, n-1)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n    elif arr[i] < arr[(i - 1) // 2]:\n        return False\n    else:\n        return check_min_heap_helper(arr, (i - 1) // 2)\n\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n    return check_min_heap_helper(arr, n - 1)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not.\n    '''\n    if i == 0 or arr[i] <= arr[i//2]:\n        return True\n    else:\n        return False\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not.\n    '''\n    n = len(arr)\n    for i in range(n//2 - 1, -1, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= 0:\n        if arr[i] > arr[(i - 1) // 2]:\n            return False\n        return check_min_heap_helper(arr, (i - 1) // 2)\n    return True"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return 2*jacobsthal_num(n//2)\n    else:\n        return (3*jacosthal_num(n//2) - jacobsthal_num((n//2)+1))"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    # Initialize variables\n    a = 0\n    b = 1\n\n    # Check if n is 0 or 1\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n\n    # Calculate Jacobsthal number\n    for i in range(n-1):\n        a, b = b, (4*a**2 - b) % 1000000000\n\n    return b"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. \n    https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return 2 * jacobsthal_num(n//2)\n    else:\n        return 2 * (jacobsthal_num((n-1)//2) + jacobsthal_num(n//2))"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        num = 2 * n - 1\n        return num * jacobsthal_num(n - 1) + jacobsthal_num(n - 2)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. \n    https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/\n    0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    jacobsthal_numbers = [0, 1]\n    for i in range(2, n):\n        jacobsthal_numbers.append(jacobsthal_numbers[i-1] + jacobsthal_numbers[i-2])\n    return jacobsthal_numbers[-1]"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number.\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return (2 * jacobsthal_num(n // 2)) + 1\n    else:\n        return (2 * jacobsthal_num((n - 1) // 2)) - jacobsthal_num(n // 2)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        jacob = n\n        for i in range(2, n+1):\n            jacob = (2*i-1)*jacob + (3*i-2)/2\n        return jacob"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2 * jacobsthal_num(n-1) + jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        jacob = 1\n        for i in range(1, n+1):\n            jacob = (2*jacob - 1) // i\n        return jacob"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2)"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n\n    # Sort the list in ascending order based on the last element of the tuple\n    test_list.sort(key=lambda x: x[-1])\n\n    # Initialize the minimum number of records to be K\n    min_count = K\n\n    # Initialize the minimum records to be None\n    min_records = []\n\n    # Iterate through the list\n    for i in range(K, len(test_list)):\n\n        # If the current element has a smaller last element, add it to the minimum records and update the minimum count\n        if test_list[i][-1] < test_list[min_count][-1]:\n            min_records = [test_list[i]]\n            min_count = i\n        # If the current element has a larger last element or is the same as the minimum record, update the minimum records\n        elif test_list[i][-1] == test_list[min_count][-1]:\n            min_records.append(test_list[i])\n\n        # If the number of minimum records is equal to K, break the loop\n        if len(min_records) == K:\n            break\n\n    # Return the minimum records\n    return min_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Sort the list in descending order based on second element of each tuple\n    sorted_list = sorted(test_list, key=lambda x: x[1], reverse=True)\n\n    # Initialize minimum count and minimum element\n    min_count = 0\n    min_element = sorted_list[0][1]\n\n    # Iterate through the sorted list\n    for i in range(len(sorted_list)):\n        # Check if the count of current element is greater than K\n        if i+1 >= min_count:\n            min_count = i+1\n            min_element = sorted_list[i][1]\n\n        # Check if the count of current element is equal to K\n        if i+1 == min_count:\n            # If current element is smaller than minimum element, update minimum element\n            if sorted_list[i][1] < min_element:\n                min_element = sorted_list[i][1]\n\n    return min_element"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Create a dictionary to store the frequency of each element in the list\n    freq = {}\n    for tup in test_list:\n        if tup[0] in freq:\n            freq[tup[0]] += 1\n        else:\n            freq[tup[0]] = 1\n\n    # Create a list to store the frequency of each element after filtering out those with frequency less than K\n    min_freq_list = []\n    for key, value in freq.items():\n        if value >= K:\n            min_freq_list.append((key, value))\n\n    # Sort the list based on the frequency of each element in ascending order\n    min_freq_list.sort(key=lambda x: x[1])\n\n    # Print the minimum K records\n    for i in range(K):\n        print(min_freq_list[i][0])"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    This function takes a list of tuples and a value for K. It returns a list of tuples, where each tuple contains the minimum K records from the original list.\n    '''\n\n    min_k_list = []  # initialize an empty list to store the minimum K records\n\n    # loop through the list of tuples and sort each tuple based on the first element (which contains the number of occurrences of the word)\n    for tuple_item in sorted(test_list, key=lambda x: x[0]):\n\n        # if the length of the tuple is greater than K, continue to the next tuple\n        if len(tuple_item) > K:\n            continue\n\n        # if the length of the tuple is equal to K, add it to the min_k_list\n        min_k_list.append(tuple_item)\n\n        # if the length of the tuple is less than K, break out of the loop and return the min_k_list\n        if len(tuple_item) < K:\n            break\n\n    return min_k_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n\n    # sort the list of tuples based on the first element of each tuple\n    test_list.sort(key=lambda x: x[0])\n\n    # initialize minimum k to infinity\n    minimum_k = float('inf')\n\n    # loop through the sorted list and keep track of the minimum k\n    for i in range(len(test_list)):\n        if i < K:\n            # if the current record is less than k, keep it\n            minimum_k = min(minimum_k, test_list[i][1])\n        else:\n            # if the current record is greater than or equal to k, update the minimum k\n            minimum_k = min(minimum_k, test_list[i][1] - test_list[i-K][1])\n\n    return minimum_k"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. \n    https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    test_list.sort()\n    min_list = []\n    for i in range(K):\n        min_list.append(test_list[i][0])\n    return min_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n\n    # Sort the list based on the second element of each tuple (the value)\n    sorted_list = sorted(test_list, key=lambda x: x[1])\n\n    # Initialize an empty list to store the minimum k records\n    min_k_records = []\n\n    # Traverse the sorted list and add the kth smallest value to the min_k_records list\n    for i in range(K):\n        min_k_records.append(sorted_list[i][1])\n\n    # Return the min_k_records list\n    return min_k_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Initialize a dictionary to store the count of each element in the list\n    count_dict = {}\n    for num in test_list:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    \n    # Initialize a list to store the smallest k records\n    min_list = []\n    for key, value in count_dict.items():\n        if value < K:\n            continue\n        if len(min_list) < K:\n            min_list.append(key)\n        elif value == min_list[0]:\n            min_list.append(key)\n        else:\n            if value < min_list[0]:\n                min_list = [key]\n    \n    # Return the minimum k records\n    return min_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/\n    '''\n    min_list = []\n    for i in range(len(test_list)-K+1):\n        min_list.append(min(test_list[i:i+K]))\n    return min_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. \n    Input: test_list: list of tuples, e.g. [(1, 2), (3, 4), (5, 6), (7, 8)]\n           K: int, e.g. 2\n    Output: minimum k records from the test_list as a list of tuples\n    '''\n\n    # Sort the list of tuples based on the second element of the tuples\n    test_list.sort(key=lambda x: x[1])\n\n    # Initialize an empty list to store the minimum k records\n    min_list = []\n\n    # Initialize variables to keep track of the minimum k records\n    min_count = 0\n    min_sum = 0\n\n    # Loop through the sorted list of tuples\n    for i in range(len(test_list)):\n\n        # If the length of the current list of tuples is less than K, skip to the next iteration\n        if i + 1 >= len(test_list) and len(min_list) < K:\n            continue\n\n        # If the length of the current list of tuples is equal to K, update the minimum k records\n        elif i + 1 == len(test_list) and len(min_list) < K:\n            min_list = [test_list[i]]\n            min_count = 1\n            min_sum = test_list[i][1]\n\n        # If the length of the current list of tuples is equal to K, update the minimum k records\n        elif i + 1 == len(test_list) and len(min_list) == K:\n            if test_list[i][1] < min_sum:\n                min_list = [test_list[i]]\n                min_count = 1\n                min_sum = test_list[i][1]\n            elif test_list[i][1] == min_sum:\n                min_list.append(test_list[i])\n                min_count += 1\n                min_sum += test_list[i][1]\n\n        # If the length of the current list of tuples is greater than K, update the minimum k records\n        elif i + 1 < len(test_list) and len(min_list) == K:\n            min_list.append(test_list[i])\n            min_count += 1\n            min_sum += test_list[i][1]\n\n    # Return the minimum k records\n    return min_list\n"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(min(len(l1), len(l2), len(l3))):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_list = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common_list.append(l1[i])\n    return common_list"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common.append(l1[i])\n    return common"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # Create a dictionary to store the frequency of each element in each list\n    freq_dict1 = {}\n    freq_dict2 = {}\n    freq_dict3 = {}\n    for i in range(len(l1)):\n        if l1[i] in freq_dict1:\n            freq_dict1[l1[i]] += 1\n        else:\n            freq_dict1[l1[i]] = 1\n    for i in range(len(l2)):\n        if l2[i] in freq_dict2:\n            freq_dict2[l2[i]] += 1\n        else:\n            freq_dict2[l2[i]] = 1\n    for i in range(len(l3)):\n        if l3[i] in freq_dict3:\n            freq_dict3[l3[i]] += 1\n        else:\n            freq_dict3[l3[i]] = 1\n    \n    # Iterate through each index in the lists\n    common_list = []\n    for i in range(len(l1)):\n        # If the element appears in all three lists, add it to the common list\n        if freq_dict1[l1[i]] == freq_dict2[l1[i]] == freq_dict3[l1[i]]:\n            common_list.append(l1[i])\n    \n    return common_list"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    \"\"\"\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2[i] and l1[i] in l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] in l1:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_set = set()\n    for i in range(len(l1)):\n        if l1[i] in l2[i] and l1[i] in l3[i]:\n            index_set.add(i)\n    return list(index_set)"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l1 and l3[i] in l1:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n\n    smallest = float('inf')\n    second_smallest = float('inf')\n\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    This function takes a list of numbers as input and returns the second smallest number in the list.\n    \"\"\"\n    numbers.sort()\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Write a function to find the second smallest number in a list.\n    \"\"\"\n    if len(numbers) < 2:\n        return None\n    sorted_numbers = sorted(numbers)\n    return sorted_numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    else:\n        smallest = min(numbers)\n        second_smallest = float('inf')\n        for num in numbers:\n            if num < smallest:\n                second_smallest = smallest\n                smallest = num\n            elif num < second_smallest and num!= smallest:\n                second_smallest = num\n        return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    \n    smallest = second_smallest = float('inf')\n    \n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    \n    return second_smallest if second_smallest!= float('inf') else None"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    else:\n        return min(numbers)"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    if len(numbers) == 2:\n        return min(numbers)\n    \n    # sort the numbers in non-decreasing order\n    numbers.sort()\n    \n    # return the second smallest number\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Write a function to find the second smallest number in a list.\n    \"\"\"\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    else:\n        numbers.sort()\n        return numbers[1]"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a\\w*b+'\n    return re.search(pattern, text)"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(b*)'\n    result = re.search(pattern, text)\n    return result"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a[^b]*b'\n    match = re.search(pattern, text)\n    if match:\n        print(match.group())\n    else:\n        print(\"No match found\")"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'ab+'\n    result = re.search(pattern, text)\n    if result:\n        return result.group()\n    else:\n        return None"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n\n    if match:\n        return match.group()\n    else:\n        return \"No match found\""
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a\\bb*'\n    return re.search(pattern, text)"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'ab{1,}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's.\n    '''\n    pattern = r'a.*b'\n    match = re.match(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'\\ba[^b]*b\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for string1 in test_list:\n        for i in range(len(string1)):\n            for string2 in test_list:\n                if string1 == string2:\n                    continue\n                if string1.startswith(string2[::-1]):\n                    count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    reverse_pairs = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j]:\n                reverse_pairs += 1\n    return reverse_pairs"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    \n    # Create a dictionary to store the count of reverse pairs\n    count_dict = {}\n    \n    # Iterate through the string list\n    for string in test_list:\n        \n        # Convert the string to a list of characters\n        char_list = list(string)\n        \n        # Sort the list of characters in reverse order\n        char_list.sort(reverse=True)\n        \n        # Convert the sorted list back to a string and compute the reverse of the string\n        reverse_string = ''.join(char_list)\n        \n        # Check if the reverse string is already in the dictionary\n        if reverse_string in count_dict:\n            count_dict[reverse_string] += 1\n        else:\n            count_dict[reverse_string] = 1\n    \n    # Return the count of reverse pairs\n    return sum(count_dict.values())\n"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    # Count the number of unique characters in the list\n    n = len(test_list)\n    unique_chars = set()\n    for i in range(n):\n        for j in range(i+1, n):\n            unique_chars.add(test_list[i][j])\n\n    # Count the number of pairs of reverse strings\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if str(test_list[i][j]) in unique_chars:\n                count += 1\n\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    \"\"\"\n    This function takes a list of strings as input and returns the count of reverse pairs of strings in the list.\n    A string is a sequence of characters enclosed in double quotes.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    \"\"\"\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if i < j and test_list[i][::-1] in test_list[j:]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    \"\"\"\n    Write a function to count the pairs of reverse strings in the given string list.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i][::-1] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j]:\n                count += 1\n\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n\n    # Convert the list to a set to remove duplicates\n    list_set = set(list1)\n\n    # Convert the set back to a list for indexing\n    list_list = list(list_set)\n\n    # Create an empty dictionary to store the count\n    sublist_count = {}\n\n    # Iterate over each list in the list_list\n    for sublist in list_list:\n        # Convert the sublist to a tuple for indexing\n        sublist_tuple = tuple(sublist)\n        # If the tuple is not already in the dictionary, add it with a count of 1\n        if sublist_tuple not in sublist_count:\n            sublist_count[sublist_tuple] = 1\n        # Otherwise, increment the count of the tuple\n        else:\n            sublist_count[sublist_tuple] += 1\n\n    # Return the dictionary containing the count of each sublist\n    return sublist_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # convert all lists in list1 to tuples\n    list1 = tuple(map(tuple, list1))\n    # create a dictionary to store count of lists\n    count = {}\n    # iterate through all tuples in list1\n    for tup in list1:\n        # check if the tuple is already in the dictionary\n        if tup in count:\n            # increment the count of the tuple in the dictionary\n            count[tup] += 1\n        else:\n            # add the tuple to the dictionary with count 1\n            count[tup] = 1\n    # return the dictionary\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Convert all lists to tuples\n    tuples_list = [tuple(i) for i in list1]\n    # Create a dictionary to store the count of lists\n    count_dict = {}\n    # Iterate over the tuples in the list\n    for i in tuples_list:\n        # If the tuple is not already in the dictionary, add it with a count of 1\n        if i not in count_dict:\n            count_dict[i] = 1\n        # If the tuple is already in the dictionary, increment its count by 1\n        else:\n            count_dict[i] += 1\n    # Return the dictionary\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublists = {}\n    for i in list1:\n        sublist = tuple(i)\n        if sublist not in sublists:\n            sublists[sublist] = 0\n        sublists[sublist] += 1\n    return sublists"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Create an empty dictionary\n    count_dict = {}\n    # Loop through the original list\n    for item in list1:\n        # Convert the list to a tuple\n        tuple_item = tuple(item)\n        # Check if the tuple is already in the dictionary\n        if tuple_item not in count_dict:\n            # If not, add it to the dictionary with a value of 1\n            count_dict[tuple_item] = 1\n        else:\n            # If it is, increment the value of the tuple in the dictionary by 1\n            count_dict[tuple_item] += 1\n    # Return the dictionary\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # create an empty dictionary\n    count_dict = {}\n    \n    # iterate over each element in the list\n    for element in list1:\n        # check if the element is a list\n        if isinstance(element, list):\n            # convert the list to a tuple\n            sublist_tuple = tuple(element)\n            # if the tuple is not in the dictionary yet, add it with a count of 1\n            if sublist_tuple not in count_dict:\n                count_dict[sublist_tuple] = 1\n            # if the tuple is already in the dictionary, increment its count by 1\n            else:\n                count_dict[sublist_tuple] += 1\n    \n    # return the count dictionary\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    counts = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = list1[i:j]\n            sublist_tuple = tuple(sublist)\n            counts[sublist_tuple] = counts.get(sublist_tuple, 0) + 1\n    return counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    \"\"\"\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    \"\"\"\n    unique_lists = {}\n    for num in list1:\n        tuple_num = tuple(num)\n        if tuple_num in unique_lists:\n            unique_lists[tuple_num] += 1\n        else:\n            unique_lists[tuple_num] = 1\n    return unique_lists"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(lst):\n    # Create an empty dictionary to store the counts of unique sublists\n    counts = {}\n    # Iterate through each sublist in the original list\n    for i in range(len(lst)):\n        # Convert the sublist to a tuple and check if it exists in the dictionary\n        if tuple(lst[i:]) in counts:\n            # If it does, increment the count\n            counts[tuple(lst[i:])] += 1\n        else:\n            # If it doesn't, add it to the dictionary with a count of 1\n            counts[tuple(lst[i:])] = 1\n    # Return the dictionary of counts\n    return counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # create a dictionary to store the counts of unique sublists\n    counts = {}\n    # loop through the list1\n    for item in list1:\n        # convert each item to a tuple\n        tuple_item = tuple(item)\n        # check if the tuple is already in the dictionary\n        if tuple_item not in counts:\n            # if not, add it with a count of 1\n            counts[tuple_item] = 1\n        else:\n            # if it is, increment its count by 1\n            counts[tuple_item] += 1\n    # return the dictionary of counts\n    return counts"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # split the string by the decimal point\n    decimal_point = num.split('.')\n    \n    # check if the string has only one element\n    if len(decimal_point) == 1:\n        return True\n    \n    # check if the string has more than one element\n    else:\n        # check if the first element is zero\n        if decimal_point[0] == '0':\n            return False\n        \n        # check if the second element is zero\n        if decimal_point[1] == '0':\n            return False\n        \n        # check if the second element is not zero and contains only one digit\n        else:\n            for digit in decimal_point[1]:\n                if not digit.isdigit():\n                    return False\n            return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    try:\n        decimal.Decimal(num)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    \"\"\"\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    \"\"\"\n    if \".\" not in num:\n        return False\n    parts = num.split(\".\")\n    if len(parts)!= 2:\n        return False\n    if len(parts[0]) > 2 or len(parts[1]) > 2:\n        return False\n    for digit in parts[0]:\n        if digit.isdigit() and int(digit) > 9:\n            return False\n    for digit in parts[1]:\n        if digit.isdigit() and int(digit) > 9:\n            return False\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    if '.' in num:\n        # if there is a dot, check if it has only two decimal places\n        decimal_places = num.split('.')[-1]\n        if len(decimal_places) == 2:\n            return True\n        else:\n            return False\n    else:\n        # if there is no dot, check if it is a whole number with a precision of 2\n        if num.isdigit() and len(num) <= 8:\n            return True\n        else:\n            return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    num = str(num)\n    if '.' in num:\n        if len(num.split('.')[1]) > 2:\n            return False\n        for digit in num.split('.')[1]:\n            if not digit.isdigit():\n                return False\n    else:\n        if len(num) > 2:\n            return False\n        for digit in num:\n            if not digit.isdigit():\n                return False\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n\n    # Split the string into digits\n    digits = list(map(int, num))\n\n    # Check if the digits are in a valid decimal form\n    for i in range(len(digits)):\n        if i == 0 and digits[i] == 0:\n            continue\n        if i == len(digits) - 1:\n            if digits[i] >= 10:\n                return False\n            elif digits[i] < 0:\n                return False\n        else:\n            if digits[i] >= 10 or digits[i] < 0:\n                return False\n\n    # Check if the sum of the digits is a multiple of 10\n    sum_of_digits = sum(digits)\n    if sum_of_digits % 10!= 0:\n        return False\n\n    # Check if the last digit is a multiple of 5\n    last_digit = digits[-1]\n    if last_digit % 5!= 0:\n        return False\n\n    # If all the checks pass, the number is a valid decimal number with a precision of 2\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if '.' not in num:\n        return False\n    num_parts = num.split('.')\n    if len(num_parts)!= 2:\n        return False\n    for part in num_parts:\n        if part == '':\n            return False\n        if not part.isdigit():\n            return False\n        if len(part) > 2:\n            return False\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    # Check if the input is a string\n    if not isinstance(num, str):\n        return False\n    \n    # Check if the string contains only digits and a decimal point\n    if not any(char.isdigit() or char == '.' for char in num):\n        return False\n    \n    # Check if there are more than one decimal points\n    if '.' not in num:\n        return False\n    \n    # Check if the string contains more than 2 decimal places\n    if num.count('.') > 2:\n        return False\n    \n    # If all checks pass, the string is a decimal number with a precision of 2\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    if num.isdecimal():\n        return num.split('.')[-1].lstrip('0') == num.split('.')[-1]\n    else:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        if '.' in num:\n            if '.' not in str(float(num)).split('.')[1]:\n                return True\n        else:\n            return True\n    except ValueError:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # create a dictionary to store the frequency of each element in the list\n    freq = {}\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    \n    # check if there is only one distinct element in the list\n    count = 0\n    for num in freq:\n        count += freq[num]\n    if count == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 0:\n        return True\n    elif len(arr) == 1:\n        return True\n    elif len(arr) == 2:\n        if arr[0] == arr[1]:\n            return False\n        else:\n            return True\n    else:\n        for i in range(len(arr)):\n            if arr.count(arr[i]) == len(arr):\n                return True\n        return False\n"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique = True\n    for num in arr:\n        if arr.count(num) > 1:\n            unique = False\n            break\n    return unique"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 1:\n        return True\n    elif len(arr) == 0:\n        return False\n    elif arr[0]!= arr[1]:\n        return unique_Element(arr[1:])\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n\n    # Check if the length of the list is less than 2\n    if len(arr) < 2:\n        return False\n\n    # Create a set to store unique elements\n    unique = set()\n\n    # Iterate over the list and add each element to the set\n    for num in arr:\n        unique.add(num)\n\n    # Check if the length of the set is exactly 1\n    if len(unique) == 1:\n        return True\n\n    # If we reach this point, the list contains more than one distinct element\n    return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    \"\"\"\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    \"\"\"\n    if len(arr)!= len(set(arr)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr)!= len(set(arr)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # check if the list is empty\n    if not arr:\n        return False\n    \n    # create a set to store the elements of the list\n    unique_set = set(arr)\n    \n    # check if the length of the set is equal to 1\n    if len(unique_set) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n\n    # Create a set to store the unique elements in the list\n    unique_set = set(arr)\n\n    # Check if the length of the set is equal to 1, which means there is only one unique element in the list\n    if len(unique_set) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 0:\n        return False\n    elif len(arr) == 1:\n        return True\n    else:\n        for i in range(len(arr)):\n            if i == 0:\n                if arr[i]!= arr[i+1]:\n                    return False\n                else:\n                    continue\n            else:\n                if arr[i] == arr[i-1]:\n                    return False\n                elif arr[i]!= arr[i+1]:\n                    return False\n                else:\n                    continue\n    return True\n"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    # dictionary of month names and their corresponding numbers\n    month_dict = {'January': 1, 'February': 2, 'March': 3, 'April': 4, 'May': 5, 'June': 6, \n                  'July': 7, 'August': 8, 'September': 9, 'October': 10, 'November': 11, 'December': 12}\n    \n    # if the month number is in the dictionary, check if it has 30 days\n    if month_dict[monthnum3] in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum in [4, 6, 9, 11]:\n        return False\n    else:\n        raise ValueError(\"Invalid month number.\")"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum):\n    # Check if the month number is between 1 and 12\n    if monthnum >= 1 and monthnum <= 12:\n        # Check if the month has 30 days or not\n        if monthnum % 2 == 0:\n            # Even months have 30 days\n            return True\n        else:\n            # Odd months have 31 days\n            return False\n    else:\n        # If the month number is not between 1 and 12, return False\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 2 and (year % 4 == 0 and (year % 100!= 0 or year % 400 == 0)):\n        return True\n    elif monthnum3 == 2 and (year % 4!= 0):\n        return True\n    elif monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        return True\n    elif monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10:\n        return False\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if monthnum3 in range(1, 13) and monthnum3 % 2 == 0 and monthnum3 in days_in_month:\n        print(\"The given month number contains 30 days.\")\n    else:\n        print(\"The given month number does not contain 30 days.\")"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum):\n    if monthnum % 3 == 0:\n        if monthnum % 100 == 0:\n            if monthnum % 400 == 0:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    \n    if monthnum3 == 2:\n        if monthnum3 % 4 == 0:\n            if monthnum3 % 100 == 0:\n                if monthnum3 % 400 == 0:\n                    print(monthnum3, \"contains 30 days.\")\n                else:\n                    print(monthnum3, \"does not contain 30 days.\")\n            else:\n                print(monthnum3, \"contains 30 days.\")\n        else:\n            print(monthnum3, \"does not contain 30 days.\")\n    elif monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        print(monthnum3, \"contains 30 days.\")\n    elif monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        print(monthnum3, \"does not contain 30 days.\")\n    else:\n        print(\"Invalid month number.\")"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [4, 6, 9, 11]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [1,3,5,7,8,10,12]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array and its length as input and returns the minimum difference between any two elements in the array.\n    \"\"\"\n    arr.sort()\n    diff = arr[n-1] - arr[0]\n    return diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_min_diff(arr, n):\n    # Sort the array in ascending order\n    arr.sort()\n    # Initialize two variables to store the minimum difference and its index\n    min_diff = float('inf')\n    min_index = 0\n    # Loop through the array and check for each pair of adjacent elements\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n            min_index = i\n    # Return the minimum difference and its index\n    return min_diff, min_index"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes in an array and its length as input and returns the minimum difference between any two elements in the array.\n    \n    Args:\n    arr: list of integers\n    n: length of the array\n    \n    Returns:\n    int: minimum difference between any two elements in the array\n    \"\"\"\n\n    # Sort the array\n    arr.sort()\n\n    # Initialize the minimum difference to be the first element\n    min_diff = abs(arr[1] - arr[0])\n\n    # Loop through the rest of the array and update the minimum difference\n    for i in range(1, n-1):\n        curr_diff = abs(arr[i+1] - arr[i])\n        if curr_diff < min_diff:\n            min_diff = curr_diff\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_min_diff(arr, n):\n    arr.sort()\n    diff = abs(arr[1] - arr[0])\n    for i in range(1, n-1):\n        temp_diff = abs(arr[i+1] - arr[i])\n        if temp_diff < diff:\n            diff = temp_diff\n    return diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_min_diff(arr, n):\n    '''\n    This function finds the minimum difference between any two elements in a given array.\n    '''\n    # Sort the array\n    arr.sort()\n\n    # Initialize the minimum difference\n    min_diff = arr[-1] - arr[0]\n\n    # Iterate through the array\n    for i in range(n-1):\n        # Calculate the difference between the current element and the next element\n        diff = arr[i+1] - arr[i]\n\n        # Update the minimum difference if the new difference is smaller\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function finds the minimum difference between any two elements in a given array.\n    \"\"\"\n    arr.sort() # Sort the array in ascending order\n    min_diff = abs(arr[n-1] - arr[0]) # Find the minimum difference between the last and first elements\n    for i in range(1, n-1):\n        curr_diff = abs(arr[i] - arr[i-1]) + abs(arr[i] - arr[i+1]) # Calculate the absolute difference between adjacent elements\n        min_diff = min(min_diff, curr_diff) # Find the minimum difference between the current and previous elements\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_min_diff(arr, n):\n    # Sorting the array\n    arr.sort()\n\n    # Initializing minimum difference and minimum element\n    min_diff = arr[1] - arr[0]\n    min_elem = arr[0]\n\n    # Traversing the array to find the minimum difference and minimum element\n    for i in range(1, n - 1):\n        diff = arr[i + 1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n            min_elem = arr[i]\n\n    return min_elem, min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array and its length n as input and returns the minimum difference between any two elements in the array.\n    \"\"\"\n\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize the minimum difference to be the difference between the first and last elements\n    min_diff = arr[-1] - arr[0]\n\n    # Iterate through the array from second element to the last element\n    for i in range(1, n-1):\n        # Calculate the difference between the current element and the next element\n        diff = arr[i+1] - arr[i]\n        # Update the minimum difference if the difference is smaller than the current minimum difference\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_min_diff(arr, n): \n    \"\"\"\n    This function takes an array and its length n as input and returns the minimum difference between any two elements in the array.\n\n    :param arr: An array of integers.\n    :param n: The length of the array.\n    :return: The minimum difference between any two elements in the array.\n    \"\"\"\n\n    # Sort the array\n    arr.sort()\n\n    # Initialize variables for minimum difference and minimum index\n    min_diff = arr[1] - arr[0]\n    min_index = 0\n\n    # Iterate through the array from the second element\n    for i in range(1, n):\n\n        # Calculate the difference between current element and previous minimum difference\n        diff = arr[i] - arr[i-1]\n\n        # If the difference is smaller than the previous minimum difference, update the minimum difference and minimum index\n        if diff < min_diff:\n            min_diff = diff\n            min_index = i\n\n    return min_diff, min_index"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function finds the minimum difference between any two elements in a given array.\n\n    Args:\n        arr (list): A list of integers.\n        n (int): The size of the array.\n\n    Returns:\n        int: The minimum difference between any two elements in the given array.\n    \"\"\"\n    min_diff = float('inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = arr[j] - arr[i]\n            if diff < min_diff:\n                min_diff = diff\n    return min_diff"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_ctr(string):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in string:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_ctr(str):\n    \"\"\"\n    Write a python function to count number of digits in a given string.\n    \"\"\"\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_ctr(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_ctr(str):\n    \"\"\"\n    Write a python function to count number of digits in a given string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef is_polite(n): \n    \"\"\"\n    Returns the nth polite number.\n\n    Assumes n >= 1 and returns None if n is not a positive integer.\n    \"\"\"\n    if not isinstance(n, int) or n < 1:\n        return None\n    \n    # Initialize variables for first and second polite numbers\n    p1 = 1\n    p2 = 2\n    \n    # Loop to generate the nth polite number\n    for i in range(2, n+1):\n        # Update p1 and p2 for the nth iteration\n        p1 = (2 * p1) % 1000000\n        p2 = (2 * p2) % 1000000\n        \n        # Check if p1 is greater than n and p2 is less than n\n        if p1 > n and p2 < n:\n            return p1\n    \n    # If we've reached here, the nth polite number hasn't been found\n    return None"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    def nth_polite(n):\n        def is_prime(num):\n            if num < 2:\n                return False\n            for i in range(2, int(math.sqrt(num))+1):\n                if num % i == 0:\n                    return False\n            return True\n        \n        # initialize count and number\n        count = 0\n        num = 1\n        \n        # check if the number is prime\n        if is_prime(num):\n            count += 1\n        \n        # generate next number\n        while count < n:\n            # check if the number is prime\n            if is_prime(num):\n                count += 1\n            # generate next number\n            num += 1\n        \n        return num\n    \n    # return nth polite number\n    return nth_polite(n)"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef is_polite(n):\n    pi = math.pi\n    numerator = n * 1000000000\n    denominator = 2 * pi\n    return numerator % denominator == 0"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    This function takes an integer n and returns the nth polite number.\n    A polite number is a positive integer greater than 1, whose nth term in the arithmetic progression of positive integers is prime.\n    \"\"\"\n    def is_prime(num):\n        \"\"\"\n        This function takes an integer num and returns True if it is prime, False otherwise.\n        \"\"\"\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num))+1):\n            if num % i == 0:\n                return False\n        return True\n\n    def nth_polite_number(n):\n        \"\"\"\n        This function takes an integer n and returns the nth polite number.\n        \"\"\"\n        count = 1\n        num = 2\n        while count < n:\n            if is_prime(num):\n                count += 1\n            num += 1\n        return num\n\n    return nth_polite_number(n)"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    \"\"\"\n    def is_prime(num):\n        \"\"\"\n        Check if a number is prime or not\n        \"\"\"\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    def nth_polite_number(n):\n        \"\"\"\n        Recursive function to find nth polite number\n        \"\"\"\n        if n <= 10:\n            return 5 * (n - 1)\n        if is_prime(n):\n            return 1000 * n\n        return 1000 * nth_polite_number(n + 1)\n    \n    return nth_polite_number(n)"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef is_polite(n):\n    def generate_polite_numbers(a, b, c):\n        polite_numbers = []\n        for i in range(a, b+1):\n            if is_prime(i) and is_prime(i + c):\n                polite_numbers.append(i + c)\n        return polite_numbers\n\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(math.sqrt(n))+1):\n            if n % i == 0:\n                return False\n        return True\n\n    a = 1\n    b = 2000000\n    c = 10\n    polite_numbers = generate_polite_numbers(a, b, c)\n    return polite_numbers[n-1]\n\nn = 10  # Change this to generate nth polite number\nprint(is_polite(n))"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. \n    geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1:\n        return 'The 1st polite number is 1'\n    elif n == 2:\n        return 'The 2nd polite number is 3'\n    else:\n        # To find nth polite number we need to find the square root of n and then multiply 3 with that value rounded up to the nearest integer.\n        # We'll use int() function to round up the value to the nearest integer.\n        sqrt_n = int(math.sqrt(n))\n        polite_num = 3 * sqrt_n + 1\n        return 'The {}th polite number is {}'.format(n, polite_num)\n"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef is_polite(n):\n    if n == 1:\n        return True\n    elif n == 2:\n        return True\n    elif n == 3:\n        return False\n    else:\n        num = 2\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n < 1:\n        return \"Invalid input\"\n    elif n == 1:\n        return 1\n    else:\n        num1 = 0\n        num2 = 1\n        count = 1\n        while count <= n:\n            if is_prime(num1):\n                num1 += 1\n                count += 1\n            else:\n                num1 += 2\n        return num1 - 1\n\ndef is_prime(num):\n    '''\n    Write a function to check if a number is prime or not.\n    '''\n    if num < 2:\n        return False\n    elif num == 2:\n        return True\n    else:\n        for i in range(2, int(math.sqrt(num))+1):\n            if num % i == 0:\n                return False\n        return True"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # Initialize the variable\n    count = 1\n    # Loop through the range of numbers\n    while count <= n:\n        # Check if the number is polite\n        if is_prime(count) and is_prime(n - count):\n            return count\n        # Increment the count\n        count += 1\n    # If the loop completes without finding a polite number, return None\n    return None\n\ndef is_prime(num):\n    '''\n    A helper function to check if a number is prime or not.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    if len(l1) < 2:\n        return []\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    n = len(l1)\n    pairs = []\n    for i in range(n - 1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    if len(l1) < 2:\n        return []\n    \n    # initialize an empty list to hold the result\n    result = []\n    \n    # loop through the list and add pairs of consecutive items to the result list\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    \n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    n = len(l1)\n    res = []\n    for i in range(n-1):\n        res.append((l1[i], l1[i+1]))\n    return res"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    This function takes a list as input and returns a list of all pairs of consecutive items in the given list.\n    '''\n    if len(l1) < 2:\n        return []\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    if len(l1) <= 1:\n        return []\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    This function takes a list of numbers and a sum as input and returns the count of pairs whose sum is equal to the given sum.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The function gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns a new list containing the elements of the first list that are not present in the second list.\n    \"\"\"\n    diff_list = []\n    for i in li1:\n        if i not in li2:\n            diff_list.append(i)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff_list = []\n    for item in li1:\n        if item not in li2:\n            diff_list.append(item)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    # Using set() to remove duplicates from both lists\n    set1 = set(li1)\n    set2 = set(li2)\n    # Using set() to get the intersection of the two sets\n    intersection = set1.intersection(set2)\n    # Using set() to get the difference of the two sets\n    difference = set1.difference(set2)\n    # Using list() to convert the set to a list\n    difference = list(difference)\n    # Returning the difference list\n    return difference"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns a new list containing the elements of `li1` that are not present in `li2`.\n\n    Parameters:\n    li1 (list): A list of elements.\n    li2 (list): A list of elements.\n\n    Returns:\n    list: A new list containing the elements of `li1` that are not present in `li2`.\n    \"\"\"\n    # Create an empty list to store the difference between the two lists.\n    diff_list = []\n\n    # Loop through each element of the first list.\n    for elem in li1:\n        # Check if the element is present in the second list.\n        if elem not in li2:\n            # If it's not, add it to the diff list.\n            diff_list.append(elem)\n\n    # Return the diff list.\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Write a python function to get the difference between two lists.\n    \"\"\"\n    # Use set() method to remove duplicates from li2\n    li2_unique = list(set(li2))\n    # Iterate over li1 and check if each element is in li2_unique\n    diff_list = [x for x in li1 if x not in li2_unique]\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input and returns the elements that are present in li1 but not in li2.\n    '''\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input and returns the difference between them.\n    '''\n    return [x for x in li1 if x not in li2]"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns the difference between them.\n    \"\"\"\n    # Create an empty list to store the difference\n    diff_list = []\n    \n    # Iterate through each element in the first list\n    for elem in li1:\n        # Check if the element exists in the second list\n        if elem in li2:\n            # If it does, remove it from the second list\n            li2.remove(elem)\n        # Otherwise, add it to the difference list\n        else:\n            diff_list.append(elem)\n    \n    # Return the difference list\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input and returns a new list that contains the elements present in the first list but not in the second list.\n    '''\n    diff = []\n    for item in li1:\n        if item not in li2:\n            diff.append(item)\n    return diff"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    # initialize the sum variable to zero\n    sum = 0\n    \n    # loop through the first n odd natural numbers\n    for i in range(1, n+1, 2):\n        # add the fourth power of the current odd number to the sum\n        sum += i**4\n    \n    # return the sum\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    total = 0\n    for i in range(1, n+1, 2):\n        total += i**4\n    return total"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(2, 2*n+1, 2):\n        sum += i ** 4\n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    num = 0\n    for i in range(1, n+1, 2):\n        num += i**4\n    return num"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(n):\n        if i % 2 == 1:\n            sum += i ** 4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    count = 0\n    sum_of_fourth_powers = 0\n    num = 1\n    while count < n:\n        if num % 2 == 1:\n            sum_of_fourth_powers += num**4\n        num += 1\n        count += 1\n    return sum_of_fourth_powers"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i in range(len(exp)):\n        if exp[i] in ['(', '[', '{']:\n            stack.append(exp[i])\n        elif exp[i] in [')', ']', '}']:\n            if not stack:\n                return False\n            elif stack.pop()!= exp[i]:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                return False\n            if char in ['(', '{', '['] and char!= stack.pop():\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                return False\n            if char == ')' and stack[-1] == '(':\n                stack.pop()\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n            elif char == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i in range(len(exp)):\n        if exp[i] in ['(', '[', '{']:\n            stack.append(exp[i])\n        elif exp[i] in [')', ']', '}']:\n            if not stack:\n                return False\n            if exp[i] == ')' and stack[-1] == '(':\n                stack.pop()\n            elif exp[i] == ']' and stack[-1] == '[':\n                stack.pop()\n            elif exp[i] == '}' and stack[-1] == '{':\n                stack.pop()\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not.\n    '''\n    stack = deque()\n    opening_brackets = {'(', '[', '{'}\n    closing_brackets = {')', ']', '}'}\n\n    for char in exp:\n        if char in opening_brackets:\n            stack.append(char)\n        elif char in closing_brackets:\n            if not stack:\n                return False\n            opening_char = stack.pop()\n            if opening_char not in opening_brackets.values():\n                return False\n            if char!= opening_char:\n                return False\n\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    open_parenthesis = ['(', '{', '[']\n    close_parenthesis = [')', '}', ']']\n\n    for char in exp:\n        if char in open_parenthesis:\n            stack.append(char)\n        elif char in close_parenthesis:\n            if not stack or char!= close_parenthesis.index(stack.pop()):\n                return False\n\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            if stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    balance_dict = {')': '(', '}': '{', ']': '['}\n\n    for char in exp:\n        if char in '([{':\n            stack.append(char)\n        elif char in ')]}':\n            if not stack:\n                return False\n            elif char == balance_dict[stack[-1]]:\n                stack.pop()\n            else:\n                return False\n\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_expression(exp):\n    \"\"\"\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    \"\"\"\n    stack = deque()\n    for char in exp:\n        if char in ['(', '[', '{']:\n            stack.append(char)\n        elif char in [')', ']', '}']:\n            if not stack:\n                return False\n            top = stack.pop()\n            if char in ['(', '{', '['] and char!= top:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                return False\n            top_char = stack.pop()\n            if not (char == ')' and top_char == '(') and not (char == '}' and top_char == '{') and not (char == ']' and top_char == '['):\n                return False\n    return not stack"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    for i in range(len(words)):\n        if len(words[i]) == K:\n            words.pop(i)\n            i = i - 1\n    return''.join(words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the string into words\n    words = test_str.split()\n    # Initialize an empty list to store the new words\n    new_words = []\n    # Loop through each word in the list\n    for word in words:\n        # Check if the length of the word is not equal to K\n        if len(word)!= K:\n            # If the length is not equal to K, add the word to the new list\n            new_words.append(word)\n    # Join the new words with a space as a separator and return the result\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    test_list = test_str.split()\n    new_list = []\n    for word in test_list:\n        if len(word)!= K:\n            new_list.append(word)\n    return''.join(new_list)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n\n    words = test_str.split()\n    result = []\n\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n\n    return''.join(result)\n"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    return''.join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    \"\"\"\n    Write a function to remove all the words with k length in the given string.\n    \"\"\"\n    # split the string by space and remove empty strings\n    test_str = test_str.split()\n    test_str = [word for word in test_str if len(word)!= K]\n    # join the words by space and return the result\n    return''.join(test_str)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the string into words\n    words = test_str.split()\n    # Create an empty list to store the words with k length removed\n    result = []\n    # Loop through each word in the list\n    for word in words:\n        # Check if the length of the word is not equal to K\n        if len(word)!= K:\n            # If the length is not equal to K, append it to the result list\n            result.append(word)\n    # Join the words in the result list into a string and return it\n    return''.join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    filtered_words = []\n    for word in words:\n        if len(word)!= K:\n            filtered_words.append(word)\n    return''.join(filtered_words)"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string.\n    Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    try:\n        match = re.search(pattern, text)\n        if match:\n            return match.group(), match.start(), match.end()\n        else:\n            return None\n    except Exception as e:\n        print(e)\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # Find all occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n    # Check if there are any matches\n    if matches:\n        # Find the position of each match\n        positions = [match.start() for match in matches]\n        # Find the occurrence of each match\n        occurrences = [match.count(match) for match in matches]\n        # Sort the matches by their position and occurrence\n        sorted_matches = sorted(zip(positions, occurrences), key=lambda x: (x[0], x[1]))\n        # Return the sorted matches\n        return sorted_matches\n    else:\n        # Return None if there are no matches\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    try:\n        matches = re.finditer(pattern, text)\n        for match in matches:\n            start = match.start()\n            end = match.end()\n            print(\"Match found at position {}: '{}'\".format(start, text[start:end]))\n    except re.error as e:\n        print(\"Error: {}\".format(e))\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    m = re.search(pattern, text)\n    if m:\n        return m.group(0), m.start(), m.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    result = re.findall(pattern,text)\n    if result:\n        return result[0][0],result[0][1]\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern,text)\n    if match:\n        return match.group(),match.start(),match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    Find the occurrence and position of the substrings within a string.\n    Return None if there is no match.\n    \"\"\"\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    try:\n        match = re.search(pattern, text, re.IGNORECASE)\n        if match:\n            return match.group(), match.start(), match.end()\n        else:\n            return None\n    except Exception as e:\n        print(\"Error: \", e)"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2!= 0: # checking if i is odd\n            if nums[i] % 2!= 0: # checking if nums[i] is odd\n                return False # if any odd number is found in the odd position, then return False\n    return True # if all the elements are even, then return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns True if every odd index contains odd numbers and False otherwise.\n    \"\"\"\n    odd_count = 0\n    for i in range(len(nums)):\n        if i % 2 == 1:\n            if nums[i] % 2 == 1:\n                odd_count += 1\n                if odd_count == 2:\n                    return True\n    return False"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if not all(nums[i-1] % 2!= 0 for j in nums[i:]):\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    \n    for i in range(0, len(nums), 2):\n        if any(num % 2 == 0 for num in nums[i:]):\n            return False\n    \n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    \"\"\"\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    \"\"\"\n    odd_nums = [num for index, num in enumerate(nums) if index % 2 == 1]\n    for i in range(len(odd_nums)):\n        if len(set([odd_nums[i]] + odd_nums[i + 1:])) % 2 == 1:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if len(nums[i]) % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_indices = [i for i in range(len(nums)) if i % 2!= 0]\n    for i in odd_indices:\n        if len(set([x for x in nums[i::2] if x % 2!= 0])) == 1:\n            continue\n        else:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            count += 1\n    return count == len(nums)"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if i % 2!= 0:\n            for j in range(len(nums[i])):\n                if nums[i][j] % 2!= 0:\n                    count += 1\n                    break\n            if count == len(nums[i]):\n                return False\n            count = 0\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_index = 0\n    for i in range(len(nums)):\n        if i % 2!= 0 and nums[i] % 2 == 1:\n            odd_index = i\n            break\n    if odd_index == len(nums):\n        return True\n    else:\n        return False"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for i in range(len(test_str)):\n        if i > 0 and i < len(test_str)-1:\n            if test_str[i-1] in vowels and test_str[i+1] in vowels:\n                count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    \"\"\"\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i].lower() in vowels and test_str[i+1].lower() in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i + 1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n\n    for i in range(len(test_str)):\n        if test_str[i - 1] in vowels and test_str[i + 1] in vowels:\n            count += 1\n\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n\n    for i in range(len(test_str) - 2):\n        if test_str[i] in vowels and test_str[i + 1] in vowels:\n            count += 1\n\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    \"\"\"\n    This function counts those characters which have vowels as their neighbors in the given string.\n    \"\"\"\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i + 1] in vowels:\n            count += 1\n\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    vowels = 'aeiou'\n    count = 0\n\n    for i in range(len(test_str)):\n        for j in range(i+1, len(test_str)+1):\n            if test_str[i] in vowels and test_str[j] in vowels:\n                count += 1\n\n    return count"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # Create a set to store unique elements in the list\n    unique_set = set(arr)\n\n    # Create an empty list to store non-repeated elements\n    non_repeated = []\n\n    # Iterate over the unique set\n    for element in unique_set:\n        # Append the element to the non_repeated list if it's not already there\n        if element not in non_repeated:\n            non_repeated.append(element)\n\n    # Calculate the sum of non-repeated elements\n    total_sum = sum(non_repeated)\n\n    return total_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_sum(arr): \n    \"\"\"\n    This function finds the sum of non-repeated elements in a given list.\n    \"\"\"\n    # Initialize a set to store unique elements of the list\n    unique_elements = set(arr)\n    # Initialize a variable to store the sum of unique elements\n    sum_unique_elements = 0\n    # Iterate over the unique elements and add their value to the sum\n    for element in unique_elements:\n        sum_unique_elements += element\n    # Return the sum of unique elements\n    return sum_unique_elements"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create a set to store unique elements of the list\n    unique_elements = set(arr)\n    # Initialize a variable to store the sum of non-repeated elements\n    sum_non_repeated_elements = 0\n    # Loop through each element of the list\n    for element in unique_elements:\n        # If the element is not already in the sum, add it to the sum\n        if element not in arr:\n            sum_non_repeated_elements += element\n    # Return the sum of non-repeated elements\n    return sum_non_repeated_elements"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # create a set of elements to store the non-repeated elements\n    non_repeated_elements = set(arr)\n    # find the sum of the non-repeated elements\n    sum_of_non_repeated_elements = sum(non_repeated_elements)\n    return sum_of_non_repeated_elements"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Initialize a dictionary to store the frequency of each element in the list\n    freq_dict = {}\n    for num in arr:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    \n    # Initialize a variable to store the sum of non-repeated elements\n    sum_non_repeated = 0\n    \n    # Iterate through the dictionary and add up the non-repeated elements\n    for num, freq in freq_dict.items():\n        if freq == 1:\n            sum_non_repeated += num\n    \n    # Return the sum of non-repeated elements\n    return sum_non_repeated"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Remove duplicates from the list\n    arr = list(set(arr))\n    \n    # Calculate the sum of the elements in the list\n    total_sum = sum(arr)\n    \n    return total_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_sum(arr):\n    # create a set from the input array to remove duplicates\n    unique_elements = set(arr)\n\n    # calculate the sum of the unique elements\n    sum_of_unique = sum(unique_elements)\n\n    return sum_of_unique"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_sum(arr):\n    # Initialize an empty dictionary to store the frequency of each element in the array\n    freq = {}\n    # Initialize the sum variable to 0\n    sum = 0\n    # Loop through each element in the array\n    for element in arr:\n        # If the element is not already in the dictionary, add it with a frequency of 1\n        if element not in freq:\n            freq[element] = 1\n        # If the element is already in the dictionary, increment its frequency by 1\n        else:\n            freq[element] += 1\n        # Calculate the sum of non-repeated elements\n        sum += element\n    # Return the sum of non-repeated elements\n    return sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_sum(arr):\n    # Create a set to keep track of the elements we have seen so far\n    seen = set()\n    # Initialize a variable to keep track of the sum of non-repeated elements\n    total = 0\n    # Loop through each element in the list\n    for num in arr:\n        # If the element is not already in the set, add it and add it to the total\n        if num not in seen:\n            seen.add(num)\n            total += num\n    # Return the total sum\n    return total"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_sum(arr): \n    # create a set to store unique elements of the list\n    unique_elements = set(arr)\n    # convert the set to a list to get the elements in the same order\n    unique_elements = list(unique_elements)\n    # initialize the sum to 0\n    sum = 0\n    # iterate through the list and add each element to the sum\n    for element in arr:\n        if element in unique_elements:\n            sum += element\n    # return the sum of non-repeated elements\n    return sum"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for group in groupby(list1):\n        group = list(group)\n        if len(group) > 1:\n            result.extend([group])\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # use groupby function from itertools to group the list elements by their consecutive duplicates\n    grouped_list = groupby(list1)\n    # create an empty list to store the sublists\n    sublists = []\n    # iterate over each group of consecutive duplicates\n    for group, group_iter in grouped_list:\n        # create a sublist with the consecutive duplicates and append it to the sublists list\n        sublists.append([x for x in group])\n    # return the sublists list\n    return sublists"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for key, group in groupby(list1):\n        if key:\n            result.append(list(group))\n        else:\n            result[-1].extend(list(group))\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for key, group in groupby(list1):\n        if len(list(group)) > 1:\n            result.extend(list(group))\n        else:\n            result.append(group)\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    def pack_duplicates(iterable):\n        for key, group in groupby(iterable):\n            if key == None:\n                continue\n            yield list(group)\n\n    return list(pack_duplicates(list1))"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # Group the list by consecutive duplicates\n    grouped = groupby(enumerate(list1), lambda x: x[1] == x[0] + 1)\n\n    # Convert the grouped result into a list of sublists\n    packed = [list(group) for _, group in grouped]\n\n    return packed"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    \"\"\"\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    \"\"\"\n    # Create a list of tuples where each tuple contains a group of consecutive duplicates\n    grouped_list = list(groupby(list1))\n    # Initialize an empty list to store the packed lists\n    packed_list = []\n    # Iterate through the grouped list and append the consecutive duplicates to a new list\n    for group in grouped_list:\n        if group[0] == group[1]:\n            packed_list.append([group[0]])\n        else:\n            packed_list.append(list(group))\n    return packed_list"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    \"\"\"\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    \"\"\"\n    list2 = []\n    prev_element = None\n    for element in list1:\n        if element == prev_element:\n            list2[-1].append(element)\n        else:\n            list2.append([element])\n            prev_element = element\n    return list2"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    \"\"\"\n    Pack consecutive duplicates of a given list elements into sublists.\n    \"\"\"\n    return [list(g) for k, g in groupby(lst) if k == len(list(g)) - 1]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # Using groupby function from itertools module to group consecutive duplicates together.\n    result = [(k, list(g)) for k, g in groupby(list1)]\n    return result"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count_dict = {}\n    for item in list1:\n        if item not in count_dict:\n            count_dict[item] = 0\n        count_dict[item] += 1\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count_dict = {}\n    for item in list1:\n        if isinstance(item, list):\n            item_tuple = tuple(item)\n            if item_tuple not in count_dict:\n                count_dict[item_tuple] = 1\n            else:\n                count_dict[item_tuple] += 1\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    list1_tuple = tuple(list1)\n    sublist_counts = {}\n    for sublist in list1_tuple:\n        if sublist in sublist_counts:\n            sublist_counts[sublist] += 1\n        else:\n            sublist_counts[sublist] = 1\n    return sublist_counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Create an empty dictionary\n    sublists = {}\n    \n    # Iterate through each item in the list\n    for item in list1:\n        # Check if the item is a list\n        if isinstance(item, list):\n            # Turn the list into a tuple and check if it exists in the dictionary\n            if item not in sublists:\n                # If it doesn't exist, add it to the dictionary with a value of 1\n                sublists[item] = 1\n            else:\n                # If it does exist, increment its value by 1\n                sublists[item] += 1\n    \n    # Return the dictionary with the unique sublists as keys and their occurrences as values\n    return sublists"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublist_count = {}\n    for item in list1:\n        if type(item) == list:\n            sublist_count[tuple(item)] = sublist_count.get(tuple(item), 0) + 1\n    return sublist_count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublists = {}\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            if i!= j:\n                sublists[tuple(sorted(list1[i] + list1[j]))] = sublists.get(tuple(sorted(list1[i] + list1[j])), 0) + 1\n    return sublists"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    list2 = []\n    for item in list1:\n        if type(item) == list:\n            list2.append(tuple(item))\n        else:\n            list2.append(item)\n    list3 = list(set(list2))\n    result = {}\n    for item in list3:\n        count = list2.count(item)\n        result[item] = count\n    return result"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n\n    # initialize an empty dictionary to store the counts of unique sublists\n    counts = {}\n\n    # loop through each element in the input list\n    for item in list1:\n\n        # if the element is a list, turn it into a tuple and check if it's already in the dictionary\n        if isinstance(item, list):\n            if item not in counts:\n                # if it's not, add it to the dictionary with a count of 1\n                counts[item] = 1\n            else:\n                # if it's already in the dictionary, increment its count\n                counts[item] += 1\n\n    # return the dictionary of unique sublists and their counts\n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = {}\n    for i in range(len(list1)):\n        if not list1[i] in count:\n            count[list1[i]] = 1\n        else:\n            count[list1[i]] += 1\n    return count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n\n    # Create an empty dictionary to store the count of each tuple\n    count_dict = {}\n\n    # Loop through each item in the list\n    for item in list1:\n        # Convert the item to a tuple if it's not already\n        if not isinstance(item, tuple):\n            item = (item,)\n\n        # Loop through each tuple in the list and increment the count for that tuple\n        for sublist in item:\n            if sublist not in count_dict:\n                count_dict[sublist] = 0\n            count_dict[sublist] += 1\n\n    # Return the dictionary of counts\n    return count_dict"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Initialize an empty set to store the combinations of sums with tuples\n    combination_set = set()\n    # Sort the input list of tuples\n    test_list.sort()\n    # Loop through the sorted list of tuples\n    for i in range(len(test_list)):\n        # Generate the combinations of sums with tuples starting from i-th index\n        for j in range(i+1, len(test_list)+1):\n            # If the current combination is valid, append it to the set\n            if sum(test_list[i:j]) == j-i:\n                combination_set.add(tuple(test_list[i:j]))\n    # Return the set of combinations of sums with tuples\n    return combination_set\n"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    for i in range(1, len(test_list)+1):\n        for j in combinations(test_list, i):\n            print(j)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Function to find the sum of all tuples in a list\n    def find_sum(lst):\n        return sum(lst)\n\n    # Function to find the sum of a tuple\n    def tuple_sum(tup):\n        return sum(tup)\n\n    # Function to find the combinations of sums with tuples in a list of tuples\n    def find_combinations_of_sums(lst):\n        # Create a set to store unique tuples and their sums\n        unique_tuples = set()\n        for tup in lst:\n            unique_tuples.add(tup)\n            unique_tuples.add((tuple_sum(tup), tup))\n\n        # Sort the unique tuples by their sums in ascending order\n        unique_tuples = sorted(unique_tuples, key=lambda x: x[0])\n\n        # Find all combinations of sums with unique tuples\n        combinations = []\n        for i in range(len(unique_tuples)):\n            for j in range(i + 1, len(unique_tuples)):\n                combinations.append((unique_tuples[i][1], unique_tuples[j][1]))\n\n        return combinations\n\n    # Call the find_combinations_of_sums function and return the result\n    return find_combinations_of_sums(test_list)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    '''\n    # Initialize a list to store the combinations\n    result = []\n\n    # Sort the tuples in the list of tuples\n    test_list = sorted(test_list)\n\n    # Generate all possible combinations of tuples\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            # Calculate the sum of the current combination\n            sum_of_tuples = sum(test_list[i] + test_list[j])\n            # Check if the sum of the current combination is present in the list of sums\n            if sum_of_tuples in test_list:\n                # If the sum of the current combination is present, append the combination to the result list\n                result.append(test_list[i] + test_list[j])\n\n    return result"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. \n    https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            yield tuple(sorted(test_list[i]+test_list[j]))"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    \"\"\"\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    \"\"\"\n    # Sort the given tuple list in increasing order\n    test_list.sort()\n\n    # Create a set of tuples with the same elements as the first tuple in the sorted list\n    combinations_set = set()\n    for i in range(len(test_list[0])):\n        combinations_set.add(tuple(test_list[0][i]))\n\n    # Calculate the combinations of sums with tuples in the sorted list\n    combinations_list = []\n    for i in range(1, len(test_list)):\n        for j in range(i):\n            comb = combinations(combinations_set, i)\n            for comb_tuple in comb:\n                total_sum = sum(comb_tuple)\n                if total_sum == test_list[i][j]:\n                    combinations_list.append(comb_tuple)\n                    break\n\n    return combinations_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    combinations_list = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            combination = tuple(sorted([test_list[i], test_list[j]]))\n            combinations_list.append(combination)\n    return combinations_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    '''\n\n    # Define a function to calculate the sum of tuples in the given list\n    def sum_tuples(lst):\n        return sum(x[0] + x[1] for x in lst)\n\n    # Define a function to calculate the sum of the given tuple\n    def sum_tuple(t):\n        return sum(t)\n\n    # Calculate the sum of tuples in the given list\n    total_sum = sum_tuples(test_list)\n\n    # Find all combinations of sums with tuples in the given list\n    for combo in combinations(test_list, r=2):\n        # Calculate the sum of the two tuples in the combination\n        combo_sum = sum_tuple(combo)\n        # Check if the sum of the two tuples is equal to the total sum\n        if combo_sum == total_sum:\n            print(combo)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    '''\n    # initializing empty list to store the combinations\n    comb_list = []\n    \n    # sorting the tuple list\n    sorted_list = sorted(test_list)\n    \n    # generating combinations with duplicates\n    comb_list = list(combinations(sorted_list, len(sorted_list)))\n    \n    # adding the tuple with maximum sum\n    max_sum_comb = max(comb_list, key=lambda x: sum(x))\n    \n    # returning the list of combinations with maximum sum\n    return max_sum_comb"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)+1):\n            yield tuple(sorted(test_list[i:j]))"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even.\n    '''\n    # calculate the number of divisors\n    divisors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n            if n // i!= i:\n                divisors.append(n // i)\n    divisors.append(n)\n    \n    # count the number of divisors\n    divisors_count = 0\n    for divisor in divisors:\n        if divisor > 1:\n            divisors_count += 1\n            \n    # check whether the count of divisors is even\n    if divisors_count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef count_divisors(n):\n    \"\"\"\n    Write a python function to check whether the count of divisors is even.\n    \"\"\"\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    if count % 2 == 0:\n        print(n, \"is an even number of divisors\")\n    else:\n        print(n, \"is an odd number of divisors\")"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    This function takes an integer n as input and returns True if the count of its divisors is even and False otherwise.\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            count += 1\n            if count == 2:\n                return False\n    return count == 2"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef count_divisors(n):\n    \"\"\"\n    Write a Python function to check whether the count of divisors is even.\n    \"\"\"\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n    count += 1 if n > 1 else 0\n    return count % 2 == 0"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef count_divisors(n): \n    '''\n    This function takes a number as input and returns whether the count of divisors is even or not.\n    If the count of divisors is even, it returns True. If the count of divisors is odd, it returns False.\n    '''\n\n    # Calculate the count of divisors using a nested loop\n    count = 0\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            count += 1\n            if count > n//i:\n                count = n//i\n    \n    # Check whether the count of divisors is even or odd\n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n    count += 1\n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef count_divisors(n):\n    \"\"\"\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    \"\"\"\n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            count += 1\n        if count > 2:\n            break\n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n\n    divisors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors.append(i)\n\n    count = len(divisors)\n    if count % 2 == 0:\n        return \"The count of divisors is even.\"\n    else:\n        return \"The count of divisors is odd.\""
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    # Calculate the number of divisors of n\n    divisors = [1]\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            divisors.append(i)\n            if n // i!= i:\n                divisors.append(n // i)\n    divisors.append(n)\n    \n    # Calculate the count of even and odd divisors\n    even_divisors = 0\n    odd_divisors = 0\n    for divisor in divisors:\n        if divisor % 2 == 0:\n            even_divisors += 1\n        else:\n            odd_divisors += 1\n    \n    # Check whether the count of divisors is even or odd\n    if even_divisors % 2 == 0:\n        print(\"The count of even divisors is even.\")\n    else:\n        print(\"The count of even divisors is odd.\")\n        print(\"The count of odd divisors is even.\")"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. \n    https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n    if count % 2 == 0:\n        print(\"The count of divisors is even.\")\n    else:\n        print(\"The count of divisors is odd.\")\n\ncount_divisors(60)"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    This function takes a list of integers as input and returns the sum of all odd length subarrays in the list.\n    \"\"\"\n    total = 0\n    n = len(arr)\n    for i in range(1, n):\n        for j in range(i):\n            if i!= j and i % 2!= 0 and j % 2!= 0 and i - j < 3:\n                total += arr[i]\n    return total"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    # Initialize sum and count\n    sum = 0\n    count = 0\n\n    # Iterate through the array\n    for i in range(len(arr)):\n        # If the current index is odd, add the sum of the current odd length subarray to sum and increment count\n        if i % 2!= 0:\n            sum += sum_odd_subarray(arr, i)\n            count += 1\n\n    # Return the sum and count\n    return sum, count\n\ndef sum_odd_subarray(arr, start):\n    '''\n    Helper function to sum the odd length subarray starting at index start.\n    '''\n    # Initialize sum and count\n    sum = 0\n    count = 0\n\n    # Iterate through the odd length subarray starting at start\n    for i in range(start, len(arr), 2):\n        sum += arr[i]\n        count += 1\n\n    # Return the sum\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    \"\"\"\n    n = len(arr)\n    res = 0\n\n    for i in range(1, n+1):\n        for j in range(0, n-i+1):\n            sub_arr = arr[j:j+i]\n            if sum(sub_arr) % 2!= 0:\n                res += sum(sub_arr)\n\n    return res\n"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of all odd length subarrays.\n    \"\"\"\n    sum = 0\n    n = len(arr)\n    for i in range(n - 1):\n        if i % 2!= 0:\n            sum += sum_of_subarray(arr, i, i + 1)\n    return sum\n\ndef sum_of_subarray(arr, start, end):\n    \"\"\"\n    Helper function to calculate the sum of an odd length subarray.\n    \"\"\"\n    return sum(arr[start:end:2])"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    sum_arr = []\n    for i in range(n-2):\n        if i % 2 == 0:\n            continue\n        temp_sum = 0\n        for j in range(i, i+3):\n            temp_sum += arr[j]\n        sum_arr.append(temp_sum)\n    return sum(sum_arr)"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    result = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if j-i+1 % 2 == 1:\n                result += sum(arr[i:j+1])\n    return result"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of all odd length subarrays.\n    \"\"\"\n    sum = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if j - i + 1 % 2 == 1:\n                sum += arr[j]\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of all odd length subarrays.\n    \"\"\"\n    # initialize a variable to store the sum of odd length subarrays\n    total_sum = 0\n    \n    # iterate through the array\n    for i in range(len(arr)):\n        # if the current index is odd, add the current element to the total sum\n        if i % 2!= 0:\n            total_sum += arr[i]\n    \n    # return the total sum of odd length subarrays\n    return total_sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    sum_of_odd_length = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1, 2):\n            if j > i:\n                sum_of_odd_length += arr[j-1]\n    return sum_of_odd_length"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Find the sum of all odd length subarrays of a given array.\n    \"\"\"\n    n = len(arr)\n    total_sum = 0\n    for i in range(1, n):\n        sub_sum = 0\n        left_end = 0\n        right_end = i\n        while right_end < n:\n            sub_sum += arr[right_end]\n            if right_end - left_end == 1:\n                total_sum += sub_sum\n            right_end += 1\n    return total_sum"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    This function takes three parameters, r, g, and b, which are the red, green, and blue values of an RGB color.\n    It converts these values to their corresponding HSV values and returns them as a tuple.\n\n    This function was derived from an algorithm published by Wikipedia.\n    '''\n    \n    # Convert RGB to HSV\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n    h = 0\n    s = 0\n    v = max_value\n    \n    if max_value == min_value:\n        s = 0\n    else:\n        delta = max_value - min_value\n        if r == max_value:\n            h = 60 * ((g - b) / delta)\n        elif g == max_value:\n            h = 60 * (2 + (b - r) / delta)\n        else:\n            h = 60 * (4 + (r - g) / delta)\n        \n        if h < 0:\n            h += 360\n            \n        s = delta / max_value\n        \n    return (int(h), int(s*100), int(v*100))"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n    delta = max_value - min_value\n    h = 0\n    s = 0\n    v = max_value / 255.0\n    \n    if max_value == min_value:\n        h = 0\n    elif max_value == r:\n        h = (g - b) / delta\n    elif max_value == g:\n        h = 2 + (b - r) / delta\n    else:\n        h = 4 + (r - g) / delta\n        \n    if delta == 0:\n        s = 0\n    else:\n        s = delta / (max_value + min_value)\n        \n    if s == 0:\n        hsv = (h, 0, v)\n    else:\n        if h < 0:\n            h += 6\n        hsv = (h / 60.0, s, v)\n        \n    return hsv"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Convert an RGB color value to HSV color space.\n    '''\n    \n    # Convert the RGB values to their respective component values\n    R = r / 255.0\n    G = g / 255.0\n    B = b / 255.0\n    \n    # Find the maximum and minimum values of the RGB values\n    max_val = max(R, G, B)\n    min_val = min(R, G, B)\n    \n    # Calculate the value and saturation for the RGB color\n    if max_val == min_val:\n        hue = 0\n        saturation = 0\n    else:\n        delta = max_val - min_val\n        saturation = delta / max_val\n        \n        if R == max_val:\n            hue = (G - B) / delta\n        elif G == max_val:\n            hue = 2 + (B - R) / delta\n        else:\n            hue = 4 + (R - G) / delta\n        \n        # Convert the hue value to the range 0 to 1\n        if hue < 0:\n            hue += 1\n        \n        hue = hue / 6\n    \n    # Calculate the value and brightness for the HSV color\n    value = max_val\n    \n    # Convert the HSV values to a tuple\n    return (hue, saturation, value)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    This function converts an RGB color to HSV color model.\n    HSV stands for Hue, Saturation and Value.\n    https://en.wikipedia.org/wiki/HSL_and_HSV\n    \"\"\"\n\n    r, g, b = r/255.0, g/255.0, b/255.0\n\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n\n    h = 0\n    s = 0\n    v = max_val\n\n    delta = max_val - min_val\n\n    if max_val == min_val:\n        h = 0\n    elif max_val == r:\n        h = (g - b) / delta\n    elif max_val == g:\n        h = 2 + (b - r) / delta\n    else:\n        h = 4 + (r - g) / delta\n\n    h = round(h * 60)\n\n    if h < 0:\n        h += 360\n\n    s = round(delta / max_val * 100) if max_val!= 0 else 0\n\n    v = round(max_val * 100)\n\n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # Convert R, G and B values to float\n    r, g, b = float(r)/255, float(g)/255, float(b)/255\n    \n    # Find the maximum and minimum values of the RGB color\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    \n    # Find the difference between the maximum and minimum values\n    diff = max_val - min_val\n    \n    # Calculate the value of Hue\n    if max_val == min_val:\n        hue = 0\n    elif max_val == r:\n        hue = (g - b) / diff\n    elif max_val == g:\n        hue = 2 + (b - r) / diff\n    else:\n        hue = 4 + (r - g) / diff\n    \n    # Calculate the value of Saturation\n    if diff == 0:\n        saturation = 0\n    else:\n        saturation = diff / max_val\n    \n    # Calculate the value of Value\n    value = max_val\n    \n    # Normalize the Hue value to be between 0 and 1\n    if hue < 0:\n        hue += 6\n    elif hue > 6:\n        hue -= 6\n    \n    # Convert the values to integer and return the result\n    return (int(hue*65535), int(saturation*65535), int(value*65535))"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    \n    Arguments:\n    r -- int, red value of the color\n    g -- int, green value of the color\n    b -- int, blue value of the color\n    \n    Returns:\n    h -- int, hue of the color in degrees\n    s -- int, saturation of the color in percentage\n    v -- int, value of the color in percentage\n    '''\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n    delta = max_value - min_value\n    if max_value == 0:\n        h = 0\n        s = 0\n    elif delta == 0:\n        h = 0\n    else:\n        if max_value == r:\n            h = 60 * ((g - b) / delta)\n        elif max_value == g:\n            h = 60 * ((b - r) / delta) + 120\n        else:\n            h = 60 * ((r - g) / delta) + 240\n        if h < 0:\n            h += 360\n        elif h > 360:\n            h -= 360\n    s = (max_value == 0) * 0 + (max_value - min_value) / max_value * 100\n    v = max_value / 255 * 100\n    return int(h), int(s), int(v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color.\n    \"\"\"\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    h = 0\n    s = 0\n    v = cmax\n    if delta == 0:\n        h = 0\n    elif cmax == r:\n        h = ((g - b) / delta) % 6\n    elif cmax == g:\n        h = (b - r) / delta + 2\n    else:\n        h = (r - g) / delta + 4\n    h *= 60\n    if h < 0:\n        h += 360\n    s = delta / (1 - abs(2 * cmax - 1))\n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    \"\"\"\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    h = 0\n    s = 0\n    v = max_val\n\n    delta = max_val - min_val\n    if delta == 0:\n        h = 0\n    elif max_val == r:\n        h = 60 * (((g - b) / delta) % 6)\n    elif max_val == g:\n        h = 60 * (((b - r) / delta) + 2)\n    else:\n        h = 60 * (((r - g) / delta) + 4)\n\n    if h < 0:\n        h += 360\n\n    s = delta / max_val\n\n    if s == 0:\n        v = 0\n\n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color.\n    \"\"\"\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n\n    if max_value == min_value:\n        h = s = v = 0\n    else:\n        d = max_value - min_value\n        s = max_value / 255\n        if max_value == r:\n            h = (g - b) / d + (g < b) * 6\n        elif max_value == g:\n            h = (b - r) / d + 2\n        elif max_value == b:\n            h = (r - g) / d + 4\n\n        h /= 6\n\n        if h < 0:\n            h += 1\n\n    return (h * 360, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    This function takes in the red, green, and blue values of an RGB color and returns the HSV color.\n    \n    Args:\n        r (int): The red value of the RGB color.\n        g (int): The green value of the RGB color.\n        b (int): The blue value of the RGB color.\n    \n    Returns:\n        tuple: A tuple containing the Hue (float), Saturation (float), and Value (float) of the HSV color.\n    \"\"\"\n    \n    # Convert the RGB color values to float and divide by 255 to get values between 0 and 1.\n    r = r / 255.0\n    g = g / 255.0\n    b = b / 255.0\n    \n    # Find the minimum and maximum values among the RGB color values.\n    min_val = min(r, g, b)\n    max_val = max(r, g, b)\n    \n    # Find the difference between the maximum and minimum values.\n    delta = max_val - min_val\n    \n    # If the maximum value is 0, then the color is a shade of gray.\n    if max_val == 0:\n        h = 0\n        s = 0\n    else:\n        # Calculate the Hue by finding the degrees of the color where the maximum value lies.\n        if r == max_val:\n            h = (g - b) / delta\n        elif g == max_val:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n        \n        # Convert the Hue to degrees.\n        h = h * 60\n        \n        # If the Hue is less than 0, add 360 degrees.\n        if h < 0:\n            h = h + 360\n        \n        # Calculate the Saturation by dividing the difference between the maximum and minimum values by the maximum value.\n        s = delta / max_val\n    \n    # Calculate the Value by multiplying the difference between the maximum and minimum values by 100.\n    v = (max_val * 100.0)\n    \n    # Return a tuple containing the Hue, Saturation, and Value.\n    return (h, s, v)"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    product = 1\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n            \n        if even_count > 0 and odd_count > 0:\n            product *= 2\n            even_count = 0\n            odd_count = 0\n            \n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def mul_even_odd(list1):\n    \"\"\"\n    Write a function to find the product of first even and odd number of a given list.\n    \"\"\"\n    sum1 = 0\n    sum2 = 0\n    count = 0\n    for i in list1:\n        count += 1\n        if count % 2 == 0:\n            sum1 += i\n        else:\n            sum2 += i\n    return (sum1 * sum2)"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def mul_even_odd(lst):\n    '''\n    This function takes a list as input and returns the product of the first even and odd numbers in the list.\n    If the list contains any other number, it returns 0.\n    '''\n    # Initialize variables to store the product of even and odd numbers\n    even_product = odd_product = 1\n\n    # Loop through the list\n    for num in lst:\n        # Check if the number is even\n        if num % 2 == 0:\n            # Multiply even_product by the current number\n            even_product *= num\n        else:\n            # Multiply odd_product by the current number\n            odd_product *= num\n\n    # If the list contains any other number, return 0\n    if any(num % 2!= 0 for num in lst):\n        return 0\n\n    # Return the product of even_product and odd_product\n    return even_product * odd_product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def mul_even_odd(lst):\n    even_count = 0\n    odd_count = 0\n    product = 1\n    \n    for i in lst:\n        if i % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        \n        product *= i\n    \n    if even_count == 0 and odd_count == 0:\n        return None\n    \n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def mul_even_odd(lst):\n    even_count = 0\n    odd_count = 0\n    product = 1\n\n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n            product *= num\n\n    if even_count > 0 and odd_count > 0:\n        return product\n    else:\n        return None"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def mul_even_odd(list1):\n    \"\"\"\n    Write a function to find the product of first even and odd number of a given list.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    product = 1\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n            \n        if even_count > 0 and odd_count > 0:\n            product = num * product\n            even_count = 0\n            odd_count = 0\n    \n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    first_even = None\n    first_odd = None\n    for num in list1:\n        if num % 2 == 0:\n            if first_even is None:\n                first_even = num\n            else:\n                first_even *= num\n        else:\n            if first_odd is None:\n                first_odd = num\n            else:\n                first_odd *= num\n    return first_even * first_odd"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def mul_even_odd(lst):\n    even_sum = 1\n    odd_sum = 1\n    for num in lst:\n        if num % 2 == 0:\n            even_sum *= num\n        else:\n            odd_sum *= num\n    return even_sum * odd_sum"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def mul_even_odd(lst):\n    '''\n    This function takes a list of integers as input and returns the product of the first even and odd number of the list.\n    '''\n    even_count = 0\n    odd_count = 0\n    product = 1\n\n    # iterating through the list\n    for num in lst:\n        # checking if the number is even\n        if num % 2 == 0:\n            even_count += 1\n        # checking if the number is odd\n        else:\n            odd_count += 1\n        # checking if both even and odd numbers are present\n        if even_count > 0 and odd_count > 0:\n            break\n\n    # calculating the product of even and odd numbers\n    product = even_count * odd_count\n\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def mul_even_odd(lst):\n    even_count = 0\n    odd_count = 0\n    result = 1\n    \n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        \n        result *= (num // 2)\n    \n    if even_count == 0 or odd_count == 0:\n        return \"The list does not contain any even or odd number.\"\n    else:\n        return result"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string into a list of tuples\n    string_list = test_str.split(' ')\n    # Create an empty list to store the integer tuples\n    int_list = []\n    # Loop through the list of tuples\n    for tup in string_list:\n        # Convert the string to an integer and append it to the list\n        int_list.append(int(tup))\n    # Return the list of integer tuples\n    return int_list"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Remove spaces from the string\n    test_str = test_str.replace(' ', '')\n\n    # Convert string to integer list\n    int_list = [int(i) for i in test_str.split(',')]\n\n    # Convert integer list to tuple\n    int_tuple = tuple(int_list)\n\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string by comma to get individual strings\n    str_list = test_str.split(',')\n    # Initialize an empty list to store the converted integers\n    int_list = []\n    # Iterate over each string and convert it to an integer\n    for str in str_list:\n        try:\n            int_list.append(int(str))\n        except ValueError:\n            print('Invalid input')\n            return None\n    # Convert the list to tuple and return it\n    return tuple(int_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n    \"\"\"\n    def str_to_int(string):\n        \"\"\"\n        Convert a string to an integer.\n        \"\"\"\n        return int(string)\n    \n    def str_to_tuple(string):\n        \"\"\"\n        Convert a string to a tuple of integers.\n        \"\"\"\n        return tuple(str_to_int(char) for char in string)\n    \n    try:\n        return tuple_to_int(str_to_tuple(test_str))\n    except ValueError:\n        return \"Invalid input\""
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Convert tuple string to tuple\n    test_tuple = tuple(test_str.split(','))\n\n    # Convert tuple to integer tuple\n    int_tuple = tuple(int(i) for i in test_tuple)\n\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n    \"\"\"\n    # Convert the string to a list of characters\n    char_list = list(test_str)\n    # Initialize an empty integer tuple\n    int_tuple = ()\n    # Iterate through the list of characters\n    for char in char_list:\n        # If the character is an integer, append it to the integer tuple\n        if char.isdigit():\n            int_tuple += (int(char),)\n    # Return the integer tuple\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the given string by commas\n    str_list = test_str.split(',')\n\n    # Initialize an empty list to store the converted integers\n    int_list = []\n\n    # Loop through each element of the list and convert it to an integer\n    for elem in str_list:\n        # Convert the string to an integer\n        int_elem = int(elem)\n\n        # Add the integer to the list\n        int_list.append(int_elem)\n\n    # Return the converted integer list as a tuple\n    return tuple(int_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    result = []\n    for i in test_str:\n        try:\n            result.append(int(i))\n        except ValueError:\n            pass\n    return tuple(result)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    def convert_to_int(s):\n        return int(s)\n    \n    def split_string_to_tuple(s):\n        return tuple(map(convert_to_int, s.split(',')))\n    \n    return split_string_to_tuple(test_str)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    try:\n        str_tup = eval(test_str)\n        if isinstance(str_tup, tuple):\n            int_tup = tuple(int(x) for x in str_tup)\n            return int_tup\n        else:\n            return None\n    except Exception as e:\n        print(\"Error:\", e)"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # Use the bisect module to find the insertion point of x in a.\n    index = bisect.bisect_right(a, x)\n    \n    # If x is already present in the list, return the index of the last occurrence.\n    if index < len(a) and a[index] == x:\n        return index\n    \n    # Otherwise, return the index of the first occurrence of x after the insertion point.\n    return index - 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    i = bisect.bisect_left(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    else:\n        j = bisect.bisect_right(a, x)\n        return j - 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index < len(a) and a[index] == x:\n        return index\n    else:\n        return bisect.bisect_left(a, x) - 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index == len(a):\n        return index\n    \n    # check if x is already present in the list\n    if a[index] == x:\n        return index\n    \n    # check if x is greater than the element at index\n    if a[index] < x:\n        return index + 1\n    \n    # if x is less than the element at index, then search for the correct insertion point\n    return right_insertion(a[:index], x)"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    idx = bisect.bisect_right(a, x)\n    if idx == len(a):\n        return idx\n    if a[idx] == x:\n        return idx\n    if a[idx-1] == x:\n        return idx-1\n    return idx"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    if i!= len(a):\n        if a[i] == x:\n            return i\n        else:\n            j = bisect.bisect_left(a, x)\n            return j\n    else:\n        return len(a)"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    if i == len(a) or a[i]!= x:\n        i -= 1\n    return i"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n\n    # Use binary search to find the position of x in the sorted list a\n    i = bisect.bisect_left(a, x)\n\n    # If x is greater than all the elements in the list, return len(a)\n    if i == len(a):\n        return i\n\n    # If x is smaller than the first element in the list, return 0\n    if a[i] < x:\n        return 0\n\n    # Otherwise, find the right insertion point by comparing each element in the sorted list\n    while i < len(a) and a[i] == x:\n        i += 1\n\n    return i"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_right(a, x)\n    if index == len(a):\n        index = len(a)\n    return index"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'[ab]*b[ab]*b[ab]*'\n    result = re.search(pattern, text)\n    if result:\n        print(f\"Match found: {result.group()}\")\n    else:\n        print(\"No match found.\")"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r\"a.*b{3}\"\n    match = re.search(pattern, text)\n    if match:\n        print(\"Found a match!\")\n        print(match.group())\n    else:\n        print(\"No match found.\")"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b{3}'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a[b]{3}'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = re.compile(r'a(?=b{3})')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def text_match_three(text):\n    pattern = r'a.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.*b{3}'\n    matches = re.findall(pattern, text)\n    return matches\n\ntext = \"The quick brown fox jumps over the lazy dog\"\nmatches = text_match_three(text)\nprint(matches)"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a+b+b+b+'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = re.compile(r'a.*b{3}')\n    match = pattern.search(text)\n    if match:\n        return match.group()\n    else:\n        return None\n"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = re.compile(r'a{1}b{3}')\n    return bool(pattern.search(text))"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    # Combine the two lists into a single list\n    combined_list = test_list + [test_str]\n\n    # Convert the combined list into a tuple\n    new_tuple = tuple(combined_list)\n\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple(str(test_str) + str(test_list))\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Create a new list from the given string and list\n    new_list = test_list + [test_str]\n    \n    # Convert the new list into a tuple\n    new_tuple = tuple(new_list)\n    \n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n\n    :param test_list: A list containing the elements to be included in the new tuple.\n    :param test_str: A string containing the characters to be included in the new tuple.\n    :return: A new tuple created from the given list and string.\n    \"\"\"\n\n    # Concatenate the list and string into a single string\n    combined_string = ''.join(test_list) + test_str\n\n    # Convert the combined string into a list of characters\n    char_list = list(combined_string)\n\n    # Convert the list of characters into a tuple\n    new_tuple = tuple(char_list)\n\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list) + tuple(test_str)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # concatenate the list and string\n    new_tuple = test_list + (test_str,)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    # convert the list to a tuple\n    test_list = tuple(test_list)\n    # create a new tuple with the string as the first element and the list as the second\n    new_tuple = (test_str, test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple_list = []\n    for i in test_list:\n        new_tuple_list.append((i, test_str))\n    return tuple(new_tuple_list)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_str, *test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple(test_str + \" \" + str(item) for item in test_list)\n    return new_tuple"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            count += nums[i]\n        else:\n            if count % 2!= 0:\n                return False\n            else:\n                count = 0\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        even_count = 0\n        for j in range(i, len(nums), 2):\n            if nums[j] % 2 == 0:\n                even_count += 1\n            else:\n                break\n        if even_count == 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_position(nums):\n    for i in range(len(nums)):\n        if i % 2 == 0 and len(set(nums[i])) % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            count = 0\n            for j in range(i, len(nums)):\n                if nums[j] % 2 == 0:\n                    count += 1\n                    if count == 2:\n                        return True\n    return False"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_position(nums):\n    \"\"\"\n    Write a python function to check whether every even index contains even numbers of a given list.\n    \"\"\"\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if len(nums[i]) % 2 == 0:\n                continue\n            else:\n                return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_position(nums):\n    even_count = 0\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            even_count += 1\n    return even_count == len(nums)"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            even_count += 1\n            if even_count > 1:\n                return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0 and nums[i] % 2 == 0:\n            continue\n        else:\n            return False\n    return True"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for i in test_tup:\n        if type(i)!= tuple:\n            new_tup.append(i)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    flat_list = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            for sub_item in item:\n                flat_list.append(sub_item)\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    while True:\n        if isinstance(test_tup, tuple):\n            test_tup = tuple(filter(lambda x: not isinstance(x, tuple), test_tup))\n        else:\n            break\n    return test_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # check if the given tuple is not empty\n    if test_tup:\n        # check if the first element of the tuple is a tuple\n        if isinstance(test_tup[0], tuple):\n            # recursive call to remove tuples from the first element\n            return remove_nested(test_tup[0]) + remove_nested(test_tup[1:])\n        else:\n            # return the given tuple\n            return test_tup\n    else:\n        # return an empty list if the given tuple is empty\n        return []"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    def remove_tuples(sub_tup):\n        '''\n        Write a recursive function to remove tuples from a sub-tuple.\n        '''\n        if not sub_tup:\n            return None\n        elif isinstance(sub_tup[0], tuple):\n            return remove_tuples(sub_tup[1:])\n        else:\n            return sub_tup[1:]\n    \n    return remove_tuples(test_tup)"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    if isinstance(test_tup, tuple):\n        return tuple(remove_nested(item) for item in test_tup)\n    else:\n        return test_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # Create an empty list to store the flattened version of the input tuple\n    flattened_list = []\n    # Iterate through each element in the input tuple\n    for element in test_tup:\n        # If the element is a tuple, recursively call the function to remove it from the flattened list\n        if isinstance(element, tuple):\n            flattened_list.extend(remove_nested(element))\n        # If the element is not a tuple, append it to the flattened list\n        else:\n            flattened_list.append(element)\n    # Return the flattened list without the nested tuples\n    return flattened_list"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    # initialize an empty list to store the non-nested tuples\n    non_nested_list = []\n    \n    # loop through each element in the input tuple\n    for element in test_tup:\n        # if the element is not a tuple, add it to the non_nested_list\n        if not isinstance(element, tuple):\n            non_nested_list.append(element)\n        # if the element is a tuple, recursively call the remove_nested function on it\n        else:\n            remove_nested(element)\n    \n    # return the non-nested list\n    return non_nested_list"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result = []\n    for elem in test_tup:\n        if isinstance(elem, tuple):\n            result.extend(remove_nested(elem))\n        else:\n            result.append(elem)\n    return result"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    flat_list = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            flat_list.extend(item)\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_lists(input_list):\n    '''\n    Counts the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_list(input_list): \n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_list(input_list):\n    '''\n    This function takes a list of lists as input and returns the number of lists in the input.\n    '''\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_list(input_list):\n    '''\n    This function counts the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n\n    count = 0\n\n    for item in input_list: \n        if type(item) == list: \n            count += 1 \n            count = count_list(item)\n\n    return count "
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_list(input_list):\n    count = 0\n    for element in input_list:\n        if isinstance(element, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_list(input_list): \n    count = 0\n    for i in input_list: \n        if type(i) == list: \n            count += 1\n    return count"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    index = -1\n    for i in range(len(arr)):\n        if arr[i] == x:\n            index = i\n            break\n    return index"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    # Initialize the left and right pointers\n    left = 0\n    right = len(arr) - 1\n\n    # Iterate through the array until the left pointer is less than or equal to the right pointer\n    while left <= right:\n        # Find the mid index\n        mid = left + (right - left) // 2\n\n        # If the element at the mid index is equal to the given x, return the mid index\n        if arr[mid] == x:\n            return mid\n\n        # If the element at the mid index is greater than the given x, update the right pointer to mid-1\n        elif arr[mid] > x:\n            right = mid - 1\n\n        # If the element at the mid index is less than the given x, update the left pointer to mid+1\n        else:\n            left = mid + 1\n\n    # If the element is not found in the array, return -1\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last(arr,x):\n    '''\n    This function takes in a sorted array and an element x as input and returns the last position of the element x in the array.\n    '''\n    l = len(arr)\n    for i in range(l):\n        if arr[i] == x:\n            return i\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    left = 0\n    right = len(arr) - 1\n    mid = 0\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if arr[mid] == x:\n            # If the mid element is equal to x, then move the right pointer to mid+1\n            # until the mid element is not equal to x anymore.\n            while mid + 1 < len(arr) and arr[mid + 1] == x:\n                mid += 1\n\n            return mid\n        elif arr[mid] < x:\n            # If the mid element is less than x, then move the left pointer to mid+1\n            left = mid + 1\n        else:\n            # If the mid element is greater than x, then move the right pointer to mid-1\n            right = mid - 1\n\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last(arr,x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n\n    :param arr: the sorted array\n    :param x: the element to search for\n    :return: the last position of x in arr, or -1 if x is not in arr\n    \"\"\"\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    l,r = 0, len(arr)-1\n    while l <= r:\n        mid = l + (r-l)//2\n        if arr[mid] == x:\n            while mid > 0 and arr[mid-1] == x:\n                mid -= 1\n            return mid\n        elif arr[mid] < x:\n            l = mid+1\n        else:\n            r = mid-1\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes an array and an element x as input and returns the last position of the element in the sorted array.\n    \"\"\"\n    low = 0\n    high = len(arr) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        if arr[mid] == x:\n            low = mid + 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return low"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function finds the last position of an element in a sorted array using binary search.\n    \"\"\"\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # Find the first index of x in the array\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            right = mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    # Return the index of x if found, else -1\n    return left if left!= -1 and arr[left] == x else -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a Python function to find the last position of an element in a sorted array.\n    \"\"\"\n    # Initialize the left pointer to the first index of the array\n    left = 0\n    # Initialize the right pointer to the last index of the array\n    right = len(arr) - 1\n\n    # Find the last occurrence of the element in the array\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            # If the element is found, then update the right pointer to mid - 1\n            right = mid - 1\n        elif arr[mid] < x:\n            # If the element is in the right half of the array, then move the left pointer to mid + 1\n            left = mid + 1\n        else:\n            # If the element is in the left half of the array, then move the right pointer to mid - 1\n            right = mid - 1\n\n    # If the element was not found in the array, then return -1\n    return -1 if left > right else left"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r\"^a.*b$\"\n    result = re.search(pattern, text)\n    if result:\n        return result.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'^a.*b$'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a[^b]*b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'a\\w*b')\n    result = pattern.search(text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a[^b]*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return 'No match found'"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*b'\n    return re.search(pattern, text)"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = re.compile(r'^[aA]\\w*b$')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for value in dict.values():\n        sum += value\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum_of_items = 0\n    for key in dict:\n        sum_of_items += dict[key]\n    return sum_of_items"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict.values():\n        total += item\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key, value in dict.items():\n        sum += value\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key, value in dict.items():\n        sum += value\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict.values():\n        total += item\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total_sum = 0\n    for value in dict.values():\n        total_sum += value\n    return total_sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for value in dict.values():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for value in dict.values():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict.values():\n        total += item\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_odd(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    if n < 1:\n        return \"Invalid input\"\n    else:\n        l = 1\n        r = n\n        sum = 0\n        while l <= r:\n            if l % 2!= 0:\n                sum += l\n            l += 1\n        return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    l, r = 1, n #set the range of the natural numbers\n    total = 0 #initialize the sum variable\n    for i in range(l, r+1, 2): #iterate through the odd numbers within the range\n        total += i #add the odd numbers to the sum variable\n    return total #return the sum of all odd numbers"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l, r = 1, n\n    sum = 0\n    while l <= r:\n        if l % 2!= 0:\n            sum += l\n        l += 1\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    # initialize the sum variable to 0\n    sum = 0\n    # loop from 1 to n (inclusive)\n    for i in range(1, n+1):\n        # check if the number is odd (using modulo operator)\n        if i % 2 == 1:\n            # add the odd number to the sum\n            sum += i\n    # return the sum\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_odd(n): \n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    l, r = 1, n\n    odd_sum = 0\n    \n    while l <= r:\n        if l % 2!= 0:\n            odd_sum += l\n        l += 1\n        \n    return odd_sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_odd(l, r):\n    \"\"\"\n    This function takes two arguments, 'l' and 'r', representing the lower and upper bounds of the range \n    over which to find the sum of odd natural numbers. The function returns the sum of all odd natural \n    numbers within the given range.\n    \"\"\"\n    total = 0\n    for i in range(l, r+1):\n        if i % 2!= 0:\n            total += i\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n\n    # input the range of integers to find the sum of odd natural numbers within it\n    l = int(input(\"Enter the lower limit: \"))\n    r = int(input(\"Enter the upper limit: \"))\n\n    # initialize a variable to store the sum of odd natural numbers\n    sum = 0\n\n    # loop through all the natural numbers within the given range and check if each number is odd or not\n    for i in range(l, r+1):\n\n        # if the current number is odd, add it to the sum variable\n        if i % 2!= 0:\n            sum += i\n\n    # return the sum of odd natural numbers\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    # initialize the sum variable to 0\n    sum = 0\n    \n    # loop through the range from 1 to n\n    for i in range(1, n+1):\n        # check if the current number is odd\n        if i % 2!= 0:\n            # add the current number to the sum\n            sum += i\n    \n    # return the sum\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    # initialize variables to keep track of sum and count\n    sum_of_odds = 0\n    count = 0\n\n    # loop through range from l to r (inclusive)\n    for i in range(l, r+1):\n        # check if i is odd and increment count if it is\n        if i % 2!= 0:\n            sum_of_odds += i\n            count += 1\n\n    # return the sum of odds and count of odds\n    return sum_of_odds, count"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for num in arr:\n        sum += num\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    sum = 0\n    for num in arr:\n        sum += num\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    total = 0\n    for i in arr:\n        total += i\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "There is no problem to solve in this Python script. It is just a stub for the `_sum` function that takes an array as input and returns its sum. The function will be completed in a separate script."
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = 0xFFFFFFFF\n    rotate_amount = d % 32\n    if rotate_amount == 0:\n        return n\n    elif rotate_amount > 0:\n        mask = 0xFFFFFFFF << (32 - rotate_amount)\n        return ((n << rotate_amount) & mask) | (n & ~mask)\n    else:\n        mask = 0xFFFFFFFF >> (-rotate_amount)\n        return ((n & mask) << (32 + rotate_amount)) | (n & ~mask)"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def left_rotate(n, d):\n    # Convert the number to binary string\n    bin_str = bin(n)[2:]\n    # Calculate the length of the binary string\n    bin_len = len(bin_str)\n    # Calculate the number of bits to be rotated\n    rot_bits = bin_len - d\n    # Calculate the number of bits to be filled in the leftmost bits of the binary string\n    fill_bits = 32 - rot_bits\n    # Fill the leftmost bits with zeros\n    fill_str = bin(0)[2:].zfill(fill_bits)\n    # Rotate the binary string to the left by rot_bits bits\n    new_bin_str = bin_str[rot_bits:] + fill_str + bin_str[:rot_bits]\n    # Convert the binary string back to an integer\n    new_n = int(new_bin_str, 2)\n    return new_n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Convert the number to a binary string\n    binary_str = bin(n)[2:]\n    \n    # Rotate the bits by d bits\n    rotated_bits = binary_str[-d:] + binary_str[:-d]\n    \n    # Convert the rotated bits back to a decimal integer\n    rotated_int = int(rotated_bits, 2)\n    \n    return rotated_int"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return ((n << d) | (n >> (32 - d))) & ((2**32) - 1)"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = 0xFFFFFFFF & ((1 << d) - 1) # calculate the mask for the rotation\n    return (n << d) | (n >> (32 - d)) & mask # rotate the bits and handle the sign bit"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n\n    # Calculate the number of bits to rotate by\n    rotation_bits = d % 32\n\n    # Shift the bits to the left by rotation_bits and mask off the bits to be rotated\n    n = (n << rotation_bits) & 0xffffffff\n\n    # Shift the bits to the right by 32 - rotation_bits and mask off the bits to be rotated\n    n = (n >> (32 - rotation_bits)) & 0xffffffff\n\n    return n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def left_rotate(n,d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Get the original binary representation of the number\n    binary_representation = bin(n)[2:]\n    # Calculate the number of bits to be rotated\n    num_bits_to_rotate = len(binary_representation) - d\n    \n    # Pad the original binary representation with zeros\n    padded_binary_representation = binary_representation.zfill(num_bits_to_rotate)\n    \n    # Get the rotated binary representation\n    rotated_binary_representation = padded_binary_representation[d:] + padded_binary_representation[:d]\n    \n    # Convert the rotated binary representation to an integer\n    rotated_number = int(rotated_binary_representation, 2)\n    \n    # Return the rotated number\n    return rotated_number"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def left_rotate(n, d):\n    # convert the integer to a binary string and pad it with zeros to a length of d bits\n    bin_str = bin(n)[2:].zfill(d)\n    # reverse the binary string\n    reversed_str = bin_str[::-1]\n    # convert the reversed binary string back to an integer\n    rotated_num = int(reversed_str, 2)\n    return rotated_num"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to rotate left bits by d bits a given number.\n    '''\n    # Calculate the number of bits to rotate\n    bits_to_rotate = d % 32\n\n    # Shift the number to the left by the number of bits to rotate\n    shifted_n = n << bits_to_rotate\n\n    # Shift the number to the right by the number of bits to rotate\n    shifted_n_right = n >> (32 - bits_to_rotate)\n\n    # Combine the two shifted numbers\n    n_rotated = shifted_n_right | shifted_n\n\n    # Return the rotated number\n    return n_rotated"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def left_rotate(n, d):\n    # Convert the number to binary string and calculate the length of the binary string\n    bin_str = format(n, '032b')\n    len_bin = len(bin_str)\n\n    # If d is greater than the length of the binary string, rotate d % len_bin bits to the left\n    if d > len_bin:\n        d = d % len_bin\n\n    # Rotate the binary string to the left by d bits\n    rotated_bin_str = bin_str[-d:] + bin_str[:-d]\n\n    # Convert the rotated binary string to decimal and return the result\n    return int(rotated_bin_str, 2)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # Use regular expression to remove all spaces\n    text = re.sub(r'\\s+','', text)\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    \"\"\"\n    Write a function to remove all whitespaces from a string.\n    \"\"\"\n    return re.sub(r'\\s+','', text).strip()"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # use regex to remove all whitespace characters\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    # Define a regular expression pattern to match all whitespaces\n    pattern = re.compile(r'\\s+')\n    # Use the pattern to replace all whitespaces with an empty string\n    return pattern.sub('', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text).strip()"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text).strip()"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_three_equal(x,y,z):\n    count = 0\n    if x == y == z:\n        count += 1\n    if y == z == x:\n        count += 1\n    if z == x == y:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(x, y+1):\n        if i == x or i == y or i == z:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_three_equal(x, y, z):\n    count = 0\n    if x == y and x == z:\n        count += 1\n    elif y == x and y == z:\n        count += 1\n    elif z == x and z == y:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y == z:\n        count += 1\n    elif x == y or x == z or y == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_three_equal(x, y, z):\n    count = 0\n    for i in range(x, y+1):\n        for j in range(x, y+1):\n            if i!= j:\n                for k in range(x, y+1):\n                    if i!= k and j!= k:\n                        if i == x or j == x or k == x or i == y or j == y or k == y:\n                            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    This function takes three integers as input and counts the number of equal numbers between them.\n    \"\"\"\n    count = 0\n    if x == y and y == z:\n        count += 1\n    if x == y or y == z:\n        count += 1\n    if x == z or x == y:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_three_equal(x, y, z):\n    count = 0\n    if x == y == z:\n        count += 1\n    if y == x == z:\n        count += 1\n    if z == x == y:\n        count += 1\n    if x == y == z:\n        count += 1\n    if y == x == z:\n        count += 1\n    if z == x == y:\n        count += 1\n    if x == y == z:\n        count += 1\n    if y == x == z:\n        count += 1\n    if z == x == y:\n        count += 1\n    if x == y == z:\n        count += 1\n    if y == x == z:\n        count += 1\n    if z == x == y:\n        count += 1\n    if x == y == z:\n        count += 1\n    if y == x == z:\n        count += 1\n    if z == x == y:\n        count += 1\n    if x == y == z:\n        count += 1\n    if y == x == z:\n        count += 1\n    if z == x == y:\n        count += 1\n    if x == y == z:\n        count += 1\n    if y == x == z:\n        count += 1\n    if z == x == y:\n        count += 1\n    if x == y == z:\n        count += 1\n    if y == x == z:\n        count += 1\n    if z == x == y:\n        count += 1\n    if x == y == z:\n        count += 1\n    if y == x == z:\n        count += 1\n    if z == x == y:\n        count += 1\n    if x == y == z:\n        count += 1\n    if y == x == z:\n        count += 1\n    if z == x == y:\n        count += 1\n    if x == y == z:\n        count += 1\n    if y == x == z:\n        count += 1\n    if z == x == y:\n        count += 1\n    if x == y == z:\n        count += 1\n    if y == x == z:\n        count += 1\n    if z == x == y:\n        count += 1\n    if x == y == z:\n        count += 1\n    if y == x == z:\n        count += 1\n    if z == x == y:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    for i in range(1, x+1):\n        if i == x:\n            continue\n        if i == y:\n            continue\n        if i == z:\n            continue\n        if i == x+y and i == x+z:\n            count += 1\n        elif i == x-y and i == x-z:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(3):\n        if x == y == z == i:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y and y == z:\n        count += 1\n    if x == y and x == z:\n        count += 1\n    if y == x and y == z:\n        count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_rotation(arr):\n    # Function to count the number of rotations required to generate a sorted array\n    n = len(arr)\n    for i in range(n):\n        # Check if the array is already sorted or not\n        if all(arr[i] <= arr[j] for j in range(i+1,n)):\n            return n-i\n        # If the array is not sorted, we rotate it by swapping adjacent elements\n        else:\n            arr[i], arr[i+1] = arr[i+1], arr[i]\n            n -= 1\n    return n # If the array is already sorted, return 0"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    if n <= 1:\n        return 0\n\n    for i in range(n):\n        j = i\n        while j < n - 1 and arr[j] > arr[j + 1]:\n            j += 1\n        if j == n - 1:\n            break\n\n        # Swap the elements\n        arr[i], arr[j] = arr[j], arr[i]\n\n        # Sort the remaining elements\n        k = j + 1\n        while k < n:\n            if arr[k] < arr[k - 1]:\n                # Swap the elements\n                arr[k], arr[k - 1] = arr[k - 1], arr[k]\n            k += 1\n\n        # Count the number of rotations\n        rotations = 0\n        for i in range(n):\n            if arr[i]!= arr[i + 1]:\n                break\n            rotations += 1\n        return rotations"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        if i == 0 or arr[i] > arr[i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_rotation(arr):\n    \"\"\"\n    Write a python function to count the number of rotations required to generate a sorted array.\n    \"\"\"\n    n = len(arr)\n    if n <= 1:\n        return 0\n    \n    # Find the minimum element in the array\n    min_elem = arr[0]\n    for i in range(1, n):\n        if arr[i] < min_elem:\n            min_elem = arr[i]\n    \n    # Find the number of rotations required to generate a sorted array\n    count = 0\n    for i in range(1, n):\n        if arr[i] > min_elem:\n            count += 1\n            min_elem = arr[i]\n    \n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import random\n\ndef is_sorted(arr):\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            return False\n    return True\n\ndef rotate(arr, k):\n    n = len(arr)\n    k = k % n\n    return arr[-k:] + arr[:-k]\n\ndef count_rotation(arr):\n    max_rotations = len(arr) // 2\n    i = 0\n    while True:\n        new_arr = rotate(arr, i)\n        if is_sorted(new_arr):\n            return i\n        if i == max_rotations:\n            return -1\n        i += 1"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        if arr[i] > arr[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_rotation(arr):   \n    n = len(arr)\n    # Find the maximum element in the array\n    max_val = max(arr)\n    # Initialize two pointers to the start and end of the array\n    start = 0\n    end = n - 1\n    # Initialize a variable to count the number of rotations\n    rotations = 0\n    # Loop while the two pointers are not at the same position\n    while start < end:\n        # Calculate the middle index of the array\n        mid = (start + end) // 2\n        # Check if the current element is greater than the middle element\n        if arr[mid] > arr[end]:\n            # If it is, then move the start pointer to the right\n            start = mid + 1\n        else:\n            # If it is not, then move the end pointer to the left\n            end = mid\n    # If the start pointer is still less than the end pointer, then there was only one rotation\n    if start < end:\n        rotations = 1\n    # If the maximum element is not equal to the minimum element, then there were two rotations\n    if max_val!= min(arr):\n        rotations = 2\n    # Return the number of rotations\n    return rotations"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # Count the number of rotations required to generate a sorted array\n    count = 0\n    for i in range(n):\n        j = i\n        while j < n-1 and arr[j] > arr[j+1]:\n            j += 1\n        if j!= i:\n            count += n - j\n            arr[i], arr[j] = arr[j], arr[i]\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_rotation(arr):\n    \"\"\"\n    This function counts the number of rotations required to generate a sorted array.\n    \"\"\"\n    n = len(arr)\n    for i in range(n):\n        if arr[i] < arr[i+1]:\n            return i + 1\n    return n"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_rotation(arr):\n    \"\"\"\n    Write a python function to count the number of rotations required to generate a sorted array.\n    \"\"\"\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        if i == 0:\n            continue\n        if arr[i] < arr[i-1]:\n            count += 1\n            if count == n-1:\n                break\n    return count"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function takes an integer as input and returns True if it is a perfect square, False otherwise.\n    \"\"\"\n    # If the number is less than 2, it is not a perfect square.\n    if n < 2:\n        return False\n\n    # Check if the number is divisible by any number between 2 and the square root of the number.\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n\n    # If the number is not divisible by any number between 2 and the square root of the number, it must be a perfect square.\n    return True"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # check if n is less than or equal to 0\n    if n <= 0:\n        return False\n\n    # check if n is a perfect square\n    root = int(n ** 0.5)\n    for i in range(2, root + 1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # Square root using Newton's method\n    i = 0\n    while True:\n        x = i * i\n        if x == n:\n            return True\n        elif x < n:\n            i += 1\n        else:\n            return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Returns True if n is a perfect square, False otherwise.\n    \"\"\"\n    # Taking the square root of the number and checking if it is an integer\n    sqrt_n = int(n ** 0.5)\n    return sqrt_n ** 2 == n"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # If the number is less than 2, then it is not a perfect square.\n    if n < 2:\n        return False\n    \n    # If the number is 2, then it is a perfect square.\n    if n == 2:\n        return True\n    \n    # If the number is greater than 2, then we need to check whether it is a perfect square or not.\n    # We can iterate from 1 to the square root of the number and check if each number is equal to the square root.\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    \n    return True"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    if n < 0:\n        return False\n    root = int(math.sqrt(n))\n    if root * root!= n:\n        return False\n    return True"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function checks whether a given number is a perfect square or not.\n    \"\"\"\n    if n == 1:\n        return True\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0 and n // i == i:\n            return True\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n\n    # if the number is 1 or less, it is a perfect square\n    if n <= 1:\n        return True\n\n    # check if the number is a perfect square by iterating from 2 to n-1\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n\n    # if we reach here, the number is a perfect square\n    return True"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not.\n    \"\"\"\n    # Check if the number is less than 1.\n    if n < 1:\n        return False\n    \n    # Check if the number is equal to 1.\n    elif n == 1:\n        return True\n    \n    # Check if the number is divisible by 4.\n    elif n % 4 == 0:\n        return False\n    \n    # Check if the number is divisible by any other number.\n    elif n % 4!= 0:\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        \n        return True"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    # Using the iterative approach\n    # Start with an initial estimate\n    x = n // 2\n    while x * x > n:\n        x = (x + n // x) // 2\n    while x * x < n:\n        x = (x + n // x) // 2\n    return x * x == n"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    \n    for num in arr:\n        product *= num\n    \n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_product_even(arr): \n    product = 1\n    for num in arr: \n        product *= num\n    \n    if product % 2 == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_product_even(arr):\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_product_even(arr): \n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    This function takes a list of integers as input and returns True if the product of all numbers in the list is even,\n    and False otherwise.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    Write a function to check whether the product of numbers in a list is even or not.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if len(arr) == 1:\n        return True\n    else:\n        product = arr[0] * is_product_even(arr[1:])\n        return product % 2 == 0"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = None\n    for i in range(len(lists)):\n        current_sum = 0\n        for j in range(len(lists[i])):\n            current_sum += lists[i][j]\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = lists[i]\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    This function takes in a list of lists and returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Check if the input list is empty or not\n    if not lists:\n        return []\n    \n    # Initialize variables for maximum sum and current sum\n    max_sum = sum(lists[0])\n    current_sum = lists[0][0]\n    \n    # Loop through each list in the input list\n    for i in range(1, len(lists)):\n        # Update the current sum\n        current_sum += lists[i][0]\n        \n        # Compare the current sum with the maximum sum\n        if current_sum > max_sum:\n            # Update the maximum sum\n            max_sum = current_sum\n            \n            # Initialize a new list to store the maximum sum list\n            max_sum_list = []\n            \n            # Loop through the first list to create the new list\n            for j in range(len(lists[0])):\n                max_sum_list.append(lists[0][j])\n            \n            # Loop through the remaining lists to fill up the new list\n            for j in range(i, len(lists)):\n                for k in range(len(lists[j])):\n                    max_sum_list.append(lists[j][k])\n            \n            # Return the maximum sum list\n            return max_sum_list\n    \n    # If the loop completes without finding a maximum sum, return an empty list\n    return []"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    max_sum = float('-inf')\n    max_lists = []\n    for i in range(len(lists)):\n        curr_sum = 0\n        for j in range(len(lists[i])):\n            curr_sum += lists[i][j]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            max_lists = [lists[i]]\n        elif curr_sum == max_sum:\n            max_lists.append(lists[i])\n    return max_lists"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    \"\"\"\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    \"\"\"\n    max_sum = float('-inf')\n    max_list = None\n    for sublist in lists:\n        current_sum = sum(sublist)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = sublist\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    \"\"\"\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    \"\"\"\n    \n    # initialize the maximum sum and the list of maximum sum lists\n    max_sum = -float('inf')\n    max_sum_list = None\n    \n    # iterate over all lists in the input list\n    for list_i in lists:\n        \n        # calculate the sum of elements in the current list\n        sum_i = sum(list_i)\n        \n        # check if the sum is greater than the current maximum sum\n        if sum_i > max_sum:\n            \n            # update the maximum sum and the list of maximum sum lists\n            max_sum = sum_i\n            max_sum_list = list_i\n            \n    # return the list of maximum sum lists\n    return max_sum_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = None\n\n    for sublist in lists:\n        sublist_sum = sum(sublist)\n        if sublist_sum > max_sum or (sublist_sum == max_sum and len(sublist) > len(max_list)):\n            max_sum = sublist_sum\n            max_list = sublist\n\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = []\n\n    for i in range(len(lists)):\n        current_sum = 0\n        for j in range(len(lists[i])):\n            current_sum += lists[i][j]\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = lists[i]\n\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = []\n    for i in range(len(lists)):\n        current_sum = sum(lists[i])\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = lists[i]\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Initialize a variable to store the maximum sum\n    max_sum = float('-inf')\n    \n    # Loop through each sublist in the main list\n    for sublist in lists:\n        # Initialize a variable to store the current sum\n        curr_sum = 0\n        \n        # Loop through each element in the sublist\n        for element in sublist:\n            # Add the element to the current sum\n            curr_sum += element\n            \n            # If the current sum is greater than the maximum sum, update the maximum sum\n            if curr_sum > max_sum:\n                max_sum = curr_sum\n    \n    # Create a list of lists containing the elements of each sublist, sorted by their indices\n    sorted_lists = [sorted(sublist, key=lambda x: lists.index(sublist)) for sublist in lists]\n    \n    # Create a new list containing the maximum sum sublist\n    max_sublist = []\n    \n    # Loop through each element in the sorted list\n    for i in range(len(sorted_lists[0])):\n        # Append the element to the new list\n        max_sublist.append(sorted_lists[0][i])\n    \n    # Return the new list\n    return max_sublist"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    max_sum = float('-inf')\n    result = []\n    for list in lists:\n        current_sum = sum(list)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            result = [list]\n        elif current_sum == max_sum:\n            result.append(list)\n    return result"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    run_length = 0\n    current_uppercase = False\n    max_run = 0\n    \n    # loop over each character in the string\n    for char in test_str:\n        # if the current character is uppercase, update the run length and reset the flag\n        if char.isupper():\n            current_uppercase = True\n            run_length = 1\n        else:\n            current_uppercase = False\n        \n        # if the current run is longer than the previous run, update the maximum run\n        if current_uppercase and run_length > max_run:\n            max_run = run_length\n            \n        # reset the run length and flag if the current character is not uppercase\n        if not char.isupper():\n            current_uppercase = False\n            run_length = 0\n            \n    # return the maximum run of uppercase characters\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    max_run = 0\n    current_run = 0\n    current_char = None\n    \n    for char in test_str:\n        if char.isupper():\n            if current_char is None or char.lower()!= current_char.lower():\n                current_run += 1\n            else:\n                max_run = max(max_run, current_run)\n                current_run = 0\n            current_char = char\n        else:\n            current_char = None\n    \n    if current_char is not None:\n        max_run = max(max_run, current_run)\n    \n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    run_length = 0\n    run_start = 0\n    max_length = 0\n    max_start = 0\n    for i, char in enumerate(test_str):\n        if char.isupper():\n            if i == len(test_str) - 1 or not test_str[i+1].isupper():\n                if run_length > max_length:\n                    max_length = run_length\n                    max_start = run_start\n                run_length = 0\n                run_start = i + 1\n        else:\n            run_length += 1\n    if run_length > max_length:\n        max_length = run_length\n        max_start = run_start\n    return max_length, max_start"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    \n    max_run = 0\n    count = 0\n    start = 0\n\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            count += 1\n        else:\n            if count > max_run:\n                max_run = count\n                start = i - count + 1\n            count = 0\n\n    if count > max_run:\n        max_run = count\n        start = len(test_str) - count\n\n    return start, start + max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count = 0\n    start = 0\n    max_run = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            count += 1\n            if count > max_run:\n                max_run = count\n                start = i - max_run + 1\n        else:\n            count = 0\n    return test_str[start:start+max_run]"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    \n    # initialize variables\n    max_run = 0\n    curr_run = 0\n    \n    # loop through each character in the string\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            # if the current character is uppercase, increment the run count\n            curr_run += 1\n        else:\n            # if the current character is not uppercase, reset the run count to 0\n            curr_run = 0\n            \n        # if the current run count is greater than the previous maximum run, update the maximum run\n        if curr_run > max_run:\n            max_run = curr_run\n            \n    # return the maximum run of uppercase characters in the string\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_len = 0\n    max_run = ''\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            if i == 0 or not test_str[i-1].isupper():\n                if len(max_run) < i - max_len + 1:\n                    max_run = test_str[max_len:i+1]\n                    max_len = i\n                elif len(max_run) == i - max_len + 1:\n                    max_run = test_str[max_len:i+1]\n                    max_len = i\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n\n    # Initialize variables\n    max_run = 0\n    current_run = 0\n    uppercase_count = 0\n\n    # Iterate over each character in the string\n    for char in test_str:\n        # Check if the character is uppercase\n        if char.isupper():\n            # If it is, increase the count of uppercase characters\n            uppercase_count += 1\n            # If the count of uppercase characters is greater than the current run, update the current run\n            if uppercase_count > current_run:\n                current_run = uppercase_count\n        else:\n            # If it's not, reset the count of uppercase characters and the current run\n            uppercase_count = 0\n            current_run = 0\n\n        # If the current run is greater than the maximum run, update the maximum run\n        if current_run > max_run:\n            max_run = current_run\n\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    count = 0\n    max_count = 0\n    start = 0\n    end = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            count += 1\n            end = i\n        else:\n            count = 0\n        if count > max_count:\n            max_count = count\n            start = start if start < end else end\n    return max_count, test_str[start:end+1]"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    run_count = 0\n    max_run_length = 0\n    current_run_length = 0\n    for char in test_str:\n        if char.isupper():\n            current_run_length += 1\n        else:\n            if current_run_length > max_run_length:\n                max_run_length = current_run_length\n            current_run_length = 0\n    if current_run_length > max_run_length:\n        max_run_length = current_run_length\n    return max_run_length"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Find the first odd number in a list of numbers.\n\n    Args:\n    nums (list): A list of numbers.\n\n    Returns:\n    int: The first odd number in the list, or None if the list is empty or all numbers in the list are even.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    \"\"\"\n    This function takes a list of numbers and returns the first odd number in the list.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    '''\n    This function takes a list of numbers as input and returns the first odd number in the list.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    count = 0\n    for num in test_tup:\n        if num == K:\n            count += 1\n    if count == len(test_tup):\n        print(f\"{K} found in all tuples\")\n    else:\n        print(f\"{K} not found in all tuples\")"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(set(test_tup)) == K:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n\n    # Loop through the tuples\n    for tup in test_tup:\n        # If the length of the tuple is equal to K, then return True\n        if len(tup) == K:\n            return True\n\n    # If we reach here, then all the tuples in the test_tup do not contain K\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    for i in range(len(test_tup)):\n        if test_tup[i] == K:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) >= K:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n\n    if len(test_tup) < K:\n        return False\n    \n    for i in range(K):\n        if test_tup[i] not in test_tup[:K]:\n            return False\n    \n    return True"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    # Split the tuple into a list of tuples\n    test_list = [tuple(test_tup)]\n    # Loop through each tuple in the list\n    for tup in test_list:\n        # Check if the tuple contains the K value\n        if K in tup:\n            # If it does, return True\n            return True\n    # If the loop completes without returning True, return False\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    \"\"\"\n    Check if the given tuples contain the k or not.\n    \"\"\"\n    if len(test_tup)!= K:\n        return False\n    for num in test_tup:\n        if num not in K:\n            return False\n    return True"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    # Check if both tuples have the same number of elements\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    \n    # Iterate through the tuples and compare the elements\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    \n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples are not of equal length\")\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup2)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must have the same number of elements.\")\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    \n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Tuple lengths are not equal\")\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must have the same length\")\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    }
]